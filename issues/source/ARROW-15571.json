{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13426642",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642",
    "key": "ARROW-15571",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "kernel",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "name": "Open",
            "id": "1",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                "id": 2,
                "key": "new",
                "colorName": "blue-gray",
                "name": "To Do"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
            "name": "rtpsw",
            "key": "JIRAUSER284707",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
            },
            "displayName": "Yaron Gvili",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
            "name": "rtpsw",
            "key": "JIRAUSER284707",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
            },
            "displayName": "Yaron Gvili",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 23400,
            "total": 23400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 23400,
            "total": 23400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15571/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 39,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/worklog/720951",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rtpsw opened a new pull request #12338:\nURL: https://github.com/apache/arrow/pull/12338\n\n\n   This is a proposal for resolving [ARROW-15571](https://issues.apache.org/jira/browse/ARROW-15571). Tests will be added when the resolution approach is agreed.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-04T15:48:42.198+0000",
                    "updated": "2022-02-04T15:48:42.198+0000",
                    "started": "2022-02-04T15:48:42.197+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "720951",
                    "issueId": "13426642"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/worklog/720952",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12338:\nURL: https://github.com/apache/arrow/pull/12338#issuecomment-1030110952\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-04T15:49:04.872+0000",
                    "updated": "2022-02-04T15:49:04.872+0000",
                    "started": "2022-02-04T15:49:04.872+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "720952",
                    "issueId": "13426642"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/worklog/720974",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on pull request #12338:\nURL: https://github.com/apache/arrow/pull/12338#issuecomment-1030122553\n\n\n   Thanks for the PR @rtpsw ! I think the min/max features are already covered but sqrt might be interesting.\r\n   @cyb70289 would we want a dedicated sqrt kernel?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-04T16:01:23.493+0000",
                    "updated": "2022-02-04T16:01:23.493+0000",
                    "started": "2022-02-04T16:01:23.493+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "720974",
                    "issueId": "13426642"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/worklog/721385",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #12338:\nURL: https://github.com/apache/arrow/pull/12338#issuecomment-1030529616\n\n\n   > @cyb70289 would we want a dedicated sqrt kernel?\r\n   \r\n   Given the big performance gap of `pow(x, 0.5)` and `sqrt(x)` for floating point inputs, looks a dedicated sqrt kernel is useful.\r\n   https://quick-bench.com/q/17n5Kx7lgcNtSA0p6uqSp3ryBu0\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-05T05:18:51.213+0000",
                    "updated": "2022-02-05T05:18:51.213+0000",
                    "started": "2022-02-05T05:18:51.212+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "721385",
                    "issueId": "13426642"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/worklog/721536",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rtpsw commented on pull request #12338:\nURL: https://github.com/apache/arrow/pull/12338#issuecomment-1030700061\n\n\n   > I think the min/max features are already covered\r\n   \r\n   This is being discussed at [ARROW-15571](https://issues.apache.org/jira/browse/ARROW-15571). I reported there on benchmark results showing better performance for the minimum/maximum operations in this PR.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-05T21:15:17.695+0000",
                    "updated": "2022-02-05T21:15:17.695+0000",
                    "started": "2022-02-05T21:15:17.694+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "721536",
                    "issueId": "13426642"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/worklog/725754",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rtpsw commented on pull request #12338:\nURL: https://github.com/apache/arrow/pull/12338#issuecomment-1037854619\n\n\n   I kept min/max per the discussion in [ARROW-15571](https://issues.apache.org/jira/browse/ARROW-15571). Which units tests are desired? Presumably they should be similar to existing ones - please point to test files I should look into.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-13T06:39:08.909+0000",
                    "updated": "2022-02-13T06:39:08.909+0000",
                    "started": "2022-02-13T06:39:08.909+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "725754",
                    "issueId": "13426642"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/worklog/726067",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rtpsw commented on pull request #12338:\nURL: https://github.com/apache/arrow/pull/12338#issuecomment-1037854619\n\n\n   I kept min/max per the discussion in [ARROW-15571](https://issues.apache.org/jira/browse/ARROW-15571). Which units tests are desired? Presumably they should be similar to existing ones - please point to test files I should look into.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-14T02:39:50.990+0000",
                    "updated": "2022-02-14T02:39:50.990+0000",
                    "started": "2022-02-14T02:39:50.990+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "726067",
                    "issueId": "13426642"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/worklog/726916",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #12338:\nURL: https://github.com/apache/arrow/pull/12338#issuecomment-1040064039\n\n\n   Thanks @rtpsw !\r\n   \r\n   I suggest we first create a solid benchmark for `max_element_wise` before optimizing it. Adhoc benchmark is hard to get right.\r\n   E.g., for the benchmark code in [jira comment](https://issues.apache.org/jira/browse/ARROW-15571?focusedCommentId=17487559&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17487559), on my test machine, the speed ratio is 1.4 to 3.7. But if I swap the order (call `maximum` before `max_element_wise`, t0 is still `max_element_wise`, t1 is stil `maximum`), the speed ratio becomes 0.3 to 0.8 (slower). After some refinement it gives about 20% improvement, which looks reasonable.\r\n   \r\n   Another reason is it duplicates `max_element_wise`, but with much fewer data types supported. I think it's better to augment existing kernel than inventing a new one.\r\n   cc @lidavidm for comments.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-15T09:46:17.440+0000",
                    "updated": "2022-02-15T09:46:17.440+0000",
                    "started": "2022-02-15T09:46:17.440+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "726916",
                    "issueId": "13426642"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/worklog/727010",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #12338:\nURL: https://github.com/apache/arrow/pull/12338#issuecomment-1040275347\n\n\n   Right, I think here: https://github.com/apache/arrow/blob/26d6e6217ff79451a3fe366bcc88293c7ae67417/cpp/src/arrow/compute/kernels/scalar_compare.cc#L361\r\n   \r\n   We can basically check if `batch.num_values() == 2` and if so, delegate to ScalarBinaryEqualTypes.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-15T13:30:02.943+0000",
                    "updated": "2022-02-15T13:30:02.943+0000",
                    "started": "2022-02-15T13:30:02.942+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "727010",
                    "issueId": "13426642"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/worklog/727419",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #12338:\nURL: https://github.com/apache/arrow/pull/12338#issuecomment-1040064039\n\n\n   Thanks @rtpsw !\r\n   \r\n   I suggest we first create a solid benchmark for `max_element_wise` before optimizing it. Adhoc benchmark is hard to get right.\r\n   E.g., for the benchmark code in [jira comment](https://issues.apache.org/jira/browse/ARROW-15571?focusedCommentId=17487559&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17487559), on my test machine, the speed ratio is 1.4 to 3.7. But if I swap the order (call `maximum` before `max_element_wise`, t0 is still `max_element_wise`, t1 is stil `maximum`), the speed ratio becomes 0.3 to 0.8 (slower). After some refinement it gives about 20% improvement, which looks reasonable.\r\n   \r\n   Another reason is it duplicates `max_element_wise`, but with much fewer data types supported. I think it's better to augment existing kernel than inventing a new one.\r\n   cc @lidavidm for comments.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-15T18:49:37.873+0000",
                    "updated": "2022-02-15T18:49:37.873+0000",
                    "started": "2022-02-15T18:49:37.873+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "727419",
                    "issueId": "13426642"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/worklog/727616",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #12338:\nURL: https://github.com/apache/arrow/pull/12338#issuecomment-1040275347\n\n\n   Right, I think here: https://github.com/apache/arrow/blob/26d6e6217ff79451a3fe366bcc88293c7ae67417/cpp/src/arrow/compute/kernels/scalar_compare.cc#L361\r\n   \r\n   We can basically check if `batch.num_values() == 2` and if so, delegate to ScalarBinaryEqualTypes.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-15T19:05:33.876+0000",
                    "updated": "2022-02-15T19:05:33.876+0000",
                    "started": "2022-02-15T19:05:33.876+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "727616",
                    "issueId": "13426642"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/worklog/729650",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rtpsw commented on pull request #12338:\nURL: https://github.com/apache/arrow/pull/12338#issuecomment-1044517457\n\n\n   > Right, I think here:\r\n   > \r\n   > https://github.com/apache/arrow/blob/26d6e6217ff79451a3fe366bcc88293c7ae67417/cpp/src/arrow/compute/kernels/scalar_compare.cc#L361\r\n   > \r\n   > We can basically check if `batch.num_values() == 2` and if so, delegate to ScalarBinaryEqualTypes.\r\n   \r\n   I'm not sure what code you meant. I tried the following:\r\n   ```\r\n       if (batch.num_values() == 2) {\r\n         return ExecBinaryMinMaxScalar::Exec(ctx, options, batch, out);\r\n       }\r\n   ```\r\n   Unfortunately, this led to a large number of complaints form the compiler, e.g., for `struct Minimum`.\r\n   \r\n   Then, I tried the following:\r\n   ```\r\n     static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\r\n       const ElementWiseAggregateOptions& options = MinMaxState::Get(ctx);\r\n       if (batch.num_values() == 2) {\r\n         return ExecBinaryMinMaxScalar<Op>(ctx, options, batch, out);\r\n       }\r\n   ```\r\n   This compiles but, unfortunately, then `arrow-compute-scalar-test` fails with a segmentation fault at TestVarArgsCompareNumeric/0, where TypeParam = arrow::UInt8Type\".\r\n   \r\n   I don't know enough to predict the impact of such a change even if made to work. I tend to say it is out of scope for this issue.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-18T13:19:35.786+0000",
                    "updated": "2022-02-18T13:19:35.786+0000",
                    "started": "2022-02-18T13:19:35.786+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "729650",
                    "issueId": "13426642"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/worklog/729653",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rtpsw edited a comment on pull request #12338:\nURL: https://github.com/apache/arrow/pull/12338#issuecomment-1044517457\n\n\n   > Right, I think here:\r\n   > \r\n   > https://github.com/apache/arrow/blob/26d6e6217ff79451a3fe366bcc88293c7ae67417/cpp/src/arrow/compute/kernels/scalar_compare.cc#L361\r\n   > \r\n   > We can basically check if `batch.num_values() == 2` and if so, delegate to ScalarBinaryEqualTypes.\r\n   \r\n   I'm not sure what code you meant. I tried the following:\r\n   ```\r\n       if (batch.num_values() == 2) {\r\n         return ExecBinaryMinMaxScalar::Exec(ctx, options, batch, out);\r\n       }\r\n   ```\r\n   Unfortunately, this led to a large number of complaints from the compiler, e.g., for `struct Minimum`.\r\n   \r\n   Then, I tried the following:\r\n   ```\r\n     static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\r\n       const ElementWiseAggregateOptions& options = MinMaxState::Get(ctx);\r\n       if (batch.num_values() == 2) {\r\n         return ExecBinaryMinMaxScalar<Op>(ctx, options, batch, out);\r\n       }\r\n   ```\r\n   This compiles but, unfortunately, then `arrow-compute-scalar-test` fails with a segmentation fault at TestVarArgsCompareNumeric/0, where TypeParam = arrow::UInt8Type\".\r\n   \r\n   I don't know enough to predict the impact of such a change even if made to work. I tend to say it is out of scope for this issue.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-18T13:23:58.804+0000",
                    "updated": "2022-02-18T13:23:58.804+0000",
                    "started": "2022-02-18T13:23:58.804+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "729653",
                    "issueId": "13426642"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/worklog/729655",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rtpsw edited a comment on pull request #12338:\nURL: https://github.com/apache/arrow/pull/12338#issuecomment-1044517457\n\n\n   > Right, I think here:\r\n   > \r\n   > https://github.com/apache/arrow/blob/26d6e6217ff79451a3fe366bcc88293c7ae67417/cpp/src/arrow/compute/kernels/scalar_compare.cc#L361\r\n   > \r\n   > We can basically check if `batch.num_values() == 2` and if so, delegate to ScalarBinaryEqualTypes.\r\n   \r\n   I'm not sure what code you meant. I tried the following:\r\n   ```\r\n       if (batch.num_values() == 2) {\r\n         return ExecBinaryMinMaxScalar::Exec(ctx, options, batch, out);\r\n       }\r\n   ```\r\n   Unfortunately, this led to a large number of complaints from the compiler, e.g., for `struct Minimum`.\r\n   \r\n   Then, I tried the following:\r\n   ```\r\n     static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\r\n       const ElementWiseAggregateOptions& options = MinMaxState::Get(ctx);\r\n       if (batch.num_values() == 2) {\r\n         return ExecBinaryMinMaxScalar<Op>(ctx, options, batch, out);\r\n       }\r\n   ```\r\n   This compiles but, unfortunately, then `arrow-compute-scalar-test` fails with a segmentation fault at \"TestVarArgsCompareNumeric/0, where TypeParam = arrow::UInt8Type\".\r\n   \r\n   I don't know enough to predict the impact of such a change even if made to work. I tend to say it is out of scope for this issue.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-18T13:26:26.904+0000",
                    "updated": "2022-02-18T13:26:26.904+0000",
                    "started": "2022-02-18T13:26:26.904+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "729655",
                    "issueId": "13426642"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/worklog/729656",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #12338:\nURL: https://github.com/apache/arrow/pull/12338#issuecomment-1044526442\n\n\n   Hmm, I'll give it a try when I get a chance - ideally, it should be equivalent to having a specialized kernel, but without having to choose different functions based on input arity\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-18T13:26:49.457+0000",
                    "updated": "2022-02-18T13:26:49.457+0000",
                    "started": "2022-02-18T13:26:49.457+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "729656",
                    "issueId": "13426642"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/worklog/730219",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on pull request #12338:\nURL: https://github.com/apache/arrow/pull/12338#issuecomment-1046498201\n\n\n   Benchmarked with PR https://github.com/apache/arrow/pull/12478, this specialized binary min/max improves performance significantly (test set = 32k integers).\r\n   \r\n   When there's no nulls, perf improves from 619 to 1084. Improvement is much bigger with nulls, as binary arithmetic kernel always runs the exec function regardless of nulls to leverage auto vectorization.\r\n   \r\n   max_element_wise(variadic)\r\n   ```\r\n   MaxElementWiseArrayArrayInt64/32768/10000        139 us          139 us         5034 items_per_second=235.612M/s null_percent=0.01 size=32.768k\r\n   MaxElementWiseArrayArrayInt64/32768/100          185 us          185 us         3787 items_per_second=177.552M/s null_percent=1 size=32.768k\r\n   MaxElementWiseArrayArrayInt64/32768/10           269 us          269 us         2603 items_per_second=121.876M/s null_percent=10 size=32.768k\r\n   MaxElementWiseArrayArrayInt64/32768/2            472 us          472 us         1483 items_per_second=69.4022M/s null_percent=50 size=32.768k\r\n   MaxElementWiseArrayArrayInt64/32768/1           19.8 us         19.8 us        35449 items_per_second=1.65711G/s null_percent=100 size=32.768k\r\n   MaxElementWiseArrayArrayInt64/32768/0           52.9 us         52.9 us        13172 items_per_second=619.058M/s null_percent=0 size=32.768k\r\n   ```\r\n   \r\n   maximum(binary)\r\n   ```\r\n   MaxElementWiseArrayArrayInt64/32768/10000       30.3 us         30.3 us        23388 items_per_second=1079.83M/s null_percent=0.01 size=32.768k\r\n   MaxElementWiseArrayArrayInt64/32768/100         30.3 us         30.3 us        23055 items_per_second=1082.26M/s null_percent=1 size=32.768k\r\n   MaxElementWiseArrayArrayInt64/32768/10          30.2 us         30.2 us        23153 items_per_second=1085.95M/s null_percent=10 size=32.768k\r\n   MaxElementWiseArrayArrayInt64/32768/2           30.4 us         30.4 us        23105 items_per_second=1079.41M/s null_percent=50 size=32.768k\r\n   MaxElementWiseArrayArrayInt64/32768/1           30.1 us         30.1 us        23183 items_per_second=1086.96M/s null_percent=100 size=32.768k\r\n   MaxElementWiseArrayArrayInt64/32768/0           30.2 us         30.2 us        23091 items_per_second=1084.69M/s null_percent=0 size=32.768k\r\n   ```\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-21T05:53:04.380+0000",
                    "updated": "2022-02-21T05:53:04.380+0000",
                    "started": "2022-02-21T05:53:04.379+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "730219",
                    "issueId": "13426642"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/worklog/730385",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #12338:\nURL: https://github.com/apache/arrow/pull/12338#issuecomment-1046948297\n\n\n   @cyb70289 thanks for checking this! It should be possible to specialize the variadic kernel for this case (I haven't gotten a chance to look at the details yet though)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-21T14:39:48.972+0000",
                    "updated": "2022-02-21T14:39:48.972+0000",
                    "started": "2022-02-21T14:39:48.972+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "730385",
                    "issueId": "13426642"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/worklog/730428",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rtpsw commented on pull request #12338:\nURL: https://github.com/apache/arrow/pull/12338#issuecomment-1047044901\n\n\n   Thanks @cyb70289 !\r\n   \r\n   @lidavidm: What do you think remains to be done? Should I add unit tests like in https://github.com/apache/arrow/pull/12412/ ? Or perhaps the binary scalar kernels should be structured differently?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-21T16:20:20.906+0000",
                    "updated": "2022-02-21T16:20:20.906+0000",
                    "started": "2022-02-21T16:20:20.906+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "730428",
                    "issueId": "13426642"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/worklog/730865",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rtpsw commented on pull request #12338:\nURL: https://github.com/apache/arrow/pull/12338#issuecomment-1047757562\n\n\n   > Another reason is it duplicates `max_element_wise`, but with much fewer data types supported. I think it's better to augment existing kernel than inventing a new one.\r\n   \r\n   IIUC, your suggestion is to add the binary scalar kernels to the existing `max_element_wise` function. I scanned the Arrow codebase looking for a case where a `Function` was added kernels in more than one place, e.g. in `scalar_compare.cc` as in `max_element_wise` and in `scalar_arithmetic.cc` as in `maximum`, but didn't find such a case. I'm not sure how something like this would be implemented. It looks like in one place the function would need to get created with kernels and added to the registry and in another place get fetched from the registry and added additional kernels. This seems to require an annoying change like a predefined order of initialization across the `scalar_*.cc` files or the adding of a get-or-create method to the registry.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-22T12:42:12.128+0000",
                    "updated": "2022-02-22T12:42:12.128+0000",
                    "started": "2022-02-22T12:42:12.128+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "730865",
                    "issueId": "13426642"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/worklog/730940",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #12338:\nURL: https://github.com/apache/arrow/pull/12338#issuecomment-1047834425\n\n\n   Yes, all the kernels need to be added in the same place. However, we don't need to add new kernels, we can branch within the existing kernel. See this sketch (incomplete):\r\n   \r\n   <details>\r\n   \r\n   ```diff\r\n   diff --git a/cpp/src/arrow/compute/kernels/scalar_compare.cc b/cpp/src/arrow/compute/kernels/scalar_compare.cc\r\n   index fc8527810..7ee887233 100644\r\n   --- a/cpp/src/arrow/compute/kernels/scalar_compare.cc\r\n   +++ b/cpp/src/arrow/compute/kernels/scalar_compare.cc\r\n   @@ -70,24 +70,24 @@ struct GreaterEqual {\r\n    \r\n    struct Minimum {\r\n      template <typename T, typename Arg0, typename Arg1>\r\n   -  static enable_if_floating_value<T> Call(Arg0 left, Arg1 right) {\r\n   +  static enable_if_floating_value<T> Call(KernelContext*, Arg0 left, Arg1 right, Status*) {\r\n        static_assert(std::is_same<T, Arg0>::value && std::is_same<Arg0, Arg1>::value, \"\");\r\n        return std::fmin(left, right);\r\n      }\r\n    \r\n      template <typename T, typename Arg0, typename Arg1>\r\n   -  static enable_if_integer_value<T> Call(Arg0 left, Arg1 right) {\r\n   +  static enable_if_integer_value<T> Call(KernelContext*, Arg0 left, Arg1 right, Status*) {\r\n        static_assert(std::is_same<T, Arg0>::value && std::is_same<Arg0, Arg1>::value, \"\");\r\n        return std::min(left, right);\r\n      }\r\n    \r\n      template <typename T, typename Arg0, typename Arg1>\r\n   -  static enable_if_decimal_value<T> Call(Arg0 left, Arg1 right) {\r\n   +  static enable_if_decimal_value<T> Call(KernelContext*, Arg0 left, Arg1 right, Status*) {\r\n        static_assert(std::is_same<T, Arg0>::value && std::is_same<Arg0, Arg1>::value, \"\");\r\n        return std::min(left, right);\r\n      }\r\n    \r\n   -  static string_view Call(string_view left, string_view right) {\r\n   +  static string_view Call(KernelContext*, string_view left, string_view right, Status*) {\r\n        return std::min(left, right);\r\n      }\r\n    \r\n   @@ -114,24 +114,24 @@ struct Minimum {\r\n    \r\n    struct Maximum {\r\n      template <typename T, typename Arg0, typename Arg1>\r\n   -  static enable_if_floating_value<T> Call(Arg0 left, Arg1 right) {\r\n   +  static enable_if_floating_value<T> Call(KernelContext*, Arg0 left, Arg1 right, Status*) {\r\n        static_assert(std::is_same<T, Arg0>::value && std::is_same<Arg0, Arg1>::value, \"\");\r\n        return std::fmax(left, right);\r\n      }\r\n    \r\n      template <typename T, typename Arg0, typename Arg1>\r\n   -  static enable_if_integer_value<T> Call(Arg0 left, Arg1 right) {\r\n   +  static enable_if_integer_value<T> Call(KernelContext*, Arg0 left, Arg1 right, Status*) {\r\n        static_assert(std::is_same<T, Arg0>::value && std::is_same<Arg0, Arg1>::value, \"\");\r\n        return std::max(left, right);\r\n      }\r\n    \r\n      template <typename T, typename Arg0, typename Arg1>\r\n   -  static enable_if_decimal_value<T> Call(Arg0 left, Arg1 right) {\r\n   +  static enable_if_decimal_value<T> Call(KernelContext*, Arg0 left, Arg1 right, Status*) {\r\n        static_assert(std::is_same<T, Arg0>::value && std::is_same<Arg0, Arg1>::value, \"\");\r\n        return std::max(left, right);\r\n      }\r\n    \r\n   -  static string_view Call(string_view left, string_view right) {\r\n   +  static string_view Call(KernelContext*, string_view left, string_view right, Status*) {\r\n        return std::max(left, right);\r\n      }\r\n    \r\n   @@ -330,11 +330,12 @@ template <typename OutType, typename Op>\r\n    struct ScalarMinMax {\r\n      using OutValue = typename GetOutputType<OutType>::T;\r\n    \r\n   -  static void ExecScalar(const ExecBatch& batch,\r\n   +  static Status ExecScalar(KernelContext* ctx, const ExecBatch& batch,\r\n                             const ElementWiseAggregateOptions& options, Scalar* out) {\r\n        // All arguments are scalar\r\n        OutValue value{};\r\n        bool valid = false;\r\n   +    Status st = Status::OK();\r\n        for (const auto& arg : batch.values) {\r\n          // Ignore non-scalar arguments so we can use it in the mixed-scalar-and-array case\r\n          if (!arg.is_scalar()) continue;\r\n   @@ -342,31 +343,63 @@ struct ScalarMinMax {\r\n          if (!scalar.is_valid) {\r\n            if (options.skip_nulls) continue;\r\n            out->is_valid = false;\r\n   -        return;\r\n   +        return st;\r\n          }\r\n          if (!valid) {\r\n            value = UnboxScalar<OutType>::Unbox(scalar);\r\n            valid = true;\r\n          } else {\r\n            value = Op::template Call<OutValue, OutValue, OutValue>(\r\n   -            value, UnboxScalar<OutType>::Unbox(scalar));\r\n   +            ctx, value, UnboxScalar<OutType>::Unbox(scalar), &st);\r\n   +        RETURN_NOT_OK(st);\r\n          }\r\n        }\r\n        out->is_valid = valid;\r\n        if (valid) {\r\n          BoxScalar<OutType>::Box(value, out);\r\n        }\r\n   +    return st;\r\n   +  }\r\n   +\r\n   +  // Specialization for 2-ary case with skip_nulls\r\n   +  static Status ExecBinary(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\r\n   +    if (out->is_scalar()) {\r\n   +      out->scalar()->is_valid = batch[0].scalar()->is_valid && batch[1].scalar()->is_valid;\r\n   +    } else if (batch[0].is_scalar()) {\r\n   +      ArrayData* output = out->mutable_array();\r\n   +      // TODO: if scalar is invalid, allocate all-null bitmap; else:\r\n   +      // if batch[1].MayHaveNulls(), copy its bitmap (batch[1] should\r\n   +      // not be a scalar since then we'd be in the first case above)\r\n   +    } else if (batch[1].is_scalar()) {\r\n   +      // TODO:\r\n   +    } else {\r\n   +      ArrayData* output = out->mutable_array();\r\n   +      const ArrayData& left = *batch[0].array();\r\n   +      const ArrayData& right = *batch[1].array();\r\n   +      // TODO: note that left and/or right may not have a validity\r\n   +      // bitmap\r\n   +      ARROW_ASSIGN_OR_RAISE(output->buffers[0], ::arrow::internal::BitmapAnd(\r\n   +          ctx->memory_pool(),\r\n   +          left.GetValues<uint8_t>(0, 0), left.offset,\r\n   +          right.GetValues<uint8_t>(0, 0), right.offset,\r\n   +          batch.length, /*out_offset=*/0));\r\n   +    }\r\n   +    return applicator::ScalarBinaryEqualTypes<OutType, OutType, Op>::Exec(ctx, batch, out);\r\n      }\r\n    \r\n      static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\r\n        const ElementWiseAggregateOptions& options = MinMaxState::Get(ctx);\r\n   +\r\n   +    if (batch.num_values() == 2 && options.skip_nulls) {\r\n   +      return ExecBinary(ctx, batch, out);\r\n   +    }\r\n   +\r\n        const auto descrs = batch.GetDescriptors();\r\n        const size_t scalar_count =\r\n            static_cast<size_t>(std::count_if(batch.values.begin(), batch.values.end(),\r\n                                              [](const Datum& d) { return d.is_scalar(); }));\r\n        if (scalar_count == batch.values.size()) {\r\n   -      ExecScalar(batch, options, out->scalar().get());\r\n   -      return Status::OK();\r\n   +      return ExecScalar(ctx, batch, options, out->scalar().get());\r\n        }\r\n    \r\n        ArrayData* output = out->mutable_array();\r\n   @@ -382,7 +415,7 @@ struct ScalarMinMax {\r\n        if (scalar_count > 0) {\r\n          ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> temp_scalar,\r\n                                MakeScalar(out->type(), 0));\r\n   -      ExecScalar(batch, options, temp_scalar.get());\r\n   +      RETURN_NOT_OK(ExecScalar(ctx, batch, options, temp_scalar.get()));\r\n          if (temp_scalar->is_valid) {\r\n            const auto value = UnboxScalar<OutType>::Unbox(*temp_scalar);\r\n            initialize_output = false;\r\n   @@ -444,6 +477,7 @@ struct ScalarMinMax {\r\n          }\r\n        }\r\n    \r\n   +    Status st = Status::OK();\r\n        for (const auto& array : arrays) {\r\n          OutputArrayWriter<OutType> writer(out->mutable_array());\r\n          ArrayIterator<OutType> out_it(*output);\r\n   @@ -454,7 +488,7 @@ struct ScalarMinMax {\r\n                auto u = out_it();\r\n                if (!output->buffers[0] ||\r\n                    bit_util::GetBit(output->buffers[0]->data(), index)) {\r\n   -              writer.Write(Op::template Call<OutValue, OutValue, OutValue>(u, value));\r\n   +              writer.Write(Op::template Call<OutValue, OutValue, OutValue>(ctx, u, value, &st));\r\n                } else {\r\n                  writer.Write(value);\r\n                }\r\n   @@ -468,7 +502,7 @@ struct ScalarMinMax {\r\n              });\r\n        }\r\n        output->null_count = output->buffers[0] ? -1 : 0;\r\n   -    return Status::OK();\r\n   +    return st;\r\n      }\r\n    };\r\n    \r\n   @@ -492,6 +526,7 @@ Status ExecBinaryMinMaxScalar(KernelContext* ctx,\r\n      const auto& first_scalar = *batch.values.front().scalar();\r\n      string_view result = checked_cast<const BaseBinaryScalar&>(first_scalar).view();\r\n      bool valid = first_scalar.is_valid;\r\n   +  Status st = Status::OK();\r\n      for (size_t i = 1; i < batch.values.size(); i++) {\r\n        const auto& scalar = *batch[i].scalar();\r\n        if (!scalar.is_valid) {\r\n   @@ -499,7 +534,7 @@ Status ExecBinaryMinMaxScalar(KernelContext* ctx,\r\n          continue;\r\n        } else {\r\n          string_view value = checked_cast<const BaseBinaryScalar&>(scalar).view();\r\n   -      result = !valid ? value : Op::Call(result, value);\r\n   +      result = !valid ? value : Op::Call(ctx, result, value, &st);\r\n          valid = true;\r\n        }\r\n      }\r\n   @@ -510,7 +545,7 @@ Status ExecBinaryMinMaxScalar(KernelContext* ctx,\r\n      } else {\r\n        output->is_valid = false;\r\n      }\r\n   -  return Status::OK();\r\n   +  return st;\r\n    }\r\n    \r\n    template <typename Type, typename Op>\r\n   @@ -537,10 +572,11 @@ struct BinaryScalarMinMax {\r\n        RETURN_NOT_OK(builder.Reserve(batch.length));\r\n        RETURN_NOT_OK(builder.ReserveData(estimated_final_size));\r\n    \r\n   +    Status st = Status::OK();\r\n        for (int64_t row = 0; row < batch.length; row++) {\r\n          util::optional<string_view> result;\r\n          auto visit_value = [&](string_view value) {\r\n   -        result = !result ? value : Op::Call(*result, value);\r\n   +        result = !result ? value : Op::Call(ctx, *result, value, &st);\r\n          };\r\n    \r\n          for (size_t col = 0; col < batch.values.size(); col++) {\r\n   @@ -548,6 +584,7 @@ struct BinaryScalarMinMax {\r\n              const auto& scalar = *batch[col].scalar();\r\n              if (scalar.is_valid) {\r\n                visit_value(UnboxScalar<Type>::Unbox(scalar));\r\n   +            RETURN_NOT_OK(st);\r\n              } else if (!options.skip_nulls) {\r\n                result = util::nullopt;\r\n                break;\r\n   @@ -561,6 +598,7 @@ struct BinaryScalarMinMax {\r\n                const int64_t length = offsets[row + 1] - offsets[row];\r\n                visit_value(\r\n                    string_view(reinterpret_cast<const char*>(data + offsets[row]), length));\r\n   +            RETURN_NOT_OK(st);\r\n              } else if (!options.skip_nulls) {\r\n                result = util::nullopt;\r\n                break;\r\n   @@ -629,10 +667,11 @@ struct FixedSizeBinaryScalarMinMax {\r\n        RETURN_NOT_OK(builder.ReserveData(estimated_final_size));\r\n    \r\n        std::vector<string_view> valid_cols(batch.values.size());\r\n   +    Status st = Status::OK();\r\n        for (int64_t row = 0; row < batch.length; row++) {\r\n          string_view result;\r\n          auto visit_value = [&](string_view value) {\r\n   -        result = result.empty() ? value : Op::Call(result, value);\r\n   +        result = result.empty() ? value : Op::Call(ctx, result, value, &st);\r\n          };\r\n    \r\n          for (size_t col = 0; col < batch.values.size(); col++) {\r\n   @@ -640,6 +679,7 @@ struct FixedSizeBinaryScalarMinMax {\r\n              const auto& scalar = *batch[col].scalar();\r\n              if (scalar.is_valid) {\r\n                visit_value(UnboxScalar<FixedSizeBinaryType>::Unbox(scalar));\r\n   +            RETURN_NOT_OK(st);\r\n              } else if (!options.skip_nulls) {\r\n                result = string_view();\r\n                break;\r\n   @@ -651,6 +691,7 @@ struct FixedSizeBinaryScalarMinMax {\r\n                const auto data = array.GetValues<uint8_t>(1, /*absolute_offset=*/0);\r\n                visit_value(string_view(\r\n                    reinterpret_cast<const char*>(data) + row * byte_width, byte_width));\r\n   +            RETURN_NOT_OK(st);\r\n              } else if (!options.skip_nulls) {\r\n                result = string_view();\r\n                break;\r\n   @@ -699,12 +740,14 @@ std::shared_ptr<ScalarFunction> MakeScalarMinMax(std::string name,\r\n      auto func = std::make_shared<VarArgsCompareFunction>(\r\n          name, Arity::VarArgs(), doc, &default_element_wise_aggregate_options);\r\n      for (const auto& ty : NumericTypes()) {\r\n   -    auto exec = GeneratePhysicalNumeric<ScalarMinMax, Op>(ty);\r\n   -    ScalarKernel kernel{KernelSignature::Make({ty}, ty, /*is_varargs=*/true), exec,\r\n   -                        MinMaxState::Init};\r\n   -    kernel.null_handling = NullHandling::type::COMPUTED_NO_PREALLOCATE;\r\n   -    kernel.mem_allocation = MemAllocation::type::PREALLOCATE;\r\n   -    DCHECK_OK(func->AddKernel(std::move(kernel)));\r\n   +    {\r\n   +      auto exec = GeneratePhysicalNumeric<ScalarMinMax, Op>(ty);\r\n   +      ScalarKernel kernel{KernelSignature::Make({ty}, ty, /*is_varargs=*/true), exec,\r\n   +        MinMaxState::Init};\r\n   +      kernel.null_handling = NullHandling::type::COMPUTED_NO_PREALLOCATE;\r\n   +      kernel.mem_allocation = MemAllocation::type::PREALLOCATE;\r\n   +      DCHECK_OK(func->AddKernel(std::move(kernel)));\r\n   +    }\r\n      }\r\n      for (const auto& ty : TemporalTypes()) {\r\n        auto exec = GeneratePhysicalNumeric<ScalarMinMax, Op>(ty);\r\n   ```\r\n   \r\n   </details>\r\n   \r\n   By the way, I note on the JIRA that we want to return NaN if only one NaN input is provided. Is this not already the case?\r\n   \r\n   ```python\r\n   >>> pc.min_element_wise(pa.scalar(float('nan')))\r\n   <pyarrow.DoubleScalar: nan>\r\n   >>> pc.min_element_wise([float('nan')])\r\n   <pyarrow.lib.DoubleArray object at 0x7f1693ad7e80>\r\n   [\r\n     nan\r\n   ]\r\n   >>> pc.min_element_wise([float('nan')], pa.array([None], 'float32'))\r\n   <pyarrow.lib.DoubleArray object at 0x7f1693b40160>\r\n   [\r\n     nan\r\n   ]\r\n   >>> pc.min_element_wise(pa.scalar(float('nan')), pa.scalar(None, 'float32'))\r\n   <pyarrow.DoubleScalar: nan>\r\n   ```\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-22T14:09:55.695+0000",
                    "updated": "2022-02-22T14:09:55.695+0000",
                    "started": "2022-02-22T14:09:55.695+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "730940",
                    "issueId": "13426642"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 23400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@475b2b31[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@49c18216[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7982785e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3c96944a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@35ff7c1e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@24d9f033[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4ef33c7e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@46cfc52e[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@81e5e65[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@63ad7f3d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@346aaffa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@cb4eaec[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 23400,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Feb 08 15:03:18 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15571/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2022-02-04T15:26:48.000+0000",
        "updated": "2022-05-12T20:42:48.000+0000",
        "timeoriginalestimate": null,
        "description": "The list of execution engine's binary scalar kernels currently available in `cpp/src/arrow/compute/kernels/scalar_arithmetic.cc` does not cover the common minimum and maximum functions.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 23400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add min/max binary scalar kernels to execution engine",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/comment/17487142",
                    "id": "17487142",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "body": "Min and max are covered in https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/kernels/aggregate_basic.cc and square root can be done with power to 0.5 https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/kernels/scalar_arithmetic.cc#L445.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "created": "2022-02-04T15:47:24.281+0000",
                    "updated": "2022-02-04T15:48:48.492+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/comment/17487143",
                    "id": "17487143",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Min/max are available as aggregations: [https://arrow.apache.org/docs/dev/cpp/compute.html#aggregations] and there are also element-wise min/max: [https://arrow.apache.org/docs/dev/cpp/compute.html#comparisons]\r\n\r\nSquare root is indeed not available, though power is: [https://arrow.apache.org/docs/dev/cpp/compute.html#arithmetic-functions] (presumably, a dedicated sqrt would be faster, though)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-02-04T15:48:28.323+0000",
                    "updated": "2022-02-04T15:48:28.323+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/comment/17487158",
                    "id": "17487158",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
                        "name": "rtpsw",
                        "key": "JIRAUSER284707",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
                        },
                        "displayName": "Yaron Gvili",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Sorry, I should have been cleared in the title that I'm referring to floating point scalars. Are the aggregate operations good for operating on floating point scalars, rather than arrays? Is power good for operating on floating points, rather than integers? I'm relatively new to Arrow, so I may have missed a couple of things.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
                        "name": "rtpsw",
                        "key": "JIRAUSER284707",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
                        },
                        "displayName": "Yaron Gvili",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-02-04T16:22:24.168+0000",
                    "updated": "2022-02-04T16:22:24.168+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/comment/17487164",
                    "id": "17487164",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Looking at the PR you're looking for a row-wise min/max? In which case that is implemented on floating point values, yes. (It will also work given scalar values.)\r\n\r\nPower also works on floating point values.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-02-04T16:24:57.153+0000",
                    "updated": "2022-02-04T16:24:57.153+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/comment/17487181",
                    "id": "17487181",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
                        "name": "rtpsw",
                        "key": "JIRAUSER284707",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
                        },
                        "displayName": "Yaron Gvili",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "OK regarding power working on floating point values. This [SO|https://stackoverflow.com/questions/17417490/difference-between-sqrtx-and-powx-0-5] suggests sqrt(x ) would be faster and a bit more accurate than pow(x, 0.5), so there is room for a sqrt operation.\r\n\r\nRegarding my goal, it is to apply the operations to a single column with best performance in Arrow. Here's an example for how I'm currently invoking the code in my PR:\r\n\r\n\u00a0\r\n{code:java}\r\nProjectNodeOptions(\r\n  \u00a0 {call(\"minimum\",\r\n  \u00a0 \u00a0 \u00a0 {call(\"maximum\",\r\n  \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {call(\"square_root\",\r\n  \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 {field_ref(\"column_0\")}),\r\n  \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 literal(low_threshold)}),\r\n  \u00a0 \u00a0 \u00a0 literal(high_threshold)})},\r\n  \u00a0 {\"result_0\"}){code}\r\nNote that the above is `using namespace arrow::compute` and that \"column_0\" is of type double. How should I achieve the same functionality with the existing operations? If the solution involves aggregate operations, do they provide best performance, as compared to (the missing) scalar operations?\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
                        "name": "rtpsw",
                        "key": "JIRAUSER284707",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
                        },
                        "displayName": "Yaron Gvili",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-02-04T16:51:39.670+0000",
                    "updated": "2022-02-04T16:52:18.488+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/comment/17487186",
                    "id": "17487186",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "body": "In pyarrow 7.0.0 that would be something like this? :\r\n{code:python}\r\nimport pyarrow as pa\r\nimport pyarrow.compute as pc\r\n\r\nlow_threshold = 1\r\nhigh_threshold = 3\r\n\r\narr = pa.array([1, 2, 3])\r\npc.min_element_wise(pc.max_element_wise(pc.power(arr, 0.5), low_threshold), high_threshold)\r\n{code}\r\n<pyarrow.lib.DoubleArray object at 0x126795a00>\r\n[\r\n1,\r\n1.4142135623730951,\r\n1.7320508075688772\r\n]\r\n\r\n\u00a0\r\n\r\nPlease note these are element-wise min-max ops not aggregate ones.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "created": "2022-02-04T17:14:24.822+0000",
                    "updated": "2022-02-04T17:16:58.052+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/comment/17487199",
                    "id": "17487199",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
                        "name": "rtpsw",
                        "key": "JIRAUSER284707",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
                        },
                        "displayName": "Yaron Gvili",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "The code seems reasonable for a Python setting, but I'm targeting the C++ execution engine (specifically, projection using an expression), and would like to get best performance. My guess is scalar operations are faster than aggregate ones for scalar use cases of the kind I described. Otherwise, it's not clear to me why some operation, such as Add, is implemented as both a scalar and an aggregate one.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
                        "name": "rtpsw",
                        "key": "JIRAUSER284707",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
                        },
                        "displayName": "Yaron Gvili",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-02-04T17:44:23.053+0000",
                    "updated": "2022-02-04T17:44:23.053+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/comment/17487204",
                    "id": "17487204",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I think we're missing some terminology here.\r\n\r\nNote the Python functions are the exact same as the C++ ones. Rok's example can be translated to C++ and they both use the same implementation under the hood.\r\n\r\nScalar functions operate on array and scalar values. \"Scalar\" just means that they operate elementwise.\r\n\r\nAggregate functions reduce multiple values to one. It seems they are not what you are looking for here. However, again, note that min/max both have aggregate versions (min(array) -> scalar) and scalar versions (min(array, array) -> array or min(scalar, array) -> array or ...). So I think Rok's suggestion is what you are looking for.\r\n\r\nIf performance is not up to par in benchmarks, then there is opportunity to optimize. (The scalar min/max kernels do some extra work because they take any number of arguments, for instance - though I don't recall if they have specializations for binary inputs.)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-02-04T17:54:37.523+0000",
                    "updated": "2022-02-04T17:54:49.723+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/comment/17487207",
                    "id": "17487207",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "body": "Python maps directly to c++ kernels here and it's less verbose.\r\n\r\nPerhaps take a look at [https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/kernels/scalar_compare_test.cc#L1228] and [https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/kernels/scalar_arithmetic_test.cc#L932] to get c++ implementation start.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rokm",
                        "name": "rokm",
                        "key": "rokm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Rok Mihevc",
                        "active": true,
                        "timeZone": "Europe/Amsterdam"
                    },
                    "created": "2022-02-04T17:55:00.730+0000",
                    "updated": "2022-02-04T17:55:00.730+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/comment/17487214",
                    "id": "17487214",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
                        "name": "rtpsw",
                        "key": "JIRAUSER284707",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
                        },
                        "displayName": "Yaron Gvili",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "OK, I'll try to set up and report back on a benchmark comparing the suggested operations and the ones in my PR.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
                        "name": "rtpsw",
                        "key": "JIRAUSER284707",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
                        },
                        "displayName": "Yaron Gvili",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-02-04T18:15:51.954+0000",
                    "updated": "2022-02-04T18:15:51.954+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/comment/17487559",
                    "id": "17487559",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
                        "name": "rtpsw",
                        "key": "JIRAUSER284707",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
                        },
                        "displayName": "Yaron Gvili",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Running the benchmark code below on my CPU \"Intel(R) Core(TM) i7-10875H CPU @ 2.30GHz\" showed the minimum/maximum operations in my PR are faster when operating on a single array/column. For an array of size 1M the speed-up factor was ~1.5 and even higher for shorter arrays.\r\n\r\n\u00a0\r\n{code:java}\r\n#include <iostream>\r\n#include <chrono>\r\n\r\n#include <arrow/api.h>\r\n#include <arrow/compare.h>\r\n#include <arrow/datum.h>\r\n#include <arrow/compute/api.h>\r\n\r\nuint64_t get_time() {\r\n\u00a0 return std::chrono::high_resolution_clock::now().time_since_epoch().count();\r\n}\r\n\r\narrow::Status RunMain(int argc, char **argv) {\r\n\u00a0 constexpr int n = 1000000;\r\n\u00a0 arrow::DoubleBuilder builder;\r\n\u00a0 builder.Reserve(n);\r\n\u00a0 for (int i=0; i<n; i++) {\r\n\u00a0 \u00a0 builder.UnsafeAppend(1.0*i/n);\r\n\u00a0 }\r\n\u00a0 auto maybe_array = builder.Finish();\r\n\u00a0 if (!maybe_array.ok()) {\r\n\u00a0 \u00a0 return arrow::Status::Invalid(\"array building failed\");\r\n\u00a0 }\r\n\u00a0 std::shared_ptr<arrow::Array> array = *maybe_array;\r\n\u00a0 std::shared_ptr<arrow::Scalar> low_threshold = std::make_shared<arrow::DoubleScalar>(0.1);\r\n\u00a0 std::shared_ptr<arrow::Scalar> high_threshold = std::make_shared<arrow::DoubleScalar>(0.8);\r\n\r\n\u00a0 uint64_t t;\r\n\r\n \u00a0t = get_time();\r\n\u00a0 ARROW_ASSIGN_OR_RAISE(arrow::Datum max0, arrow::compute::CallFunction(\"max_element_wise\", {array, low_threshold}));\r\n\u00a0 ARROW_ASSIGN_OR_RAISE(arrow::Datum min0, arrow::compute::CallFunction(\"min_element_wise\", {max0, high_threshold}));\r\n\u00a0 uint64_t t0 = get_time() - t;\r\n\r\n  t = get_time();\r\n\u00a0 ARROW_ASSIGN_OR_RAISE(arrow::Datum max1, arrow::compute::CallFunction(\"maximum\", {array, low_threshold}));\r\n\u00a0 ARROW_ASSIGN_OR_RAISE(arrow::Datum min1, arrow::compute::CallFunction(\"minimum\", {max1, high_threshold}));\r\n\u00a0 uint64_t t1 = get_time() - t;\r\n\r\n\u00a0 if (!arrow::ArrayEquals(*min0.make_array(), *min1.make_array())) {\r\n\u00a0 \u00a0 return arrow::Status::Invalid(\"result arrays are not equal\");\r\n\u00a0 }\r\n\u00a0 std::cout << \"timing: \" << t0 << \" vs \" << t1 << \" (speed-up factor \" << (1.0 * t0 / t1) << \")\" << std::endl;\r\n\r\n\u00a0 return arrow::Status::OK();\r\n}\u00a0\r\n\u00a0\u00a0\r\nint main(int argc, char **argv) {\r\n\u00a0 arrow::Status st = RunMain(argc, argv);\r\n\u00a0 if (!st.ok()) {\r\n\u00a0 \u00a0 std::cerr << st << std::endl;\r\n\u00a0 \u00a0 return 1;\r\n\u00a0 }\r\n\u00a0 return 0;\r\n} {code}\r\n\u00a0\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
                        "name": "rtpsw",
                        "key": "JIRAUSER284707",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
                        },
                        "displayName": "Yaron Gvili",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-02-05T21:01:49.486+0000",
                    "updated": "2022-02-05T21:01:49.486+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/comment/17487561",
                    "id": "17487561",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Thanks for the code. That's not surprising, considering the elementwise min/max are variadic (and don't really specialize any cases). We could dispatch to the specialized case for when we have only two arguments, though (and we could add this benchmark to the upstream benchmarks to track the improvement).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-02-05T21:07:32.824+0000",
                    "updated": "2022-02-05T21:07:47.557+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/comment/17487562",
                    "id": "17487562",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
                        "name": "rtpsw",
                        "key": "JIRAUSER284707",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
                        },
                        "displayName": "Yaron Gvili",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "A [comment in the PR|https://github.com/apache/arrow/pull/12338#issuecomment-1030529616] reports on a benchmark showing sqrt(x ) being much faster than pow(x, 0.5).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
                        "name": "rtpsw",
                        "key": "JIRAUSER284707",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
                        },
                        "displayName": "Yaron Gvili",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-02-05T21:12:27.930+0000",
                    "updated": "2022-02-05T21:12:27.930+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/comment/17487565",
                    "id": "17487565",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "That also makes a lot of sense! We should definitely have sqrt.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-02-05T21:13:36.435+0000",
                    "updated": "2022-02-05T21:13:36.435+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/comment/17487569",
                    "id": "17487569",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
                        "name": "rtpsw",
                        "key": "JIRAUSER284707",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
                        },
                        "displayName": "Yaron Gvili",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Sounds good. Please advise on what I should add to the PR, like what to cover in unit tests. To keep the PR tight, could the dispatching be deferred to a separate one?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
                        "name": "rtpsw",
                        "key": "JIRAUSER284707",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
                        },
                        "displayName": "Yaron Gvili",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-02-05T21:21:29.154+0000",
                    "updated": "2022-02-05T21:21:29.154+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/comment/17487648",
                    "id": "17487648",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
                        "name": "yibocai",
                        "key": "yibo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
                        },
                        "displayName": "Yibo Cai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Better to separate \"sqrt\" and \"elementwise min/max\" to two PRs. They are very different.\r\nMaybe rename this Jira (and related PR) to \"sqrt\" only, and create a new Jira for \"improve elementwise min/max for special cases\"?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=yibocai",
                        "name": "yibocai",
                        "key": "yibo",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=yibo&avatarId=47542",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=yibo&avatarId=47542",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=yibo&avatarId=47542",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=yibo&avatarId=47542"
                        },
                        "displayName": "Yibo Cai",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-02-06T09:07:20.514+0000",
                    "updated": "2022-02-06T09:07:20.514+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/comment/17487692",
                    "id": "17487692",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
                        "name": "rtpsw",
                        "key": "JIRAUSER284707",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
                        },
                        "displayName": "Yaron Gvili",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I'm good with splitting the issue; I'll get to that a bit later.\r\n\r\nIn the meantime, something I just noticed: \"min_element_wise\" is equivalent to \"minimum_checked\", both ignoring a single NaN input, but not to \"minimum\", which returns a single NaN input (the same applies to the corresponding max functions). Are there existing min/max operations that have this latter behavior?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
                        "name": "rtpsw",
                        "key": "JIRAUSER284707",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
                        },
                        "displayName": "Yaron Gvili",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-02-06T11:19:20.364+0000",
                    "updated": "2022-02-06T11:19:20.364+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/comment/17488098",
                    "id": "17488098",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "There are no operations that return NaN instead of null in this case. It could perhaps be added as an option (that would also be a separate JIRA)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-02-07T13:19:33.582+0000",
                    "updated": "2022-02-07T13:19:33.582+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/comment/17488129",
                    "id": "17488129",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
                        "name": "rtpsw",
                        "key": "JIRAUSER284707",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
                        },
                        "displayName": "Yaron Gvili",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Since plenty of NaN values exist, I find returning an input NaN value more user-friendly than returning a null, which just drops information, which can always be done in a later step. However, if there is a convention that other operations conform to on this issue, then it should probably be followed on.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
                        "name": "rtpsw",
                        "key": "JIRAUSER284707",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
                        },
                        "displayName": "Yaron Gvili",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-02-07T14:01:58.772+0000",
                    "updated": "2022-02-08T14:59:39.549+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426642/comment/17488923",
                    "id": "17488923",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
                        "name": "rtpsw",
                        "key": "JIRAUSER284707",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
                        },
                        "displayName": "Yaron Gvili",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Split the sqrt part to ARROW-15614",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=rtpsw",
                        "name": "rtpsw",
                        "key": "JIRAUSER284707",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER284707&avatarId=49322",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER284707&avatarId=49322",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER284707&avatarId=49322",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER284707&avatarId=49322"
                        },
                        "displayName": "Yaron Gvili",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-02-08T15:03:18.080+0000",
                    "updated": "2022-02-08T15:03:18.080+0000"
                }
            ],
            "maxResults": 20,
            "total": 20,
            "startAt": 0
        },
        "customfield_12311820": "0|z0z9ig:",
        "customfield_12314139": null
    }
}