{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13257803",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257803",
    "key": "ARROW-6630",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332532",
                "id": "12332532",
                "name": "Documentation"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6630/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 18,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257803/worklog/318289",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5500: [WIP] ARROW-6630: [Doc] Document C++ file formats\nURL: https://github.com/apache/arrow/pull/5500\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T12:30:48.981+0000",
                    "updated": "2019-09-25T12:30:48.981+0000",
                    "started": "2019-09-25T12:30:48.980+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318289",
                    "issueId": "13257803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257803/worklog/318291",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5500: [WIP] ARROW-6630: [Doc] Document C++ file formats\nURL: https://github.com/apache/arrow/pull/5500#discussion_r328093620\n \n \n\n ##########\n File path: docs/source/cpp/csv.rst\n ##########\n @@ -0,0 +1,142 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+\n+.. cpp:namespace:: arrow::csv\n+\n+=================\n+Reading CSV files\n+=================\n \n Review comment:\n   @nealrichardson Could you take a quick look at this file and see if it makes things easy to understand?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T12:32:02.820+0000",
                    "updated": "2019-09-25T12:32:02.820+0000",
                    "started": "2019-09-25T12:32:02.819+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318291",
                    "issueId": "13257803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257803/worklog/318374",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #5500: [WIP] ARROW-6630: [Doc] Document C++ file formats\nURL: https://github.com/apache/arrow/pull/5500#discussion_r328164650\n \n \n\n ##########\n File path: docs/source/cpp/csv.rst\n ##########\n @@ -0,0 +1,142 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+\n+.. cpp:namespace:: arrow::csv\n+\n+=================\n+Reading CSV files\n+=================\n+\n+Arrow provides a fast CSV reader allowing ingestion of external data\n+as Arrow tables.\n+\n+Basic usage\n+===========\n+\n+A CSV file is read from a :class:`~arrow::io::InputStream`.\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::Status st;\n+      arrow::MemoryPool* pool = default_memory_pool();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate TableReader from input stream and options\n+      std::shared_ptr<arrow::csv::TableReader> reader;\n+      st = arrow::csv::TableReader::Make(pool, input, read_options,\n+                                         parse_options, convert_options,\n+                                         &reader);\n+      if (!st.ok()) {\n+         // Handle TableReader instantiation error...\n+      }\n+\n+      std::shared_ptr<arrow::Table> table;\n+      // Read table from CSV file\n+      st = reader->Read(&table);\n+      if (!st.ok()) {\n+         // Handle CSV read error\n+         // (for example a CSV syntax error or failed type conversion)\n+      }\n+   }\n+\n+Column names\n+============\n+\n+There are three possible ways to infer column names from the CSV file:\n+\n+* By default, the column names are read from the first row in the CSV file\n+* If :member:`ReadOptions::column_names` is set, it forces the column\n+  names in the table to these values (the first row in the CSV file is\n+  read as data)\n+* If :member:`ReadOptions::autogenerate_column_names` is true, column names\n+  will be autogenerated with the pattern \"f0\", \"f1\"... (the first row in the\n+  CSV file is read as data)\n+\n+Column selection\n+================\n+\n+By default, Arrow reads all columns in the CSV file.  You can narrow the\n+selection of columns with the :member:`ConvertOptions::include_columns`\n+option.  If some columns in :member:`ConvertOptions::include_columns`\n+are missing from the CSV file, an error will be emitted unless\n+:member:`ConvertOptions::include_missing_columns` is true, in which case\n+the missing columns are assumed to contain all-null values.\n+\n+Interaction with column names\n+-----------------------------\n+\n+If both :member:`ReadOptions::column_names` and :member:`ConvertOptions::include_columns`,\n+the :member:`ReadOptions::column_names` are assumed to map to CSV columns,\n+and :member:`ConvertOptions::include_columns` is a subset of those column\n+names that will part of the Arrow Table.\n+\n+Data types\n+==========\n+\n+It is possible to convert a CSV column into the following Arrow data types:\n \n Review comment:\n   Is it easier to describe/list the data types that can't be read from a CSV?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T14:45:52.764+0000",
                    "updated": "2019-09-25T14:45:52.764+0000",
                    "started": "2019-09-25T14:45:52.764+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318374",
                    "issueId": "13257803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257803/worklog/318375",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #5500: [WIP] ARROW-6630: [Doc] Document C++ file formats\nURL: https://github.com/apache/arrow/pull/5500#discussion_r328165287\n \n \n\n ##########\n File path: docs/source/cpp/csv.rst\n ##########\n @@ -0,0 +1,142 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+\n+.. cpp:namespace:: arrow::csv\n+\n+=================\n+Reading CSV files\n+=================\n+\n+Arrow provides a fast CSV reader allowing ingestion of external data\n+as Arrow tables.\n+\n+Basic usage\n+===========\n+\n+A CSV file is read from a :class:`~arrow::io::InputStream`.\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::Status st;\n+      arrow::MemoryPool* pool = default_memory_pool();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate TableReader from input stream and options\n+      std::shared_ptr<arrow::csv::TableReader> reader;\n+      st = arrow::csv::TableReader::Make(pool, input, read_options,\n+                                         parse_options, convert_options,\n+                                         &reader);\n+      if (!st.ok()) {\n+         // Handle TableReader instantiation error...\n+      }\n+\n+      std::shared_ptr<arrow::Table> table;\n+      // Read table from CSV file\n+      st = reader->Read(&table);\n+      if (!st.ok()) {\n+         // Handle CSV read error\n+         // (for example a CSV syntax error or failed type conversion)\n+      }\n+   }\n+\n+Column names\n+============\n+\n+There are three possible ways to infer column names from the CSV file:\n+\n+* By default, the column names are read from the first row in the CSV file\n+* If :member:`ReadOptions::column_names` is set, it forces the column\n+  names in the table to these values (the first row in the CSV file is\n+  read as data)\n+* If :member:`ReadOptions::autogenerate_column_names` is true, column names\n+  will be autogenerated with the pattern \"f0\", \"f1\"... (the first row in the\n+  CSV file is read as data)\n+\n+Column selection\n+================\n+\n+By default, Arrow reads all columns in the CSV file.  You can narrow the\n+selection of columns with the :member:`ConvertOptions::include_columns`\n+option.  If some columns in :member:`ConvertOptions::include_columns`\n+are missing from the CSV file, an error will be emitted unless\n+:member:`ConvertOptions::include_missing_columns` is true, in which case\n+the missing columns are assumed to contain all-null values.\n+\n+Interaction with column names\n+-----------------------------\n+\n+If both :member:`ReadOptions::column_names` and :member:`ConvertOptions::include_columns`,\n+the :member:`ReadOptions::column_names` are assumed to map to CSV columns,\n+and :member:`ConvertOptions::include_columns` is a subset of those column\n+names that will part of the Arrow Table.\n+\n+Data types\n+==========\n+\n+It is possible to convert a CSV column into the following Arrow data types:\n+\n+* Null\n+* All Integer types\n+* Float32 and Float64\n+* Decimal128\n+* Boolean\n+* Timestamp\n+* Binary and Large Binary\n+* String and Large String (with optional UTF8 input validation)\n+* Fixed-Size Binary\n+\n+By default, the CSV reader infers the most appropriate data type for each\n+column.  Type inference considers the following data types, in order:\n+\n+* Null\n+* Int64\n+* Boolean\n+* Timestamp (with seconds unit)\n+* Float64\n+* String\n+* Binary\n+\n+It is possible to override type inference for select columns by setting\n+the :member:`ConvertOptions::column_types` option.\n+\n+Nulls\n+-----\n+\n+Null values are recognized from the spellings stored in\n+:member:`ConvertOptions::null_values`.  The :func:`ConvertOptions::Defaults`\n+factory method will initialize a number of conventional null spellings such\n+as ``N/A``.\n \n Review comment:\n   It might be good to list them all since this is reference documentation.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T14:45:52.883+0000",
                    "updated": "2019-09-25T14:45:52.883+0000",
                    "started": "2019-09-25T14:45:52.883+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318375",
                    "issueId": "13257803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257803/worklog/318376",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #5500: [WIP] ARROW-6630: [Doc] Document C++ file formats\nURL: https://github.com/apache/arrow/pull/5500#discussion_r328165019\n \n \n\n ##########\n File path: docs/source/cpp/csv.rst\n ##########\n @@ -0,0 +1,142 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+\n+.. cpp:namespace:: arrow::csv\n+\n+=================\n+Reading CSV files\n+=================\n+\n+Arrow provides a fast CSV reader allowing ingestion of external data\n+as Arrow tables.\n+\n+Basic usage\n+===========\n+\n+A CSV file is read from a :class:`~arrow::io::InputStream`.\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::Status st;\n+      arrow::MemoryPool* pool = default_memory_pool();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate TableReader from input stream and options\n+      std::shared_ptr<arrow::csv::TableReader> reader;\n+      st = arrow::csv::TableReader::Make(pool, input, read_options,\n+                                         parse_options, convert_options,\n+                                         &reader);\n+      if (!st.ok()) {\n+         // Handle TableReader instantiation error...\n+      }\n+\n+      std::shared_ptr<arrow::Table> table;\n+      // Read table from CSV file\n+      st = reader->Read(&table);\n+      if (!st.ok()) {\n+         // Handle CSV read error\n+         // (for example a CSV syntax error or failed type conversion)\n+      }\n+   }\n+\n+Column names\n+============\n+\n+There are three possible ways to infer column names from the CSV file:\n+\n+* By default, the column names are read from the first row in the CSV file\n+* If :member:`ReadOptions::column_names` is set, it forces the column\n+  names in the table to these values (the first row in the CSV file is\n+  read as data)\n+* If :member:`ReadOptions::autogenerate_column_names` is true, column names\n+  will be autogenerated with the pattern \"f0\", \"f1\"... (the first row in the\n+  CSV file is read as data)\n+\n+Column selection\n+================\n+\n+By default, Arrow reads all columns in the CSV file.  You can narrow the\n+selection of columns with the :member:`ConvertOptions::include_columns`\n+option.  If some columns in :member:`ConvertOptions::include_columns`\n+are missing from the CSV file, an error will be emitted unless\n+:member:`ConvertOptions::include_missing_columns` is true, in which case\n+the missing columns are assumed to contain all-null values.\n+\n+Interaction with column names\n+-----------------------------\n+\n+If both :member:`ReadOptions::column_names` and :member:`ConvertOptions::include_columns`,\n+the :member:`ReadOptions::column_names` are assumed to map to CSV columns,\n+and :member:`ConvertOptions::include_columns` is a subset of those column\n+names that will part of the Arrow Table.\n+\n+Data types\n+==========\n+\n+It is possible to convert a CSV column into the following Arrow data types:\n+\n+* Null\n+* All Integer types\n+* Float32 and Float64\n+* Decimal128\n+* Boolean\n+* Timestamp\n+* Binary and Large Binary\n+* String and Large String (with optional UTF8 input validation)\n+* Fixed-Size Binary\n+\n+By default, the CSV reader infers the most appropriate data type for each\n+column.  Type inference considers the following data types, in order:\n+\n+* Null\n+* Int64\n+* Boolean\n+* Timestamp (with seconds unit)\n+* Float64\n+* String\n+* Binary\n+\n+It is possible to override type inference for select columns by setting\n+the :member:`ConvertOptions::column_types` option.\n \n Review comment:\n   So there are some types I still can't get from the CSV reader even if I specify `column_types`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T14:45:52.950+0000",
                    "updated": "2019-09-25T14:45:52.950+0000",
                    "started": "2019-09-25T14:45:52.950+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318376",
                    "issueId": "13257803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257803/worklog/318377",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #5500: [WIP] ARROW-6630: [Doc] Document C++ file formats\nURL: https://github.com/apache/arrow/pull/5500#discussion_r328163964\n \n \n\n ##########\n File path: docs/source/cpp/csv.rst\n ##########\n @@ -0,0 +1,142 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+\n+.. cpp:namespace:: arrow::csv\n+\n+=================\n+Reading CSV files\n+=================\n+\n+Arrow provides a fast CSV reader allowing ingestion of external data\n+as Arrow tables.\n+\n+Basic usage\n+===========\n+\n+A CSV file is read from a :class:`~arrow::io::InputStream`.\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::Status st;\n+      arrow::MemoryPool* pool = default_memory_pool();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate TableReader from input stream and options\n+      std::shared_ptr<arrow::csv::TableReader> reader;\n+      st = arrow::csv::TableReader::Make(pool, input, read_options,\n+                                         parse_options, convert_options,\n+                                         &reader);\n+      if (!st.ok()) {\n+         // Handle TableReader instantiation error...\n+      }\n+\n+      std::shared_ptr<arrow::Table> table;\n+      // Read table from CSV file\n+      st = reader->Read(&table);\n+      if (!st.ok()) {\n+         // Handle CSV read error\n+         // (for example a CSV syntax error or failed type conversion)\n+      }\n+   }\n+\n+Column names\n+============\n+\n+There are three possible ways to infer column names from the CSV file:\n+\n+* By default, the column names are read from the first row in the CSV file\n+* If :member:`ReadOptions::column_names` is set, it forces the column\n+  names in the table to these values (the first row in the CSV file is\n+  read as data)\n+* If :member:`ReadOptions::autogenerate_column_names` is true, column names\n+  will be autogenerated with the pattern \"f0\", \"f1\"... (the first row in the\n+  CSV file is read as data)\n+\n+Column selection\n+================\n+\n+By default, Arrow reads all columns in the CSV file.  You can narrow the\n+selection of columns with the :member:`ConvertOptions::include_columns`\n+option.  If some columns in :member:`ConvertOptions::include_columns`\n+are missing from the CSV file, an error will be emitted unless\n+:member:`ConvertOptions::include_missing_columns` is true, in which case\n+the missing columns are assumed to contain all-null values.\n+\n+Interaction with column names\n+-----------------------------\n+\n+If both :member:`ReadOptions::column_names` and :member:`ConvertOptions::include_columns`,\n \n Review comment:\n   ```suggestion\r\n   If both :member:`ReadOptions::column_names` and :member:`ConvertOptions::include_columns` are specified,\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T14:45:53.103+0000",
                    "updated": "2019-09-25T14:45:53.103+0000",
                    "started": "2019-09-25T14:45:53.103+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318377",
                    "issueId": "13257803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257803/worklog/318379",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5500: [WIP] ARROW-6630: [Doc] Document C++ file formats\nURL: https://github.com/apache/arrow/pull/5500#discussion_r328167173\n \n \n\n ##########\n File path: docs/source/cpp/csv.rst\n ##########\n @@ -0,0 +1,142 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+\n+.. cpp:namespace:: arrow::csv\n+\n+=================\n+Reading CSV files\n+=================\n+\n+Arrow provides a fast CSV reader allowing ingestion of external data\n+as Arrow tables.\n+\n+Basic usage\n+===========\n+\n+A CSV file is read from a :class:`~arrow::io::InputStream`.\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::Status st;\n+      arrow::MemoryPool* pool = default_memory_pool();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate TableReader from input stream and options\n+      std::shared_ptr<arrow::csv::TableReader> reader;\n+      st = arrow::csv::TableReader::Make(pool, input, read_options,\n+                                         parse_options, convert_options,\n+                                         &reader);\n+      if (!st.ok()) {\n+         // Handle TableReader instantiation error...\n+      }\n+\n+      std::shared_ptr<arrow::Table> table;\n+      // Read table from CSV file\n+      st = reader->Read(&table);\n+      if (!st.ok()) {\n+         // Handle CSV read error\n+         // (for example a CSV syntax error or failed type conversion)\n+      }\n+   }\n+\n+Column names\n+============\n+\n+There are three possible ways to infer column names from the CSV file:\n+\n+* By default, the column names are read from the first row in the CSV file\n+* If :member:`ReadOptions::column_names` is set, it forces the column\n+  names in the table to these values (the first row in the CSV file is\n+  read as data)\n+* If :member:`ReadOptions::autogenerate_column_names` is true, column names\n+  will be autogenerated with the pattern \"f0\", \"f1\"... (the first row in the\n+  CSV file is read as data)\n+\n+Column selection\n+================\n+\n+By default, Arrow reads all columns in the CSV file.  You can narrow the\n+selection of columns with the :member:`ConvertOptions::include_columns`\n+option.  If some columns in :member:`ConvertOptions::include_columns`\n+are missing from the CSV file, an error will be emitted unless\n+:member:`ConvertOptions::include_missing_columns` is true, in which case\n+the missing columns are assumed to contain all-null values.\n+\n+Interaction with column names\n+-----------------------------\n+\n+If both :member:`ReadOptions::column_names` and :member:`ConvertOptions::include_columns`,\n \n Review comment:\n   Thanks, will do.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T14:47:07.078+0000",
                    "updated": "2019-09-25T14:47:07.078+0000",
                    "started": "2019-09-25T14:47:07.078+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318379",
                    "issueId": "13257803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257803/worklog/318380",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5500: [WIP] ARROW-6630: [Doc] Document C++ file formats\nURL: https://github.com/apache/arrow/pull/5500#discussion_r328167832\n \n \n\n ##########\n File path: docs/source/cpp/csv.rst\n ##########\n @@ -0,0 +1,142 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+\n+.. cpp:namespace:: arrow::csv\n+\n+=================\n+Reading CSV files\n+=================\n+\n+Arrow provides a fast CSV reader allowing ingestion of external data\n+as Arrow tables.\n+\n+Basic usage\n+===========\n+\n+A CSV file is read from a :class:`~arrow::io::InputStream`.\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::Status st;\n+      arrow::MemoryPool* pool = default_memory_pool();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate TableReader from input stream and options\n+      std::shared_ptr<arrow::csv::TableReader> reader;\n+      st = arrow::csv::TableReader::Make(pool, input, read_options,\n+                                         parse_options, convert_options,\n+                                         &reader);\n+      if (!st.ok()) {\n+         // Handle TableReader instantiation error...\n+      }\n+\n+      std::shared_ptr<arrow::Table> table;\n+      // Read table from CSV file\n+      st = reader->Read(&table);\n+      if (!st.ok()) {\n+         // Handle CSV read error\n+         // (for example a CSV syntax error or failed type conversion)\n+      }\n+   }\n+\n+Column names\n+============\n+\n+There are three possible ways to infer column names from the CSV file:\n+\n+* By default, the column names are read from the first row in the CSV file\n+* If :member:`ReadOptions::column_names` is set, it forces the column\n+  names in the table to these values (the first row in the CSV file is\n+  read as data)\n+* If :member:`ReadOptions::autogenerate_column_names` is true, column names\n+  will be autogenerated with the pattern \"f0\", \"f1\"... (the first row in the\n+  CSV file is read as data)\n+\n+Column selection\n+================\n+\n+By default, Arrow reads all columns in the CSV file.  You can narrow the\n+selection of columns with the :member:`ConvertOptions::include_columns`\n+option.  If some columns in :member:`ConvertOptions::include_columns`\n+are missing from the CSV file, an error will be emitted unless\n+:member:`ConvertOptions::include_missing_columns` is true, in which case\n+the missing columns are assumed to contain all-null values.\n+\n+Interaction with column names\n+-----------------------------\n+\n+If both :member:`ReadOptions::column_names` and :member:`ConvertOptions::include_columns`,\n+the :member:`ReadOptions::column_names` are assumed to map to CSV columns,\n+and :member:`ConvertOptions::include_columns` is a subset of those column\n+names that will part of the Arrow Table.\n+\n+Data types\n+==========\n+\n+It is possible to convert a CSV column into the following Arrow data types:\n \n Review comment:\n   I don't think so. I find it more useful to list existing functionality, not missing functionality :-)\r\n   Also, unsupported data types are more likely to get outdated when adding new Arrow data types without adding CSV support for them. :-)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T14:48:07.454+0000",
                    "updated": "2019-09-25T14:48:07.454+0000",
                    "started": "2019-09-25T14:48:07.454+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318380",
                    "issueId": "13257803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257803/worklog/318381",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5500: [WIP] ARROW-6630: [Doc] Document C++ file formats\nURL: https://github.com/apache/arrow/pull/5500#discussion_r328168301\n \n \n\n ##########\n File path: docs/source/cpp/csv.rst\n ##########\n @@ -0,0 +1,142 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+\n+.. cpp:namespace:: arrow::csv\n+\n+=================\n+Reading CSV files\n+=================\n+\n+Arrow provides a fast CSV reader allowing ingestion of external data\n+as Arrow tables.\n+\n+Basic usage\n+===========\n+\n+A CSV file is read from a :class:`~arrow::io::InputStream`.\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::Status st;\n+      arrow::MemoryPool* pool = default_memory_pool();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate TableReader from input stream and options\n+      std::shared_ptr<arrow::csv::TableReader> reader;\n+      st = arrow::csv::TableReader::Make(pool, input, read_options,\n+                                         parse_options, convert_options,\n+                                         &reader);\n+      if (!st.ok()) {\n+         // Handle TableReader instantiation error...\n+      }\n+\n+      std::shared_ptr<arrow::Table> table;\n+      // Read table from CSV file\n+      st = reader->Read(&table);\n+      if (!st.ok()) {\n+         // Handle CSV read error\n+         // (for example a CSV syntax error or failed type conversion)\n+      }\n+   }\n+\n+Column names\n+============\n+\n+There are three possible ways to infer column names from the CSV file:\n+\n+* By default, the column names are read from the first row in the CSV file\n+* If :member:`ReadOptions::column_names` is set, it forces the column\n+  names in the table to these values (the first row in the CSV file is\n+  read as data)\n+* If :member:`ReadOptions::autogenerate_column_names` is true, column names\n+  will be autogenerated with the pattern \"f0\", \"f1\"... (the first row in the\n+  CSV file is read as data)\n+\n+Column selection\n+================\n+\n+By default, Arrow reads all columns in the CSV file.  You can narrow the\n+selection of columns with the :member:`ConvertOptions::include_columns`\n+option.  If some columns in :member:`ConvertOptions::include_columns`\n+are missing from the CSV file, an error will be emitted unless\n+:member:`ConvertOptions::include_missing_columns` is true, in which case\n+the missing columns are assumed to contain all-null values.\n+\n+Interaction with column names\n+-----------------------------\n+\n+If both :member:`ReadOptions::column_names` and :member:`ConvertOptions::include_columns`,\n+the :member:`ReadOptions::column_names` are assumed to map to CSV columns,\n+and :member:`ConvertOptions::include_columns` is a subset of those column\n+names that will part of the Arrow Table.\n+\n+Data types\n+==========\n+\n+It is possible to convert a CSV column into the following Arrow data types:\n+\n+* Null\n+* All Integer types\n+* Float32 and Float64\n+* Decimal128\n+* Boolean\n+* Timestamp\n+* Binary and Large Binary\n+* String and Large String (with optional UTF8 input validation)\n+* Fixed-Size Binary\n+\n+By default, the CSV reader infers the most appropriate data type for each\n+column.  Type inference considers the following data types, in order:\n+\n+* Null\n+* Int64\n+* Boolean\n+* Timestamp (with seconds unit)\n+* Float64\n+* String\n+* Binary\n+\n+It is possible to override type inference for select columns by setting\n+the :member:`ConvertOptions::column_types` option.\n \n Review comment:\n   Yes, you can't for instance convert a CSV value to an Arrow struct or list or map... Is that what you were asking?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T14:48:53.498+0000",
                    "updated": "2019-09-25T14:48:53.498+0000",
                    "started": "2019-09-25T14:48:53.497+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318381",
                    "issueId": "13257803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257803/worklog/318383",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #5500: [WIP] ARROW-6630: [Doc] Document C++ file formats\nURL: https://github.com/apache/arrow/pull/5500#discussion_r328170884\n \n \n\n ##########\n File path: docs/source/cpp/csv.rst\n ##########\n @@ -0,0 +1,142 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+\n+.. cpp:namespace:: arrow::csv\n+\n+=================\n+Reading CSV files\n+=================\n+\n+Arrow provides a fast CSV reader allowing ingestion of external data\n+as Arrow tables.\n+\n+Basic usage\n+===========\n+\n+A CSV file is read from a :class:`~arrow::io::InputStream`.\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::Status st;\n+      arrow::MemoryPool* pool = default_memory_pool();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate TableReader from input stream and options\n+      std::shared_ptr<arrow::csv::TableReader> reader;\n+      st = arrow::csv::TableReader::Make(pool, input, read_options,\n+                                         parse_options, convert_options,\n+                                         &reader);\n+      if (!st.ok()) {\n+         // Handle TableReader instantiation error...\n+      }\n+\n+      std::shared_ptr<arrow::Table> table;\n+      // Read table from CSV file\n+      st = reader->Read(&table);\n+      if (!st.ok()) {\n+         // Handle CSV read error\n+         // (for example a CSV syntax error or failed type conversion)\n+      }\n+   }\n+\n+Column names\n+============\n+\n+There are three possible ways to infer column names from the CSV file:\n+\n+* By default, the column names are read from the first row in the CSV file\n+* If :member:`ReadOptions::column_names` is set, it forces the column\n+  names in the table to these values (the first row in the CSV file is\n+  read as data)\n+* If :member:`ReadOptions::autogenerate_column_names` is true, column names\n+  will be autogenerated with the pattern \"f0\", \"f1\"... (the first row in the\n+  CSV file is read as data)\n+\n+Column selection\n+================\n+\n+By default, Arrow reads all columns in the CSV file.  You can narrow the\n+selection of columns with the :member:`ConvertOptions::include_columns`\n+option.  If some columns in :member:`ConvertOptions::include_columns`\n+are missing from the CSV file, an error will be emitted unless\n+:member:`ConvertOptions::include_missing_columns` is true, in which case\n+the missing columns are assumed to contain all-null values.\n+\n+Interaction with column names\n+-----------------------------\n+\n+If both :member:`ReadOptions::column_names` and :member:`ConvertOptions::include_columns`,\n+the :member:`ReadOptions::column_names` are assumed to map to CSV columns,\n+and :member:`ConvertOptions::include_columns` is a subset of those column\n+names that will part of the Arrow Table.\n+\n+Data types\n+==========\n+\n+It is possible to convert a CSV column into the following Arrow data types:\n \n Review comment:\n   Ok, so `float32` but no `float16`? `timestamp` but no `date*` or `time*`? No dictionary? I could see not being able to infer them, but I'm surprised I can't specify them in `column_types`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T14:53:24.548+0000",
                    "updated": "2019-09-25T14:53:24.548+0000",
                    "started": "2019-09-25T14:53:24.547+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318383",
                    "issueId": "13257803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257803/worklog/318384",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #5500: [WIP] ARROW-6630: [Doc] Document C++ file formats\nURL: https://github.com/apache/arrow/pull/5500#discussion_r328171452\n \n \n\n ##########\n File path: docs/source/cpp/csv.rst\n ##########\n @@ -0,0 +1,142 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+\n+.. cpp:namespace:: arrow::csv\n+\n+=================\n+Reading CSV files\n+=================\n+\n+Arrow provides a fast CSV reader allowing ingestion of external data\n+as Arrow tables.\n+\n+Basic usage\n+===========\n+\n+A CSV file is read from a :class:`~arrow::io::InputStream`.\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::Status st;\n+      arrow::MemoryPool* pool = default_memory_pool();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate TableReader from input stream and options\n+      std::shared_ptr<arrow::csv::TableReader> reader;\n+      st = arrow::csv::TableReader::Make(pool, input, read_options,\n+                                         parse_options, convert_options,\n+                                         &reader);\n+      if (!st.ok()) {\n+         // Handle TableReader instantiation error...\n+      }\n+\n+      std::shared_ptr<arrow::Table> table;\n+      // Read table from CSV file\n+      st = reader->Read(&table);\n+      if (!st.ok()) {\n+         // Handle CSV read error\n+         // (for example a CSV syntax error or failed type conversion)\n+      }\n+   }\n+\n+Column names\n+============\n+\n+There are three possible ways to infer column names from the CSV file:\n+\n+* By default, the column names are read from the first row in the CSV file\n+* If :member:`ReadOptions::column_names` is set, it forces the column\n+  names in the table to these values (the first row in the CSV file is\n+  read as data)\n+* If :member:`ReadOptions::autogenerate_column_names` is true, column names\n+  will be autogenerated with the pattern \"f0\", \"f1\"... (the first row in the\n+  CSV file is read as data)\n+\n+Column selection\n+================\n+\n+By default, Arrow reads all columns in the CSV file.  You can narrow the\n+selection of columns with the :member:`ConvertOptions::include_columns`\n+option.  If some columns in :member:`ConvertOptions::include_columns`\n+are missing from the CSV file, an error will be emitted unless\n+:member:`ConvertOptions::include_missing_columns` is true, in which case\n+the missing columns are assumed to contain all-null values.\n+\n+Interaction with column names\n+-----------------------------\n+\n+If both :member:`ReadOptions::column_names` and :member:`ConvertOptions::include_columns`,\n+the :member:`ReadOptions::column_names` are assumed to map to CSV columns,\n+and :member:`ConvertOptions::include_columns` is a subset of those column\n+names that will part of the Arrow Table.\n+\n+Data types\n+==========\n+\n+It is possible to convert a CSV column into the following Arrow data types:\n+\n+* Null\n+* All Integer types\n+* Float32 and Float64\n+* Decimal128\n+* Boolean\n+* Timestamp\n+* Binary and Large Binary\n+* String and Large String (with optional UTF8 input validation)\n+* Fixed-Size Binary\n+\n+By default, the CSV reader infers the most appropriate data type for each\n+column.  Type inference considers the following data types, in order:\n+\n+* Null\n+* Int64\n+* Boolean\n+* Timestamp (with seconds unit)\n+* Float64\n+* String\n+* Binary\n+\n+It is possible to override type inference for select columns by setting\n+the :member:`ConvertOptions::column_types` option.\n \n Review comment:\n   Yes, IMO it would be good to make that explicit, that the limitation on types is not just about inferring them from the data, there are some types you can't even specify.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T14:54:21.282+0000",
                    "updated": "2019-09-25T14:54:21.282+0000",
                    "started": "2019-09-25T14:54:21.282+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318384",
                    "issueId": "13257803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257803/worklog/318386",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5500: [WIP] ARROW-6630: [Doc] Document C++ file formats\nURL: https://github.com/apache/arrow/pull/5500#discussion_r328173817\n \n \n\n ##########\n File path: docs/source/cpp/csv.rst\n ##########\n @@ -0,0 +1,142 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+\n+.. cpp:namespace:: arrow::csv\n+\n+=================\n+Reading CSV files\n+=================\n+\n+Arrow provides a fast CSV reader allowing ingestion of external data\n+as Arrow tables.\n+\n+Basic usage\n+===========\n+\n+A CSV file is read from a :class:`~arrow::io::InputStream`.\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::Status st;\n+      arrow::MemoryPool* pool = default_memory_pool();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate TableReader from input stream and options\n+      std::shared_ptr<arrow::csv::TableReader> reader;\n+      st = arrow::csv::TableReader::Make(pool, input, read_options,\n+                                         parse_options, convert_options,\n+                                         &reader);\n+      if (!st.ok()) {\n+         // Handle TableReader instantiation error...\n+      }\n+\n+      std::shared_ptr<arrow::Table> table;\n+      // Read table from CSV file\n+      st = reader->Read(&table);\n+      if (!st.ok()) {\n+         // Handle CSV read error\n+         // (for example a CSV syntax error or failed type conversion)\n+      }\n+   }\n+\n+Column names\n+============\n+\n+There are three possible ways to infer column names from the CSV file:\n+\n+* By default, the column names are read from the first row in the CSV file\n+* If :member:`ReadOptions::column_names` is set, it forces the column\n+  names in the table to these values (the first row in the CSV file is\n+  read as data)\n+* If :member:`ReadOptions::autogenerate_column_names` is true, column names\n+  will be autogenerated with the pattern \"f0\", \"f1\"... (the first row in the\n+  CSV file is read as data)\n+\n+Column selection\n+================\n+\n+By default, Arrow reads all columns in the CSV file.  You can narrow the\n+selection of columns with the :member:`ConvertOptions::include_columns`\n+option.  If some columns in :member:`ConvertOptions::include_columns`\n+are missing from the CSV file, an error will be emitted unless\n+:member:`ConvertOptions::include_missing_columns` is true, in which case\n+the missing columns are assumed to contain all-null values.\n+\n+Interaction with column names\n+-----------------------------\n+\n+If both :member:`ReadOptions::column_names` and :member:`ConvertOptions::include_columns`,\n+the :member:`ReadOptions::column_names` are assumed to map to CSV columns,\n+and :member:`ConvertOptions::include_columns` is a subset of those column\n+names that will part of the Arrow Table.\n+\n+Data types\n+==========\n+\n+It is possible to convert a CSV column into the following Arrow data types:\n+\n+* Null\n+* All Integer types\n+* Float32 and Float64\n+* Decimal128\n+* Boolean\n+* Timestamp\n+* Binary and Large Binary\n+* String and Large String (with optional UTF8 input validation)\n+* Fixed-Size Binary\n+\n+By default, the CSV reader infers the most appropriate data type for each\n+column.  Type inference considers the following data types, in order:\n+\n+* Null\n+* Int64\n+* Boolean\n+* Timestamp (with seconds unit)\n+* Float64\n+* String\n+* Binary\n+\n+It is possible to override type inference for select columns by setting\n+the :member:`ConvertOptions::column_types` option.\n \n Review comment:\n   I can add a sentence that non-listed types will error out.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T14:58:22.410+0000",
                    "updated": "2019-09-25T14:58:22.410+0000",
                    "started": "2019-09-25T14:58:22.409+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318386",
                    "issueId": "13257803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257803/worklog/318388",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5500: [WIP] ARROW-6630: [Doc] Document C++ file formats\nURL: https://github.com/apache/arrow/pull/5500#discussion_r328173924\n \n \n\n ##########\n File path: docs/source/cpp/csv.rst\n ##########\n @@ -0,0 +1,142 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+\n+.. cpp:namespace:: arrow::csv\n+\n+=================\n+Reading CSV files\n+=================\n+\n+Arrow provides a fast CSV reader allowing ingestion of external data\n+as Arrow tables.\n+\n+Basic usage\n+===========\n+\n+A CSV file is read from a :class:`~arrow::io::InputStream`.\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::Status st;\n+      arrow::MemoryPool* pool = default_memory_pool();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate TableReader from input stream and options\n+      std::shared_ptr<arrow::csv::TableReader> reader;\n+      st = arrow::csv::TableReader::Make(pool, input, read_options,\n+                                         parse_options, convert_options,\n+                                         &reader);\n+      if (!st.ok()) {\n+         // Handle TableReader instantiation error...\n+      }\n+\n+      std::shared_ptr<arrow::Table> table;\n+      // Read table from CSV file\n+      st = reader->Read(&table);\n+      if (!st.ok()) {\n+         // Handle CSV read error\n+         // (for example a CSV syntax error or failed type conversion)\n+      }\n+   }\n+\n+Column names\n+============\n+\n+There are three possible ways to infer column names from the CSV file:\n+\n+* By default, the column names are read from the first row in the CSV file\n+* If :member:`ReadOptions::column_names` is set, it forces the column\n+  names in the table to these values (the first row in the CSV file is\n+  read as data)\n+* If :member:`ReadOptions::autogenerate_column_names` is true, column names\n+  will be autogenerated with the pattern \"f0\", \"f1\"... (the first row in the\n+  CSV file is read as data)\n+\n+Column selection\n+================\n+\n+By default, Arrow reads all columns in the CSV file.  You can narrow the\n+selection of columns with the :member:`ConvertOptions::include_columns`\n+option.  If some columns in :member:`ConvertOptions::include_columns`\n+are missing from the CSV file, an error will be emitted unless\n+:member:`ConvertOptions::include_missing_columns` is true, in which case\n+the missing columns are assumed to contain all-null values.\n+\n+Interaction with column names\n+-----------------------------\n+\n+If both :member:`ReadOptions::column_names` and :member:`ConvertOptions::include_columns`,\n+the :member:`ReadOptions::column_names` are assumed to map to CSV columns,\n+and :member:`ConvertOptions::include_columns` is a subset of those column\n+names that will part of the Arrow Table.\n+\n+Data types\n+==========\n+\n+It is possible to convert a CSV column into the following Arrow data types:\n \n Review comment:\n   Well, there's no converted written for them.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T14:58:33.967+0000",
                    "updated": "2019-09-25T14:58:33.967+0000",
                    "started": "2019-09-25T14:58:33.967+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318388",
                    "issueId": "13257803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257803/worklog/318392",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5500: [WIP] ARROW-6630: [Doc] Document C++ file formats\nURL: https://github.com/apache/arrow/pull/5500#discussion_r328173924\n \n \n\n ##########\n File path: docs/source/cpp/csv.rst\n ##########\n @@ -0,0 +1,142 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+\n+.. cpp:namespace:: arrow::csv\n+\n+=================\n+Reading CSV files\n+=================\n+\n+Arrow provides a fast CSV reader allowing ingestion of external data\n+as Arrow tables.\n+\n+Basic usage\n+===========\n+\n+A CSV file is read from a :class:`~arrow::io::InputStream`.\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::Status st;\n+      arrow::MemoryPool* pool = default_memory_pool();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate TableReader from input stream and options\n+      std::shared_ptr<arrow::csv::TableReader> reader;\n+      st = arrow::csv::TableReader::Make(pool, input, read_options,\n+                                         parse_options, convert_options,\n+                                         &reader);\n+      if (!st.ok()) {\n+         // Handle TableReader instantiation error...\n+      }\n+\n+      std::shared_ptr<arrow::Table> table;\n+      // Read table from CSV file\n+      st = reader->Read(&table);\n+      if (!st.ok()) {\n+         // Handle CSV read error\n+         // (for example a CSV syntax error or failed type conversion)\n+      }\n+   }\n+\n+Column names\n+============\n+\n+There are three possible ways to infer column names from the CSV file:\n+\n+* By default, the column names are read from the first row in the CSV file\n+* If :member:`ReadOptions::column_names` is set, it forces the column\n+  names in the table to these values (the first row in the CSV file is\n+  read as data)\n+* If :member:`ReadOptions::autogenerate_column_names` is true, column names\n+  will be autogenerated with the pattern \"f0\", \"f1\"... (the first row in the\n+  CSV file is read as data)\n+\n+Column selection\n+================\n+\n+By default, Arrow reads all columns in the CSV file.  You can narrow the\n+selection of columns with the :member:`ConvertOptions::include_columns`\n+option.  If some columns in :member:`ConvertOptions::include_columns`\n+are missing from the CSV file, an error will be emitted unless\n+:member:`ConvertOptions::include_missing_columns` is true, in which case\n+the missing columns are assumed to contain all-null values.\n+\n+Interaction with column names\n+-----------------------------\n+\n+If both :member:`ReadOptions::column_names` and :member:`ConvertOptions::include_columns`,\n+the :member:`ReadOptions::column_names` are assumed to map to CSV columns,\n+and :member:`ConvertOptions::include_columns` is a subset of those column\n+names that will part of the Arrow Table.\n+\n+Data types\n+==========\n+\n+It is possible to convert a CSV column into the following Arrow data types:\n \n Review comment:\n   Well, there's no converter written for them.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T14:59:48.557+0000",
                    "updated": "2019-09-25T14:59:48.557+0000",
                    "started": "2019-09-25T14:59:48.557+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318392",
                    "issueId": "13257803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257803/worklog/318399",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #5500: ARROW-6630: [Doc] Document C++ file formats\nURL: https://github.com/apache/arrow/pull/5500#issuecomment-535073784\n \n \n   Ok, I've also added some docs for JSON and (very incomplete) Parquet. I think this can be merged once CI is green.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T15:19:41.230+0000",
                    "updated": "2019-09-25T15:19:41.230+0000",
                    "started": "2019-09-25T15:19:41.229+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318399",
                    "issueId": "13257803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257803/worklog/318405",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5500: ARROW-6630: [Doc] Document C++ file formats\nURL: https://github.com/apache/arrow/pull/5500#discussion_r328192971\n \n \n\n ##########\n File path: docs/source/cpp/parquet.rst\n ##########\n @@ -0,0 +1,69 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+.. default-domain:: cpp\n+.. highlight:: cpp\n+\n+.. cpp:namespace:: parquet::arrow\n+\n+=================================\n+Reading and writing Parquet files\n+=================================\n \n Review comment:\n   @wesm If you want to quickly check that this stub doesn't say anything silly :-)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T15:32:07.579+0000",
                    "updated": "2019-09-25T15:32:07.579+0000",
                    "started": "2019-09-25T15:32:07.578+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318405",
                    "issueId": "13257803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257803/worklog/318428",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #5500: ARROW-6630: [Doc] Document C++ file formats\nURL: https://github.com/apache/arrow/pull/5500#issuecomment-535096250\n \n \n   Travis-CI: https://travis-ci.org/pitrou/arrow/builds/589504952\r\n   AppVeyor: https://ci.appveyor.com/project/pitrou/arrow/builds/27662662\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T16:10:50.498+0000",
                    "updated": "2019-09-25T16:10:50.498+0000",
                    "started": "2019-09-25T16:10:50.497+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318428",
                    "issueId": "13257803"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257803/worklog/318443",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5500: ARROW-6630: [Doc] Document C++ file formats\nURL: https://github.com/apache/arrow/pull/5500\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-25T16:31:44.635+0000",
                    "updated": "2019-09-25T16:31:44.635+0000",
                    "started": "2019-09-25T16:31:44.635+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "318443",
                    "issueId": "13257803"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 10800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@27480911[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7ac3ad48[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6cf042b7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@bbe0b8c[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7b30ef22[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4e000f7b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@200b09f6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5b928410[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@272739bf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@699281f7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@11ae718a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5ed3c5ab[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10800,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Sep 25 16:31:46 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-09-25T16:31:46.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6630/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2019-09-19T23:29:08.000+0000",
        "updated": "2019-09-25T16:31:46.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Doc][C++] Document the file readers (CSV, JSON, Parquet, etc.)",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13257803/comment/16937898",
                    "id": "16937898",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 5500\n[https://github.com/apache/arrow/pull/5500]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-09-25T16:31:46.297+0000",
                    "updated": "2019-09-25T16:31:46.297+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z06u2g:",
        "customfield_12314139": null
    }
}