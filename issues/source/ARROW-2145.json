{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13138085",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085",
    "key": "ARROW-2145",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341707",
                "id": "12341707",
                "description": "",
                "name": "0.9.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-03-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12527072",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12527072",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13138418",
                    "key": "ARROW-2153",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138418",
                    "fields": {
                        "summary": "[C++/Python] Decimal conversion not working for exponential notation",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
            "name": "cpcloud",
            "key": "cpcloud",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
            },
            "displayName": "Phillip Cloud",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=antonymayi",
            "name": "antonymayi",
            "key": "antonymayi",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Antony Mayi",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=antonymayi",
            "name": "antonymayi",
            "key": "antonymayi",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Antony Mayi",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2145/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@55b9c0fa[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1ab89b66[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@645c71a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@58781f1f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4b5058dc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@557cf960[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7da989c2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6531e18f[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2ceec34d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1e6b8849[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2fbdf5df[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@456a543e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Mar 01 22:27:25 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-03-01T22:27:21.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2145/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2018-02-13T07:19:24.000+0000",
        "updated": "2018-03-01T22:27:25.000+0000",
        "timeoriginalestimate": null,
        "description": "{code:python}\r\nimport pyarrow as pa\r\nimport pandas as pd\r\nimport decimal\r\n\r\npa.Table.from_pandas(pd.DataFrame({'a': [decimal.Decimal('1.1'), decimal.Decimal('NaN')]}))\r\n{code}\r\n\r\nthrows following exception:\r\n\r\n{code}\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"pyarrow/table.pxi\", line 875, in pyarrow.lib.Table.from_pandas (/arrow/python/build/temp.linux-x86_64-3.6/lib.cxx:44927)\r\n  File \"/lib/python3.6/site-packages/pyarrow/pandas_compat.py\", line 350, in dataframe_to_arrays\r\n    convert_types)]\r\n  File \"/lib/python3.6/site-packages/pyarrow/pandas_compat.py\", line 349, in <listcomp>\r\n    for c, t in zip(columns_to_convert,\r\n  File \"/lib/python3.6/site-packages/pyarrow/pandas_compat.py\", line 345, in convert_column\r\n    return pa.array(col, from_pandas=True, type=ty)\r\n  File \"pyarrow/array.pxi\", line 170, in pyarrow.lib.array (/arrow/python/build/temp.linux-x86_64-3.6/lib.cxx:29224)\r\n  File \"pyarrow/array.pxi\", line 70, in pyarrow.lib._ndarray_to_array (/arrow/python/build/temp.linux-x86_64-3.6/lib.cxx:28465)\r\n  File \"pyarrow/error.pxi\", line 98, in pyarrow.lib.check_status (/arrow/python/build/temp.linux-x86_64-3.6/lib.cxx:9068)\r\npyarrow.lib.ArrowException: Unknown error: an integer is required (got type str)\r\n{code}\r\n\r\nSame problem with other special decimal values like {{infinity}}.",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Decimal conversion not working for NaN values",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16363233",
                    "id": "16363233",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Thanks for the report, taking a look now.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-02-13T23:40:21.318+0000",
                    "updated": "2018-02-13T23:40:21.318+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16363332",
                    "id": "16363332",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "[~antonymayi] Do you have a specific use case for this, or were you tinkering around and trying a few things?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-02-14T01:20:43.715+0000",
                    "updated": "2018-02-14T01:20:43.715+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16363574",
                    "id": "16363574",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=antonymayi",
                        "name": "antonymayi",
                        "key": "antonymayi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Antony Mayi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I am trying to use it for a real system where an event with zero value ({{decimal.Decimal('0')}}) is distinct from no event ({{decimal.Decimal('nan')}}) while both cases need to be stored. Being able to store decimal {{nan}} within the same column spares me from introducing another column just to flag the no-event cases.\r\n\r\nThis is the same case like with floats - {{nan}}/{{inf}} is valid float value (and supported by pyarrow/parquet) - but here I need to use decimal because of the precision...",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=antonymayi",
                        "name": "antonymayi",
                        "key": "antonymayi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Antony Mayi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-14T07:05:21.366+0000",
                    "updated": "2018-02-14T07:05:21.366+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16364232",
                    "id": "16364232",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Can you use null instead?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-02-14T15:14:56.597+0000",
                    "updated": "2018-02-14T15:14:56.597+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16364765",
                    "id": "16364765",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=antonymayi",
                        "name": "antonymayi",
                        "key": "antonymayi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Antony Mayi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "bq. Can you use null instead?\r\n\r\nI guess the current implementation looks at the first cell of the column, finds instance of {{Decimal}} and then expects the whole column contains just decimals - so the answer is no, at least based on this observation:\r\n\r\n{code}\r\n>>> pa.Table.from_pandas(pd.DataFrame({'a': [decimal.Decimal('1.1'), None]}))\r\n...\r\npyarrow.lib.ArrowException: Unknown error: 'NoneType' object has no attribute 'as_tuple'\r\n{code}\r\n\r\nor for {{numpy.nan}}:\r\n\r\n{code}\r\n>>> pa.Table.from_pandas(pd.DataFrame({'a': [decimal.Decimal('1.1'), np.nan]}))\r\n...\r\npyarrow.lib.ArrowException: Unknown error: 'float' object has no attribute 'as_tuple'\r\n{code}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=antonymayi",
                        "name": "antonymayi",
                        "key": "antonymayi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Antony Mayi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-14T20:55:11.965+0000",
                    "updated": "2018-02-14T20:55:11.965+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16364798",
                    "id": "16364798",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Those both look like bugs that should be fixed. If those worked (or if {{Decimal('NaN')}} became null), would that work?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-02-14T21:24:57.591+0000",
                    "updated": "2018-02-14T21:24:57.591+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16364830",
                    "id": "16364830",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Both are definitely bugs, working on a fix.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=cpcloud",
                        "name": "cpcloud",
                        "key": "cpcloud",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=cpcloud&avatarId=31265",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=cpcloud&avatarId=31265",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=cpcloud&avatarId=31265",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=cpcloud&avatarId=31265"
                        },
                        "displayName": "Phillip Cloud",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-02-14T21:55:47.420+0000",
                    "updated": "2018-02-14T21:55:47.420+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16364965",
                    "id": "16364965",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=antonymayi",
                        "name": "antonymayi",
                        "key": "antonymayi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Antony Mayi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "yes, if null was accepted that would solve my usecase perfectly (in the same way {{Decimal('NaN')}} would but I guess null is even better as arrow is sparse for nulls while NaN takes space...)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=antonymayi",
                        "name": "antonymayi",
                        "key": "antonymayi",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Antony Mayi",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-14T23:37:54.805+0000",
                    "updated": "2018-02-14T23:37:54.805+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16365672",
                    "id": "16365672",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on issue #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#issuecomment-365950041\n \n \n   Restarted the travis jobs, they seemed to be failing during `apt-get`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-15T14:51:49.130+0000",
                    "updated": "2018-02-15T14:51:49.130+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16365827",
                    "id": "16365827",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168528028\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -157,8 +179,15 @@ class ScalarVisitor {\n   int64_t float_count_;\n   int64_t binary_count_;\n   int64_t unicode_count_;\n+  int64_t decimal_count_;\n+\n+  int32_t max_decimal_precision_;\n+  int32_t max_decimal_scale_;\n+\n   // Place to accumulate errors\n   // std::vector<Status> errors_;\n+  OwnedRefNoGIL decimal_module_;\n \n Review comment:\n   Is this actually required? You are only using the decimal type below.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-15T16:22:48.739+0000",
                    "updated": "2018-02-15T16:22:48.739+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16365838",
                    "id": "16365838",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168528982\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -830,12 +857,15 @@ class DecimalConverter\n  public:\n   // Append a non-missing item\n   Status AppendItem(PyObject* obj) {\n-    /// TODO(phillipc): Check for nan?\n     Decimal128 value;\n     const auto& type = static_cast<const DecimalType&>(*typed_builder_->type());\n     RETURN_NOT_OK(internal::DecimalFromPythonDecimal(obj, type, &value));\n     return typed_builder_->Append(value);\n   }\n+\n+  bool IsNull(PyObject* obj) const {\n+    return obj == Py_None || obj == numpy_nan || internal::PyFloat_isnan(obj);\n \n Review comment:\n   This won't work with Python Decimal nans, right? Try `decimal.Decimal('nan')`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-15T16:25:42.939+0000",
                    "updated": "2018-02-15T16:25:42.939+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16365839",
                    "id": "16365839",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168529162\n \n \n\n ##########\n File path: cpp/src/arrow/python/python-test.cc\n ##########\n @@ -160,5 +160,41 @@ TEST(BuiltinConversionTest, TestMixedTypeFails) {\n   ASSERT_RAISES(UnknownError, ConvertPySequence(list, pool, &arr));\n }\n \n+TEST(DecimalMissingValueTest, TestNoneAndNaN) {\n \n Review comment:\n   What is the policy for adding tests here rather than in `test_array.py`? It seems writing tests in pure Python is generally easier :-)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-15T16:26:13.811+0000",
                    "updated": "2018-02-15T16:26:13.811+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16365841",
                    "id": "16365841",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168529162\n \n \n\n ##########\n File path: cpp/src/arrow/python/python-test.cc\n ##########\n @@ -160,5 +160,41 @@ TEST(BuiltinConversionTest, TestMixedTypeFails) {\n   ASSERT_RAISES(UnknownError, ConvertPySequence(list, pool, &arr));\n }\n \n+TEST(DecimalMissingValueTest, TestNoneAndNaN) {\n \n Review comment:\n   What is the policy for adding tests here rather than in `pyarrow/tests`? It seems writing tests in pure Python is generally easier :-)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-15T16:26:35.284+0000",
                    "updated": "2018-02-15T16:26:35.284+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16365857",
                    "id": "16365857",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168532160\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -157,8 +179,15 @@ class ScalarVisitor {\n   int64_t float_count_;\n   int64_t binary_count_;\n   int64_t unicode_count_;\n+  int64_t decimal_count_;\n+\n+  int32_t max_decimal_precision_;\n+  int32_t max_decimal_scale_;\n+\n   // Place to accumulate errors\n   // std::vector<Status> errors_;\n+  OwnedRefNoGIL decimal_module_;\n \n Review comment:\n   I might be misunderstanding the use case for `OwnedRefNoGIL`. \r\n   \r\n   My understanding is that if we're `Py_XDECREF`ing something and we do not hold then GIL then we need to acquire it.\r\n   \r\n   The GIL is released in Cython before the function that instantiates this class is called (and isn't subsequently acquired in that function). Assuming my understanding is correct then we need to acquire the GIL before calling `Py_XDECREF` on this.\r\n   \r\n   Are you suggesting that because the order of destruction here is guaranteed to be the reverse of initialization order that we don't need to care that `decimal_module_` holds the GIL because we'll never decref `decimal_module_` before we decref `decimal_type_`?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-15T16:34:32.932+0000",
                    "updated": "2018-02-15T16:34:32.932+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16365865",
                    "id": "16365865",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168533239\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -157,8 +179,15 @@ class ScalarVisitor {\n   int64_t float_count_;\n   int64_t binary_count_;\n   int64_t unicode_count_;\n+  int64_t decimal_count_;\n+\n+  int32_t max_decimal_precision_;\n+  int32_t max_decimal_scale_;\n+\n   // Place to accumulate errors\n   // std::vector<Status> errors_;\n+  OwnedRefNoGIL decimal_module_;\n \n Review comment:\n   What I mean is that you don't care about keeping a reference to the decimal module if you only need to use the decimal type:\r\n   ```\r\n   >>> D = __import__('decimal').Decimal\r\n   >>> sys.modules['decimal'] = None\r\n   >>> D(100)\r\n   Decimal('100')\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-15T16:37:45.536+0000",
                    "updated": "2018-02-15T16:37:45.536+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16365880",
                    "id": "16365880",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168534792\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -157,8 +179,15 @@ class ScalarVisitor {\n   int64_t float_count_;\n   int64_t binary_count_;\n   int64_t unicode_count_;\n+  int64_t decimal_count_;\n+\n+  int32_t max_decimal_precision_;\n+  int32_t max_decimal_scale_;\n+\n   // Place to accumulate errors\n   // std::vector<Status> errors_;\n+  OwnedRefNoGIL decimal_module_;\n \n Review comment:\n   Oh, awesome. There are a few places that we have unnecessary refs to the `decimal` module. I'll open a JIRA to clean those up (and remove this one). Thanks for the review.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-15T16:42:22.872+0000",
                    "updated": "2018-02-15T16:42:22.872+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16365887",
                    "id": "16365887",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168535204\n \n \n\n ##########\n File path: cpp/src/arrow/python/python-test.cc\n ##########\n @@ -160,5 +160,41 @@ TEST(BuiltinConversionTest, TestMixedTypeFails) {\n   ASSERT_RAISES(UnknownError, ConvertPySequence(list, pool, &arr));\n }\n \n+TEST(DecimalMissingValueTest, TestNoneAndNaN) {\n \n Review comment:\n   It's funny you mention that. I agree, but I wanted to be able to step through C++ code in the CLion IDE so I wrote the test here.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-15T16:43:40.940+0000",
                    "updated": "2018-02-15T16:43:40.940+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16366333",
                    "id": "16366333",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168624359\n \n \n\n ##########\n File path: python/pyarrow/tests/test_convert_builtin.py\n ##########\n @@ -639,3 +639,9 @@ def test_structarray_from_arrays_coerce():\n         pa.StructArray.from_arrays(arrays)\n \n     assert result.equals(expected)\n+\n+\n+def test_decimal_array_with_none_and_nan():\n+    values = [decimal.Decimal('1.234'), None, np.nan]\n \n Review comment:\n   Let me add `Decimal('nan')` to this list.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-15T22:11:50.151+0000",
                    "updated": "2018-02-15T22:11:50.151+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16366368",
                    "id": "16366368",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168633162\n \n \n\n ##########\n File path: python/pyarrow/tests/test_convert_builtin.py\n ##########\n @@ -639,3 +639,9 @@ def test_structarray_from_arrays_coerce():\n         pa.StructArray.from_arrays(arrays)\n \n     assert result.equals(expected)\n+\n+\n+def test_decimal_array_with_none_and_nan():\n+    values = [decimal.Decimal('1.234'), None, np.nan]\n \n Review comment:\n   Done\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-15T22:51:47.736+0000",
                    "updated": "2018-02-15T22:51:47.736+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16366370",
                    "id": "16366370",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168633403\n \n \n\n ##########\n File path: cpp/src/arrow/python/helpers.cc\n ##########\n @@ -193,6 +195,32 @@ Status UInt64FromPythonInt(PyObject* obj, uint64_t* out) {\n   return Status::OK();\n }\n \n+bool PyFloat_isnan(const PyObject* obj) {\n+  return PyFloat_Check(obj) && std::isnan(PyFloat_AS_DOUBLE(obj));\n+}\n+\n+bool PyDecimal_Check(const PyObject* obj) {\n+  // TODO(phillipc): Is this expensive? Can we make it a global?\n+  OwnedRef Decimal;\n+  {\n+    OwnedRef decimal;\n \n Review comment:\n   @wesm @pitrou is there any reason we shouldn't make these `static` global variables, so we don't have to call these APIs all over the place and inside of loops?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-15T22:52:59.891+0000",
                    "updated": "2018-02-15T22:52:59.891+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16366377",
                    "id": "16366377",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168634635\n \n \n\n ##########\n File path: cpp/src/arrow/python/helpers.cc\n ##########\n @@ -193,6 +195,32 @@ Status UInt64FromPythonInt(PyObject* obj, uint64_t* out) {\n   return Status::OK();\n }\n \n+bool PyFloat_isnan(const PyObject* obj) {\n+  return PyFloat_Check(obj) && std::isnan(PyFloat_AS_DOUBLE(obj));\n+}\n+\n+bool PyDecimal_Check(const PyObject* obj) {\n+  // TODO(phillipc): Is this expensive? Can we make it a global?\n+  OwnedRef Decimal;\n+  {\n+    OwnedRef decimal;\n \n Review comment:\n   IMO it's fine to make it a static global (or a singleton, etc.), as long as we don't want to support subinterpreters perhaps.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-15T22:59:01.249+0000",
                    "updated": "2018-02-15T22:59:01.249+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16366378",
                    "id": "16366378",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168634715\n \n \n\n ##########\n File path: cpp/src/arrow/python/helpers.cc\n ##########\n @@ -193,6 +195,32 @@ Status UInt64FromPythonInt(PyObject* obj, uint64_t* out) {\n   return Status::OK();\n }\n \n+bool PyFloat_isnan(const PyObject* obj) {\n+  return PyFloat_Check(obj) && std::isnan(PyFloat_AS_DOUBLE(obj));\n+}\n+\n+bool PyDecimal_Check(const PyObject* obj) {\n+  // TODO(phillipc): Is this expensive? Can we make it a global?\n+  OwnedRef Decimal;\n+  {\n+    OwnedRef decimal;\n \n Review comment:\n   By the way the nested block above doesn't seem needed.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-15T22:59:25.466+0000",
                    "updated": "2018-02-15T22:59:25.466+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16366381",
                    "id": "16366381",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168635582\n \n \n\n ##########\n File path: cpp/src/arrow/python/helpers.h\n ##########\n @@ -55,7 +54,10 @@ PyObject* DecimalFromString(PyObject* decimal_constructor,\n                             const std::string& decimal_string);\n Status DecimalFromPythonDecimal(PyObject* python_decimal, const DecimalType& arrow_type,\n                                 Decimal128* out);\n-bool IsPyInteger(PyObject* obj);\n+bool IsPyInteger(const PyObject* obj);\n \n Review comment:\n   Why the consts? I don't think it makes sense, and you're bound to do a lot of casts as soon as you call the Python C API.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-15T23:04:00.486+0000",
                    "updated": "2018-02-15T23:04:00.486+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16366383",
                    "id": "16366383",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168635675\n \n \n\n ##########\n File path: cpp/src/arrow/python/helpers.h\n ##########\n @@ -55,7 +54,10 @@ PyObject* DecimalFromString(PyObject* decimal_constructor,\n                             const std::string& decimal_string);\n Status DecimalFromPythonDecimal(PyObject* python_decimal, const DecimalType& arrow_type,\n                                 Decimal128* out);\n-bool IsPyInteger(PyObject* obj);\n+bool IsPyInteger(const PyObject* obj);\n \n Review comment:\n   Note `PyObject` is non-const pretty much by construction, as it has a reference count that can be mutated by any operation.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-15T23:04:34.152+0000",
                    "updated": "2018-02-15T23:04:34.152+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16366394",
                    "id": "16366394",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168636122\n \n \n\n ##########\n File path: cpp/src/arrow/python/helpers.cc\n ##########\n @@ -193,6 +195,32 @@ Status UInt64FromPythonInt(PyObject* obj, uint64_t* out) {\n   return Status::OK();\n }\n \n+bool PyFloat_isnan(const PyObject* obj) {\n+  return PyFloat_Check(obj) && std::isnan(PyFloat_AS_DOUBLE(obj));\n+}\n+\n+bool PyDecimal_Check(const PyObject* obj) {\n+  // TODO(phillipc): Is this expensive? Can we make it a global?\n+  OwnedRef Decimal;\n+  {\n+    OwnedRef decimal;\n+    Status status = ImportModule(\"decimal\", &decimal);\n+    DCHECK(status.ok()) << \"Error during import of the decimal module\";\n+    status = ImportFromModule(decimal, \"Decimal\", &Decimal);\n+    DCHECK(status.ok())\n+        << \"Error during import of the Decimal object from the decimal module\";\n+  }\n+  const int32_t result = PyObject_IsInstance(const_cast<PyObject*>(obj), Decimal.obj());\n+  DCHECK_NE(result, -1) << \" error during PyObject_IsInstance check\";\n+  return result == 1;\n+}\n+\n+bool PyDecimal_isnan(const PyObject* obj) {\n+  OwnedRef is_nan(PyObject_CallMethod(\n+      const_cast<PyObject*>(obj), const_cast<char*>(\"is_nan\"), const_cast<char*>(\"()\")));\n \n Review comment:\n   The last argument can simply be the empty string AFAIR.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-15T23:07:01.809+0000",
                    "updated": "2018-02-15T23:07:01.809+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16366397",
                    "id": "16366397",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168636590\n \n \n\n ##########\n File path: cpp/src/arrow/python/helpers.cc\n ##########\n @@ -193,6 +195,32 @@ Status UInt64FromPythonInt(PyObject* obj, uint64_t* out) {\n   return Status::OK();\n }\n \n+bool PyFloat_isnan(const PyObject* obj) {\n+  return PyFloat_Check(obj) && std::isnan(PyFloat_AS_DOUBLE(obj));\n+}\n+\n+bool PyDecimal_Check(const PyObject* obj) {\n+  // TODO(phillipc): Is this expensive? Can we make it a global?\n+  OwnedRef Decimal;\n+  {\n+    OwnedRef decimal;\n+    Status status = ImportModule(\"decimal\", &decimal);\n+    DCHECK(status.ok()) << \"Error during import of the decimal module\";\n+    status = ImportFromModule(decimal, \"Decimal\", &Decimal);\n+    DCHECK(status.ok())\n+        << \"Error during import of the Decimal object from the decimal module\";\n+  }\n+  const int32_t result = PyObject_IsInstance(const_cast<PyObject*>(obj), Decimal.obj());\n+  DCHECK_NE(result, -1) << \" error during PyObject_IsInstance check\";\n+  return result == 1;\n+}\n+\n+bool PyDecimal_isnan(const PyObject* obj) {\n+  OwnedRef is_nan(PyObject_CallMethod(\n+      const_cast<PyObject*>(obj), const_cast<char*>(\"is_nan\"), const_cast<char*>(\"()\")));\n+  return PyDecimal_Check(obj) && is_nan.obj() == Py_True;\n \n Review comment:\n   You should call `PyDecimal_Check` *before* calling the method. Also you should check if the method raises. And it's better to use `PyObject_IsTrue` rather than compare against `Py_True`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-15T23:09:27.522+0000",
                    "updated": "2018-02-15T23:09:27.522+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16366400",
                    "id": "16366400",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168637082\n \n \n\n ##########\n File path: cpp/src/arrow/python/helpers.cc\n ##########\n @@ -193,6 +195,32 @@ Status UInt64FromPythonInt(PyObject* obj, uint64_t* out) {\n   return Status::OK();\n }\n \n+bool PyFloat_isnan(const PyObject* obj) {\n+  return PyFloat_Check(obj) && std::isnan(PyFloat_AS_DOUBLE(obj));\n+}\n+\n+bool PyDecimal_Check(const PyObject* obj) {\n+  // TODO(phillipc): Is this expensive? Can we make it a global?\n+  OwnedRef Decimal;\n+  {\n+    OwnedRef decimal;\n \n Review comment:\n   Yep, okay I'll refactor and make those static\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-15T23:11:47.139+0000",
                    "updated": "2018-02-15T23:11:47.139+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16366401",
                    "id": "16366401",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168637166\n \n \n\n ##########\n File path: cpp/src/arrow/python/helpers.h\n ##########\n @@ -55,7 +54,10 @@ PyObject* DecimalFromString(PyObject* decimal_constructor,\n                             const std::string& decimal_string);\n Status DecimalFromPythonDecimal(PyObject* python_decimal, const DecimalType& arrow_type,\n                                 Decimal128* out);\n-bool IsPyInteger(PyObject* obj);\n+bool IsPyInteger(const PyObject* obj);\n \n Review comment:\n   Ok, I was following convention in the file. I can adjust.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-15T23:12:15.697+0000",
                    "updated": "2018-02-15T23:12:15.697+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16366402",
                    "id": "16366402",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168637181\n \n \n\n ##########\n File path: cpp/src/arrow/python/helpers.cc\n ##########\n @@ -193,6 +195,32 @@ Status UInt64FromPythonInt(PyObject* obj, uint64_t* out) {\n   return Status::OK();\n }\n \n+bool PyFloat_isnan(const PyObject* obj) {\n+  return PyFloat_Check(obj) && std::isnan(PyFloat_AS_DOUBLE(obj));\n+}\n+\n+bool PyDecimal_Check(const PyObject* obj) {\n+  // TODO(phillipc): Is this expensive? Can we make it a global?\n+  OwnedRef Decimal;\n+  {\n+    OwnedRef decimal;\n+    Status status = ImportModule(\"decimal\", &decimal);\n+    DCHECK(status.ok()) << \"Error during import of the decimal module\";\n+    status = ImportFromModule(decimal, \"Decimal\", &Decimal);\n+    DCHECK(status.ok())\n+        << \"Error during import of the Decimal object from the decimal module\";\n+  }\n+  const int32_t result = PyObject_IsInstance(const_cast<PyObject*>(obj), Decimal.obj());\n+  DCHECK_NE(result, -1) << \" error during PyObject_IsInstance check\";\n+  return result == 1;\n+}\n+\n+bool PyDecimal_isnan(const PyObject* obj) {\n+  OwnedRef is_nan(PyObject_CallMethod(\n+      const_cast<PyObject*>(obj), const_cast<char*>(\"is_nan\"), const_cast<char*>(\"()\")));\n \n Review comment:\n   Cool\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-15T23:12:20.586+0000",
                    "updated": "2018-02-15T23:12:20.586+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16366403",
                    "id": "16366403",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168637263\n \n \n\n ##########\n File path: cpp/src/arrow/python/helpers.cc\n ##########\n @@ -193,6 +195,32 @@ Status UInt64FromPythonInt(PyObject* obj, uint64_t* out) {\n   return Status::OK();\n }\n \n+bool PyFloat_isnan(const PyObject* obj) {\n+  return PyFloat_Check(obj) && std::isnan(PyFloat_AS_DOUBLE(obj));\n+}\n+\n+bool PyDecimal_Check(const PyObject* obj) {\n+  // TODO(phillipc): Is this expensive? Can we make it a global?\n+  OwnedRef Decimal;\n+  {\n+    OwnedRef decimal;\n+    Status status = ImportModule(\"decimal\", &decimal);\n+    DCHECK(status.ok()) << \"Error during import of the decimal module\";\n+    status = ImportFromModule(decimal, \"Decimal\", &Decimal);\n+    DCHECK(status.ok())\n+        << \"Error during import of the Decimal object from the decimal module\";\n+  }\n+  const int32_t result = PyObject_IsInstance(const_cast<PyObject*>(obj), Decimal.obj());\n+  DCHECK_NE(result, -1) << \" error during PyObject_IsInstance check\";\n+  return result == 1;\n+}\n+\n+bool PyDecimal_isnan(const PyObject* obj) {\n+  OwnedRef is_nan(PyObject_CallMethod(\n+      const_cast<PyObject*>(obj), const_cast<char*>(\"is_nan\"), const_cast<char*>(\"()\")));\n+  return PyDecimal_Check(obj) && is_nan.obj() == Py_True;\n \n Review comment:\n   Yes, not sure how I missed that :)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-15T23:12:46.650+0000",
                    "updated": "2018-02-15T23:12:46.650+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16366418",
                    "id": "16366418",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168641395\n \n \n\n ##########\n File path: cpp/src/arrow/python/helpers.h\n ##########\n @@ -55,7 +54,10 @@ PyObject* DecimalFromString(PyObject* decimal_constructor,\n                             const std::string& decimal_string);\n Status DecimalFromPythonDecimal(PyObject* python_decimal, const DecimalType& arrow_type,\n                                 Decimal128* out);\n-bool IsPyInteger(PyObject* obj);\n+bool IsPyInteger(const PyObject* obj);\n \n Review comment:\n   I've been removing all the instances of `const PyObject*` after having a compiler warning from an internal Py-API, so happy to see them all go\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-15T23:35:13.173+0000",
                    "updated": "2018-02-15T23:35:13.173+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16366447",
                    "id": "16366447",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168648084\n \n \n\n ##########\n File path: cpp/src/arrow/python/helpers.cc\n ##########\n @@ -193,6 +195,32 @@ Status UInt64FromPythonInt(PyObject* obj, uint64_t* out) {\n   return Status::OK();\n }\n \n+bool PyFloat_isnan(const PyObject* obj) {\n+  return PyFloat_Check(obj) && std::isnan(PyFloat_AS_DOUBLE(obj));\n+}\n+\n+bool PyDecimal_Check(const PyObject* obj) {\n+  // TODO(phillipc): Is this expensive? Can we make it a global?\n+  OwnedRef Decimal;\n+  {\n+    OwnedRef decimal;\n \n Review comment:\n   Hm so it appears that string interning of module names doesn't play well with C++ globals. I'll leave these as they are for now.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-16T00:19:31.714+0000",
                    "updated": "2018-02-16T00:19:31.714+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16366777",
                    "id": "16366777",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168711422\n \n \n\n ##########\n File path: cpp/src/arrow/python/helpers.cc\n ##########\n @@ -193,6 +195,32 @@ Status UInt64FromPythonInt(PyObject* obj, uint64_t* out) {\n   return Status::OK();\n }\n \n+bool PyFloat_isnan(const PyObject* obj) {\n+  return PyFloat_Check(obj) && std::isnan(PyFloat_AS_DOUBLE(obj));\n+}\n+\n+bool PyDecimal_Check(const PyObject* obj) {\n+  // TODO(phillipc): Is this expensive? Can we make it a global?\n+  OwnedRef Decimal;\n+  {\n+    OwnedRef decimal;\n \n Review comment:\n   Right, you probably can't use `OwnedRef` here since the destructor would trigger too late. But you could have a `PyObject*`. The only downside is that it would make the object eternal.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-16T09:46:16.682+0000",
                    "updated": "2018-02-16T09:46:16.682+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16367739",
                    "id": "16367739",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on issue #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#issuecomment-366328339\n \n \n   @pitrou any more comments here?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-16T19:01:56.603+0000",
                    "updated": "2018-02-16T19:01:56.603+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16368578",
                    "id": "16368578",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168956378\n \n \n\n ##########\n File path: cpp/src/arrow/python/common.h\n ##########\n @@ -98,6 +98,8 @@ class ARROW_EXPORT OwnedRef {\n // (e.g. if it is released in the middle of a function for performance reasons)\n class ARROW_EXPORT OwnedRefNoGIL : public OwnedRef {\n  public:\n+  using OwnedRef::OwnedRef;\n \n Review comment:\n   I'm not a C++ expert, so I'm curious why this is necessary?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-18T16:09:42.039+0000",
                    "updated": "2018-02-18T16:09:42.039+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16368579",
                    "id": "16368579",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168956480\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -763,23 +746,25 @@ Status NumPyConverter::ConvertDecimals() {\n   RETURN_NOT_OK(builder.Resize(length_));\n \n   const auto& decimal_type = static_cast<const DecimalType&>(*type_);\n-  PyObject* Decimal_type_object = Decimal.obj();\n+  const int64_t length = length_;\n \n-  for (int64_t i = 0; i < length_; ++i) {\n+  for (int64_t i = 0; i < length; ++i) {\n     object = objects[i];\n \n-    if (PyObject_IsInstance(object, Decimal_type_object)) {\n-      Decimal128 value;\n-      RETURN_NOT_OK(internal::DecimalFromPythonDecimal(object, decimal_type, &value));\n-      RETURN_NOT_OK(builder.Append(value));\n-    } else if (PandasObjectIsNull(object)) {\n-      RETURN_NOT_OK(builder.AppendNull());\n-    } else {\n+    if (ARROW_PREDICT_FALSE(!internal::PyDecimal_Check(object))) {\n       std::stringstream ss;\n       ss << \"Error converting from Python objects to Decimal: \";\n       RETURN_NOT_OK(InvalidConversion(object, \"decimal.Decimal\", &ss));\n       return Status::Invalid(ss.str());\n     }\n+\n+    if (PandasObjectIsNull(object) || internal::PyDecimal_ISNAN(object)) {\n \n Review comment:\n   Can `PandasObjectIsNull` return true on a Decimal instance?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-18T16:09:42.041+0000",
                    "updated": "2018-02-18T16:09:42.041+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16368580",
                    "id": "16368580",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168956330\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -111,10 +122,22 @@ class ScalarVisitor {\n         ss << type->ToString();\n         return Status::Invalid(ss.str());\n       }\n+    } else if (internal::PyDecimal_Check(obj)) {\n+      // Don't infer anything if we encounter a Decimal('nan')\n+      if (!internal::PyDecimal_ISNAN(obj)) {\n+        int32_t precision;\n+        int32_t scale;\n+        RETURN_NOT_OK(internal::InferDecimalPrecisionAndScale(obj, &precision, &scale));\n+        max_decimal_precision_ = std::max(max_decimal_precision_, precision);\n+        if (std::abs(max_decimal_scale_) < std::abs(scale)) {\n \n Review comment:\n   Might be nice to add a comment motivating the algorithm here (why compare the absolute values but then memorize the original value)?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-18T16:09:42.044+0000",
                    "updated": "2018-02-18T16:09:42.044+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16368581",
                    "id": "16368581",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168956308\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -157,8 +182,14 @@ class ScalarVisitor {\n   int64_t float_count_;\n   int64_t binary_count_;\n   int64_t unicode_count_;\n+  int64_t decimal_count_;\n+\n+  int32_t max_decimal_precision_;\n+  int32_t max_decimal_scale_;\n+\n   // Place to accumulate errors\n   // std::vector<Status> errors_;\n+  OwnedRefNoGIL decimal_type_;\n \n Review comment:\n   This member doesn't seem used actually. Were you planning to use it with `PyObject_IsInstance` instead of the costlier call to `internal::PyDecimal_Check`?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-18T16:09:42.046+0000",
                    "updated": "2018-02-18T16:09:42.046+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16368582",
                    "id": "16368582",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168956525\n \n \n\n ##########\n File path: python/pyarrow/tests/test_convert_builtin.py\n ##########\n @@ -639,3 +639,9 @@ def test_structarray_from_arrays_coerce():\n         pa.StructArray.from_arrays(arrays)\n \n     assert result.equals(expected)\n+\n+\n+def test_decimal_array_with_none_and_nan():\n+    values = [decimal.Decimal('1.234'), None, np.nan, decimal.Decimal('nan')]\n+    array = pa.array(values)\n+    assert array.to_pylist() == values[:2] + [None, None]\n \n Review comment:\n   Also check that the Arrow type was inferred correctly?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-18T16:09:42.073+0000",
                    "updated": "2018-02-18T16:09:42.073+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16368619",
                    "id": "16368619",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168961327\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -111,10 +122,22 @@ class ScalarVisitor {\n         ss << type->ToString();\n         return Status::Invalid(ss.str());\n       }\n+    } else if (internal::PyDecimal_Check(obj)) {\n+      // Don't infer anything if we encounter a Decimal('nan')\n+      if (!internal::PyDecimal_ISNAN(obj)) {\n+        int32_t precision;\n+        int32_t scale;\n+        RETURN_NOT_OK(internal::InferDecimalPrecisionAndScale(obj, &precision, &scale));\n+        max_decimal_precision_ = std::max(max_decimal_precision_, precision);\n+        if (std::abs(max_decimal_scale_) < std::abs(scale)) {\n \n Review comment:\n   Actually, reconsidering this based on your comment this really should be just the max scale. Negative scale should contribute to precision only if it would increase precision. The goal here is to \"cast the widest net\", ie the max precision and max scale. Negative scale complicates things a tiny bit. I'll add some commentary.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-18T18:48:50.857+0000",
                    "updated": "2018-02-18T18:48:50.857+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16368620",
                    "id": "16368620",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168961368\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -157,8 +182,14 @@ class ScalarVisitor {\n   int64_t float_count_;\n   int64_t binary_count_;\n   int64_t unicode_count_;\n+  int64_t decimal_count_;\n+\n+  int32_t max_decimal_precision_;\n+  int32_t max_decimal_scale_;\n+\n   // Place to accumulate errors\n   // std::vector<Status> errors_;\n+  OwnedRefNoGIL decimal_type_;\n \n Review comment:\n   Yes, thanks. Will fix.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-18T18:49:47.065+0000",
                    "updated": "2018-02-18T18:49:47.065+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16368628",
                    "id": "16368628",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168961979\n \n \n\n ##########\n File path: cpp/src/arrow/python/common.h\n ##########\n @@ -98,6 +98,8 @@ class ARROW_EXPORT OwnedRef {\n // (e.g. if it is released in the middle of a function for performance reasons)\n class ARROW_EXPORT OwnedRefNoGIL : public OwnedRef {\n  public:\n+  using OwnedRef::OwnedRef;\n \n Review comment:\n   Constructors are not inherited by default. I'm not actually using this, so it should cost nothing at runtime. If we ever wanted to construct one of these with a pointer as it's first argument we'd have to define it anyway. I can remove it if you'd like.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-18T19:11:30.611+0000",
                    "updated": "2018-02-18T19:11:30.611+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16368638",
                    "id": "16368638",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168962543\n \n \n\n ##########\n File path: cpp/src/arrow/python/common.h\n ##########\n @@ -98,6 +98,8 @@ class ARROW_EXPORT OwnedRef {\n // (e.g. if it is released in the middle of a function for performance reasons)\n class ARROW_EXPORT OwnedRefNoGIL : public OwnedRef {\n  public:\n+  using OwnedRef::OwnedRef;\n \n Review comment:\n   No problem with me. I had forgotten about non-inheritance of constructors.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-18T19:30:17.741+0000",
                    "updated": "2018-02-18T19:30:17.741+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16368645",
                    "id": "16368645",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168962671\n \n \n\n ##########\n File path: python/pyarrow/tests/test_convert_builtin.py\n ##########\n @@ -639,3 +639,9 @@ def test_structarray_from_arrays_coerce():\n         pa.StructArray.from_arrays(arrays)\n \n     assert result.equals(expected)\n+\n+\n+def test_decimal_array_with_none_and_nan():\n+    values = [decimal.Decimal('1.234'), None, np.nan, decimal.Decimal('nan')]\n+    array = pa.array(values)\n+    assert array.to_pylist() == values[:2] + [None, None]\n \n Review comment:\n   Yep will do.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-18T19:33:27.071+0000",
                    "updated": "2018-02-18T19:33:27.071+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16368646",
                    "id": "16368646",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#discussion_r168962674\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -763,23 +746,25 @@ Status NumPyConverter::ConvertDecimals() {\n   RETURN_NOT_OK(builder.Resize(length_));\n \n   const auto& decimal_type = static_cast<const DecimalType&>(*type_);\n-  PyObject* Decimal_type_object = Decimal.obj();\n+  const int64_t length = length_;\n \n-  for (int64_t i = 0; i < length_; ++i) {\n+  for (int64_t i = 0; i < length; ++i) {\n     object = objects[i];\n \n-    if (PyObject_IsInstance(object, Decimal_type_object)) {\n-      Decimal128 value;\n-      RETURN_NOT_OK(internal::DecimalFromPythonDecimal(object, decimal_type, &value));\n-      RETURN_NOT_OK(builder.Append(value));\n-    } else if (PandasObjectIsNull(object)) {\n-      RETURN_NOT_OK(builder.AppendNull());\n-    } else {\n+    if (ARROW_PREDICT_FALSE(!internal::PyDecimal_Check(object))) {\n       std::stringstream ss;\n       ss << \"Error converting from Python objects to Decimal: \";\n       RETURN_NOT_OK(InvalidConversion(object, \"decimal.Decimal\", &ss));\n       return Status::Invalid(ss.str());\n     }\n+\n+    if (PandasObjectIsNull(object) || internal::PyDecimal_ISNAN(object)) {\n \n Review comment:\n   No, I'll fix that.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-18T19:33:32.831+0000",
                    "updated": "2018-02-18T19:33:32.831+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16372200",
                    "id": "16372200",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#issuecomment-367511927\n \n \n   needs rebase\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-21T23:19:21.662+0000",
                    "updated": "2018-02-21T23:19:21.662+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16374727",
                    "id": "16374727",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud opened a new pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651\n \n \n   This PR closes the following JIRAs\n   \n   ARROW-2145: [Python] Decimal conversion not working for NaN values\n   ARROW-2153: [C++/Python] Decimal conversion not working for exponential notation\n   ARROW-2157: [Python] Decimal arrays cannot be constructed from Python lists\n   ARROW-2160: [C++/Python] Fix decimal precision inference\n   ARROW-2177: [C++] Remove support for specifying negative scale values in DecimalType\n   \n   I originally separated these fixes into a few smaller PRs, but it turned out\n   that the issues were all related, so I fixed them all in one PR.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-23T17:50:05.449+0000",
                    "updated": "2018-02-23T17:50:05.449+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16374728",
                    "id": "16374728",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on issue #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610#issuecomment-368086435\n \n \n   Closed in favor of #1651 \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-23T17:50:27.570+0000",
                    "updated": "2018-02-23T17:50:27.570+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16374729",
                    "id": "16374729",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud closed pull request #1610: ARROW-2145/ARROW-2157: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1610\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/python/arrow_to_pandas.cc b/cpp/src/arrow/python/arrow_to_pandas.cc\nindex 125892afe..6ffc36d20 100644\n--- a/cpp/src/arrow/python/arrow_to_pandas.cc\n+++ b/cpp/src/arrow/python/arrow_to_pandas.cc\n@@ -639,11 +639,11 @@ static Status ConvertTimes(PandasOptions options, const ChunkedArray& data,\n static Status ConvertDecimals(PandasOptions options, const ChunkedArray& data,\n                               PyObject** out_values) {\n   PyAcquireGIL lock;\n-  OwnedRef decimal_ref;\n-  OwnedRef Decimal_ref;\n-  RETURN_NOT_OK(internal::ImportModule(\"decimal\", &decimal_ref));\n-  RETURN_NOT_OK(internal::ImportFromModule(decimal_ref, \"Decimal\", &Decimal_ref));\n-  PyObject* Decimal = Decimal_ref.obj();\n+  OwnedRef decimal;\n+  OwnedRef Decimal;\n+  RETURN_NOT_OK(internal::ImportModule(\"decimal\", &decimal));\n+  RETURN_NOT_OK(internal::ImportFromModule(decimal, \"Decimal\", &Decimal));\n+  PyObject* decimal_constructor = Decimal.obj();\n \n   for (int c = 0; c < data.num_chunks(); c++) {\n     const auto& arr = static_cast<const arrow::Decimal128Array&>(*data.chunk(c));\n@@ -653,7 +653,8 @@ static Status ConvertDecimals(PandasOptions options, const ChunkedArray& data,\n         Py_INCREF(Py_None);\n         *out_values++ = Py_None;\n       } else {\n-        *out_values++ = internal::DecimalFromString(Decimal, arr.FormatValue(i));\n+        *out_values++ =\n+            internal::DecimalFromString(decimal_constructor, arr.FormatValue(i));\n         RETURN_IF_PYERROR();\n       }\n     }\ndiff --git a/cpp/src/arrow/python/builtin_convert.cc b/cpp/src/arrow/python/builtin_convert.cc\nindex a286c6bd5..891793cc9 100644\n--- a/cpp/src/arrow/python/builtin_convert.cc\n+++ b/cpp/src/arrow/python/builtin_convert.cc\n@@ -76,7 +76,18 @@ class ScalarVisitor {\n         timestamp_count_(0),\n         float_count_(0),\n         binary_count_(0),\n-        unicode_count_(0) {}\n+        unicode_count_(0),\n+        decimal_count_(0),\n+        max_decimal_metadata_(std::numeric_limits<int32_t>::min(),\n+                              std::numeric_limits<int32_t>::min()),\n+        decimal_type_() {\n+    OwnedRefNoGIL decimal_module;\n+    Status status = ::arrow::py::internal::ImportModule(\"decimal\", &decimal_module);\n+    DCHECK(status.ok()) << \"Unable to import decimal module\";\n+    status = ::arrow::py::internal::ImportFromModule(decimal_module, \"Decimal\",\n+                                                     &decimal_type_);\n+    DCHECK(status.ok()) << \"Unable to import decimal.Decimal\";\n+  }\n \n   Status Visit(PyObject* obj) {\n     ++total_count_;\n@@ -111,10 +122,16 @@ class ScalarVisitor {\n         ss << type->ToString();\n         return Status::Invalid(ss.str());\n       }\n+    } else if (PyObject_IsInstance(obj, decimal_type_.obj())) {\n+      // Don't infer anything if we encounter a Decimal('nan')\n+      if (!internal::PyDecimal_ISNAN(obj)) {\n+        RETURN_NOT_OK(max_decimal_metadata_.Update(obj));\n+      }\n+      ++decimal_count_;\n     } else {\n       // TODO(wesm): accumulate error information somewhere\n       static std::string supported_types =\n-          \"bool, float, integer, date, datetime, bytes, unicode\";\n+          \"bool, float, integer, date, datetime, bytes, unicode, decimal\";\n       std::stringstream ss;\n       ss << \"Error inferring Arrow data type for collection of Python objects. \";\n       RETURN_NOT_OK(InvalidConversion(obj, supported_types, &ss));\n@@ -125,7 +142,9 @@ class ScalarVisitor {\n \n   std::shared_ptr<DataType> GetType() {\n     // TODO(wesm): handling mixed-type cases\n-    if (float_count_) {\n+    if (decimal_count_) {\n+      return decimal(max_decimal_metadata_.precision(), max_decimal_metadata_.scale());\n+    } else if (float_count_) {\n       return float64();\n     } else if (int_count_) {\n       // TODO(wesm): tighter type later\n@@ -157,8 +176,13 @@ class ScalarVisitor {\n   int64_t float_count_;\n   int64_t binary_count_;\n   int64_t unicode_count_;\n+  int64_t decimal_count_;\n+\n+  internal::DecimalMetadata max_decimal_metadata_;\n+\n   // Place to accumulate errors\n   // std::vector<Status> errors_;\n+  OwnedRefNoGIL decimal_type_;\n };\n \n static constexpr int MAX_NESTING_LEVELS = 32;\n@@ -379,17 +403,14 @@ class TypedConverter : public SeqConverter {\n   BuilderType* typed_builder_;\n };\n \n-// We use the CRTP trick here to devirtualize the AppendItem() and AppendNull()\n+// We use the CRTP trick here to devirtualize the AppendItem(), AppendNull(), and IsNull()\n // method calls.\n template <typename BuilderType, class Derived>\n class TypedConverterVisitor : public TypedConverter<BuilderType> {\n  public:\n   Status AppendSingle(PyObject* obj) override {\n-    if (obj == Py_None) {\n-      return static_cast<Derived*>(this)->AppendNull();\n-    } else {\n-      return static_cast<Derived*>(this)->AppendItem(obj);\n-    }\n+    auto self = static_cast<Derived*>(this);\n+    return self->IsNull(obj) ? self->AppendNull() : self->AppendItem(obj);\n   }\n \n   Status AppendMultiple(PyObject* obj, int64_t size) override {\n@@ -409,6 +430,7 @@ class TypedConverterVisitor : public TypedConverter<BuilderType> {\n \n   // Append a missing item (default implementation)\n   Status AppendNull() { return this->typed_builder_->AppendNull(); }\n+  bool IsNull(PyObject* obj) const { return obj == Py_None; }\n };\n \n class NullConverter : public TypedConverterVisitor<NullBuilder, NullConverter> {\n@@ -830,12 +852,16 @@ class DecimalConverter\n  public:\n   // Append a non-missing item\n   Status AppendItem(PyObject* obj) {\n-    /// TODO(phillipc): Check for nan?\n     Decimal128 value;\n     const auto& type = static_cast<const DecimalType&>(*typed_builder_->type());\n     RETURN_NOT_OK(internal::DecimalFromPythonDecimal(obj, type, &value));\n     return typed_builder_->Append(value);\n   }\n+\n+  bool IsNull(PyObject* obj) const {\n+    return obj == Py_None || obj == numpy_nan || internal::PyFloat_isnan(obj) ||\n+           (internal::PyDecimal_Check(obj) && internal::PyDecimal_ISNAN(obj));\n+  }\n };\n \n // Dynamic constructor for sequence converters\ndiff --git a/cpp/src/arrow/python/helpers.cc b/cpp/src/arrow/python/helpers.cc\nindex df1db9991..1c83205e8 100644\n--- a/cpp/src/arrow/python/helpers.cc\n+++ b/cpp/src/arrow/python/helpers.cc\n@@ -61,6 +61,7 @@ namespace internal {\n Status ImportModule(const std::string& module_name, OwnedRef* ref) {\n   PyObject* module = PyImport_ImportModule(module_name.c_str());\n   RETURN_IF_PYERROR();\n+  DCHECK_NE(module, nullptr) << \"unable to import the \" << module_name << \" module\";\n   ref->reset(module);\n   return Status::OK();\n }\n@@ -71,6 +72,7 @@ Status ImportFromModule(const OwnedRef& module, const std::string& name, OwnedRe\n \n   PyObject* attr = PyObject_GetAttrString(module.obj(), name.c_str());\n   RETURN_IF_PYERROR();\n+  DCHECK_NE(attr, nullptr) << \"unable to import the \" << name << \" object\";\n   ref->reset(attr);\n   return Status::OK();\n }\n@@ -93,8 +95,13 @@ Status PythonDecimalToString(PyObject* python_decimal, std::string* out) {\n   return Status::OK();\n }\n \n-Status InferDecimalPrecisionAndScale(PyObject* python_decimal, int32_t* precision,\n-                                     int32_t* scale) {\n+// \\brief Infer the precision and scale of a Python decimal.Decimal instance\n+// \\param python_decimal[in] An instance of decimal.Decimal\n+// \\param precision[out] The value of the inferred precision\n+// \\param scale[out] The value of the inferred scale\n+// \\return The status of the operation\n+static Status InferDecimalPrecisionAndScale(PyObject* python_decimal, int32_t* precision,\n+                                            int32_t* scale) {\n   DCHECK_NE(python_decimal, NULLPTR);\n   DCHECK_NE(precision, NULLPTR);\n   DCHECK_NE(scale, NULLPTR);\n@@ -193,6 +200,53 @@ Status UInt64FromPythonInt(PyObject* obj, uint64_t* out) {\n   return Status::OK();\n }\n \n+bool PyFloat_isnan(PyObject* obj) {\n+  return PyFloat_Check(obj) && std::isnan(PyFloat_AS_DOUBLE(obj));\n+}\n+\n+bool PyDecimal_Check(PyObject* obj) {\n+  // TODO(phillipc): Is this expensive?\n+  OwnedRef Decimal;\n+  OwnedRef decimal;\n+  Status status = ImportModule(\"decimal\", &decimal);\n+  DCHECK(status.ok()) << \"Error during import of the decimal module\";\n+  status = ImportFromModule(decimal, \"Decimal\", &Decimal);\n+  DCHECK(status.ok())\n+      << \"Error during import of the Decimal object from the decimal module\";\n+  const int32_t result = PyObject_IsInstance(obj, Decimal.obj());\n+  DCHECK_NE(result, -1) << \" error during PyObject_IsInstance check\";\n+  return result == 1;\n+}\n+\n+bool PyDecimal_ISNAN(PyObject* obj) {\n+  DCHECK(PyDecimal_Check(obj)) << \"obj is not an instance of decimal.Decimal\";\n+  OwnedRef is_nan(PyObject_CallMethod(obj, \"is_nan\", \"\"));\n+  return PyObject_IsTrue(is_nan.obj()) == 1;\n+}\n+\n+DecimalMetadata::DecimalMetadata()\n+    : precision_(std::numeric_limits<int32_t>::min()),\n+      scale_(std::numeric_limits<int32_t>::min()) {}\n+\n+DecimalMetadata::DecimalMetadata(int32_t precision, int32_t scale)\n+    : precision_(precision), scale_(scale) {}\n+\n+Status DecimalMetadata::Update(int32_t suggested_precision, int32_t suggested_scale) {\n+  precision_ = std::max(precision_, suggested_precision);\n+  scale_ = std::max(scale_, suggested_scale);\n+  return Status::OK();\n+}\n+\n+Status DecimalMetadata::Update(PyObject* object) {\n+  DCHECK(PyDecimal_Check(object)) << \"Object is not a Python Decimal\";\n+  DCHECK(!PyDecimal_ISNAN(object))\n+      << \"Decimal object cannot be NAN when inferring precision and scale\";\n+  int32_t precision;\n+  int32_t scale;\n+  RETURN_NOT_OK(InferDecimalPrecisionAndScale(object, &precision, &scale));\n+  return Update(precision, scale);\n+}\n+\n }  // namespace internal\n }  // namespace py\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/python/helpers.h b/cpp/src/arrow/python/helpers.h\nindex c0171aa2f..d39c62824 100644\n--- a/cpp/src/arrow/python/helpers.h\n+++ b/cpp/src/arrow/python/helpers.h\n@@ -36,29 +36,89 @@ namespace py {\n \n class OwnedRef;\n \n-ARROW_EXPORT\n-std::shared_ptr<DataType> GetPrimitiveType(Type::type type);\n+// \\brief Get an arrow DataType instance from Arrow's Type::type enum\n+// \\param[in] type One of the values of Arrow's Type::type enum\n+// \\return A shared pointer to DataType\n+ARROW_EXPORT std::shared_ptr<DataType> GetPrimitiveType(Type::type type);\n \n namespace internal {\n \n+// \\brief Import a Python module\n+// \\param[in] module_name The name of the module\n+// \\param[out] ref The OwnedRef containing the module PyObject*\n Status ImportModule(const std::string& module_name, OwnedRef* ref);\n-Status ImportFromModule(const OwnedRef& module, const std::string& module_name,\n-                        OwnedRef* ref);\n \n+// \\brief Import an object from a Python module\n+// \\param[in] module A Python module\n+// \\param[in] name The name of the object to import\n+// \\param[out] ref The OwnedRef containing the \\c name attribute of the Python module \\c\n+// module\n+Status ImportFromModule(const OwnedRef& module, const std::string& name, OwnedRef* ref);\n+\n+// \\brief Convert a Python Decimal object to a C++ string\n+// \\param[in] python_decimal A Python decimal.Decimal instance\n+// \\param[out] The string representation of the Python Decimal instance\n+// \\return The status of the operation\n Status PythonDecimalToString(PyObject* python_decimal, std::string* out);\n \n-Status InferDecimalPrecisionAndScale(PyObject* python_decimal,\n-                                     int32_t* precision = NULLPTR,\n-                                     int32_t* scale = NULLPTR);\n-\n+// \\brief Convert a C++ std::string to a Python Decimal instance\n+// \\param[in] decimal_constructor The decimal type object\n+// \\param[in] decimal_string A decimal string\n+// \\return An instance of decimal.Decimal\n PyObject* DecimalFromString(PyObject* decimal_constructor,\n                             const std::string& decimal_string);\n+\n+// \\brief Convert a Python decimal to an Arrow Decimal128 object\n+// \\param[in] python_decimal A Python decimal.Decimal instance\n+// \\param[in] arrow_type An instance of arrow::DecimalType\n+// \\param[out] out A pointer to a Decimal128\n+// \\return The status of the operation\n Status DecimalFromPythonDecimal(PyObject* python_decimal, const DecimalType& arrow_type,\n                                 Decimal128* out);\n+\n+// \\brief Check whether obj is an integer, independent of Python versions.\n bool IsPyInteger(PyObject* obj);\n \n+// \\brief Check whether obj is nan\n+bool PyFloat_isnan(PyObject* obj);\n+\n+// \\brief Check whether obj is an instance of Decimal\n+bool PyDecimal_Check(PyObject* obj);\n+\n+// \\brief Check whether obj is nan. This function will abort the program if the argument\n+// is not a Decimal instance\n+bool PyDecimal_ISNAN(PyObject* obj);\n+\n+// \\brief Convert a Python integer into an unsigned 64-bit integer\n+// \\param[in] obj A Python integer\n+// \\param[out] out A pointer to a C uint64_t to hold the result of the conversion\n+// \\return The status of the operation\n Status UInt64FromPythonInt(PyObject* obj, uint64_t* out);\n \n+// \\brief Helper class to track and update the precision and scale of a decimal\n+class DecimalMetadata {\n+ public:\n+  DecimalMetadata();\n+  DecimalMetadata(int32_t precision, int32_t scale);\n+\n+  // \\brief Adjust the precision and scale of a decimal type given a new precision and a\n+  // new scale \\param[in] suggested_precision A candidate precision \\param[in]\n+  // suggested_scale A candidate scale \\return The status of the operation\n+  Status Update(int32_t suggested_precision, int32_t suggested_scale);\n+\n+  // \\brief A convenient interface for updating the precision and scale based on a Python\n+  // Decimal object \\param object A Python Decimal object \\return The status of the\n+  // operation\n+  Status Update(PyObject* object);\n+\n+  int32_t precision() const { return precision_; }\n+  int32_t scale() const { return scale_; }\n+\n+ private:\n+  int32_t precision_;\n+  int32_t scale_;\n+};\n+\n }  // namespace internal\n }  // namespace py\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/python/numpy-internal.h b/cpp/src/arrow/python/numpy-internal.h\nindex 6c9c871a1..8d4308065 100644\n--- a/cpp/src/arrow/python/numpy-internal.h\n+++ b/cpp/src/arrow/python/numpy-internal.h\n@@ -54,6 +54,9 @@ class Ndarray1DIndexer {\n \n   T* data() const { return data_; }\n \n+  T* begin() const { return data(); }\n+  T* end() const { return begin() + size() * stride_; }\n+\n   bool is_strided() const { return stride_ == 1; }\n \n   T& operator[](size_type index) { return data_[index * stride_]; }\ndiff --git a/cpp/src/arrow/python/numpy_to_arrow.cc b/cpp/src/arrow/python/numpy_to_arrow.cc\nindex 23418ad92..79a911ba4 100644\n--- a/cpp/src/arrow/python/numpy_to_arrow.cc\n+++ b/cpp/src/arrow/python/numpy_to_arrow.cc\n@@ -67,17 +67,9 @@ constexpr int64_t kBinaryMemoryLimit = std::numeric_limits<int32_t>::max();\n \n namespace {\n \n-inline bool PyFloat_isnan(PyObject* obj) {\n-  if (PyFloat_Check(obj)) {\n-    double val = PyFloat_AS_DOUBLE(obj);\n-    return val != val;\n-  } else {\n-    return false;\n-  }\n-}\n-\n inline bool PandasObjectIsNull(PyObject* obj) {\n-  return obj == Py_None || obj == numpy_nan || PyFloat_isnan(obj);\n+  return obj == Py_None || obj == numpy_nan || internal::PyFloat_isnan(obj) ||\n+         (internal::PyDecimal_Check(obj) && internal::PyDecimal_ISNAN(obj));\n }\n \n inline bool PyObject_is_string(PyObject* obj) {\n@@ -88,10 +80,8 @@ inline bool PyObject_is_string(PyObject* obj) {\n #endif\n }\n \n-inline bool PyObject_is_float(PyObject* obj) { return PyFloat_Check(obj); }\n-\n inline bool PyObject_is_integer(PyObject* obj) {\n-  return (!PyBool_Check(obj)) && PyArray_IsIntegerScalar(obj);\n+  return !PyBool_Check(obj) && PyArray_IsIntegerScalar(obj);\n }\n \n template <int TYPE>\n@@ -743,59 +733,38 @@ Status NumPyConverter::ConvertDates() {\n Status NumPyConverter::ConvertDecimals() {\n   PyAcquireGIL lock;\n \n-  // Import the decimal module and Decimal class\n-  OwnedRef decimal;\n-  OwnedRef Decimal;\n-  RETURN_NOT_OK(internal::ImportModule(\"decimal\", &decimal));\n-  RETURN_NOT_OK(internal::ImportFromModule(decimal, \"Decimal\", &Decimal));\n-\n+  internal::DecimalMetadata max_decimal_metadata;\n   Ndarray1DIndexer<PyObject*> objects(arr_);\n-  PyObject* object = objects[0];\n \n   if (type_ == NULLPTR) {\n-    int32_t precision;\n-    int32_t desired_scale;\n-\n-    int32_t tmp_precision;\n-    int32_t tmp_scale;\n-\n-    RETURN_NOT_OK(\n-        internal::InferDecimalPrecisionAndScale(objects[0], &precision, &desired_scale));\n-\n-    for (int64_t i = 1; i < length_; ++i) {\n-      RETURN_NOT_OK(internal::InferDecimalPrecisionAndScale(objects[i], &tmp_precision,\n-                                                            &tmp_scale));\n-      precision = std::max(precision, tmp_precision);\n-\n-      if (std::abs(desired_scale) < std::abs(tmp_scale)) {\n-        desired_scale = tmp_scale;\n-      }\n+    for (PyObject* object : objects) {\n+      RETURN_NOT_OK(max_decimal_metadata.Update(object));\n     }\n \n-    type_ = ::arrow::decimal(precision, desired_scale);\n+    type_ =\n+        ::arrow::decimal(max_decimal_metadata.precision(), max_decimal_metadata.scale());\n   }\n \n   Decimal128Builder builder(type_, pool_);\n   RETURN_NOT_OK(builder.Resize(length_));\n \n   const auto& decimal_type = static_cast<const DecimalType&>(*type_);\n-  PyObject* Decimal_type_object = Decimal.obj();\n-\n-  for (int64_t i = 0; i < length_; ++i) {\n-    object = objects[i];\n \n-    if (PyObject_IsInstance(object, Decimal_type_object)) {\n-      Decimal128 value;\n-      RETURN_NOT_OK(internal::DecimalFromPythonDecimal(object, decimal_type, &value));\n-      RETURN_NOT_OK(builder.Append(value));\n-    } else if (PandasObjectIsNull(object)) {\n-      RETURN_NOT_OK(builder.AppendNull());\n-    } else {\n+  for (PyObject* object : objects) {\n+    if (ARROW_PREDICT_FALSE(!internal::PyDecimal_Check(object))) {\n       std::stringstream ss;\n       ss << \"Error converting from Python objects to Decimal: \";\n       RETURN_NOT_OK(InvalidConversion(object, \"decimal.Decimal\", &ss));\n       return Status::Invalid(ss.str());\n     }\n+\n+    if (PandasObjectIsNull(object)) {\n+      RETURN_NOT_OK(builder.AppendNull());\n+    } else {\n+      Decimal128 value;\n+      RETURN_NOT_OK(internal::DecimalFromPythonDecimal(object, decimal_type, &value));\n+      RETURN_NOT_OK(builder.Append(value));\n+    }\n   }\n   return PushBuilderResult(&builder);\n }\n@@ -1045,18 +1014,13 @@ Status NumPyConverter::ConvertObjectsInfer() {\n   objects.Init(arr_);\n   PyDateTime_IMPORT;\n \n-  OwnedRef decimal;\n-  OwnedRef Decimal;\n-  RETURN_NOT_OK(internal::ImportModule(\"decimal\", &decimal));\n-  RETURN_NOT_OK(internal::ImportFromModule(decimal, \"Decimal\", &Decimal));\n-\n   for (int64_t i = 0; i < length_; ++i) {\n     PyObject* obj = objects[i];\n     if (PandasObjectIsNull(obj)) {\n       continue;\n     } else if (PyObject_is_string(obj)) {\n       return ConvertObjectStrings();\n-    } else if (PyObject_is_float(obj)) {\n+    } else if (PyFloat_Check(obj)) {\n       return ConvertObjectFloats();\n     } else if (PyBool_Check(obj)) {\n       return ConvertBooleans();\n@@ -1069,7 +1033,7 @@ Status NumPyConverter::ConvertObjectsInfer() {\n       return ConvertDateTimes();\n     } else if (PyTime_Check(obj)) {\n       return ConvertTimes();\n-    } else if (PyObject_IsInstance(const_cast<PyObject*>(obj), Decimal.obj())) {\n+    } else if (internal::PyDecimal_Check(obj)) {\n       return ConvertDecimals();\n     } else if (PyList_Check(obj)) {\n       std::shared_ptr<DataType> inferred_type;\ndiff --git a/cpp/src/arrow/python/python-test.cc b/cpp/src/arrow/python/python-test.cc\nindex b76caaece..f0bd015f0 100644\n--- a/cpp/src/arrow/python/python-test.cc\n+++ b/cpp/src/arrow/python/python-test.cc\n@@ -15,10 +15,10 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-#include \"gtest/gtest.h\"\n-\n #include <memory>\n \n+#include <gtest/gtest.h>\n+\n #include \"arrow/python/platform.h\"\n \n #include \"arrow/array.h\"\n@@ -33,15 +33,6 @@\n namespace arrow {\n namespace py {\n \n-TEST(PyBuffer, InvalidInputObject) {\n-  std::shared_ptr<Buffer> res;\n-  PyObject* input = Py_None;\n-  auto old_refcnt = Py_REFCNT(input);\n-  ASSERT_RAISES(PythonError, PyBuffer::FromPyObject(input, &res));\n-  PyErr_Clear();\n-  ASSERT_EQ(old_refcnt, Py_REFCNT(input));\n-}\n-\n TEST(OwnedRef, TestMoves) {\n   PyAcquireGIL lock;\n   std::vector<OwnedRef> vec;\n@@ -78,12 +69,13 @@ TEST(OwnedRefNoGIL, TestMoves) {\n \n class DecimalTest : public ::testing::Test {\n  public:\n-  DecimalTest() : lock_(), decimal_module_(), decimal_constructor_() {\n-    auto s = internal::ImportModule(\"decimal\", &decimal_module_);\n+  DecimalTest() : lock_(), decimal_constructor_() {\n+    OwnedRef decimal_module;\n+    auto s = internal::ImportModule(\"decimal\", &decimal_module);\n     DCHECK(s.ok()) << s.message();\n-    DCHECK_NE(decimal_module_.obj(), NULLPTR);\n+    DCHECK_NE(decimal_module.obj(), NULLPTR);\n \n-    s = internal::ImportFromModule(decimal_module_, \"Decimal\", &decimal_constructor_);\n+    s = internal::ImportFromModule(decimal_module, \"Decimal\", &decimal_constructor_);\n     DCHECK(s.ok()) << s.message();\n \n     DCHECK_NE(decimal_constructor_.obj(), NULLPTR);\n@@ -94,16 +86,26 @@ class DecimalTest : public ::testing::Test {\n     return ref;\n   }\n \n+  PyObject* decimal_constructor() const { return decimal_constructor_.obj(); }\n+\n  private:\n   PyAcquireGIL lock_;\n-  OwnedRef decimal_module_;\n   OwnedRef decimal_constructor_;\n };\n \n+TEST(PyBuffer, InvalidInputObject) {\n+  std::shared_ptr<Buffer> res;\n+  PyObject* input = Py_None;\n+  auto old_refcnt = Py_REFCNT(input);\n+  ASSERT_RAISES(PythonError, PyBuffer::FromPyObject(input, &res));\n+  PyErr_Clear();\n+  ASSERT_EQ(old_refcnt, Py_REFCNT(input));\n+}\n+\n TEST_F(DecimalTest, TestPythonDecimalToString) {\n   std::string decimal_string(\"-39402950693754869342983\");\n \n-  OwnedRef python_object = this->CreatePythonDecimal(decimal_string);\n+  OwnedRef python_object(this->CreatePythonDecimal(decimal_string));\n   ASSERT_NE(python_object.obj(), nullptr);\n \n   std::string string_result;\n@@ -114,35 +116,29 @@ TEST_F(DecimalTest, TestInferPrecisionAndScale) {\n   std::string decimal_string(\"-394029506937548693.42983\");\n   OwnedRef python_decimal(this->CreatePythonDecimal(decimal_string));\n \n-  int32_t precision;\n-  int32_t scale;\n-\n-  ASSERT_OK(\n-      internal::InferDecimalPrecisionAndScale(python_decimal.obj(), &precision, &scale));\n+  internal::DecimalMetadata metadata;\n+  ASSERT_OK(metadata.Update(python_decimal.obj()));\n \n   const auto expected_precision =\n       static_cast<int32_t>(decimal_string.size() - 2);  // 1 for -, 1 for .\n   const int32_t expected_scale = 5;\n \n-  ASSERT_EQ(expected_precision, precision);\n-  ASSERT_EQ(expected_scale, scale);\n+  ASSERT_EQ(expected_precision, metadata.precision());\n+  ASSERT_EQ(expected_scale, metadata.scale());\n }\n \n TEST_F(DecimalTest, TestInferPrecisionAndNegativeScale) {\n   std::string decimal_string(\"-3.94042983E+10\");\n   OwnedRef python_decimal(this->CreatePythonDecimal(decimal_string));\n \n-  int32_t precision;\n-  int32_t scale;\n-\n-  ASSERT_OK(\n-      internal::InferDecimalPrecisionAndScale(python_decimal.obj(), &precision, &scale));\n+  internal::DecimalMetadata metadata;\n+  ASSERT_OK(metadata.Update(python_decimal.obj()));\n \n   const auto expected_precision = 9;\n   const int32_t expected_scale = -2;\n \n-  ASSERT_EQ(expected_precision, precision);\n-  ASSERT_EQ(expected_scale, scale);\n+  ASSERT_EQ(expected_precision, metadata.precision());\n+  ASSERT_EQ(expected_scale, metadata.scale());\n }\n \n TEST(PandasConversionTest, TestObjectBlockWriteFails) {\n@@ -226,14 +222,12 @@ TEST_F(DecimalTest, FromPythonDecimalRescaleTruncateable) {\n \n TEST_F(DecimalTest, TestOverflowFails) {\n   Decimal128 value;\n-  int32_t precision;\n-  int32_t scale;\n   OwnedRef python_decimal(\n       this->CreatePythonDecimal(\"9999999999999999999999999999999999999.9\"));\n-  ASSERT_OK(\n-      internal::InferDecimalPrecisionAndScale(python_decimal.obj(), &precision, &scale));\n-  ASSERT_EQ(38, precision);\n-  ASSERT_EQ(1, scale);\n+  internal::DecimalMetadata metadata;\n+  ASSERT_OK(metadata.Update(python_decimal.obj()));\n+  ASSERT_EQ(38, metadata.precision());\n+  ASSERT_EQ(1, metadata.scale());\n \n   auto type = ::arrow::decimal(38, 38);\n   const auto& decimal_type = static_cast<const DecimalType&>(*type);\n@@ -241,5 +235,63 @@ TEST_F(DecimalTest, TestOverflowFails) {\n                                                             decimal_type, &value));\n }\n \n+TEST_F(DecimalTest, TestNoneAndNaN) {\n+  OwnedRef list_ref(PyList_New(4));\n+  PyObject* list = list_ref.obj();\n+\n+  ASSERT_NE(list, nullptr);\n+\n+  PyObject* constructor = this->decimal_constructor();\n+  PyObject* decimal_value = internal::DecimalFromString(constructor, \"1.234\");\n+  ASSERT_NE(decimal_value, nullptr);\n+\n+  Py_INCREF(Py_None);\n+  PyObject* missing_value1 = Py_None;\n+  ASSERT_NE(missing_value1, nullptr);\n+\n+  PyObject* missing_value2 = PyFloat_FromDouble(NPY_NAN);\n+  ASSERT_NE(missing_value2, nullptr);\n+\n+  PyObject* missing_value3 = internal::DecimalFromString(constructor, \"nan\");\n+  ASSERT_NE(missing_value3, nullptr);\n+\n+  // This steals a reference to each object, so we don't need to decref them later,\n+  // just the list\n+  ASSERT_EQ(PyList_SetItem(list, 0, decimal_value), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 1, missing_value1), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 2, missing_value2), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 3, missing_value3), 0);\n+\n+  MemoryPool* pool = default_memory_pool();\n+  std::shared_ptr<Array> arr;\n+  ASSERT_OK(ConvertPySequence(list, pool, &arr));\n+  ASSERT_TRUE(arr->IsValid(0));\n+  ASSERT_TRUE(arr->IsNull(1));\n+  ASSERT_TRUE(arr->IsNull(2));\n+  ASSERT_TRUE(arr->IsNull(3));\n+}\n+\n+TEST_F(DecimalTest, TestMixedPrecisionAndScale) {\n+  PyObject* value2 = internal::DecimalFromString(this->decimal_constructor(), \"0.001\");\n+  PyObject* value1 = internal::DecimalFromString(this->decimal_constructor(), \"1.01E5\");\n+\n+  OwnedRef list_ref(PyList_New(2));\n+  PyObject* list = list_ref.obj();\n+\n+  ASSERT_NE(list, nullptr);\n+  ASSERT_EQ(PyList_SetItem(list, 0, value1), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 1, value2), 0);\n+\n+  MemoryPool* pool = default_memory_pool();\n+  std::shared_ptr<Array> arr;\n+  ASSERT_OK(ConvertPySequence(list, pool, &arr));\n+  const auto& type = static_cast<const DecimalType&>(*arr->type());\n+\n+  int32_t expected_precision = 9;\n+  int32_t expected_scale = 3;\n+  ASSERT_EQ(expected_precision, type.precision());\n+  ASSERT_EQ(expected_scale, type.scale());\n+}\n+\n }  // namespace py\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/decimal-test.cc b/cpp/src/arrow/util/decimal-test.cc\nindex e4406747d..f3f348cf6 100644\n--- a/cpp/src/arrow/util/decimal-test.cc\n+++ b/cpp/src/arrow/util/decimal-test.cc\n@@ -14,7 +14,6 @@\n // KIND, either express or implied.  See the License for the\n // specific language governing permissions and limitations\n // under the License.\n-//\n \n #include <cstdint>\n #include <string>\ndiff --git a/python/pyarrow/tests/test_convert_builtin.py b/python/pyarrow/tests/test_convert_builtin.py\nindex 8423ff00b..516431a74 100644\n--- a/python/pyarrow/tests/test_convert_builtin.py\n+++ b/python/pyarrow/tests/test_convert_builtin.py\n@@ -639,3 +639,10 @@ def test_structarray_from_arrays_coerce():\n         pa.StructArray.from_arrays(arrays)\n \n     assert result.equals(expected)\n+\n+\n+def test_decimal_array_with_none_and_nan():\n+    values = [decimal.Decimal('1.234'), None, np.nan, decimal.Decimal('nan')]\n+    array = pa.array(values)\n+    assert array.type == pa.decimal128(4, 3)\n+    assert array.to_pylist() == values[:2] + [None, None]\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-23T17:50:27.977+0000",
                    "updated": "2018-02-23T17:50:27.977+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16375865",
                    "id": "16375865",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#issuecomment-368272682\n \n \n   Since we'll probably want to use libre2 for analytics, we should see at some point if we can replace the Boost regexen with libre2\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-25T00:45:07.284+0000",
                    "updated": "2018-02-25T00:45:07.284+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16376970",
                    "id": "16376970",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on issue #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#issuecomment-368523765\n \n \n   @kou Do you have any idea why in this build: https://travis-ci.org/apache/arrow/jobs/345443821 OS X isn't finding the correct symbol? Is there some installation step for `brew` that I need to add?\r\n   \r\n   Here's the error message:\r\n   \r\n   ```\r\n   dyld: Symbol not found: __ZNK5boost16re_detail_10650131cpp_regex_traits_implementationIcE17transform_primaryEPKcS4_\r\n     Referenced from: /Users/travis/build/apache/arrow/cpp-install/lib/libarrow.0.dylib\r\n     Expected in: /usr/local/opt/boost/lib/libboost_regex-mt.dylib\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T14:39:21.615+0000",
                    "updated": "2018-02-26T14:39:21.615+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16376972",
                    "id": "16376972",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on issue #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#issuecomment-368524710\n \n \n   @wesm I'll open a JIRA for it.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T14:42:12.344+0000",
                    "updated": "2018-02-26T14:42:12.344+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16376973",
                    "id": "16376973",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on issue #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#issuecomment-368525079\n \n \n   Ah, looks like it was added in [ARROW-29](https://github.com/apache/arrow/pull/674).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T14:43:18.996+0000",
                    "updated": "2018-02-26T14:43:18.996+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377621",
                    "id": "16377621",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170745372\n \n \n\n ##########\n File path: cpp/src/arrow/util/decimal.cc\n ##########\n @@ -212,160 +253,124 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n   }\n }\n \n-Status Decimal128::FromString(const std::string& s, Decimal128* out, int* precision,\n-                              int* scale) {\n-  // Implements this regex: \"(\\\\+?|-?)((0*)(\\\\d*))(\\\\.(\\\\d+))?((E|e)(\\\\+|-)?\\\\d+)?\";\n-  if (s.empty()) {\n-    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n-  }\n+static const boost::regex DECIMAL_REGEX(\n+    // sign of the number\n+    \"(?<SIGN>[-+]?)\"\n \n-  std::string::const_iterator charp = s.cbegin();\n-  std::string::const_iterator end = s.cend();\n+    // digits around the decimal point\n+    \"(((?<LEFT_DIGITS>\\\\d+)\\\\.(?<FIRST_RIGHT_DIGITS>\\\\d*)|\\\\.(?<SECOND_RIGHT_DIGITS>\\\\d+)\"\n+    \")\"\n \n-  char first_char = *charp;\n-  bool is_negative = false;\n-  if (first_char == '+' || first_char == '-') {\n-    is_negative = first_char == '-';\n-    ++charp;\n-  }\n+    // optional exponent\n+    \"([eE](?<FIRST_EXP_VALUE>[-+]?\\\\d+))?\"\n \n-  if (charp == end) {\n-    std::stringstream ss;\n-    ss << \"Single character: '\" << first_char << \"' is not a valid decimal value\";\n-    return Status::Invalid(ss.str());\n-  }\n+    // otherwise\n+    \"|\"\n \n-  std::string::const_iterator numeric_string_start = charp;\n+    // we're just an integer\n+    \"(?<INTEGER>\\\\d+)\"\n \n-  DCHECK_LT(charp, end);\n+    // or an integer with an exponent\n+    \"(?:[eE](?<SECOND_EXP_VALUE>[-+]?\\\\d+))?)\");\n \n-  // skip leading zeros\n-  charp = std::find_if_not(charp, end, [](char value) { return value == '0'; });\n+static inline bool is_zero_character(char c) { return c == '0'; }\n \n-  // all zeros and no decimal point\n-  if (charp == end) {\n-    if (out != NULLPTR) {\n-      *out = 0;\n-    }\n+Status Decimal128::FromString(const std::string& s, Decimal128* out, int32_t* precision,\n+                              int32_t* scale) {\n+  if (s.empty()) {\n+    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n+  }\n \n-    // Not sure what other libraries assign precision to for this case (this case of\n-    // a string consisting only of one or more zeros)\n+  // case of all zeros\n+  if (std::all_of(s.cbegin(), s.cend(), is_zero_character)) {\n     if (precision != NULLPTR) {\n-      *precision = static_cast<int>(charp - numeric_string_start);\n+      *precision = 0;\n \n Review comment:\n   I'm not sure if this is the correct behavior here. I need to look into what other systems do with a string of all zeros for precision and scale.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T21:42:33.484+0000",
                    "updated": "2018-02-26T21:42:33.484+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377630",
                    "id": "16377630",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170437647\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -76,7 +76,18 @@ class ScalarVisitor {\n         timestamp_count_(0),\n         float_count_(0),\n         binary_count_(0),\n-        unicode_count_(0) {}\n+        unicode_count_(0),\n+        decimal_count_(0),\n+        max_decimal_metadata_(std::numeric_limits<int32_t>::min(),\n+                              std::numeric_limits<int32_t>::min()),\n+        decimal_type_() {\n+    OwnedRefNoGIL decimal_module;\n+    Status status = ::arrow::py::internal::ImportModule(\"decimal\", &decimal_module);\n+    DCHECK(status.ok()) << \"Unable to import decimal module\";\n+    status = ::arrow::py::internal::ImportFromModule(decimal_module, \"Decimal\",\n+                                                     &decimal_type_);\n+    DCHECK(status.ok()) << \"Unable to import decimal.Decimal\";\n \n Review comment:\n   I wonder if we should make some global state that is initialized when the library is loaded\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T21:49:47.669+0000",
                    "updated": "2018-02-26T21:49:47.669+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377631",
                    "id": "16377631",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170737245\n \n \n\n ##########\n File path: ci/travis_build_parquet_cpp.sh\n ##########\n @@ -38,7 +38,7 @@ cmake \\\n     -GNinja \\\n     -DCMAKE_BUILD_TYPE=debug \\\n     -DCMAKE_INSTALL_PREFIX=$ARROW_PYTHON_PARQUET_HOME \\\n-    -DPARQUET_BOOST_USE_SHARED=off \\\n+    -DPARQUET_BOOST_USE_SHARED=on \\\n \n Review comment:\n   what's the rationale for this, the symbol linking issue?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T21:49:47.997+0000",
                    "updated": "2018-02-26T21:49:47.997+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377632",
                    "id": "16377632",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170738171\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -76,7 +76,18 @@ class ScalarVisitor {\n         timestamp_count_(0),\n         float_count_(0),\n         binary_count_(0),\n-        unicode_count_(0) {}\n+        unicode_count_(0),\n+        decimal_count_(0),\n+        max_decimal_metadata_(std::numeric_limits<int32_t>::min(),\n+                              std::numeric_limits<int32_t>::min()),\n+        decimal_type_() {\n+    OwnedRefNoGIL decimal_module;\n+    Status status = ::arrow::py::internal::ImportModule(\"decimal\", &decimal_module);\n+    DCHECK(status.ok()) << \"Unable to import decimal module\";\n+    status = ::arrow::py::internal::ImportFromModule(decimal_module, \"Decimal\",\n+                                                     &decimal_type_);\n+    DCHECK(status.ok()) << \"Unable to import decimal.Decimal\";\n \n Review comment:\n   aren't these dchecks already done?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T21:49:48.131+0000",
                    "updated": "2018-02-26T21:49:48.131+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377633",
                    "id": "16377633",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170737868\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -830,12 +852,16 @@ class DecimalConverter\n  public:\n   // Append a non-missing item\n   Status AppendItem(PyObject* obj) {\n-    /// TODO(phillipc): Check for nan?\n     Decimal128 value;\n     const auto& type = static_cast<const DecimalType&>(*typed_builder_->type());\n     RETURN_NOT_OK(internal::DecimalFromPythonDecimal(obj, type, &value));\n     return typed_builder_->Append(value);\n   }\n+\n+  bool IsNull(PyObject* obj) const {\n+    return obj == Py_None || obj == numpy_nan || internal::PyFloat_isnan(obj) ||\n+           (internal::PyDecimal_Check(obj) && internal::PyDecimal_ISNAN(obj));\n \n Review comment:\n   Ugh, Python, what did we do to deserve this? =) \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T21:49:48.366+0000",
                    "updated": "2018-02-26T21:49:48.366+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377634",
                    "id": "16377634",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170739037\n \n \n\n ##########\n File path: cpp/src/arrow/python/helpers.cc\n ##########\n @@ -193,6 +218,63 @@ Status UInt64FromPythonInt(PyObject* obj, uint64_t* out) {\n   return Status::OK();\n }\n \n+bool PyFloat_isnan(PyObject* obj) {\n+  return PyFloat_Check(obj) && std::isnan(PyFloat_AS_DOUBLE(obj));\n+}\n+\n+bool PyDecimal_Check(PyObject* obj) {\n+  // TODO(phillipc): Is this expensive?\n+  OwnedRef Decimal;\n+  OwnedRef decimal;\n+  Status status = ImportModule(\"decimal\", &decimal);\n+  DCHECK(status.ok()) << \"Error during import of the decimal module\";\n+  status = ImportFromModule(decimal, \"Decimal\", &Decimal);\n+  DCHECK(status.ok())\n+      << \"Error during import of the Decimal object from the decimal module\";\n+  const int32_t result = PyObject_IsInstance(obj, Decimal.obj());\n+  DCHECK_NE(result, -1) << \" error during PyObject_IsInstance check\";\n+  return result == 1;\n+}\n+\n+bool PyDecimal_ISNAN(PyObject* obj) {\n+  DCHECK(PyDecimal_Check(obj)) << \"obj is not an instance of decimal.Decimal\";\n+  OwnedRef is_nan(PyObject_CallMethod(obj, \"is_nan\", \"\"));\n+  return PyObject_IsTrue(is_nan.obj()) == 1;\n+}\n+\n+DecimalMetadata::DecimalMetadata()\n+    : DecimalMetadata(std::numeric_limits<int32_t>::min(),\n+                      std::numeric_limits<int32_t>::min()) {}\n+\n+DecimalMetadata::DecimalMetadata(int32_t precision, int32_t scale)\n+    : precision_(precision), scale_(scale) {}\n+\n+Status DecimalMetadata::Update(int32_t suggested_precision, int32_t suggested_scale) {\n+  const int32_t current_precision = precision_;\n+  precision_ = std::max(current_precision, suggested_precision);\n+\n+  const int32_t current_scale = scale_;\n+  scale_ = std::max(current_scale, suggested_scale);\n+\n+  // if our suggested scale is zero and we don't yet have enough precision then we need to\n+  // add whatever the current scale is to the precision\n+  if (suggested_scale == 0 && suggested_precision > current_precision) {\n+    precision_ += scale_;\n+  }\n+\n+  return Status::OK();\n+}\n+\n+Status DecimalMetadata::Update(PyObject* object) {\n+  DCHECK(PyDecimal_Check(object)) << \"Object is not a Python Decimal\";\n+  DCHECK(!PyDecimal_ISNAN(object))\n+      << \"Decimal object cannot be NAN when inferring precision and scale\";\n \n Review comment:\n   This should never happen by design, right? \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T21:49:48.447+0000",
                    "updated": "2018-02-26T21:49:48.447+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377635",
                    "id": "16377635",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170738424\n \n \n\n ##########\n File path: cpp/src/arrow/python/helpers.cc\n ##########\n @@ -193,6 +218,63 @@ Status UInt64FromPythonInt(PyObject* obj, uint64_t* out) {\n   return Status::OK();\n }\n \n+bool PyFloat_isnan(PyObject* obj) {\n+  return PyFloat_Check(obj) && std::isnan(PyFloat_AS_DOUBLE(obj));\n+}\n+\n+bool PyDecimal_Check(PyObject* obj) {\n+  // TODO(phillipc): Is this expensive?\n+  OwnedRef Decimal;\n+  OwnedRef decimal;\n+  Status status = ImportModule(\"decimal\", &decimal);\n+  DCHECK(status.ok()) << \"Error during import of the decimal module\";\n+  status = ImportFromModule(decimal, \"Decimal\", &Decimal);\n+  DCHECK(status.ok())\n+      << \"Error during import of the Decimal object from the decimal module\";\n \n Review comment:\n   these dchecks are performed twice -- should this be just DCHECK_OK on each of these?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T21:49:48.477+0000",
                    "updated": "2018-02-26T21:49:48.477+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377636",
                    "id": "16377636",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170739522\n \n \n\n ##########\n File path: cpp/src/arrow/python/helpers.h\n ##########\n @@ -36,29 +36,89 @@ namespace py {\n \n class OwnedRef;\n \n-ARROW_EXPORT\n-std::shared_ptr<DataType> GetPrimitiveType(Type::type type);\n+// \\brief Get an arrow DataType instance from Arrow's Type::type enum\n+// \\param[in] type One of the values of Arrow's Type::type enum\n+// \\return A shared pointer to DataType\n+ARROW_EXPORT std::shared_ptr<DataType> GetPrimitiveType(Type::type type);\n \n namespace internal {\n \n+// \\brief Import a Python module\n+// \\param[in] module_name The name of the module\n+// \\param[out] ref The OwnedRef containing the module PyObject*\n Status ImportModule(const std::string& module_name, OwnedRef* ref);\n-Status ImportFromModule(const OwnedRef& module, const std::string& module_name,\n-                        OwnedRef* ref);\n \n+// \\brief Import an object from a Python module\n+// \\param[in] module A Python module\n+// \\param[in] name The name of the object to import\n+// \\param[out] ref The OwnedRef containing the \\c name attribute of the Python module \\c\n+// module\n+Status ImportFromModule(const OwnedRef& module, const std::string& name, OwnedRef* ref);\n+\n+// \\brief Convert a Python Decimal object to a C++ string\n+// \\param[in] python_decimal A Python decimal.Decimal instance\n+// \\param[out] The string representation of the Python Decimal instance\n+// \\return The status of the operation\n Status PythonDecimalToString(PyObject* python_decimal, std::string* out);\n \n-Status InferDecimalPrecisionAndScale(PyObject* python_decimal,\n-                                     int32_t* precision = NULLPTR,\n-                                     int32_t* scale = NULLPTR);\n-\n+// \\brief Convert a C++ std::string to a Python Decimal instance\n+// \\param[in] decimal_constructor The decimal type object\n+// \\param[in] decimal_string A decimal string\n+// \\return An instance of decimal.Decimal\n PyObject* DecimalFromString(PyObject* decimal_constructor,\n                             const std::string& decimal_string);\n+\n+// \\brief Convert a Python decimal to an Arrow Decimal128 object\n+// \\param[in] python_decimal A Python decimal.Decimal instance\n+// \\param[in] arrow_type An instance of arrow::DecimalType\n+// \\param[out] out A pointer to a Decimal128\n+// \\return The status of the operation\n Status DecimalFromPythonDecimal(PyObject* python_decimal, const DecimalType& arrow_type,\n                                 Decimal128* out);\n+\n+// \\brief Check whether obj is an integer, independent of Python versions.\n bool IsPyInteger(PyObject* obj);\n \n+// \\brief Check whether obj is nan\n+bool PyFloat_isnan(PyObject* obj);\n \n Review comment:\n   This will no longer be inlined, but not sure how much we care (the impl could be put in a private header)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T21:49:48.488+0000",
                    "updated": "2018-02-26T21:49:48.488+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377637",
                    "id": "16377637",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170743061\n \n \n\n ##########\n File path: cpp/src/arrow/python/python-test.cc\n ##########\n @@ -226,20 +250,114 @@ TEST_F(DecimalTest, FromPythonDecimalRescaleTruncateable) {\n \n TEST_F(DecimalTest, TestOverflowFails) {\n   Decimal128 value;\n-  int32_t precision;\n-  int32_t scale;\n   OwnedRef python_decimal(\n       this->CreatePythonDecimal(\"9999999999999999999999999999999999999.9\"));\n-  ASSERT_OK(\n-      internal::InferDecimalPrecisionAndScale(python_decimal.obj(), &precision, &scale));\n-  ASSERT_EQ(38, precision);\n-  ASSERT_EQ(1, scale);\n+  internal::DecimalMetadata metadata;\n+  ASSERT_OK(metadata.Update(python_decimal.obj()));\n+  ASSERT_EQ(38, metadata.precision());\n+  ASSERT_EQ(1, metadata.scale());\n \n   auto type = ::arrow::decimal(38, 38);\n   const auto& decimal_type = static_cast<const DecimalType&>(*type);\n   ASSERT_RAISES(Invalid, internal::DecimalFromPythonDecimal(python_decimal.obj(),\n                                                             decimal_type, &value));\n }\n \n+TEST_F(DecimalTest, TestNoneAndNaN) {\n+  OwnedRef list_ref(PyList_New(4));\n+  PyObject* list = list_ref.obj();\n+\n+  ASSERT_NE(list, nullptr);\n+\n+  PyObject* constructor = this->decimal_constructor();\n+  PyObject* decimal_value = internal::DecimalFromString(constructor, \"1.234\");\n+  ASSERT_NE(decimal_value, nullptr);\n+\n+  Py_INCREF(Py_None);\n+  PyObject* missing_value1 = Py_None;\n+  ASSERT_NE(missing_value1, nullptr);\n+\n+  PyObject* missing_value2 = PyFloat_FromDouble(NPY_NAN);\n+  ASSERT_NE(missing_value2, nullptr);\n+\n+  PyObject* missing_value3 = internal::DecimalFromString(constructor, \"nan\");\n+  ASSERT_NE(missing_value3, nullptr);\n+\n+  // This steals a reference to each object, so we don't need to decref them later,\n+  // just the list\n+  ASSERT_EQ(PyList_SetItem(list, 0, decimal_value), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 1, missing_value1), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 2, missing_value2), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 3, missing_value3), 0);\n+\n+  MemoryPool* pool = default_memory_pool();\n+  std::shared_ptr<Array> arr;\n+  ASSERT_OK(ConvertPySequence(list, pool, &arr));\n+  ASSERT_TRUE(arr->IsValid(0));\n+  ASSERT_TRUE(arr->IsNull(1));\n+  ASSERT_TRUE(arr->IsNull(2));\n+  ASSERT_TRUE(arr->IsNull(3));\n+}\n+\n+TEST_F(DecimalTest, TestMixedPrecisionAndScale) {\n+  std::vector<std::string> strings{{\"0.001\", \"1.01E5\", \"1.01E5\"}};\n \n Review comment:\n   I generally prefer the `=` style of initialization but this is ok\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T21:49:48.489+0000",
                    "updated": "2018-02-26T21:49:48.489+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377638",
                    "id": "16377638",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170740282\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -1045,18 +1014,13 @@ Status NumPyConverter::ConvertObjectsInfer() {\n   objects.Init(arr_);\n   PyDateTime_IMPORT;\n \n-  OwnedRef decimal;\n-  OwnedRef Decimal;\n-  RETURN_NOT_OK(internal::ImportModule(\"decimal\", &decimal));\n-  RETURN_NOT_OK(internal::ImportFromModule(decimal, \"Decimal\", &Decimal));\n-\n   for (int64_t i = 0; i < length_; ++i) {\n     PyObject* obj = objects[i];\n     if (PandasObjectIsNull(obj)) {\n       continue;\n     } else if (PyObject_is_string(obj)) {\n       return ConvertObjectStrings();\n-    } else if (PyObject_is_float(obj)) {\n+    } else if (PyFloat_Check(obj)) {\n \n Review comment:\n   IIRC this `PyObject_is_float` was deliberate so that we could detect other kinds of floats (numpy scalars, etc.). No big deal but worth noting\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T21:49:48.490+0000",
                    "updated": "2018-02-26T21:49:48.490+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377639",
                    "id": "16377639",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170741761\n \n \n\n ##########\n File path: cpp/src/arrow/python/python-test.cc\n ##########\n @@ -78,12 +78,13 @@ TEST(OwnedRefNoGIL, TestMoves) {\n \n class DecimalTest : public ::testing::Test {\n  public:\n-  DecimalTest() : lock_(), decimal_module_(), decimal_constructor_() {\n-    auto s = internal::ImportModule(\"decimal\", &decimal_module_);\n+  DecimalTest() : lock_(), decimal_constructor_() {\n+    OwnedRef decimal_module;\n+    auto s = internal::ImportModule(\"decimal\", &decimal_module);\n     DCHECK(s.ok()) << s.message();\n-    DCHECK_NE(decimal_module_.obj(), NULLPTR);\n+    DCHECK_NE(decimal_module.obj(), NULLPTR);\n \n Review comment:\n   is this check now redundant?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T21:49:48.635+0000",
                    "updated": "2018-02-26T21:49:48.635+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377640",
                    "id": "16377640",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170743249\n \n \n\n ##########\n File path: cpp/src/arrow/python/python-test.cc\n ##########\n @@ -226,20 +250,114 @@ TEST_F(DecimalTest, FromPythonDecimalRescaleTruncateable) {\n \n TEST_F(DecimalTest, TestOverflowFails) {\n   Decimal128 value;\n-  int32_t precision;\n-  int32_t scale;\n   OwnedRef python_decimal(\n       this->CreatePythonDecimal(\"9999999999999999999999999999999999999.9\"));\n-  ASSERT_OK(\n-      internal::InferDecimalPrecisionAndScale(python_decimal.obj(), &precision, &scale));\n-  ASSERT_EQ(38, precision);\n-  ASSERT_EQ(1, scale);\n+  internal::DecimalMetadata metadata;\n+  ASSERT_OK(metadata.Update(python_decimal.obj()));\n+  ASSERT_EQ(38, metadata.precision());\n+  ASSERT_EQ(1, metadata.scale());\n \n   auto type = ::arrow::decimal(38, 38);\n   const auto& decimal_type = static_cast<const DecimalType&>(*type);\n   ASSERT_RAISES(Invalid, internal::DecimalFromPythonDecimal(python_decimal.obj(),\n                                                             decimal_type, &value));\n }\n \n+TEST_F(DecimalTest, TestNoneAndNaN) {\n+  OwnedRef list_ref(PyList_New(4));\n+  PyObject* list = list_ref.obj();\n+\n+  ASSERT_NE(list, nullptr);\n+\n+  PyObject* constructor = this->decimal_constructor();\n+  PyObject* decimal_value = internal::DecimalFromString(constructor, \"1.234\");\n+  ASSERT_NE(decimal_value, nullptr);\n+\n+  Py_INCREF(Py_None);\n+  PyObject* missing_value1 = Py_None;\n+  ASSERT_NE(missing_value1, nullptr);\n+\n+  PyObject* missing_value2 = PyFloat_FromDouble(NPY_NAN);\n+  ASSERT_NE(missing_value2, nullptr);\n+\n+  PyObject* missing_value3 = internal::DecimalFromString(constructor, \"nan\");\n+  ASSERT_NE(missing_value3, nullptr);\n+\n+  // This steals a reference to each object, so we don't need to decref them later,\n+  // just the list\n+  ASSERT_EQ(PyList_SetItem(list, 0, decimal_value), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 1, missing_value1), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 2, missing_value2), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 3, missing_value3), 0);\n+\n+  MemoryPool* pool = default_memory_pool();\n+  std::shared_ptr<Array> arr;\n+  ASSERT_OK(ConvertPySequence(list, pool, &arr));\n+  ASSERT_TRUE(arr->IsValid(0));\n+  ASSERT_TRUE(arr->IsNull(1));\n+  ASSERT_TRUE(arr->IsNull(2));\n+  ASSERT_TRUE(arr->IsNull(3));\n+}\n+\n+TEST_F(DecimalTest, TestMixedPrecisionAndScale) {\n+  std::vector<std::string> strings{{\"0.001\", \"1.01E5\", \"1.01E5\"}};\n+\n+  OwnedRef list_ref(PyList_New(static_cast<Py_ssize_t>(strings.size())));\n+  PyObject* list = list_ref.obj();\n+\n+  ASSERT_NE(list, nullptr);\n+\n+  // PyList_SetItem steals a reference to the item so we don't decref it later\n+  for (size_t i = 0; i < strings.size(); ++i) {\n+    PyList_SetItem(\n \n Review comment:\n   not sure if some compilers will complain about the unused return value, but you could use `PyList_SET_ITEM` here if so\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T21:49:48.638+0000",
                    "updated": "2018-02-26T21:49:48.638+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377641",
                    "id": "16377641",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170741412\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -1069,7 +1033,7 @@ Status NumPyConverter::ConvertObjectsInfer() {\n       return ConvertDateTimes();\n     } else if (PyTime_Check(obj)) {\n       return ConvertTimes();\n-    } else if (PyObject_IsInstance(const_cast<PyObject*>(obj), Decimal.obj())) {\n+    } else if (internal::PyDecimal_Check(obj)) {\n \n Review comment:\n   Aside: I feel like this function should be an addendum to jakevdp's \"why is Python slow\" blog post\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T21:49:48.664+0000",
                    "updated": "2018-02-26T21:49:48.664+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377642",
                    "id": "16377642",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170747212\n \n \n\n ##########\n File path: python/pyarrow/tests/test_convert_builtin.py\n ##########\n @@ -639,3 +639,10 @@ def test_structarray_from_arrays_coerce():\n         pa.StructArray.from_arrays(arrays)\n \n     assert result.equals(expected)\n+\n+\n+def test_decimal_array_with_none_and_nan():\n+    values = [decimal.Decimal('1.234'), None, np.nan, decimal.Decimal('nan')]\n+    array = pa.array(values)\n+    assert array.type == pa.decimal128(4, 3)\n \n Review comment:\n   can you add a test here with an explicit decimal type sufficient to accommodate the data?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T21:49:48.665+0000",
                    "updated": "2018-02-26T21:49:48.665+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377643",
                    "id": "16377643",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170744577\n \n \n\n ##########\n File path: cpp/src/arrow/util/decimal.cc\n ##########\n @@ -23,12 +23,55 @@\n #include <limits>\n #include <sstream>\n \n+#include <boost/regex.hpp>\n+\n #include \"arrow/util/bit-util.h\"\n #include \"arrow/util/decimal.h\"\n #include \"arrow/util/logging.h\"\n \n namespace arrow {\n \n+static const Decimal128 ScaleMultipliers[] = {\n+    Decimal128(0LL),\n+    Decimal128(10LL),\n+    Decimal128(100LL),\n+    Decimal128(1000LL),\n+    Decimal128(10000LL),\n+    Decimal128(100000LL),\n+    Decimal128(1000000LL),\n+    Decimal128(10000000LL),\n+    Decimal128(100000000LL),\n+    Decimal128(1000000000LL),\n+    Decimal128(10000000000LL),\n+    Decimal128(100000000000LL),\n+    Decimal128(1000000000000LL),\n+    Decimal128(10000000000000LL),\n+    Decimal128(100000000000000LL),\n+    Decimal128(1000000000000000LL),\n+    Decimal128(10000000000000000LL),\n+    Decimal128(100000000000000000LL),\n+    Decimal128(1000000000000000000LL),\n+    Decimal128(0LL, 10000000000000000000ULL),\n+    Decimal128(5LL, 7766279631452241920ULL),\n+    Decimal128(54LL, 3875820019684212736ULL),\n+    Decimal128(542LL, 1864712049423024128ULL),\n+    Decimal128(5421LL, 200376420520689664ULL),\n+    Decimal128(54210LL, 2003764205206896640ULL),\n+    Decimal128(542101LL, 1590897978359414784ULL),\n+    Decimal128(5421010LL, 15908979783594147840ULL),\n+    Decimal128(54210108LL, 11515845246265065472ULL),\n+    Decimal128(542101086LL, 4477988020393345024ULL),\n+    Decimal128(5421010862LL, 7886392056514347008ULL),\n+    Decimal128(54210108624LL, 5076944270305263616ULL),\n+    Decimal128(542101086242LL, 13875954555633532928ULL),\n+    Decimal128(5421010862427LL, 9632337040368467968ULL),\n+    Decimal128(54210108624275LL, 4089650035136921600ULL),\n+    Decimal128(542101086242752LL, 4003012203950112768ULL),\n+    Decimal128(5421010862427522LL, 3136633892082024448ULL),\n+    Decimal128(54210108624275221LL, 12919594847110692864ULL),\n+    Decimal128(542101086242752217LL, 68739955140067328ULL),\n+    Decimal128(5421010862427522170LL, 687399551400673280ULL)};\n \n Review comment:\n   how were these generated, just for future reference?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T21:49:48.671+0000",
                    "updated": "2018-02-26T21:49:48.671+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377644",
                    "id": "16377644",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170742890\n \n \n\n ##########\n File path: cpp/src/arrow/python/python-test.cc\n ##########\n @@ -226,20 +250,114 @@ TEST_F(DecimalTest, FromPythonDecimalRescaleTruncateable) {\n \n TEST_F(DecimalTest, TestOverflowFails) {\n   Decimal128 value;\n-  int32_t precision;\n-  int32_t scale;\n   OwnedRef python_decimal(\n       this->CreatePythonDecimal(\"9999999999999999999999999999999999999.9\"));\n-  ASSERT_OK(\n-      internal::InferDecimalPrecisionAndScale(python_decimal.obj(), &precision, &scale));\n-  ASSERT_EQ(38, precision);\n-  ASSERT_EQ(1, scale);\n+  internal::DecimalMetadata metadata;\n+  ASSERT_OK(metadata.Update(python_decimal.obj()));\n+  ASSERT_EQ(38, metadata.precision());\n+  ASSERT_EQ(1, metadata.scale());\n \n   auto type = ::arrow::decimal(38, 38);\n   const auto& decimal_type = static_cast<const DecimalType&>(*type);\n   ASSERT_RAISES(Invalid, internal::DecimalFromPythonDecimal(python_decimal.obj(),\n                                                             decimal_type, &value));\n }\n \n+TEST_F(DecimalTest, TestNoneAndNaN) {\n+  OwnedRef list_ref(PyList_New(4));\n+  PyObject* list = list_ref.obj();\n+\n+  ASSERT_NE(list, nullptr);\n+\n+  PyObject* constructor = this->decimal_constructor();\n+  PyObject* decimal_value = internal::DecimalFromString(constructor, \"1.234\");\n+  ASSERT_NE(decimal_value, nullptr);\n+\n+  Py_INCREF(Py_None);\n+  PyObject* missing_value1 = Py_None;\n+  ASSERT_NE(missing_value1, nullptr);\n+\n+  PyObject* missing_value2 = PyFloat_FromDouble(NPY_NAN);\n+  ASSERT_NE(missing_value2, nullptr);\n+\n+  PyObject* missing_value3 = internal::DecimalFromString(constructor, \"nan\");\n+  ASSERT_NE(missing_value3, nullptr);\n+\n+  // This steals a reference to each object, so we don't need to decref them later,\n+  // just the list\n+  ASSERT_EQ(PyList_SetItem(list, 0, decimal_value), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 1, missing_value1), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 2, missing_value2), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 3, missing_value3), 0);\n \n Review comment:\n   in the future you can use `PyList_SET_ITEM` to avoid the assertion (if you want to live dangerously)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T21:49:48.672+0000",
                    "updated": "2018-02-26T21:49:48.672+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377645",
                    "id": "16377645",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170745047\n \n \n\n ##########\n File path: cpp/src/arrow/util/decimal.cc\n ##########\n @@ -212,160 +253,124 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n   }\n }\n \n-Status Decimal128::FromString(const std::string& s, Decimal128* out, int* precision,\n-                              int* scale) {\n-  // Implements this regex: \"(\\\\+?|-?)((0*)(\\\\d*))(\\\\.(\\\\d+))?((E|e)(\\\\+|-)?\\\\d+)?\";\n-  if (s.empty()) {\n-    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n-  }\n+static const boost::regex DECIMAL_REGEX(\n+    // sign of the number\n+    \"(?<SIGN>[-+]?)\"\n \n-  std::string::const_iterator charp = s.cbegin();\n-  std::string::const_iterator end = s.cend();\n+    // digits around the decimal point\n+    \"(((?<LEFT_DIGITS>\\\\d+)\\\\.(?<FIRST_RIGHT_DIGITS>\\\\d*)|\\\\.(?<SECOND_RIGHT_DIGITS>\\\\d+)\"\n+    \")\"\n \n-  char first_char = *charp;\n-  bool is_negative = false;\n-  if (first_char == '+' || first_char == '-') {\n-    is_negative = first_char == '-';\n-    ++charp;\n-  }\n+    // optional exponent\n+    \"([eE](?<FIRST_EXP_VALUE>[-+]?\\\\d+))?\"\n \n-  if (charp == end) {\n-    std::stringstream ss;\n-    ss << \"Single character: '\" << first_char << \"' is not a valid decimal value\";\n-    return Status::Invalid(ss.str());\n-  }\n+    // otherwise\n+    \"|\"\n \n-  std::string::const_iterator numeric_string_start = charp;\n+    // we're just an integer\n+    \"(?<INTEGER>\\\\d+)\"\n \n-  DCHECK_LT(charp, end);\n+    // or an integer with an exponent\n+    \"(?:[eE](?<SECOND_EXP_VALUE>[-+]?\\\\d+))?)\");\n \n-  // skip leading zeros\n-  charp = std::find_if_not(charp, end, [](char value) { return value == '0'; });\n+static inline bool is_zero_character(char c) { return c == '0'; }\n \n-  // all zeros and no decimal point\n-  if (charp == end) {\n-    if (out != NULLPTR) {\n-      *out = 0;\n-    }\n+Status Decimal128::FromString(const std::string& s, Decimal128* out, int32_t* precision,\n+                              int32_t* scale) {\n+  if (s.empty()) {\n+    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n+  }\n \n-    // Not sure what other libraries assign precision to for this case (this case of\n-    // a string consisting only of one or more zeros)\n+  // case of all zeros\n+  if (std::all_of(s.cbegin(), s.cend(), is_zero_character)) {\n     if (precision != NULLPTR) {\n-      *precision = static_cast<int>(charp - numeric_string_start);\n+      *precision = 0;\n     }\n \n     if (scale != NULLPTR) {\n       *scale = 0;\n     }\n \n+    *out = 0;\n     return Status::OK();\n   }\n \n-  std::string::const_iterator whole_part_start = charp;\n+  boost::smatch results;\n+  const bool matches = boost::regex_match(s, results, DECIMAL_REGEX);\n+\n+  if (!matches) {\n+    std::stringstream ss;\n+    ss << s << \" does not match\";\n+    return Status::Invalid(ss.str());\n+  }\n+\n+  const std::string sign = results[\"SIGN\"];\n \n Review comment:\n   is there some TMP magic that makes this abstraction zero-cost, or does this add overhead?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T21:49:48.690+0000",
                    "updated": "2018-02-26T21:49:48.690+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377646",
                    "id": "16377646",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170743408\n \n \n\n ##########\n File path: cpp/src/arrow/python/python-test.cc\n ##########\n @@ -226,20 +250,114 @@ TEST_F(DecimalTest, FromPythonDecimalRescaleTruncateable) {\n \n TEST_F(DecimalTest, TestOverflowFails) {\n   Decimal128 value;\n-  int32_t precision;\n-  int32_t scale;\n   OwnedRef python_decimal(\n       this->CreatePythonDecimal(\"9999999999999999999999999999999999999.9\"));\n-  ASSERT_OK(\n-      internal::InferDecimalPrecisionAndScale(python_decimal.obj(), &precision, &scale));\n-  ASSERT_EQ(38, precision);\n-  ASSERT_EQ(1, scale);\n+  internal::DecimalMetadata metadata;\n+  ASSERT_OK(metadata.Update(python_decimal.obj()));\n+  ASSERT_EQ(38, metadata.precision());\n+  ASSERT_EQ(1, metadata.scale());\n \n   auto type = ::arrow::decimal(38, 38);\n   const auto& decimal_type = static_cast<const DecimalType&>(*type);\n   ASSERT_RAISES(Invalid, internal::DecimalFromPythonDecimal(python_decimal.obj(),\n                                                             decimal_type, &value));\n }\n \n+TEST_F(DecimalTest, TestNoneAndNaN) {\n+  OwnedRef list_ref(PyList_New(4));\n+  PyObject* list = list_ref.obj();\n+\n+  ASSERT_NE(list, nullptr);\n+\n+  PyObject* constructor = this->decimal_constructor();\n+  PyObject* decimal_value = internal::DecimalFromString(constructor, \"1.234\");\n+  ASSERT_NE(decimal_value, nullptr);\n+\n+  Py_INCREF(Py_None);\n+  PyObject* missing_value1 = Py_None;\n+  ASSERT_NE(missing_value1, nullptr);\n+\n+  PyObject* missing_value2 = PyFloat_FromDouble(NPY_NAN);\n+  ASSERT_NE(missing_value2, nullptr);\n+\n+  PyObject* missing_value3 = internal::DecimalFromString(constructor, \"nan\");\n+  ASSERT_NE(missing_value3, nullptr);\n+\n+  // This steals a reference to each object, so we don't need to decref them later,\n+  // just the list\n+  ASSERT_EQ(PyList_SetItem(list, 0, decimal_value), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 1, missing_value1), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 2, missing_value2), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 3, missing_value3), 0);\n+\n+  MemoryPool* pool = default_memory_pool();\n+  std::shared_ptr<Array> arr;\n+  ASSERT_OK(ConvertPySequence(list, pool, &arr));\n+  ASSERT_TRUE(arr->IsValid(0));\n+  ASSERT_TRUE(arr->IsNull(1));\n+  ASSERT_TRUE(arr->IsNull(2));\n+  ASSERT_TRUE(arr->IsNull(3));\n+}\n+\n+TEST_F(DecimalTest, TestMixedPrecisionAndScale) {\n+  std::vector<std::string> strings{{\"0.001\", \"1.01E5\", \"1.01E5\"}};\n+\n+  OwnedRef list_ref(PyList_New(static_cast<Py_ssize_t>(strings.size())));\n+  PyObject* list = list_ref.obj();\n+\n+  ASSERT_NE(list, nullptr);\n+\n+  // PyList_SetItem steals a reference to the item so we don't decref it later\n+  for (size_t i = 0; i < strings.size(); ++i) {\n+    PyList_SetItem(\n+        list, i, internal::DecimalFromString(this->decimal_constructor(), strings.at(i)));\n \n Review comment:\n   this `i` is signed in the C API, maybe change the `size_t` above to `Py_ssize_t`?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T21:49:48.692+0000",
                    "updated": "2018-02-26T21:49:48.692+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377647",
                    "id": "16377647",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170747268\n \n \n\n ##########\n File path: python/pyarrow/tests/test_convert_pandas.py\n ##########\n @@ -1143,6 +1143,16 @@ def test_decimal_fails_with_truncation(self):\n         with pytest.raises(pa.ArrowException):\n             pa.array(data2, type=type2)\n \n+    def test_decimal_with_different_precisions(self):\n+        data = [\n+            decimal.Decimal('0.01'),\n+            decimal.Decimal('0.001'),\n+        ]\n+        series = pd.Series(data)\n+        array = pa.array(series)\n+        assert array.to_pylist() == data\n+        assert array.type == pa.decimal128(3, 3)\n \n Review comment:\n   same here\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T21:49:48.735+0000",
                    "updated": "2018-02-26T21:49:48.735+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377648",
                    "id": "16377648",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170744960\n \n \n\n ##########\n File path: cpp/src/arrow/util/decimal.cc\n ##########\n @@ -212,160 +253,124 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n   }\n }\n \n-Status Decimal128::FromString(const std::string& s, Decimal128* out, int* precision,\n-                              int* scale) {\n-  // Implements this regex: \"(\\\\+?|-?)((0*)(\\\\d*))(\\\\.(\\\\d+))?((E|e)(\\\\+|-)?\\\\d+)?\";\n-  if (s.empty()) {\n-    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n-  }\n+static const boost::regex DECIMAL_REGEX(\n+    // sign of the number\n+    \"(?<SIGN>[-+]?)\"\n \n-  std::string::const_iterator charp = s.cbegin();\n-  std::string::const_iterator end = s.cend();\n+    // digits around the decimal point\n+    \"(((?<LEFT_DIGITS>\\\\d+)\\\\.(?<FIRST_RIGHT_DIGITS>\\\\d*)|\\\\.(?<SECOND_RIGHT_DIGITS>\\\\d+)\"\n+    \")\"\n \n-  char first_char = *charp;\n-  bool is_negative = false;\n-  if (first_char == '+' || first_char == '-') {\n-    is_negative = first_char == '-';\n-    ++charp;\n-  }\n+    // optional exponent\n+    \"([eE](?<FIRST_EXP_VALUE>[-+]?\\\\d+))?\"\n \n-  if (charp == end) {\n-    std::stringstream ss;\n-    ss << \"Single character: '\" << first_char << \"' is not a valid decimal value\";\n-    return Status::Invalid(ss.str());\n-  }\n+    // otherwise\n+    \"|\"\n \n-  std::string::const_iterator numeric_string_start = charp;\n+    // we're just an integer\n+    \"(?<INTEGER>\\\\d+)\"\n \n-  DCHECK_LT(charp, end);\n+    // or an integer with an exponent\n+    \"(?:[eE](?<SECOND_EXP_VALUE>[-+]?\\\\d+))?)\");\n \n-  // skip leading zeros\n-  charp = std::find_if_not(charp, end, [](char value) { return value == '0'; });\n+static inline bool is_zero_character(char c) { return c == '0'; }\n \n-  // all zeros and no decimal point\n-  if (charp == end) {\n-    if (out != NULLPTR) {\n-      *out = 0;\n-    }\n+Status Decimal128::FromString(const std::string& s, Decimal128* out, int32_t* precision,\n+                              int32_t* scale) {\n+  if (s.empty()) {\n+    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n+  }\n \n-    // Not sure what other libraries assign precision to for this case (this case of\n-    // a string consisting only of one or more zeros)\n+  // case of all zeros\n+  if (std::all_of(s.cbegin(), s.cend(), is_zero_character)) {\n     if (precision != NULLPTR) {\n-      *precision = static_cast<int>(charp - numeric_string_start);\n+      *precision = 0;\n     }\n \n     if (scale != NULLPTR) {\n       *scale = 0;\n     }\n \n+    *out = 0;\n     return Status::OK();\n   }\n \n-  std::string::const_iterator whole_part_start = charp;\n+  boost::smatch results;\n+  const bool matches = boost::regex_match(s, results, DECIMAL_REGEX);\n+\n+  if (!matches) {\n+    std::stringstream ss;\n+    ss << s << \" does not match\";\n+    return Status::Invalid(ss.str());\n \n Review comment:\n   will this error present in a way that's intelligible to the user?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T21:49:48.736+0000",
                    "updated": "2018-02-26T21:49:48.736+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377649",
                    "id": "16377649",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170745521\n \n \n\n ##########\n File path: cpp/src/arrow/util/decimal.cc\n ##########\n @@ -212,160 +253,124 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n   }\n }\n \n-Status Decimal128::FromString(const std::string& s, Decimal128* out, int* precision,\n-                              int* scale) {\n-  // Implements this regex: \"(\\\\+?|-?)((0*)(\\\\d*))(\\\\.(\\\\d+))?((E|e)(\\\\+|-)?\\\\d+)?\";\n-  if (s.empty()) {\n-    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n-  }\n+static const boost::regex DECIMAL_REGEX(\n \n Review comment:\n   I reckon we'll want to replace this with libre2 at some point. it's also a lot faster than boost::regex http://lh3lh3.users.sourceforge.net/reb.shtml\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T21:49:48.747+0000",
                    "updated": "2018-02-26T21:49:48.747+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377650",
                    "id": "16377650",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170745843\n \n \n\n ##########\n File path: cpp/src/arrow/util/decimal.cc\n ##########\n @@ -212,160 +253,124 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n   }\n }\n \n-Status Decimal128::FromString(const std::string& s, Decimal128* out, int* precision,\n-                              int* scale) {\n-  // Implements this regex: \"(\\\\+?|-?)((0*)(\\\\d*))(\\\\.(\\\\d+))?((E|e)(\\\\+|-)?\\\\d+)?\";\n-  if (s.empty()) {\n-    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n-  }\n+static const boost::regex DECIMAL_REGEX(\n+    // sign of the number\n+    \"(?<SIGN>[-+]?)\"\n \n-  std::string::const_iterator charp = s.cbegin();\n-  std::string::const_iterator end = s.cend();\n+    // digits around the decimal point\n+    \"(((?<LEFT_DIGITS>\\\\d+)\\\\.(?<FIRST_RIGHT_DIGITS>\\\\d*)|\\\\.(?<SECOND_RIGHT_DIGITS>\\\\d+)\"\n+    \")\"\n \n-  char first_char = *charp;\n-  bool is_negative = false;\n-  if (first_char == '+' || first_char == '-') {\n-    is_negative = first_char == '-';\n-    ++charp;\n-  }\n+    // optional exponent\n+    \"([eE](?<FIRST_EXP_VALUE>[-+]?\\\\d+))?\"\n \n-  if (charp == end) {\n-    std::stringstream ss;\n-    ss << \"Single character: '\" << first_char << \"' is not a valid decimal value\";\n-    return Status::Invalid(ss.str());\n-  }\n+    // otherwise\n+    \"|\"\n \n-  std::string::const_iterator numeric_string_start = charp;\n+    // we're just an integer\n+    \"(?<INTEGER>\\\\d+)\"\n \n-  DCHECK_LT(charp, end);\n+    // or an integer with an exponent\n+    \"(?:[eE](?<SECOND_EXP_VALUE>[-+]?\\\\d+))?)\");\n \n-  // skip leading zeros\n-  charp = std::find_if_not(charp, end, [](char value) { return value == '0'; });\n+static inline bool is_zero_character(char c) { return c == '0'; }\n \n-  // all zeros and no decimal point\n-  if (charp == end) {\n-    if (out != NULLPTR) {\n-      *out = 0;\n-    }\n+Status Decimal128::FromString(const std::string& s, Decimal128* out, int32_t* precision,\n+                              int32_t* scale) {\n+  if (s.empty()) {\n+    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n+  }\n \n-    // Not sure what other libraries assign precision to for this case (this case of\n-    // a string consisting only of one or more zeros)\n+  // case of all zeros\n+  if (std::all_of(s.cbegin(), s.cend(), is_zero_character)) {\n     if (precision != NULLPTR) {\n-      *precision = static_cast<int>(charp - numeric_string_start);\n+      *precision = 0;\n     }\n \n     if (scale != NULLPTR) {\n       *scale = 0;\n     }\n \n+    *out = 0;\n     return Status::OK();\n   }\n \n-  std::string::const_iterator whole_part_start = charp;\n+  boost::smatch results;\n+  const bool matches = boost::regex_match(s, results, DECIMAL_REGEX);\n+\n+  if (!matches) {\n+    std::stringstream ss;\n+    ss << s << \" does not match\";\n+    return Status::Invalid(ss.str());\n+  }\n+\n+  const std::string sign = results[\"SIGN\"];\n+  const std::string integer = results[\"INTEGER\"];\n \n-  charp = std::find_if_not(charp, end, isdigit);\n+  const std::string left_digits = results[\"LEFT_DIGITS\"];\n+  const std::string first_right_digits = results[\"FIRST_RIGHT_DIGITS\"];\n \n-  std::string::const_iterator whole_part_end = charp;\n-  std::string whole_part(whole_part_start, whole_part_end);\n+  const std::string second_right_digits = results[\"SECOND_RIGHT_DIGITS\"];\n \n-  if (charp != end && *charp == '.') {\n-    ++charp;\n+  const std::string first_exp_value = results[\"FIRST_EXP_VALUE\"];\n+  const std::string second_exp_value = results[\"SECOND_EXP_VALUE\"];\n \n-    if (charp == end) {\n-      return Status::Invalid(\n-          \"Decimal point must be followed by at least one base ten digit. Reached the \"\n-          \"end of the string.\");\n-    }\n+  std::string whole_part;\n+  std::string fractional_part;\n+  std::string exponent_value;\n \n-    if (std::isdigit(*charp) == 0) {\n-      std::stringstream ss;\n-      ss << \"Decimal point must be followed by a base ten digit. Found '\" << *charp\n-         << \"'\";\n-      return Status::Invalid(ss.str());\n-    }\n+  if (!integer.empty()) {\n+    whole_part = integer;\n+  } else if (!left_digits.empty()) {\n+    DCHECK(second_right_digits.empty()) << s << \" \" << second_right_digits;\n+    whole_part = left_digits;\n+    fractional_part = first_right_digits;\n   } else {\n-    if (charp != end) {\n-      std::stringstream ss;\n-      ss << \"Expected base ten digit or decimal point but found '\" << *charp\n-         << \"' instead.\";\n-      return Status::Invalid(ss.str());\n-    }\n+    DCHECK(first_right_digits.empty()) << s << \" \" << first_right_digits;\n+    fractional_part = second_right_digits;\n   }\n \n-  std::string::const_iterator fractional_part_start = charp;\n-\n-  // The rest must be digits or an exponent\n-  if (charp != end) {\n-    charp = std::find_if_not(charp, end, isdigit);\n+  // skip leading zeros before the decimal point\n+  std::string::const_iterator without_leading_zeros =\n+      std::find_if_not(whole_part.cbegin(), whole_part.cend(), is_zero_character);\n+  whole_part = std::string(without_leading_zeros, whole_part.cend());\n \n-    // The while loop has ended before the end of the string which means we've hit a\n-    // character that isn't a base ten digit or \"E\" for exponent\n-    if (charp != end && *charp != 'E' && *charp != 'e') {\n-      std::stringstream ss;\n-      ss << \"Found non base ten digit character '\" << *charp\n-         << \"' before the end of the string\";\n-      return Status::Invalid(ss.str());\n-    }\n+  if (!first_exp_value.empty()) {\n+    exponent_value = first_exp_value;\n+  } else {\n+    exponent_value = second_exp_value;\n   }\n \n-  std::string::const_iterator fractional_part_end = charp;\n-  std::string fractional_part(fractional_part_start, fractional_part_end);\n-\n   if (precision != NULLPTR) {\n-    *precision = static_cast<int>(whole_part.size() + fractional_part.size());\n+    *precision = static_cast<int32_t>(whole_part.size() + fractional_part.size());\n   }\n \n-  if (charp != end) {\n-    // we must have an exponent, if this aborts then we have somehow not caught this and\n-    // raised a proper error\n-    DCHECK(*charp == 'E' || *charp == 'e');\n-\n-    ++charp;\n-\n-    const char value = *charp;\n-    const bool starts_with_plus_or_minus = value == '+' || value == '-';\n-\n-    // we use this to construct the adjusted exponent integer later\n-    std::string::const_iterator digit_start = charp;\n-\n-    // skip plus or minus\n-    charp += starts_with_plus_or_minus;\n-\n-    // confirm that the rest of the characters are digits\n-    charp = std::find_if_not(charp, end, isdigit);\n-\n-    if (charp != end) {\n-      // we have something other than digits here\n-      std::stringstream ss;\n-      ss << \"Found non decimal digit exponent value '\" << *charp << \"'\";\n-      return Status::Invalid(ss.str());\n-    }\n-\n-    if (scale != NULLPTR) {\n-      // compute the scale from the adjusted exponent\n-      std::string adjusted_exponent_string(digit_start, end);\n-      DCHECK(std::all_of(adjusted_exponent_string.cbegin() + starts_with_plus_or_minus,\n-                         adjusted_exponent_string.cend(), isdigit))\n-          << \"Non decimal digit character found in \" << adjusted_exponent_string;\n-      const auto adjusted_exponent =\n-          static_cast<int32_t>(std::stol(adjusted_exponent_string));\n-      const auto len = static_cast<int32_t>(whole_part.size() + fractional_part.size());\n-\n+  if (scale != NULLPTR) {\n+    if (!exponent_value.empty()) {\n+      auto adjusted_exponent = static_cast<int32_t>(std::stol(exponent_value));\n+      auto len = static_cast<int32_t>(whole_part.size() + fractional_part.size());\n       *scale = -adjusted_exponent + len - 1;\n-    }\n-  } else {\n-    if (scale != NULLPTR) {\n-      *scale = static_cast<int>(fractional_part.size());\n+    } else {\n+      *scale = static_cast<int32_t>(fractional_part.size());\n     }\n   }\n \n   if (out != NULLPTR) {\n-    // zero out in case we've passed in a previously used value\n     *out = 0;\n     StringToInteger(whole_part + fractional_part, out);\n-    if (is_negative) {\n+    if (sign == \"-\") {\n       out->Negate();\n     }\n+\n+    if (scale != NULLPTR && *scale < 0) {\n+      const int32_t abs_scale = std::abs(*scale);\n+      *out *= ScaleMultipliers[abs_scale];\n+\n+      if (precision != NULLPTR) {\n \n Review comment:\n   FWIW it's not necessary to use this `NULLPTR` macro outside headers I don't believe \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T21:49:48.756+0000",
                    "updated": "2018-02-26T21:49:48.756+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377665",
                    "id": "16377665",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170750478\n \n \n\n ##########\n File path: ci/travis_build_parquet_cpp.sh\n ##########\n @@ -38,7 +38,7 @@ cmake \\\n     -GNinja \\\n     -DCMAKE_BUILD_TYPE=debug \\\n     -DCMAKE_INSTALL_PREFIX=$ARROW_PYTHON_PARQUET_HOME \\\n-    -DPARQUET_BOOST_USE_SHARED=off \\\n+    -DPARQUET_BOOST_USE_SHARED=on \\\n \n Review comment:\n   `import pyarrow.parquet` was segfaulting, I assumed because we're statically linking boost in the parquet build and dynamically in the arrow build. This only shows up when using the regex library.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T22:01:00.244+0000",
                    "updated": "2018-02-26T22:01:00.244+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377666",
                    "id": "16377666",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170750733\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -76,7 +76,18 @@ class ScalarVisitor {\n         timestamp_count_(0),\n         float_count_(0),\n         binary_count_(0),\n-        unicode_count_(0) {}\n+        unicode_count_(0),\n+        decimal_count_(0),\n+        max_decimal_metadata_(std::numeric_limits<int32_t>::min(),\n+                              std::numeric_limits<int32_t>::min()),\n+        decimal_type_() {\n+    OwnedRefNoGIL decimal_module;\n+    Status status = ::arrow::py::internal::ImportModule(\"decimal\", &decimal_module);\n+    DCHECK(status.ok()) << \"Unable to import decimal module\";\n+    status = ::arrow::py::internal::ImportFromModule(decimal_module, \"Decimal\",\n+                                                     &decimal_type_);\n+    DCHECK(status.ok()) << \"Unable to import decimal.Decimal\";\n \n Review comment:\n   Yep they are done in the `Import*` functions. I'll remove these.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T22:01:57.162+0000",
                    "updated": "2018-02-26T22:01:57.162+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377681",
                    "id": "16377681",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170753162\n \n \n\n ##########\n File path: ci/travis_build_parquet_cpp.sh\n ##########\n @@ -38,7 +38,7 @@ cmake \\\n     -GNinja \\\n     -DCMAKE_BUILD_TYPE=debug \\\n     -DCMAKE_INSTALL_PREFIX=$ARROW_PYTHON_PARQUET_HOME \\\n-    -DPARQUET_BOOST_USE_SHARED=off \\\n+    -DPARQUET_BOOST_USE_SHARED=on \\\n \n Review comment:\n   I see, we should be consistent about which we do across the libraries. Part of why I wish we were building all these libraries in a monorepo setting\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T22:11:08.436+0000",
                    "updated": "2018-02-26T22:11:08.436+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377683",
                    "id": "16377683",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170753626\n \n \n\n ##########\n File path: cpp/src/arrow/python/helpers.cc\n ##########\n @@ -193,6 +218,63 @@ Status UInt64FromPythonInt(PyObject* obj, uint64_t* out) {\n   return Status::OK();\n }\n \n+bool PyFloat_isnan(PyObject* obj) {\n+  return PyFloat_Check(obj) && std::isnan(PyFloat_AS_DOUBLE(obj));\n+}\n+\n+bool PyDecimal_Check(PyObject* obj) {\n+  // TODO(phillipc): Is this expensive?\n+  OwnedRef Decimal;\n+  OwnedRef decimal;\n+  Status status = ImportModule(\"decimal\", &decimal);\n+  DCHECK(status.ok()) << \"Error during import of the decimal module\";\n+  status = ImportFromModule(decimal, \"Decimal\", &Decimal);\n+  DCHECK(status.ok())\n+      << \"Error during import of the Decimal object from the decimal module\";\n+  const int32_t result = PyObject_IsInstance(obj, Decimal.obj());\n+  DCHECK_NE(result, -1) << \" error during PyObject_IsInstance check\";\n+  return result == 1;\n+}\n+\n+bool PyDecimal_ISNAN(PyObject* obj) {\n+  DCHECK(PyDecimal_Check(obj)) << \"obj is not an instance of decimal.Decimal\";\n+  OwnedRef is_nan(PyObject_CallMethod(obj, \"is_nan\", \"\"));\n+  return PyObject_IsTrue(is_nan.obj()) == 1;\n+}\n+\n+DecimalMetadata::DecimalMetadata()\n+    : DecimalMetadata(std::numeric_limits<int32_t>::min(),\n+                      std::numeric_limits<int32_t>::min()) {}\n+\n+DecimalMetadata::DecimalMetadata(int32_t precision, int32_t scale)\n+    : precision_(precision), scale_(scale) {}\n+\n+Status DecimalMetadata::Update(int32_t suggested_precision, int32_t suggested_scale) {\n+  const int32_t current_precision = precision_;\n+  precision_ = std::max(current_precision, suggested_precision);\n+\n+  const int32_t current_scale = scale_;\n+  scale_ = std::max(current_scale, suggested_scale);\n+\n+  // if our suggested scale is zero and we don't yet have enough precision then we need to\n+  // add whatever the current scale is to the precision\n+  if (suggested_scale == 0 && suggested_precision > current_precision) {\n+    precision_ += scale_;\n+  }\n+\n+  return Status::OK();\n+}\n+\n+Status DecimalMetadata::Update(PyObject* object) {\n+  DCHECK(PyDecimal_Check(object)) << \"Object is not a Python Decimal\";\n+  DCHECK(!PyDecimal_ISNAN(object))\n+      << \"Decimal object cannot be NAN when inferring precision and scale\";\n \n Review comment:\n   Yep, I was guarding against potential uses of it after the fact so that arrow crashes with a useful error message to the developer.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T22:12:43.652+0000",
                    "updated": "2018-02-26T22:12:43.652+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377685",
                    "id": "16377685",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170753756\n \n \n\n ##########\n File path: cpp/src/arrow/python/helpers.cc\n ##########\n @@ -193,6 +218,63 @@ Status UInt64FromPythonInt(PyObject* obj, uint64_t* out) {\n   return Status::OK();\n }\n \n+bool PyFloat_isnan(PyObject* obj) {\n+  return PyFloat_Check(obj) && std::isnan(PyFloat_AS_DOUBLE(obj));\n+}\n+\n+bool PyDecimal_Check(PyObject* obj) {\n+  // TODO(phillipc): Is this expensive?\n+  OwnedRef Decimal;\n+  OwnedRef decimal;\n+  Status status = ImportModule(\"decimal\", &decimal);\n+  DCHECK(status.ok()) << \"Error during import of the decimal module\";\n+  status = ImportFromModule(decimal, \"Decimal\", &Decimal);\n+  DCHECK(status.ok())\n+      << \"Error during import of the Decimal object from the decimal module\";\n+  const int32_t result = PyObject_IsInstance(obj, Decimal.obj());\n+  DCHECK_NE(result, -1) << \" error during PyObject_IsInstance check\";\n+  return result == 1;\n+}\n+\n+bool PyDecimal_ISNAN(PyObject* obj) {\n+  DCHECK(PyDecimal_Check(obj)) << \"obj is not an instance of decimal.Decimal\";\n+  OwnedRef is_nan(PyObject_CallMethod(obj, \"is_nan\", \"\"));\n+  return PyObject_IsTrue(is_nan.obj()) == 1;\n+}\n+\n+DecimalMetadata::DecimalMetadata()\n+    : DecimalMetadata(std::numeric_limits<int32_t>::min(),\n+                      std::numeric_limits<int32_t>::min()) {}\n+\n+DecimalMetadata::DecimalMetadata(int32_t precision, int32_t scale)\n+    : precision_(precision), scale_(scale) {}\n+\n+Status DecimalMetadata::Update(int32_t suggested_precision, int32_t suggested_scale) {\n+  const int32_t current_precision = precision_;\n+  precision_ = std::max(current_precision, suggested_precision);\n+\n+  const int32_t current_scale = scale_;\n+  scale_ = std::max(current_scale, suggested_scale);\n+\n+  // if our suggested scale is zero and we don't yet have enough precision then we need to\n+  // add whatever the current scale is to the precision\n+  if (suggested_scale == 0 && suggested_precision > current_precision) {\n+    precision_ += scale_;\n+  }\n+\n+  return Status::OK();\n+}\n+\n+Status DecimalMetadata::Update(PyObject* object) {\n+  DCHECK(PyDecimal_Check(object)) << \"Object is not a Python Decimal\";\n+  DCHECK(!PyDecimal_ISNAN(object))\n+      << \"Decimal object cannot be NAN when inferring precision and scale\";\n \n Review comment:\n   I suppose I could relax this and just do nothing if the value is nan.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T22:13:14.038+0000",
                    "updated": "2018-02-26T22:13:14.038+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377686",
                    "id": "16377686",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170753925\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -743,59 +733,38 @@ Status NumPyConverter::ConvertDates() {\n Status NumPyConverter::ConvertDecimals() {\n   PyAcquireGIL lock;\n \n-  // Import the decimal module and Decimal class\n-  OwnedRef decimal;\n-  OwnedRef Decimal;\n-  RETURN_NOT_OK(internal::ImportModule(\"decimal\", &decimal));\n-  RETURN_NOT_OK(internal::ImportFromModule(decimal, \"Decimal\", &Decimal));\n-\n+  internal::DecimalMetadata max_decimal_metadata;\n   Ndarray1DIndexer<PyObject*> objects(arr_);\n-  PyObject* object = objects[0];\n \n   if (type_ == NULLPTR) {\n-    int32_t precision;\n-    int32_t desired_scale;\n-\n-    int32_t tmp_precision;\n-    int32_t tmp_scale;\n-\n-    RETURN_NOT_OK(\n-        internal::InferDecimalPrecisionAndScale(objects[0], &precision, &desired_scale));\n-\n-    for (int64_t i = 1; i < length_; ++i) {\n-      RETURN_NOT_OK(internal::InferDecimalPrecisionAndScale(objects[i], &tmp_precision,\n-                                                            &tmp_scale));\n-      precision = std::max(precision, tmp_precision);\n-\n-      if (std::abs(desired_scale) < std::abs(tmp_scale)) {\n-        desired_scale = tmp_scale;\n-      }\n+    for (PyObject* object : objects) {\n+      RETURN_NOT_OK(max_decimal_metadata.Update(object));\n \n Review comment:\n   This should ignore nans\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T22:13:59.240+0000",
                    "updated": "2018-02-26T22:13:59.240+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377688",
                    "id": "16377688",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170754048\n \n \n\n ##########\n File path: cpp/src/arrow/python/python-test.cc\n ##########\n @@ -78,12 +78,13 @@ TEST(OwnedRefNoGIL, TestMoves) {\n \n class DecimalTest : public ::testing::Test {\n  public:\n-  DecimalTest() : lock_(), decimal_module_(), decimal_constructor_() {\n-    auto s = internal::ImportModule(\"decimal\", &decimal_module_);\n+  DecimalTest() : lock_(), decimal_constructor_() {\n+    OwnedRef decimal_module;\n+    auto s = internal::ImportModule(\"decimal\", &decimal_module);\n     DCHECK(s.ok()) << s.message();\n-    DCHECK_NE(decimal_module_.obj(), NULLPTR);\n+    DCHECK_NE(decimal_module.obj(), NULLPTR);\n \n Review comment:\n   Yep thanks.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T22:14:27.095+0000",
                    "updated": "2018-02-26T22:14:27.095+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377695",
                    "id": "16377695",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170755216\n \n \n\n ##########\n File path: cpp/src/arrow/util/decimal.cc\n ##########\n @@ -23,12 +23,55 @@\n #include <limits>\n #include <sstream>\n \n+#include <boost/regex.hpp>\n+\n #include \"arrow/util/bit-util.h\"\n #include \"arrow/util/decimal.h\"\n #include \"arrow/util/logging.h\"\n \n namespace arrow {\n \n+static const Decimal128 ScaleMultipliers[] = {\n+    Decimal128(0LL),\n+    Decimal128(10LL),\n+    Decimal128(100LL),\n+    Decimal128(1000LL),\n+    Decimal128(10000LL),\n+    Decimal128(100000LL),\n+    Decimal128(1000000LL),\n+    Decimal128(10000000LL),\n+    Decimal128(100000000LL),\n+    Decimal128(1000000000LL),\n+    Decimal128(10000000000LL),\n+    Decimal128(100000000000LL),\n+    Decimal128(1000000000000LL),\n+    Decimal128(10000000000000LL),\n+    Decimal128(100000000000000LL),\n+    Decimal128(1000000000000000LL),\n+    Decimal128(10000000000000000LL),\n+    Decimal128(100000000000000000LL),\n+    Decimal128(1000000000000000000LL),\n+    Decimal128(0LL, 10000000000000000000ULL),\n+    Decimal128(5LL, 7766279631452241920ULL),\n+    Decimal128(54LL, 3875820019684212736ULL),\n+    Decimal128(542LL, 1864712049423024128ULL),\n+    Decimal128(5421LL, 200376420520689664ULL),\n+    Decimal128(54210LL, 2003764205206896640ULL),\n+    Decimal128(542101LL, 1590897978359414784ULL),\n+    Decimal128(5421010LL, 15908979783594147840ULL),\n+    Decimal128(54210108LL, 11515845246265065472ULL),\n+    Decimal128(542101086LL, 4477988020393345024ULL),\n+    Decimal128(5421010862LL, 7886392056514347008ULL),\n+    Decimal128(54210108624LL, 5076944270305263616ULL),\n+    Decimal128(542101086242LL, 13875954555633532928ULL),\n+    Decimal128(5421010862427LL, 9632337040368467968ULL),\n+    Decimal128(54210108624275LL, 4089650035136921600ULL),\n+    Decimal128(542101086242752LL, 4003012203950112768ULL),\n+    Decimal128(5421010862427522LL, 3136633892082024448ULL),\n+    Decimal128(54210108624275221LL, 12919594847110692864ULL),\n+    Decimal128(542101086242752217LL, 68739955140067328ULL),\n+    Decimal128(5421010862427522170LL, 687399551400673280ULL)};\n \n Review comment:\n   By looping over the old ones and printing out `value.high_bits(), value.low_bits()`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T22:18:33.977+0000",
                    "updated": "2018-02-26T22:18:33.977+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377698",
                    "id": "16377698",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170755603\n \n \n\n ##########\n File path: cpp/src/arrow/util/decimal.cc\n ##########\n @@ -212,160 +253,124 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n   }\n }\n \n-Status Decimal128::FromString(const std::string& s, Decimal128* out, int* precision,\n-                              int* scale) {\n-  // Implements this regex: \"(\\\\+?|-?)((0*)(\\\\d*))(\\\\.(\\\\d+))?((E|e)(\\\\+|-)?\\\\d+)?\";\n-  if (s.empty()) {\n-    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n-  }\n+static const boost::regex DECIMAL_REGEX(\n+    // sign of the number\n+    \"(?<SIGN>[-+]?)\"\n \n-  std::string::const_iterator charp = s.cbegin();\n-  std::string::const_iterator end = s.cend();\n+    // digits around the decimal point\n+    \"(((?<LEFT_DIGITS>\\\\d+)\\\\.(?<FIRST_RIGHT_DIGITS>\\\\d*)|\\\\.(?<SECOND_RIGHT_DIGITS>\\\\d+)\"\n+    \")\"\n \n-  char first_char = *charp;\n-  bool is_negative = false;\n-  if (first_char == '+' || first_char == '-') {\n-    is_negative = first_char == '-';\n-    ++charp;\n-  }\n+    // optional exponent\n+    \"([eE](?<FIRST_EXP_VALUE>[-+]?\\\\d+))?\"\n \n-  if (charp == end) {\n-    std::stringstream ss;\n-    ss << \"Single character: '\" << first_char << \"' is not a valid decimal value\";\n-    return Status::Invalid(ss.str());\n-  }\n+    // otherwise\n+    \"|\"\n \n-  std::string::const_iterator numeric_string_start = charp;\n+    // we're just an integer\n+    \"(?<INTEGER>\\\\d+)\"\n \n-  DCHECK_LT(charp, end);\n+    // or an integer with an exponent\n+    \"(?:[eE](?<SECOND_EXP_VALUE>[-+]?\\\\d+))?)\");\n \n-  // skip leading zeros\n-  charp = std::find_if_not(charp, end, [](char value) { return value == '0'; });\n+static inline bool is_zero_character(char c) { return c == '0'; }\n \n-  // all zeros and no decimal point\n-  if (charp == end) {\n-    if (out != NULLPTR) {\n-      *out = 0;\n-    }\n+Status Decimal128::FromString(const std::string& s, Decimal128* out, int32_t* precision,\n+                              int32_t* scale) {\n+  if (s.empty()) {\n+    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n+  }\n \n-    // Not sure what other libraries assign precision to for this case (this case of\n-    // a string consisting only of one or more zeros)\n+  // case of all zeros\n+  if (std::all_of(s.cbegin(), s.cend(), is_zero_character)) {\n     if (precision != NULLPTR) {\n-      *precision = static_cast<int>(charp - numeric_string_start);\n+      *precision = 0;\n     }\n \n     if (scale != NULLPTR) {\n       *scale = 0;\n     }\n \n+    *out = 0;\n     return Status::OK();\n   }\n \n-  std::string::const_iterator whole_part_start = charp;\n+  boost::smatch results;\n+  const bool matches = boost::regex_match(s, results, DECIMAL_REGEX);\n+\n+  if (!matches) {\n+    std::stringstream ss;\n+    ss << s << \" does not match\";\n+    return Status::Invalid(ss.str());\n \n Review comment:\n   Probably not, I'll fix.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T22:20:02.313+0000",
                    "updated": "2018-02-26T22:20:02.313+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377699",
                    "id": "16377699",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170755650\n \n \n\n ##########\n File path: cpp/src/arrow/util/decimal.cc\n ##########\n @@ -212,160 +253,124 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n   }\n }\n \n-Status Decimal128::FromString(const std::string& s, Decimal128* out, int* precision,\n-                              int* scale) {\n-  // Implements this regex: \"(\\\\+?|-?)((0*)(\\\\d*))(\\\\.(\\\\d+))?((E|e)(\\\\+|-)?\\\\d+)?\";\n-  if (s.empty()) {\n-    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n-  }\n+static const boost::regex DECIMAL_REGEX(\n+    // sign of the number\n+    \"(?<SIGN>[-+]?)\"\n \n-  std::string::const_iterator charp = s.cbegin();\n-  std::string::const_iterator end = s.cend();\n+    // digits around the decimal point\n+    \"(((?<LEFT_DIGITS>\\\\d+)\\\\.(?<FIRST_RIGHT_DIGITS>\\\\d*)|\\\\.(?<SECOND_RIGHT_DIGITS>\\\\d+)\"\n+    \")\"\n \n-  char first_char = *charp;\n-  bool is_negative = false;\n-  if (first_char == '+' || first_char == '-') {\n-    is_negative = first_char == '-';\n-    ++charp;\n-  }\n+    // optional exponent\n+    \"([eE](?<FIRST_EXP_VALUE>[-+]?\\\\d+))?\"\n \n-  if (charp == end) {\n-    std::stringstream ss;\n-    ss << \"Single character: '\" << first_char << \"' is not a valid decimal value\";\n-    return Status::Invalid(ss.str());\n-  }\n+    // otherwise\n+    \"|\"\n \n-  std::string::const_iterator numeric_string_start = charp;\n+    // we're just an integer\n+    \"(?<INTEGER>\\\\d+)\"\n \n-  DCHECK_LT(charp, end);\n+    // or an integer with an exponent\n+    \"(?:[eE](?<SECOND_EXP_VALUE>[-+]?\\\\d+))?)\");\n \n-  // skip leading zeros\n-  charp = std::find_if_not(charp, end, [](char value) { return value == '0'; });\n+static inline bool is_zero_character(char c) { return c == '0'; }\n \n-  // all zeros and no decimal point\n-  if (charp == end) {\n-    if (out != NULLPTR) {\n-      *out = 0;\n-    }\n+Status Decimal128::FromString(const std::string& s, Decimal128* out, int32_t* precision,\n+                              int32_t* scale) {\n+  if (s.empty()) {\n+    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n+  }\n \n-    // Not sure what other libraries assign precision to for this case (this case of\n-    // a string consisting only of one or more zeros)\n+  // case of all zeros\n+  if (std::all_of(s.cbegin(), s.cend(), is_zero_character)) {\n     if (precision != NULLPTR) {\n-      *precision = static_cast<int>(charp - numeric_string_start);\n+      *precision = 0;\n     }\n \n     if (scale != NULLPTR) {\n       *scale = 0;\n     }\n \n+    *out = 0;\n     return Status::OK();\n   }\n \n-  std::string::const_iterator whole_part_start = charp;\n+  boost::smatch results;\n+  const bool matches = boost::regex_match(s, results, DECIMAL_REGEX);\n+\n+  if (!matches) {\n+    std::stringstream ss;\n+    ss << s << \" does not match\";\n+    return Status::Invalid(ss.str());\n+  }\n+\n+  const std::string sign = results[\"SIGN\"];\n+  const std::string integer = results[\"INTEGER\"];\n \n-  charp = std::find_if_not(charp, end, isdigit);\n+  const std::string left_digits = results[\"LEFT_DIGITS\"];\n+  const std::string first_right_digits = results[\"FIRST_RIGHT_DIGITS\"];\n \n-  std::string::const_iterator whole_part_end = charp;\n-  std::string whole_part(whole_part_start, whole_part_end);\n+  const std::string second_right_digits = results[\"SECOND_RIGHT_DIGITS\"];\n \n-  if (charp != end && *charp == '.') {\n-    ++charp;\n+  const std::string first_exp_value = results[\"FIRST_EXP_VALUE\"];\n+  const std::string second_exp_value = results[\"SECOND_EXP_VALUE\"];\n \n-    if (charp == end) {\n-      return Status::Invalid(\n-          \"Decimal point must be followed by at least one base ten digit. Reached the \"\n-          \"end of the string.\");\n-    }\n+  std::string whole_part;\n+  std::string fractional_part;\n+  std::string exponent_value;\n \n-    if (std::isdigit(*charp) == 0) {\n-      std::stringstream ss;\n-      ss << \"Decimal point must be followed by a base ten digit. Found '\" << *charp\n-         << \"'\";\n-      return Status::Invalid(ss.str());\n-    }\n+  if (!integer.empty()) {\n+    whole_part = integer;\n+  } else if (!left_digits.empty()) {\n+    DCHECK(second_right_digits.empty()) << s << \" \" << second_right_digits;\n+    whole_part = left_digits;\n+    fractional_part = first_right_digits;\n   } else {\n-    if (charp != end) {\n-      std::stringstream ss;\n-      ss << \"Expected base ten digit or decimal point but found '\" << *charp\n-         << \"' instead.\";\n-      return Status::Invalid(ss.str());\n-    }\n+    DCHECK(first_right_digits.empty()) << s << \" \" << first_right_digits;\n+    fractional_part = second_right_digits;\n   }\n \n-  std::string::const_iterator fractional_part_start = charp;\n-\n-  // The rest must be digits or an exponent\n-  if (charp != end) {\n-    charp = std::find_if_not(charp, end, isdigit);\n+  // skip leading zeros before the decimal point\n+  std::string::const_iterator without_leading_zeros =\n+      std::find_if_not(whole_part.cbegin(), whole_part.cend(), is_zero_character);\n+  whole_part = std::string(without_leading_zeros, whole_part.cend());\n \n-    // The while loop has ended before the end of the string which means we've hit a\n-    // character that isn't a base ten digit or \"E\" for exponent\n-    if (charp != end && *charp != 'E' && *charp != 'e') {\n-      std::stringstream ss;\n-      ss << \"Found non base ten digit character '\" << *charp\n-         << \"' before the end of the string\";\n-      return Status::Invalid(ss.str());\n-    }\n+  if (!first_exp_value.empty()) {\n+    exponent_value = first_exp_value;\n+  } else {\n+    exponent_value = second_exp_value;\n   }\n \n-  std::string::const_iterator fractional_part_end = charp;\n-  std::string fractional_part(fractional_part_start, fractional_part_end);\n-\n   if (precision != NULLPTR) {\n-    *precision = static_cast<int>(whole_part.size() + fractional_part.size());\n+    *precision = static_cast<int32_t>(whole_part.size() + fractional_part.size());\n   }\n \n-  if (charp != end) {\n-    // we must have an exponent, if this aborts then we have somehow not caught this and\n-    // raised a proper error\n-    DCHECK(*charp == 'E' || *charp == 'e');\n-\n-    ++charp;\n-\n-    const char value = *charp;\n-    const bool starts_with_plus_or_minus = value == '+' || value == '-';\n-\n-    // we use this to construct the adjusted exponent integer later\n-    std::string::const_iterator digit_start = charp;\n-\n-    // skip plus or minus\n-    charp += starts_with_plus_or_minus;\n-\n-    // confirm that the rest of the characters are digits\n-    charp = std::find_if_not(charp, end, isdigit);\n-\n-    if (charp != end) {\n-      // we have something other than digits here\n-      std::stringstream ss;\n-      ss << \"Found non decimal digit exponent value '\" << *charp << \"'\";\n-      return Status::Invalid(ss.str());\n-    }\n-\n-    if (scale != NULLPTR) {\n-      // compute the scale from the adjusted exponent\n-      std::string adjusted_exponent_string(digit_start, end);\n-      DCHECK(std::all_of(adjusted_exponent_string.cbegin() + starts_with_plus_or_minus,\n-                         adjusted_exponent_string.cend(), isdigit))\n-          << \"Non decimal digit character found in \" << adjusted_exponent_string;\n-      const auto adjusted_exponent =\n-          static_cast<int32_t>(std::stol(adjusted_exponent_string));\n-      const auto len = static_cast<int32_t>(whole_part.size() + fractional_part.size());\n-\n+  if (scale != NULLPTR) {\n+    if (!exponent_value.empty()) {\n+      auto adjusted_exponent = static_cast<int32_t>(std::stol(exponent_value));\n+      auto len = static_cast<int32_t>(whole_part.size() + fractional_part.size());\n       *scale = -adjusted_exponent + len - 1;\n-    }\n-  } else {\n-    if (scale != NULLPTR) {\n-      *scale = static_cast<int>(fractional_part.size());\n+    } else {\n+      *scale = static_cast<int32_t>(fractional_part.size());\n     }\n   }\n \n   if (out != NULLPTR) {\n-    // zero out in case we've passed in a previously used value\n     *out = 0;\n     StringToInteger(whole_part + fractional_part, out);\n-    if (is_negative) {\n+    if (sign == \"-\") {\n       out->Negate();\n     }\n+\n+    if (scale != NULLPTR && *scale < 0) {\n+      const int32_t abs_scale = std::abs(*scale);\n+      *out *= ScaleMultipliers[abs_scale];\n+\n+      if (precision != NULLPTR) {\n \n Review comment:\n   Cool I'll fix\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T22:20:15.633+0000",
                    "updated": "2018-02-26T22:20:15.633+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377736",
                    "id": "16377736",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170762992\n \n \n\n ##########\n File path: cpp/src/arrow/util/decimal.cc\n ##########\n @@ -212,160 +253,124 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n   }\n }\n \n-Status Decimal128::FromString(const std::string& s, Decimal128* out, int* precision,\n-                              int* scale) {\n-  // Implements this regex: \"(\\\\+?|-?)((0*)(\\\\d*))(\\\\.(\\\\d+))?((E|e)(\\\\+|-)?\\\\d+)?\";\n-  if (s.empty()) {\n-    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n-  }\n+static const boost::regex DECIMAL_REGEX(\n+    // sign of the number\n+    \"(?<SIGN>[-+]?)\"\n \n-  std::string::const_iterator charp = s.cbegin();\n-  std::string::const_iterator end = s.cend();\n+    // digits around the decimal point\n+    \"(((?<LEFT_DIGITS>\\\\d+)\\\\.(?<FIRST_RIGHT_DIGITS>\\\\d*)|\\\\.(?<SECOND_RIGHT_DIGITS>\\\\d+)\"\n+    \")\"\n \n-  char first_char = *charp;\n-  bool is_negative = false;\n-  if (first_char == '+' || first_char == '-') {\n-    is_negative = first_char == '-';\n-    ++charp;\n-  }\n+    // optional exponent\n+    \"([eE](?<FIRST_EXP_VALUE>[-+]?\\\\d+))?\"\n \n-  if (charp == end) {\n-    std::stringstream ss;\n-    ss << \"Single character: '\" << first_char << \"' is not a valid decimal value\";\n-    return Status::Invalid(ss.str());\n-  }\n+    // otherwise\n+    \"|\"\n \n-  std::string::const_iterator numeric_string_start = charp;\n+    // we're just an integer\n+    \"(?<INTEGER>\\\\d+)\"\n \n-  DCHECK_LT(charp, end);\n+    // or an integer with an exponent\n+    \"(?:[eE](?<SECOND_EXP_VALUE>[-+]?\\\\d+))?)\");\n \n-  // skip leading zeros\n-  charp = std::find_if_not(charp, end, [](char value) { return value == '0'; });\n+static inline bool is_zero_character(char c) { return c == '0'; }\n \n-  // all zeros and no decimal point\n-  if (charp == end) {\n-    if (out != NULLPTR) {\n-      *out = 0;\n-    }\n+Status Decimal128::FromString(const std::string& s, Decimal128* out, int32_t* precision,\n+                              int32_t* scale) {\n+  if (s.empty()) {\n+    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n+  }\n \n-    // Not sure what other libraries assign precision to for this case (this case of\n-    // a string consisting only of one or more zeros)\n+  // case of all zeros\n+  if (std::all_of(s.cbegin(), s.cend(), is_zero_character)) {\n     if (precision != NULLPTR) {\n-      *precision = static_cast<int>(charp - numeric_string_start);\n+      *precision = 0;\n     }\n \n     if (scale != NULLPTR) {\n       *scale = 0;\n     }\n \n+    *out = 0;\n     return Status::OK();\n   }\n \n-  std::string::const_iterator whole_part_start = charp;\n+  boost::smatch results;\n+  const bool matches = boost::regex_match(s, results, DECIMAL_REGEX);\n+\n+  if (!matches) {\n+    std::stringstream ss;\n+    ss << s << \" does not match\";\n+    return Status::Invalid(ss.str());\n+  }\n+\n+  const std::string sign = results[\"SIGN\"];\n \n Review comment:\n   So, `operator[](const std::string)` returns a `const_reference` to a `sub_match` object, which has a cast to `std::string` operator defined. `sub_match` has `first` and `second` attributes which are bidirectional iterators which are used to construct a string like `std::string(match.first, match.second)`. Alternatively we use `results[\"SIGN\"].str()`. The main difference is that the first uses `__builtin_memcpy` and the second uses `reserve` then ultimately `__builtin_memset` N number of times. I suspect that one call to memcpy N bytes is cheaper than N calls to memset individual elements.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T22:51:08.908+0000",
                    "updated": "2018-02-26T22:51:08.908+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377741",
                    "id": "16377741",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170763506\n \n \n\n ##########\n File path: cpp/src/arrow/util/decimal.cc\n ##########\n @@ -212,160 +253,124 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n   }\n }\n \n-Status Decimal128::FromString(const std::string& s, Decimal128* out, int* precision,\n-                              int* scale) {\n-  // Implements this regex: \"(\\\\+?|-?)((0*)(\\\\d*))(\\\\.(\\\\d+))?((E|e)(\\\\+|-)?\\\\d+)?\";\n-  if (s.empty()) {\n-    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n-  }\n+static const boost::regex DECIMAL_REGEX(\n+    // sign of the number\n+    \"(?<SIGN>[-+]?)\"\n \n-  std::string::const_iterator charp = s.cbegin();\n-  std::string::const_iterator end = s.cend();\n+    // digits around the decimal point\n+    \"(((?<LEFT_DIGITS>\\\\d+)\\\\.(?<FIRST_RIGHT_DIGITS>\\\\d*)|\\\\.(?<SECOND_RIGHT_DIGITS>\\\\d+)\"\n+    \")\"\n \n-  char first_char = *charp;\n-  bool is_negative = false;\n-  if (first_char == '+' || first_char == '-') {\n-    is_negative = first_char == '-';\n-    ++charp;\n-  }\n+    // optional exponent\n+    \"([eE](?<FIRST_EXP_VALUE>[-+]?\\\\d+))?\"\n \n-  if (charp == end) {\n-    std::stringstream ss;\n-    ss << \"Single character: '\" << first_char << \"' is not a valid decimal value\";\n-    return Status::Invalid(ss.str());\n-  }\n+    // otherwise\n+    \"|\"\n \n-  std::string::const_iterator numeric_string_start = charp;\n+    // we're just an integer\n+    \"(?<INTEGER>\\\\d+)\"\n \n-  DCHECK_LT(charp, end);\n+    // or an integer with an exponent\n+    \"(?:[eE](?<SECOND_EXP_VALUE>[-+]?\\\\d+))?)\");\n \n-  // skip leading zeros\n-  charp = std::find_if_not(charp, end, [](char value) { return value == '0'; });\n+static inline bool is_zero_character(char c) { return c == '0'; }\n \n-  // all zeros and no decimal point\n-  if (charp == end) {\n-    if (out != NULLPTR) {\n-      *out = 0;\n-    }\n+Status Decimal128::FromString(const std::string& s, Decimal128* out, int32_t* precision,\n+                              int32_t* scale) {\n+  if (s.empty()) {\n+    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n+  }\n \n-    // Not sure what other libraries assign precision to for this case (this case of\n-    // a string consisting only of one or more zeros)\n+  // case of all zeros\n+  if (std::all_of(s.cbegin(), s.cend(), is_zero_character)) {\n     if (precision != NULLPTR) {\n-      *precision = static_cast<int>(charp - numeric_string_start);\n+      *precision = 0;\n     }\n \n     if (scale != NULLPTR) {\n       *scale = 0;\n     }\n \n+    *out = 0;\n     return Status::OK();\n   }\n \n-  std::string::const_iterator whole_part_start = charp;\n+  boost::smatch results;\n+  const bool matches = boost::regex_match(s, results, DECIMAL_REGEX);\n+\n+  if (!matches) {\n+    std::stringstream ss;\n+    ss << s << \" does not match\";\n+    return Status::Invalid(ss.str());\n \n Review comment:\n   Done\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T22:53:24.007+0000",
                    "updated": "2018-02-26T22:53:24.007+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377742",
                    "id": "16377742",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170763528\n \n \n\n ##########\n File path: cpp/src/arrow/util/decimal.cc\n ##########\n @@ -212,160 +253,124 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n   }\n }\n \n-Status Decimal128::FromString(const std::string& s, Decimal128* out, int* precision,\n-                              int* scale) {\n-  // Implements this regex: \"(\\\\+?|-?)((0*)(\\\\d*))(\\\\.(\\\\d+))?((E|e)(\\\\+|-)?\\\\d+)?\";\n-  if (s.empty()) {\n-    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n-  }\n+static const boost::regex DECIMAL_REGEX(\n+    // sign of the number\n+    \"(?<SIGN>[-+]?)\"\n \n-  std::string::const_iterator charp = s.cbegin();\n-  std::string::const_iterator end = s.cend();\n+    // digits around the decimal point\n+    \"(((?<LEFT_DIGITS>\\\\d+)\\\\.(?<FIRST_RIGHT_DIGITS>\\\\d*)|\\\\.(?<SECOND_RIGHT_DIGITS>\\\\d+)\"\n+    \")\"\n \n-  char first_char = *charp;\n-  bool is_negative = false;\n-  if (first_char == '+' || first_char == '-') {\n-    is_negative = first_char == '-';\n-    ++charp;\n-  }\n+    // optional exponent\n+    \"([eE](?<FIRST_EXP_VALUE>[-+]?\\\\d+))?\"\n \n-  if (charp == end) {\n-    std::stringstream ss;\n-    ss << \"Single character: '\" << first_char << \"' is not a valid decimal value\";\n-    return Status::Invalid(ss.str());\n-  }\n+    // otherwise\n+    \"|\"\n \n-  std::string::const_iterator numeric_string_start = charp;\n+    // we're just an integer\n+    \"(?<INTEGER>\\\\d+)\"\n \n-  DCHECK_LT(charp, end);\n+    // or an integer with an exponent\n+    \"(?:[eE](?<SECOND_EXP_VALUE>[-+]?\\\\d+))?)\");\n \n-  // skip leading zeros\n-  charp = std::find_if_not(charp, end, [](char value) { return value == '0'; });\n+static inline bool is_zero_character(char c) { return c == '0'; }\n \n-  // all zeros and no decimal point\n-  if (charp == end) {\n-    if (out != NULLPTR) {\n-      *out = 0;\n-    }\n+Status Decimal128::FromString(const std::string& s, Decimal128* out, int32_t* precision,\n+                              int32_t* scale) {\n+  if (s.empty()) {\n+    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n+  }\n \n-    // Not sure what other libraries assign precision to for this case (this case of\n-    // a string consisting only of one or more zeros)\n+  // case of all zeros\n+  if (std::all_of(s.cbegin(), s.cend(), is_zero_character)) {\n     if (precision != NULLPTR) {\n-      *precision = static_cast<int>(charp - numeric_string_start);\n+      *precision = 0;\n     }\n \n     if (scale != NULLPTR) {\n       *scale = 0;\n     }\n \n+    *out = 0;\n     return Status::OK();\n   }\n \n-  std::string::const_iterator whole_part_start = charp;\n+  boost::smatch results;\n+  const bool matches = boost::regex_match(s, results, DECIMAL_REGEX);\n+\n+  if (!matches) {\n+    std::stringstream ss;\n+    ss << s << \" does not match\";\n+    return Status::Invalid(ss.str());\n+  }\n+\n+  const std::string sign = results[\"SIGN\"];\n+  const std::string integer = results[\"INTEGER\"];\n \n-  charp = std::find_if_not(charp, end, isdigit);\n+  const std::string left_digits = results[\"LEFT_DIGITS\"];\n+  const std::string first_right_digits = results[\"FIRST_RIGHT_DIGITS\"];\n \n-  std::string::const_iterator whole_part_end = charp;\n-  std::string whole_part(whole_part_start, whole_part_end);\n+  const std::string second_right_digits = results[\"SECOND_RIGHT_DIGITS\"];\n \n-  if (charp != end && *charp == '.') {\n-    ++charp;\n+  const std::string first_exp_value = results[\"FIRST_EXP_VALUE\"];\n+  const std::string second_exp_value = results[\"SECOND_EXP_VALUE\"];\n \n-    if (charp == end) {\n-      return Status::Invalid(\n-          \"Decimal point must be followed by at least one base ten digit. Reached the \"\n-          \"end of the string.\");\n-    }\n+  std::string whole_part;\n+  std::string fractional_part;\n+  std::string exponent_value;\n \n-    if (std::isdigit(*charp) == 0) {\n-      std::stringstream ss;\n-      ss << \"Decimal point must be followed by a base ten digit. Found '\" << *charp\n-         << \"'\";\n-      return Status::Invalid(ss.str());\n-    }\n+  if (!integer.empty()) {\n+    whole_part = integer;\n+  } else if (!left_digits.empty()) {\n+    DCHECK(second_right_digits.empty()) << s << \" \" << second_right_digits;\n+    whole_part = left_digits;\n+    fractional_part = first_right_digits;\n   } else {\n-    if (charp != end) {\n-      std::stringstream ss;\n-      ss << \"Expected base ten digit or decimal point but found '\" << *charp\n-         << \"' instead.\";\n-      return Status::Invalid(ss.str());\n-    }\n+    DCHECK(first_right_digits.empty()) << s << \" \" << first_right_digits;\n+    fractional_part = second_right_digits;\n   }\n \n-  std::string::const_iterator fractional_part_start = charp;\n-\n-  // The rest must be digits or an exponent\n-  if (charp != end) {\n-    charp = std::find_if_not(charp, end, isdigit);\n+  // skip leading zeros before the decimal point\n+  std::string::const_iterator without_leading_zeros =\n+      std::find_if_not(whole_part.cbegin(), whole_part.cend(), is_zero_character);\n+  whole_part = std::string(without_leading_zeros, whole_part.cend());\n \n-    // The while loop has ended before the end of the string which means we've hit a\n-    // character that isn't a base ten digit or \"E\" for exponent\n-    if (charp != end && *charp != 'E' && *charp != 'e') {\n-      std::stringstream ss;\n-      ss << \"Found non base ten digit character '\" << *charp\n-         << \"' before the end of the string\";\n-      return Status::Invalid(ss.str());\n-    }\n+  if (!first_exp_value.empty()) {\n+    exponent_value = first_exp_value;\n+  } else {\n+    exponent_value = second_exp_value;\n   }\n \n-  std::string::const_iterator fractional_part_end = charp;\n-  std::string fractional_part(fractional_part_start, fractional_part_end);\n-\n   if (precision != NULLPTR) {\n-    *precision = static_cast<int>(whole_part.size() + fractional_part.size());\n+    *precision = static_cast<int32_t>(whole_part.size() + fractional_part.size());\n   }\n \n-  if (charp != end) {\n-    // we must have an exponent, if this aborts then we have somehow not caught this and\n-    // raised a proper error\n-    DCHECK(*charp == 'E' || *charp == 'e');\n-\n-    ++charp;\n-\n-    const char value = *charp;\n-    const bool starts_with_plus_or_minus = value == '+' || value == '-';\n-\n-    // we use this to construct the adjusted exponent integer later\n-    std::string::const_iterator digit_start = charp;\n-\n-    // skip plus or minus\n-    charp += starts_with_plus_or_minus;\n-\n-    // confirm that the rest of the characters are digits\n-    charp = std::find_if_not(charp, end, isdigit);\n-\n-    if (charp != end) {\n-      // we have something other than digits here\n-      std::stringstream ss;\n-      ss << \"Found non decimal digit exponent value '\" << *charp << \"'\";\n-      return Status::Invalid(ss.str());\n-    }\n-\n-    if (scale != NULLPTR) {\n-      // compute the scale from the adjusted exponent\n-      std::string adjusted_exponent_string(digit_start, end);\n-      DCHECK(std::all_of(adjusted_exponent_string.cbegin() + starts_with_plus_or_minus,\n-                         adjusted_exponent_string.cend(), isdigit))\n-          << \"Non decimal digit character found in \" << adjusted_exponent_string;\n-      const auto adjusted_exponent =\n-          static_cast<int32_t>(std::stol(adjusted_exponent_string));\n-      const auto len = static_cast<int32_t>(whole_part.size() + fractional_part.size());\n-\n+  if (scale != NULLPTR) {\n+    if (!exponent_value.empty()) {\n+      auto adjusted_exponent = static_cast<int32_t>(std::stol(exponent_value));\n+      auto len = static_cast<int32_t>(whole_part.size() + fractional_part.size());\n       *scale = -adjusted_exponent + len - 1;\n-    }\n-  } else {\n-    if (scale != NULLPTR) {\n-      *scale = static_cast<int>(fractional_part.size());\n+    } else {\n+      *scale = static_cast<int32_t>(fractional_part.size());\n     }\n   }\n \n   if (out != NULLPTR) {\n-    // zero out in case we've passed in a previously used value\n     *out = 0;\n     StringToInteger(whole_part + fractional_part, out);\n-    if (is_negative) {\n+    if (sign == \"-\") {\n       out->Negate();\n     }\n+\n+    if (scale != NULLPTR && *scale < 0) {\n+      const int32_t abs_scale = std::abs(*scale);\n+      *out *= ScaleMultipliers[abs_scale];\n+\n+      if (precision != NULLPTR) {\n \n Review comment:\n   Done\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T22:53:30.500+0000",
                    "updated": "2018-02-26T22:53:30.500+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377745",
                    "id": "16377745",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170763754\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -76,7 +76,18 @@ class ScalarVisitor {\n         timestamp_count_(0),\n         float_count_(0),\n         binary_count_(0),\n-        unicode_count_(0) {}\n+        unicode_count_(0),\n+        decimal_count_(0),\n+        max_decimal_metadata_(std::numeric_limits<int32_t>::min(),\n+                              std::numeric_limits<int32_t>::min()),\n+        decimal_type_() {\n+    OwnedRefNoGIL decimal_module;\n+    Status status = ::arrow::py::internal::ImportModule(\"decimal\", &decimal_module);\n+    DCHECK(status.ok()) << \"Unable to import decimal module\";\n+    status = ::arrow::py::internal::ImportFromModule(decimal_module, \"Decimal\",\n+                                                     &decimal_type_);\n+    DCHECK(status.ok()) << \"Unable to import decimal.Decimal\";\n \n Review comment:\n   I kept these DCHECKS since these functions are returning `Status` but I removed the messages.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T22:54:23.833+0000",
                    "updated": "2018-02-26T22:54:23.833+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377746",
                    "id": "16377746",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170763882\n \n \n\n ##########\n File path: cpp/src/arrow/python/builtin_convert.cc\n ##########\n @@ -111,10 +122,16 @@ class ScalarVisitor {\n         ss << type->ToString();\n         return Status::Invalid(ss.str());\n       }\n+    } else if (PyObject_IsInstance(obj, decimal_type_.obj())) {\n+      // Don't infer anything if we encounter a Decimal('nan')\n+      if (!internal::PyDecimal_ISNAN(obj)) {\n+        RETURN_NOT_OK(max_decimal_metadata_.Update(obj));\n \n Review comment:\n   I'm going to change to ignore nans\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T22:54:53.311+0000",
                    "updated": "2018-02-26T22:54:53.311+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377756",
                    "id": "16377756",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170765241\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -1069,7 +1033,7 @@ Status NumPyConverter::ConvertObjectsInfer() {\n       return ConvertDateTimes();\n     } else if (PyTime_Check(obj)) {\n       return ConvertTimes();\n-    } else if (PyObject_IsInstance(const_cast<PyObject*>(obj), Decimal.obj())) {\n+    } else if (internal::PyDecimal_Check(obj)) {\n \n Review comment:\n   Part of the complication here is that we *could* do this by calling the import machinery once, but since we can't use RAII (and therefore `OwnedRef`s) we'd be leaking `PyObject*`s since we'd have to import them globally and then leave them there.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T23:00:56.542+0000",
                    "updated": "2018-02-26T23:00:56.542+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377758",
                    "id": "16377758",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170765374\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -1069,7 +1033,7 @@ Status NumPyConverter::ConvertObjectsInfer() {\n       return ConvertDateTimes();\n     } else if (PyTime_Check(obj)) {\n       return ConvertTimes();\n-    } else if (PyObject_IsInstance(const_cast<PyObject*>(obj), Decimal.obj())) {\n+    } else if (internal::PyDecimal_Check(obj)) {\n \n Review comment:\n   That would remove the cost of importing, but would cause a memory leak.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T23:01:31.903+0000",
                    "updated": "2018-02-26T23:01:31.903+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377759",
                    "id": "16377759",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170765497\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -1069,7 +1033,7 @@ Status NumPyConverter::ConvertObjectsInfer() {\n       return ConvertDateTimes();\n     } else if (PyTime_Check(obj)) {\n       return ConvertTimes();\n-    } else if (PyObject_IsInstance(const_cast<PyObject*>(obj), Decimal.obj())) {\n+    } else if (internal::PyDecimal_Check(obj)) {\n \n Review comment:\n   Alternatively, I can change this back to the way it was where the class held a reference to the `Decimal`  constructor.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T23:02:10.569+0000",
                    "updated": "2018-02-26T23:02:10.569+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377762",
                    "id": "16377762",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170766372\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -1069,7 +1033,7 @@ Status NumPyConverter::ConvertObjectsInfer() {\n       return ConvertDateTimes();\n     } else if (PyTime_Check(obj)) {\n       return ConvertTimes();\n-    } else if (PyObject_IsInstance(const_cast<PyObject*>(obj), Decimal.obj())) {\n+    } else if (internal::PyDecimal_Check(obj)) {\n \n Review comment:\n   Actually that's what I'll do, I'm doing that in `builtin_convert.cc` and these should be consistent.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T23:06:16.543+0000",
                    "updated": "2018-02-26T23:06:16.543+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377763",
                    "id": "16377763",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170766821\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -1069,7 +1033,7 @@ Status NumPyConverter::ConvertObjectsInfer() {\n       return ConvertDateTimes();\n     } else if (PyTime_Check(obj)) {\n       return ConvertTimes();\n-    } else if (PyObject_IsInstance(const_cast<PyObject*>(obj), Decimal.obj())) {\n+    } else if (internal::PyDecimal_Check(obj)) {\n \n Review comment:\n   This would also be faster if we had access to the Python C decimal object because we could just compare pointers (we'd lose the generality of `isinstance` though)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T23:08:19.089+0000",
                    "updated": "2018-02-26T23:08:19.089+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377779",
                    "id": "16377779",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170770969\n \n \n\n ##########\n File path: cpp/src/arrow/util/decimal.cc\n ##########\n @@ -212,160 +253,124 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n   }\n }\n \n-Status Decimal128::FromString(const std::string& s, Decimal128* out, int* precision,\n-                              int* scale) {\n-  // Implements this regex: \"(\\\\+?|-?)((0*)(\\\\d*))(\\\\.(\\\\d+))?((E|e)(\\\\+|-)?\\\\d+)?\";\n-  if (s.empty()) {\n-    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n-  }\n+static const boost::regex DECIMAL_REGEX(\n \n Review comment:\n   Yep, I'll make a JIRA for it.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T23:28:36.033+0000",
                    "updated": "2018-02-26T23:28:36.033+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377780",
                    "id": "16377780",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170771009\n \n \n\n ##########\n File path: cpp/src/arrow/python/python-test.cc\n ##########\n @@ -226,20 +250,114 @@ TEST_F(DecimalTest, FromPythonDecimalRescaleTruncateable) {\n \n TEST_F(DecimalTest, TestOverflowFails) {\n   Decimal128 value;\n-  int32_t precision;\n-  int32_t scale;\n   OwnedRef python_decimal(\n       this->CreatePythonDecimal(\"9999999999999999999999999999999999999.9\"));\n-  ASSERT_OK(\n-      internal::InferDecimalPrecisionAndScale(python_decimal.obj(), &precision, &scale));\n-  ASSERT_EQ(38, precision);\n-  ASSERT_EQ(1, scale);\n+  internal::DecimalMetadata metadata;\n+  ASSERT_OK(metadata.Update(python_decimal.obj()));\n+  ASSERT_EQ(38, metadata.precision());\n+  ASSERT_EQ(1, metadata.scale());\n \n   auto type = ::arrow::decimal(38, 38);\n   const auto& decimal_type = static_cast<const DecimalType&>(*type);\n   ASSERT_RAISES(Invalid, internal::DecimalFromPythonDecimal(python_decimal.obj(),\n                                                             decimal_type, &value));\n }\n \n+TEST_F(DecimalTest, TestNoneAndNaN) {\n+  OwnedRef list_ref(PyList_New(4));\n+  PyObject* list = list_ref.obj();\n+\n+  ASSERT_NE(list, nullptr);\n+\n+  PyObject* constructor = this->decimal_constructor();\n+  PyObject* decimal_value = internal::DecimalFromString(constructor, \"1.234\");\n+  ASSERT_NE(decimal_value, nullptr);\n+\n+  Py_INCREF(Py_None);\n+  PyObject* missing_value1 = Py_None;\n+  ASSERT_NE(missing_value1, nullptr);\n+\n+  PyObject* missing_value2 = PyFloat_FromDouble(NPY_NAN);\n+  ASSERT_NE(missing_value2, nullptr);\n+\n+  PyObject* missing_value3 = internal::DecimalFromString(constructor, \"nan\");\n+  ASSERT_NE(missing_value3, nullptr);\n+\n+  // This steals a reference to each object, so we don't need to decref them later,\n+  // just the list\n+  ASSERT_EQ(PyList_SetItem(list, 0, decimal_value), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 1, missing_value1), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 2, missing_value2), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 3, missing_value3), 0);\n+\n+  MemoryPool* pool = default_memory_pool();\n+  std::shared_ptr<Array> arr;\n+  ASSERT_OK(ConvertPySequence(list, pool, &arr));\n+  ASSERT_TRUE(arr->IsValid(0));\n+  ASSERT_TRUE(arr->IsNull(1));\n+  ASSERT_TRUE(arr->IsNull(2));\n+  ASSERT_TRUE(arr->IsNull(3));\n+}\n+\n+TEST_F(DecimalTest, TestMixedPrecisionAndScale) {\n+  std::vector<std::string> strings{{\"0.001\", \"1.01E5\", \"1.01E5\"}};\n+\n+  OwnedRef list_ref(PyList_New(static_cast<Py_ssize_t>(strings.size())));\n+  PyObject* list = list_ref.obj();\n+\n+  ASSERT_NE(list, nullptr);\n+\n+  // PyList_SetItem steals a reference to the item so we don't decref it later\n+  for (size_t i = 0; i < strings.size(); ++i) {\n+    PyList_SetItem(\n+        list, i, internal::DecimalFromString(this->decimal_constructor(), strings.at(i)));\n \n Review comment:\n   Done.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T23:28:52.250+0000",
                    "updated": "2018-02-26T23:28:52.250+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377781",
                    "id": "16377781",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170771042\n \n \n\n ##########\n File path: cpp/src/arrow/python/python-test.cc\n ##########\n @@ -226,20 +250,114 @@ TEST_F(DecimalTest, FromPythonDecimalRescaleTruncateable) {\n \n TEST_F(DecimalTest, TestOverflowFails) {\n   Decimal128 value;\n-  int32_t precision;\n-  int32_t scale;\n   OwnedRef python_decimal(\n       this->CreatePythonDecimal(\"9999999999999999999999999999999999999.9\"));\n-  ASSERT_OK(\n-      internal::InferDecimalPrecisionAndScale(python_decimal.obj(), &precision, &scale));\n-  ASSERT_EQ(38, precision);\n-  ASSERT_EQ(1, scale);\n+  internal::DecimalMetadata metadata;\n+  ASSERT_OK(metadata.Update(python_decimal.obj()));\n+  ASSERT_EQ(38, metadata.precision());\n+  ASSERT_EQ(1, metadata.scale());\n \n   auto type = ::arrow::decimal(38, 38);\n   const auto& decimal_type = static_cast<const DecimalType&>(*type);\n   ASSERT_RAISES(Invalid, internal::DecimalFromPythonDecimal(python_decimal.obj(),\n                                                             decimal_type, &value));\n }\n \n+TEST_F(DecimalTest, TestNoneAndNaN) {\n+  OwnedRef list_ref(PyList_New(4));\n+  PyObject* list = list_ref.obj();\n+\n+  ASSERT_NE(list, nullptr);\n+\n+  PyObject* constructor = this->decimal_constructor();\n+  PyObject* decimal_value = internal::DecimalFromString(constructor, \"1.234\");\n+  ASSERT_NE(decimal_value, nullptr);\n+\n+  Py_INCREF(Py_None);\n+  PyObject* missing_value1 = Py_None;\n+  ASSERT_NE(missing_value1, nullptr);\n+\n+  PyObject* missing_value2 = PyFloat_FromDouble(NPY_NAN);\n+  ASSERT_NE(missing_value2, nullptr);\n+\n+  PyObject* missing_value3 = internal::DecimalFromString(constructor, \"nan\");\n+  ASSERT_NE(missing_value3, nullptr);\n+\n+  // This steals a reference to each object, so we don't need to decref them later,\n+  // just the list\n+  ASSERT_EQ(PyList_SetItem(list, 0, decimal_value), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 1, missing_value1), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 2, missing_value2), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 3, missing_value3), 0);\n+\n+  MemoryPool* pool = default_memory_pool();\n+  std::shared_ptr<Array> arr;\n+  ASSERT_OK(ConvertPySequence(list, pool, &arr));\n+  ASSERT_TRUE(arr->IsValid(0));\n+  ASSERT_TRUE(arr->IsNull(1));\n+  ASSERT_TRUE(arr->IsNull(2));\n+  ASSERT_TRUE(arr->IsNull(3));\n+}\n+\n+TEST_F(DecimalTest, TestMixedPrecisionAndScale) {\n+  std::vector<std::string> strings{{\"0.001\", \"1.01E5\", \"1.01E5\"}};\n+\n+  OwnedRef list_ref(PyList_New(static_cast<Py_ssize_t>(strings.size())));\n+  PyObject* list = list_ref.obj();\n+\n+  ASSERT_NE(list, nullptr);\n+\n+  // PyList_SetItem steals a reference to the item so we don't decref it later\n+  for (size_t i = 0; i < strings.size(); ++i) {\n+    PyList_SetItem(\n \n Review comment:\n   Fixed using `ASSERT_OK`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T23:29:02.988+0000",
                    "updated": "2018-02-26T23:29:02.988+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377782",
                    "id": "16377782",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170771042\n \n \n\n ##########\n File path: cpp/src/arrow/python/python-test.cc\n ##########\n @@ -226,20 +250,114 @@ TEST_F(DecimalTest, FromPythonDecimalRescaleTruncateable) {\n \n TEST_F(DecimalTest, TestOverflowFails) {\n   Decimal128 value;\n-  int32_t precision;\n-  int32_t scale;\n   OwnedRef python_decimal(\n       this->CreatePythonDecimal(\"9999999999999999999999999999999999999.9\"));\n-  ASSERT_OK(\n-      internal::InferDecimalPrecisionAndScale(python_decimal.obj(), &precision, &scale));\n-  ASSERT_EQ(38, precision);\n-  ASSERT_EQ(1, scale);\n+  internal::DecimalMetadata metadata;\n+  ASSERT_OK(metadata.Update(python_decimal.obj()));\n+  ASSERT_EQ(38, metadata.precision());\n+  ASSERT_EQ(1, metadata.scale());\n \n   auto type = ::arrow::decimal(38, 38);\n   const auto& decimal_type = static_cast<const DecimalType&>(*type);\n   ASSERT_RAISES(Invalid, internal::DecimalFromPythonDecimal(python_decimal.obj(),\n                                                             decimal_type, &value));\n }\n \n+TEST_F(DecimalTest, TestNoneAndNaN) {\n+  OwnedRef list_ref(PyList_New(4));\n+  PyObject* list = list_ref.obj();\n+\n+  ASSERT_NE(list, nullptr);\n+\n+  PyObject* constructor = this->decimal_constructor();\n+  PyObject* decimal_value = internal::DecimalFromString(constructor, \"1.234\");\n+  ASSERT_NE(decimal_value, nullptr);\n+\n+  Py_INCREF(Py_None);\n+  PyObject* missing_value1 = Py_None;\n+  ASSERT_NE(missing_value1, nullptr);\n+\n+  PyObject* missing_value2 = PyFloat_FromDouble(NPY_NAN);\n+  ASSERT_NE(missing_value2, nullptr);\n+\n+  PyObject* missing_value3 = internal::DecimalFromString(constructor, \"nan\");\n+  ASSERT_NE(missing_value3, nullptr);\n+\n+  // This steals a reference to each object, so we don't need to decref them later,\n+  // just the list\n+  ASSERT_EQ(PyList_SetItem(list, 0, decimal_value), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 1, missing_value1), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 2, missing_value2), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 3, missing_value3), 0);\n+\n+  MemoryPool* pool = default_memory_pool();\n+  std::shared_ptr<Array> arr;\n+  ASSERT_OK(ConvertPySequence(list, pool, &arr));\n+  ASSERT_TRUE(arr->IsValid(0));\n+  ASSERT_TRUE(arr->IsNull(1));\n+  ASSERT_TRUE(arr->IsNull(2));\n+  ASSERT_TRUE(arr->IsNull(3));\n+}\n+\n+TEST_F(DecimalTest, TestMixedPrecisionAndScale) {\n+  std::vector<std::string> strings{{\"0.001\", \"1.01E5\", \"1.01E5\"}};\n+\n+  OwnedRef list_ref(PyList_New(static_cast<Py_ssize_t>(strings.size())));\n+  PyObject* list = list_ref.obj();\n+\n+  ASSERT_NE(list, nullptr);\n+\n+  // PyList_SetItem steals a reference to the item so we don't decref it later\n+  for (size_t i = 0; i < strings.size(); ++i) {\n+    PyList_SetItem(\n \n Review comment:\n   Fixed using `ASSERT_EQ`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T23:29:09.517+0000",
                    "updated": "2018-02-26T23:29:09.517+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377783",
                    "id": "16377783",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170771227\n \n \n\n ##########\n File path: cpp/src/arrow/python/python-test.cc\n ##########\n @@ -226,20 +250,114 @@ TEST_F(DecimalTest, FromPythonDecimalRescaleTruncateable) {\n \n TEST_F(DecimalTest, TestOverflowFails) {\n   Decimal128 value;\n-  int32_t precision;\n-  int32_t scale;\n   OwnedRef python_decimal(\n       this->CreatePythonDecimal(\"9999999999999999999999999999999999999.9\"));\n-  ASSERT_OK(\n-      internal::InferDecimalPrecisionAndScale(python_decimal.obj(), &precision, &scale));\n-  ASSERT_EQ(38, precision);\n-  ASSERT_EQ(1, scale);\n+  internal::DecimalMetadata metadata;\n+  ASSERT_OK(metadata.Update(python_decimal.obj()));\n+  ASSERT_EQ(38, metadata.precision());\n+  ASSERT_EQ(1, metadata.scale());\n \n   auto type = ::arrow::decimal(38, 38);\n   const auto& decimal_type = static_cast<const DecimalType&>(*type);\n   ASSERT_RAISES(Invalid, internal::DecimalFromPythonDecimal(python_decimal.obj(),\n                                                             decimal_type, &value));\n }\n \n+TEST_F(DecimalTest, TestNoneAndNaN) {\n+  OwnedRef list_ref(PyList_New(4));\n+  PyObject* list = list_ref.obj();\n+\n+  ASSERT_NE(list, nullptr);\n+\n+  PyObject* constructor = this->decimal_constructor();\n+  PyObject* decimal_value = internal::DecimalFromString(constructor, \"1.234\");\n+  ASSERT_NE(decimal_value, nullptr);\n+\n+  Py_INCREF(Py_None);\n+  PyObject* missing_value1 = Py_None;\n+  ASSERT_NE(missing_value1, nullptr);\n+\n+  PyObject* missing_value2 = PyFloat_FromDouble(NPY_NAN);\n+  ASSERT_NE(missing_value2, nullptr);\n+\n+  PyObject* missing_value3 = internal::DecimalFromString(constructor, \"nan\");\n+  ASSERT_NE(missing_value3, nullptr);\n+\n+  // This steals a reference to each object, so we don't need to decref them later,\n+  // just the list\n+  ASSERT_EQ(PyList_SetItem(list, 0, decimal_value), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 1, missing_value1), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 2, missing_value2), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 3, missing_value3), 0);\n \n Review comment:\n   Eh, this is a test so I'll use my danger budget elsewhere :)\r\n   \r\n   I fixed up the order of operands to `ASSERT_EQ` here since they were wrong.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T23:29:58.303+0000",
                    "updated": "2018-02-26T23:29:58.303+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377786",
                    "id": "16377786",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170771415\n \n \n\n ##########\n File path: cpp/src/arrow/python/helpers.cc\n ##########\n @@ -193,6 +218,63 @@ Status UInt64FromPythonInt(PyObject* obj, uint64_t* out) {\n   return Status::OK();\n }\n \n+bool PyFloat_isnan(PyObject* obj) {\n+  return PyFloat_Check(obj) && std::isnan(PyFloat_AS_DOUBLE(obj));\n+}\n+\n+bool PyDecimal_Check(PyObject* obj) {\n+  // TODO(phillipc): Is this expensive?\n+  OwnedRef Decimal;\n+  OwnedRef decimal;\n+  Status status = ImportModule(\"decimal\", &decimal);\n+  DCHECK(status.ok()) << \"Error during import of the decimal module\";\n+  status = ImportFromModule(decimal, \"Decimal\", &Decimal);\n+  DCHECK(status.ok())\n+      << \"Error during import of the Decimal object from the decimal module\";\n \n Review comment:\n   I introduced a `DCHECK_OK` macro and used it here and in a few other places.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-26T23:31:02.455+0000",
                    "updated": "2018-02-26T23:31:02.455+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377886",
                    "id": "16377886",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "kou commented on issue #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#issuecomment-368715020\n \n \n   Umm. I have never seen the error. I may not help you because I'don't have macOS.\r\n   \r\n   What are the outputs of the followings?\r\n   \r\n   ```console\r\n   % nm /Users/travis/build/apache/arrow/cpp-install/lib/libarrow.0.dylib | grep boost\r\n   % nm /usr/local/opt/boost/lib/libboost_regex-mt.dylib\r\n   % strings /Users/travis/build/apache/arrow/cpp-install/lib/libarrow.0.dylib | grep boost\r\n   % strings /usr/local/opt/boost/lib/libboost_regex-mt.dylib | grep boost\r\n   % otool -L /Users/travis/build/apache/arrow/cpp-install/lib/libarrow.0.dylib\r\n   % otool -L /usr/local/opt/boost/lib/libboost_regex-mt.dylib\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-27T01:34:46.305+0000",
                    "updated": "2018-02-27T01:34:46.305+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16377896",
                    "id": "16377896",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170794861\n \n \n\n ##########\n File path: cpp/src/arrow/python/numpy_to_arrow.cc\n ##########\n @@ -743,59 +733,38 @@ Status NumPyConverter::ConvertDates() {\n Status NumPyConverter::ConvertDecimals() {\n   PyAcquireGIL lock;\n \n-  // Import the decimal module and Decimal class\n-  OwnedRef decimal;\n-  OwnedRef Decimal;\n-  RETURN_NOT_OK(internal::ImportModule(\"decimal\", &decimal));\n-  RETURN_NOT_OK(internal::ImportFromModule(decimal, \"Decimal\", &Decimal));\n-\n+  internal::DecimalMetadata max_decimal_metadata;\n   Ndarray1DIndexer<PyObject*> objects(arr_);\n-  PyObject* object = objects[0];\n \n   if (type_ == NULLPTR) {\n-    int32_t precision;\n-    int32_t desired_scale;\n-\n-    int32_t tmp_precision;\n-    int32_t tmp_scale;\n-\n-    RETURN_NOT_OK(\n-        internal::InferDecimalPrecisionAndScale(objects[0], &precision, &desired_scale));\n-\n-    for (int64_t i = 1; i < length_; ++i) {\n-      RETURN_NOT_OK(internal::InferDecimalPrecisionAndScale(objects[i], &tmp_precision,\n-                                                            &tmp_scale));\n-      precision = std::max(precision, tmp_precision);\n-\n-      if (std::abs(desired_scale) < std::abs(tmp_scale)) {\n-        desired_scale = tmp_scale;\n-      }\n+    for (PyObject* object : objects) {\n+      RETURN_NOT_OK(max_decimal_metadata.Update(object));\n \n Review comment:\n   The `Update` method now ignores nans\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-27T01:53:33.711+0000",
                    "updated": "2018-02-27T01:53:33.711+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16378278",
                    "id": "16378278",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r170859948\n \n \n\n ##########\n File path: cpp/src/arrow/python/helpers.h\n ##########\n @@ -36,29 +36,89 @@ namespace py {\n \n class OwnedRef;\n \n-ARROW_EXPORT\n-std::shared_ptr<DataType> GetPrimitiveType(Type::type type);\n+// \\brief Get an arrow DataType instance from Arrow's Type::type enum\n+// \\param[in] type One of the values of Arrow's Type::type enum\n+// \\return A shared pointer to DataType\n+ARROW_EXPORT std::shared_ptr<DataType> GetPrimitiveType(Type::type type);\n \n namespace internal {\n \n+// \\brief Import a Python module\n+// \\param[in] module_name The name of the module\n+// \\param[out] ref The OwnedRef containing the module PyObject*\n Status ImportModule(const std::string& module_name, OwnedRef* ref);\n-Status ImportFromModule(const OwnedRef& module, const std::string& module_name,\n-                        OwnedRef* ref);\n \n+// \\brief Import an object from a Python module\n+// \\param[in] module A Python module\n+// \\param[in] name The name of the object to import\n+// \\param[out] ref The OwnedRef containing the \\c name attribute of the Python module \\c\n+// module\n+Status ImportFromModule(const OwnedRef& module, const std::string& name, OwnedRef* ref);\n+\n+// \\brief Convert a Python Decimal object to a C++ string\n+// \\param[in] python_decimal A Python decimal.Decimal instance\n+// \\param[out] The string representation of the Python Decimal instance\n+// \\return The status of the operation\n Status PythonDecimalToString(PyObject* python_decimal, std::string* out);\n \n-Status InferDecimalPrecisionAndScale(PyObject* python_decimal,\n-                                     int32_t* precision = NULLPTR,\n-                                     int32_t* scale = NULLPTR);\n-\n+// \\brief Convert a C++ std::string to a Python Decimal instance\n+// \\param[in] decimal_constructor The decimal type object\n+// \\param[in] decimal_string A decimal string\n+// \\return An instance of decimal.Decimal\n PyObject* DecimalFromString(PyObject* decimal_constructor,\n                             const std::string& decimal_string);\n+\n+// \\brief Convert a Python decimal to an Arrow Decimal128 object\n+// \\param[in] python_decimal A Python decimal.Decimal instance\n+// \\param[in] arrow_type An instance of arrow::DecimalType\n+// \\param[out] out A pointer to a Decimal128\n+// \\return The status of the operation\n Status DecimalFromPythonDecimal(PyObject* python_decimal, const DecimalType& arrow_type,\n                                 Decimal128* out);\n+\n+// \\brief Check whether obj is an integer, independent of Python versions.\n bool IsPyInteger(PyObject* obj);\n \n+// \\brief Check whether obj is nan\n+bool PyFloat_isnan(PyObject* obj);\n \n Review comment:\n   We should definitely set up Link-Time-Optimization. Then these functions might get inlined again.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-02-27T09:27:30.884+0000",
                    "updated": "2018-02-27T09:27:30.884+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16381745",
                    "id": "16381745",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r171504185\n \n \n\n ##########\n File path: ci/travis_install_osx.sh\n ##########\n @@ -0,0 +1,21 @@\n+#!/usr/bin/env bash\n+\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+brew update\n+brew bundle --file=$TRAVIS_BUILD_DIR/c_glib/Brewfile\n \n Review comment:\n   Shouldn't that be conditioned on ARROW_CI_C_GLIB_AFFECTED?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-01T09:37:54.755+0000",
                    "updated": "2018-03-01T09:37:54.755+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16382155",
                    "id": "16382155",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r171594338\n \n \n\n ##########\n File path: ci/travis_install_osx.sh\n ##########\n @@ -0,0 +1,21 @@\n+#!/usr/bin/env bash\n+\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+brew update\n+brew bundle --file=$TRAVIS_BUILD_DIR/c_glib/Brewfile\n \n Review comment:\n   Yes\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-01T15:29:30.334+0000",
                    "updated": "2018-03-01T15:29:30.334+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16382179",
                    "id": "16382179",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r171597154\n \n \n\n ##########\n File path: ci/travis_install_osx.sh\n ##########\n @@ -0,0 +1,21 @@\n+#!/usr/bin/env bash\n+\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+brew update\n+brew bundle --file=$TRAVIS_BUILD_DIR/c_glib/Brewfile\n \n Review comment:\n   @pitrou This is already conditioned on in `.travis.yml` just before this script is called. Is it really necessary to condition on it again?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-01T15:38:03.183+0000",
                    "updated": "2018-03-01T15:38:03.183+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16382338",
                    "id": "16382338",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#discussion_r171628747\n \n \n\n ##########\n File path: ci/travis_install_osx.sh\n ##########\n @@ -0,0 +1,21 @@\n+#!/usr/bin/env bash\n+\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+brew update\n+brew bundle --file=$TRAVIS_BUILD_DIR/c_glib/Brewfile\n \n Review comment:\n   Not really, though given the filename it might be better to avoid further mistakes :-)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-01T17:12:25.509+0000",
                    "updated": "2018-03-01T17:12:25.509+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16382538",
                    "id": "16382538",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "cpcloud commented on issue #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#issuecomment-369709126\n \n \n   @wesm @pitrou this is passing on travis: https://travis-ci.org/cpcloud/arrow/builds/347872453\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-01T19:48:40.890+0000",
                    "updated": "2018-03-01T19:48:40.890+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16382763",
                    "id": "16382763",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651#issuecomment-369752375\n \n \n   Sweet, here is the Appveyor build: https://ci.appveyor.com/project/cpcloud/arrow/build/1.0.587. Going to take a quick look through and then merge\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-01T22:24:31.515+0000",
                    "updated": "2018-03-01T22:24:31.515+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16382769",
                    "id": "16382769",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 1651\n[https://github.com/apache/arrow/pull/1651]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-03-01T22:27:21.954+0000",
                    "updated": "2018-03-01T22:27:21.954+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13138085/comment/16382770",
                    "id": "16382770",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1651: ARROW-2145/ARROW-2153/ARROW-2157/ARROW-2160/ARROW-2177: [Python] Decimal conversion not working for NaN values\nURL: https://github.com/apache/arrow/pull/1651\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/.travis.yml b/.travis.yml\nindex a4c74657e..b1241e793 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -174,7 +174,7 @@ matrix:\n     - $TRAVIS_BUILD_DIR/ci/travis_before_script_c_glib.sh\n     script:\n     - $TRAVIS_BUILD_DIR/ci/travis_script_c_glib.sh\n-  # [OS X] C++ & glib w/ XCode 8.3 & autotools\n+  # [OS X] C++ & glib w/ XCode 8.3 & autotools & homebrew\n   - compiler: clang\n     osx_image: xcode8.3\n     os: osx\n@@ -185,7 +185,8 @@ matrix:\n     - BUILD_SYSTEM=autotools\n     before_script:\n     - if [ $ARROW_CI_C_GLIB_AFFECTED != \"1\" ]; then exit; fi\n-    - $TRAVIS_BUILD_DIR/ci/travis_before_script_cpp.sh --only-library\n+    - $TRAVIS_BUILD_DIR/ci/travis_install_osx.sh\n+    - $TRAVIS_BUILD_DIR/ci/travis_before_script_cpp.sh --only-library --homebrew\n     - $TRAVIS_BUILD_DIR/ci/travis_before_script_c_glib.sh\n     script:\n     - $TRAVIS_BUILD_DIR/ci/travis_script_c_glib.sh\ndiff --git a/c_glib/Brewfile b/c_glib/Brewfile\nindex 9fe5c3b61..955072e1e 100644\n--- a/c_glib/Brewfile\n+++ b/c_glib/Brewfile\n@@ -16,7 +16,7 @@\n # under the License.\n \n brew \"autoconf-archive\"\n-brew \"boost\"\n+brew \"boost\", args: [\"1.65.0\"]\n brew \"ccache\"\n brew \"cmake\"\n brew \"git\"\ndiff --git a/ci/travis_before_script_c_glib.sh b/ci/travis_before_script_c_glib.sh\nindex 27d1e86fd..033fbd7c6 100755\n--- a/ci/travis_before_script_c_glib.sh\n+++ b/ci/travis_before_script_c_glib.sh\n@@ -21,9 +21,7 @@ set -ex\n \n source $TRAVIS_BUILD_DIR/ci/travis_env_common.sh\n \n-if [ $TRAVIS_OS_NAME = \"osx\" ]; then\n-  brew update && brew bundle --file=$TRAVIS_BUILD_DIR/c_glib/Brewfile\n-else  # Linux\n+if [ $TRAVIS_OS_NAME = \"linux\" ]; then\n   sudo apt-get install -y -q gtk-doc-tools autoconf-archive libgirepository1.0-dev\n fi\n \ndiff --git a/ci/travis_before_script_cpp.sh b/ci/travis_before_script_cpp.sh\nindex 17b5deb36..b9afbee78 100755\n--- a/ci/travis_before_script_cpp.sh\n+++ b/ci/travis_before_script_cpp.sh\n@@ -22,10 +22,22 @@ set -ex\n \n source $TRAVIS_BUILD_DIR/ci/travis_env_common.sh\n \n-if [ \"$1\" == \"--only-library\" ]; then\n-  only_library_mode=yes\n-else\n-  only_library_mode=no\n+only_library_mode=no\n+using_homebrew=no\n+\n+while true; do\n+    case \"$1\" in\n+\t--only-library)\n+\t    only_library_mode=yes\n+\t    shift ;;\n+\t--homebrew)\n+\t    using_homebrew=yes\n+\t    shift ;;\n+\t*) break ;;\n+    esac\n+done\n+\n+if [ \"$only_library_mode\" == \"no\" ]; then\n   source $TRAVIS_BUILD_DIR/ci/travis_install_conda.sh\n fi\n \n@@ -78,6 +90,10 @@ if [ $TRAVIS_OS_NAME == \"linux\" ]; then\n           -DBUILD_WARNING_LEVEL=$ARROW_BUILD_WARNING_LEVEL \\\n           $ARROW_CPP_DIR\n else\n+    if [ \"$using_homebrew\" = \"yes\" ]; then\n+\t# build against homebrew's boost if we're using it\n+\texport BOOST_ROOT=/usr/local/opt/boost\n+    fi\n     cmake $CMAKE_COMMON_FLAGS \\\n           $CMAKE_OSX_FLAGS \\\n           -DCMAKE_BUILD_TYPE=$ARROW_BUILD_TYPE \\\ndiff --git a/ci/travis_build_parquet_cpp.sh b/ci/travis_build_parquet_cpp.sh\nindex 7d2e3ab73..f64a85d62 100755\n--- a/ci/travis_build_parquet_cpp.sh\n+++ b/ci/travis_build_parquet_cpp.sh\n@@ -38,7 +38,7 @@ cmake \\\n     -GNinja \\\n     -DCMAKE_BUILD_TYPE=debug \\\n     -DCMAKE_INSTALL_PREFIX=$ARROW_PYTHON_PARQUET_HOME \\\n-    -DPARQUET_BOOST_USE_SHARED=off \\\n+    -DPARQUET_BOOST_USE_SHARED=on \\\n     -DPARQUET_BUILD_BENCHMARKS=off \\\n     -DPARQUET_BUILD_EXECUTABLES=off \\\n     -DPARQUET_BUILD_TESTS=off \\\ndiff --git a/ci/travis_install_linux.sh b/ci/travis_install_linux.sh\nindex acee9ebcb..74fde2774 100755\n--- a/ci/travis_install_linux.sh\n+++ b/ci/travis_install_linux.sh\n@@ -19,7 +19,7 @@\n \n sudo apt-get install -y -q \\\n     gdb ccache libboost-dev libboost-filesystem-dev \\\n-    libboost-system-dev libjemalloc-dev\n+    libboost-system-dev libboost-regex-dev libjemalloc-dev\n \n if [ \"$ARROW_TRAVIS_VALGRIND\" == \"1\" ]; then\n     sudo apt-get install -y -q valgrind\ndiff --git a/ci/travis_install_osx.sh b/ci/travis_install_osx.sh\nnew file mode 100755\nindex 000000000..b03a5f16a\n--- /dev/null\n+++ b/ci/travis_install_osx.sh\n@@ -0,0 +1,23 @@\n+#!/usr/bin/env bash\n+\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+if [ \"$ARROW_CI_C_GLIB_AFFECTED\" = \"1\" ]; then\n+    brew update\n+    brew bundle --file=$TRAVIS_BUILD_DIR/c_glib/Brewfile\n+fi\ndiff --git a/cpp/CMakeLists.txt b/cpp/CMakeLists.txt\nindex 8c0e95634..47692a831 100644\n--- a/cpp/CMakeLists.txt\n+++ b/cpp/CMakeLists.txt\n@@ -574,11 +574,13 @@ set(ARROW_LINK_LIBS\n \n set(ARROW_SHARED_PRIVATE_LINK_LIBS\n   ${BOOST_SYSTEM_LIBRARY}\n-  ${BOOST_FILESYSTEM_LIBRARY})\n+  ${BOOST_FILESYSTEM_LIBRARY}\n+  ${BOOST_REGEX_LIBRARY})\n \n set(ARROW_STATIC_PRIVATE_LINK_LIBS\n   ${BOOST_SYSTEM_LIBRARY}\n-  ${BOOST_FILESYSTEM_LIBRARY})\n+  ${BOOST_FILESYSTEM_LIBRARY}\n+  ${BOOST_REGEX_LIBRARY})\n \n if (NOT MSVC)\n   set(ARROW_LINK_LIBS\ndiff --git a/cpp/cmake_modules/ThirdpartyToolchain.cmake b/cpp/cmake_modules/ThirdpartyToolchain.cmake\nindex 944ca1d3b..4103af41b 100644\n--- a/cpp/cmake_modules/ThirdpartyToolchain.cmake\n+++ b/cpp/cmake_modules/ThirdpartyToolchain.cmake\n@@ -157,8 +157,11 @@ if (ARROW_BOOST_VENDORED)\n     \"${BOOST_LIB_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}boost_system${CMAKE_STATIC_LIBRARY_SUFFIX}\")\n   set(BOOST_STATIC_FILESYSTEM_LIBRARY\n     \"${BOOST_LIB_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}boost_filesystem${CMAKE_STATIC_LIBRARY_SUFFIX}\")\n+  set(BOOST_STATIC_REGEX_LIBRARY\n+          \"${BOOST_LIB_DIR}/${CMAKE_STATIC_LIBRARY_PREFIX}boost_regex${CMAKE_STATIC_LIBRARY_SUFFIX}\")\n   set(BOOST_SYSTEM_LIBRARY \"${BOOST_STATIC_SYSTEM_LIBRARY}\")\n   set(BOOST_FILESYSTEM_LIBRARY \"${BOOST_STATIC_FILESYSTEM_LIBRARY}\")\n+  set(BOOST_REGEX_LIBRARY \"${BOOST_STATIC_REGEX_LIBRARY}\")\n   if (ARROW_BOOST_HEADER_ONLY)\n     set(BOOST_BUILD_PRODUCTS)\n     set(BOOST_CONFIGURE_COMMAND \"\")\n@@ -166,7 +169,8 @@ if (ARROW_BOOST_VENDORED)\n   else()\n     set(BOOST_BUILD_PRODUCTS\n       ${BOOST_SYSTEM_LIBRARY}\n-      ${BOOST_FILESYSTEM_LIBRARY})\n+      ${BOOST_FILESYSTEM_LIBRARY}\n+      ${BOOST_REGEX_LIBRARY})\n     set(BOOST_CONFIGURE_COMMAND\n       \"./bootstrap.sh\"\n       \"--prefix=${BOOST_PREFIX}\"\n@@ -210,16 +214,19 @@ else()\n     if (ARROW_BOOST_HEADER_ONLY)\n       find_package(Boost REQUIRED)\n     else()\n-      find_package(Boost COMPONENTS system filesystem REQUIRED)\n+      find_package(Boost COMPONENTS system filesystem regex REQUIRED)\n       if (\"${CMAKE_BUILD_TYPE}\" STREQUAL \"DEBUG\")\n         set(BOOST_SHARED_SYSTEM_LIBRARY ${Boost_SYSTEM_LIBRARY_DEBUG})\n         set(BOOST_SHARED_FILESYSTEM_LIBRARY ${Boost_FILESYSTEM_LIBRARY_DEBUG})\n+        set(BOOST_SHARED_REGEX_LIBRARY ${Boost_REGEX_LIBRARY_DEBUG})\n       else()\n         set(BOOST_SHARED_SYSTEM_LIBRARY ${Boost_SYSTEM_LIBRARY_RELEASE})\n         set(BOOST_SHARED_FILESYSTEM_LIBRARY ${Boost_FILESYSTEM_LIBRARY_RELEASE})\n+        set(BOOST_SHARED_REGEX_LIBRARY ${Boost_REGEX_LIBRARY_RELEASE})\n       endif()\n       set(BOOST_SYSTEM_LIBRARY boost_system_shared)\n       set(BOOST_FILESYSTEM_LIBRARY boost_filesystem_shared)\n+      set(BOOST_REGEX_LIBRARY boost_regex_shared)\n     endif()\n   else()\n     # Find static boost headers and libs\n@@ -228,16 +235,19 @@ else()\n     if (ARROW_BOOST_HEADER_ONLY)\n       find_package(Boost REQUIRED)\n     else()\n-      find_package(Boost COMPONENTS system filesystem REQUIRED)\n+      find_package(Boost COMPONENTS system filesystem regex REQUIRED)\n       if (\"${CMAKE_BUILD_TYPE}\" STREQUAL \"DEBUG\")\n         set(BOOST_STATIC_SYSTEM_LIBRARY ${Boost_SYSTEM_LIBRARY_DEBUG})\n         set(BOOST_STATIC_FILESYSTEM_LIBRARY ${Boost_FILESYSTEM_LIBRARY_DEBUG})\n+        set(BOOST_STATIC_REGEX_LIBRARY ${Boost_REGEX_LIBRARY_DEBUG})\n       else()\n         set(BOOST_STATIC_SYSTEM_LIBRARY ${Boost_SYSTEM_LIBRARY_RELEASE})\n         set(BOOST_STATIC_FILESYSTEM_LIBRARY ${Boost_FILESYSTEM_LIBRARY_RELEASE})\n+        set(BOOST_STATIC_REGEX_LIBRARY ${Boost_REGEX_LIBRARY_RELEASE})\n       endif()\n       set(BOOST_SYSTEM_LIBRARY boost_system_static)\n       set(BOOST_FILESYSTEM_LIBRARY boost_filesystem_static)\n+      set(BOOST_REGEX_LIBRARY boost_regex_static)\n     endif()\n   endif()\n endif()\n@@ -254,7 +264,11 @@ if (NOT ARROW_BOOST_HEADER_ONLY)\n       STATIC_LIB \"${BOOST_STATIC_FILESYSTEM_LIBRARY}\"\n       SHARED_LIB \"${BOOST_SHARED_FILESYSTEM_LIBRARY}\")\n \n-  SET(ARROW_BOOST_LIBS boost_system boost_filesystem)\n+  ADD_THIRDPARTY_LIB(boost_regex\n+      STATIC_LIB \"${BOOST_STATIC_REGEX_LIBRARY}\"\n+      SHARED_LIB \"${BOOST_SHARED_REGEX_LIBRARY}\")\n+\n+  SET(ARROW_BOOST_LIBS boost_system boost_filesystem boost_regex)\n endif()\n \n include_directories(SYSTEM ${Boost_INCLUDE_DIR})\ndiff --git a/cpp/src/arrow/python/arrow_to_pandas.cc b/cpp/src/arrow/python/arrow_to_pandas.cc\nindex aefd4d76d..17b87bf4e 100644\n--- a/cpp/src/arrow/python/arrow_to_pandas.cc\n+++ b/cpp/src/arrow/python/arrow_to_pandas.cc\n@@ -640,11 +640,11 @@ static Status ConvertTimes(PandasOptions options, const ChunkedArray& data,\n static Status ConvertDecimals(PandasOptions options, const ChunkedArray& data,\n                               PyObject** out_values) {\n   PyAcquireGIL lock;\n-  OwnedRef decimal_ref;\n-  OwnedRef Decimal_ref;\n-  RETURN_NOT_OK(internal::ImportModule(\"decimal\", &decimal_ref));\n-  RETURN_NOT_OK(internal::ImportFromModule(decimal_ref, \"Decimal\", &Decimal_ref));\n-  PyObject* Decimal = Decimal_ref.obj();\n+  OwnedRef decimal;\n+  OwnedRef Decimal;\n+  RETURN_NOT_OK(internal::ImportModule(\"decimal\", &decimal));\n+  RETURN_NOT_OK(internal::ImportFromModule(decimal, \"Decimal\", &Decimal));\n+  PyObject* decimal_constructor = Decimal.obj();\n \n   for (int c = 0; c < data.num_chunks(); c++) {\n     const auto& arr = static_cast<const arrow::Decimal128Array&>(*data.chunk(c));\n@@ -654,7 +654,8 @@ static Status ConvertDecimals(PandasOptions options, const ChunkedArray& data,\n         Py_INCREF(Py_None);\n         *out_values++ = Py_None;\n       } else {\n-        *out_values++ = internal::DecimalFromString(Decimal, arr.FormatValue(i));\n+        *out_values++ =\n+            internal::DecimalFromString(decimal_constructor, arr.FormatValue(i));\n         RETURN_IF_PYERROR();\n       }\n     }\ndiff --git a/cpp/src/arrow/python/builtin_convert.cc b/cpp/src/arrow/python/builtin_convert.cc\nindex a286c6bd5..d2f900f6a 100644\n--- a/cpp/src/arrow/python/builtin_convert.cc\n+++ b/cpp/src/arrow/python/builtin_convert.cc\n@@ -76,7 +76,15 @@ class ScalarVisitor {\n         timestamp_count_(0),\n         float_count_(0),\n         binary_count_(0),\n-        unicode_count_(0) {}\n+        unicode_count_(0),\n+        decimal_count_(0),\n+        max_decimal_metadata_(std::numeric_limits<int32_t>::min(),\n+                              std::numeric_limits<int32_t>::min()),\n+        decimal_type_() {\n+    PyAcquireGIL lock;\n+    Status status = internal::ImportDecimalType(&decimal_type_);\n+    DCHECK_OK(status);\n+  }\n \n   Status Visit(PyObject* obj) {\n     ++total_count_;\n@@ -111,10 +119,13 @@ class ScalarVisitor {\n         ss << type->ToString();\n         return Status::Invalid(ss.str());\n       }\n+    } else if (PyObject_IsInstance(obj, decimal_type_.obj())) {\n+      RETURN_NOT_OK(max_decimal_metadata_.Update(obj));\n+      ++decimal_count_;\n     } else {\n       // TODO(wesm): accumulate error information somewhere\n       static std::string supported_types =\n-          \"bool, float, integer, date, datetime, bytes, unicode\";\n+          \"bool, float, integer, date, datetime, bytes, unicode, decimal\";\n       std::stringstream ss;\n       ss << \"Error inferring Arrow data type for collection of Python objects. \";\n       RETURN_NOT_OK(InvalidConversion(obj, supported_types, &ss));\n@@ -125,7 +136,9 @@ class ScalarVisitor {\n \n   std::shared_ptr<DataType> GetType() {\n     // TODO(wesm): handling mixed-type cases\n-    if (float_count_) {\n+    if (decimal_count_) {\n+      return decimal(max_decimal_metadata_.precision(), max_decimal_metadata_.scale());\n+    } else if (float_count_) {\n       return float64();\n     } else if (int_count_) {\n       // TODO(wesm): tighter type later\n@@ -157,8 +170,13 @@ class ScalarVisitor {\n   int64_t float_count_;\n   int64_t binary_count_;\n   int64_t unicode_count_;\n+  int64_t decimal_count_;\n+\n+  internal::DecimalMetadata max_decimal_metadata_;\n+\n   // Place to accumulate errors\n   // std::vector<Status> errors_;\n+  OwnedRefNoGIL decimal_type_;\n };\n \n static constexpr int MAX_NESTING_LEVELS = 32;\n@@ -379,17 +397,14 @@ class TypedConverter : public SeqConverter {\n   BuilderType* typed_builder_;\n };\n \n-// We use the CRTP trick here to devirtualize the AppendItem() and AppendNull()\n+// We use the CRTP trick here to devirtualize the AppendItem(), AppendNull(), and IsNull()\n // method calls.\n template <typename BuilderType, class Derived>\n class TypedConverterVisitor : public TypedConverter<BuilderType> {\n  public:\n   Status AppendSingle(PyObject* obj) override {\n-    if (obj == Py_None) {\n-      return static_cast<Derived*>(this)->AppendNull();\n-    } else {\n-      return static_cast<Derived*>(this)->AppendItem(obj);\n-    }\n+    auto self = static_cast<Derived*>(this);\n+    return self->IsNull(obj) ? self->AppendNull() : self->AppendItem(obj);\n   }\n \n   Status AppendMultiple(PyObject* obj, int64_t size) override {\n@@ -409,6 +424,7 @@ class TypedConverterVisitor : public TypedConverter<BuilderType> {\n \n   // Append a missing item (default implementation)\n   Status AppendNull() { return this->typed_builder_->AppendNull(); }\n+  bool IsNull(PyObject* obj) const { return obj == Py_None; }\n };\n \n class NullConverter : public TypedConverterVisitor<NullBuilder, NullConverter> {\n@@ -830,12 +846,16 @@ class DecimalConverter\n  public:\n   // Append a non-missing item\n   Status AppendItem(PyObject* obj) {\n-    /// TODO(phillipc): Check for nan?\n     Decimal128 value;\n     const auto& type = static_cast<const DecimalType&>(*typed_builder_->type());\n     RETURN_NOT_OK(internal::DecimalFromPythonDecimal(obj, type, &value));\n     return typed_builder_->Append(value);\n   }\n+\n+  bool IsNull(PyObject* obj) const {\n+    return obj == Py_None || obj == numpy_nan || internal::PyFloat_isnan(obj) ||\n+           (internal::PyDecimal_Check(obj) && internal::PyDecimal_ISNAN(obj));\n+  }\n };\n \n // Dynamic constructor for sequence converters\ndiff --git a/cpp/src/arrow/python/helpers.cc b/cpp/src/arrow/python/helpers.cc\nindex df1db9991..429068dd1 100644\n--- a/cpp/src/arrow/python/helpers.cc\n+++ b/cpp/src/arrow/python/helpers.cc\n@@ -15,6 +15,8 @@\n // specific language governing permissions and limitations\n // under the License.\n \n+#include <algorithm>\n+#include <limits>\n #include <sstream>\n \n #include \"arrow/python/common.h\"\n@@ -61,6 +63,7 @@ namespace internal {\n Status ImportModule(const std::string& module_name, OwnedRef* ref) {\n   PyObject* module = PyImport_ImportModule(module_name.c_str());\n   RETURN_IF_PYERROR();\n+  DCHECK_NE(module, nullptr) << \"unable to import the \" << module_name << \" module\";\n   ref->reset(module);\n   return Status::OK();\n }\n@@ -71,10 +74,18 @@ Status ImportFromModule(const OwnedRef& module, const std::string& name, OwnedRe\n \n   PyObject* attr = PyObject_GetAttrString(module.obj(), name.c_str());\n   RETURN_IF_PYERROR();\n+  DCHECK_NE(attr, nullptr) << \"unable to import the \" << name << \" object\";\n   ref->reset(attr);\n   return Status::OK();\n }\n \n+Status ImportDecimalType(OwnedRef* decimal_type) {\n+  OwnedRef decimal_module;\n+  RETURN_NOT_OK(ImportModule(\"decimal\", &decimal_module));\n+  RETURN_NOT_OK(ImportFromModule(decimal_module, \"Decimal\", decimal_type));\n+  return Status::OK();\n+}\n+\n Status PythonDecimalToString(PyObject* python_decimal, std::string* out) {\n   // Call Python's str(decimal_object)\n   OwnedRef str_obj(PyObject_Str(python_decimal));\n@@ -93,13 +104,19 @@ Status PythonDecimalToString(PyObject* python_decimal, std::string* out) {\n   return Status::OK();\n }\n \n-Status InferDecimalPrecisionAndScale(PyObject* python_decimal, int32_t* precision,\n-                                     int32_t* scale) {\n+// \\brief Infer the precision and scale of a Python decimal.Decimal instance\n+// \\param python_decimal[in] An instance of decimal.Decimal\n+// \\param precision[out] The value of the inferred precision\n+// \\param scale[out] The value of the inferred scale\n+// \\return The status of the operation\n+static Status InferDecimalPrecisionAndScale(PyObject* python_decimal, int32_t* precision,\n+                                            int32_t* scale) {\n   DCHECK_NE(python_decimal, NULLPTR);\n   DCHECK_NE(precision, NULLPTR);\n   DCHECK_NE(scale, NULLPTR);\n \n-  OwnedRef as_tuple(PyObject_CallMethod(python_decimal, \"as_tuple\", \"()\"));\n+  // TODO(phillipc): Make sure we perform PyDecimal_Check(python_decimal) as a DCHECK\n+  OwnedRef as_tuple(PyObject_CallMethod(python_decimal, \"as_tuple\", \"\"));\n   RETURN_IF_PYERROR();\n   DCHECK(PyTuple_Check(as_tuple.obj()));\n \n@@ -117,8 +134,23 @@ Status InferDecimalPrecisionAndScale(PyObject* python_decimal, int32_t* precisio\n   const auto exponent = static_cast<int32_t>(PyLong_AsLong(py_exponent.obj()));\n   RETURN_IF_PYERROR();\n \n-  *precision = num_digits;\n-  *scale = -exponent;\n+  const int32_t abs_exponent = std::abs(exponent);\n+\n+  int32_t num_additional_zeros;\n+\n+  if (num_digits <= abs_exponent) {\n+    DCHECK_NE(exponent, 0) << \"exponent should never be zero here\";\n+\n+    // we have leading/trailing zeros, leading if exponent is negative\n+    num_additional_zeros = exponent < 0 ? abs_exponent - num_digits : exponent;\n+    *scale = static_cast<int32_t>(exponent < 0) * -exponent;\n+  } else {\n+    // we can use the number of digits as the precision\n+    num_additional_zeros = 0;\n+    *scale = -exponent;\n+  }\n+\n+  *precision = num_digits + num_additional_zeros;\n   return Status::OK();\n }\n \n@@ -193,6 +225,62 @@ Status UInt64FromPythonInt(PyObject* obj, uint64_t* out) {\n   return Status::OK();\n }\n \n+bool PyFloat_isnan(PyObject* obj) {\n+  return PyFloat_Check(obj) && std::isnan(PyFloat_AS_DOUBLE(obj));\n+}\n+\n+bool PyDecimal_Check(PyObject* obj) {\n+  // TODO(phillipc): Is this expensive?\n+  OwnedRef Decimal;\n+  Status status = ImportDecimalType(&Decimal);\n+  DCHECK_OK(status);\n+  const int32_t result = PyObject_IsInstance(obj, Decimal.obj());\n+  DCHECK_NE(result, -1) << \" error during PyObject_IsInstance check\";\n+  return result == 1;\n+}\n+\n+bool PyDecimal_ISNAN(PyObject* obj) {\n+  DCHECK(PyDecimal_Check(obj)) << \"obj is not an instance of decimal.Decimal\";\n+  OwnedRef is_nan(PyObject_CallMethod(obj, \"is_nan\", \"\"));\n+  return PyObject_IsTrue(is_nan.obj()) == 1;\n+}\n+\n+DecimalMetadata::DecimalMetadata()\n+    : DecimalMetadata(std::numeric_limits<int32_t>::min(),\n+                      std::numeric_limits<int32_t>::min()) {}\n+\n+DecimalMetadata::DecimalMetadata(int32_t precision, int32_t scale)\n+    : precision_(precision), scale_(scale) {}\n+\n+Status DecimalMetadata::Update(int32_t suggested_precision, int32_t suggested_scale) {\n+  const int32_t current_precision = precision_;\n+  precision_ = std::max(current_precision, suggested_precision);\n+\n+  const int32_t current_scale = scale_;\n+  scale_ = std::max(current_scale, suggested_scale);\n+\n+  // if our suggested scale is zero and we don't yet have enough precision then we need to\n+  // add whatever the current scale is to the precision\n+  if (suggested_scale == 0 && suggested_precision > current_precision) {\n+    precision_ += scale_;\n+  }\n+\n+  return Status::OK();\n+}\n+\n+Status DecimalMetadata::Update(PyObject* object) {\n+  DCHECK(PyDecimal_Check(object)) << \"Object is not a Python Decimal\";\n+\n+  if (ARROW_PREDICT_FALSE(PyDecimal_ISNAN(object))) {\n+    return Status::OK();\n+  }\n+\n+  int32_t precision;\n+  int32_t scale;\n+  RETURN_NOT_OK(InferDecimalPrecisionAndScale(object, &precision, &scale));\n+  return Update(precision, scale);\n+}\n+\n }  // namespace internal\n }  // namespace py\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/python/helpers.h b/cpp/src/arrow/python/helpers.h\nindex c0171aa2f..6be0e49b1 100644\n--- a/cpp/src/arrow/python/helpers.h\n+++ b/cpp/src/arrow/python/helpers.h\n@@ -36,29 +36,92 @@ namespace py {\n \n class OwnedRef;\n \n-ARROW_EXPORT\n-std::shared_ptr<DataType> GetPrimitiveType(Type::type type);\n+// \\brief Get an arrow DataType instance from Arrow's Type::type enum\n+// \\param[in] type One of the values of Arrow's Type::type enum\n+// \\return A shared pointer to DataType\n+ARROW_EXPORT std::shared_ptr<DataType> GetPrimitiveType(Type::type type);\n \n namespace internal {\n \n+// \\brief Import a Python module\n+// \\param[in] module_name The name of the module\n+// \\param[out] ref The OwnedRef containing the module PyObject*\n Status ImportModule(const std::string& module_name, OwnedRef* ref);\n-Status ImportFromModule(const OwnedRef& module, const std::string& module_name,\n-                        OwnedRef* ref);\n \n-Status PythonDecimalToString(PyObject* python_decimal, std::string* out);\n+// \\brief Import an object from a Python module\n+// \\param[in] module A Python module\n+// \\param[in] name The name of the object to import\n+// \\param[out] ref The OwnedRef containing the \\c name attribute of the Python module \\c\n+// module\n+Status ImportFromModule(const OwnedRef& module, const std::string& name, OwnedRef* ref);\n+\n+// \\brief Import\n+Status ImportDecimalType(OwnedRef* decimal_type);\n \n-Status InferDecimalPrecisionAndScale(PyObject* python_decimal,\n-                                     int32_t* precision = NULLPTR,\n-                                     int32_t* scale = NULLPTR);\n+// \\brief Convert a Python Decimal object to a C++ string\n+// \\param[in] python_decimal A Python decimal.Decimal instance\n+// \\param[out] The string representation of the Python Decimal instance\n+// \\return The status of the operation\n+Status PythonDecimalToString(PyObject* python_decimal, std::string* out);\n \n+// \\brief Convert a C++ std::string to a Python Decimal instance\n+// \\param[in] decimal_constructor The decimal type object\n+// \\param[in] decimal_string A decimal string\n+// \\return An instance of decimal.Decimal\n PyObject* DecimalFromString(PyObject* decimal_constructor,\n                             const std::string& decimal_string);\n+\n+// \\brief Convert a Python decimal to an Arrow Decimal128 object\n+// \\param[in] python_decimal A Python decimal.Decimal instance\n+// \\param[in] arrow_type An instance of arrow::DecimalType\n+// \\param[out] out A pointer to a Decimal128\n+// \\return The status of the operation\n Status DecimalFromPythonDecimal(PyObject* python_decimal, const DecimalType& arrow_type,\n                                 Decimal128* out);\n+\n+// \\brief Check whether obj is an integer, independent of Python versions.\n bool IsPyInteger(PyObject* obj);\n \n+// \\brief Check whether obj is nan\n+bool PyFloat_isnan(PyObject* obj);\n+\n+// \\brief Check whether obj is an instance of Decimal\n+bool PyDecimal_Check(PyObject* obj);\n+\n+// \\brief Check whether obj is nan. This function will abort the program if the argument\n+// is not a Decimal instance\n+bool PyDecimal_ISNAN(PyObject* obj);\n+\n+// \\brief Convert a Python integer into an unsigned 64-bit integer\n+// \\param[in] obj A Python integer\n+// \\param[out] out A pointer to a C uint64_t to hold the result of the conversion\n+// \\return The status of the operation\n Status UInt64FromPythonInt(PyObject* obj, uint64_t* out);\n \n+// \\brief Helper class to track and update the precision and scale of a decimal\n+class DecimalMetadata {\n+ public:\n+  DecimalMetadata();\n+  DecimalMetadata(int32_t precision, int32_t scale);\n+\n+  // \\brief Adjust the precision and scale of a decimal type given a new precision and a\n+  // new scale \\param[in] suggested_precision A candidate precision \\param[in]\n+  // suggested_scale A candidate scale \\return The status of the operation\n+  Status Update(int32_t suggested_precision, int32_t suggested_scale);\n+\n+  // \\brief A convenient interface for updating the precision and scale based on a Python\n+  // Decimal object \\param object A Python Decimal object \\return The status of the\n+  // operation\n+  Status Update(PyObject* object);\n+\n+  int32_t precision() const { return precision_; }\n+  int32_t scale() const { return scale_; }\n+\n+ private:\n+  int32_t precision_;\n+  int32_t scale_;\n+};\n+\n }  // namespace internal\n }  // namespace py\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/python/numpy-internal.h b/cpp/src/arrow/python/numpy-internal.h\nindex 6c9c871a1..8d4308065 100644\n--- a/cpp/src/arrow/python/numpy-internal.h\n+++ b/cpp/src/arrow/python/numpy-internal.h\n@@ -54,6 +54,9 @@ class Ndarray1DIndexer {\n \n   T* data() const { return data_; }\n \n+  T* begin() const { return data(); }\n+  T* end() const { return begin() + size() * stride_; }\n+\n   bool is_strided() const { return stride_ == 1; }\n \n   T& operator[](size_type index) { return data_[index * stride_]; }\ndiff --git a/cpp/src/arrow/python/numpy_to_arrow.cc b/cpp/src/arrow/python/numpy_to_arrow.cc\nindex 23418ad92..04a71c1f6 100644\n--- a/cpp/src/arrow/python/numpy_to_arrow.cc\n+++ b/cpp/src/arrow/python/numpy_to_arrow.cc\n@@ -67,17 +67,9 @@ constexpr int64_t kBinaryMemoryLimit = std::numeric_limits<int32_t>::max();\n \n namespace {\n \n-inline bool PyFloat_isnan(PyObject* obj) {\n-  if (PyFloat_Check(obj)) {\n-    double val = PyFloat_AS_DOUBLE(obj);\n-    return val != val;\n-  } else {\n-    return false;\n-  }\n-}\n-\n inline bool PandasObjectIsNull(PyObject* obj) {\n-  return obj == Py_None || obj == numpy_nan || PyFloat_isnan(obj);\n+  return obj == Py_None || obj == numpy_nan || internal::PyFloat_isnan(obj) ||\n+         (internal::PyDecimal_Check(obj) && internal::PyDecimal_ISNAN(obj));\n }\n \n inline bool PyObject_is_string(PyObject* obj) {\n@@ -88,10 +80,8 @@ inline bool PyObject_is_string(PyObject* obj) {\n #endif\n }\n \n-inline bool PyObject_is_float(PyObject* obj) { return PyFloat_Check(obj); }\n-\n inline bool PyObject_is_integer(PyObject* obj) {\n-  return (!PyBool_Check(obj)) && PyArray_IsIntegerScalar(obj);\n+  return !PyBool_Check(obj) && PyArray_IsIntegerScalar(obj);\n }\n \n template <int TYPE>\n@@ -310,13 +300,18 @@ class NumPyConverter {\n         arr_(reinterpret_cast<PyArrayObject*>(ao)),\n         dtype_(PyArray_DESCR(arr_)),\n         mask_(nullptr),\n-        use_pandas_null_sentinels_(use_pandas_null_sentinels) {\n+        use_pandas_null_sentinels_(use_pandas_null_sentinels),\n+        decimal_type_() {\n     if (mo != nullptr && mo != Py_None) {\n       mask_ = reinterpret_cast<PyArrayObject*>(mo);\n     }\n     length_ = static_cast<int64_t>(PyArray_SIZE(arr_));\n     itemsize_ = static_cast<int>(PyArray_DESCR(arr_)->elsize);\n     stride_ = static_cast<int64_t>(PyArray_STRIDES(arr_)[0]);\n+\n+    PyAcquireGIL lock;\n+    Status status = internal::ImportDecimalType(&decimal_type_);\n+    DCHECK_OK(status);\n   }\n \n   bool is_strided() const { return itemsize_ != stride_; }\n@@ -491,6 +486,8 @@ class NumPyConverter {\n \n   bool use_pandas_null_sentinels_;\n \n+  OwnedRefNoGIL decimal_type_;\n+\n   // Used in visitor pattern\n   std::vector<std::shared_ptr<Array>> out_arrays_;\n \n@@ -743,58 +740,42 @@ Status NumPyConverter::ConvertDates() {\n Status NumPyConverter::ConvertDecimals() {\n   PyAcquireGIL lock;\n \n-  // Import the decimal module and Decimal class\n-  OwnedRef decimal;\n-  OwnedRef Decimal;\n-  RETURN_NOT_OK(internal::ImportModule(\"decimal\", &decimal));\n-  RETURN_NOT_OK(internal::ImportFromModule(decimal, \"Decimal\", &Decimal));\n-\n+  internal::DecimalMetadata max_decimal_metadata;\n   Ndarray1DIndexer<PyObject*> objects(arr_);\n-  PyObject* object = objects[0];\n \n   if (type_ == NULLPTR) {\n-    int32_t precision;\n-    int32_t desired_scale;\n-\n-    int32_t tmp_precision;\n-    int32_t tmp_scale;\n-\n-    RETURN_NOT_OK(\n-        internal::InferDecimalPrecisionAndScale(objects[0], &precision, &desired_scale));\n-\n-    for (int64_t i = 1; i < length_; ++i) {\n-      RETURN_NOT_OK(internal::InferDecimalPrecisionAndScale(objects[i], &tmp_precision,\n-                                                            &tmp_scale));\n-      precision = std::max(precision, tmp_precision);\n-\n-      if (std::abs(desired_scale) < std::abs(tmp_scale)) {\n-        desired_scale = tmp_scale;\n-      }\n+    for (PyObject* object : objects) {\n+      RETURN_NOT_OK(max_decimal_metadata.Update(object));\n     }\n \n-    type_ = ::arrow::decimal(precision, desired_scale);\n+    type_ =\n+        ::arrow::decimal(max_decimal_metadata.precision(), max_decimal_metadata.scale());\n   }\n \n   Decimal128Builder builder(type_, pool_);\n   RETURN_NOT_OK(builder.Resize(length_));\n \n   const auto& decimal_type = static_cast<const DecimalType&>(*type_);\n-  PyObject* Decimal_type_object = Decimal.obj();\n \n-  for (int64_t i = 0; i < length_; ++i) {\n-    object = objects[i];\n+  for (PyObject* object : objects) {\n+    const int is_decimal = PyObject_IsInstance(object, decimal_type_.obj());\n \n-    if (PyObject_IsInstance(object, Decimal_type_object)) {\n-      Decimal128 value;\n-      RETURN_NOT_OK(internal::DecimalFromPythonDecimal(object, decimal_type, &value));\n-      RETURN_NOT_OK(builder.Append(value));\n-    } else if (PandasObjectIsNull(object)) {\n-      RETURN_NOT_OK(builder.AppendNull());\n-    } else {\n+    if (ARROW_PREDICT_FALSE(is_decimal == 0)) {\n       std::stringstream ss;\n       ss << \"Error converting from Python objects to Decimal: \";\n       RETURN_NOT_OK(InvalidConversion(object, \"decimal.Decimal\", &ss));\n       return Status::Invalid(ss.str());\n+    } else if (ARROW_PREDICT_FALSE(is_decimal == -1)) {\n+      DCHECK_NE(PyErr_Occurred(), nullptr);\n+      RETURN_IF_PYERROR();\n+    }\n+\n+    if (PandasObjectIsNull(object)) {\n+      RETURN_NOT_OK(builder.AppendNull());\n+    } else {\n+      Decimal128 value;\n+      RETURN_NOT_OK(internal::DecimalFromPythonDecimal(object, decimal_type, &value));\n+      RETURN_NOT_OK(builder.Append(value));\n     }\n   }\n   return PushBuilderResult(&builder);\n@@ -1045,18 +1026,13 @@ Status NumPyConverter::ConvertObjectsInfer() {\n   objects.Init(arr_);\n   PyDateTime_IMPORT;\n \n-  OwnedRef decimal;\n-  OwnedRef Decimal;\n-  RETURN_NOT_OK(internal::ImportModule(\"decimal\", &decimal));\n-  RETURN_NOT_OK(internal::ImportFromModule(decimal, \"Decimal\", &Decimal));\n-\n   for (int64_t i = 0; i < length_; ++i) {\n     PyObject* obj = objects[i];\n     if (PandasObjectIsNull(obj)) {\n       continue;\n     } else if (PyObject_is_string(obj)) {\n       return ConvertObjectStrings();\n-    } else if (PyObject_is_float(obj)) {\n+    } else if (PyFloat_Check(obj)) {\n       return ConvertObjectFloats();\n     } else if (PyBool_Check(obj)) {\n       return ConvertBooleans();\n@@ -1069,7 +1045,7 @@ Status NumPyConverter::ConvertObjectsInfer() {\n       return ConvertDateTimes();\n     } else if (PyTime_Check(obj)) {\n       return ConvertTimes();\n-    } else if (PyObject_IsInstance(const_cast<PyObject*>(obj), Decimal.obj())) {\n+    } else if (PyObject_IsInstance(obj, decimal_type_.obj()) == 1) {\n       return ConvertDecimals();\n     } else if (PyList_Check(obj)) {\n       std::shared_ptr<DataType> inferred_type;\ndiff --git a/cpp/src/arrow/python/python-test.cc b/cpp/src/arrow/python/python-test.cc\nindex b76caaece..16ac1e332 100644\n--- a/cpp/src/arrow/python/python-test.cc\n+++ b/cpp/src/arrow/python/python-test.cc\n@@ -78,15 +78,14 @@ TEST(OwnedRefNoGIL, TestMoves) {\n \n class DecimalTest : public ::testing::Test {\n  public:\n-  DecimalTest() : lock_(), decimal_module_(), decimal_constructor_() {\n-    auto s = internal::ImportModule(\"decimal\", &decimal_module_);\n-    DCHECK(s.ok()) << s.message();\n-    DCHECK_NE(decimal_module_.obj(), NULLPTR);\n+  DecimalTest() : lock_(), decimal_constructor_() {\n+    OwnedRef decimal_module;\n \n-    s = internal::ImportFromModule(decimal_module_, \"Decimal\", &decimal_constructor_);\n-    DCHECK(s.ok()) << s.message();\n+    Status status = internal::ImportModule(\"decimal\", &decimal_module);\n+    DCHECK_OK(status);\n \n-    DCHECK_NE(decimal_constructor_.obj(), NULLPTR);\n+    status = internal::ImportFromModule(decimal_module, \"Decimal\", &decimal_constructor_);\n+    DCHECK_OK(status);\n   }\n \n   OwnedRef CreatePythonDecimal(const std::string& string_value) {\n@@ -94,16 +93,17 @@ class DecimalTest : public ::testing::Test {\n     return ref;\n   }\n \n+  PyObject* decimal_constructor() const { return decimal_constructor_.obj(); }\n+\n  private:\n   PyAcquireGIL lock_;\n-  OwnedRef decimal_module_;\n   OwnedRef decimal_constructor_;\n };\n \n TEST_F(DecimalTest, TestPythonDecimalToString) {\n   std::string decimal_string(\"-39402950693754869342983\");\n \n-  OwnedRef python_object = this->CreatePythonDecimal(decimal_string);\n+  OwnedRef python_object(this->CreatePythonDecimal(decimal_string));\n   ASSERT_NE(python_object.obj(), nullptr);\n \n   std::string string_result;\n@@ -114,35 +114,57 @@ TEST_F(DecimalTest, TestInferPrecisionAndScale) {\n   std::string decimal_string(\"-394029506937548693.42983\");\n   OwnedRef python_decimal(this->CreatePythonDecimal(decimal_string));\n \n-  int32_t precision;\n-  int32_t scale;\n-\n-  ASSERT_OK(\n-      internal::InferDecimalPrecisionAndScale(python_decimal.obj(), &precision, &scale));\n+  internal::DecimalMetadata metadata;\n+  ASSERT_OK(metadata.Update(python_decimal.obj()));\n \n   const auto expected_precision =\n       static_cast<int32_t>(decimal_string.size() - 2);  // 1 for -, 1 for .\n   const int32_t expected_scale = 5;\n \n-  ASSERT_EQ(expected_precision, precision);\n-  ASSERT_EQ(expected_scale, scale);\n+  ASSERT_EQ(expected_precision, metadata.precision());\n+  ASSERT_EQ(expected_scale, metadata.scale());\n }\n \n TEST_F(DecimalTest, TestInferPrecisionAndNegativeScale) {\n   std::string decimal_string(\"-3.94042983E+10\");\n   OwnedRef python_decimal(this->CreatePythonDecimal(decimal_string));\n \n-  int32_t precision;\n-  int32_t scale;\n-\n-  ASSERT_OK(\n-      internal::InferDecimalPrecisionAndScale(python_decimal.obj(), &precision, &scale));\n+  internal::DecimalMetadata metadata;\n+  ASSERT_OK(metadata.Update(python_decimal.obj()));\n \n   const auto expected_precision = 9;\n   const int32_t expected_scale = -2;\n \n-  ASSERT_EQ(expected_precision, precision);\n-  ASSERT_EQ(expected_scale, scale);\n+  ASSERT_EQ(expected_precision, metadata.precision());\n+  ASSERT_EQ(expected_scale, metadata.scale());\n+}\n+\n+TEST_F(DecimalTest, TestInferAllLeadingZeros) {\n+  std::string decimal_string(\"0.001\");\n+  OwnedRef python_decimal(this->CreatePythonDecimal(decimal_string));\n+\n+  internal::DecimalMetadata metadata;\n+  ASSERT_OK(metadata.Update(python_decimal.obj()));\n+  ASSERT_EQ(3, metadata.precision());\n+  ASSERT_EQ(3, metadata.scale());\n+}\n+\n+TEST_F(DecimalTest, TestInferAllLeadingZerosExponentialNotationPositive) {\n+  std::string decimal_string(\"0.01E5\");\n+  OwnedRef python_decimal(this->CreatePythonDecimal(decimal_string));\n+  internal::DecimalMetadata metadata;\n+  ASSERT_OK(metadata.Update(python_decimal.obj()));\n+  ASSERT_EQ(4, metadata.precision());\n+  ASSERT_EQ(0, metadata.scale());\n+}\n+\n+TEST_F(DecimalTest, TestInferAllLeadingZerosExponentialNotationNegative) {\n+  std::string decimal_string(\"0.01E3\");\n+  OwnedRef python_decimal(this->CreatePythonDecimal(decimal_string));\n+  internal::DecimalMetadata metadata;\n+  ASSERT_OK(metadata.Update(python_decimal.obj()));\n+  ASSERT_EQ(2, metadata.precision());\n+  ASSERT_EQ(0, metadata.scale());\n }\n \n TEST(PandasConversionTest, TestObjectBlockWriteFails) {\n@@ -226,14 +248,12 @@ TEST_F(DecimalTest, FromPythonDecimalRescaleTruncateable) {\n \n TEST_F(DecimalTest, TestOverflowFails) {\n   Decimal128 value;\n-  int32_t precision;\n-  int32_t scale;\n   OwnedRef python_decimal(\n       this->CreatePythonDecimal(\"9999999999999999999999999999999999999.9\"));\n-  ASSERT_OK(\n-      internal::InferDecimalPrecisionAndScale(python_decimal.obj(), &precision, &scale));\n-  ASSERT_EQ(38, precision);\n-  ASSERT_EQ(1, scale);\n+  internal::DecimalMetadata metadata;\n+  ASSERT_OK(metadata.Update(python_decimal.obj()));\n+  ASSERT_EQ(38, metadata.precision());\n+  ASSERT_EQ(1, metadata.scale());\n \n   auto type = ::arrow::decimal(38, 38);\n   const auto& decimal_type = static_cast<const DecimalType&>(*type);\n@@ -241,5 +261,111 @@ TEST_F(DecimalTest, TestOverflowFails) {\n                                                             decimal_type, &value));\n }\n \n+TEST_F(DecimalTest, TestNoneAndNaN) {\n+  OwnedRef list_ref(PyList_New(4));\n+  PyObject* list = list_ref.obj();\n+\n+  ASSERT_NE(list, nullptr);\n+\n+  PyObject* constructor = this->decimal_constructor();\n+  PyObject* decimal_value = internal::DecimalFromString(constructor, \"1.234\");\n+  ASSERT_NE(decimal_value, nullptr);\n+\n+  Py_INCREF(Py_None);\n+  PyObject* missing_value1 = Py_None;\n+  ASSERT_NE(missing_value1, nullptr);\n+\n+  PyObject* missing_value2 = PyFloat_FromDouble(NPY_NAN);\n+  ASSERT_NE(missing_value2, nullptr);\n+\n+  PyObject* missing_value3 = internal::DecimalFromString(constructor, \"nan\");\n+  ASSERT_NE(missing_value3, nullptr);\n+\n+  // This steals a reference to each object, so we don't need to decref them later,\n+  // just the list\n+  ASSERT_EQ(0, PyList_SetItem(list, 0, decimal_value));\n+  ASSERT_EQ(0, PyList_SetItem(list, 1, missing_value1));\n+  ASSERT_EQ(0, PyList_SetItem(list, 2, missing_value2));\n+  ASSERT_EQ(0, PyList_SetItem(list, 3, missing_value3));\n+\n+  MemoryPool* pool = default_memory_pool();\n+  std::shared_ptr<Array> arr;\n+  ASSERT_OK(ConvertPySequence(list, pool, &arr));\n+  ASSERT_TRUE(arr->IsValid(0));\n+  ASSERT_TRUE(arr->IsNull(1));\n+  ASSERT_TRUE(arr->IsNull(2));\n+  ASSERT_TRUE(arr->IsNull(3));\n+}\n+\n+TEST_F(DecimalTest, TestMixedPrecisionAndScale) {\n+  std::vector<std::string> strings{{\"0.001\", \"1.01E5\", \"1.01E5\"}};\n+\n+  OwnedRef list_ref(PyList_New(static_cast<Py_ssize_t>(strings.size())));\n+  PyObject* list = list_ref.obj();\n+\n+  ASSERT_NE(list, nullptr);\n+\n+  // PyList_SetItem steals a reference to the item so we don't decref it later\n+  PyObject* decimal_constructor = this->decimal_constructor();\n+  for (Py_ssize_t i = 0; i < static_cast<Py_ssize_t>(strings.size()); ++i) {\n+    const int result = PyList_SetItem(\n+        list, i, internal::DecimalFromString(decimal_constructor, strings.at(i)));\n+    ASSERT_EQ(0, result);\n+  }\n+\n+  MemoryPool* pool = default_memory_pool();\n+  std::shared_ptr<Array> arr;\n+  ASSERT_OK(ConvertPySequence(list, pool, &arr));\n+  const auto& type = static_cast<const DecimalType&>(*arr->type());\n+\n+  int32_t expected_precision = 9;\n+  int32_t expected_scale = 3;\n+  ASSERT_EQ(expected_precision, type.precision());\n+  ASSERT_EQ(expected_scale, type.scale());\n+}\n+\n+TEST_F(DecimalTest, TestMixedPrecisionAndScaleSequenceConvert) {\n+  PyAcquireGIL lock;\n+  MemoryPool* pool = default_memory_pool();\n+  std::shared_ptr<Array> arr;\n+\n+  PyObject* value1 = this->CreatePythonDecimal(\"0.01\").detach();\n+  ASSERT_NE(value1, nullptr);\n+\n+  PyObject* value2 = this->CreatePythonDecimal(\"0.001\").detach();\n+  ASSERT_NE(value2, nullptr);\n+\n+  OwnedRef list_ref(PyList_New(2));\n+  PyObject* list = list_ref.obj();\n+\n+  // This steals a reference to each object, so we don't need to decref them later\n+  // just the list\n+  ASSERT_EQ(PyList_SetItem(list, 0, value1), 0);\n+  ASSERT_EQ(PyList_SetItem(list, 1, value2), 0);\n+\n+  ASSERT_OK(ConvertPySequence(list, pool, &arr));\n+\n+  const auto& type = static_cast<const Decimal128Type&>(*arr->type());\n+  ASSERT_EQ(3, type.precision());\n+  ASSERT_EQ(3, type.scale());\n+}\n+\n+TEST_F(DecimalTest, SimpleInference) {\n+  OwnedRef value(this->CreatePythonDecimal(\"0.01\"));\n+  ASSERT_NE(value.obj(), nullptr);\n+  internal::DecimalMetadata metadata;\n+  ASSERT_OK(metadata.Update(value.obj()));\n+  ASSERT_EQ(2, metadata.precision());\n+  ASSERT_EQ(2, metadata.scale());\n+}\n+\n+TEST_F(DecimalTest, UpdateWithNaN) {\n+  internal::DecimalMetadata metadata;\n+  OwnedRef nan_value(this->CreatePythonDecimal(\"nan\"));\n+  ASSERT_OK(metadata.Update(nan_value.obj()));\n+  ASSERT_EQ(std::numeric_limits<int32_t>::min(), metadata.precision());\n+  ASSERT_EQ(std::numeric_limits<int32_t>::min(), metadata.scale());\n+}\n+\n }  // namespace py\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/decimal-test.cc b/cpp/src/arrow/util/decimal-test.cc\nindex e4406747d..6db46d485 100644\n--- a/cpp/src/arrow/util/decimal-test.cc\n+++ b/cpp/src/arrow/util/decimal-test.cc\n@@ -14,7 +14,6 @@\n // KIND, either express or implied.  See the License for the\n // specific language governing permissions and limitations\n // under the License.\n-//\n \n #include <cstdint>\n #include <string>\n@@ -37,7 +36,7 @@ class DecimalTestFixture : public ::testing::Test {\n \n TEST_F(DecimalTestFixture, TestToString) {\n   Decimal128 decimal(this->integer_value_);\n-  int scale = 5;\n+  int32_t scale = 5;\n   std::string result = decimal.ToString(scale);\n   ASSERT_EQ(result, this->string_value_);\n }\n@@ -45,7 +44,7 @@ TEST_F(DecimalTestFixture, TestToString) {\n TEST_F(DecimalTestFixture, TestFromString) {\n   Decimal128 expected(this->integer_value_);\n   Decimal128 result;\n-  int precision, scale;\n+  int32_t precision, scale;\n   ASSERT_OK(Decimal128::FromString(this->string_value_, &result, &precision, &scale));\n   ASSERT_EQ(result, expected);\n   ASSERT_EQ(precision, 8);\n@@ -55,8 +54,8 @@ TEST_F(DecimalTestFixture, TestFromString) {\n TEST_F(DecimalTestFixture, TestStringStartingWithPlus) {\n   std::string plus_value(\"+234.234\");\n   Decimal128 out;\n-  int scale;\n-  int precision;\n+  int32_t scale;\n+  int32_t precision;\n   ASSERT_OK(Decimal128::FromString(plus_value, &out, &precision, &scale));\n   ASSERT_EQ(234234, out);\n   ASSERT_EQ(6, precision);\n@@ -67,8 +66,8 @@ TEST_F(DecimalTestFixture, TestStringStartingWithPlus128) {\n   std::string plus_value(\"+2342394230592.232349023094\");\n   Decimal128 expected_value(\"2342394230592232349023094\");\n   Decimal128 out;\n-  int scale;\n-  int precision;\n+  int32_t scale;\n+  int32_t precision;\n   ASSERT_OK(Decimal128::FromString(plus_value, &out, &precision, &scale));\n   ASSERT_EQ(expected_value, out);\n   ASSERT_EQ(25, precision);\n@@ -90,9 +89,7 @@ TEST(DecimalTest, TestFromDecimalString128) {\n   Decimal128 result;\n   ASSERT_OK(Decimal128::FromString(string_value, &result));\n   Decimal128 expected(static_cast<int64_t>(-230492239423435324));\n-  expected *= 100;\n-  expected -= 12;\n-  ASSERT_EQ(result, expected);\n+  ASSERT_EQ(result, expected * 100 - 12);\n \n   // Sanity check that our number is actually using more than 64 bits\n   ASSERT_NE(result.high_bits(), 0);\n@@ -194,36 +191,36 @@ TEST(DecimalTest, TestInvalidInputWithLeadingZeros) {\n TEST(DecimalZerosTest, LeadingZerosNoDecimalPoint) {\n   std::string string_value(\"0000000\");\n   Decimal128 d;\n-  int precision;\n-  int scale;\n+  int32_t precision;\n+  int32_t scale;\n   ASSERT_OK(Decimal128::FromString(string_value, &d, &precision, &scale));\n-  ASSERT_EQ(precision, 7);\n-  ASSERT_EQ(scale, 0);\n-  ASSERT_EQ(d, 0);\n+  ASSERT_EQ(0, precision);\n+  ASSERT_EQ(0, scale);\n+  ASSERT_EQ(0, d);\n }\n \n TEST(DecimalZerosTest, LeadingZerosDecimalPoint) {\n   std::string string_value(\"000.0000\");\n   Decimal128 d;\n-  int precision;\n-  int scale;\n+  int32_t precision;\n+  int32_t scale;\n   ASSERT_OK(Decimal128::FromString(string_value, &d, &precision, &scale));\n   // We explicitly do not support this for now, otherwise this would be ASSERT_EQ\n-  ASSERT_NE(precision, 7);\n+  ASSERT_EQ(4, precision);\n \n-  ASSERT_EQ(scale, 4);\n-  ASSERT_EQ(d, 0);\n+  ASSERT_EQ(4, scale);\n+  ASSERT_EQ(0, d);\n }\n \n TEST(DecimalZerosTest, NoLeadingZerosDecimalPoint) {\n   std::string string_value(\".00000\");\n   Decimal128 d;\n-  int precision;\n-  int scale;\n+  int32_t precision;\n+  int32_t scale;\n   ASSERT_OK(Decimal128::FromString(string_value, &d, &precision, &scale));\n-  ASSERT_EQ(precision, 5);\n-  ASSERT_EQ(scale, 5);\n-  ASSERT_EQ(d, 0);\n+  ASSERT_EQ(5, precision);\n+  ASSERT_EQ(5, scale);\n+  ASSERT_EQ(0, d);\n }\n \n template <typename T>\n@@ -335,16 +332,16 @@ INSTANTIATE_TEST_CASE_P(Decimal128ParsingTest, Decimal128ParsingTest,\n                                           std::make_tuple(\"0.00123\", 123ULL, 5),\n                                           std::make_tuple(\"1.23E-8\", 123ULL, 10),\n                                           std::make_tuple(\"-1.23E-8\", -123LL, 10),\n-                                          std::make_tuple(\"1.23E+3\", 123ULL, -1),\n-                                          std::make_tuple(\"-1.23E+3\", -123LL, -1),\n-                                          std::make_tuple(\"1.23E+5\", 123ULL, -3),\n-                                          std::make_tuple(\"1.2345E+7\", 12345ULL, -3),\n+                                          std::make_tuple(\"1.23E+3\", 1230ULL, 0),\n+                                          std::make_tuple(\"-1.23E+3\", -1230LL, 0),\n+                                          std::make_tuple(\"1.23E+5\", 123000ULL, 0),\n+                                          std::make_tuple(\"1.2345E+7\", 12345000ULL, 0),\n                                           std::make_tuple(\"1.23e-8\", 123ULL, 10),\n                                           std::make_tuple(\"-1.23e-8\", -123LL, 10),\n-                                          std::make_tuple(\"1.23e+3\", 123ULL, -1),\n-                                          std::make_tuple(\"-1.23e+3\", -123LL, -1),\n-                                          std::make_tuple(\"1.23e+5\", 123ULL, -3),\n-                                          std::make_tuple(\"1.2345e+7\", 12345ULL, -3)));\n+                                          std::make_tuple(\"1.23e+3\", 1230ULL, 0),\n+                                          std::make_tuple(\"-1.23e+3\", -1230LL, 0),\n+                                          std::make_tuple(\"1.23e+5\", 123000ULL, 0),\n+                                          std::make_tuple(\"1.2345e+7\", 12345000ULL, 0)));\n \n class Decimal128ParsingTestInvalid : public ::testing::TestWithParam<std::string> {};\n \n@@ -375,4 +372,14 @@ TEST(Decimal128Test, TestSmallNumberFormat) {\n   ASSERT_EQ(expected, result);\n }\n \n+TEST(Decimal128Test, TestNoDecimalPointExponential) {\n+  Decimal128 value;\n+  int32_t precision;\n+  int32_t scale;\n+  ASSERT_OK(Decimal128::FromString(\"1E1\", &value, &precision, &scale));\n+  ASSERT_EQ(10, value.low_bits());\n+  ASSERT_EQ(2, precision);\n+  ASSERT_EQ(0, scale);\n+}\n+\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/util/decimal.cc b/cpp/src/arrow/util/decimal.cc\nindex a3c8cda76..48380a9c9 100644\n--- a/cpp/src/arrow/util/decimal.cc\n+++ b/cpp/src/arrow/util/decimal.cc\n@@ -23,12 +23,55 @@\n #include <limits>\n #include <sstream>\n \n+#include <boost/regex.hpp>\n+\n #include \"arrow/util/bit-util.h\"\n #include \"arrow/util/decimal.h\"\n #include \"arrow/util/logging.h\"\n \n namespace arrow {\n \n+static const Decimal128 ScaleMultipliers[] = {\n+    Decimal128(0LL),\n+    Decimal128(10LL),\n+    Decimal128(100LL),\n+    Decimal128(1000LL),\n+    Decimal128(10000LL),\n+    Decimal128(100000LL),\n+    Decimal128(1000000LL),\n+    Decimal128(10000000LL),\n+    Decimal128(100000000LL),\n+    Decimal128(1000000000LL),\n+    Decimal128(10000000000LL),\n+    Decimal128(100000000000LL),\n+    Decimal128(1000000000000LL),\n+    Decimal128(10000000000000LL),\n+    Decimal128(100000000000000LL),\n+    Decimal128(1000000000000000LL),\n+    Decimal128(10000000000000000LL),\n+    Decimal128(100000000000000000LL),\n+    Decimal128(1000000000000000000LL),\n+    Decimal128(0LL, 10000000000000000000ULL),\n+    Decimal128(5LL, 7766279631452241920ULL),\n+    Decimal128(54LL, 3875820019684212736ULL),\n+    Decimal128(542LL, 1864712049423024128ULL),\n+    Decimal128(5421LL, 200376420520689664ULL),\n+    Decimal128(54210LL, 2003764205206896640ULL),\n+    Decimal128(542101LL, 1590897978359414784ULL),\n+    Decimal128(5421010LL, 15908979783594147840ULL),\n+    Decimal128(54210108LL, 11515845246265065472ULL),\n+    Decimal128(542101086LL, 4477988020393345024ULL),\n+    Decimal128(5421010862LL, 7886392056514347008ULL),\n+    Decimal128(54210108624LL, 5076944270305263616ULL),\n+    Decimal128(542101086242LL, 13875954555633532928ULL),\n+    Decimal128(5421010862427LL, 9632337040368467968ULL),\n+    Decimal128(54210108624275LL, 4089650035136921600ULL),\n+    Decimal128(542101086242752LL, 4003012203950112768ULL),\n+    Decimal128(5421010862427522LL, 3136633892082024448ULL),\n+    Decimal128(54210108624275221LL, 12919594847110692864ULL),\n+    Decimal128(542101086242752217LL, 68739955140067328ULL),\n+    Decimal128(5421010862427522170LL, 687399551400673280ULL)};\n+\n static constexpr uint64_t kIntMask = 0xFFFFFFFF;\n static constexpr auto kCarryBit = static_cast<uint64_t>(1) << static_cast<uint64_t>(32);\n \n@@ -49,7 +92,7 @@ std::array<uint8_t, 16> Decimal128::ToBytes() const {\n }\n \n void Decimal128::ToBytes(uint8_t* out) const {\n-  DCHECK_NE(out, NULLPTR);\n+  DCHECK_NE(out, nullptr);\n   reinterpret_cast<uint64_t*>(out)[0] = BitUtil::ToLittleEndian(low_bits_);\n   reinterpret_cast<int64_t*>(out)[1] = BitUtil::ToLittleEndian(high_bits_);\n }\n@@ -187,12 +230,10 @@ static constexpr int64_t kPowersOfTen[kInt64DecimalDigits + 1] = {1LL,\n                                                                   100000000000000000LL,\n                                                                   1000000000000000000LL};\n \n-static inline bool isdigit(char value) { return std::isdigit(value) != 0; }\n-\n static void StringToInteger(const std::string& str, Decimal128* out) {\n   using std::size_t;\n \n-  DCHECK_NE(out, NULLPTR) << \"Decimal128 output variable cannot be NULLPTR\";\n+  DCHECK_NE(out, nullptr) << \"Decimal128 output variable cannot be nullptr\";\n   DCHECK_EQ(*out, 0)\n       << \"When converting a string to Decimal128 the initial output must be 0\";\n \n@@ -212,160 +253,124 @@ static void StringToInteger(const std::string& str, Decimal128* out) {\n   }\n }\n \n-Status Decimal128::FromString(const std::string& s, Decimal128* out, int* precision,\n-                              int* scale) {\n-  // Implements this regex: \"(\\\\+?|-?)((0*)(\\\\d*))(\\\\.(\\\\d+))?((E|e)(\\\\+|-)?\\\\d+)?\";\n-  if (s.empty()) {\n-    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n-  }\n+static const boost::regex DECIMAL_REGEX(\n+    // sign of the number\n+    \"(?<SIGN>[-+]?)\"\n \n-  std::string::const_iterator charp = s.cbegin();\n-  std::string::const_iterator end = s.cend();\n+    // digits around the decimal point\n+    \"(((?<LEFT_DIGITS>\\\\d+)\\\\.(?<FIRST_RIGHT_DIGITS>\\\\d*)|\\\\.(?<SECOND_RIGHT_DIGITS>\\\\d+)\"\n+    \")\"\n \n-  char first_char = *charp;\n-  bool is_negative = false;\n-  if (first_char == '+' || first_char == '-') {\n-    is_negative = first_char == '-';\n-    ++charp;\n-  }\n+    // optional exponent\n+    \"([eE](?<FIRST_EXP_VALUE>[-+]?\\\\d+))?\"\n \n-  if (charp == end) {\n-    std::stringstream ss;\n-    ss << \"Single character: '\" << first_char << \"' is not a valid decimal value\";\n-    return Status::Invalid(ss.str());\n-  }\n+    // otherwise\n+    \"|\"\n \n-  std::string::const_iterator numeric_string_start = charp;\n+    // we're just an integer\n+    \"(?<INTEGER>\\\\d+)\"\n \n-  DCHECK_LT(charp, end);\n+    // or an integer with an exponent\n+    \"(?:[eE](?<SECOND_EXP_VALUE>[-+]?\\\\d+))?)\");\n \n-  // skip leading zeros\n-  charp = std::find_if_not(charp, end, [](char value) { return value == '0'; });\n+static inline bool is_zero_character(char c) { return c == '0'; }\n \n-  // all zeros and no decimal point\n-  if (charp == end) {\n-    if (out != NULLPTR) {\n-      *out = 0;\n-    }\n+Status Decimal128::FromString(const std::string& s, Decimal128* out, int32_t* precision,\n+                              int32_t* scale) {\n+  if (s.empty()) {\n+    return Status::Invalid(\"Empty string cannot be converted to decimal\");\n+  }\n \n-    // Not sure what other libraries assign precision to for this case (this case of\n-    // a string consisting only of one or more zeros)\n-    if (precision != NULLPTR) {\n-      *precision = static_cast<int>(charp - numeric_string_start);\n+  // case of all zeros\n+  if (std::all_of(s.cbegin(), s.cend(), is_zero_character)) {\n+    if (precision != nullptr) {\n+      *precision = 0;\n     }\n \n-    if (scale != NULLPTR) {\n+    if (scale != nullptr) {\n       *scale = 0;\n     }\n \n+    *out = 0;\n     return Status::OK();\n   }\n \n-  std::string::const_iterator whole_part_start = charp;\n+  boost::smatch results;\n+  const bool matches = boost::regex_match(s, results, DECIMAL_REGEX);\n \n-  charp = std::find_if_not(charp, end, isdigit);\n+  if (!matches) {\n+    std::stringstream ss;\n+    ss << \"The string \" << s << \" is not a valid decimal number\";\n+    return Status::Invalid(ss.str());\n+  }\n \n-  std::string::const_iterator whole_part_end = charp;\n-  std::string whole_part(whole_part_start, whole_part_end);\n+  const std::string sign = results[\"SIGN\"];\n+  const std::string integer = results[\"INTEGER\"];\n \n-  if (charp != end && *charp == '.') {\n-    ++charp;\n+  const std::string left_digits = results[\"LEFT_DIGITS\"];\n+  const std::string first_right_digits = results[\"FIRST_RIGHT_DIGITS\"];\n \n-    if (charp == end) {\n-      return Status::Invalid(\n-          \"Decimal point must be followed by at least one base ten digit. Reached the \"\n-          \"end of the string.\");\n-    }\n+  const std::string second_right_digits = results[\"SECOND_RIGHT_DIGITS\"];\n \n-    if (std::isdigit(*charp) == 0) {\n-      std::stringstream ss;\n-      ss << \"Decimal point must be followed by a base ten digit. Found '\" << *charp\n-         << \"'\";\n-      return Status::Invalid(ss.str());\n-    }\n-  } else {\n-    if (charp != end) {\n-      std::stringstream ss;\n-      ss << \"Expected base ten digit or decimal point but found '\" << *charp\n-         << \"' instead.\";\n-      return Status::Invalid(ss.str());\n-    }\n-  }\n+  const std::string first_exp_value = results[\"FIRST_EXP_VALUE\"];\n+  const std::string second_exp_value = results[\"SECOND_EXP_VALUE\"];\n \n-  std::string::const_iterator fractional_part_start = charp;\n+  std::string whole_part;\n+  std::string fractional_part;\n+  std::string exponent_value;\n \n-  // The rest must be digits or an exponent\n-  if (charp != end) {\n-    charp = std::find_if_not(charp, end, isdigit);\n-\n-    // The while loop has ended before the end of the string which means we've hit a\n-    // character that isn't a base ten digit or \"E\" for exponent\n-    if (charp != end && *charp != 'E' && *charp != 'e') {\n-      std::stringstream ss;\n-      ss << \"Found non base ten digit character '\" << *charp\n-         << \"' before the end of the string\";\n-      return Status::Invalid(ss.str());\n-    }\n+  if (!integer.empty()) {\n+    whole_part = integer;\n+  } else if (!left_digits.empty()) {\n+    DCHECK(second_right_digits.empty()) << s << \" \" << second_right_digits;\n+    whole_part = left_digits;\n+    fractional_part = first_right_digits;\n+  } else {\n+    DCHECK(first_right_digits.empty()) << s << \" \" << first_right_digits;\n+    fractional_part = second_right_digits;\n   }\n \n-  std::string::const_iterator fractional_part_end = charp;\n-  std::string fractional_part(fractional_part_start, fractional_part_end);\n+  // skip leading zeros before the decimal point\n+  std::string::const_iterator without_leading_zeros =\n+      std::find_if_not(whole_part.cbegin(), whole_part.cend(), is_zero_character);\n+  whole_part = std::string(without_leading_zeros, whole_part.cend());\n \n-  if (precision != NULLPTR) {\n-    *precision = static_cast<int>(whole_part.size() + fractional_part.size());\n+  if (!first_exp_value.empty()) {\n+    exponent_value = first_exp_value;\n+  } else {\n+    exponent_value = second_exp_value;\n   }\n \n-  if (charp != end) {\n-    // we must have an exponent, if this aborts then we have somehow not caught this and\n-    // raised a proper error\n-    DCHECK(*charp == 'E' || *charp == 'e');\n-\n-    ++charp;\n-\n-    const char value = *charp;\n-    const bool starts_with_plus_or_minus = value == '+' || value == '-';\n-\n-    // we use this to construct the adjusted exponent integer later\n-    std::string::const_iterator digit_start = charp;\n-\n-    // skip plus or minus\n-    charp += starts_with_plus_or_minus;\n-\n-    // confirm that the rest of the characters are digits\n-    charp = std::find_if_not(charp, end, isdigit);\n-\n-    if (charp != end) {\n-      // we have something other than digits here\n-      std::stringstream ss;\n-      ss << \"Found non decimal digit exponent value '\" << *charp << \"'\";\n-      return Status::Invalid(ss.str());\n-    }\n-\n-    if (scale != NULLPTR) {\n-      // compute the scale from the adjusted exponent\n-      std::string adjusted_exponent_string(digit_start, end);\n-      DCHECK(std::all_of(adjusted_exponent_string.cbegin() + starts_with_plus_or_minus,\n-                         adjusted_exponent_string.cend(), isdigit))\n-          << \"Non decimal digit character found in \" << adjusted_exponent_string;\n-      const auto adjusted_exponent =\n-          static_cast<int32_t>(std::stol(adjusted_exponent_string));\n-      const auto len = static_cast<int32_t>(whole_part.size() + fractional_part.size());\n+  if (precision != nullptr) {\n+    *precision = static_cast<int32_t>(whole_part.size() + fractional_part.size());\n+  }\n \n+  if (scale != nullptr) {\n+    if (!exponent_value.empty()) {\n+      auto adjusted_exponent = static_cast<int32_t>(std::stol(exponent_value));\n+      auto len = static_cast<int32_t>(whole_part.size() + fractional_part.size());\n       *scale = -adjusted_exponent + len - 1;\n-    }\n-  } else {\n-    if (scale != NULLPTR) {\n-      *scale = static_cast<int>(fractional_part.size());\n+    } else {\n+      *scale = static_cast<int32_t>(fractional_part.size());\n     }\n   }\n \n-  if (out != NULLPTR) {\n-    // zero out in case we've passed in a previously used value\n+  if (out != nullptr) {\n     *out = 0;\n     StringToInteger(whole_part + fractional_part, out);\n-    if (is_negative) {\n+    if (sign == \"-\") {\n       out->Negate();\n     }\n+\n+    if (scale != nullptr && *scale < 0) {\n+      const int32_t abs_scale = std::abs(*scale);\n+      *out *= ScaleMultipliers[abs_scale];\n+\n+      if (precision != nullptr) {\n+        *precision += abs_scale;\n+      }\n+      *scale = 0;\n+    }\n   }\n \n   return Status::OK();\n@@ -813,47 +818,6 @@ Decimal128 operator%(const Decimal128& left, const Decimal128& right) {\n   return remainder;\n }\n \n-static const Decimal128 ScaleMultipliers[] = {\n-    Decimal128(1),\n-    Decimal128(10),\n-    Decimal128(100),\n-    Decimal128(1000),\n-    Decimal128(10000),\n-    Decimal128(100000),\n-    Decimal128(1000000),\n-    Decimal128(10000000),\n-    Decimal128(100000000),\n-    Decimal128(1000000000),\n-    Decimal128(10000000000),\n-    Decimal128(100000000000),\n-    Decimal128(1000000000000),\n-    Decimal128(10000000000000),\n-    Decimal128(100000000000000),\n-    Decimal128(1000000000000000),\n-    Decimal128(10000000000000000),\n-    Decimal128(100000000000000000),\n-    Decimal128(1000000000000000000),\n-    Decimal128(\"10000000000000000000\"),\n-    Decimal128(\"100000000000000000000\"),\n-    Decimal128(\"1000000000000000000000\"),\n-    Decimal128(\"10000000000000000000000\"),\n-    Decimal128(\"100000000000000000000000\"),\n-    Decimal128(\"1000000000000000000000000\"),\n-    Decimal128(\"10000000000000000000000000\"),\n-    Decimal128(\"100000000000000000000000000\"),\n-    Decimal128(\"1000000000000000000000000000\"),\n-    Decimal128(\"10000000000000000000000000000\"),\n-    Decimal128(\"100000000000000000000000000000\"),\n-    Decimal128(\"1000000000000000000000000000000\"),\n-    Decimal128(\"10000000000000000000000000000000\"),\n-    Decimal128(\"100000000000000000000000000000000\"),\n-    Decimal128(\"1000000000000000000000000000000000\"),\n-    Decimal128(\"10000000000000000000000000000000000\"),\n-    Decimal128(\"100000000000000000000000000000000000\"),\n-    Decimal128(\"1000000000000000000000000000000000000\"),\n-    Decimal128(\"10000000000000000000000000000000000000\"),\n-    Decimal128(\"100000000000000000000000000000000000000\")};\n-\n static bool RescaleWouldCauseDataLoss(const Decimal128& value, int32_t delta_scale,\n                                       int32_t abs_delta_scale, Decimal128* result) {\n   Decimal128 multiplier(ScaleMultipliers[abs_delta_scale]);\n@@ -872,7 +836,7 @@ static bool RescaleWouldCauseDataLoss(const Decimal128& value, int32_t delta_sca\n \n Status Decimal128::Rescale(int32_t original_scale, int32_t new_scale,\n                            Decimal128* out) const {\n-  DCHECK_NE(out, NULLPTR) << \"out is nullptr\";\n+  DCHECK_NE(out, nullptr) << \"out is nullptr\";\n   DCHECK_NE(original_scale, new_scale) << \"original_scale != new_scale\";\n \n   const int32_t delta_scale = new_scale - original_scale;\ndiff --git a/cpp/src/arrow/util/decimal.h b/cpp/src/arrow/util/decimal.h\nindex 1594090a0..79a99ba6a 100644\n--- a/cpp/src/arrow/util/decimal.h\n+++ b/cpp/src/arrow/util/decimal.h\n@@ -124,7 +124,7 @@ class ARROW_EXPORT Decimal128 {\n   /// \\brief Convert a decimal string to an Decimal128 value, optionally including\n   /// precision and scale if they're passed in and not null.\n   static Status FromString(const std::string& s, Decimal128* out,\n-                           int* precision = NULLPTR, int* scale = NULLPTR);\n+                           int32_t* precision = NULLPTR, int32_t* scale = NULLPTR);\n \n   /// \\brief Convert Decimal128 from one scale to another\n   Status Rescale(int32_t original_scale, int32_t new_scale, Decimal128* out) const;\ndiff --git a/cpp/src/arrow/util/logging.h b/cpp/src/arrow/util/logging.h\nindex 4ca4d2252..c823f06bd 100644\n--- a/cpp/src/arrow/util/logging.h\n+++ b/cpp/src/arrow/util/logging.h\n@@ -30,7 +30,7 @@ namespace arrow {\n //\n // Add more as needed.\n \n-// Log levels. LOG ignores them, so their values are abitrary.\n+// Log levels. LOG ignores them, so their values are arbitrary.\n \n #define ARROW_DEBUG (-1)\n #define ARROW_INFO 0\n@@ -53,6 +53,9 @@ namespace arrow {\n #define DCHECK(condition)      \\\n   ARROW_IGNORE_EXPR(condition) \\\n   while (false) ::arrow::internal::NullLog()\n+#define DCHECK_OK(status)   \\\n+  ARROW_IGNORE_EXPR(status) \\\n+  while (false) ::arrow::internal::NullLog()\n #define DCHECK_EQ(val1, val2) \\\n   ARROW_IGNORE_EXPR(val1)     \\\n   while (false) ::arrow::internal::NullLog()\n@@ -76,6 +79,7 @@ namespace arrow {\n #define ARROW_DFATAL ARROW_FATAL\n \n #define DCHECK(condition) ARROW_CHECK(condition)\n+#define DCHECK_OK(status) (ARROW_CHECK((status).ok()) << (status).message())\n #define DCHECK_EQ(val1, val2) ARROW_CHECK((val1) == (val2))\n #define DCHECK_NE(val1, val2) ARROW_CHECK((val1) != (val2))\n #define DCHECK_LE(val1, val2) ARROW_CHECK((val1) <= (val2))\ndiff --git a/python/pyarrow/tests/test_convert_builtin.py b/python/pyarrow/tests/test_convert_builtin.py\nindex 8423ff00b..19b59a49b 100644\n--- a/python/pyarrow/tests/test_convert_builtin.py\n+++ b/python/pyarrow/tests/test_convert_builtin.py\n@@ -639,3 +639,13 @@ def test_structarray_from_arrays_coerce():\n         pa.StructArray.from_arrays(arrays)\n \n     assert result.equals(expected)\n+\n+\n+def test_decimal_array_with_none_and_nan():\n+    values = [decimal.Decimal('1.234'), None, np.nan, decimal.Decimal('nan')]\n+    array = pa.array(values)\n+    assert array.type == pa.decimal128(4, 3)\n+    assert array.to_pylist() == values[:2] + [None, None]\n+\n+    array = pa.array(values, type=pa.decimal128(10, 4))\n+    assert array.to_pylist() == [decimal.Decimal('1.2340'), None, None, None]\ndiff --git a/python/pyarrow/tests/test_convert_pandas.py b/python/pyarrow/tests/test_convert_pandas.py\nindex 986aeffca..813fbdf40 100644\n--- a/python/pyarrow/tests/test_convert_pandas.py\n+++ b/python/pyarrow/tests/test_convert_pandas.py\n@@ -1161,6 +1161,20 @@ def test_decimal_fails_with_truncation(self):\n         with pytest.raises(pa.ArrowException):\n             pa.array(data2, type=type2)\n \n+    def test_decimal_with_different_precisions(self):\n+        data = [\n+            decimal.Decimal('0.01'),\n+            decimal.Decimal('0.001'),\n+        ]\n+        series = pd.Series(data)\n+        array = pa.array(series)\n+        assert array.to_pylist() == data\n+        assert array.type == pa.decimal128(3, 3)\n+\n+        array = pa.array(data, type=pa.decimal128(12, 5))\n+        expected = [decimal.Decimal('0.01000'), decimal.Decimal('0.00100')]\n+        assert array.to_pylist() == expected\n+\n \n class TestListTypes(object):\n     \"\"\"\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-01T22:27:25.481+0000",
                    "updated": "2018-03-01T22:27:25.481+0000"
                }
            ],
            "maxResults": 112,
            "total": 112,
            "startAt": 0
        },
        "customfield_12311820": "0|i3q3yf:",
        "customfield_12314139": null
    }
}