{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13326510",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326510",
    "key": "ARROW-9944",
    "fields": {
        "parent": {
            "id": "13325987",
            "key": "ARROW-9912",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13325987",
            "fields": {
                "summary": "[Rust][DataFusion] Add basic timestamp support to datafusion",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12598476",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12598476",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13326849",
                    "key": "ARROW-9961",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326849",
                    "fields": {
                        "summary": "[Rust][DataFusion] to_timestamp function parses timestamp without timezone offset as UTC rather than local",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                            "id": "7",
                            "description": "The sub-task of the issue",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                            "name": "Sub-task",
                            "subtask": true,
                            "avatarId": 21146
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
            "name": "alamb",
            "key": "alamb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
            },
            "displayName": "Andrew Lamb",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
            "name": "alamb",
            "key": "alamb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
            },
            "displayName": "Andrew Lamb",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
            "name": "alamb",
            "key": "alamb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
            },
            "displayName": "Andrew Lamb",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9944/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 11,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326510/worklog/480452",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb opened a new pull request #8142:\nURL: https://github.com/apache/arrow/pull/8142\n\n\n   This PR adds:\r\n   1. An implementation of the 1 argument form of the `TO_TIMESTAMP` function that takes a single argument (string) and converts it into a nanosecond precision timestamp, as described in the proposal (doc)[https://docs.google.com/document/d/18O9YPRyJ3u7-58J02NtNVYb6TDWBzi3mIQC58VhwxUk/edit#heading=h.2nfzn4ggyl34]\r\n   2. An explicit dependence on the `chrono` library. Note that this does not add any *actual* new dependencies for datafusion because depends on `arrow` which already depends on chrono [source link](https://github.com/apache/arrow/blob/master/rust/arrow/Cargo.toml#L49).\r\n   \r\n   fyi @jorgecarleitao @andygrove @emkornfield @jhorstmann \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-08T21:28:05.085+0000",
                    "updated": "2020-09-08T21:28:05.085+0000",
                    "started": "2020-09-08T21:28:05.085+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "480452",
                    "issueId": "13326510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326510/worklog/480453",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8142:\nURL: https://github.com/apache/arrow/pull/8142#issuecomment-689147235\n\n\n   https://issues.apache.org/jira/browse/ARROW-9944\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-08T21:32:09.991+0000",
                    "updated": "2020-09-08T21:32:09.991+0000",
                    "started": "2020-09-08T21:32:09.991+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "480453",
                    "issueId": "13326510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326510/worklog/480546",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #8142:\nURL: https://github.com/apache/arrow/pull/8142#discussion_r485275485\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/datetime_expressions.rs\n##########\n@@ -0,0 +1,225 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! DateTime expressions\n+\n+use crate::error::{ExecutionError, Result};\n+use arrow::array::{Array, ArrayRef, StringArray, TimestampNanosecondArray};\n+use chrono::prelude::*;\n+\n+#[inline]\n+fn string_to_timestamp_nanos(s: &str) -> Result<i64> {\n+    // Fast path:  RFC3339 timestamp (with a T)\n+    // Example: 2020-09-08T13:42:29.190855Z\n+    if let Ok(ts) = DateTime::parse_from_rfc3339(s) {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // Implement quasi-RFC3339 support by trying to parse the\n+    // timestamp with various other format specifiers to to support\n+    // separating the date and time with a space ' ' rather than 'T' to be\n+    // (more) compatible with Apache Spark SQL\n+\n+    // timezone offset, using ' ' as a separator\n+    // Example: 2020-09-08 13:42:29.190855-05:00\n+    if let Ok(ts) = DateTime::parse_from_str(s, \"%Y-%m-%d %H:%M:%S%.f%:z\") {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // with an explict Z, using ' ' as a separator\n+    // Example: 2020-09-08 13:42:29Z\n+    if let Ok(ts) = Utc.datetime_from_str(s, \"%Y-%m-%d %H:%M:%S%.fZ\") {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // Support timestamps without an explicit timezone offset, again\n+    // to be compatible with what Apache Spark SQL does.\n+\n+    // without a timezone specifier as a local time, using T as a separator\n+    // Example: 2020-09-08T13:42:29.190855\n+    if let Ok(ts) = NaiveDateTime::parse_from_str(s, \"%Y-%m-%dT%H:%M:%S.%f\") {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // without a timezone specifier as a local time, using ' ' as a separator\n+    // Example: 2020-09-08 13:42:29.190855\n+    if let Ok(ts) = NaiveDateTime::parse_from_str(s, \"%Y-%m-%d %H:%M:%S.%f\") {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // Note we don't pass along the error message from the underlying\n+    // chrono parsing because we tried several different format\n+    // strings and we don't know which the user was trying to\n+    // match. Ths any of the specific error messages is likely to be\n+    // be more confusing than helpful\n+    Err(ExecutionError::General(\"Timestamp parse error\".into()))\n+}\n+\n+/// convert an array of strings into `Timestamp(Nanosecond, None)`\n+pub fn to_timestamp(args: &[ArrayRef]) -> Result<TimestampNanosecondArray> {\n+    let num_rows = args[0].len();\n+    let mut ts_builder = TimestampNanosecondArray::builder(num_rows);\n+    let string_args = &args[0]\n+        .as_any()\n+        .downcast_ref::<StringArray>()\n+        .expect(\"input cast to StringArray failed\");\n\nReview comment:\n       nit: Although the planner and type coercion logic should prevent errors here, we could actually return an `Err` result rather than panic.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-09T00:59:59.161+0000",
                    "updated": "2020-09-09T00:59:59.161+0000",
                    "started": "2020-09-09T00:59:59.161+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "480546",
                    "issueId": "13326510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326510/worklog/480585",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8142:\nURL: https://github.com/apache/arrow/pull/8142#discussion_r485330796\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/datetime_expressions.rs\n##########\n@@ -0,0 +1,225 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! DateTime expressions\n+\n+use crate::error::{ExecutionError, Result};\n+use arrow::array::{Array, ArrayRef, StringArray, TimestampNanosecondArray};\n+use chrono::prelude::*;\n+\n+#[inline]\n+fn string_to_timestamp_nanos(s: &str) -> Result<i64> {\n+    // Fast path:  RFC3339 timestamp (with a T)\n+    // Example: 2020-09-08T13:42:29.190855Z\n+    if let Ok(ts) = DateTime::parse_from_rfc3339(s) {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // Implement quasi-RFC3339 support by trying to parse the\n+    // timestamp with various other format specifiers to to support\n+    // separating the date and time with a space ' ' rather than 'T' to be\n+    // (more) compatible with Apache Spark SQL\n+\n+    // timezone offset, using ' ' as a separator\n+    // Example: 2020-09-08 13:42:29.190855-05:00\n+    if let Ok(ts) = DateTime::parse_from_str(s, \"%Y-%m-%d %H:%M:%S%.f%:z\") {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // with an explict Z, using ' ' as a separator\n+    // Example: 2020-09-08 13:42:29Z\n+    if let Ok(ts) = Utc.datetime_from_str(s, \"%Y-%m-%d %H:%M:%S%.fZ\") {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // Support timestamps without an explicit timezone offset, again\n+    // to be compatible with what Apache Spark SQL does.\n+\n+    // without a timezone specifier as a local time, using T as a separator\n+    // Example: 2020-09-08T13:42:29.190855\n+    if let Ok(ts) = NaiveDateTime::parse_from_str(s, \"%Y-%m-%dT%H:%M:%S.%f\") {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // without a timezone specifier as a local time, using ' ' as a separator\n+    // Example: 2020-09-08 13:42:29.190855\n+    if let Ok(ts) = NaiveDateTime::parse_from_str(s, \"%Y-%m-%d %H:%M:%S.%f\") {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // Note we don't pass along the error message from the underlying\n+    // chrono parsing because we tried several different format\n+    // strings and we don't know which the user was trying to\n+    // match. Ths any of the specific error messages is likely to be\n+    // be more confusing than helpful\n+    Err(ExecutionError::General(\"Timestamp parse error\".into()))\n\nReview comment:\n       add `s` that failed, or just a slice of it, here?\n\n##########\nFile path: rust/datafusion/src/physical_plan/datetime_expressions.rs\n##########\n@@ -0,0 +1,225 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! DateTime expressions\n+\n+use crate::error::{ExecutionError, Result};\n+use arrow::array::{Array, ArrayRef, StringArray, TimestampNanosecondArray};\n+use chrono::prelude::*;\n+\n+#[inline]\n+fn string_to_timestamp_nanos(s: &str) -> Result<i64> {\n+    // Fast path:  RFC3339 timestamp (with a T)\n+    // Example: 2020-09-08T13:42:29.190855Z\n+    if let Ok(ts) = DateTime::parse_from_rfc3339(s) {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // Implement quasi-RFC3339 support by trying to parse the\n+    // timestamp with various other format specifiers to to support\n+    // separating the date and time with a space ' ' rather than 'T' to be\n+    // (more) compatible with Apache Spark SQL\n+\n+    // timezone offset, using ' ' as a separator\n+    // Example: 2020-09-08 13:42:29.190855-05:00\n+    if let Ok(ts) = DateTime::parse_from_str(s, \"%Y-%m-%d %H:%M:%S%.f%:z\") {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // with an explict Z, using ' ' as a separator\n+    // Example: 2020-09-08 13:42:29Z\n+    if let Ok(ts) = Utc.datetime_from_str(s, \"%Y-%m-%d %H:%M:%S%.fZ\") {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // Support timestamps without an explicit timezone offset, again\n+    // to be compatible with what Apache Spark SQL does.\n+\n+    // without a timezone specifier as a local time, using T as a separator\n+    // Example: 2020-09-08T13:42:29.190855\n+    if let Ok(ts) = NaiveDateTime::parse_from_str(s, \"%Y-%m-%dT%H:%M:%S.%f\") {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // without a timezone specifier as a local time, using ' ' as a separator\n+    // Example: 2020-09-08 13:42:29.190855\n+    if let Ok(ts) = NaiveDateTime::parse_from_str(s, \"%Y-%m-%d %H:%M:%S.%f\") {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // Note we don't pass along the error message from the underlying\n+    // chrono parsing because we tried several different format\n+    // strings and we don't know which the user was trying to\n+    // match. Ths any of the specific error messages is likely to be\n+    // be more confusing than helpful\n+    Err(ExecutionError::General(\"Timestamp parse error\".into()))\n+}\n+\n+/// convert an array of strings into `Timestamp(Nanosecond, None)`\n+pub fn to_timestamp(args: &[ArrayRef]) -> Result<TimestampNanosecondArray> {\n+    let num_rows = args[0].len();\n+    let mut ts_builder = TimestampNanosecondArray::builder(num_rows);\n+    let string_args = &args[0]\n+        .as_any()\n+        .downcast_ref::<StringArray>()\n+        .expect(\"input cast to StringArray failed\");\n+\n+    for i in 0..string_args.len() {\n\nReview comment:\n       I think that we get a massive performance boost if we build `ArrayData` here (learning from @nevi-me :P). \r\n   \r\n   @nevi-me did this recently [here](https://github.com/apache/arrow/commit/9ea24092064205b9966c4e08da50ea344bf042e5#diff-084bc9b19a2397f6ba80602e2d136833R33), e.g.\r\n   \r\n   ```rust\r\n   \r\n   let num_rows = args[0].len();\r\n   let string_args = &args[0]\r\n       .as_any()\r\n       .downcast_ref::<StringArray>()\r\n       .expect(\"input cast to StringArray failed\");\r\n   \r\n   let result = (0..num_rows).map(|i| string_to_timestamp_nanos(string_args.value(i))).collect::<Result<Vec<i64>>>()?;\r\n   \r\n   let data = ArrayData::new(\r\n       DataType::Timestamp(DataType::TimeUnit::Nanosecond, None),\r\n       num_rows,\r\n       Some(string_args.null_count()),\r\n       string_args.data().null_buffer().cloned(),\r\n       0,\r\n       vec![Buffer::from(result.to_byte_slice())],\r\n       vec![],\r\n   )\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-09T04:41:23.358+0000",
                    "updated": "2020-09-09T04:41:23.358+0000",
                    "started": "2020-09-09T04:41:23.358+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "480585",
                    "issueId": "13326510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326510/worklog/480586",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8142:\nURL: https://github.com/apache/arrow/pull/8142#discussion_r485333061\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/datetime_expressions.rs\n##########\n@@ -0,0 +1,225 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! DateTime expressions\n+\n+use crate::error::{ExecutionError, Result};\n+use arrow::array::{Array, ArrayRef, StringArray, TimestampNanosecondArray};\n+use chrono::prelude::*;\n+\n+#[inline]\n+fn string_to_timestamp_nanos(s: &str) -> Result<i64> {\n+    // Fast path:  RFC3339 timestamp (with a T)\n+    // Example: 2020-09-08T13:42:29.190855Z\n+    if let Ok(ts) = DateTime::parse_from_rfc3339(s) {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // Implement quasi-RFC3339 support by trying to parse the\n+    // timestamp with various other format specifiers to to support\n+    // separating the date and time with a space ' ' rather than 'T' to be\n+    // (more) compatible with Apache Spark SQL\n+\n+    // timezone offset, using ' ' as a separator\n+    // Example: 2020-09-08 13:42:29.190855-05:00\n+    if let Ok(ts) = DateTime::parse_from_str(s, \"%Y-%m-%d %H:%M:%S%.f%:z\") {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // with an explict Z, using ' ' as a separator\n+    // Example: 2020-09-08 13:42:29Z\n+    if let Ok(ts) = Utc.datetime_from_str(s, \"%Y-%m-%d %H:%M:%S%.fZ\") {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // Support timestamps without an explicit timezone offset, again\n+    // to be compatible with what Apache Spark SQL does.\n+\n+    // without a timezone specifier as a local time, using T as a separator\n+    // Example: 2020-09-08T13:42:29.190855\n+    if let Ok(ts) = NaiveDateTime::parse_from_str(s, \"%Y-%m-%dT%H:%M:%S.%f\") {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // without a timezone specifier as a local time, using ' ' as a separator\n+    // Example: 2020-09-08 13:42:29.190855\n+    if let Ok(ts) = NaiveDateTime::parse_from_str(s, \"%Y-%m-%d %H:%M:%S.%f\") {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // Note we don't pass along the error message from the underlying\n+    // chrono parsing because we tried several different format\n+    // strings and we don't know which the user was trying to\n+    // match. Ths any of the specific error messages is likely to be\n+    // be more confusing than helpful\n+    Err(ExecutionError::General(\"Timestamp parse error\".into()))\n+}\n+\n+/// convert an array of strings into `Timestamp(Nanosecond, None)`\n+pub fn to_timestamp(args: &[ArrayRef]) -> Result<TimestampNanosecondArray> {\n+    let num_rows = args[0].len();\n+    let mut ts_builder = TimestampNanosecondArray::builder(num_rows);\n+    let string_args = &args[0]\n+        .as_any()\n+        .downcast_ref::<StringArray>()\n+        .expect(\"input cast to StringArray failed\");\n+\n+    for i in 0..string_args.len() {\n\nReview comment:\n       I think that we get a massive performance boost if we build `ArrayData` here (learning from @nevi-me :P). \r\n   \r\n   @nevi-me did this recently [here](https://github.com/apache/arrow/commit/9ea24092064205b9966c4e08da50ea344bf042e5#diff-084bc9b19a2397f6ba80602e2d136833R33), e.g.\r\n   \r\n   ```rust\r\n   \r\n   let num_rows = args[0].len();\r\n   let string_args = &args[0]\r\n       .as_any()\r\n       .downcast_ref::<StringArray>()\r\n       .expect(\"input cast to StringArray failed\");\r\n   \r\n   let result = (0..num_rows).map(|i| string_to_timestamp_nanos(string_args.value(i))).collect::<Result<Vec<i64>>>()?;\r\n   \r\n   let data = ArrayData::new(\r\n       DataType::Timestamp(TimeUnit::Nanosecond, None),\r\n       num_rows,\r\n       Some(string_args.null_count()),\r\n       string_args.data().null_buffer().cloned(),\r\n       0,\r\n       vec![Buffer::from(result.to_byte_slice())],\r\n       vec![],\r\n   )\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-09T04:42:06.351+0000",
                    "updated": "2020-09-09T04:42:06.351+0000",
                    "started": "2020-09-09T04:42:06.351+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "480586",
                    "issueId": "13326510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326510/worklog/480587",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8142:\nURL: https://github.com/apache/arrow/pull/8142#discussion_r485333061\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/datetime_expressions.rs\n##########\n@@ -0,0 +1,225 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! DateTime expressions\n+\n+use crate::error::{ExecutionError, Result};\n+use arrow::array::{Array, ArrayRef, StringArray, TimestampNanosecondArray};\n+use chrono::prelude::*;\n+\n+#[inline]\n+fn string_to_timestamp_nanos(s: &str) -> Result<i64> {\n+    // Fast path:  RFC3339 timestamp (with a T)\n+    // Example: 2020-09-08T13:42:29.190855Z\n+    if let Ok(ts) = DateTime::parse_from_rfc3339(s) {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // Implement quasi-RFC3339 support by trying to parse the\n+    // timestamp with various other format specifiers to to support\n+    // separating the date and time with a space ' ' rather than 'T' to be\n+    // (more) compatible with Apache Spark SQL\n+\n+    // timezone offset, using ' ' as a separator\n+    // Example: 2020-09-08 13:42:29.190855-05:00\n+    if let Ok(ts) = DateTime::parse_from_str(s, \"%Y-%m-%d %H:%M:%S%.f%:z\") {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // with an explict Z, using ' ' as a separator\n+    // Example: 2020-09-08 13:42:29Z\n+    if let Ok(ts) = Utc.datetime_from_str(s, \"%Y-%m-%d %H:%M:%S%.fZ\") {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // Support timestamps without an explicit timezone offset, again\n+    // to be compatible with what Apache Spark SQL does.\n+\n+    // without a timezone specifier as a local time, using T as a separator\n+    // Example: 2020-09-08T13:42:29.190855\n+    if let Ok(ts) = NaiveDateTime::parse_from_str(s, \"%Y-%m-%dT%H:%M:%S.%f\") {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // without a timezone specifier as a local time, using ' ' as a separator\n+    // Example: 2020-09-08 13:42:29.190855\n+    if let Ok(ts) = NaiveDateTime::parse_from_str(s, \"%Y-%m-%d %H:%M:%S.%f\") {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // Note we don't pass along the error message from the underlying\n+    // chrono parsing because we tried several different format\n+    // strings and we don't know which the user was trying to\n+    // match. Ths any of the specific error messages is likely to be\n+    // be more confusing than helpful\n+    Err(ExecutionError::General(\"Timestamp parse error\".into()))\n+}\n+\n+/// convert an array of strings into `Timestamp(Nanosecond, None)`\n+pub fn to_timestamp(args: &[ArrayRef]) -> Result<TimestampNanosecondArray> {\n+    let num_rows = args[0].len();\n+    let mut ts_builder = TimestampNanosecondArray::builder(num_rows);\n+    let string_args = &args[0]\n+        .as_any()\n+        .downcast_ref::<StringArray>()\n+        .expect(\"input cast to StringArray failed\");\n+\n+    for i in 0..string_args.len() {\n\nReview comment:\n       I think that we get a massive performance boost if we build `ArrayData` here (learning from @nevi-me :P). \r\n   \r\n   @nevi-me did this recently [here](https://github.com/apache/arrow/commit/9ea24092064205b9966c4e08da50ea344bf042e5#diff-084bc9b19a2397f6ba80602e2d136833R33), e.g.\r\n   \r\n   ```rust\r\n   \r\n   let num_rows = args[0].len();\r\n   let string_args = &args[0]\r\n       .as_any()\r\n       .downcast_ref::<StringArray>()\r\n       .expect(\"input cast to StringArray failed\");\r\n   \r\n   let result = (0..num_rows).map(|i| string_to_timestamp_nanos(string_args.value(i))).collect::<Result<Vec<i64>>>()?;\r\n   \r\n   let data = ArrayData::new(\r\n       DataType::Timestamp(TimeUnit::Nanosecond, None),\r\n       num_rows,\r\n       Some(string_args.null_count()),\r\n       string_args.data().null_buffer().cloned(),\r\n       0,\r\n       vec![Buffer::from(result.to_byte_slice())],\r\n       vec![],\r\n   );\r\n   Ok(make_array(Arc::new(data)))\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-09T04:42:31.269+0000",
                    "updated": "2020-09-09T04:42:31.269+0000",
                    "started": "2020-09-09T04:42:31.268+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "480587",
                    "issueId": "13326510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326510/worklog/480700",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on a change in pull request #8142:\nURL: https://github.com/apache/arrow/pull/8142#discussion_r485468664\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/datetime_expressions.rs\n##########\n@@ -0,0 +1,225 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! DateTime expressions\n+\n+use crate::error::{ExecutionError, Result};\n+use arrow::array::{Array, ArrayRef, StringArray, TimestampNanosecondArray};\n+use chrono::prelude::*;\n+\n+#[inline]\n+fn string_to_timestamp_nanos(s: &str) -> Result<i64> {\n\nReview comment:\n       I'd be interested in a benchmark of this function or the kernel, maybe one for the happy case with `T` and `Z` and one for the last fallback. From my experience with Java, [parsing timestamps can be rather slow][1] and it might be worth writing a specialized implementation.\r\n   \r\n   The behaviour regarding time zones should also be documented, does it default to a local time zone or to always to UTC?\r\n   \r\n   Lastly, storing nanoseconds as i64 gives a range of about year 1677 to 2262, this might be a limitation for currently very few usecases but should also be mentioned.\r\n   \r\n    [1]: https://github.com/jhorstmann/packedtime#benchmarks\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-09T09:23:14.044+0000",
                    "updated": "2020-09-09T09:23:14.044+0000",
                    "started": "2020-09-09T09:23:14.044+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "480700",
                    "issueId": "13326510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326510/worklog/481070",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8142:\nURL: https://github.com/apache/arrow/pull/8142#discussion_r485935565\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/datetime_expressions.rs\n##########\n@@ -0,0 +1,225 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! DateTime expressions\n+\n+use crate::error::{ExecutionError, Result};\n+use arrow::array::{Array, ArrayRef, StringArray, TimestampNanosecondArray};\n+use chrono::prelude::*;\n+\n+#[inline]\n+fn string_to_timestamp_nanos(s: &str) -> Result<i64> {\n+    // Fast path:  RFC3339 timestamp (with a T)\n+    // Example: 2020-09-08T13:42:29.190855Z\n+    if let Ok(ts) = DateTime::parse_from_rfc3339(s) {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // Implement quasi-RFC3339 support by trying to parse the\n+    // timestamp with various other format specifiers to to support\n+    // separating the date and time with a space ' ' rather than 'T' to be\n+    // (more) compatible with Apache Spark SQL\n+\n+    // timezone offset, using ' ' as a separator\n+    // Example: 2020-09-08 13:42:29.190855-05:00\n+    if let Ok(ts) = DateTime::parse_from_str(s, \"%Y-%m-%d %H:%M:%S%.f%:z\") {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // with an explict Z, using ' ' as a separator\n+    // Example: 2020-09-08 13:42:29Z\n+    if let Ok(ts) = Utc.datetime_from_str(s, \"%Y-%m-%d %H:%M:%S%.fZ\") {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // Support timestamps without an explicit timezone offset, again\n+    // to be compatible with what Apache Spark SQL does.\n+\n+    // without a timezone specifier as a local time, using T as a separator\n+    // Example: 2020-09-08T13:42:29.190855\n+    if let Ok(ts) = NaiveDateTime::parse_from_str(s, \"%Y-%m-%dT%H:%M:%S.%f\") {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // without a timezone specifier as a local time, using ' ' as a separator\n+    // Example: 2020-09-08 13:42:29.190855\n+    if let Ok(ts) = NaiveDateTime::parse_from_str(s, \"%Y-%m-%d %H:%M:%S.%f\") {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // Note we don't pass along the error message from the underlying\n+    // chrono parsing because we tried several different format\n+    // strings and we don't know which the user was trying to\n+    // match. Ths any of the specific error messages is likely to be\n+    // be more confusing than helpful\n+    Err(ExecutionError::General(\"Timestamp parse error\".into()))\n+}\n+\n+/// convert an array of strings into `Timestamp(Nanosecond, None)`\n+pub fn to_timestamp(args: &[ArrayRef]) -> Result<TimestampNanosecondArray> {\n+    let num_rows = args[0].len();\n+    let mut ts_builder = TimestampNanosecondArray::builder(num_rows);\n+    let string_args = &args[0]\n+        .as_any()\n+        .downcast_ref::<StringArray>()\n+        .expect(\"input cast to StringArray failed\");\n\nReview comment:\n       Will do\n\n##########\nFile path: rust/datafusion/src/physical_plan/datetime_expressions.rs\n##########\n@@ -0,0 +1,225 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! DateTime expressions\n+\n+use crate::error::{ExecutionError, Result};\n+use arrow::array::{Array, ArrayRef, StringArray, TimestampNanosecondArray};\n+use chrono::prelude::*;\n+\n+#[inline]\n+fn string_to_timestamp_nanos(s: &str) -> Result<i64> {\n+    // Fast path:  RFC3339 timestamp (with a T)\n+    // Example: 2020-09-08T13:42:29.190855Z\n+    if let Ok(ts) = DateTime::parse_from_rfc3339(s) {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // Implement quasi-RFC3339 support by trying to parse the\n+    // timestamp with various other format specifiers to to support\n+    // separating the date and time with a space ' ' rather than 'T' to be\n+    // (more) compatible with Apache Spark SQL\n+\n+    // timezone offset, using ' ' as a separator\n+    // Example: 2020-09-08 13:42:29.190855-05:00\n+    if let Ok(ts) = DateTime::parse_from_str(s, \"%Y-%m-%d %H:%M:%S%.f%:z\") {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // with an explict Z, using ' ' as a separator\n+    // Example: 2020-09-08 13:42:29Z\n+    if let Ok(ts) = Utc.datetime_from_str(s, \"%Y-%m-%d %H:%M:%S%.fZ\") {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // Support timestamps without an explicit timezone offset, again\n+    // to be compatible with what Apache Spark SQL does.\n+\n+    // without a timezone specifier as a local time, using T as a separator\n+    // Example: 2020-09-08T13:42:29.190855\n+    if let Ok(ts) = NaiveDateTime::parse_from_str(s, \"%Y-%m-%dT%H:%M:%S.%f\") {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // without a timezone specifier as a local time, using ' ' as a separator\n+    // Example: 2020-09-08 13:42:29.190855\n+    if let Ok(ts) = NaiveDateTime::parse_from_str(s, \"%Y-%m-%d %H:%M:%S.%f\") {\n+        return Ok(ts.timestamp_nanos());\n+    }\n+\n+    // Note we don't pass along the error message from the underlying\n+    // chrono parsing because we tried several different format\n+    // strings and we don't know which the user was trying to\n+    // match. Ths any of the specific error messages is likely to be\n+    // be more confusing than helpful\n+    Err(ExecutionError::General(\"Timestamp parse error\".into()))\n\nReview comment:\n       good idea -- I will do so\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-09T21:36:37.830+0000",
                    "updated": "2020-09-09T21:36:37.830+0000",
                    "started": "2020-09-09T21:36:37.830+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "481070",
                    "issueId": "13326510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326510/worklog/481097",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8142:\nURL: https://github.com/apache/arrow/pull/8142#discussion_r485950446\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/datetime_expressions.rs\n##########\n@@ -0,0 +1,225 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! DateTime expressions\n+\n+use crate::error::{ExecutionError, Result};\n+use arrow::array::{Array, ArrayRef, StringArray, TimestampNanosecondArray};\n+use chrono::prelude::*;\n+\n+#[inline]\n+fn string_to_timestamp_nanos(s: &str) -> Result<i64> {\n\nReview comment:\n       I filed https://issues.apache.org/jira/browse/ARROW-9955 to track the (excellent) suggestion for benchmark and possible improvement based on results. I agree efficient timestamp parsing is a bit of an art form. \r\n   \r\n   I will also document both the timezone behavior as well as the date range limitations\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-09T22:11:49.878+0000",
                    "updated": "2020-09-09T22:11:49.878+0000",
                    "started": "2020-09-09T22:11:49.878+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "481097",
                    "issueId": "13326510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326510/worklog/481116",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8142:\nURL: https://github.com/apache/arrow/pull/8142#issuecomment-689861246\n\n\n   @andygrove  -- I have rebased this PR and I believe I have implemented all suggestions. There is one more lingering thing regarding parsing local timestamps that I want to check out but I can also do that after merge if you prefer. \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-09T22:43:38.252+0000",
                    "updated": "2020-09-09T22:43:38.252+0000",
                    "started": "2020-09-09T22:43:38.252+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "481116",
                    "issueId": "13326510"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326510/worklog/481167",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove closed pull request #8142:\nURL: https://github.com/apache/arrow/pull/8142\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-10T00:17:56.363+0000",
                    "updated": "2020-09-10T00:17:56.363+0000",
                    "started": "2020-09-10T00:17:56.363+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "481167",
                    "issueId": "13326510"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 6600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@21f7060e[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@504d0bca[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7fd1154d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@477a4226[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5a4aaae9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4199f1cc[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3695efcf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@236be049[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2cf91b2f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@22e088ed[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3b12e0e9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4707366a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6600,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Sep 10 00:17:50 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-09-10T00:17:50.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9944/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-09-08T15:00:37.000+0000",
        "updated": "2020-09-10T11:19:24.000+0000",
        "timeoriginalestimate": null,
        "description": "Implement the TO_TIMESTAMP function, as described in https://docs.google.com/document/d/18O9YPRyJ3u7-58J02NtNVYb6TDWBzi3mIQC58VhwxUk/edit",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Implement TO_TIMESTAMP function",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326510/comment/17193264",
                    "id": "17193264",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 8142\n[https://github.com/apache/arrow/pull/8142]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-09-10T00:17:50.511+0000",
                    "updated": "2020-09-10T00:17:50.511+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0if7s:",
        "customfield_12314139": null
    }
}