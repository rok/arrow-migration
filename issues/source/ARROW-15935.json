{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13433752",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13433752",
    "key": "ARROW-15935",
    "fields": {
        "parent": {
            "id": "13398352",
            "key": "ARROW-13808",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13398352",
            "fields": {
                "summary": "[Ruby] Add bindings for Month, Day, Nano Interval Type",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                    "description": "The issue is open and ready for the assignee to start work on it.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                    "name": "Open",
                    "id": "1",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                        "id": 2,
                        "key": "new",
                        "colorName": "blue-gray",
                        "name": "To Do"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=okadakk",
            "name": "okadakk",
            "key": "okadakk",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Keisuke Okada",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334104",
                "id": "12334104",
                "name": "Ruby"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=okadakk",
            "name": "okadakk",
            "key": "okadakk",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Keisuke Okada",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=okadakk",
            "name": "okadakk",
            "key": "okadakk",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Keisuke Okada",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15935/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 10,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13433752/worklog/754917",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "okadakk opened a new pull request, #12850:\nURL: https://github.com/apache/arrow/pull/12850\n\n   I added Arrow::DictionaryArray.values test\n\n\n",
                    "created": "2022-04-09T09:26:57.845+0000",
                    "updated": "2022-04-09T09:26:57.845+0000",
                    "started": "2022-04-09T09:26:57.845+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754917",
                    "issueId": "13433752"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13433752/worklog/754918",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #12850:\nURL: https://github.com/apache/arrow/pull/12850#issuecomment-1093836994\n\n   https://issues.apache.org/jira/browse/ARROW-15935\n\n\n",
                    "created": "2022-04-09T09:27:16.855+0000",
                    "updated": "2022-04-09T09:27:16.855+0000",
                    "started": "2022-04-09T09:27:16.854+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754918",
                    "issueId": "13433752"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13433752/worklog/754919",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #12850:\nURL: https://github.com/apache/arrow/pull/12850#issuecomment-1093837000\n\n   :warning: Ticket **has no components in JIRA**, make sure you assign one.\n\n\n",
                    "created": "2022-04-09T09:27:18.679+0000",
                    "updated": "2022-04-09T09:27:18.679+0000",
                    "started": "2022-04-09T09:27:18.678+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754919",
                    "issueId": "13433752"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13433752/worklog/754920",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #12850:\nURL: https://github.com/apache/arrow/pull/12850#issuecomment-1093837005\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-04-09T09:27:20.492+0000",
                    "updated": "2022-04-09T09:27:20.492+0000",
                    "started": "2022-04-09T09:27:20.492+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "754920",
                    "issueId": "13433752"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13433752/worklog/755056",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on code in PR #12850:\nURL: https://github.com/apache/arrow/pull/12850#discussion_r846865234\n\n\n##########\nruby/red-arrow/test/values/test-dictionary-array.rb:\n##########\n@@ -0,0 +1,295 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module ValuesDictionaryArrayTests\n+  def test_null\n+    target = build(Arrow::NullArray.new(4))\n+    assert_equal([nil] * 4, target.values)\n+  end\n+\n+  def test_boolean\n+    values = [true, nil, false]\n+    target = build(Arrow::BooleanArray.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_int8\n+    values = [\n+      -(2 ** 7),\n+      nil,\n+      (2 ** 7) - 1,\n+    ]\n+    target = build(Arrow::Int8Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_uint8\n+    values = [\n+      0,\n+      nil,\n+      (2 ** 8) - 1,\n+    ]\n+    target = build(Arrow::UInt8Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_int16\n+    values = [\n+      -(2 ** 15),\n+      nil,\n+      (2 ** 15) - 1,\n+    ]\n+    target = build(Arrow::Int16Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_uint16\n+    values = [\n+      0,\n+      nil,\n+      (2 ** 16) - 1,\n+    ]\n+    target = build(Arrow::UInt16Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_int32\n+    values = [\n+      -(2 ** 31),\n+      nil,\n+      (2 ** 31) - 1,\n+    ]\n+    target = build(Arrow::Int32Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_uint32\n+    values = [\n+      0,\n+      nil,\n+      (2 ** 32) - 1,\n+    ]\n+    target = build(Arrow::UInt32Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_int64\n+    values = [\n+      -(2 ** 63),\n+      nil,\n+      (2 ** 63) - 1,\n+    ]\n+    target = build(Arrow::Int64Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_uint64\n+    values = [\n+      0,\n+      nil,\n+      (2 ** 64) - 1,\n+    ]\n+    target = build(Arrow::UInt64Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_float\n+    values = [\n+      -1.0,\n+      nil,\n+      1.0,\n+    ]\n+    target = build(Arrow::FloatArray.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_double\n+    values = [\n+      -1.0,\n+      nil,\n+      1.0,\n+    ]\n+    target = build(Arrow::DoubleArray.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_binary\n+    values = [\n+      \"\\x00\".b,\n+      nil,\n+      \"\\xff\".b,\n+    ]\n+    target = build(Arrow::BinaryArray.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_tring\n\nReview Comment:\n   ```suggestion\r\n     def test_string\r\n   ```\n\n\n\n##########\nruby/red-arrow/test/values/test-dictionary-array.rb:\n##########\n@@ -0,0 +1,295 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module ValuesDictionaryArrayTests\n+  def test_null\n+    target = build(Arrow::NullArray.new(4))\n+    assert_equal([nil] * 4, target.values)\n+  end\n+\n+  def test_boolean\n+    values = [true, nil, false]\n+    target = build(Arrow::BooleanArray.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_int8\n+    values = [\n+      -(2 ** 7),\n+      nil,\n+      (2 ** 7) - 1,\n+    ]\n+    target = build(Arrow::Int8Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_uint8\n+    values = [\n+      0,\n+      nil,\n+      (2 ** 8) - 1,\n+    ]\n+    target = build(Arrow::UInt8Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_int16\n+    values = [\n+      -(2 ** 15),\n+      nil,\n+      (2 ** 15) - 1,\n+    ]\n+    target = build(Arrow::Int16Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_uint16\n+    values = [\n+      0,\n+      nil,\n+      (2 ** 16) - 1,\n+    ]\n+    target = build(Arrow::UInt16Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_int32\n+    values = [\n+      -(2 ** 31),\n+      nil,\n+      (2 ** 31) - 1,\n+    ]\n+    target = build(Arrow::Int32Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_uint32\n+    values = [\n+      0,\n+      nil,\n+      (2 ** 32) - 1,\n+    ]\n+    target = build(Arrow::UInt32Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_int64\n+    values = [\n+      -(2 ** 63),\n+      nil,\n+      (2 ** 63) - 1,\n+    ]\n+    target = build(Arrow::Int64Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_uint64\n+    values = [\n+      0,\n+      nil,\n+      (2 ** 64) - 1,\n+    ]\n+    target = build(Arrow::UInt64Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_float\n+    values = [\n+      -1.0,\n+      nil,\n+      1.0,\n+    ]\n+    target = build(Arrow::FloatArray.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_double\n+    values = [\n+      -1.0,\n+      nil,\n+      1.0,\n+    ]\n+    target = build(Arrow::DoubleArray.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_binary\n+    values = [\n+      \"\\x00\".b,\n+      nil,\n+      \"\\xff\".b,\n+    ]\n+    target = build(Arrow::BinaryArray.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_tring\n+    values = [\n+      \"Ruby\",\n+      nil,\n+      \"\\u3042\", # U+3042 HIRAGANA LETTER A\n+    ]\n+    target = build(Arrow::StringArray.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_date32\n+    values = [\n+      Date.new(1960, 1, 1),\n+      nil,\n+      Date.new(2017, 8, 23),\n+    ]\n+    target = build(Arrow::Date32Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_date64\n+    values = [\n+      DateTime.new(1960, 1, 1, 2, 9, 30),\n+      nil,\n+      DateTime.new(2017, 8, 23, 14, 57, 2),\n+    ]\n+    target = build(Arrow::Date64Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_timestamp_second\n+    values = [\n+      Time.parse(\"1960-01-01T02:09:30Z\"),\n+      nil,\n+      Time.parse(\"2017-08-23T14:57:02Z\"),\n+    ]\n+    target = build(Arrow::TimestampArray.new(:second, values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_timestamp_milli\n+    values = [\n+      Time.parse(\"1960-01-01T02:09:30.123Z\"),\n+      nil,\n+      Time.parse(\"2017-08-23T14:57:02.987Z\"),\n+    ]\n+    target = build(Arrow::TimestampArray.new(:milli, values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_timestamp_micro\n+    values = [\n+      Time.parse(\"1960-01-01T02:09:30.123456Z\"),\n+      nil,\n+      Time.parse(\"2017-08-23T14:57:02.987654Z\"),\n+    ]\n+    target = build(Arrow::TimestampArray.new(:micro, values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_timestamp_nano\n+    values = [\n+      Time.parse(\"1960-01-01T02:09:30.123456789Z\"),\n+      nil,\n+      Time.parse(\"2017-08-23T14:57:02.987654321Z\"),\n+    ]\n+    target = build(Arrow::TimestampArray.new(:nano, values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_time32_second\n+    unit = Arrow::TimeUnit::SECOND\n+    values = [\n+      Arrow::Time.new(unit, 60 * 10), # 00:10:00\n+      nil,\n+      Arrow::Time.new(unit, 60 * 60 * 2 + 9), # 02:00:09\n+    ]\n+    target = build(Arrow::Time32Array.new(:second, values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_time32_milli\n+    unit = Arrow::TimeUnit::MILLI\n+    values = [\n+      Arrow::Time.new(unit, (60 * 10) * 1000 + 123), # 00:10:00.123\n+      nil,\n+      Arrow::Time.new(unit, (60 * 60 * 2 + 9) * 1000 + 987), # 02:00:09.987\n+    ]\n+    target = build(Arrow::Time32Array.new(:milli, values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_time64_micro\n+    unit = Arrow::TimeUnit::MICRO\n+    values = [\n+      # 00:10:00.123456\n+      Arrow::Time.new(unit, (60 * 10) * 1_000_000 + 123_456),\n+      nil,\n+      # 02:00:09.987654\n+      Arrow::Time.new(unit, (60 * 60 * 2 + 9) * 1_000_000 + 987_654),\n+    ]\n+    target = build(Arrow::Time64Array.new(:micro, values))\n\nReview Comment:\n   ```suggestion\r\n       target = build(Arrow::Time64Array.new(unit, values))\r\n   ```\n\n\n\n##########\nruby/red-arrow/test/values/test-dictionary-array.rb:\n##########\n@@ -0,0 +1,295 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module ValuesDictionaryArrayTests\n+  def test_null\n+    target = build(Arrow::NullArray.new(4))\n+    assert_equal([nil] * 4, target.values)\n+  end\n+\n+  def test_boolean\n+    values = [true, nil, false]\n+    target = build(Arrow::BooleanArray.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_int8\n+    values = [\n+      -(2 ** 7),\n+      nil,\n+      (2 ** 7) - 1,\n+    ]\n+    target = build(Arrow::Int8Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_uint8\n+    values = [\n+      0,\n+      nil,\n+      (2 ** 8) - 1,\n+    ]\n+    target = build(Arrow::UInt8Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_int16\n+    values = [\n+      -(2 ** 15),\n+      nil,\n+      (2 ** 15) - 1,\n+    ]\n+    target = build(Arrow::Int16Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_uint16\n+    values = [\n+      0,\n+      nil,\n+      (2 ** 16) - 1,\n+    ]\n+    target = build(Arrow::UInt16Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_int32\n+    values = [\n+      -(2 ** 31),\n+      nil,\n+      (2 ** 31) - 1,\n+    ]\n+    target = build(Arrow::Int32Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_uint32\n+    values = [\n+      0,\n+      nil,\n+      (2 ** 32) - 1,\n+    ]\n+    target = build(Arrow::UInt32Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_int64\n+    values = [\n+      -(2 ** 63),\n+      nil,\n+      (2 ** 63) - 1,\n+    ]\n+    target = build(Arrow::Int64Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_uint64\n+    values = [\n+      0,\n+      nil,\n+      (2 ** 64) - 1,\n+    ]\n+    target = build(Arrow::UInt64Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_float\n+    values = [\n+      -1.0,\n+      nil,\n+      1.0,\n+    ]\n+    target = build(Arrow::FloatArray.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_double\n+    values = [\n+      -1.0,\n+      nil,\n+      1.0,\n+    ]\n+    target = build(Arrow::DoubleArray.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_binary\n+    values = [\n+      \"\\x00\".b,\n+      nil,\n+      \"\\xff\".b,\n+    ]\n+    target = build(Arrow::BinaryArray.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_tring\n+    values = [\n+      \"Ruby\",\n+      nil,\n+      \"\\u3042\", # U+3042 HIRAGANA LETTER A\n+    ]\n+    target = build(Arrow::StringArray.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_date32\n+    values = [\n+      Date.new(1960, 1, 1),\n+      nil,\n+      Date.new(2017, 8, 23),\n+    ]\n+    target = build(Arrow::Date32Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_date64\n+    values = [\n+      DateTime.new(1960, 1, 1, 2, 9, 30),\n+      nil,\n+      DateTime.new(2017, 8, 23, 14, 57, 2),\n+    ]\n+    target = build(Arrow::Date64Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_timestamp_second\n+    values = [\n+      Time.parse(\"1960-01-01T02:09:30Z\"),\n+      nil,\n+      Time.parse(\"2017-08-23T14:57:02Z\"),\n+    ]\n+    target = build(Arrow::TimestampArray.new(:second, values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_timestamp_milli\n+    values = [\n+      Time.parse(\"1960-01-01T02:09:30.123Z\"),\n+      nil,\n+      Time.parse(\"2017-08-23T14:57:02.987Z\"),\n+    ]\n+    target = build(Arrow::TimestampArray.new(:milli, values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_timestamp_micro\n+    values = [\n+      Time.parse(\"1960-01-01T02:09:30.123456Z\"),\n+      nil,\n+      Time.parse(\"2017-08-23T14:57:02.987654Z\"),\n+    ]\n+    target = build(Arrow::TimestampArray.new(:micro, values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_timestamp_nano\n+    values = [\n+      Time.parse(\"1960-01-01T02:09:30.123456789Z\"),\n+      nil,\n+      Time.parse(\"2017-08-23T14:57:02.987654321Z\"),\n+    ]\n+    target = build(Arrow::TimestampArray.new(:nano, values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_time32_second\n+    unit = Arrow::TimeUnit::SECOND\n+    values = [\n+      Arrow::Time.new(unit, 60 * 10), # 00:10:00\n+      nil,\n+      Arrow::Time.new(unit, 60 * 60 * 2 + 9), # 02:00:09\n+    ]\n+    target = build(Arrow::Time32Array.new(:second, values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_time32_milli\n+    unit = Arrow::TimeUnit::MILLI\n+    values = [\n+      Arrow::Time.new(unit, (60 * 10) * 1000 + 123), # 00:10:00.123\n+      nil,\n+      Arrow::Time.new(unit, (60 * 60 * 2 + 9) * 1000 + 987), # 02:00:09.987\n+    ]\n+    target = build(Arrow::Time32Array.new(:milli, values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_time64_micro\n+    unit = Arrow::TimeUnit::MICRO\n+    values = [\n+      # 00:10:00.123456\n+      Arrow::Time.new(unit, (60 * 10) * 1_000_000 + 123_456),\n+      nil,\n+      # 02:00:09.987654\n+      Arrow::Time.new(unit, (60 * 60 * 2 + 9) * 1_000_000 + 987_654),\n+    ]\n+    target = build(Arrow::Time64Array.new(:micro, values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_time64_nano\n+    unit = Arrow::TimeUnit::NANO\n+    values = [\n+      # 00:10:00.123456789\n+      Arrow::Time.new(unit, (60 * 10) * 1_000_000_000 + 123_456_789),\n+      nil,\n+      # 02:00:09.987654321\n+      Arrow::Time.new(unit, (60 * 60 * 2 + 9) * 1_000_000_000 + 987_654_321),\n+    ]\n+    target = build(Arrow::Time64Array.new(:nano, values))\n\nReview Comment:\n   ```suggestion\r\n       target = build(Arrow::Time64Array.new(unit, values))\r\n   ```\n\n\n\n##########\nruby/red-arrow/test/values/test-dictionary-array.rb:\n##########\n@@ -0,0 +1,295 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module ValuesDictionaryArrayTests\n+  def test_null\n+    target = build(Arrow::NullArray.new(4))\n+    assert_equal([nil] * 4, target.values)\n+  end\n+\n+  def test_boolean\n+    values = [true, nil, false]\n+    target = build(Arrow::BooleanArray.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_int8\n+    values = [\n+      -(2 ** 7),\n+      nil,\n+      (2 ** 7) - 1,\n+    ]\n+    target = build(Arrow::Int8Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_uint8\n+    values = [\n+      0,\n+      nil,\n+      (2 ** 8) - 1,\n+    ]\n+    target = build(Arrow::UInt8Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_int16\n+    values = [\n+      -(2 ** 15),\n+      nil,\n+      (2 ** 15) - 1,\n+    ]\n+    target = build(Arrow::Int16Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_uint16\n+    values = [\n+      0,\n+      nil,\n+      (2 ** 16) - 1,\n+    ]\n+    target = build(Arrow::UInt16Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_int32\n+    values = [\n+      -(2 ** 31),\n+      nil,\n+      (2 ** 31) - 1,\n+    ]\n+    target = build(Arrow::Int32Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_uint32\n+    values = [\n+      0,\n+      nil,\n+      (2 ** 32) - 1,\n+    ]\n+    target = build(Arrow::UInt32Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_int64\n+    values = [\n+      -(2 ** 63),\n+      nil,\n+      (2 ** 63) - 1,\n+    ]\n+    target = build(Arrow::Int64Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_uint64\n+    values = [\n+      0,\n+      nil,\n+      (2 ** 64) - 1,\n+    ]\n+    target = build(Arrow::UInt64Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_float\n+    values = [\n+      -1.0,\n+      nil,\n+      1.0,\n+    ]\n+    target = build(Arrow::FloatArray.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_double\n+    values = [\n+      -1.0,\n+      nil,\n+      1.0,\n+    ]\n+    target = build(Arrow::DoubleArray.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_binary\n+    values = [\n+      \"\\x00\".b,\n+      nil,\n+      \"\\xff\".b,\n+    ]\n+    target = build(Arrow::BinaryArray.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_tring\n+    values = [\n+      \"Ruby\",\n+      nil,\n+      \"\\u3042\", # U+3042 HIRAGANA LETTER A\n+    ]\n+    target = build(Arrow::StringArray.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_date32\n+    values = [\n+      Date.new(1960, 1, 1),\n+      nil,\n+      Date.new(2017, 8, 23),\n+    ]\n+    target = build(Arrow::Date32Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_date64\n+    values = [\n+      DateTime.new(1960, 1, 1, 2, 9, 30),\n+      nil,\n+      DateTime.new(2017, 8, 23, 14, 57, 2),\n+    ]\n+    target = build(Arrow::Date64Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_timestamp_second\n+    values = [\n+      Time.parse(\"1960-01-01T02:09:30Z\"),\n+      nil,\n+      Time.parse(\"2017-08-23T14:57:02Z\"),\n+    ]\n+    target = build(Arrow::TimestampArray.new(:second, values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_timestamp_milli\n+    values = [\n+      Time.parse(\"1960-01-01T02:09:30.123Z\"),\n+      nil,\n+      Time.parse(\"2017-08-23T14:57:02.987Z\"),\n+    ]\n+    target = build(Arrow::TimestampArray.new(:milli, values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_timestamp_micro\n+    values = [\n+      Time.parse(\"1960-01-01T02:09:30.123456Z\"),\n+      nil,\n+      Time.parse(\"2017-08-23T14:57:02.987654Z\"),\n+    ]\n+    target = build(Arrow::TimestampArray.new(:micro, values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_timestamp_nano\n+    values = [\n+      Time.parse(\"1960-01-01T02:09:30.123456789Z\"),\n+      nil,\n+      Time.parse(\"2017-08-23T14:57:02.987654321Z\"),\n+    ]\n+    target = build(Arrow::TimestampArray.new(:nano, values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_time32_second\n+    unit = Arrow::TimeUnit::SECOND\n+    values = [\n+      Arrow::Time.new(unit, 60 * 10), # 00:10:00\n+      nil,\n+      Arrow::Time.new(unit, 60 * 60 * 2 + 9), # 02:00:09\n+    ]\n+    target = build(Arrow::Time32Array.new(:second, values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_time32_milli\n+    unit = Arrow::TimeUnit::MILLI\n+    values = [\n+      Arrow::Time.new(unit, (60 * 10) * 1000 + 123), # 00:10:00.123\n+      nil,\n+      Arrow::Time.new(unit, (60 * 60 * 2 + 9) * 1000 + 987), # 02:00:09.987\n+    ]\n+    target = build(Arrow::Time32Array.new(:milli, values))\n\nReview Comment:\n   ```suggestion\r\n       target = build(Arrow::Time32Array.new(unit, values))\r\n   ```\n\n\n\n##########\nruby/red-arrow/test/values/test-dictionary-array.rb:\n##########\n@@ -0,0 +1,295 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module ValuesDictionaryArrayTests\n+  def test_null\n+    target = build(Arrow::NullArray.new(4))\n+    assert_equal([nil] * 4, target.values)\n+  end\n+\n+  def test_boolean\n+    values = [true, nil, false]\n+    target = build(Arrow::BooleanArray.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_int8\n+    values = [\n+      -(2 ** 7),\n+      nil,\n+      (2 ** 7) - 1,\n+    ]\n+    target = build(Arrow::Int8Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_uint8\n+    values = [\n+      0,\n+      nil,\n+      (2 ** 8) - 1,\n+    ]\n+    target = build(Arrow::UInt8Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_int16\n+    values = [\n+      -(2 ** 15),\n+      nil,\n+      (2 ** 15) - 1,\n+    ]\n+    target = build(Arrow::Int16Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_uint16\n+    values = [\n+      0,\n+      nil,\n+      (2 ** 16) - 1,\n+    ]\n+    target = build(Arrow::UInt16Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_int32\n+    values = [\n+      -(2 ** 31),\n+      nil,\n+      (2 ** 31) - 1,\n+    ]\n+    target = build(Arrow::Int32Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_uint32\n+    values = [\n+      0,\n+      nil,\n+      (2 ** 32) - 1,\n+    ]\n+    target = build(Arrow::UInt32Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_int64\n+    values = [\n+      -(2 ** 63),\n+      nil,\n+      (2 ** 63) - 1,\n+    ]\n+    target = build(Arrow::Int64Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_uint64\n+    values = [\n+      0,\n+      nil,\n+      (2 ** 64) - 1,\n+    ]\n+    target = build(Arrow::UInt64Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_float\n+    values = [\n+      -1.0,\n+      nil,\n+      1.0,\n+    ]\n+    target = build(Arrow::FloatArray.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_double\n+    values = [\n+      -1.0,\n+      nil,\n+      1.0,\n+    ]\n+    target = build(Arrow::DoubleArray.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_binary\n+    values = [\n+      \"\\x00\".b,\n+      nil,\n+      \"\\xff\".b,\n+    ]\n+    target = build(Arrow::BinaryArray.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_tring\n+    values = [\n+      \"Ruby\",\n+      nil,\n+      \"\\u3042\", # U+3042 HIRAGANA LETTER A\n+    ]\n+    target = build(Arrow::StringArray.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_date32\n+    values = [\n+      Date.new(1960, 1, 1),\n+      nil,\n+      Date.new(2017, 8, 23),\n+    ]\n+    target = build(Arrow::Date32Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_date64\n+    values = [\n+      DateTime.new(1960, 1, 1, 2, 9, 30),\n+      nil,\n+      DateTime.new(2017, 8, 23, 14, 57, 2),\n+    ]\n+    target = build(Arrow::Date64Array.new(values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_timestamp_second\n+    values = [\n+      Time.parse(\"1960-01-01T02:09:30Z\"),\n+      nil,\n+      Time.parse(\"2017-08-23T14:57:02Z\"),\n+    ]\n+    target = build(Arrow::TimestampArray.new(:second, values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_timestamp_milli\n+    values = [\n+      Time.parse(\"1960-01-01T02:09:30.123Z\"),\n+      nil,\n+      Time.parse(\"2017-08-23T14:57:02.987Z\"),\n+    ]\n+    target = build(Arrow::TimestampArray.new(:milli, values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_timestamp_micro\n+    values = [\n+      Time.parse(\"1960-01-01T02:09:30.123456Z\"),\n+      nil,\n+      Time.parse(\"2017-08-23T14:57:02.987654Z\"),\n+    ]\n+    target = build(Arrow::TimestampArray.new(:micro, values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_timestamp_nano\n+    values = [\n+      Time.parse(\"1960-01-01T02:09:30.123456789Z\"),\n+      nil,\n+      Time.parse(\"2017-08-23T14:57:02.987654321Z\"),\n+    ]\n+    target = build(Arrow::TimestampArray.new(:nano, values))\n+    assert_equal(values, target.values)\n+  end\n+\n+  def test_time32_second\n+    unit = Arrow::TimeUnit::SECOND\n+    values = [\n+      Arrow::Time.new(unit, 60 * 10), # 00:10:00\n+      nil,\n+      Arrow::Time.new(unit, 60 * 60 * 2 + 9), # 02:00:09\n+    ]\n+    target = build(Arrow::Time32Array.new(:second, values))\n\nReview Comment:\n   ```suggestion\r\n       target = build(Arrow::Time32Array.new(unit, values))\r\n   ```\n\n\n\n",
                    "created": "2022-04-10T23:41:43.677+0000",
                    "updated": "2022-04-10T23:41:43.677+0000",
                    "started": "2022-04-10T23:41:43.676+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "755056",
                    "issueId": "13433752"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13433752/worklog/755204",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "okadakk commented on PR #12850:\nURL: https://github.com/apache/arrow/pull/12850#issuecomment-1094991334\n\n   Thank you! \r\n   I commited suggestions!\n\n\n",
                    "created": "2022-04-11T12:30:37.657+0000",
                    "updated": "2022-04-11T12:30:37.657+0000",
                    "started": "2022-04-11T12:30:37.644+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "755204",
                    "issueId": "13433752"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13433752/worklog/755436",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou closed pull request #12850: ARROW-15935: [Ruby] Add test for Arrow::DictionaryArray#values\nURL: https://github.com/apache/arrow/pull/12850\n\n\n",
                    "created": "2022-04-11T20:45:56.098+0000",
                    "updated": "2022-04-11T20:45:56.098+0000",
                    "started": "2022-04-11T20:45:56.097+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "755436",
                    "issueId": "13433752"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13433752/worklog/755588",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on PR #12850:\nURL: https://github.com/apache/arrow/pull/12850#issuecomment-1095973450\n\n   Benchmark runs are scheduled for baseline = 71ba86425765478e5bc7a9db3eacf85bb8e21515 and contender = fe11431ab66572c4432cac76ff20d587f840f302. fe11431ab66572c4432cac76ff20d587f840f302 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/5bd9dcfa55b0477dbed2376a87660bb7...efec102c870847718b257db115fa8a81/)\n   [Failed :arrow_down:0.13% :arrow_up:0.0%] [test-mac-arm](https://conbench.ursa.dev/compare/runs/717a9db8c8c2429aabcc688c13983ed9...db2760516fcb49ae829f5cc4412da55e/)\n   [Failed :arrow_down:0.36% :arrow_up:0.36%] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/27dd584862374e099235dd84afddefcb...f05441fb3c454549998ecacd721fd6f8/)\n   [Finished :arrow_down:0.04% :arrow_up:0.0%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/6c2274fd3d4043908ceb188365827bb9...f70928f535d147ef9f2c0568c85efc00/)\n   Buildkite builds:\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/487| `fe11431a` ec2-t3-xlarge-us-east-2>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/472| `fe11431a` test-mac-arm>\n   [Failed] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/473| `fe11431a` ursa-i9-9960x>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/482| `fe11431a` ursa-thinkcentre-m75q>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/486| `71ba8642` ec2-t3-xlarge-us-east-2>\n   [Failed] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/471| `71ba8642` test-mac-arm>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/472| `71ba8642` ursa-i9-9960x>\n   [Finished] <https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/481| `71ba8642` ursa-thinkcentre-m75q>\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python, R. Runs only benchmarks with cloud = True\n   test-mac-arm: Supported benchmark langs: C++, Python, R\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n",
                    "created": "2022-04-12T04:11:19.496+0000",
                    "updated": "2022-04-12T04:11:19.496+0000",
                    "started": "2022-04-12T04:11:19.495+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "755588",
                    "issueId": "13433752"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13433752/worklog/775697",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "okadakk opened a new pull request, #13255:\nURL: https://github.com/apache/arrow/pull/13255\n\n   I Added Support for DictionaryArray#values, #raw_records with Interval Types.\n\n\n",
                    "created": "2022-05-29T08:31:59.653+0000",
                    "updated": "2022-05-29T08:31:59.653+0000",
                    "started": "2022-05-29T08:31:59.653+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "775697",
                    "issueId": "13433752"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13433752/worklog/775698",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13255:\nURL: https://github.com/apache/arrow/pull/13255#issuecomment-1140403018\n\n   https://issues.apache.org/jira/browse/ARROW-15935\n\n\n",
                    "created": "2022-05-29T08:32:18.437+0000",
                    "updated": "2022-05-29T08:32:18.437+0000",
                    "started": "2022-05-29T08:32:18.437+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "775698",
                    "issueId": "13433752"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 6000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@9af6b5f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1a3e64a8[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3c801dac[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@557225b0[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@26a5d8a9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@53422caf[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f132616[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2b08c1e1[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@23e024b9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6105533e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1750fa9e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7aba265c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6000,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Apr 11 20:47:19 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-04-11T20:47:19.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15935/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-03-15T00:18:15.000+0000",
        "updated": "2022-05-29T08:32:18.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Ruby] Add test for Arrow::DictionaryArray#values",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13433752/comment/17520806",
                    "id": "17520806",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "Issue resolved by pull request 12850\n[https://github.com/apache/arrow/pull/12850]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2022-04-11T20:47:19.227+0000",
                    "updated": "2022-04-11T20:47:19.227+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z10h5c:",
        "customfield_12314139": null
    }
}