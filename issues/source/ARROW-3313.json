{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13186983",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186983",
    "key": "ARROW-3313",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 3000,
            "total": 3000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 3000,
            "total": 3000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3313/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 5,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186983/worklog/147810",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm opened a new pull request #2628: ARROW-3313: [R] Move .clang-format to top level. Add r/lint.sh script for linting R C++ files in Travis CI\nURL: https://github.com/apache/arrow/pull/2628\n \n \n   This also skips the R Travis job if there are no changes affecting it.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-25T22:27:44.090+0000",
                    "updated": "2018-09-25T22:27:44.090+0000",
                    "started": "2018-09-25T22:27:44.089+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "147810",
                    "issueId": "13186983"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186983/worklog/147811",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2628: ARROW-3313: [R] Move .clang-format to top level. Add r/lint.sh script for linting R C++ files in Travis CI\nURL: https://github.com/apache/arrow/pull/2628#issuecomment-424522870\n \n \n   cc @romainfrancois \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-25T22:28:02.026+0000",
                    "updated": "2018-09-25T22:28:02.026+0000",
                    "started": "2018-09-25T22:28:02.025+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "147811",
                    "issueId": "13186983"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186983/worklog/148141",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2628: ARROW-3313: [R] Move .clang-format to top level. Add r/lint.sh script for linting R C++ files in Travis CI\nURL: https://github.com/apache/arrow/pull/2628\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/.clang-format b/.clang-format\nsimilarity index 100%\nrename from cpp/.clang-format\nrename to .clang-format\ndiff --git a/cpp/.clang-tidy b/.clang-tidy\nsimilarity index 100%\nrename from cpp/.clang-tidy\nrename to .clang-tidy\ndiff --git a/cpp/.clang-tidy-ignore b/.clang-tidy-ignore\nsimilarity index 100%\nrename from cpp/.clang-tidy-ignore\nrename to .clang-tidy-ignore\ndiff --git a/.travis.yml b/.travis.yml\nindex e37c926557..9e347c1a13 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -249,11 +249,14 @@ matrix:\n   - language: r\n     cache: packages\n     latex: false\n+    before_script:\n+    - if [ $ARROW_CI_R_AFFECTED != \"1\" ]; then exit; fi\n     before_install:\n     - $TRAVIS_BUILD_DIR/ci/travis_install_linux.sh\n     - $TRAVIS_BUILD_DIR/ci/travis_before_script_cpp.sh --only-library\n     - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TRAVIS_BUILD_DIR/cpp-install/lib\n     - export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$TRAVIS_BUILD_DIR/cpp-install/lib/pkgconfig\n+    - $TRAVIS_BUILD_DIR/ci/travis_lint.sh\n     - pushd ${TRAVIS_BUILD_DIR}/r\n \n \ndiff --git a/ci/detect-changes.py b/ci/detect-changes.py\nindex df041b921c..e9a647c5e6 100644\n--- a/ci/detect-changes.py\n+++ b/ci/detect-changes.py\n@@ -26,7 +26,8 @@\n \n perr = functools.partial(print, file=sys.stderr)\n \n-LANGUAGE_TOPICS = ['c_glib', 'cpp', 'go', 'java', 'js', 'python', 'ruby', 'rust']\n+LANGUAGE_TOPICS = ['c_glib', 'cpp', 'go', 'java', 'js', 'python',\n+                   'r', 'ruby', 'rust']\n \n ALL_TOPICS = LANGUAGE_TOPICS + ['integration', 'site', 'dev']\n \n@@ -66,7 +67,8 @@ def get_travis_head_commit():\n \n def get_travis_commit_range():\n     cr = os.environ['TRAVIS_COMMIT_RANGE']\n-    # See https://github.com/travis-ci/travis-ci/issues/4596#issuecomment-139811122\n+    # See\n+    # https://github.com/travis-ci/travis-ci/issues/4596#issuecomment-139811122\n     return cr.replace('...', '..')\n \n \n@@ -136,7 +138,7 @@ def get_affected_topics(affected_files):\n             break\n         elif p in ('cpp', 'format'):\n             # Test C++ and bindings to the C++ library\n-            for k in ('cpp', 'python', 'c_glib', 'ruby', 'integration'):\n+            for k in ('cpp', 'python', 'c_glib', 'r', 'ruby', 'integration'):\n                 affected[k] = True\n         elif p in ('java', 'js'):\n             affected[p] = True\n@@ -144,8 +146,8 @@ def get_affected_topics(affected_files):\n         elif p in ('c_glib'):\n             affected[p] = True\n             affected['ruby'] = True\n-        elif p in ('go', 'integration', 'python', 'ruby', 'rust', 'site',\n-                   'dev'):\n+        elif p in ('go', 'integration', 'python', 'r', 'ruby', 'rust',\n+                   'site', 'dev'):\n             affected[p] = True\n \n     return affected\n@@ -174,8 +176,8 @@ def get_windows_shell_eval(env):\n \n def run_from_travis():\n     if (os.environ['TRAVIS_REPO_SLUG'] == 'apache/arrow' and\n-        os.environ['TRAVIS_BRANCH'] == 'master' and\n-        os.environ['TRAVIS_EVENT_TYPE'] != 'pull_request'):\n+            os.environ['TRAVIS_BRANCH'] == 'master' and\n+            os.environ['TRAVIS_EVENT_TYPE'] != 'pull_request'):\n         # Never skip anything on master builds in the official repository\n         affected = dict.fromkeys(ALL_TOPICS, True)\n     else:\n@@ -219,14 +221,14 @@ def run_from_appveyor():\n     if os.environ.get('TRAVIS'):\n         try:\n             print(run_from_travis())\n-        except:\n+        except Exception:\n             # Make sure the enclosing eval will return an error\n             print(\"exit 1\")\n             raise\n     elif os.environ.get('APPVEYOR'):\n         try:\n             print(run_from_appveyor())\n-        except:\n+        except Exception:\n             print(\"exit 1\")\n             raise\n     else:\ndiff --git a/ci/travis_lint.sh b/ci/travis_lint.sh\nindex 8ebb58483f..b8059f07ae 100755\n--- a/ci/travis_lint.sh\n+++ b/ci/travis_lint.sh\n@@ -65,3 +65,9 @@ if [ \"$ARROW_CI_PYTHON_AFFECTED\" != \"0\" ]; then\n                    --config=$ARROW_PYTHON_DIR/.flake8.cython \\\n                    $ARROW_PYTHON_DIR\n fi\n+\n+if [ \"$ARROW_CI_R_AFFECTED\" != \"0\" ]; then\n+  pushd $ARROW_R_DIR\n+  ./lint.sh\n+  popd\n+fi\ndiff --git a/cpp/build-support/clang_format_exclusions.txt b/cpp/build-support/clang_format_exclusions.txt\nindex d31d8a00d2..66f35329d0 100644\n--- a/cpp/build-support/clang_format_exclusions.txt\n+++ b/cpp/build-support/clang_format_exclusions.txt\n@@ -8,3 +8,4 @@\n *thirdparty/ae/*\n *xxhash.cc\n *xxhash.h\n+*RcppExports.cpp*\ndiff --git a/cpp/build-support/run_clang_format.py b/cpp/build-support/run_clang_format.py\nindex 6edac5f0e9..d0cc2b0f0f 100755\n--- a/cpp/build-support/run_clang_format.py\n+++ b/cpp/build-support/run_clang_format.py\n@@ -54,7 +54,9 @@\n         fullpaths = (os.path.join(directory, filename)\n                      for filename in filenames)\n         source_files = [x for x in fullpaths\n-                        if x.endswith(\".h\") or x.endswith(\".cc\")]\n+                        if x.endswith(\".h\") or\n+                        x.endswith(\".cc\") or\n+                        x.endswith(\".cpp\")]\n         formatted_filenames.extend(\n             # Filter out files that match the globs in the globs file\n             [filename for filename in source_files\ndiff --git a/r/README.md b/r/README.md\nindex 0ac781526a..868fdff0a0 100644\n--- a/r/README.md\n+++ b/r/README.md\n@@ -38,15 +38,15 @@ tf <- tempfile()\n #> # A tibble: 10 x 2\n #>        x       y\n #>    <int>   <dbl>\n-#>  1     1 -0.255 \n-#>  2     2 -0.162 \n-#>  3     3 -0.614 \n-#>  4     4 -0.322 \n+#>  1     1 -0.255\n+#>  2     2 -0.162\n+#>  3     3 -0.614\n+#>  4     4 -0.322\n #>  5     5  0.0693\n-#>  6     6 -0.920 \n-#>  7     7 -1.08  \n-#>  8     8  0.658 \n-#>  9     9  0.821 \n+#>  6     6 -0.920\n+#>  7     7 -1.08\n+#>  8     8  0.658\n+#>  9     9  0.821\n #> 10    10  0.539\n arrow::write_arrow(tib, tf)\n \n@@ -56,14 +56,30 @@ as_tibble(pa$open_file(tf)$read_pandas())\n #> # A tibble: 10 x 2\n #>        x       y\n #>    <int>   <dbl>\n-#>  1     1 -0.255 \n-#>  2     2 -0.162 \n-#>  3     3 -0.614 \n-#>  4     4 -0.322 \n+#>  1     1 -0.255\n+#>  2     2 -0.162\n+#>  3     3 -0.614\n+#>  4     4 -0.322\n #>  5     5  0.0693\n-#>  6     6 -0.920 \n-#>  7     7 -1.08  \n-#>  8     8  0.658 \n-#>  9     9  0.821 \n+#>  6     6 -0.920\n+#>  7     7 -1.08\n+#>  8     8  0.658\n+#>  9     9  0.821\n #> 10    10  0.539\n ```\n+\n+## Development\n+\n+### Code style\n+\n+We use Google C++ style in our C++ code. Check for style errors with\n+\n+```\n+./lint.sh\n+```\n+\n+You can fix the style issues with\n+\n+```\n+./lint.sh --fix\n+```\n\\ No newline at end of file\ndiff --git a/r/lint.sh b/r/lint.sh\nnew file mode 100755\nindex 0000000000..14e457d164\n--- /dev/null\n+++ b/r/lint.sh\n@@ -0,0 +1,28 @@\n+#!/bin/bash\n+\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+SOURCE_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n+CPP_BUILD_SUPPORT=$SOURCE_DIR/../cpp/build-support\n+\n+LLVM_VERSION=6.0\n+CLANG_FORMAT=clang-format-$LLVM_VERSION\n+\n+$CPP_BUILD_SUPPORT/run_clang_format.py $CLANG_FORMAT \\\n+                                       $CPP_BUILD_SUPPORT/clang_format_exclusions.txt \\\n+                                       $SOURCE_DIR/src --quiet $1\ndiff --git a/r/src/ArrayData.cpp b/r/src/ArrayData.cpp\nindex fc6fba1460..2e284cdce8 100644\n--- a/r/src/ArrayData.cpp\n+++ b/r/src/ArrayData.cpp\n@@ -20,21 +20,22 @@\n using namespace Rcpp;\n \n // [[Rcpp::export]]\n-std::shared_ptr<arrow::DataType> ArrayData__get_type(const std::shared_ptr<arrow::ArrayData>& x){\n+std::shared_ptr<arrow::DataType> ArrayData__get_type(\n+    const std::shared_ptr<arrow::ArrayData>& x) {\n   return x->type;\n }\n \n // [[Rcpp::export]]\n-int ArrayData__get_length(const std::shared_ptr<arrow::ArrayData>& x){\n+int ArrayData__get_length(const std::shared_ptr<arrow::ArrayData>& x) {\n   return x->length;\n }\n \n // [[Rcpp::export]]\n-int ArrayData__get_null_count(const std::shared_ptr<arrow::ArrayData>& x){\n+int ArrayData__get_null_count(const std::shared_ptr<arrow::ArrayData>& x) {\n   return x->null_count;\n }\n \n // [[Rcpp::export]]\n-int ArrayData__get_offset(const std::shared_ptr<arrow::ArrayData>& x){\n+int ArrayData__get_offset(const std::shared_ptr<arrow::ArrayData>& x) {\n   return x->offset;\n }\ndiff --git a/r/src/ChunkedArray.cpp b/r/src/ChunkedArray.cpp\nindex 66b83cb2db..59f21f599b 100644\n--- a/r/src/ChunkedArray.cpp\n+++ b/r/src/ChunkedArray.cpp\n@@ -21,34 +21,33 @@ using namespace Rcpp;\n using namespace arrow;\n \n template <int RTYPE>\n-inline SEXP simple_ChunkedArray_to_Vector(const std::shared_ptr<arrow::ChunkedArray>& chunked_array){\n+inline SEXP simple_ChunkedArray_to_Vector(\n+    const std::shared_ptr<arrow::ChunkedArray>& chunked_array) {\n   using stored_type = typename Rcpp::Vector<RTYPE>::stored_type;\n   Rcpp::Vector<RTYPE> out = no_init(chunked_array->length());\n   auto p = out.begin();\n \n   int k = 0;\n-  for (int i=0; i<chunked_array->num_chunks(); i++) {\n+  for (int i = 0; i < chunked_array->num_chunks(); i++) {\n     auto chunk = chunked_array->chunk(i);\n     auto n = chunk->length();\n \n     // copy the data\n     auto q = p;\n     p = std::copy_n(\n-      reinterpret_cast<const stored_type*>(\n-        chunk->data()->buffers[1]->data() + chunk->offset() * sizeof(stored_type)\n-      ),\n-      n, p);\n+        reinterpret_cast<const stored_type*>(chunk->data()->buffers[1]->data() +\n+                                             chunk->offset() * sizeof(stored_type)),\n+        n, p);\n \n     // set NA using the bitmap\n     auto bitmap_data = chunk->null_bitmap();\n     if (bitmap_data && RTYPE != RAWSXP) {\n-      arrow::internal::BitmapReader bitmap_reader(\n-          bitmap_data->data(), chunk->offset(), n\n-      );\n+      arrow::internal::BitmapReader bitmap_reader(bitmap_data->data(), chunk->offset(),\n+                                                  n);\n \n-      for (int j=0; j<n; j++, bitmap_reader.Next()){\n+      for (int j = 0; j < n; j++, bitmap_reader.Next()) {\n         if (bitmap_reader.IsNotSet()) {\n-          q[k+j] = Rcpp::Vector<RTYPE>::get_na();\n+          q[k + j] = Rcpp::Vector<RTYPE>::get_na();\n         }\n       }\n     }\n@@ -58,43 +57,47 @@ inline SEXP simple_ChunkedArray_to_Vector(const std::shared_ptr<arrow::ChunkedAr\n   return out;\n }\n \n-\n // [[Rcpp::export]]\n-int ChunkedArray__length(const std::shared_ptr<arrow::ChunkedArray>& chunked_array){\n+int ChunkedArray__length(const std::shared_ptr<arrow::ChunkedArray>& chunked_array) {\n   return chunked_array->length();\n }\n \n // [[Rcpp::export]]\n-int ChunkedArray__null_count(const std::shared_ptr<arrow::ChunkedArray>& chunked_array){\n+int ChunkedArray__null_count(const std::shared_ptr<arrow::ChunkedArray>& chunked_array) {\n   return chunked_array->null_count();\n }\n \n // [[Rcpp::export]]\n-int ChunkedArray__num_chunks(const std::shared_ptr<arrow::ChunkedArray>& chunked_array){\n+int ChunkedArray__num_chunks(const std::shared_ptr<arrow::ChunkedArray>& chunked_array) {\n   return chunked_array->num_chunks();\n }\n \n // [[Rcpp::export]]\n-std::shared_ptr<arrow::Array> ChunkedArray__chunk(const std::shared_ptr<arrow::ChunkedArray>& chunked_array, int i){\n+std::shared_ptr<arrow::Array> ChunkedArray__chunk(\n+    const std::shared_ptr<arrow::ChunkedArray>& chunked_array, int i) {\n   return chunked_array->chunk(i);\n }\n \n // [[Rcpp::export]]\n-List ChunkedArray__chunks(const std::shared_ptr<arrow::ChunkedArray>& chunked_array){\n+List ChunkedArray__chunks(const std::shared_ptr<arrow::ChunkedArray>& chunked_array) {\n   return wrap(chunked_array->chunks());\n }\n \n // [[Rcpp::export]]\n-std::shared_ptr<arrow::DataType> ChunkedArray__type(const std::shared_ptr<arrow::ChunkedArray>& chunked_array){\n+std::shared_ptr<arrow::DataType> ChunkedArray__type(\n+    const std::shared_ptr<arrow::ChunkedArray>& chunked_array) {\n   return chunked_array->type();\n }\n \n // [[Rcpp::export]]\n-SEXP ChunkedArray__as_vector(const std::shared_ptr<arrow::ChunkedArray>& chunked_array){\n-  switch(chunked_array->type()->id()){\n-    case Type::INT8: return simple_ChunkedArray_to_Vector<RAWSXP>(chunked_array);\n-    case Type::INT32: return simple_ChunkedArray_to_Vector<INTSXP>(chunked_array);\n-    case Type::DOUBLE: return simple_ChunkedArray_to_Vector<REALSXP>(chunked_array);\n+SEXP ChunkedArray__as_vector(const std::shared_ptr<arrow::ChunkedArray>& chunked_array) {\n+  switch (chunked_array->type()->id()) {\n+    case Type::INT8:\n+      return simple_ChunkedArray_to_Vector<RAWSXP>(chunked_array);\n+    case Type::INT32:\n+      return simple_ChunkedArray_to_Vector<INTSXP>(chunked_array);\n+    case Type::DOUBLE:\n+      return simple_ChunkedArray_to_Vector<REALSXP>(chunked_array);\n     default:\n       break;\n   }\n@@ -104,19 +107,21 @@ SEXP ChunkedArray__as_vector(const std::shared_ptr<arrow::ChunkedArray>& chunked\n }\n \n // [[Rcpp::export]]\n-std::shared_ptr<arrow::ChunkedArray> ChunkArray__Slice1( const std::shared_ptr<arrow::ChunkedArray>& chunked_array, int offset) {\n+std::shared_ptr<arrow::ChunkedArray> ChunkArray__Slice1(\n+    const std::shared_ptr<arrow::ChunkedArray>& chunked_array, int offset) {\n   return chunked_array->Slice(offset);\n }\n \n // [[Rcpp::export]]\n-std::shared_ptr<arrow::ChunkedArray> ChunkArray__Slice2( const std::shared_ptr<arrow::ChunkedArray>& chunked_array, int offset, int length) {\n+std::shared_ptr<arrow::ChunkedArray> ChunkArray__Slice2(\n+    const std::shared_ptr<arrow::ChunkedArray>& chunked_array, int offset, int length) {\n   return chunked_array->Slice(offset, length);\n }\n \n // [[Rcpp::export]]\n-std::shared_ptr<arrow::ChunkedArray> ChunkedArray__from_list(List chunks){\n+std::shared_ptr<arrow::ChunkedArray> ChunkedArray__from_list(List chunks) {\n   std::vector<std::shared_ptr<arrow::Array>> vec;\n-  for ( SEXP chunk: chunks) {\n+  for (SEXP chunk : chunks) {\n     vec.push_back(Array__from_vector(chunk));\n   }\n   return std::make_shared<arrow::ChunkedArray>(std::move(vec));\ndiff --git a/r/src/Column.cpp b/r/src/Column.cpp\nindex 4b0c597f27..a4e1a5d967 100644\n--- a/r/src/Column.cpp\n+++ b/r/src/Column.cpp\n@@ -28,11 +28,13 @@ int Column__null_count(const std::shared_ptr<arrow::Column>& column) {\n }\n \n // [[Rcpp::export]]\n-std::shared_ptr<arrow::DataType> Column__type(const std::shared_ptr<arrow::Column>& column) {\n+std::shared_ptr<arrow::DataType> Column__type(\n+    const std::shared_ptr<arrow::Column>& column) {\n   return column->type();\n }\n \n // [[Rcpp::export]]\n-std::shared_ptr<arrow::ChunkedArray> Column__data(const std::shared_ptr<arrow::Column>& column) {\n+std::shared_ptr<arrow::ChunkedArray> Column__data(\n+    const std::shared_ptr<arrow::Column>& column) {\n   return column->data();\n }\ndiff --git a/r/src/DataType.cpp b/r/src/DataType.cpp\nindex b038a4956e..00e12eb1ce 100644\n--- a/r/src/DataType.cpp\n+++ b/r/src/DataType.cpp\n@@ -68,7 +68,8 @@ std::shared_ptr<arrow::DataType> Date64__initialize() { return arrow::date64();\n std::shared_ptr<arrow::DataType> Null__initialize() { return arrow::null(); }\n \n // [[Rcpp::export]]\n-std::shared_ptr<arrow::DataType> Decimal128Type__initialize(int32_t precision, int32_t scale) {\n+std::shared_ptr<arrow::DataType> Decimal128Type__initialize(int32_t precision,\n+                                                            int32_t scale) {\n   return arrow::decimal(precision, scale);\n }\n \n@@ -83,7 +84,8 @@ std::shared_ptr<arrow::DataType> Timestamp__initialize1(arrow::TimeUnit::type un\n }\n \n // [[Rcpp::export]]\n-std::shared_ptr<arrow::DataType> Timestamp__initialize2(arrow::TimeUnit::type unit, const std::string& timezone) {\n+std::shared_ptr<arrow::DataType> Timestamp__initialize2(arrow::TimeUnit::type unit,\n+                                                        const std::string& timezone) {\n   return arrow::timestamp(unit, timezone);\n }\n \n@@ -112,10 +114,10 @@ SEXP list__(SEXP x) {\n }\n \n template <typename T>\n-std::vector<std::shared_ptr<T>> List_to_shared_ptr_vector(List x){\n+std::vector<std::shared_ptr<T>> List_to_shared_ptr_vector(List x) {\n   int n = x.size();\n   std::vector<std::shared_ptr<T>> vec;\n-  for( SEXP element: x){\n+  for (SEXP element : x) {\n     vec.push_back(as<std::shared_ptr<T>>(element));\n   }\n   return vec;\n@@ -137,7 +139,8 @@ std::string DataType__name(const std::shared_ptr<arrow::DataType>& type) {\n }\n \n // [[Rcpp::export]]\n-bool DataType__Equals(const std::shared_ptr<arrow::DataType>& lhs, const std::shared_ptr<arrow::DataType>& rhs) {\n+bool DataType__Equals(const std::shared_ptr<arrow::DataType>& lhs,\n+                      const std::shared_ptr<arrow::DataType>& rhs) {\n   return lhs->Equals(*rhs);\n }\n \n@@ -172,17 +175,17 @@ std::string ListType__ToString(const std::shared_ptr<arrow::ListType>& type) {\n }\n \n // [[Rcpp::export]]\n-int FixedWidthType__bit_width(const std::shared_ptr<arrow::FixedWidthType>& type){\n+int FixedWidthType__bit_width(const std::shared_ptr<arrow::FixedWidthType>& type) {\n   return type->bit_width();\n }\n \n // [[Rcpp::export]]\n-arrow::DateUnit DateType__unit(const std::shared_ptr<arrow::DateType>& type){\n+arrow::DateUnit DateType__unit(const std::shared_ptr<arrow::DateType>& type) {\n   return type->unit();\n }\n \n // [[Rcpp::export]]\n-arrow::TimeUnit::type TimeType__unit(const std::shared_ptr<arrow::TimeType>& type){\n+arrow::TimeUnit::type TimeType__unit(const std::shared_ptr<arrow::TimeType>& type) {\n   return type->unit();\n }\n \n@@ -202,11 +205,12 @@ std::string TimestampType__timezone(const std::shared_ptr<arrow::TimestampType>&\n }\n \n // [[Rcpp::export]]\n-arrow::TimeUnit::type TimestampType__unit(const std::shared_ptr<arrow::TimestampType>& type) {\n+arrow::TimeUnit::type TimestampType__unit(\n+    const std::shared_ptr<arrow::TimestampType>& type) {\n   return type->unit();\n }\n \n // [[Rcpp::export]]\n-std::string Object__pointer_address(SEXP obj){\n+std::string Object__pointer_address(SEXP obj) {\n   return tfm::format(\"%p\", EXTPTR_PTR(obj));\n }\ndiff --git a/r/src/MemoryPool.cpp b/r/src/MemoryPool.cpp\nindex ddc1e05485..d0e4c2406d 100644\n--- a/r/src/MemoryPool.cpp\n+++ b/r/src/MemoryPool.cpp\n@@ -20,16 +20,17 @@\n using namespace Rcpp;\n \n // [[Rcpp::export]]\n-std::shared_ptr<arrow::MemoryPool> MemoryPool__default(){\n-  return std::shared_ptr<arrow::MemoryPool>(arrow::default_memory_pool(), NoDelete<arrow::MemoryPool>());\n+std::shared_ptr<arrow::MemoryPool> MemoryPool__default() {\n+  return std::shared_ptr<arrow::MemoryPool>(arrow::default_memory_pool(),\n+                                            NoDelete<arrow::MemoryPool>());\n }\n \n // [[Rcpp::export]]\n-int MemoryPool__bytes_allocated(std::shared_ptr<arrow::MemoryPool> pool){\n+int MemoryPool__bytes_allocated(std::shared_ptr<arrow::MemoryPool> pool) {\n   return pool->bytes_allocated();\n }\n \n // [[Rcpp::export]]\n-int MemoryPool__max_memory(std::shared_ptr<arrow::MemoryPool> pool){\n+int MemoryPool__max_memory(std::shared_ptr<arrow::MemoryPool> pool) {\n   return pool->max_memory();\n }\ndiff --git a/r/src/RecordBatch.cpp b/r/src/RecordBatch.cpp\nindex cfcd2b1661..d4bca93069 100644\n--- a/r/src/RecordBatch.cpp\n+++ b/r/src/RecordBatch.cpp\n@@ -15,41 +15,43 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-#include \"arrow_types.h\"\n #include <arrow/io/file.h>\n-#include <arrow/ipc/writer.h>\n #include <arrow/ipc/reader.h>\n+#include <arrow/ipc/writer.h>\n+#include \"arrow_types.h\"\n \n using namespace Rcpp;\n using namespace arrow;\n \n // [[Rcpp::export]]\n-int RecordBatch__num_columns(const std::shared_ptr<arrow::RecordBatch>& x){\n+int RecordBatch__num_columns(const std::shared_ptr<arrow::RecordBatch>& x) {\n   return x->num_columns();\n }\n \n // [[Rcpp::export]]\n-int RecordBatch__num_rows(const std::shared_ptr<arrow::RecordBatch>& x){\n+int RecordBatch__num_rows(const std::shared_ptr<arrow::RecordBatch>& x) {\n   return x->num_rows();\n }\n \n // [[Rcpp::export]]\n-std::shared_ptr<arrow::Schema> RecordBatch__schema(const std::shared_ptr<arrow::RecordBatch>& x){\n+std::shared_ptr<arrow::Schema> RecordBatch__schema(\n+    const std::shared_ptr<arrow::RecordBatch>& x) {\n   return x->schema();\n }\n \n // [[Rcpp::export]]\n-std::shared_ptr<arrow::Array> RecordBatch__column(const std::shared_ptr<arrow::RecordBatch>& batch, int i){\n+std::shared_ptr<arrow::Array> RecordBatch__column(\n+    const std::shared_ptr<arrow::RecordBatch>& batch, int i) {\n   return batch->column(i);\n }\n \n // [[Rcpp::export]]\n-List RecordBatch__to_dataframe(const std::shared_ptr<arrow::RecordBatch>& batch){\n+List RecordBatch__to_dataframe(const std::shared_ptr<arrow::RecordBatch>& batch) {\n   int nc = batch->num_columns();\n   int nr = batch->num_rows();\n   List tbl(nc);\n   CharacterVector names(nc);\n-  for(int i=0; i<nc; i++) {\n+  for (int i = 0; i < nc; i++) {\n     tbl[i] = Array__as_vector(batch->column(i));\n     names[i] = batch->column_name(i);\n   }\n@@ -75,12 +77,14 @@ std::shared_ptr<arrow::RecordBatch> read_record_batch_(std::string path) {\n }\n \n // [[Rcpp::export]]\n-int RecordBatch__to_file(const std::shared_ptr<arrow::RecordBatch>& batch, std::string path) {\n+int RecordBatch__to_file(const std::shared_ptr<arrow::RecordBatch>& batch,\n+                         std::string path) {\n   std::shared_ptr<arrow::io::OutputStream> stream;\n   std::shared_ptr<arrow::ipc::RecordBatchWriter> file_writer;\n \n   R_ERROR_NOT_OK(arrow::io::FileOutputStream::Open(path, &stream));\n-  R_ERROR_NOT_OK(arrow::ipc::RecordBatchFileWriter::Open(stream.get(), batch->schema(), &file_writer));\n+  R_ERROR_NOT_OK(arrow::ipc::RecordBatchFileWriter::Open(stream.get(), batch->schema(),\n+                                                         &file_writer));\n   R_ERROR_NOT_OK(file_writer->WriteRecordBatch(*batch, true));\n   R_ERROR_NOT_OK(file_writer->Close());\n \n@@ -91,16 +95,17 @@ int RecordBatch__to_file(const std::shared_ptr<arrow::RecordBatch>& batch, std::\n }\n \n // [[Rcpp::export]]\n-std::shared_ptr<arrow::RecordBatch> RecordBatch__from_dataframe(DataFrame tbl){\n+std::shared_ptr<arrow::RecordBatch> RecordBatch__from_dataframe(DataFrame tbl) {\n   CharacterVector names = tbl.names();\n \n   std::vector<std::shared_ptr<arrow::Field>> fields;\n   std::vector<std::shared_ptr<arrow::Array>> arrays;\n \n   int nc = tbl.size();\n-  for(int i=0; i<tbl.size(); i++){\n+  for (int i = 0; i < tbl.size(); i++) {\n     arrays.push_back(Array__from_vector(tbl[i]));\n-    fields.push_back(std::make_shared<arrow::Field>(std::string(names[i]), arrays[i]->type()));\n+    fields.push_back(\n+        std::make_shared<arrow::Field>(std::string(names[i]), arrays[i]->type()));\n   }\n   auto schema = std::make_shared<arrow::Schema>(std::move(fields));\n \n@@ -108,19 +113,22 @@ std::shared_ptr<arrow::RecordBatch> RecordBatch__from_dataframe(DataFrame tbl){\n }\n \n // [[Rcpp::export]]\n-bool RecordBatch__Equals(const std::shared_ptr<arrow::RecordBatch>& self, const std::shared_ptr<arrow::RecordBatch>& other) {\n+bool RecordBatch__Equals(const std::shared_ptr<arrow::RecordBatch>& self,\n+                         const std::shared_ptr<arrow::RecordBatch>& other) {\n   return self->Equals(*other);\n }\n \n // [[Rcpp::export]]\n-std::shared_ptr<arrow::RecordBatch> RecordBatch__RemoveColumn(const std::shared_ptr<arrow::RecordBatch>& batch, int i) {\n+std::shared_ptr<arrow::RecordBatch> RecordBatch__RemoveColumn(\n+    const std::shared_ptr<arrow::RecordBatch>& batch, int i) {\n   std::shared_ptr<arrow::RecordBatch> res;\n   R_ERROR_NOT_OK(batch->RemoveColumn(i, &res));\n   return res;\n }\n \n // [[Rcpp::export]]\n-std::string RecordBatch__column_name(const std::shared_ptr<arrow::RecordBatch>& batch, int i) {\n+std::string RecordBatch__column_name(const std::shared_ptr<arrow::RecordBatch>& batch,\n+                                     int i) {\n   return batch->column_name(i);\n }\n \n@@ -128,18 +136,20 @@ std::string RecordBatch__column_name(const std::shared_ptr<arrow::RecordBatch>&\n CharacterVector RecordBatch__names(const std::shared_ptr<arrow::RecordBatch>& batch) {\n   int n = batch->num_columns();\n   CharacterVector names(n);\n-  for (int i=0; i<n; i++) {\n+  for (int i = 0; i < n; i++) {\n     names[i] = batch->column_name(i);\n   }\n   return names;\n }\n \n // [[Rcpp::export]]\n-std::shared_ptr<arrow::RecordBatch> RecordBatch__Slice1(std::shared_ptr<arrow::RecordBatch>& self, int offset) {\n+std::shared_ptr<arrow::RecordBatch> RecordBatch__Slice1(\n+    std::shared_ptr<arrow::RecordBatch>& self, int offset) {\n   return self->Slice(offset);\n }\n \n // [[Rcpp::export]]\n-std::shared_ptr<arrow::RecordBatch> RecordBatch__Slice2(std::shared_ptr<arrow::RecordBatch>& self, int offset, int length) {\n+std::shared_ptr<arrow::RecordBatch> RecordBatch__Slice2(\n+    std::shared_ptr<arrow::RecordBatch>& self, int offset, int length) {\n   return self->Slice(offset, length);\n }\ndiff --git a/r/src/Table.cpp b/r/src/Table.cpp\nindex 5917818ab6..52227d5861 100644\n--- a/r/src/Table.cpp\n+++ b/r/src/Table.cpp\n@@ -15,35 +15,33 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-#include \"arrow_types.h\"\n #include <arrow/io/file.h>\n-#include <arrow/ipc/writer.h>\n #include <arrow/ipc/reader.h>\n+#include <arrow/ipc/writer.h>\n+#include \"arrow_types.h\"\n \n using namespace Rcpp;\n using namespace arrow;\n \n // [[Rcpp::export]]\n-std::shared_ptr<arrow::Table> Table__from_dataframe(DataFrame tbl){\n+std::shared_ptr<arrow::Table> Table__from_dataframe(DataFrame tbl) {\n   auto rb = RecordBatch__from_dataframe(tbl);\n \n   std::shared_ptr<arrow::Table> out;\n-  R_ERROR_NOT_OK(arrow::Table::FromRecordBatches({ std::move(rb) }, &out));\n+  R_ERROR_NOT_OK(arrow::Table::FromRecordBatches({std::move(rb)}, &out));\n   return out;\n }\n \n // [[Rcpp::export]]\n-int Table__num_columns(const std::shared_ptr<arrow::Table>& x){\n+int Table__num_columns(const std::shared_ptr<arrow::Table>& x) {\n   return x->num_columns();\n }\n \n // [[Rcpp::export]]\n-int Table__num_rows(const std::shared_ptr<arrow::Table>& x){\n-  return x->num_rows();\n-}\n+int Table__num_rows(const std::shared_ptr<arrow::Table>& x) { return x->num_rows(); }\n \n // [[Rcpp::export]]\n-std::shared_ptr<arrow::Schema> Table__schema(const std::shared_ptr<arrow::Table>& x){\n+std::shared_ptr<arrow::Schema> Table__schema(const std::shared_ptr<arrow::Table>& x) {\n   return x->schema();\n }\n \n@@ -53,7 +51,8 @@ int Table__to_file(const std::shared_ptr<arrow::Table>& table, std::string path)\n   std::shared_ptr<arrow::ipc::RecordBatchWriter> file_writer;\n \n   R_ERROR_NOT_OK(arrow::io::FileOutputStream::Open(path, &stream));\n-  R_ERROR_NOT_OK(arrow::ipc::RecordBatchFileWriter::Open(stream.get(), table->schema(), &file_writer));\n+  R_ERROR_NOT_OK(arrow::ipc::RecordBatchFileWriter::Open(stream.get(), table->schema(),\n+                                                         &file_writer));\n   R_ERROR_NOT_OK(file_writer->WriteTable(*table));\n   R_ERROR_NOT_OK(file_writer->Close());\n \n@@ -73,23 +72,23 @@ std::shared_ptr<arrow::Table> read_table_(std::string path) {\n \n   int num_batches = rbf_reader->num_record_batches();\n   std::vector<std::shared_ptr<arrow::RecordBatch>> batches(num_batches);\n-  for (int i=0; i<num_batches; i++) {\n+  for (int i = 0; i < num_batches; i++) {\n     R_ERROR_NOT_OK(rbf_reader->ReadRecordBatch(i, &batches[i]));\n   }\n \n   std::shared_ptr<arrow::Table> table;\n-  R_ERROR_NOT_OK(arrow::Table::FromRecordBatches(std::move(batches), &table)) ;\n+  R_ERROR_NOT_OK(arrow::Table::FromRecordBatches(std::move(batches), &table));\n   R_ERROR_NOT_OK(stream->Close());\n   return table;\n }\n \n // [[Rcpp::export]]\n-List Table__to_dataframe(const std::shared_ptr<arrow::Table>& table){\n+List Table__to_dataframe(const std::shared_ptr<arrow::Table>& table) {\n   int nc = table->num_columns();\n   int nr = table->num_rows();\n   List tbl(nc);\n   CharacterVector names(nc);\n-  for(int i=0; i<nc; i++) {\n+  for (int i = 0; i < nc; i++) {\n     auto column = table->column(i);\n     tbl[i] = ChunkedArray__as_vector(column->data());\n     names[i] = column->name();\n@@ -101,6 +100,7 @@ List Table__to_dataframe(const std::shared_ptr<arrow::Table>& table){\n }\n \n // [[Rcpp::export]]\n-std::shared_ptr<arrow::Column> Table__column(const std::shared_ptr<arrow::Table>& table, int i) {\n+std::shared_ptr<arrow::Column> Table__column(const std::shared_ptr<arrow::Table>& table,\n+                                             int i) {\n   return table->column(i);\n }\ndiff --git a/r/src/array.cpp b/r/src/array.cpp\nindex 3a6b60e569..02c52aad35 100644\n--- a/r/src/array.cpp\n+++ b/r/src/array.cpp\n@@ -20,30 +20,27 @@\n using namespace Rcpp;\n using namespace arrow;\n \n-namespace arrow{\n-namespace r{\n+namespace arrow {\n+namespace r {\n \n-template <int RTYPE, typename Vec = Rcpp::Vector<RTYPE> >\n+template <int RTYPE, typename Vec = Rcpp::Vector<RTYPE>>\n class SimpleRBuffer : public arrow::Buffer {\n-public:\n+ public:\n+  SimpleRBuffer(Vec vec)\n+      : Buffer(reinterpret_cast<const uint8_t*>(vec.begin()),\n+               vec.size() * sizeof(typename Vec::stored_type)),\n+        vec_(vec) {}\n \n-  SimpleRBuffer(Vec vec) :\n-    Buffer(reinterpret_cast<const uint8_t*>(vec.begin()), vec.size() * sizeof(typename Vec::stored_type)),\n-    vec_(vec)\n-  {}\n-\n-private:\n+ private:\n   // vec_ holds the memory\n   Vec vec_;\n };\n \n template <int RTYPE, typename Type>\n-std::shared_ptr<arrow::Array> SimpleArray(SEXP x){\n+std::shared_ptr<arrow::Array> SimpleArray(SEXP x) {\n   Rcpp::Vector<RTYPE> vec(x);\n-  std::vector<std::shared_ptr<arrow::Buffer>> buffers {\n-    nullptr,\n-    std::make_shared<SimpleRBuffer<RTYPE>>(vec)\n-  };\n+  std::vector<std::shared_ptr<arrow::Buffer>> buffers{\n+      nullptr, std::make_shared<SimpleRBuffer<RTYPE>>(vec)};\n \n   int null_count = 0;\n   if (RTYPE != RAWSXP) {\n@@ -53,18 +50,19 @@ std::shared_ptr<arrow::Array> SimpleArray(SEXP x){\n     if (first_na < vec.end()) {\n       R_ERROR_NOT_OK(arrow::AllocateBuffer(vec.size(), &null_bitmap));\n       auto null_bitmap_data = null_bitmap->mutable_data();\n-      arrow::internal::FirstTimeBitmapWriter bitmap_writer(null_bitmap_data, 0, vec.size());\n+      arrow::internal::FirstTimeBitmapWriter bitmap_writer(null_bitmap_data, 0,\n+                                                           vec.size());\n \n       // first loop to clear all the bits before the first NA\n       auto j = std::distance(vec.begin(), first_na);\n       int i = 0;\n-      for( ; i < j; i++, bitmap_writer.Next()) {\n+      for (; i < j; i++, bitmap_writer.Next()) {\n         bitmap_writer.Set();\n       }\n \n       // then finish\n-      for( ; i < vec.size(); i++, bitmap_writer.Next()) {\n-        if (Rcpp::Vector<RTYPE>::is_na(vec[i]) ) {\n+      for (; i < vec.size(); i++, bitmap_writer.Next()) {\n+        if (Rcpp::Vector<RTYPE>::is_na(vec[i])) {\n           bitmap_writer.Clear();\n           null_count++;\n         } else {\n@@ -78,31 +76,27 @@ std::shared_ptr<arrow::Array> SimpleArray(SEXP x){\n   }\n \n   auto data = ArrayData::Make(\n-    std::make_shared<Type>(),\n-    LENGTH(x),\n-    std::move(buffers),\n-    null_count,\n-    0 /*offset*/\n+      std::make_shared<Type>(), LENGTH(x), std::move(buffers), null_count, 0 /*offset*/\n   );\n \n   // return the right Array class\n   return std::make_shared<arrow::NumericArray<Type>>(data);\n }\n \n-}\n-}\n+}  // namespace r\n+}  // namespace arrow\n \n // [[Rcpp::export]]\n-std::shared_ptr<arrow::Array> Array__from_vector(SEXP x){\n-  switch(TYPEOF(x)){\n+std::shared_ptr<arrow::Array> Array__from_vector(SEXP x) {\n+  switch (TYPEOF(x)) {\n     case INTSXP:\n       if (Rf_isFactor(x)) {\n         break;\n       }\n-    return arrow::r::SimpleArray<INTSXP, arrow::Int32Type>(x);\n+      return arrow::r::SimpleArray<INTSXP, arrow::Int32Type>(x);\n     case REALSXP:\n       // TODO: Dates, ...\n-    return arrow::r::SimpleArray<REALSXP, arrow::DoubleType>(x);\n+      return arrow::r::SimpleArray<REALSXP, arrow::DoubleType>(x);\n     case RAWSXP:\n       return arrow::r::SimpleArray<RAWSXP, arrow::Int8Type>(x);\n     default:\n@@ -113,11 +107,11 @@ std::shared_ptr<arrow::Array> Array__from_vector(SEXP x){\n   return nullptr;\n }\n \n-\n template <int RTYPE>\n-inline SEXP simple_Array_to_Vector(const std::shared_ptr<arrow::Array>& array ){\n+inline SEXP simple_Array_to_Vector(const std::shared_ptr<arrow::Array>& array) {\n   using stored_type = typename Rcpp::Vector<RTYPE>::stored_type;\n-  auto start = reinterpret_cast<const stored_type*>(array->data()->buffers[1]->data() + array->offset() * sizeof(stored_type));\n+  auto start = reinterpret_cast<const stored_type*>(\n+      array->data()->buffers[1]->data() + array->offset() * sizeof(stored_type));\n \n   size_t n = array->length();\n   Rcpp::Vector<RTYPE> vec(start, start + n);\n@@ -125,10 +119,9 @@ inline SEXP simple_Array_to_Vector(const std::shared_ptr<arrow::Array>& array ){\n     // TODO: not sure what to do with RAWSXP since\n     //       R raw vector do not have a concept of missing data\n \n-    arrow::internal::BitmapReader bitmap_reader(\n-        array->null_bitmap()->data(), array->offset(), n\n-    );\n-    for (size_t i=0; i < n; i++, bitmap_reader.Next()) {\n+    arrow::internal::BitmapReader bitmap_reader(array->null_bitmap()->data(),\n+                                                array->offset(), n);\n+    for (size_t i = 0; i < n; i++, bitmap_reader.Next()) {\n       if (bitmap_reader.IsNotSet()) {\n         vec[i] = Rcpp::Vector<RTYPE>::get_na();\n       }\n@@ -139,13 +132,16 @@ inline SEXP simple_Array_to_Vector(const std::shared_ptr<arrow::Array>& array ){\n }\n \n // [[Rcpp::export]]\n-SEXP Array__as_vector(const std::shared_ptr<arrow::Array>& array){\n-  switch(array->type_id()){\n-  case Type::INT8: return simple_Array_to_Vector<RAWSXP>(array);\n-  case Type::INT32: return simple_Array_to_Vector<INTSXP>(array);\n-  case Type::DOUBLE: return simple_Array_to_Vector<REALSXP>(array);\n-  default:\n-    break;\n+SEXP Array__as_vector(const std::shared_ptr<arrow::Array>& array) {\n+  switch (array->type_id()) {\n+    case Type::INT8:\n+      return simple_Array_to_Vector<RAWSXP>(array);\n+    case Type::INT32:\n+      return simple_Array_to_Vector<INTSXP>(array);\n+    case Type::DOUBLE:\n+      return simple_Array_to_Vector<REALSXP>(array);\n+    default:\n+      break;\n   }\n \n   stop(tfm::format(\"cannot handle Array of type %d\", array->type_id()));\n@@ -153,72 +149,71 @@ SEXP Array__as_vector(const std::shared_ptr<arrow::Array>& array){\n }\n \n // [[Rcpp::export]]\n-std::shared_ptr<arrow::Array> Array__Slice1(const std::shared_ptr<arrow::Array>& array, int offset) {\n+std::shared_ptr<arrow::Array> Array__Slice1(const std::shared_ptr<arrow::Array>& array,\n+                                            int offset) {\n   return array->Slice(offset);\n }\n \n // [[Rcpp::export]]\n-std::shared_ptr<arrow::Array> Array__Slice2(const std::shared_ptr<arrow::Array>& array, int offset, int length) {\n+std::shared_ptr<arrow::Array> Array__Slice2(const std::shared_ptr<arrow::Array>& array,\n+                                            int offset, int length) {\n   return array->Slice(offset, length);\n }\n \n // [[Rcpp::export]]\n-bool Array__IsNull(const std::shared_ptr<arrow::Array>& x, int i){\n-  return x->IsNull(i);\n-}\n+bool Array__IsNull(const std::shared_ptr<arrow::Array>& x, int i) { return x->IsNull(i); }\n \n // [[Rcpp::export]]\n-bool Array__IsValid(const std::shared_ptr<arrow::Array>& x, int i){\n+bool Array__IsValid(const std::shared_ptr<arrow::Array>& x, int i) {\n   return x->IsValid(i);\n }\n \n // [[Rcpp::export]]\n-int Array__length(const std::shared_ptr<arrow::Array>& x){\n-  return x->length();\n-}\n+int Array__length(const std::shared_ptr<arrow::Array>& x) { return x->length(); }\n \n // [[Rcpp::export]]\n-int Array__offset(const std::shared_ptr<arrow::Array>& x){\n-  return x->offset();\n-}\n+int Array__offset(const std::shared_ptr<arrow::Array>& x) { return x->offset(); }\n \n // [[Rcpp::export]]\n-int Array__null_count(const std::shared_ptr<arrow::Array>& x){\n-  return x->null_count();\n-}\n+int Array__null_count(const std::shared_ptr<arrow::Array>& x) { return x->null_count(); }\n \n // [[Rcpp::export]]\n-std::shared_ptr<arrow::DataType> Array__type(const std::shared_ptr<arrow::Array>& x){\n+std::shared_ptr<arrow::DataType> Array__type(const std::shared_ptr<arrow::Array>& x) {\n   return x->type();\n }\n \n // [[Rcpp::export]]\n-std::string Array__ToString(const std::shared_ptr<arrow::Array>& x){\n+std::string Array__ToString(const std::shared_ptr<arrow::Array>& x) {\n   return x->ToString();\n }\n \n // [[Rcpp::export]]\n-arrow::Type::type Array__type_id(const std::shared_ptr<arrow::Array>& x){\n+arrow::Type::type Array__type_id(const std::shared_ptr<arrow::Array>& x) {\n   return x->type_id();\n }\n \n // [[Rcpp::export]]\n-bool Array__Equals(const std::shared_ptr<arrow::Array>& lhs, const std::shared_ptr<arrow::Array>& rhs){\n+bool Array__Equals(const std::shared_ptr<arrow::Array>& lhs,\n+                   const std::shared_ptr<arrow::Array>& rhs) {\n   return lhs->Equals(rhs);\n }\n \n // [[Rcpp::export]]\n-bool Array__ApproxEquals(const std::shared_ptr<arrow::Array>& lhs, const std::shared_ptr<arrow::Array>& rhs){\n+bool Array__ApproxEquals(const std::shared_ptr<arrow::Array>& lhs,\n+                         const std::shared_ptr<arrow::Array>& rhs) {\n   return lhs->ApproxEquals(rhs);\n }\n \n // [[Rcpp::export]]\n-std::shared_ptr<arrow::ArrayData> Array__data(const std::shared_ptr<arrow::Array>& array){\n+std::shared_ptr<arrow::ArrayData> Array__data(\n+    const std::shared_ptr<arrow::Array>& array) {\n   return array->data();\n }\n \n // [[Rcpp::export]]\n-bool Array__RangeEquals(const std::shared_ptr<arrow::Array>& self, const std::shared_ptr<arrow::Array>&other, int start_idx, int end_idx, int other_start_idx) {\n+bool Array__RangeEquals(const std::shared_ptr<arrow::Array>& self,\n+                        const std::shared_ptr<arrow::Array>& other, int start_idx,\n+                        int end_idx, int other_start_idx) {\n   return self->RangeEquals(*other, start_idx, end_idx, other_start_idx);\n }\n \n@@ -230,8 +225,9 @@ LogicalVector Array__Mask(const std::shared_ptr<arrow::Array>& array) {\n \n   auto n = array->length();\n   LogicalVector res(no_init(n));\n-  arrow::internal::BitmapReader bitmap_reader(array->null_bitmap()->data(), array->offset(), n);\n-  for (size_t i=0; i < array->length(); i++, bitmap_reader.Next()) {\n+  arrow::internal::BitmapReader bitmap_reader(array->null_bitmap()->data(),\n+                                              array->offset(), n);\n+  for (size_t i = 0; i < array->length(); i++, bitmap_reader.Next()) {\n     res[i] = bitmap_reader.IsSet();\n   }\n   return res;\ndiff --git a/r/src/arrow_types.h b/r/src/arrow_types.h\nindex 66754edd36..ad49c90a5f 100644\n--- a/r/src/arrow_types.h\n+++ b/r/src/arrow_types.h\n@@ -23,39 +23,42 @@\n #include <arrow/api.h>\n #include <arrow/type.h>\n \n-#define R_ERROR_NOT_OK(s) do { if(!s.ok()) Rcpp::stop(s.ToString()); } while (0);\n+#define R_ERROR_NOT_OK(s)                  \\\n+  do {                                     \\\n+    if (!s.ok()) Rcpp::stop(s.ToString()); \\\n+  } while (0);\n \n template <typename T>\n-struct NoDelete{\n+struct NoDelete {\n   inline void operator()(T* ptr){};\n };\n \n-namespace Rcpp{\n-namespace traits{\n+namespace Rcpp {\n+namespace traits {\n \n-struct wrap_type_shared_ptr_tag{};\n-struct wrap_type_static_ptr_tag{};\n+struct wrap_type_shared_ptr_tag {};\n+struct wrap_type_static_ptr_tag {};\n \n template <typename T>\n-struct wrap_type_traits<std::shared_ptr<T>>{\n+struct wrap_type_traits<std::shared_ptr<T>> {\n   using wrap_category = wrap_type_shared_ptr_tag;\n };\n \n template <typename T>\n class Exporter<std::shared_ptr<T>>;\n \n-}\n-namespace internal{\n+}  // namespace traits\n+namespace internal {\n \n template <typename T>\n-inline SEXP wrap_dispatch(const T& x, Rcpp::traits::wrap_type_shared_ptr_tag) ;\n+inline SEXP wrap_dispatch(const T& x, Rcpp::traits::wrap_type_shared_ptr_tag);\n \n template <typename T>\n-inline SEXP wrap_dispatch(const T& x, Rcpp::traits::wrap_type_static_ptr_tag) ;\n+inline SEXP wrap_dispatch(const T& x, Rcpp::traits::wrap_type_static_ptr_tag);\n \n-}\n+}  // namespace internal\n \n-}\n+}  // namespace Rcpp\n \n #include <Rcpp.h>\n \n@@ -64,43 +67,40 @@ RCPP_EXPOSED_ENUM_NODECL(arrow::DateUnit)\n RCPP_EXPOSED_ENUM_NODECL(arrow::TimeUnit::type)\n RCPP_EXPOSED_ENUM_NODECL(arrow::StatusCode)\n \n-namespace Rcpp{\n-namespace traits{\n+namespace Rcpp {\n+namespace traits {\n \n template <typename T>\n class Exporter<std::shared_ptr<T>> {\n-public:\n-  Exporter(SEXP self) : xp(extract_xp(self)){}\n+ public:\n+  Exporter(SEXP self) : xp(extract_xp(self)) {}\n \n-  inline std::shared_ptr<T> get(){\n-    return *Rcpp::XPtr<std::shared_ptr<T>>(xp);\n-  }\n+  inline std::shared_ptr<T> get() { return *Rcpp::XPtr<std::shared_ptr<T>>(xp); }\n \n-private:\n+ private:\n   SEXP xp;\n \n-  SEXP extract_xp(SEXP self){\n+  SEXP extract_xp(SEXP self) {\n     static SEXP symb_xp = Rf_install(\".:xp:.\");\n-    return Rf_findVarInFrame(self, symb_xp) ;\n+    return Rf_findVarInFrame(self, symb_xp);\n   }\n-\n };\n \n-}\n+}  // namespace traits\n \n-namespace internal{\n+namespace internal {\n \n template <typename T>\n-inline SEXP wrap_dispatch(const T& x, Rcpp::traits::wrap_type_shared_ptr_tag){\n-  return Rcpp::XPtr<std::shared_ptr<typename T::element_type>>(new std::shared_ptr<typename T::element_type>(x));\n+inline SEXP wrap_dispatch(const T& x, Rcpp::traits::wrap_type_shared_ptr_tag) {\n+  return Rcpp::XPtr<std::shared_ptr<typename T::element_type>>(\n+      new std::shared_ptr<typename T::element_type>(x));\n }\n \n-}\n+}  // namespace internal\n \n-}\n+}  // namespace Rcpp\n \n SEXP ChunkedArray__as_vector(const std::shared_ptr<arrow::ChunkedArray>& chunked_array);\n SEXP Array__as_vector(const std::shared_ptr<arrow::Array>& array);\n std::shared_ptr<arrow::Array> Array__from_vector(SEXP x);\n std::shared_ptr<arrow::RecordBatch> RecordBatch__from_dataframe(Rcpp::DataFrame tbl);\n-\ndiff --git a/r/src/field.cpp b/r/src/field.cpp\nindex 7ea96a33e2..88ae286bab 100644\n--- a/r/src/field.cpp\n+++ b/r/src/field.cpp\n@@ -22,7 +22,9 @@\n using namespace Rcpp;\n \n // [[Rcpp::export]]\n-std::shared_ptr<arrow::Field> Field__initialize(const std::string& name, const std::shared_ptr<arrow::DataType>& type, bool nullable = true) {\n+std::shared_ptr<arrow::Field> Field__initialize(\n+    const std::string& name, const std::shared_ptr<arrow::DataType>& type,\n+    bool nullable = true) {\n   return arrow::field(name, type, nullable);\n }\n \n@@ -32,11 +34,7 @@ std::string Field__ToString(const std::shared_ptr<arrow::Field>& type) {\n }\n \n // [[Rcpp::export]]\n-std::string Field__name(std::shared_ptr<arrow::Field> type) {\n-  return type->name();\n-}\n+std::string Field__name(std::shared_ptr<arrow::Field> type) { return type->name(); }\n \n // [[Rcpp::export]]\n-bool Field__nullable(std::shared_ptr<arrow::Field> type) {\n-  return type->nullable();\n-}\n+bool Field__nullable(std::shared_ptr<arrow::Field> type) { return type->nullable(); }\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-26T14:01:54.782+0000",
                    "updated": "2018-09-26T14:01:54.782+0000",
                    "started": "2018-09-26T14:01:54.781+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "148141",
                    "issueId": "13186983"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186983/worklog/148185",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm opened a new pull request #2635: ARROW-3313: [R] Follow-up: install clang-format in R CI entry\nURL: https://github.com/apache/arrow/pull/2635\n \n \n   I thought this build passed successfully but it did not\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-26T16:28:05.216+0000",
                    "updated": "2018-09-26T16:28:05.216+0000",
                    "started": "2018-09-26T16:28:05.216+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "148185",
                    "issueId": "13186983"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186983/worklog/148656",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2635: ARROW-3313: [R] Follow-up: install clang-format in R CI entry\nURL: https://github.com/apache/arrow/pull/2635\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/.travis.yml b/.travis.yml\nindex 9e347c1a13..10191de881 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -249,13 +249,21 @@ matrix:\n   - language: r\n     cache: packages\n     latex: false\n-    before_script:\n-    - if [ $ARROW_CI_R_AFFECTED != \"1\" ]; then exit; fi\n     before_install:\n+    # Have to copy-paste this here because of how R's build steps work\n+    - eval `python $TRAVIS_BUILD_DIR/ci/detect-changes.py`\n+    - if [ $ARROW_CI_R_AFFECTED != \"1\" ]; then exit; fi\n+    - |\n+        if [ $TRAVIS_OS_NAME == \"linux\" ]; then\n+          sudo bash -c \"echo -e 'Acquire::Retries 10; Acquire::http::Timeout \\\"20\\\";' > /etc/apt/apt.conf.d/99-travis-retry\"\n+          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test\n+          sudo apt-get update -qq\n+        fi\n     - $TRAVIS_BUILD_DIR/ci/travis_install_linux.sh\n     - $TRAVIS_BUILD_DIR/ci/travis_before_script_cpp.sh --only-library\n     - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$TRAVIS_BUILD_DIR/cpp-install/lib\n     - export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$TRAVIS_BUILD_DIR/cpp-install/lib/pkgconfig\n+    - $TRAVIS_BUILD_DIR/ci/travis_install_clang_tools.sh\n     - $TRAVIS_BUILD_DIR/ci/travis_lint.sh\n     - pushd ${TRAVIS_BUILD_DIR}/r\n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-27T09:07:26.686+0000",
                    "updated": "2018-09-27T09:07:26.686+0000",
                    "started": "2018-09-27T09:07:26.685+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "148656",
                    "issueId": "13186983"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 3000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@23f11b81[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@41f1290d[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@50ef5736[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@189ea567[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@61dec734[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5131aa78[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7b4d018f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1695361c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@165a49d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5d5bbca3[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e899ffe[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@719365e5[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 3000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Sep 26 14:01:40 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-09-26T14:01:40.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3313/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-09-24T10:28:18.000+0000",
        "updated": "2018-09-27T09:07:26.000+0000",
        "timeoriginalestimate": null,
        "description": "Comment to ARROW-3282",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 3000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Run clang-format, cpplint checks on R C++ code",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13186983/comment/16628815",
                    "id": "16628815",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2628\n[https://github.com/apache/arrow/pull/2628]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-09-26T14:01:40.361+0000",
                    "updated": "2018-09-26T14:01:40.361+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3yewn:",
        "customfield_12314139": null
    }
}