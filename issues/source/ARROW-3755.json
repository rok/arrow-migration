{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13197608",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197608",
    "key": "ARROW-3755",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332430",
                "id": "12332430",
                "name": "GLib"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 1200,
            "total": 1200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 1200,
            "total": 1200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3755/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 2,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197608/worklog/167727",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou opened a new pull request #3002: ARROW-3755: [GLib] Add GArrowCompressedInputStream and GArrowCompressedOutputStream\nURL: https://github.com/apache/arrow/pull/3002\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-20T11:48:52.245+0000",
                    "updated": "2018-11-20T11:48:52.245+0000",
                    "started": "2018-11-20T11:48:52.244+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167727",
                    "issueId": "13197608"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197608/worklog/167997",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy closed pull request #3002: ARROW-3755: [GLib] Add GArrowCompressedInputStream and GArrowCompressedOutputStream\nURL: https://github.com/apache/arrow/pull/3002\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/c_glib/arrow-glib/input-stream.cpp b/c_glib/arrow-glib/input-stream.cpp\nindex d2e6366ade..bd78ca02c0 100644\n--- a/c_glib/arrow-glib/input-stream.cpp\n+++ b/c_glib/arrow-glib/input-stream.cpp\n@@ -26,6 +26,7 @@\n #include <arrow/ipc/reader.h>\n \n #include <arrow-glib/buffer.hpp>\n+#include <arrow-glib/codec.hpp>\n #include <arrow-glib/error.hpp>\n #include <arrow-glib/file.hpp>\n #include <arrow-glib/input-stream.hpp>\n@@ -52,6 +53,9 @@ G_BEGIN_DECLS\n  *\n  * #GArrowGIOInputStream is a class for `GInputStream` based input\n  * stream.\n+ *\n+ * #GArrowCompressedInputStream is a class to read data from\n+ * compressed input stream.\n  */\n \n typedef struct GArrowInputStreamPrivate_ {\n@@ -718,6 +722,147 @@ garrow_gio_input_stream_get_raw(GArrowGIOInputStream *input_stream)\n   return gio_input_stream;\n }\n \n+typedef struct GArrowCompressedInputStreamPrivate_ {\n+  GArrowCodec *codec;\n+  GArrowInputStream *raw;\n+} GArrowCompressedInputStreamPrivate;\n+\n+enum {\n+  PROP_CODEC = 1,\n+  PROP_RAW\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowCompressedInputStream,\n+                           garrow_compressed_input_stream,\n+                           GARROW_TYPE_INPUT_STREAM)\n+\n+#define GARROW_COMPRESSED_INPUT_STREAM_GET_PRIVATE(object)      \\\n+  static_cast<GArrowCompressedInputStreamPrivate *>(            \\\n+    garrow_compressed_input_stream_get_instance_private(        \\\n+      GARROW_COMPRESSED_INPUT_STREAM(object)))\n+\n+static void\n+garrow_compressed_input_stream_dispose(GObject *object)\n+{\n+  auto priv = GARROW_COMPRESSED_INPUT_STREAM_GET_PRIVATE(object);\n+\n+  if (priv->codec) {\n+    g_object_unref(priv->codec);\n+    priv->codec = NULL;\n+  }\n+\n+  if (priv->raw) {\n+    g_object_unref(priv->raw);\n+    priv->raw = NULL;\n+  }\n+\n+  G_OBJECT_CLASS(garrow_compressed_input_stream_parent_class)->dispose(object);\n+}\n+\n+static void\n+garrow_compressed_input_stream_set_property(GObject *object,\n+                                            guint prop_id,\n+                                            const GValue *value,\n+                                            GParamSpec *pspec)\n+{\n+  auto priv = GARROW_COMPRESSED_INPUT_STREAM_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_CODEC:\n+    priv->codec = GARROW_CODEC(g_value_dup_object(value));\n+    break;\n+  case PROP_RAW:\n+    priv->raw = GARROW_INPUT_STREAM(g_value_dup_object(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_compressed_input_stream_get_property(GObject *object,\n+                                            guint prop_id,\n+                                            GValue *value,\n+                                            GParamSpec *pspec)\n+{\n+  auto priv = GARROW_COMPRESSED_INPUT_STREAM_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_CODEC:\n+    g_value_set_object(value, priv->codec);\n+    break;\n+  case PROP_RAW:\n+    g_value_set_object(value, priv->raw);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_compressed_input_stream_init(GArrowCompressedInputStream *object)\n+{\n+}\n+\n+static void\n+garrow_compressed_input_stream_class_init(GArrowCompressedInputStreamClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->dispose      = garrow_compressed_input_stream_dispose;\n+  gobject_class->set_property = garrow_compressed_input_stream_set_property;\n+  gobject_class->get_property = garrow_compressed_input_stream_get_property;\n+\n+  spec = g_param_spec_object(\"codec\",\n+                             \"Codec\",\n+                             \"The codec for the stream\",\n+                             GARROW_TYPE_CODEC,\n+                             static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                      G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_CODEC, spec);\n+\n+  spec = g_param_spec_object(\"raw\",\n+                             \"Raw\",\n+                             \"The underlying raw input stream\",\n+                             GARROW_TYPE_INPUT_STREAM,\n+                             static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                      G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_RAW, spec);\n+}\n+\n+/**\n+ * garrow_compressed_input_stream_new:\n+ * @codec: A #GArrowCodec for compressed data in the @raw.\n+ * @raw: A #GArrowInputStream that contains compressed data.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: A newly created #GArrowCompressedInputStream.\n+ *\n+ * Since: 0.12.0\n+ */\n+GArrowCompressedInputStream *\n+garrow_compressed_input_stream_new(GArrowCodec *codec,\n+                                   GArrowInputStream *raw,\n+                                   GError **error)\n+{\n+  auto arrow_codec = garrow_codec_get_raw(codec);\n+  auto arrow_raw = garrow_input_stream_get_raw(raw);\n+  std::shared_ptr<arrow::io::CompressedInputStream> arrow_stream;\n+  auto status = arrow::io::CompressedInputStream::Make(arrow_codec,\n+                                                       arrow_raw,\n+                                                       &arrow_stream);\n+  if (garrow_error_check(error, status, \"[compressed-input-stream][new]\")) {\n+    return garrow_compressed_input_stream_new_raw(&arrow_stream,\n+                                                  codec,\n+                                                  raw);\n+  } else {\n+    return NULL;\n+  }\n+}\n \n G_END_DECLS\n \n@@ -787,3 +932,27 @@ garrow_memory_mapped_input_stream_new_raw(std::shared_ptr<arrow::io::MemoryMappe\n   auto memory_mapped_input_stream = GARROW_MEMORY_MAPPED_INPUT_STREAM(object);\n   return memory_mapped_input_stream;\n }\n+\n+GArrowCompressedInputStream *\n+garrow_compressed_input_stream_new_raw(std::shared_ptr<arrow::io::CompressedInputStream> *arrow_raw,\n+                                       GArrowCodec *codec,\n+                                       GArrowInputStream *raw)\n+{\n+  auto compressed_input_stream =\n+    g_object_new(GARROW_TYPE_COMPRESSED_INPUT_STREAM,\n+                 \"input-stream\", arrow_raw,\n+                 \"codec\", codec,\n+                 \"raw\", raw,\n+                 NULL);\n+  return GARROW_COMPRESSED_INPUT_STREAM(compressed_input_stream);\n+}\n+\n+std::shared_ptr<arrow::io::InputStream>\n+garrow_compressed_input_stream_get_raw(GArrowCompressedInputStream *compressed_input_stream)\n+{\n+  auto input_stream = GARROW_INPUT_STREAM(compressed_input_stream);\n+  auto arrow_input_stream = garrow_input_stream_get_raw(input_stream);\n+  auto arrow_compressed_input_stream =\n+    std::static_pointer_cast<arrow::io::CompressedInputStream>(arrow_input_stream);\n+  return arrow_compressed_input_stream->raw();\n+}\ndiff --git a/c_glib/arrow-glib/input-stream.h b/c_glib/arrow-glib/input-stream.h\nindex 840f27d3c4..1a4c9cf47c 100644\n--- a/c_glib/arrow-glib/input-stream.h\n+++ b/c_glib/arrow-glib/input-stream.h\n@@ -22,6 +22,7 @@\n #include <gio/gio.h>\n \n #include <arrow-glib/buffer.h>\n+#include <arrow-glib/codec.h>\n #include <arrow-glib/tensor.h>\n \n G_BEGIN_DECLS\n@@ -183,4 +184,21 @@ GType garrow_gio_input_stream_get_type(void) G_GNUC_CONST;\n GArrowGIOInputStream *garrow_gio_input_stream_new(GInputStream *gio_input_stream);\n GInputStream *garrow_gio_input_stream_get_raw(GArrowGIOInputStream *input_stream);\n \n+#define GARROW_TYPE_COMPRESSED_INPUT_STREAM     \\\n+  (garrow_compressed_input_stream_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowCompressedInputStream,\n+                         garrow_compressed_input_stream,\n+                         GARROW,\n+                         COMPRESSED_INPUT_STREAM,\n+                         GArrowInputStream)\n+struct _GArrowCompressedInputStreamClass\n+{\n+  GArrowInputStreamClass parent_class;\n+};\n+\n+GArrowCompressedInputStream *\n+garrow_compressed_input_stream_new(GArrowCodec *codec,\n+                                   GArrowInputStream *raw,\n+                                   GError **error);\n+\n G_END_DECLS\ndiff --git a/c_glib/arrow-glib/input-stream.hpp b/c_glib/arrow-glib/input-stream.hpp\nindex 1d835e80b5..34857a1124 100644\n--- a/c_glib/arrow-glib/input-stream.hpp\n+++ b/c_glib/arrow-glib/input-stream.hpp\n@@ -19,6 +19,7 @@\n \n #pragma once\n \n+#include <arrow/io/compressed.h>\n #include <arrow/io/file.h>\n #include <arrow/io/interfaces.h>\n #include <arrow/io/memory.h>\n@@ -36,3 +37,10 @@ GArrowBufferInputStream *garrow_buffer_input_stream_new_raw_buffer(std::shared_p\n std::shared_ptr<arrow::io::BufferReader> garrow_buffer_input_stream_get_raw(GArrowBufferInputStream *input_stream);\n \n GArrowMemoryMappedInputStream *garrow_memory_mapped_input_stream_new_raw(std::shared_ptr<arrow::io::MemoryMappedFile> *arrow_memory_mapped_file);\n+\n+GArrowCompressedInputStream *\n+garrow_compressed_input_stream_new_raw(std::shared_ptr<arrow::io::CompressedInputStream> *arrow_raw,\n+                                       GArrowCodec *codec,\n+                                       GArrowInputStream *raw);\n+std::shared_ptr<arrow::io::InputStream>\n+garrow_compressed_input_stream_get_raw(GArrowCompressedInputStream *stream);\ndiff --git a/c_glib/arrow-glib/output-stream.cpp b/c_glib/arrow-glib/output-stream.cpp\nindex 7943f74550..946ee0be44 100644\n--- a/c_glib/arrow-glib/output-stream.cpp\n+++ b/c_glib/arrow-glib/output-stream.cpp\n@@ -25,6 +25,7 @@\n #include <arrow/ipc/writer.h>\n \n #include <arrow-glib/buffer.hpp>\n+#include <arrow-glib/codec.hpp>\n #include <arrow-glib/error.hpp>\n #include <arrow-glib/file.hpp>\n #include <arrow-glib/output-stream.hpp>\n@@ -51,6 +52,9 @@ G_BEGIN_DECLS\n  *\n  * #GArrowGIOOutputStream is a class for `GOutputStream` based output\n  * stream.\n+ *\n+ * #GArrowCompressedOutputStream is a class to write compressed data to\n+ * output stream.\n  */\n \n typedef struct GArrowOutputStreamPrivate_ {\n@@ -441,6 +445,148 @@ garrow_gio_output_stream_get_raw(GArrowGIOOutputStream *output_stream)\n   return gio_output_stream;\n }\n \n+typedef struct GArrowCompressedOutputStreamPrivate_ {\n+  GArrowCodec *codec;\n+  GArrowOutputStream *raw;\n+} GArrowCompressedOutputStreamPrivate;\n+\n+enum {\n+  PROP_CODEC = 1,\n+  PROP_RAW\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowCompressedOutputStream,\n+                           garrow_compressed_output_stream,\n+                           GARROW_TYPE_OUTPUT_STREAM)\n+\n+#define GARROW_COMPRESSED_OUTPUT_STREAM_GET_PRIVATE(object)     \\\n+  static_cast<GArrowCompressedOutputStreamPrivate *>(           \\\n+    garrow_compressed_output_stream_get_instance_private(       \\\n+      GARROW_COMPRESSED_OUTPUT_STREAM(object)))\n+\n+static void\n+garrow_compressed_output_stream_dispose(GObject *object)\n+{\n+  auto priv = GARROW_COMPRESSED_OUTPUT_STREAM_GET_PRIVATE(object);\n+\n+  if (priv->codec) {\n+    g_object_unref(priv->codec);\n+    priv->codec = NULL;\n+  }\n+\n+  if (priv->raw) {\n+    g_object_unref(priv->raw);\n+    priv->raw = NULL;\n+  }\n+\n+  G_OBJECT_CLASS(garrow_compressed_output_stream_parent_class)->dispose(object);\n+}\n+\n+static void\n+garrow_compressed_output_stream_set_property(GObject *object,\n+                                             guint prop_id,\n+                                             const GValue *value,\n+                                             GParamSpec *pspec)\n+{\n+  auto priv = GARROW_COMPRESSED_OUTPUT_STREAM_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_CODEC:\n+    priv->codec = GARROW_CODEC(g_value_dup_object(value));\n+    break;\n+  case PROP_RAW:\n+    priv->raw = GARROW_OUTPUT_STREAM(g_value_dup_object(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_compressed_output_stream_get_property(GObject *object,\n+                                             guint prop_id,\n+                                             GValue *value,\n+                                             GParamSpec *pspec)\n+{\n+  auto priv = GARROW_COMPRESSED_OUTPUT_STREAM_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_CODEC:\n+    g_value_set_object(value, priv->codec);\n+    break;\n+  case PROP_RAW:\n+    g_value_set_object(value, priv->raw);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_compressed_output_stream_init(GArrowCompressedOutputStream *object)\n+{\n+}\n+\n+static void\n+garrow_compressed_output_stream_class_init(GArrowCompressedOutputStreamClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->dispose      = garrow_compressed_output_stream_dispose;\n+  gobject_class->set_property = garrow_compressed_output_stream_set_property;\n+  gobject_class->get_property = garrow_compressed_output_stream_get_property;\n+\n+  spec = g_param_spec_object(\"codec\",\n+                             \"Codec\",\n+                             \"The codec for the stream\",\n+                             GARROW_TYPE_CODEC,\n+                             static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                      G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_CODEC, spec);\n+\n+  spec = g_param_spec_object(\"raw\",\n+                             \"Raw\",\n+                             \"The underlying raw output stream\",\n+                             GARROW_TYPE_OUTPUT_STREAM,\n+                             static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                      G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_RAW, spec);\n+}\n+\n+/**\n+ * garrow_compressed_output_stream_new:\n+ * @codec: A #GArrowCodec for compressed data in the @raw.\n+ * @raw: A #GArrowOutputStream that is a sink for compressed data.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: A newly created #GArrowCompressedOutputStream.\n+ *\n+ * Since: 0.12.0\n+ */\n+GArrowCompressedOutputStream *\n+garrow_compressed_output_stream_new(GArrowCodec *codec,\n+                                    GArrowOutputStream *raw,\n+                                    GError **error)\n+{\n+  auto arrow_codec = garrow_codec_get_raw(codec);\n+  auto arrow_raw = garrow_output_stream_get_raw(raw);\n+  std::shared_ptr<arrow::io::CompressedOutputStream> arrow_stream;\n+  auto status = arrow::io::CompressedOutputStream::Make(arrow_codec,\n+                                                        arrow_raw,\n+                                                        &arrow_stream);\n+  if (garrow_error_check(error, status, \"[compressed-output-stream][new]\")) {\n+    return garrow_compressed_output_stream_new_raw(&arrow_stream,\n+                                                   codec,\n+                                                   raw);\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n G_END_DECLS\n \n \n@@ -483,3 +629,27 @@ garrow_buffer_output_stream_new_raw(std::shared_ptr<arrow::io::BufferOutputStrea\n                                              NULL));\n   return buffer_output_stream;\n }\n+\n+GArrowCompressedOutputStream *\n+garrow_compressed_output_stream_new_raw(std::shared_ptr<arrow::io::CompressedOutputStream> *arrow_raw,\n+                                        GArrowCodec *codec,\n+                                        GArrowOutputStream *raw)\n+{\n+  auto compressed_output_stream =\n+    g_object_new(GARROW_TYPE_COMPRESSED_OUTPUT_STREAM,\n+                 \"output-stream\", arrow_raw,\n+                 \"codec\", codec,\n+                 \"raw\", raw,\n+                 NULL);\n+  return GARROW_COMPRESSED_OUTPUT_STREAM(compressed_output_stream);\n+}\n+\n+std::shared_ptr<arrow::io::OutputStream>\n+garrow_compressed_output_stream_get_raw(GArrowCompressedOutputStream *compressed_output_stream)\n+{\n+  auto output_stream = GARROW_OUTPUT_STREAM(compressed_output_stream);\n+  auto arrow_output_stream = garrow_output_stream_get_raw(output_stream);\n+  auto arrow_compressed_output_stream =\n+    std::static_pointer_cast<arrow::io::CompressedOutputStream>(arrow_output_stream);\n+  return arrow_compressed_output_stream->raw();\n+}\ndiff --git a/c_glib/arrow-glib/output-stream.h b/c_glib/arrow-glib/output-stream.h\nindex 5d887c516f..031865291e 100644\n--- a/c_glib/arrow-glib/output-stream.h\n+++ b/c_glib/arrow-glib/output-stream.h\n@@ -22,6 +22,7 @@\n #include <gio/gio.h>\n \n #include <arrow-glib/buffer.h>\n+#include <arrow-glib/codec.h>\n #include <arrow-glib/tensor.h>\n \n G_BEGIN_DECLS\n@@ -194,4 +195,21 @@ GType garrow_gio_output_stream_get_type(void) G_GNUC_CONST;\n GArrowGIOOutputStream *garrow_gio_output_stream_new(GOutputStream *gio_output_stream);\n GOutputStream *garrow_gio_output_stream_get_raw(GArrowGIOOutputStream *output_stream);\n \n+#define GARROW_TYPE_COMPRESSED_OUTPUT_STREAM    \\\n+  (garrow_compressed_output_stream_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowCompressedOutputStream,\n+                         garrow_compressed_output_stream,\n+                         GARROW,\n+                         COMPRESSED_OUTPUT_STREAM,\n+                         GArrowOutputStream)\n+struct _GArrowCompressedOutputStreamClass\n+{\n+  GArrowOutputStreamClass parent_class;\n+};\n+\n+GArrowCompressedOutputStream *\n+garrow_compressed_output_stream_new(GArrowCodec *codec,\n+                                    GArrowOutputStream *raw,\n+                                    GError **error);\n+\n G_END_DECLS\ndiff --git a/c_glib/arrow-glib/output-stream.hpp b/c_glib/arrow-glib/output-stream.hpp\nindex 5d22f1d2e7..b39b3bdfcf 100644\n--- a/c_glib/arrow-glib/output-stream.hpp\n+++ b/c_glib/arrow-glib/output-stream.hpp\n@@ -19,6 +19,7 @@\n \n #pragma once\n \n+#include <arrow/io/compressed.h>\n #include <arrow/io/file.h>\n #include <arrow/io/memory.h>\n \n@@ -30,3 +31,10 @@ std::shared_ptr<arrow::io::OutputStream> garrow_output_stream_get_raw(GArrowOutp\n \n GArrowFileOutputStream *garrow_file_output_stream_new_raw(std::shared_ptr<arrow::io::FileOutputStream> *arrow_file_output_stream);\n GArrowBufferOutputStream *garrow_buffer_output_stream_new_raw(std::shared_ptr<arrow::io::BufferOutputStream> *arrow_buffer_output_stream);\n+\n+GArrowCompressedOutputStream *\n+garrow_compressed_output_stream_new_raw(std::shared_ptr<arrow::io::CompressedOutputStream> *arrow_raw,\n+                                        GArrowCodec *codec,\n+                                        GArrowOutputStream *raw);\n+std::shared_ptr<arrow::io::OutputStream>\n+garrow_compressed_output_stream_get_raw(GArrowCompressedOutputStream *stream);\ndiff --git a/c_glib/test/run-test.rb b/c_glib/test/run-test.rb\nindex abaa4dcf85..238bb2d68a 100755\n--- a/c_glib/test/run-test.rb\n+++ b/c_glib/test/run-test.rb\n@@ -60,6 +60,7 @@ def initialize(data)\n require \"fileutils\"\n require \"rbconfig\"\n require \"tempfile\"\n+require \"zlib\"\n require_relative \"helper/buildable\"\n require_relative \"helper/fixture\"\n require_relative \"helper/omittable\"\ndiff --git a/c_glib/test/test-compressed-input-stream.rb b/c_glib/test/test-compressed-input-stream.rb\nnew file mode 100644\nindex 0000000000..71f230a509\n--- /dev/null\n+++ b/c_glib/test/test-compressed-input-stream.rb\n@@ -0,0 +1,45 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestCompressedInputStream < Test::Unit::TestCase\n+  include Helper::Buildable\n+\n+  def test_read\n+    data = \"Hello\"\n+\n+    output = StringIO.new\n+    Zlib::GzipWriter.wrap(output) do |gz|\n+      gz.write(data)\n+    end\n+\n+    codec = Arrow::Codec.new(:gzip)\n+    buffer = Arrow::Buffer.new(output.string)\n+    raw_input = Arrow::BufferInputStream.new(buffer)\n+    input = Arrow::CompressedInputStream.new(codec, raw_input)\n+    assert_equal(data, input.read(data.bytesize).data.to_s)\n+    input.close\n+    raw_input.close\n+  end\n+\n+  def test_raw\n+    buffer = Arrow::Buffer.new(\"Hello\")\n+    raw_input = Arrow::BufferInputStream.new(buffer)\n+    codec = Arrow::Codec.new(:gzip)\n+    input = Arrow::CompressedInputStream.new(codec, raw_input)\n+    assert_equal(raw_input, input.raw)\n+  end\n+end\ndiff --git a/c_glib/test/test-compressed-output-stream.rb b/c_glib/test/test-compressed-output-stream.rb\nnew file mode 100644\nindex 0000000000..eb54a45d3e\n--- /dev/null\n+++ b/c_glib/test/test-compressed-output-stream.rb\n@@ -0,0 +1,43 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestCompressedOutputStream < Test::Unit::TestCase\n+  include Helper::Buildable\n+\n+  def test_write\n+    data = \"Hello\"\n+    buffer = Arrow::ResizableBuffer.new(8)\n+    raw_output = Arrow::BufferOutputStream.new(buffer)\n+    codec = Arrow::Codec.new(:gzip)\n+    output = Arrow::CompressedOutputStream.new(codec, raw_output)\n+    output.write(data)\n+    output.close\n+\n+    input = StringIO.new(buffer.data.to_s)\n+    Zlib::GzipReader.wrap(input) do |gz|\n+      assert_equal(data, gz.read)\n+    end\n+  end\n+\n+  def test_raw\n+    buffer = Arrow::ResizableBuffer.new(8)\n+    raw_output = Arrow::BufferOutputStream.new(buffer)\n+    codec = Arrow::Codec.new(:gzip)\n+    output = Arrow::CompressedOutputStream.new(codec, raw_output)\n+    assert_equal(raw_output, output.raw)\n+  end\n+end\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-20T22:00:46.093+0000",
                    "updated": "2018-11-20T22:00:46.093+0000",
                    "started": "2018-11-20T22:00:46.092+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167997",
                    "issueId": "13197608"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 1200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6d464be5[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@af2bb9b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@505dce51[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4f6c89a2[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2807d787[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7ae7e526[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4476836d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6f7c23d8[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@79d16a5f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3c5a6e96[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4c47ff9b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@422b6728[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 1200,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Nov 20 22:00:34 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-11-20T22:00:34.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3755/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-11-10T21:12:45.000+0000",
        "updated": "2018-11-20T22:00:46.000+0000",
        "timeoriginalestimate": null,
        "description": "Along with ARROW-3748, this will enable reading compressed CSV files from languages using the GLib bindings, like Ruby",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 1200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[GLib] Support for CompressedInputStream, CompressedOutputStream",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197608/comment/16693832",
                    "id": "16693832",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 3002\n[https://github.com/apache/arrow/pull/3002]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-11-20T22:00:34.618+0000",
                    "updated": "2018-11-20T22:00:34.618+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|s00cxc:",
        "customfield_12314139": null
    }
}