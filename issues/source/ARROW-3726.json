{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13197202",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202",
    "key": "ARROW-3726",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
            "name": "nevi_me",
            "key": "nevi_me",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
            },
            "displayName": "Neville Dipale",
            "active": true,
            "timeZone": "Africa/Johannesburg"
        },
        "aggregateprogress": {
            "progress": 16200,
            "total": 16200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 16200,
            "total": 16200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3726/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 30,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202/worklog/167415",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove opened a new pull request #2992: ARROW-3726: [Rust] Add CSV reader with example\nURL: https://github.com/apache/arrow/pull/2992\n \n \n   This adds a CSV reader and an example. The CSV reader supports all primitive types + string (`List<u8>`).\r\n   \r\n   The Rust Arrow API has changed a list so I could use some help improving the example to actual show data that has been loaded. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-19T15:09:31.561+0000",
                    "updated": "2018-11-19T15:09:31.561+0000",
                    "started": "2018-11-19T15:09:31.560+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167415",
                    "issueId": "13197202"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202/worklog/167429",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #2992: ARROW-3726: [Rust] Add CSV reader with example\nURL: https://github.com/apache/arrow/pull/2992#issuecomment-439943543\n \n \n   @paddyhoran @sunchao I would appreciate a review of this. The code in the example for reading strings is ugly and required calling `unsafe`. I don't know if I'm missing something or whether we need to improve the API here?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-19T15:58:59.548+0000",
                    "updated": "2018-11-19T15:58:59.548+0000",
                    "started": "2018-11-19T15:58:59.548+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167429",
                    "issueId": "13197202"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202/worklog/167452",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on a change in pull request #2992: ARROW-3726: [Rust] Add CSV reader with example\nURL: https://github.com/apache/arrow/pull/2992#discussion_r234701377\n \n \n\n ##########\n File path: rust/examples/read_csv.rs\n ##########\n @@ -0,0 +1,79 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+extern crate arrow;\n+\n+use arrow::array::{ListArray, PrimitiveArray};\n+use arrow::csvreader::CsvFile;\n+use arrow::datatypes::{DataType, Field, Schema};\n+use std::fs::File;\n+use std::sync::Arc;\n+\n+fn main() {\n+    let schema = Schema::new(vec![\n+        Field::new(\"city\", DataType::Utf8, false),\n+        Field::new(\"lat\", DataType::Float64, false),\n+        Field::new(\"lng\", DataType::Float64, false),\n+    ]);\n+\n+    let file = File::open(\"test/data/uk_cities.csv\").unwrap();\n+\n+    let mut csv = CsvFile::open(file, Arc::new(schema), false, 1024, None);\n+    let batch = csv.next().unwrap().unwrap();\n+\n+    println!(\n+        \"Loaded {} rows containing {} columns\",\n+        batch.num_rows(),\n+        batch.num_columns()\n+    );\n+\n+    let city = batch\n+        .column(0)\n+        .as_any()\n+        .downcast_ref::<ListArray>()\n+        .unwrap();\n+    let lat = batch\n+        .column(1)\n+        .as_any()\n+        .downcast_ref::<PrimitiveArray<f64>>()\n+        .unwrap();\n+    let lng = batch\n+        .column(2)\n+        .as_any()\n+        .downcast_ref::<PrimitiveArray<f64>>()\n \n Review comment:\n   Are we sure that the alignment requires are met if we simple downcast from any?  Alignments are checked through our existing constructors but would not be checked if we downcast, right?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-19T17:00:22.518+0000",
                    "updated": "2018-11-19T17:00:22.518+0000",
                    "started": "2018-11-19T17:00:22.517+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167452",
                    "issueId": "13197202"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202/worklog/167458",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #2992: ARROW-3726: [Rust] Add CSV reader with example\nURL: https://github.com/apache/arrow/pull/2992#discussion_r234707476\n \n \n\n ##########\n File path: rust/examples/read_csv.rs\n ##########\n @@ -0,0 +1,79 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+extern crate arrow;\n+\n+use arrow::array::{ListArray, PrimitiveArray};\n+use arrow::csvreader::CsvFile;\n+use arrow::datatypes::{DataType, Field, Schema};\n+use std::fs::File;\n+use std::sync::Arc;\n+\n+fn main() {\n+    let schema = Schema::new(vec![\n+        Field::new(\"city\", DataType::Utf8, false),\n+        Field::new(\"lat\", DataType::Float64, false),\n+        Field::new(\"lng\", DataType::Float64, false),\n+    ]);\n+\n+    let file = File::open(\"test/data/uk_cities.csv\").unwrap();\n+\n+    let mut csv = CsvFile::open(file, Arc::new(schema), false, 1024, None);\n+    let batch = csv.next().unwrap().unwrap();\n+\n+    println!(\n+        \"Loaded {} rows containing {} columns\",\n+        batch.num_rows(),\n+        batch.num_columns()\n+    );\n+\n+    let city = batch\n+        .column(0)\n+        .as_any()\n+        .downcast_ref::<ListArray>()\n+        .unwrap();\n+    let lat = batch\n+        .column(1)\n+        .as_any()\n+        .downcast_ref::<PrimitiveArray<f64>>()\n+        .unwrap();\n+    let lng = batch\n+        .column(2)\n+        .as_any()\n+        .downcast_ref::<PrimitiveArray<f64>>()\n \n Review comment:\n   I have no idea to be honest. I am definitely looking for guidance here on how to access these arrays after they are built.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-19T17:16:42.187+0000",
                    "updated": "2018-11-19T17:16:42.187+0000",
                    "started": "2018-11-19T17:16:42.186+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167458",
                    "issueId": "13197202"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202/worklog/167459",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on a change in pull request #2992: ARROW-3726: [Rust] Add CSV reader with example\nURL: https://github.com/apache/arrow/pull/2992#discussion_r234701377\n \n \n\n ##########\n File path: rust/examples/read_csv.rs\n ##########\n @@ -0,0 +1,79 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+extern crate arrow;\n+\n+use arrow::array::{ListArray, PrimitiveArray};\n+use arrow::csvreader::CsvFile;\n+use arrow::datatypes::{DataType, Field, Schema};\n+use std::fs::File;\n+use std::sync::Arc;\n+\n+fn main() {\n+    let schema = Schema::new(vec![\n+        Field::new(\"city\", DataType::Utf8, false),\n+        Field::new(\"lat\", DataType::Float64, false),\n+        Field::new(\"lng\", DataType::Float64, false),\n+    ]);\n+\n+    let file = File::open(\"test/data/uk_cities.csv\").unwrap();\n+\n+    let mut csv = CsvFile::open(file, Arc::new(schema), false, 1024, None);\n+    let batch = csv.next().unwrap().unwrap();\n+\n+    println!(\n+        \"Loaded {} rows containing {} columns\",\n+        batch.num_rows(),\n+        batch.num_columns()\n+    );\n+\n+    let city = batch\n+        .column(0)\n+        .as_any()\n+        .downcast_ref::<ListArray>()\n+        .unwrap();\n+    let lat = batch\n+        .column(1)\n+        .as_any()\n+        .downcast_ref::<PrimitiveArray<f64>>()\n+        .unwrap();\n+    let lng = batch\n+        .column(2)\n+        .as_any()\n+        .downcast_ref::<PrimitiveArray<f64>>()\n \n Review comment:\n   Are we sure that the alignment requirements are met if we simple downcast from any?  Alignments are checked through our existing constructors but would not be checked if we downcast, right?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-19T17:17:39.275+0000",
                    "updated": "2018-11-19T17:17:39.275+0000",
                    "started": "2018-11-19T17:17:39.275+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167459",
                    "issueId": "13197202"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202/worklog/167460",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on a change in pull request #2992: ARROW-3726: [Rust] Add CSV reader with example\nURL: https://github.com/apache/arrow/pull/2992#discussion_r234709709\n \n \n\n ##########\n File path: rust/examples/read_csv.rs\n ##########\n @@ -0,0 +1,79 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+extern crate arrow;\n+\n+use arrow::array::{ListArray, PrimitiveArray};\n+use arrow::csvreader::CsvFile;\n+use arrow::datatypes::{DataType, Field, Schema};\n+use std::fs::File;\n+use std::sync::Arc;\n+\n+fn main() {\n+    let schema = Schema::new(vec![\n+        Field::new(\"city\", DataType::Utf8, false),\n+        Field::new(\"lat\", DataType::Float64, false),\n+        Field::new(\"lng\", DataType::Float64, false),\n+    ]);\n+\n+    let file = File::open(\"test/data/uk_cities.csv\").unwrap();\n+\n+    let mut csv = CsvFile::open(file, Arc::new(schema), false, 1024, None);\n+    let batch = csv.next().unwrap().unwrap();\n+\n+    println!(\n+        \"Loaded {} rows containing {} columns\",\n+        batch.num_rows(),\n+        batch.num_columns()\n+    );\n+\n+    let city = batch\n+        .column(0)\n+        .as_any()\n+        .downcast_ref::<ListArray>()\n+        .unwrap();\n+    let lat = batch\n+        .column(1)\n+        .as_any()\n+        .downcast_ref::<PrimitiveArray<f64>>()\n+        .unwrap();\n+    let lng = batch\n+        .column(2)\n+        .as_any()\n+        .downcast_ref::<PrimitiveArray<f64>>()\n \n Review comment:\n   Actually, I think it's fine as you are using our builders internally.  I'll take a closer look when I get a chance.\r\n   \r\n   Thanks @andygrove \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-19T17:23:05.498+0000",
                    "updated": "2018-11-19T17:23:05.498+0000",
                    "started": "2018-11-19T17:23:05.497+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167460",
                    "issueId": "13197202"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202/worklog/167604",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on a change in pull request #2992: ARROW-3726: [Rust] Add CSV reader with example\nURL: https://github.com/apache/arrow/pull/2992#discussion_r234851304\n \n \n\n ##########\n File path: rust/src/csvreader.rs\n ##########\n @@ -0,0 +1,243 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! CSV Support\n+\n+use std::fs::File;\n+use std::io::BufReader;\n+use std::sync::Arc;\n+\n+use array::ArrayRef;\n+use builder::{ArrayBuilder, ListArrayBuilder, PrimitiveArrayBuilder};\n+use datatypes::{DataType, Schema};\n+use error::ArrowError;\n+use record_batch::RecordBatch;\n+\n+use csv;\n+use csv::{StringRecord, StringRecordsIntoIter};\n+\n+pub struct CsvFile {\n+    schema: Arc<Schema>,\n+    projection: Option<Vec<usize>>,\n+    record_iter: StringRecordsIntoIter<BufReader<File>>,\n+    batch_size: usize,\n+}\n+\n+impl CsvFile {\n+    pub fn open(\n+        file: File,\n+        schema: Arc<Schema>,\n+        has_headers: bool,\n+        batch_size: usize,\n+        projection: Option<Vec<usize>>,\n+    ) -> Self {\n+        let csv_reader = csv::ReaderBuilder::new()\n+            .has_headers(has_headers)\n+            .from_reader(BufReader::new(file));\n+\n+        let record_iter = csv_reader.into_records();\n+        CsvFile {\n+            schema: schema.clone(),\n+            projection,\n+            record_iter,\n+            batch_size,\n+        }\n+    }\n+}\n+\n+macro_rules! build_primitive_array {\n+    ($ROWS:expr, $COL_INDEX:expr, $TY:ty) => {{\n+        let mut builder = PrimitiveArrayBuilder::<$TY>::new($ROWS.len() as i64);\n+        for row_index in 0..$ROWS.len() {\n+            match $ROWS[row_index].get(*$COL_INDEX) {\n+                Some(s) if s.len() > 0 => builder.push(s.parse::<$TY>().unwrap()).unwrap(),\n+                _ => builder.push_null().unwrap(),\n+            }\n+        }\n+        Ok(Arc::new(builder.finish()) as ArrayRef)\n+    }};\n+}\n+\n+impl CsvFile {\n+    /// Read the next batch of rows\n+    pub fn next(&mut self) -> Option<Result<Arc<RecordBatch>, ArrowError>> {\n+        // read a batch of rows into memory\n+        let mut rows: Vec<StringRecord> = Vec::with_capacity(self.batch_size);\n+        for _ in 0..self.batch_size {\n+            match self.record_iter.next() {\n \n Review comment:\n   Should we expose `record_iter` to the user?  This would allow them to skip records at the beginning of a file for example before reading the rest of the file.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-20T02:39:32.915+0000",
                    "updated": "2018-11-20T02:39:32.915+0000",
                    "started": "2018-11-20T02:39:32.914+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167604",
                    "issueId": "13197202"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202/worklog/167605",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on a change in pull request #2992: ARROW-3726: [Rust] Add CSV reader with example\nURL: https://github.com/apache/arrow/pull/2992#discussion_r234851111\n \n \n\n ##########\n File path: rust/src/array.rs\n ##########\n @@ -163,6 +168,12 @@ macro_rules! def_primitive_array {\n                 unsafe { *(self.raw_values().offset(i as isize)) }\n             }\n \n+            pub fn value_slice(&self, offset: i64, len: i64) -> &[$native_ty] {\n \n Review comment:\n   We should probably add a doc-comment for `value_slice`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-20T02:39:32.917+0000",
                    "updated": "2018-11-20T02:39:32.917+0000",
                    "started": "2018-11-20T02:39:32.916+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167605",
                    "issueId": "13197202"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202/worklog/167606",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on a change in pull request #2992: ARROW-3726: [Rust] Add CSV reader with example\nURL: https://github.com/apache/arrow/pull/2992#discussion_r234851390\n \n \n\n ##########\n File path: rust/src/csvreader.rs\n ##########\n @@ -0,0 +1,243 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! CSV Support\n+\n+use std::fs::File;\n+use std::io::BufReader;\n+use std::sync::Arc;\n+\n+use array::ArrayRef;\n+use builder::{ArrayBuilder, ListArrayBuilder, PrimitiveArrayBuilder};\n+use datatypes::{DataType, Schema};\n+use error::ArrowError;\n+use record_batch::RecordBatch;\n+\n+use csv;\n+use csv::{StringRecord, StringRecordsIntoIter};\n+\n+pub struct CsvFile {\n+    schema: Arc<Schema>,\n+    projection: Option<Vec<usize>>,\n+    record_iter: StringRecordsIntoIter<BufReader<File>>,\n+    batch_size: usize,\n+}\n+\n+impl CsvFile {\n+    pub fn open(\n+        file: File,\n+        schema: Arc<Schema>,\n+        has_headers: bool,\n+        batch_size: usize,\n+        projection: Option<Vec<usize>>,\n+    ) -> Self {\n+        let csv_reader = csv::ReaderBuilder::new()\n+            .has_headers(has_headers)\n+            .from_reader(BufReader::new(file));\n+\n+        let record_iter = csv_reader.into_records();\n+        CsvFile {\n+            schema: schema.clone(),\n+            projection,\n+            record_iter,\n+            batch_size,\n+        }\n+    }\n+}\n+\n+macro_rules! build_primitive_array {\n+    ($ROWS:expr, $COL_INDEX:expr, $TY:ty) => {{\n+        let mut builder = PrimitiveArrayBuilder::<$TY>::new($ROWS.len() as i64);\n+        for row_index in 0..$ROWS.len() {\n+            match $ROWS[row_index].get(*$COL_INDEX) {\n+                Some(s) if s.len() > 0 => builder.push(s.parse::<$TY>().unwrap()).unwrap(),\n+                _ => builder.push_null().unwrap(),\n+            }\n+        }\n+        Ok(Arc::new(builder.finish()) as ArrayRef)\n+    }};\n+}\n+\n+impl CsvFile {\n+    /// Read the next batch of rows\n+    pub fn next(&mut self) -> Option<Result<Arc<RecordBatch>, ArrowError>> {\n+        // read a batch of rows into memory\n+        let mut rows: Vec<StringRecord> = Vec::with_capacity(self.batch_size);\n+        for _ in 0..self.batch_size {\n+            match self.record_iter.next() {\n+                Some(Ok(r)) => {\n+                    rows.push(r);\n+                }\n+                Some(Err(_)) => {\n+                    return Some(Err(ArrowError::ParseError(\n+                        \"Error reading CSV file\".to_string(),\n+                    )));\n+                }\n+                None => break,\n+            }\n+        }\n+\n+        // return early if no data was loaded\n+        if rows.len() == 0 {\n+            return None;\n+        }\n+\n+        let projection: Vec<usize> = match self.projection {\n+            Some(ref v) => v.clone(),\n+            None => self\n+                .schema\n+                .fields()\n+                .iter()\n+                .enumerate()\n+                .map(|(i, _)| i)\n+                .collect(),\n+        };\n+\n+        let arrays: Result<Vec<ArrayRef>, ArrowError> = projection\n+            .iter()\n+            .map(|i| {\n+                let field = self.schema.field(*i);\n+\n+                match field.data_type() {\n+                    &DataType::Boolean => build_primitive_array!(rows, i, bool),\n+                    &DataType::Int8 => build_primitive_array!(rows, i, i8),\n+                    &DataType::Int16 => build_primitive_array!(rows, i, i16),\n+                    &DataType::Int32 => build_primitive_array!(rows, i, i32),\n+                    &DataType::Int64 => build_primitive_array!(rows, i, i64),\n+                    &DataType::UInt8 => build_primitive_array!(rows, i, u8),\n+                    &DataType::UInt16 => build_primitive_array!(rows, i, u16),\n+                    &DataType::UInt32 => build_primitive_array!(rows, i, u32),\n+                    &DataType::UInt64 => build_primitive_array!(rows, i, u64),\n+                    &DataType::Float16 => build_primitive_array!(rows, i, f32),\n+                    &DataType::Float32 => build_primitive_array!(rows, i, f32),\n+                    &DataType::Float64 => build_primitive_array!(rows, i, f64),\n+                    &DataType::Utf8 => {\n+                        let mut values_builder: PrimitiveArrayBuilder<u8> =\n+                            PrimitiveArrayBuilder::<u8>::new(rows.len() as i64);\n+                        let mut list_builder = ListArrayBuilder::new(values_builder);\n+                        for row_index in 0..rows.len() {\n+                            match rows[row_index].get(*i) {\n+                                Some(s) => {\n+                                    list_builder.values().push_slice(s.as_bytes()).unwrap();\n+                                    list_builder.append(true).unwrap();\n+                                }\n+                                _ => {\n+                                    list_builder.append(false).unwrap();\n+                                }\n \n Review comment:\n   We can update this to use `BinaryArrayBuilder` once merged.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-20T02:39:32.921+0000",
                    "updated": "2018-11-20T02:39:32.921+0000",
                    "started": "2018-11-20T02:39:32.920+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167606",
                    "issueId": "13197202"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202/worklog/167608",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on a change in pull request #2992: ARROW-3726: [Rust] Add CSV reader with example\nURL: https://github.com/apache/arrow/pull/2992#discussion_r234851390\n \n \n\n ##########\n File path: rust/src/csvreader.rs\n ##########\n @@ -0,0 +1,243 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! CSV Support\n+\n+use std::fs::File;\n+use std::io::BufReader;\n+use std::sync::Arc;\n+\n+use array::ArrayRef;\n+use builder::{ArrayBuilder, ListArrayBuilder, PrimitiveArrayBuilder};\n+use datatypes::{DataType, Schema};\n+use error::ArrowError;\n+use record_batch::RecordBatch;\n+\n+use csv;\n+use csv::{StringRecord, StringRecordsIntoIter};\n+\n+pub struct CsvFile {\n+    schema: Arc<Schema>,\n+    projection: Option<Vec<usize>>,\n+    record_iter: StringRecordsIntoIter<BufReader<File>>,\n+    batch_size: usize,\n+}\n+\n+impl CsvFile {\n+    pub fn open(\n+        file: File,\n+        schema: Arc<Schema>,\n+        has_headers: bool,\n+        batch_size: usize,\n+        projection: Option<Vec<usize>>,\n+    ) -> Self {\n+        let csv_reader = csv::ReaderBuilder::new()\n+            .has_headers(has_headers)\n+            .from_reader(BufReader::new(file));\n+\n+        let record_iter = csv_reader.into_records();\n+        CsvFile {\n+            schema: schema.clone(),\n+            projection,\n+            record_iter,\n+            batch_size,\n+        }\n+    }\n+}\n+\n+macro_rules! build_primitive_array {\n+    ($ROWS:expr, $COL_INDEX:expr, $TY:ty) => {{\n+        let mut builder = PrimitiveArrayBuilder::<$TY>::new($ROWS.len() as i64);\n+        for row_index in 0..$ROWS.len() {\n+            match $ROWS[row_index].get(*$COL_INDEX) {\n+                Some(s) if s.len() > 0 => builder.push(s.parse::<$TY>().unwrap()).unwrap(),\n+                _ => builder.push_null().unwrap(),\n+            }\n+        }\n+        Ok(Arc::new(builder.finish()) as ArrayRef)\n+    }};\n+}\n+\n+impl CsvFile {\n+    /// Read the next batch of rows\n+    pub fn next(&mut self) -> Option<Result<Arc<RecordBatch>, ArrowError>> {\n+        // read a batch of rows into memory\n+        let mut rows: Vec<StringRecord> = Vec::with_capacity(self.batch_size);\n+        for _ in 0..self.batch_size {\n+            match self.record_iter.next() {\n+                Some(Ok(r)) => {\n+                    rows.push(r);\n+                }\n+                Some(Err(_)) => {\n+                    return Some(Err(ArrowError::ParseError(\n+                        \"Error reading CSV file\".to_string(),\n+                    )));\n+                }\n+                None => break,\n+            }\n+        }\n+\n+        // return early if no data was loaded\n+        if rows.len() == 0 {\n+            return None;\n+        }\n+\n+        let projection: Vec<usize> = match self.projection {\n+            Some(ref v) => v.clone(),\n+            None => self\n+                .schema\n+                .fields()\n+                .iter()\n+                .enumerate()\n+                .map(|(i, _)| i)\n+                .collect(),\n+        };\n+\n+        let arrays: Result<Vec<ArrayRef>, ArrowError> = projection\n+            .iter()\n+            .map(|i| {\n+                let field = self.schema.field(*i);\n+\n+                match field.data_type() {\n+                    &DataType::Boolean => build_primitive_array!(rows, i, bool),\n+                    &DataType::Int8 => build_primitive_array!(rows, i, i8),\n+                    &DataType::Int16 => build_primitive_array!(rows, i, i16),\n+                    &DataType::Int32 => build_primitive_array!(rows, i, i32),\n+                    &DataType::Int64 => build_primitive_array!(rows, i, i64),\n+                    &DataType::UInt8 => build_primitive_array!(rows, i, u8),\n+                    &DataType::UInt16 => build_primitive_array!(rows, i, u16),\n+                    &DataType::UInt32 => build_primitive_array!(rows, i, u32),\n+                    &DataType::UInt64 => build_primitive_array!(rows, i, u64),\n+                    &DataType::Float16 => build_primitive_array!(rows, i, f32),\n+                    &DataType::Float32 => build_primitive_array!(rows, i, f32),\n+                    &DataType::Float64 => build_primitive_array!(rows, i, f64),\n+                    &DataType::Utf8 => {\n+                        let mut values_builder: PrimitiveArrayBuilder<u8> =\n+                            PrimitiveArrayBuilder::<u8>::new(rows.len() as i64);\n+                        let mut list_builder = ListArrayBuilder::new(values_builder);\n+                        for row_index in 0..rows.len() {\n+                            match rows[row_index].get(*i) {\n+                                Some(s) => {\n+                                    list_builder.values().push_slice(s.as_bytes()).unwrap();\n+                                    list_builder.append(true).unwrap();\n+                                }\n+                                _ => {\n+                                    list_builder.append(false).unwrap();\n+                                }\n \n Review comment:\n   I think `DataType::Utf8` should create a `BinaryArray` not a `PrimitiveArray<u8>` (there currently is a difference, `PrimitiveArray<u8>` has child data but `BinaryArray` has 2 top level buffers).  Once [ARROW-3787](https://github.com/apache/arrow/pull/2957) is merged you can use `from` to make this conversion and once [ARROW-3713](https://github.com/apache/arrow/pull/2968) is merged the builder can be simplified further.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-20T02:50:51.152+0000",
                    "updated": "2018-11-20T02:50:51.152+0000",
                    "started": "2018-11-20T02:50:51.152+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167608",
                    "issueId": "13197202"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202/worklog/167811",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #2992: ARROW-3726: [Rust] Add CSV reader with example\nURL: https://github.com/apache/arrow/pull/2992#issuecomment-440338369\n \n \n   @paddyhoran I added documentation as requested. I also renamed CsvFile to CsvReader. I will be adding CsvWriter in separate PR once this one is merged (I already have working code).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-20T16:33:24.347+0000",
                    "updated": "2018-11-20T16:33:24.347+0000",
                    "started": "2018-11-20T16:33:24.347+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167811",
                    "issueId": "13197202"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202/worklog/167812",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #2992: ARROW-3726: [Rust] Add CSV reader with example\nURL: https://github.com/apache/arrow/pull/2992#discussion_r235077189\n \n \n\n ##########\n File path: rust/src/csvreader.rs\n ##########\n @@ -0,0 +1,243 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! CSV Support\n+\n+use std::fs::File;\n+use std::io::BufReader;\n+use std::sync::Arc;\n+\n+use array::ArrayRef;\n+use builder::{ArrayBuilder, ListArrayBuilder, PrimitiveArrayBuilder};\n+use datatypes::{DataType, Schema};\n+use error::ArrowError;\n+use record_batch::RecordBatch;\n+\n+use csv;\n+use csv::{StringRecord, StringRecordsIntoIter};\n+\n+pub struct CsvFile {\n+    schema: Arc<Schema>,\n+    projection: Option<Vec<usize>>,\n+    record_iter: StringRecordsIntoIter<BufReader<File>>,\n+    batch_size: usize,\n+}\n+\n+impl CsvFile {\n+    pub fn open(\n+        file: File,\n+        schema: Arc<Schema>,\n+        has_headers: bool,\n+        batch_size: usize,\n+        projection: Option<Vec<usize>>,\n+    ) -> Self {\n+        let csv_reader = csv::ReaderBuilder::new()\n+            .has_headers(has_headers)\n+            .from_reader(BufReader::new(file));\n+\n+        let record_iter = csv_reader.into_records();\n+        CsvFile {\n+            schema: schema.clone(),\n+            projection,\n+            record_iter,\n+            batch_size,\n+        }\n+    }\n+}\n+\n+macro_rules! build_primitive_array {\n+    ($ROWS:expr, $COL_INDEX:expr, $TY:ty) => {{\n+        let mut builder = PrimitiveArrayBuilder::<$TY>::new($ROWS.len() as i64);\n+        for row_index in 0..$ROWS.len() {\n+            match $ROWS[row_index].get(*$COL_INDEX) {\n+                Some(s) if s.len() > 0 => builder.push(s.parse::<$TY>().unwrap()).unwrap(),\n+                _ => builder.push_null().unwrap(),\n+            }\n+        }\n+        Ok(Arc::new(builder.finish()) as ArrayRef)\n+    }};\n+}\n+\n+impl CsvFile {\n+    /// Read the next batch of rows\n+    pub fn next(&mut self) -> Option<Result<Arc<RecordBatch>, ArrowError>> {\n+        // read a batch of rows into memory\n+        let mut rows: Vec<StringRecord> = Vec::with_capacity(self.batch_size);\n+        for _ in 0..self.batch_size {\n+            match self.record_iter.next() {\n \n Review comment:\n   I will think about this. There is already the constructor param to indicate whether there is a header row or not that needs to be skipped. Maybe we could do this as a separate enhancement PR.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-20T16:34:07.911+0000",
                    "updated": "2018-11-20T16:34:07.911+0000",
                    "started": "2018-11-20T16:34:07.910+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167812",
                    "issueId": "13197202"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202/worklog/167856",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on a change in pull request #2992: ARROW-3726: [Rust] Add CSV reader with example\nURL: https://github.com/apache/arrow/pull/2992#discussion_r235094440\n \n \n\n ##########\n File path: rust/src/csvreader.rs\n ##########\n @@ -0,0 +1,243 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! CSV Support\n+\n+use std::fs::File;\n+use std::io::BufReader;\n+use std::sync::Arc;\n+\n+use array::ArrayRef;\n+use builder::{ArrayBuilder, ListArrayBuilder, PrimitiveArrayBuilder};\n+use datatypes::{DataType, Schema};\n+use error::ArrowError;\n+use record_batch::RecordBatch;\n+\n+use csv;\n+use csv::{StringRecord, StringRecordsIntoIter};\n+\n+pub struct CsvFile {\n+    schema: Arc<Schema>,\n+    projection: Option<Vec<usize>>,\n+    record_iter: StringRecordsIntoIter<BufReader<File>>,\n+    batch_size: usize,\n+}\n+\n+impl CsvFile {\n+    pub fn open(\n+        file: File,\n+        schema: Arc<Schema>,\n+        has_headers: bool,\n+        batch_size: usize,\n+        projection: Option<Vec<usize>>,\n+    ) -> Self {\n+        let csv_reader = csv::ReaderBuilder::new()\n+            .has_headers(has_headers)\n+            .from_reader(BufReader::new(file));\n+\n+        let record_iter = csv_reader.into_records();\n+        CsvFile {\n+            schema: schema.clone(),\n+            projection,\n+            record_iter,\n+            batch_size,\n+        }\n+    }\n+}\n+\n+macro_rules! build_primitive_array {\n+    ($ROWS:expr, $COL_INDEX:expr, $TY:ty) => {{\n+        let mut builder = PrimitiveArrayBuilder::<$TY>::new($ROWS.len() as i64);\n+        for row_index in 0..$ROWS.len() {\n+            match $ROWS[row_index].get(*$COL_INDEX) {\n+                Some(s) if s.len() > 0 => builder.push(s.parse::<$TY>().unwrap()).unwrap(),\n+                _ => builder.push_null().unwrap(),\n+            }\n+        }\n+        Ok(Arc::new(builder.finish()) as ArrayRef)\n+    }};\n+}\n+\n+impl CsvFile {\n+    /// Read the next batch of rows\n+    pub fn next(&mut self) -> Option<Result<Arc<RecordBatch>, ArrowError>> {\n+        // read a batch of rows into memory\n+        let mut rows: Vec<StringRecord> = Vec::with_capacity(self.batch_size);\n+        for _ in 0..self.batch_size {\n+            match self.record_iter.next() {\n \n Review comment:\n   I have a use case where there is meta-data inserted after the header but before the data and I have no way to control this.  Perhaps this is a rather narrow use case.  In any case, happy to revisit this.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-20T17:16:50.043+0000",
                    "updated": "2018-11-20T17:16:50.043+0000",
                    "started": "2018-11-20T17:16:50.043+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167856",
                    "issueId": "13197202"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202/worklog/167857",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on issue #2992: ARROW-3726: [Rust] Add CSV reader with example\nURL: https://github.com/apache/arrow/pull/2992#issuecomment-440356500\n \n \n   Thanks @andygrove . I'll take a look at this today too.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-20T17:20:30.605+0000",
                    "updated": "2018-11-20T17:20:30.605+0000",
                    "started": "2018-11-20T17:20:30.605+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167857",
                    "issueId": "13197202"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202/worklog/167873",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on issue #2992: ARROW-3726: [Rust] Add CSV reader with example\nURL: https://github.com/apache/arrow/pull/2992#issuecomment-440360913\n \n \n   @andygrove the windows CI needs to be updated to run the new example also.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-20T17:30:51.532+0000",
                    "updated": "2018-11-20T17:30:51.532+0000",
                    "started": "2018-11-20T17:30:51.531+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167873",
                    "issueId": "13197202"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202/worklog/167889",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on a change in pull request #2992: ARROW-3726: [Rust] Add CSV reader with example\nURL: https://github.com/apache/arrow/pull/2992#discussion_r235095216\n \n \n\n ##########\n File path: rust/src/csvreader.rs\n ##########\n @@ -0,0 +1,263 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n \n Review comment:\n   Can we have a separate mod for csv, i.e., `rust/src/csv` and `rust/src/csv/reader.rs`?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-20T17:50:05.091+0000",
                    "updated": "2018-11-20T17:50:05.091+0000",
                    "started": "2018-11-20T17:50:05.090+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167889",
                    "issueId": "13197202"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202/worklog/167890",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on a change in pull request #2992: ARROW-3726: [Rust] Add CSV reader with example\nURL: https://github.com/apache/arrow/pull/2992#discussion_r235104731\n \n \n\n ##########\n File path: rust/src/csvreader.rs\n ##########\n @@ -0,0 +1,263 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! CSV Reader\n+//!\n+//! This CSV reader allows CSV files to be read into the Arrow memory model. Records are loaded in\n+//! batches and are then converted from row-based data to columnar data.\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use arrow::csvreader::CsvReader;\n+//! use arrow::datatypes::{DataType, Field, Schema};\n+//! use std::fs::File;\n+//! use std::sync::Arc;\n+//!\n+//! let schema = Schema::new(vec![\n+//!   Field::new(\"city\", DataType::Utf8, false),\n+//!   Field::new(\"lat\", DataType::Float64, false),\n+//!   Field::new(\"lng\", DataType::Float64, false),\n+//! ]);\n+//!\n+//! let file = File::open(\"test/data/uk_cities.csv\").unwrap();\n+//!\n+//! let mut csv = CsvReader::new(file, Arc::new(schema), false, 1024, None);\n+//! let batch = csv.next().unwrap().unwrap();\n+//!```\n+\n+use std::fs::File;\n+use std::io::BufReader;\n+use std::sync::Arc;\n+\n+use array::{ArrayRef, BinaryArray};\n+use builder::{ArrayBuilder, ListArrayBuilder, PrimitiveArrayBuilder};\n+use datatypes::{DataType, Schema};\n+use error::ArrowError;\n+use record_batch::RecordBatch;\n+\n+use csv;\n+use csv::{StringRecord, StringRecordsIntoIter};\n+\n+/// CSV file reader\n+pub struct CsvReader {\n+    /// Explicit schema for the CSV file\n+    schema: Arc<Schema>,\n+    /// Optional projection for which columns to load (zero-based column indices)\n+    projection: Option<Vec<usize>>,\n+    /// File reader\n+    record_iter: StringRecordsIntoIter<BufReader<File>>,\n+    /// Batch size (number of records to load each time)\n+    batch_size: usize,\n+}\n+\n+impl CsvReader {\n+    /// Create a new CsvReader\n+    pub fn new(\n+        file: File,\n+        schema: Arc<Schema>,\n+        has_headers: bool,\n+        batch_size: usize,\n+        projection: Option<Vec<usize>>,\n+    ) -> Self {\n+        let csv_reader = csv::ReaderBuilder::new()\n+            .has_headers(has_headers)\n+            .from_reader(BufReader::new(file));\n+\n+        let record_iter = csv_reader.into_records();\n+        CsvReader {\n+            schema: schema.clone(),\n+            projection,\n+            record_iter,\n+            batch_size,\n+        }\n+    }\n+}\n+\n+macro_rules! build_primitive_array {\n+    ($ROWS:expr, $COL_INDEX:expr, $TY:ty) => {{\n+        let mut builder = PrimitiveArrayBuilder::<$TY>::new($ROWS.len() as i64);\n+        for row_index in 0..$ROWS.len() {\n+            match $ROWS[row_index].get(*$COL_INDEX) {\n+                Some(s) if s.len() > 0 => builder.push(s.parse::<$TY>().unwrap()).unwrap(),\n+                _ => builder.push_null().unwrap(),\n+            }\n+        }\n+        Ok(Arc::new(builder.finish()) as ArrayRef)\n+    }};\n+}\n+\n+impl CsvReader {\n+    /// Read the next batch of rows\n+    pub fn next(&mut self) -> Option<Result<Arc<RecordBatch>, ArrowError>> {\n+        // read a batch of rows into memory\n+        let mut rows: Vec<StringRecord> = Vec::with_capacity(self.batch_size);\n+        for _ in 0..self.batch_size {\n+            match self.record_iter.next() {\n+                Some(Ok(r)) => {\n+                    rows.push(r);\n+                }\n+                Some(Err(_)) => {\n+                    return Some(Err(ArrowError::ParseError(\n+                        \"Error reading CSV file\".to_string(),\n+                    )));\n+                }\n+                None => break,\n+            }\n+        }\n+\n+        // return early if no data was loaded\n+        if rows.len() == 0 {\n+            return None;\n+        }\n+\n+        let projection: Vec<usize> = match self.projection {\n+            Some(ref v) => v.clone(),\n+            None => self\n+                .schema\n+                .fields()\n+                .iter()\n+                .enumerate()\n+                .map(|(i, _)| i)\n+                .collect(),\n+        };\n+\n+        let arrays: Result<Vec<ArrayRef>, ArrowError> = projection\n \n Review comment:\n   here too: we can use `error.Result`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-20T17:50:05.106+0000",
                    "updated": "2018-11-20T17:50:05.106+0000",
                    "started": "2018-11-20T17:50:05.105+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167890",
                    "issueId": "13197202"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202/worklog/167891",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on a change in pull request #2992: ARROW-3726: [Rust] Add CSV reader with example\nURL: https://github.com/apache/arrow/pull/2992#discussion_r235105608\n \n \n\n ##########\n File path: rust/src/csvreader.rs\n ##########\n @@ -0,0 +1,263 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! CSV Reader\n+//!\n+//! This CSV reader allows CSV files to be read into the Arrow memory model. Records are loaded in\n+//! batches and are then converted from row-based data to columnar data.\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use arrow::csvreader::CsvReader;\n+//! use arrow::datatypes::{DataType, Field, Schema};\n+//! use std::fs::File;\n+//! use std::sync::Arc;\n+//!\n+//! let schema = Schema::new(vec![\n+//!   Field::new(\"city\", DataType::Utf8, false),\n+//!   Field::new(\"lat\", DataType::Float64, false),\n+//!   Field::new(\"lng\", DataType::Float64, false),\n+//! ]);\n+//!\n+//! let file = File::open(\"test/data/uk_cities.csv\").unwrap();\n+//!\n+//! let mut csv = CsvReader::new(file, Arc::new(schema), false, 1024, None);\n+//! let batch = csv.next().unwrap().unwrap();\n+//!```\n+\n+use std::fs::File;\n+use std::io::BufReader;\n+use std::sync::Arc;\n+\n+use array::{ArrayRef, BinaryArray};\n+use builder::{ArrayBuilder, ListArrayBuilder, PrimitiveArrayBuilder};\n+use datatypes::{DataType, Schema};\n+use error::ArrowError;\n+use record_batch::RecordBatch;\n+\n+use csv;\n+use csv::{StringRecord, StringRecordsIntoIter};\n+\n+/// CSV file reader\n+pub struct CsvReader {\n+    /// Explicit schema for the CSV file\n+    schema: Arc<Schema>,\n+    /// Optional projection for which columns to load (zero-based column indices)\n+    projection: Option<Vec<usize>>,\n+    /// File reader\n+    record_iter: StringRecordsIntoIter<BufReader<File>>,\n+    /// Batch size (number of records to load each time)\n+    batch_size: usize,\n+}\n+\n+impl CsvReader {\n+    /// Create a new CsvReader\n+    pub fn new(\n+        file: File,\n+        schema: Arc<Schema>,\n+        has_headers: bool,\n+        batch_size: usize,\n+        projection: Option<Vec<usize>>,\n+    ) -> Self {\n+        let csv_reader = csv::ReaderBuilder::new()\n+            .has_headers(has_headers)\n+            .from_reader(BufReader::new(file));\n+\n+        let record_iter = csv_reader.into_records();\n+        CsvReader {\n+            schema: schema.clone(),\n+            projection,\n+            record_iter,\n+            batch_size,\n+        }\n+    }\n+}\n+\n+macro_rules! build_primitive_array {\n+    ($ROWS:expr, $COL_INDEX:expr, $TY:ty) => {{\n+        let mut builder = PrimitiveArrayBuilder::<$TY>::new($ROWS.len() as i64);\n+        for row_index in 0..$ROWS.len() {\n+            match $ROWS[row_index].get(*$COL_INDEX) {\n+                Some(s) if s.len() > 0 => builder.push(s.parse::<$TY>().unwrap()).unwrap(),\n+                _ => builder.push_null().unwrap(),\n+            }\n+        }\n+        Ok(Arc::new(builder.finish()) as ArrayRef)\n+    }};\n+}\n+\n+impl CsvReader {\n+    /// Read the next batch of rows\n+    pub fn next(&mut self) -> Option<Result<Arc<RecordBatch>, ArrowError>> {\n+        // read a batch of rows into memory\n+        let mut rows: Vec<StringRecord> = Vec::with_capacity(self.batch_size);\n+        for _ in 0..self.batch_size {\n+            match self.record_iter.next() {\n+                Some(Ok(r)) => {\n+                    rows.push(r);\n+                }\n+                Some(Err(_)) => {\n+                    return Some(Err(ArrowError::ParseError(\n+                        \"Error reading CSV file\".to_string(),\n+                    )));\n+                }\n+                None => break,\n+            }\n+        }\n+\n+        // return early if no data was loaded\n+        if rows.len() == 0 {\n+            return None;\n+        }\n+\n+        let projection: Vec<usize> = match self.projection {\n+            Some(ref v) => v.clone(),\n+            None => self\n+                .schema\n+                .fields()\n+                .iter()\n+                .enumerate()\n+                .map(|(i, _)| i)\n+                .collect(),\n+        };\n+\n+        let arrays: Result<Vec<ArrayRef>, ArrowError> = projection\n+            .iter()\n+            .map(|i| {\n+                let field = self.schema.field(*i);\n+\n+                match field.data_type() {\n+                    &DataType::Boolean => build_primitive_array!(rows, i, bool),\n+                    &DataType::Int8 => build_primitive_array!(rows, i, i8),\n+                    &DataType::Int16 => build_primitive_array!(rows, i, i16),\n+                    &DataType::Int32 => build_primitive_array!(rows, i, i32),\n+                    &DataType::Int64 => build_primitive_array!(rows, i, i64),\n+                    &DataType::UInt8 => build_primitive_array!(rows, i, u8),\n+                    &DataType::UInt16 => build_primitive_array!(rows, i, u16),\n+                    &DataType::UInt32 => build_primitive_array!(rows, i, u32),\n+                    &DataType::UInt64 => build_primitive_array!(rows, i, u64),\n+                    &DataType::Float16 => build_primitive_array!(rows, i, f32),\n \n Review comment:\n   This doesn't look right - half float is stored with 2 bytes but here we are making them `f32` (4 bytes). Maybe we should leave it as a TODO for now.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-20T17:50:05.110+0000",
                    "updated": "2018-11-20T17:50:05.110+0000",
                    "started": "2018-11-20T17:50:05.109+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167891",
                    "issueId": "13197202"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202/worklog/167892",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on a change in pull request #2992: ARROW-3726: [Rust] Add CSV reader with example\nURL: https://github.com/apache/arrow/pull/2992#discussion_r235103880\n \n \n\n ##########\n File path: rust/src/csvreader.rs\n ##########\n @@ -0,0 +1,263 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! CSV Reader\n+//!\n+//! This CSV reader allows CSV files to be read into the Arrow memory model. Records are loaded in\n+//! batches and are then converted from row-based data to columnar data.\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use arrow::csvreader::CsvReader;\n+//! use arrow::datatypes::{DataType, Field, Schema};\n+//! use std::fs::File;\n+//! use std::sync::Arc;\n+//!\n+//! let schema = Schema::new(vec![\n+//!   Field::new(\"city\", DataType::Utf8, false),\n+//!   Field::new(\"lat\", DataType::Float64, false),\n+//!   Field::new(\"lng\", DataType::Float64, false),\n+//! ]);\n+//!\n+//! let file = File::open(\"test/data/uk_cities.csv\").unwrap();\n+//!\n+//! let mut csv = CsvReader::new(file, Arc::new(schema), false, 1024, None);\n+//! let batch = csv.next().unwrap().unwrap();\n+//!```\n+\n+use std::fs::File;\n+use std::io::BufReader;\n+use std::sync::Arc;\n+\n+use array::{ArrayRef, BinaryArray};\n+use builder::{ArrayBuilder, ListArrayBuilder, PrimitiveArrayBuilder};\n+use datatypes::{DataType, Schema};\n+use error::ArrowError;\n+use record_batch::RecordBatch;\n+\n+use csv;\n+use csv::{StringRecord, StringRecordsIntoIter};\n+\n+/// CSV file reader\n+pub struct CsvReader {\n+    /// Explicit schema for the CSV file\n+    schema: Arc<Schema>,\n+    /// Optional projection for which columns to load (zero-based column indices)\n+    projection: Option<Vec<usize>>,\n+    /// File reader\n+    record_iter: StringRecordsIntoIter<BufReader<File>>,\n+    /// Batch size (number of records to load each time)\n+    batch_size: usize,\n+}\n+\n+impl CsvReader {\n+    /// Create a new CsvReader\n+    pub fn new(\n+        file: File,\n+        schema: Arc<Schema>,\n+        has_headers: bool,\n+        batch_size: usize,\n+        projection: Option<Vec<usize>>,\n+    ) -> Self {\n+        let csv_reader = csv::ReaderBuilder::new()\n+            .has_headers(has_headers)\n+            .from_reader(BufReader::new(file));\n+\n+        let record_iter = csv_reader.into_records();\n+        CsvReader {\n+            schema: schema.clone(),\n+            projection,\n+            record_iter,\n+            batch_size,\n+        }\n+    }\n+}\n+\n+macro_rules! build_primitive_array {\n+    ($ROWS:expr, $COL_INDEX:expr, $TY:ty) => {{\n+        let mut builder = PrimitiveArrayBuilder::<$TY>::new($ROWS.len() as i64);\n+        for row_index in 0..$ROWS.len() {\n+            match $ROWS[row_index].get(*$COL_INDEX) {\n+                Some(s) if s.len() > 0 => builder.push(s.parse::<$TY>().unwrap()).unwrap(),\n+                _ => builder.push_null().unwrap(),\n+            }\n+        }\n+        Ok(Arc::new(builder.finish()) as ArrayRef)\n+    }};\n+}\n+\n+impl CsvReader {\n+    /// Read the next batch of rows\n+    pub fn next(&mut self) -> Option<Result<Arc<RecordBatch>, ArrowError>> {\n+        // read a batch of rows into memory\n+        let mut rows: Vec<StringRecord> = Vec::with_capacity(self.batch_size);\n+        for _ in 0..self.batch_size {\n+            match self.record_iter.next() {\n+                Some(Ok(r)) => {\n+                    rows.push(r);\n+                }\n+                Some(Err(_)) => {\n+                    return Some(Err(ArrowError::ParseError(\n \n Review comment:\n   Perhaps we should surface this error into the `ParseError`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-20T17:50:05.131+0000",
                    "updated": "2018-11-20T17:50:05.131+0000",
                    "started": "2018-11-20T17:50:05.130+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167892",
                    "issueId": "13197202"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202/worklog/167893",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on a change in pull request #2992: ARROW-3726: [Rust] Add CSV reader with example\nURL: https://github.com/apache/arrow/pull/2992#discussion_r235104202\n \n \n\n ##########\n File path: rust/src/csvreader.rs\n ##########\n @@ -0,0 +1,263 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! CSV Reader\n+//!\n+//! This CSV reader allows CSV files to be read into the Arrow memory model. Records are loaded in\n+//! batches and are then converted from row-based data to columnar data.\n+//!\n+//! Example:\n+//!\n+//! ```\n+//! use arrow::csvreader::CsvReader;\n+//! use arrow::datatypes::{DataType, Field, Schema};\n+//! use std::fs::File;\n+//! use std::sync::Arc;\n+//!\n+//! let schema = Schema::new(vec![\n+//!   Field::new(\"city\", DataType::Utf8, false),\n+//!   Field::new(\"lat\", DataType::Float64, false),\n+//!   Field::new(\"lng\", DataType::Float64, false),\n+//! ]);\n+//!\n+//! let file = File::open(\"test/data/uk_cities.csv\").unwrap();\n+//!\n+//! let mut csv = CsvReader::new(file, Arc::new(schema), false, 1024, None);\n+//! let batch = csv.next().unwrap().unwrap();\n+//!```\n+\n+use std::fs::File;\n+use std::io::BufReader;\n+use std::sync::Arc;\n+\n+use array::{ArrayRef, BinaryArray};\n+use builder::{ArrayBuilder, ListArrayBuilder, PrimitiveArrayBuilder};\n+use datatypes::{DataType, Schema};\n+use error::ArrowError;\n+use record_batch::RecordBatch;\n+\n+use csv;\n+use csv::{StringRecord, StringRecordsIntoIter};\n+\n+/// CSV file reader\n+pub struct CsvReader {\n+    /// Explicit schema for the CSV file\n+    schema: Arc<Schema>,\n+    /// Optional projection for which columns to load (zero-based column indices)\n+    projection: Option<Vec<usize>>,\n+    /// File reader\n+    record_iter: StringRecordsIntoIter<BufReader<File>>,\n+    /// Batch size (number of records to load each time)\n+    batch_size: usize,\n+}\n+\n+impl CsvReader {\n+    /// Create a new CsvReader\n+    pub fn new(\n+        file: File,\n+        schema: Arc<Schema>,\n+        has_headers: bool,\n+        batch_size: usize,\n+        projection: Option<Vec<usize>>,\n+    ) -> Self {\n+        let csv_reader = csv::ReaderBuilder::new()\n+            .has_headers(has_headers)\n+            .from_reader(BufReader::new(file));\n+\n+        let record_iter = csv_reader.into_records();\n+        CsvReader {\n+            schema: schema.clone(),\n+            projection,\n+            record_iter,\n+            batch_size,\n+        }\n+    }\n+}\n+\n+macro_rules! build_primitive_array {\n+    ($ROWS:expr, $COL_INDEX:expr, $TY:ty) => {{\n+        let mut builder = PrimitiveArrayBuilder::<$TY>::new($ROWS.len() as i64);\n+        for row_index in 0..$ROWS.len() {\n+            match $ROWS[row_index].get(*$COL_INDEX) {\n+                Some(s) if s.len() > 0 => builder.push(s.parse::<$TY>().unwrap()).unwrap(),\n+                _ => builder.push_null().unwrap(),\n+            }\n+        }\n+        Ok(Arc::new(builder.finish()) as ArrayRef)\n+    }};\n+}\n+\n+impl CsvReader {\n+    /// Read the next batch of rows\n+    pub fn next(&mut self) -> Option<Result<Arc<RecordBatch>, ArrowError>> {\n+        // read a batch of rows into memory\n+        let mut rows: Vec<StringRecord> = Vec::with_capacity(self.batch_size);\n+        for _ in 0..self.batch_size {\n+            match self.record_iter.next() {\n+                Some(Ok(r)) => {\n+                    rows.push(r);\n+                }\n+                Some(Err(_)) => {\n+                    return Some(Err(ArrowError::ParseError(\n+                        \"Error reading CSV file\".to_string(),\n+                    )));\n+                }\n+                None => break,\n+            }\n+        }\n+\n+        // return early if no data was loaded\n+        if rows.len() == 0 {\n \n Review comment:\n   nit: use `is_empty()` instead of `len() == 0`? it is more explicit.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-20T17:50:05.146+0000",
                    "updated": "2018-11-20T17:50:05.146+0000",
                    "started": "2018-11-20T17:50:05.145+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167893",
                    "issueId": "13197202"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 16200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@73c6f8d7[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5ae83cb6[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@54f9fa1f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4f6f71ba[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6dd8088c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@10dcac68[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@b6e856e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3f38d718[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1209241b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@674365de[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@18f9d9ad[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@61805dbd[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 16200,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Nov 21 18:52:31 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-11-21T17:39:33.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3726/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2018-11-08T18:28:58.000+0000",
        "updated": "2018-11-21T18:52:31.000+0000",
        "timeoriginalestimate": null,
        "description": "As an Arrow Rust user, I would like to be able to read and write CSV files, so that I can quickly ingest data into an Arrow format for futher use, and save outputs in CSV.\r\n\r\nAs there aren't yet many options for working with tabular/df structures in Rust (other than Andy's DataFusion), I'm struggling to motivate for this feature. However, I think building a csv parser into Rust would\u00a0reduce effort for\u00a0future libs (incl DataFusion).",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 16200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] CSV Reader & Writer",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202/comment/16680332",
                    "id": "16680332",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Since [~pitrou] has just been building a fresh new parallel CSV reader for Cplusplus, its design could be used to help with creating a Rust-native one (or you could possibly wrap the C++ library in Rust, too)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-08T20:09:58.451+0000",
                    "updated": "2018-11-08T20:10:09.022+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202/comment/16680388",
                    "id": "16680388",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=csun",
                        "name": "csun",
                        "key": "csun",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=csun&avatarId=23340",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=csun&avatarId=23340",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=csun&avatarId=23340",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=csun&avatarId=23340"
                        },
                        "displayName": "Chao Sun",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Looks interesting. I'll take this (probably with Rust-native impl).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=csun",
                        "name": "csun",
                        "key": "csun",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=csun&avatarId=23340",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=csun&avatarId=23340",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=csun&avatarId=23340",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=csun&avatarId=23340"
                        },
                        "displayName": "Chao Sun",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2018-11-08T21:11:21.299+0000",
                    "updated": "2018-11-08T21:11:21.299+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202/comment/16690973",
                    "id": "16690973",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "I have a CSV reader + writer already in DataFusion that I was planning on contributing. It needs to be updated to reflect some of the recent changes in the Rust implementation of Arrow.\r\n\r\n[~csun] Are you OK with me taking this one, or do you still want to work on this?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2018-11-18T17:22:38.753+0000",
                    "updated": "2018-11-18T17:22:38.753+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202/comment/16690974",
                    "id": "16690974",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Also, worth stating that my reader + writer leverages the excellent (and high performance) Rust csv crate, so we don't have to reinvent the wheel there.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2018-11-18T17:24:11.805+0000",
                    "updated": "2018-11-18T17:24:11.805+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202/comment/16691880",
                    "id": "16691880",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "body": "Thanks [~andygrove], does the reader support inferring data schema? I got schema inference working through sampling a csv and using the regex crate to match fields by some hierarchy.\u00a0\r\n\r\nIt worked relatively well on primitive types, but I struggled with timestamps because I was trying to read from csv to parquet. For\u00a0timestamps we could allow the user to specify the format (yyyy-mm-dd-... etc), or default to an ISO format. What do you think?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "created": "2018-11-19T15:36:15.346+0000",
                    "updated": "2018-11-19T15:36:15.346+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202/comment/16691901",
                    "id": "16691901",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "I have not implemented schema inference yet. I think we should create a separate ticket for this feature where we can figure out the requirements, like the timestamp issue you mentioned.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2018-11-19T15:57:10.802+0000",
                    "updated": "2018-11-19T15:57:10.802+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202/comment/16695012",
                    "id": "16695012",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 2992\n[https://github.com/apache/arrow/pull/2992]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2018-11-21T17:39:33.606+0000",
                    "updated": "2018-11-21T17:39:33.606+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197202/comment/16695112",
                    "id": "16695112",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "body": "Hi [~andygrove] [~pitrou], I just remembered that the csv library used in Arrow only supports UTF8. Does the cpp-based CSV reader have the same limitation, or will this be limited to Rust? It might be something worth documenting for Rust.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "created": "2018-11-21T18:52:31.463+0000",
                    "updated": "2018-11-21T18:52:31.463+0000"
                }
            ],
            "maxResults": 8,
            "total": 8,
            "startAt": 0
        },
        "customfield_12311820": "0|s00af4:",
        "customfield_12314139": null
    }
}