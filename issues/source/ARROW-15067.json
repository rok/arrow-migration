{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13416625",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416625",
    "key": "ARROW-15067",
    "fields": {
        "parent": {
            "id": "13416610",
            "key": "ARROW-15059",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13416610",
            "fields": {
                "summary": "[C++] Add basic visibility into execution engine performance",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                    "description": "The issue is open and ready for the assignee to start work on it.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                    "name": "Open",
                    "id": "1",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                        "id": 2,
                        "key": "new",
                        "colorName": "blue-gray",
                        "name": "To Do"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available",
            "query-engine"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12632638",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12632638",
                "type": {
                    "id": "10032",
                    "name": "Blocker",
                    "inward": "is blocked by",
                    "outward": "blocks",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"
                },
                "outwardIssue": {
                    "id": "13426226",
                    "key": "ARROW-15529",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426226",
                    "fields": {
                        "summary": "[C++] Add rows scanned to open telemetry / profiling ",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/3",
                            "description": "This issue is being actively worked on at the moment by the assignee.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/inprogress.png",
                            "name": "In Progress",
                            "id": "3",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/4",
                                "id": 4,
                                "key": "indeterminate",
                                "colorName": "yellow",
                                "name": "In Progress"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                            "id": "7",
                            "description": "The sub-task of the issue",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                            "name": "Sub-task",
                            "subtask": true,
                            "avatarId": 21146
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=joosthooz",
            "name": "joosthooz",
            "key": "JIRAUSER280940",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joost Hoozemans",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 63600,
            "total": 63600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 63600,
            "total": 63600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15067/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 106,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416625/worklog/696794",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm opened a new pull request #11964:\nURL: https://github.com/apache/arrow/pull/11964\n\n\n   This adds spans to the scanner, one per fragment and one per batch per fragment, that are enabled based on #ifdefs.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-15T18:13:10.898+0000",
                    "updated": "2021-12-15T18:13:10.898+0000",
                    "started": "2021-12-15T18:13:10.897+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "696794",
                    "issueId": "13416625"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416625/worklog/696795",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11964:\nURL: https://github.com/apache/arrow/pull/11964#issuecomment-995042665\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-15T18:13:33.848+0000",
                    "updated": "2021-12-15T18:13:33.848+0000",
                    "started": "2021-12-15T18:13:33.847+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "696795",
                    "issueId": "13416625"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416625/worklog/696796",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11964:\nURL: https://github.com/apache/arrow/pull/11964#issuecomment-995043666\n\n\n   TODO:\r\n   - [ ] Confirm that we can link these spans to another parent span\r\n     I originally added a parameter to ScanOptions but this won't work since it would expose OpenTelemetry symbols in the public API.\r\n   - [ ] AddressSanitizer reports some leaks, either we need to add a suppression and report upstream or work out why we're getting failures.\r\n   \r\n   Example of output:\r\n   \r\n   <details>\r\n   \r\n   ```\r\n   $ env ARROW_TRACING_BACKEND=ostream ./debug/arrow-dataset-file-ipc-test --gtest_filter='TestScan/*.ScanRecordBatchReader/0AsyncThreaded16b1024r'\r\n   Running main() from /home/lidavidm/Code/upstream/arrow-15067/build/googletest_ep-prefix/src/googletest_ep/googletest/src/gtest_main.cc\r\n   Note: Google Test filter = TestScan/*.ScanRecordBatchReader/0AsyncThreaded16b1024r\r\n   [==========] Running 1 test from 1 test suite.\r\n   [----------] Global test environment set-up.\r\n   [----------] 1 test from TestScan/TestIpcFileFormatScan\r\n   [ RUN      ] TestScan/TestIpcFileFormatScan.ScanRecordBatchReader/0AsyncThreaded16b1024r\r\n   [       OK ] TestScan/TestIpcFileFormatScan.ScanRecordBatchReader/0AsyncThreaded16b1024r (418 ms)\r\n   [----------] 1 test from TestScan/TestIpcFileFormatScan (418 ms total)\r\n   \r\n   [----------] Global test environment tear-down\r\n   [==========] 1 test from 1 test suite ran. (418 ms total)\r\n   [  PASSED  ] 1 test.\r\n   {\r\n     name          : arrow::dataset::IpcFileFormat::OpenReaderAsync\r\n     trace_id      : 483084a5464d0ef6278da1cc982f9dd9\r\n     span_id       : beb598d1dcb93984\r\n     tracestate    : \r\n     parent_span_id: b8ec67d5f5fbc11d\r\n     start         : 1639591037854068113\r\n     duration      : 2869368\r\n     description   : \r\n     span kind     : Internal\r\n     status        : Ok\r\n     attributes    : \r\n   \tthread_id: 139972187428928\r\n     events        : \r\n     links         : \r\n     resources     : \r\n   \tservice.name: unknown_service\r\n   \ttelemetry.sdk.version: 1.1.0\r\n   \ttelemetry.sdk.name: opentelemetry\r\n   \ttelemetry.sdk.language: cpp\r\n     instr-lib     : arrow\r\n   }\r\n   {\r\n     name          : arrow::dataset::IpcFileFormat::ScanBatchesAsync::Next\r\n     trace_id      : 483084a5464d0ef6278da1cc982f9dd9\r\n     span_id       : 6462f59e9d0532df\r\n     tracestate    : \r\n     parent_span_id: b8ec67d5f5fbc11d\r\n     start         : 1639591037864180748\r\n     duration      : 3811981\r\n     description   : \r\n     span kind     : Internal\r\n     status        : Ok\r\n     attributes    : \r\n   \tthread_id: 139972187428928\r\n     events        : \r\n     links         : \r\n     resources     : \r\n   \tservice.name: unknown_service\r\n   \ttelemetry.sdk.version: 1.1.0\r\n   \ttelemetry.sdk.name: opentelemetry\r\n   \ttelemetry.sdk.language: cpp\r\n     instr-lib     : arrow\r\n   }\r\n   (snip)\r\n   {\r\n     name          : arrow::dataset::FragmentToBatches\r\n     trace_id      : 483084a5464d0ef6278da1cc982f9dd9\r\n     span_id       : b8ec67d5f5fbc11d\r\n     tracestate    : \r\n     parent_span_id: 0000000000000000\r\n     start         : 1639591037853521954\r\n     duration      : 169164805\r\n     description   : \r\n     span kind     : Internal\r\n     status        : Ok\r\n     attributes    : \r\n   \tthread_id: 139972070205184\r\n   \tarrow.dataset.fragment.type_name: ipc\r\n   \tarrow.dataset.fragment.last: 1\r\n   \tarrow.dataset.fragment.index: 0\r\n   \tarrow.dataset.fragment: <Buffer>\r\n     events        : \r\n     links         : \r\n     resources     : \r\n   \tservice.name: unknown_service\r\n   \ttelemetry.sdk.version: 1.1.0\r\n   \ttelemetry.sdk.name: opentelemetry\r\n   \ttelemetry.sdk.language: cpp\r\n     instr-lib     : arrow\r\n   }\r\n   ```\r\n   \r\n   </details>\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-15T18:14:49.791+0000",
                    "updated": "2021-12-15T18:14:49.791+0000",
                    "started": "2021-12-15T18:14:49.791+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "696796",
                    "issueId": "13416625"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416625/worklog/696823",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm edited a comment on pull request #11964:\nURL: https://github.com/apache/arrow/pull/11964#issuecomment-995043666\n\n\n   TODO:\r\n   - [ ] Confirm that we can link these spans to another parent span\r\n     I originally added a parameter to ScanOptions but this won't work since it would expose OpenTelemetry symbols in the public API.\r\n   - [ ] AddressSanitizer reports some leaks, either we need to add a suppression and report upstream or work out why we're getting failures.\r\n     I've added suppressions in case they help others, but I can't quite work out why it happens in the first place. Manually shutting down the thread pool results in no leaks. With the debugger I can confirm the thread pool is shutting itself down at thread exit, but for some reason, in the second case, thread local destructors don't seem to get run. It resembles this [LLVM thread](https://lists.llvm.org/pipermail/cfe-users/2015-December/000836.html) (though there's no follow up there) - this might be something we should minimize and submit upstream.\r\n   \r\n   Example of output:\r\n   \r\n   <details>\r\n   \r\n   ```\r\n   $ env ARROW_TRACING_BACKEND=ostream ./debug/arrow-dataset-file-ipc-test --gtest_filter='TestScan/*.ScanRecordBatchReader/0AsyncThreaded16b1024r'\r\n   Running main() from /home/lidavidm/Code/upstream/arrow-15067/build/googletest_ep-prefix/src/googletest_ep/googletest/src/gtest_main.cc\r\n   Note: Google Test filter = TestScan/*.ScanRecordBatchReader/0AsyncThreaded16b1024r\r\n   [==========] Running 1 test from 1 test suite.\r\n   [----------] Global test environment set-up.\r\n   [----------] 1 test from TestScan/TestIpcFileFormatScan\r\n   [ RUN      ] TestScan/TestIpcFileFormatScan.ScanRecordBatchReader/0AsyncThreaded16b1024r\r\n   [       OK ] TestScan/TestIpcFileFormatScan.ScanRecordBatchReader/0AsyncThreaded16b1024r (418 ms)\r\n   [----------] 1 test from TestScan/TestIpcFileFormatScan (418 ms total)\r\n   \r\n   [----------] Global test environment tear-down\r\n   [==========] 1 test from 1 test suite ran. (418 ms total)\r\n   [  PASSED  ] 1 test.\r\n   {\r\n     name          : arrow::dataset::IpcFileFormat::OpenReaderAsync\r\n     trace_id      : 483084a5464d0ef6278da1cc982f9dd9\r\n     span_id       : beb598d1dcb93984\r\n     tracestate    : \r\n     parent_span_id: b8ec67d5f5fbc11d\r\n     start         : 1639591037854068113\r\n     duration      : 2869368\r\n     description   : \r\n     span kind     : Internal\r\n     status        : Ok\r\n     attributes    : \r\n   \tthread_id: 139972187428928\r\n     events        : \r\n     links         : \r\n     resources     : \r\n   \tservice.name: unknown_service\r\n   \ttelemetry.sdk.version: 1.1.0\r\n   \ttelemetry.sdk.name: opentelemetry\r\n   \ttelemetry.sdk.language: cpp\r\n     instr-lib     : arrow\r\n   }\r\n   {\r\n     name          : arrow::dataset::IpcFileFormat::ScanBatchesAsync::Next\r\n     trace_id      : 483084a5464d0ef6278da1cc982f9dd9\r\n     span_id       : 6462f59e9d0532df\r\n     tracestate    : \r\n     parent_span_id: b8ec67d5f5fbc11d\r\n     start         : 1639591037864180748\r\n     duration      : 3811981\r\n     description   : \r\n     span kind     : Internal\r\n     status        : Ok\r\n     attributes    : \r\n   \tthread_id: 139972187428928\r\n     events        : \r\n     links         : \r\n     resources     : \r\n   \tservice.name: unknown_service\r\n   \ttelemetry.sdk.version: 1.1.0\r\n   \ttelemetry.sdk.name: opentelemetry\r\n   \ttelemetry.sdk.language: cpp\r\n     instr-lib     : arrow\r\n   }\r\n   (snip)\r\n   {\r\n     name          : arrow::dataset::FragmentToBatches\r\n     trace_id      : 483084a5464d0ef6278da1cc982f9dd9\r\n     span_id       : b8ec67d5f5fbc11d\r\n     tracestate    : \r\n     parent_span_id: 0000000000000000\r\n     start         : 1639591037853521954\r\n     duration      : 169164805\r\n     description   : \r\n     span kind     : Internal\r\n     status        : Ok\r\n     attributes    : \r\n   \tthread_id: 139972070205184\r\n   \tarrow.dataset.fragment.type_name: ipc\r\n   \tarrow.dataset.fragment.last: 1\r\n   \tarrow.dataset.fragment.index: 0\r\n   \tarrow.dataset.fragment: <Buffer>\r\n     events        : \r\n     links         : \r\n     resources     : \r\n   \tservice.name: unknown_service\r\n   \ttelemetry.sdk.version: 1.1.0\r\n   \ttelemetry.sdk.name: opentelemetry\r\n   \ttelemetry.sdk.language: cpp\r\n     instr-lib     : arrow\r\n   }\r\n   ```\r\n   \r\n   </details>\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-15T19:12:49.400+0000",
                    "updated": "2021-12-15T19:12:49.400+0000",
                    "started": "2021-12-15T19:12:49.399+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "696823",
                    "issueId": "13416625"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416625/worklog/696827",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm edited a comment on pull request #11964:\nURL: https://github.com/apache/arrow/pull/11964#issuecomment-995043666\n\n\n   TODO:\r\n   - [ ] Confirm that we can link these spans to another parent span\r\n     I originally added a parameter to ScanOptions but this won't work since it would expose OpenTelemetry symbols in the public API.\r\n   - [ ] AddressSanitizer reports some leaks, either we need to add a suppression and report upstream or work out why we're getting failures.\r\n     I've added suppressions in case they help others, but I can't quite work out why it happens in the first place. Manually shutting down the thread pool results in no leaks. With the debugger I can confirm the thread pool is shutting itself down at thread exit, but for some reason, in the second case, thread local destructors don't seem to get run. It resembles this [LLVM thread](https://lists.llvm.org/pipermail/cfe-users/2015-December/000836.html) (though there's no follow up there) - this might be something we should minimize and submit upstream.\r\n     Weirdly, adding a span on the main thread fixes this...\r\n   \r\n   Example of output:\r\n   \r\n   <details>\r\n   \r\n   ```\r\n   $ env ARROW_TRACING_BACKEND=ostream ./debug/arrow-dataset-file-ipc-test --gtest_filter='TestScan/*.ScanRecordBatchReader/0AsyncThreaded16b1024r'\r\n   Running main() from /home/lidavidm/Code/upstream/arrow-15067/build/googletest_ep-prefix/src/googletest_ep/googletest/src/gtest_main.cc\r\n   Note: Google Test filter = TestScan/*.ScanRecordBatchReader/0AsyncThreaded16b1024r\r\n   [==========] Running 1 test from 1 test suite.\r\n   [----------] Global test environment set-up.\r\n   [----------] 1 test from TestScan/TestIpcFileFormatScan\r\n   [ RUN      ] TestScan/TestIpcFileFormatScan.ScanRecordBatchReader/0AsyncThreaded16b1024r\r\n   [       OK ] TestScan/TestIpcFileFormatScan.ScanRecordBatchReader/0AsyncThreaded16b1024r (418 ms)\r\n   [----------] 1 test from TestScan/TestIpcFileFormatScan (418 ms total)\r\n   \r\n   [----------] Global test environment tear-down\r\n   [==========] 1 test from 1 test suite ran. (418 ms total)\r\n   [  PASSED  ] 1 test.\r\n   {\r\n     name          : arrow::dataset::IpcFileFormat::OpenReaderAsync\r\n     trace_id      : 483084a5464d0ef6278da1cc982f9dd9\r\n     span_id       : beb598d1dcb93984\r\n     tracestate    : \r\n     parent_span_id: b8ec67d5f5fbc11d\r\n     start         : 1639591037854068113\r\n     duration      : 2869368\r\n     description   : \r\n     span kind     : Internal\r\n     status        : Ok\r\n     attributes    : \r\n   \tthread_id: 139972187428928\r\n     events        : \r\n     links         : \r\n     resources     : \r\n   \tservice.name: unknown_service\r\n   \ttelemetry.sdk.version: 1.1.0\r\n   \ttelemetry.sdk.name: opentelemetry\r\n   \ttelemetry.sdk.language: cpp\r\n     instr-lib     : arrow\r\n   }\r\n   {\r\n     name          : arrow::dataset::IpcFileFormat::ScanBatchesAsync::Next\r\n     trace_id      : 483084a5464d0ef6278da1cc982f9dd9\r\n     span_id       : 6462f59e9d0532df\r\n     tracestate    : \r\n     parent_span_id: b8ec67d5f5fbc11d\r\n     start         : 1639591037864180748\r\n     duration      : 3811981\r\n     description   : \r\n     span kind     : Internal\r\n     status        : Ok\r\n     attributes    : \r\n   \tthread_id: 139972187428928\r\n     events        : \r\n     links         : \r\n     resources     : \r\n   \tservice.name: unknown_service\r\n   \ttelemetry.sdk.version: 1.1.0\r\n   \ttelemetry.sdk.name: opentelemetry\r\n   \ttelemetry.sdk.language: cpp\r\n     instr-lib     : arrow\r\n   }\r\n   (snip)\r\n   {\r\n     name          : arrow::dataset::FragmentToBatches\r\n     trace_id      : 483084a5464d0ef6278da1cc982f9dd9\r\n     span_id       : b8ec67d5f5fbc11d\r\n     tracestate    : \r\n     parent_span_id: 0000000000000000\r\n     start         : 1639591037853521954\r\n     duration      : 169164805\r\n     description   : \r\n     span kind     : Internal\r\n     status        : Ok\r\n     attributes    : \r\n   \tthread_id: 139972070205184\r\n   \tarrow.dataset.fragment.type_name: ipc\r\n   \tarrow.dataset.fragment.last: 1\r\n   \tarrow.dataset.fragment.index: 0\r\n   \tarrow.dataset.fragment: <Buffer>\r\n     events        : \r\n     links         : \r\n     resources     : \r\n   \tservice.name: unknown_service\r\n   \ttelemetry.sdk.version: 1.1.0\r\n   \ttelemetry.sdk.name: opentelemetry\r\n   \ttelemetry.sdk.language: cpp\r\n     instr-lib     : arrow\r\n   }\r\n   ```\r\n   \r\n   </details>\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-15T19:20:52.437+0000",
                    "updated": "2021-12-15T19:20:52.437+0000",
                    "started": "2021-12-15T19:20:52.437+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "696827",
                    "issueId": "13416625"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416625/worklog/696841",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm edited a comment on pull request #11964:\nURL: https://github.com/apache/arrow/pull/11964#issuecomment-995043666\n\n\n   TODO:\r\n   - [x] Confirm that we can link these spans to another parent span\r\n     I originally added a parameter to ScanOptions but this won't work since it would expose OpenTelemetry symbols in the public API.\r\n   - [ ] AddressSanitizer reports some leaks, either we need to add a suppression and report upstream or work out why we're getting failures.\r\n     I've added suppressions in case they help others, but I can't quite work out why it happens in the first place. Manually shutting down the thread pool results in no leaks. With the debugger I can confirm the thread pool is shutting itself down at thread exit, but for some reason, in the second case, thread local destructors don't seem to get run. It resembles this [LLVM thread](https://lists.llvm.org/pipermail/cfe-users/2015-December/000836.html) (though there's no follow up there) - this might be something we should minimize and submit upstream.\r\n     Weirdly, adding a span on the main thread fixes this...\r\n   \r\n   Example of output:\r\n   \r\n   <details>\r\n   \r\n   ```\r\n   $ env ARROW_TRACING_BACKEND=ostream ./debug/arrow-dataset-file-ipc-test --gtest_filter='TestScan/*.ScanRecordBatchReader/0AsyncThreaded16b1024r'\r\n   Running main() from /home/lidavidm/Code/upstream/arrow-15067/build/googletest_ep-prefix/src/googletest_ep/googletest/src/gtest_main.cc\r\n   Note: Google Test filter = TestScan/*.ScanRecordBatchReader/0AsyncThreaded16b1024r\r\n   [==========] Running 1 test from 1 test suite.\r\n   [----------] Global test environment set-up.\r\n   [----------] 1 test from TestScan/TestIpcFileFormatScan\r\n   [ RUN      ] TestScan/TestIpcFileFormatScan.ScanRecordBatchReader/0AsyncThreaded16b1024r\r\n   [       OK ] TestScan/TestIpcFileFormatScan.ScanRecordBatchReader/0AsyncThreaded16b1024r (418 ms)\r\n   [----------] 1 test from TestScan/TestIpcFileFormatScan (418 ms total)\r\n   \r\n   [----------] Global test environment tear-down\r\n   [==========] 1 test from 1 test suite ran. (418 ms total)\r\n   [  PASSED  ] 1 test.\r\n   {\r\n     name          : arrow::dataset::IpcFileFormat::OpenReaderAsync\r\n     trace_id      : 483084a5464d0ef6278da1cc982f9dd9\r\n     span_id       : beb598d1dcb93984\r\n     tracestate    : \r\n     parent_span_id: b8ec67d5f5fbc11d\r\n     start         : 1639591037854068113\r\n     duration      : 2869368\r\n     description   : \r\n     span kind     : Internal\r\n     status        : Ok\r\n     attributes    : \r\n   \tthread_id: 139972187428928\r\n     events        : \r\n     links         : \r\n     resources     : \r\n   \tservice.name: unknown_service\r\n   \ttelemetry.sdk.version: 1.1.0\r\n   \ttelemetry.sdk.name: opentelemetry\r\n   \ttelemetry.sdk.language: cpp\r\n     instr-lib     : arrow\r\n   }\r\n   {\r\n     name          : arrow::dataset::IpcFileFormat::ScanBatchesAsync::Next\r\n     trace_id      : 483084a5464d0ef6278da1cc982f9dd9\r\n     span_id       : 6462f59e9d0532df\r\n     tracestate    : \r\n     parent_span_id: b8ec67d5f5fbc11d\r\n     start         : 1639591037864180748\r\n     duration      : 3811981\r\n     description   : \r\n     span kind     : Internal\r\n     status        : Ok\r\n     attributes    : \r\n   \tthread_id: 139972187428928\r\n     events        : \r\n     links         : \r\n     resources     : \r\n   \tservice.name: unknown_service\r\n   \ttelemetry.sdk.version: 1.1.0\r\n   \ttelemetry.sdk.name: opentelemetry\r\n   \ttelemetry.sdk.language: cpp\r\n     instr-lib     : arrow\r\n   }\r\n   (snip)\r\n   {\r\n     name          : arrow::dataset::FragmentToBatches\r\n     trace_id      : 483084a5464d0ef6278da1cc982f9dd9\r\n     span_id       : b8ec67d5f5fbc11d\r\n     tracestate    : \r\n     parent_span_id: 0000000000000000\r\n     start         : 1639591037853521954\r\n     duration      : 169164805\r\n     description   : \r\n     span kind     : Internal\r\n     status        : Ok\r\n     attributes    : \r\n   \tthread_id: 139972070205184\r\n   \tarrow.dataset.fragment.type_name: ipc\r\n   \tarrow.dataset.fragment.last: 1\r\n   \tarrow.dataset.fragment.index: 0\r\n   \tarrow.dataset.fragment: <Buffer>\r\n     events        : \r\n     links         : \r\n     resources     : \r\n   \tservice.name: unknown_service\r\n   \ttelemetry.sdk.version: 1.1.0\r\n   \ttelemetry.sdk.name: opentelemetry\r\n   \ttelemetry.sdk.language: cpp\r\n     instr-lib     : arrow\r\n   }\r\n   ```\r\n   \r\n   </details>\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-15T19:43:17.606+0000",
                    "updated": "2021-12-15T19:43:17.606+0000",
                    "started": "2021-12-15T19:43:17.606+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "696841",
                    "issueId": "13416625"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416625/worklog/696842",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm edited a comment on pull request #11964:\nURL: https://github.com/apache/arrow/pull/11964#issuecomment-995043666\n\n\n   TODO:\r\n   - [x] Confirm that we can link these spans to another parent span\r\n     I originally added a parameter to ScanOptions but this won't work since it would expose OpenTelemetry symbols in the public API. Instead, so long as a span is active when you call ScanBatchesUnorderedAsync (directly or indirectly), that span will be the parent of any span spawned inside the scanner.\r\n   - [ ] AddressSanitizer reports some leaks, either we need to add a suppression and report upstream or work out why we're getting failures.\r\n     I've added suppressions in case they help others, but I can't quite work out why it happens in the first place. Manually shutting down the thread pool results in no leaks. With the debugger I can confirm the thread pool is shutting itself down at thread exit, but for some reason, in the second case, thread local destructors don't seem to get run. It resembles this [LLVM thread](https://lists.llvm.org/pipermail/cfe-users/2015-December/000836.html) (though there's no follow up there) - this might be something we should minimize and submit upstream.\r\n     Weirdly, adding a span on the main thread fixes this...\r\n   \r\n   Example of output:\r\n   \r\n   <details>\r\n   \r\n   ```\r\n   $ env ARROW_TRACING_BACKEND=ostream ./debug/arrow-dataset-file-ipc-test --gtest_filter='TestScan/*.ScanRecordBatchReader/0AsyncThreaded16b1024r'\r\n   Running main() from /home/lidavidm/Code/upstream/arrow-15067/build/googletest_ep-prefix/src/googletest_ep/googletest/src/gtest_main.cc\r\n   Note: Google Test filter = TestScan/*.ScanRecordBatchReader/0AsyncThreaded16b1024r\r\n   [==========] Running 1 test from 1 test suite.\r\n   [----------] Global test environment set-up.\r\n   [----------] 1 test from TestScan/TestIpcFileFormatScan\r\n   [ RUN      ] TestScan/TestIpcFileFormatScan.ScanRecordBatchReader/0AsyncThreaded16b1024r\r\n   [       OK ] TestScan/TestIpcFileFormatScan.ScanRecordBatchReader/0AsyncThreaded16b1024r (418 ms)\r\n   [----------] 1 test from TestScan/TestIpcFileFormatScan (418 ms total)\r\n   \r\n   [----------] Global test environment tear-down\r\n   [==========] 1 test from 1 test suite ran. (418 ms total)\r\n   [  PASSED  ] 1 test.\r\n   {\r\n     name          : arrow::dataset::IpcFileFormat::OpenReaderAsync\r\n     trace_id      : 483084a5464d0ef6278da1cc982f9dd9\r\n     span_id       : beb598d1dcb93984\r\n     tracestate    : \r\n     parent_span_id: b8ec67d5f5fbc11d\r\n     start         : 1639591037854068113\r\n     duration      : 2869368\r\n     description   : \r\n     span kind     : Internal\r\n     status        : Ok\r\n     attributes    : \r\n   \tthread_id: 139972187428928\r\n     events        : \r\n     links         : \r\n     resources     : \r\n   \tservice.name: unknown_service\r\n   \ttelemetry.sdk.version: 1.1.0\r\n   \ttelemetry.sdk.name: opentelemetry\r\n   \ttelemetry.sdk.language: cpp\r\n     instr-lib     : arrow\r\n   }\r\n   {\r\n     name          : arrow::dataset::IpcFileFormat::ScanBatchesAsync::Next\r\n     trace_id      : 483084a5464d0ef6278da1cc982f9dd9\r\n     span_id       : 6462f59e9d0532df\r\n     tracestate    : \r\n     parent_span_id: b8ec67d5f5fbc11d\r\n     start         : 1639591037864180748\r\n     duration      : 3811981\r\n     description   : \r\n     span kind     : Internal\r\n     status        : Ok\r\n     attributes    : \r\n   \tthread_id: 139972187428928\r\n     events        : \r\n     links         : \r\n     resources     : \r\n   \tservice.name: unknown_service\r\n   \ttelemetry.sdk.version: 1.1.0\r\n   \ttelemetry.sdk.name: opentelemetry\r\n   \ttelemetry.sdk.language: cpp\r\n     instr-lib     : arrow\r\n   }\r\n   (snip)\r\n   {\r\n     name          : arrow::dataset::FragmentToBatches\r\n     trace_id      : 483084a5464d0ef6278da1cc982f9dd9\r\n     span_id       : b8ec67d5f5fbc11d\r\n     tracestate    : \r\n     parent_span_id: 0000000000000000\r\n     start         : 1639591037853521954\r\n     duration      : 169164805\r\n     description   : \r\n     span kind     : Internal\r\n     status        : Ok\r\n     attributes    : \r\n   \tthread_id: 139972070205184\r\n   \tarrow.dataset.fragment.type_name: ipc\r\n   \tarrow.dataset.fragment.last: 1\r\n   \tarrow.dataset.fragment.index: 0\r\n   \tarrow.dataset.fragment: <Buffer>\r\n     events        : \r\n     links         : \r\n     resources     : \r\n   \tservice.name: unknown_service\r\n   \ttelemetry.sdk.version: 1.1.0\r\n   \ttelemetry.sdk.name: opentelemetry\r\n   \ttelemetry.sdk.language: cpp\r\n     instr-lib     : arrow\r\n   }\r\n   ```\r\n   \r\n   </details>\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-15T19:43:40.398+0000",
                    "updated": "2021-12-15T19:43:40.398+0000",
                    "started": "2021-12-15T19:43:40.398+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "696842",
                    "issueId": "13416625"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416625/worklog/696844",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm edited a comment on pull request #11964:\nURL: https://github.com/apache/arrow/pull/11964#issuecomment-995043666\n\n\n   TODO:\r\n   - [x] Confirm that we can link these spans to another parent span\r\n     I originally added a parameter to ScanOptions but this won't work since it would expose OpenTelemetry symbols in the public API. Instead, so long as a span is active when you call ScanBatchesUnorderedAsync (directly or indirectly), that span will be the parent of any span spawned inside the scanner.\r\n   - [ ] AddressSanitizer reports some leaks, either we need to add a suppression and report upstream or work out why we're getting failures.\r\n     I've added suppressions in case they help others, but I can't quite work out why it happens in the first place. Manually shutting down the thread pool results in no leaks. With the debugger I can confirm the thread pool is shutting itself down at thread exit, but for some reason, in the second case, thread local destructors don't seem to get run. It resembles this [LLVM thread](https://lists.llvm.org/pipermail/cfe-users/2015-December/000836.html) (though there's no follow up there) - this might be something we should minimize and submit upstream.\r\n     Weirdly, adding a span on the main thread (in order to test span linking) fixes this...\r\n   \r\n   Example of output:\r\n   \r\n   <details>\r\n   \r\n   ```\r\n   $ env ARROW_TRACING_BACKEND=ostream ./debug/arrow-dataset-file-ipc-test --gtest_filter='TestScan/*.ScanRecordBatchReader/0AsyncThreaded16b1024r'\r\n   Running main() from /home/lidavidm/Code/upstream/arrow-15067/build/googletest_ep-prefix/src/googletest_ep/googletest/src/gtest_main.cc\r\n   Note: Google Test filter = TestScan/*.ScanRecordBatchReader/0AsyncThreaded16b1024r\r\n   [==========] Running 1 test from 1 test suite.\r\n   [----------] Global test environment set-up.\r\n   [----------] 1 test from TestScan/TestIpcFileFormatScan\r\n   [ RUN      ] TestScan/TestIpcFileFormatScan.ScanRecordBatchReader/0AsyncThreaded16b1024r\r\n   [       OK ] TestScan/TestIpcFileFormatScan.ScanRecordBatchReader/0AsyncThreaded16b1024r (418 ms)\r\n   [----------] 1 test from TestScan/TestIpcFileFormatScan (418 ms total)\r\n   \r\n   [----------] Global test environment tear-down\r\n   [==========] 1 test from 1 test suite ran. (418 ms total)\r\n   [  PASSED  ] 1 test.\r\n   {\r\n     name          : arrow::dataset::IpcFileFormat::OpenReaderAsync\r\n     trace_id      : 483084a5464d0ef6278da1cc982f9dd9\r\n     span_id       : beb598d1dcb93984\r\n     tracestate    : \r\n     parent_span_id: b8ec67d5f5fbc11d\r\n     start         : 1639591037854068113\r\n     duration      : 2869368\r\n     description   : \r\n     span kind     : Internal\r\n     status        : Ok\r\n     attributes    : \r\n   \tthread_id: 139972187428928\r\n     events        : \r\n     links         : \r\n     resources     : \r\n   \tservice.name: unknown_service\r\n   \ttelemetry.sdk.version: 1.1.0\r\n   \ttelemetry.sdk.name: opentelemetry\r\n   \ttelemetry.sdk.language: cpp\r\n     instr-lib     : arrow\r\n   }\r\n   {\r\n     name          : arrow::dataset::IpcFileFormat::ScanBatchesAsync::Next\r\n     trace_id      : 483084a5464d0ef6278da1cc982f9dd9\r\n     span_id       : 6462f59e9d0532df\r\n     tracestate    : \r\n     parent_span_id: b8ec67d5f5fbc11d\r\n     start         : 1639591037864180748\r\n     duration      : 3811981\r\n     description   : \r\n     span kind     : Internal\r\n     status        : Ok\r\n     attributes    : \r\n   \tthread_id: 139972187428928\r\n     events        : \r\n     links         : \r\n     resources     : \r\n   \tservice.name: unknown_service\r\n   \ttelemetry.sdk.version: 1.1.0\r\n   \ttelemetry.sdk.name: opentelemetry\r\n   \ttelemetry.sdk.language: cpp\r\n     instr-lib     : arrow\r\n   }\r\n   (snip)\r\n   {\r\n     name          : arrow::dataset::FragmentToBatches\r\n     trace_id      : 483084a5464d0ef6278da1cc982f9dd9\r\n     span_id       : b8ec67d5f5fbc11d\r\n     tracestate    : \r\n     parent_span_id: 0000000000000000\r\n     start         : 1639591037853521954\r\n     duration      : 169164805\r\n     description   : \r\n     span kind     : Internal\r\n     status        : Ok\r\n     attributes    : \r\n   \tthread_id: 139972070205184\r\n   \tarrow.dataset.fragment.type_name: ipc\r\n   \tarrow.dataset.fragment.last: 1\r\n   \tarrow.dataset.fragment.index: 0\r\n   \tarrow.dataset.fragment: <Buffer>\r\n     events        : \r\n     links         : \r\n     resources     : \r\n   \tservice.name: unknown_service\r\n   \ttelemetry.sdk.version: 1.1.0\r\n   \ttelemetry.sdk.name: opentelemetry\r\n   \ttelemetry.sdk.language: cpp\r\n     instr-lib     : arrow\r\n   }\r\n   ```\r\n   \r\n   </details>\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-15T19:44:05.976+0000",
                    "updated": "2021-12-15T19:44:05.976+0000",
                    "started": "2021-12-15T19:44:05.976+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "696844",
                    "issueId": "13416625"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416625/worklog/696854",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11964:\nURL: https://github.com/apache/arrow/pull/11964#issuecomment-995171982\n\n\n   CC @westonpace. You will need ARROW-15044/#11925 to actually see the spans (or a local OTLP collector instance). \r\n   \r\n   I will circle back and try to isolate the issue with ASan later. That said, I think impact is minimal; it shouldn't affect CI and we can disable ASan or use the suppressions for local development, and it also wouldn't be enabled for things like Conbench.\r\n   \r\n   I haven't quantified the performance impact here, either (do we have a benchmark that would stress these paths? I can run locally and report)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-15T20:03:45.794+0000",
                    "updated": "2021-12-15T20:03:45.794+0000",
                    "started": "2021-12-15T20:03:45.794+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "696854",
                    "issueId": "13416625"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416625/worklog/697430",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11964:\nURL: https://github.com/apache/arrow/pull/11964#issuecomment-996082740\n\n\n   Rebased with ARROW-15044.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-16T18:45:27.535+0000",
                    "updated": "2021-12-16T18:45:27.535+0000",
                    "started": "2021-12-16T18:45:27.535+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "697430",
                    "issueId": "13416625"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416625/worklog/698104",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #11964:\nURL: https://github.com/apache/arrow/pull/11964#discussion_r771693311\n\n\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.h\n##########\n@@ -97,6 +98,57 @@ AsyncGenerator<T> WrapAsyncGenerator(AsyncGenerator<T> wrapped,\n     return fut;\n   };\n }\n+\n+/// \\brief Start a new span for each invocation of a generator.\n+///\n+/// The parent span of the new span will be the currently active span\n+/// (if any) as of when WrapAsyncGenerator was itself called.\n+template <typename T>\n+AsyncGenerator<T> WrapAsyncGenerator(AsyncGenerator<T> wrapped,\n+                                     const std::string& span_name) {\n+  opentelemetry::trace::StartSpanOptions options;\n+  options.parent = GetTracer()->GetCurrentSpan()->GetContext();\n+  return WrapAsyncGenerator(std::move(wrapped), std::move(options), span_name);\n+}\n+\n+/// \\brief End the given span when the given async generator ends.\n+///\n+/// The span will be made the active span each time the generator is called.\n+template <typename T>\n+AsyncGenerator<T> TieSpanToAsyncGenerator(\n+    AsyncGenerator<T> wrapped,\n+    opentelemetry::nostd::shared_ptr<opentelemetry::trace::Span> span) {\n+  return [=]() mutable -> Future<T> {\n+    auto scope = GetTracer()->WithActiveSpan(span);\n+    auto fut = wrapped();\n+    fut.AddCallback([span](const Result<T>& result) {\n+      if (!result.ok() || IsIterationEnd(*result)) {\n+        MarkSpan(result.status(), span.get());\n+        span->End();\n+      }\n+    });\n+    return fut;\n\nReview comment:\n       Maybe use `Then`?  The timing can't really be guaranteed otherwise.  Consuming callbacks could run before this callback does.  But I suppose that isn't too critical.  I don't have enough headspace around spans yet to know if we need to worry about the timing (e.g. will the consumer start a new active span and then this one ends that the wrong one?)\n\n##########\nFile path: cpp/src/arrow/dataset/file_csv.cc\n##########\n@@ -171,11 +177,20 @@ static inline Future<std::shared_ptr<csv::StreamingReader>> OpenReaderAsync(\n       }));\n   return reader_fut.Then(\n       // Adds the filename to the error\n-      [](const std::shared_ptr<csv::StreamingReader>& reader)\n-          -> Result<std::shared_ptr<csv::StreamingReader>> { return reader; },\n-      [source](const Status& err) -> Result<std::shared_ptr<csv::StreamingReader>> {\n-        return err.WithMessage(\"Could not open CSV input source '\", source.path(),\n-                               \"': \", err);\n+      [=](const std::shared_ptr<csv::StreamingReader>& reader)\n+          -> Result<std::shared_ptr<csv::StreamingReader>> {\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+        span->SetStatus(opentelemetry::trace::StatusCode::kOk);\n\nReview comment:\n       This seems peculiar.  Wouldn't OT assume a span that ended without error was ok?\n\n##########\nFile path: cpp/src/arrow/dataset/file_csv.cc\n##########\n@@ -276,7 +291,12 @@ Result<RecordBatchGenerator> CsvFileFormat::ScanBatchesAsync(\n   auto source = file->source();\n   auto reader_fut =\n       OpenReaderAsync(source, *this, scan_options, ::arrow::internal::GetCpuThreadPool());\n-  return GeneratorFromReader(std::move(reader_fut), scan_options->batch_size);\n+  auto generator = GeneratorFromReader(std::move(reader_fut), scan_options->batch_size);\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+  generator = arrow::internal::tracing::WrapAsyncGenerator(\n+      std::move(generator), \"arrow::dataset::CsvFileFormat::ScanBatchesAsync::Next\");\n\nReview comment:\n       Having `FileFormat::ScanBatchesAsync::Next` and `CsvFileFormat::ScanBatchesAsync::Next` seems a little redundant. I wouldn't expect there to be much difference in the two.  Am I missing something?\n\n##########\nFile path: cpp/src/arrow/dataset/file_csv.cc\n##########\n@@ -148,9 +149,14 @@ static inline Result<csv::ReadOptions> GetReadOptions(\n static inline Future<std::shared_ptr<csv::StreamingReader>> OpenReaderAsync(\n     const FileSource& source, const CsvFileFormat& format,\n     const std::shared_ptr<ScanOptions>& scan_options, Executor* cpu_executor) {\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+  auto tracer = arrow::internal::tracing::GetTracer();\n+  auto span = tracer->StartSpan(\"arrow::dataset::CsvFileFormat::OpenReaderAsync\");\n+#endif\n\nReview comment:\n       Could we push this `ifdef` into `StartSpan` by returning a dummy span object with no-op methods?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-17T21:10:47.694+0000",
                    "updated": "2021-12-17T21:10:47.694+0000",
                    "started": "2021-12-17T21:10:47.694+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "698104",
                    "issueId": "13416625"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416625/worklog/698125",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11964:\nURL: https://github.com/apache/arrow/pull/11964#discussion_r771714928\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_csv.cc\n##########\n@@ -171,11 +177,20 @@ static inline Future<std::shared_ptr<csv::StreamingReader>> OpenReaderAsync(\n       }));\n   return reader_fut.Then(\n       // Adds the filename to the error\n-      [](const std::shared_ptr<csv::StreamingReader>& reader)\n-          -> Result<std::shared_ptr<csv::StreamingReader>> { return reader; },\n-      [source](const Status& err) -> Result<std::shared_ptr<csv::StreamingReader>> {\n-        return err.WithMessage(\"Could not open CSV input source '\", source.path(),\n-                               \"': \", err);\n+      [=](const std::shared_ptr<csv::StreamingReader>& reader)\n+          -> Result<std::shared_ptr<csv::StreamingReader>> {\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+        span->SetStatus(opentelemetry::trace::StatusCode::kOk);\n\nReview comment:\n       The default status is actually `Unset`: https://github.com/open-telemetry/opentelemetry-specification/blob/9216eb8ff1832ae790369e49ce326cb6bc3d1c80/specification/trace/api.md#set-status\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-17T22:00:29.301+0000",
                    "updated": "2021-12-17T22:00:29.301+0000",
                    "started": "2021-12-17T22:00:29.301+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "698125",
                    "issueId": "13416625"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416625/worklog/698127",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11964:\nURL: https://github.com/apache/arrow/pull/11964#discussion_r771715353\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_csv.cc\n##########\n@@ -276,7 +291,12 @@ Result<RecordBatchGenerator> CsvFileFormat::ScanBatchesAsync(\n   auto source = file->source();\n   auto reader_fut =\n       OpenReaderAsync(source, *this, scan_options, ::arrow::internal::GetCpuThreadPool());\n-  return GeneratorFromReader(std::move(reader_fut), scan_options->batch_size);\n+  auto generator = GeneratorFromReader(std::move(reader_fut), scan_options->batch_size);\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+  generator = arrow::internal::tracing::WrapAsyncGenerator(\n+      std::move(generator), \"arrow::dataset::CsvFileFormat::ScanBatchesAsync::Next\");\n\nReview comment:\n       This method is an override, so we shouldn't have `FileFormat::ScanBatchesAsync::Next`. That will happen only for ORC.\n\n##########\nFile path: cpp/src/arrow/dataset/file_csv.cc\n##########\n@@ -148,9 +149,14 @@ static inline Result<csv::ReadOptions> GetReadOptions(\n static inline Future<std::shared_ptr<csv::StreamingReader>> OpenReaderAsync(\n     const FileSource& source, const CsvFileFormat& format,\n     const std::shared_ptr<ScanOptions>& scan_options, Executor* cpu_executor) {\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+  auto tracer = arrow::internal::tracing::GetTracer();\n+  auto span = tracer->StartSpan(\"arrow::dataset::CsvFileFormat::OpenReaderAsync\");\n+#endif\n\nReview comment:\n       We could. I didn't want to wrap too much of the API, also, I figured this would be best if people were very concerned about overhead.\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.h\n##########\n@@ -97,6 +98,57 @@ AsyncGenerator<T> WrapAsyncGenerator(AsyncGenerator<T> wrapped,\n     return fut;\n   };\n }\n+\n+/// \\brief Start a new span for each invocation of a generator.\n+///\n+/// The parent span of the new span will be the currently active span\n+/// (if any) as of when WrapAsyncGenerator was itself called.\n+template <typename T>\n+AsyncGenerator<T> WrapAsyncGenerator(AsyncGenerator<T> wrapped,\n+                                     const std::string& span_name) {\n+  opentelemetry::trace::StartSpanOptions options;\n+  options.parent = GetTracer()->GetCurrentSpan()->GetContext();\n+  return WrapAsyncGenerator(std::move(wrapped), std::move(options), span_name);\n+}\n+\n+/// \\brief End the given span when the given async generator ends.\n+///\n+/// The span will be made the active span each time the generator is called.\n+template <typename T>\n+AsyncGenerator<T> TieSpanToAsyncGenerator(\n+    AsyncGenerator<T> wrapped,\n+    opentelemetry::nostd::shared_ptr<opentelemetry::trace::Span> span) {\n+  return [=]() mutable -> Future<T> {\n+    auto scope = GetTracer()->WithActiveSpan(span);\n+    auto fut = wrapped();\n+    fut.AddCallback([span](const Result<T>& result) {\n+      if (!result.ok() || IsIterationEnd(*result)) {\n+        MarkSpan(result.status(), span.get());\n+        span->End();\n+      }\n+    });\n+    return fut;\n\nReview comment:\n       Also, this callback is added before any consumer has a chance to add callbacks right? Or is the order of callbacks undetermined?\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.h\n##########\n@@ -97,6 +98,57 @@ AsyncGenerator<T> WrapAsyncGenerator(AsyncGenerator<T> wrapped,\n     return fut;\n   };\n }\n+\n+/// \\brief Start a new span for each invocation of a generator.\n+///\n+/// The parent span of the new span will be the currently active span\n+/// (if any) as of when WrapAsyncGenerator was itself called.\n+template <typename T>\n+AsyncGenerator<T> WrapAsyncGenerator(AsyncGenerator<T> wrapped,\n+                                     const std::string& span_name) {\n+  opentelemetry::trace::StartSpanOptions options;\n+  options.parent = GetTracer()->GetCurrentSpan()->GetContext();\n+  return WrapAsyncGenerator(std::move(wrapped), std::move(options), span_name);\n+}\n+\n+/// \\brief End the given span when the given async generator ends.\n+///\n+/// The span will be made the active span each time the generator is called.\n+template <typename T>\n+AsyncGenerator<T> TieSpanToAsyncGenerator(\n+    AsyncGenerator<T> wrapped,\n+    opentelemetry::nostd::shared_ptr<opentelemetry::trace::Span> span) {\n+  return [=]() mutable -> Future<T> {\n+    auto scope = GetTracer()->WithActiveSpan(span);\n+    auto fut = wrapped();\n+    fut.AddCallback([span](const Result<T>& result) {\n+      if (!result.ok() || IsIterationEnd(*result)) {\n+        MarkSpan(result.status(), span.get());\n+        span->End();\n+      }\n+    });\n+    return fut;\n\nReview comment:\n       Spans are only ended if `End` is called or if all references are freed. In particular `span` is a `shared_ptr`. The \"active span\" is only relevant for automatic span linkage. So starting a new active span does not necessarily end the old span. We could certainly use `Then` here, but I don't think there's any risk of ending the wrong span on accident.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-17T22:03:39.545+0000",
                    "updated": "2021-12-17T22:03:39.545+0000",
                    "started": "2021-12-17T22:03:39.545+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "698127",
                    "issueId": "13416625"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416625/worklog/698141",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #11964:\nURL: https://github.com/apache/arrow/pull/11964#discussion_r771734507\n\n\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.h\n##########\n@@ -97,6 +98,57 @@ AsyncGenerator<T> WrapAsyncGenerator(AsyncGenerator<T> wrapped,\n     return fut;\n   };\n }\n+\n+/// \\brief Start a new span for each invocation of a generator.\n+///\n+/// The parent span of the new span will be the currently active span\n+/// (if any) as of when WrapAsyncGenerator was itself called.\n+template <typename T>\n+AsyncGenerator<T> WrapAsyncGenerator(AsyncGenerator<T> wrapped,\n+                                     const std::string& span_name) {\n+  opentelemetry::trace::StartSpanOptions options;\n+  options.parent = GetTracer()->GetCurrentSpan()->GetContext();\n+  return WrapAsyncGenerator(std::move(wrapped), std::move(options), span_name);\n+}\n+\n+/// \\brief End the given span when the given async generator ends.\n+///\n+/// The span will be made the active span each time the generator is called.\n+template <typename T>\n+AsyncGenerator<T> TieSpanToAsyncGenerator(\n+    AsyncGenerator<T> wrapped,\n+    opentelemetry::nostd::shared_ptr<opentelemetry::trace::Span> span) {\n+  return [=]() mutable -> Future<T> {\n+    auto scope = GetTracer()->WithActiveSpan(span);\n+    auto fut = wrapped();\n+    fut.AddCallback([span](const Result<T>& result) {\n+      if (!result.ok() || IsIterationEnd(*result)) {\n+        MarkSpan(result.status(), span.get());\n+        span->End();\n+      }\n+    });\n+    return fut;\n\nReview comment:\n       The order of callback can be undetermined in the event of:\r\n   \r\n   ```\r\n   Future<> fut = DoThing(); // Future unfinished at this point\r\n   fut.AddCallback(...); // Callback actually added\r\n   // Future finishes but callbacks haven't run yet...\r\n   fut.AddCallback(...); // Runs immediately\r\n   ```\r\n   \r\n   This has caused several subtle bugs and left me paranoid of `AddCallback`.  That being said, if the ordering truly doesn't matter, then it should be fine here.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-17T22:59:44.986+0000",
                    "updated": "2021-12-17T22:59:44.986+0000",
                    "started": "2021-12-17T22:59:44.986+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "698141",
                    "issueId": "13416625"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416625/worklog/698142",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #11964:\nURL: https://github.com/apache/arrow/pull/11964#discussion_r771734688\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_csv.cc\n##########\n@@ -276,7 +291,12 @@ Result<RecordBatchGenerator> CsvFileFormat::ScanBatchesAsync(\n   auto source = file->source();\n   auto reader_fut =\n       OpenReaderAsync(source, *this, scan_options, ::arrow::internal::GetCpuThreadPool());\n-  return GeneratorFromReader(std::move(reader_fut), scan_options->batch_size);\n+  auto generator = GeneratorFromReader(std::move(reader_fut), scan_options->batch_size);\n+#ifdef ARROW_WITH_OPENTELEMETRY\n+  generator = arrow::internal::tracing::WrapAsyncGenerator(\n+      std::move(generator), \"arrow::dataset::CsvFileFormat::ScanBatchesAsync::Next\");\n\nReview comment:\n       Ah!  Thanks, that make sense.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-17T23:00:27.734+0000",
                    "updated": "2021-12-17T23:00:27.734+0000",
                    "started": "2021-12-17T23:00:27.734+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "698142",
                    "issueId": "13416625"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416625/worklog/698278",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11964:\nURL: https://github.com/apache/arrow/pull/11964#discussion_r771842384\n\n\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.h\n##########\n@@ -97,6 +98,57 @@ AsyncGenerator<T> WrapAsyncGenerator(AsyncGenerator<T> wrapped,\n     return fut;\n   };\n }\n+\n+/// \\brief Start a new span for each invocation of a generator.\n+///\n+/// The parent span of the new span will be the currently active span\n+/// (if any) as of when WrapAsyncGenerator was itself called.\n+template <typename T>\n+AsyncGenerator<T> WrapAsyncGenerator(AsyncGenerator<T> wrapped,\n+                                     const std::string& span_name) {\n+  opentelemetry::trace::StartSpanOptions options;\n+  options.parent = GetTracer()->GetCurrentSpan()->GetContext();\n+  return WrapAsyncGenerator(std::move(wrapped), std::move(options), span_name);\n+}\n+\n+/// \\brief End the given span when the given async generator ends.\n+///\n+/// The span will be made the active span each time the generator is called.\n+template <typename T>\n+AsyncGenerator<T> TieSpanToAsyncGenerator(\n+    AsyncGenerator<T> wrapped,\n+    opentelemetry::nostd::shared_ptr<opentelemetry::trace::Span> span) {\n+  return [=]() mutable -> Future<T> {\n+    auto scope = GetTracer()->WithActiveSpan(span);\n+    auto fut = wrapped();\n+    fut.AddCallback([span](const Result<T>& result) {\n+      if (!result.ok() || IsIterationEnd(*result)) {\n+        MarkSpan(result.status(), span.get());\n+        span->End();\n+      }\n+    });\n+    return fut;\n\nReview comment:\n       Ah, right. We can make this `Then` just to be sure, then, I don't think it makes a big difference.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-18T16:35:10.841+0000",
                    "updated": "2021-12-18T16:35:10.841+0000",
                    "started": "2021-12-18T16:35:10.840+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "698278",
                    "issueId": "13416625"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416625/worklog/698722",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11964:\nURL: https://github.com/apache/arrow/pull/11964#discussion_r772410655\n\n\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.h\n##########\n@@ -97,6 +98,57 @@ AsyncGenerator<T> WrapAsyncGenerator(AsyncGenerator<T> wrapped,\n     return fut;\n   };\n }\n+\n+/// \\brief Start a new span for each invocation of a generator.\n+///\n+/// The parent span of the new span will be the currently active span\n+/// (if any) as of when WrapAsyncGenerator was itself called.\n+template <typename T>\n+AsyncGenerator<T> WrapAsyncGenerator(AsyncGenerator<T> wrapped,\n+                                     const std::string& span_name) {\n+  opentelemetry::trace::StartSpanOptions options;\n+  options.parent = GetTracer()->GetCurrentSpan()->GetContext();\n+  return WrapAsyncGenerator(std::move(wrapped), std::move(options), span_name);\n+}\n+\n+/// \\brief End the given span when the given async generator ends.\n+///\n+/// The span will be made the active span each time the generator is called.\n+template <typename T>\n+AsyncGenerator<T> TieSpanToAsyncGenerator(\n+    AsyncGenerator<T> wrapped,\n+    opentelemetry::nostd::shared_ptr<opentelemetry::trace::Span> span) {\n+  return [=]() mutable -> Future<T> {\n+    auto scope = GetTracer()->WithActiveSpan(span);\n+    auto fut = wrapped();\n+    fut.AddCallback([span](const Result<T>& result) {\n+      if (!result.ok() || IsIterationEnd(*result)) {\n+        MarkSpan(result.status(), span.get());\n+        span->End();\n+      }\n+    });\n+    return fut;\n\nReview comment:\n       This now uses `Then()`, though I suppose it is worse since it has to copy the result now.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-20T14:31:09.102+0000",
                    "updated": "2021-12-20T14:31:09.102+0000",
                    "started": "2021-12-20T14:31:09.102+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "698722",
                    "issueId": "13416625"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416625/worklog/703711",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #11964:\nURL: https://github.com/apache/arrow/pull/11964#discussion_r778512018\n\n\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.h\n##########\n@@ -97,6 +98,58 @@ AsyncGenerator<T> WrapAsyncGenerator(AsyncGenerator<T> wrapped,\n     return fut;\n   };\n }\n+\n+/// \\brief Start a new span for each invocation of a generator.\n+///\n+/// The parent span of the new span will be the currently active span\n+/// (if any) as of when WrapAsyncGenerator was itself called.\n+template <typename T>\n+AsyncGenerator<T> WrapAsyncGenerator(AsyncGenerator<T> wrapped,\n+                                     const std::string& span_name) {\n+  opentelemetry::trace::StartSpanOptions options;\n+  options.parent = GetTracer()->GetCurrentSpan()->GetContext();\n+  return WrapAsyncGenerator(std::move(wrapped), std::move(options), span_name);\n+}\n+\n+/// \\brief End the given span when the given async generator ends.\n+///\n+/// The span will be made the active span each time the generator is called.\n+template <typename T>\n+AsyncGenerator<T> TieSpanToAsyncGenerator(\n+    AsyncGenerator<T> wrapped,\n+    opentelemetry::nostd::shared_ptr<opentelemetry::trace::Span> span) {\n+  return [=]() mutable -> Future<T> {\n+    auto scope = GetTracer()->WithActiveSpan(span);\n+    return wrapped().Then(\n+        [span](const T& result) -> Result<T> {\n+          span->SetStatus(opentelemetry::trace::StatusCode::kOk);\n+          return result;\n+        },\n+        [span](const Status& status) -> Result<T> {\n+          MarkSpan(status, span.get());\n+          return status;\n+        });\n+  };\n+}\n+\n+/// \\brief Activate the given span on each invocation of an async generator.\n+template <typename T>\n+AsyncGenerator<T> PropagateSpanThroughAsyncGenerator(\n+    AsyncGenerator<T> wrapped,\n+    opentelemetry::nostd::shared_ptr<opentelemetry::trace::Span> span) {\n+  return [=]() mutable -> Future<T> {\n+    auto scope = GetTracer()->WithActiveSpan(span);\n+    return wrapped();\n+  };\n+}\n\nReview comment:\n       On second glance this helper method seems a little off to me.  Is the \"active span\" a thread local concept?  Will this work even if `wrapped()` launches its task on a separate thread (e.g. an I/O operation)?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-05T02:42:52.466+0000",
                    "updated": "2022-01-05T02:42:52.466+0000",
                    "started": "2022-01-05T02:42:52.466+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "703711",
                    "issueId": "13416625"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416625/worklog/703715",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11964:\nURL: https://github.com/apache/arrow/pull/11964#discussion_r778517602\n\n\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.h\n##########\n@@ -97,6 +98,58 @@ AsyncGenerator<T> WrapAsyncGenerator(AsyncGenerator<T> wrapped,\n     return fut;\n   };\n }\n+\n+/// \\brief Start a new span for each invocation of a generator.\n+///\n+/// The parent span of the new span will be the currently active span\n+/// (if any) as of when WrapAsyncGenerator was itself called.\n+template <typename T>\n+AsyncGenerator<T> WrapAsyncGenerator(AsyncGenerator<T> wrapped,\n+                                     const std::string& span_name) {\n+  opentelemetry::trace::StartSpanOptions options;\n+  options.parent = GetTracer()->GetCurrentSpan()->GetContext();\n+  return WrapAsyncGenerator(std::move(wrapped), std::move(options), span_name);\n+}\n+\n+/// \\brief End the given span when the given async generator ends.\n+///\n+/// The span will be made the active span each time the generator is called.\n+template <typename T>\n+AsyncGenerator<T> TieSpanToAsyncGenerator(\n+    AsyncGenerator<T> wrapped,\n+    opentelemetry::nostd::shared_ptr<opentelemetry::trace::Span> span) {\n+  return [=]() mutable -> Future<T> {\n+    auto scope = GetTracer()->WithActiveSpan(span);\n+    return wrapped().Then(\n+        [span](const T& result) -> Result<T> {\n+          span->SetStatus(opentelemetry::trace::StatusCode::kOk);\n+          return result;\n+        },\n+        [span](const Status& status) -> Result<T> {\n+          MarkSpan(status, span.get());\n+          return status;\n+        });\n+  };\n+}\n+\n+/// \\brief Activate the given span on each invocation of an async generator.\n+template <typename T>\n+AsyncGenerator<T> PropagateSpanThroughAsyncGenerator(\n+    AsyncGenerator<T> wrapped,\n+    opentelemetry::nostd::shared_ptr<opentelemetry::trace::Span> span) {\n+  return [=]() mutable -> Future<T> {\n+    auto scope = GetTracer()->WithActiveSpan(span);\n+    return wrapped();\n+  };\n+}\n\nReview comment:\n       Yes, active span is thread local. `wrapped()` must manually propagate the active span (or manually pass the span through) if it itself spawns a thread. That is a disadvantage and it does make it hard to use OpenTelemetry while making it possible to completely remove it at compile time.\r\n   \r\n   One way to get around this would be to instrument the Executor and possibly Future classes themselves, but I worry this would have more overhead than is desirable. (Or maybe not. I haven't tried.)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-05T03:03:54.491+0000",
                    "updated": "2022-01-05T03:03:54.491+0000",
                    "started": "2022-01-05T03:03:54.491+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "703715",
                    "issueId": "13416625"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416625/worklog/703720",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #11964:\nURL: https://github.com/apache/arrow/pull/11964#discussion_r778522222\n\n\n\n##########\nFile path: cpp/src/arrow/util/tracing_internal.h\n##########\n@@ -97,6 +98,58 @@ AsyncGenerator<T> WrapAsyncGenerator(AsyncGenerator<T> wrapped,\n     return fut;\n   };\n }\n+\n+/// \\brief Start a new span for each invocation of a generator.\n+///\n+/// The parent span of the new span will be the currently active span\n+/// (if any) as of when WrapAsyncGenerator was itself called.\n+template <typename T>\n+AsyncGenerator<T> WrapAsyncGenerator(AsyncGenerator<T> wrapped,\n+                                     const std::string& span_name) {\n+  opentelemetry::trace::StartSpanOptions options;\n+  options.parent = GetTracer()->GetCurrentSpan()->GetContext();\n+  return WrapAsyncGenerator(std::move(wrapped), std::move(options), span_name);\n+}\n+\n+/// \\brief End the given span when the given async generator ends.\n+///\n+/// The span will be made the active span each time the generator is called.\n+template <typename T>\n+AsyncGenerator<T> TieSpanToAsyncGenerator(\n+    AsyncGenerator<T> wrapped,\n+    opentelemetry::nostd::shared_ptr<opentelemetry::trace::Span> span) {\n+  return [=]() mutable -> Future<T> {\n+    auto scope = GetTracer()->WithActiveSpan(span);\n+    return wrapped().Then(\n+        [span](const T& result) -> Result<T> {\n+          span->SetStatus(opentelemetry::trace::StatusCode::kOk);\n+          return result;\n+        },\n+        [span](const Status& status) -> Result<T> {\n+          MarkSpan(status, span.get());\n+          return status;\n+        });\n+  };\n+}\n+\n+/// \\brief Activate the given span on each invocation of an async generator.\n+template <typename T>\n+AsyncGenerator<T> PropagateSpanThroughAsyncGenerator(\n+    AsyncGenerator<T> wrapped,\n+    opentelemetry::nostd::shared_ptr<opentelemetry::trace::Span> span) {\n+  return [=]() mutable -> Future<T> {\n+    auto scope = GetTracer()->WithActiveSpan(span);\n+    return wrapped();\n+  };\n+}\n\nReview comment:\n       Concretely I'm thinking of...\r\n   ```\r\n   #ifdef ARROW_WITH_OPENTELEMETRY\r\n     batch_gen_gen = arrow::internal::tracing::PropagateSpanThroughAsyncGenerator(\r\n         std::move(batch_gen_gen));\r\n   #endif\r\n   ```\r\n   \r\n   If you are I/O bound then I would expect `batch_gen_gen` will be transferring to an I/O thread (and back) for every item.  There are \"async-local\" concepts (e.g. https://docs.microsoft.com/en-us/dotnet/api/system.threading.asynclocal-1?view=net-6.0) so maybe we need to adopt something like that.  I think that's the same thing as \"instrumenting the executor and possibly future classes themselves\".  I think it would be fairly affordable (submitting a thread task would have to copy a handle to the active span or \"async context\" to include as part of the task and then the first thing in the task would be setting the active span based on that handle).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-05T03:22:24.341+0000",
                    "updated": "2022-01-05T03:22:24.341+0000",
                    "started": "2022-01-05T03:22:24.341+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "703720",
                    "issueId": "13416625"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 63600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@43b6ac89[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5ee13f8a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1884b11d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4f4ed0e8[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@22c2409f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@485d1bc9[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@75ec4786[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4c1c0043[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7cea67e7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5cc9a8e0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4b8e0488[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@67bc1ba2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 63600,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Apr 07 12:48:35 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-04-07T12:48:35.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15067/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-12-10T18:37:02.000+0000",
        "updated": "2022-04-08T04:31:16.000+0000",
        "timeoriginalestimate": null,
        "description": "There should be one span for each \"read batch\" and one scan for each \"read file\".  The batch spans should be children of the file span.\r\n\r\nIf possible it would be nice if the \"read file\" spans were children of the exec plan when the scanner is being used as a source node.  I'm not sure if this is doable though since the scanner is often used outside the exec plan.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "17h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 63600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add OT spans for the scanner",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416625/comment/17457319",
                    "id": "17457319",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Hmm, we could add a \"parent span\" or properly \"parent span context\" option to the scanner options. (That way you could link it up to a Flight span or something too.) You'd have to manually inject it to spans started in the scanner, though. (~2 lines of code or so for each span)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-12-10T18:40:23.520+0000",
                    "updated": "2021-12-10T18:40:23.520+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13416625/comment/17518860",
                    "id": "17518860",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 12609\n[https://github.com/apache/arrow/pull/12609]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-04-07T12:48:35.880+0000",
                    "updated": "2022-04-07T12:48:35.880+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z0xkcw:",
        "customfield_12314139": null
    }
}