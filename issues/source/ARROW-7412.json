{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13275061",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13275061",
    "key": "ARROW-7412",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12346687",
                "id": "12346687",
                "description": "",
                "name": "0.17.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-04-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "dataset",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12646302",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12646302",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13293843",
                    "key": "ARROW-8210",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13293843",
                    "fields": {
                        "summary": "[C++][Dataset] Handling of duplicate columns in Dataset factory and scanning",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 17400,
            "total": 17400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 17400,
            "total": 17400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7412/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 34,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13275061/worklog/398429",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6545: ARROW-7412: [C++][Dataset] Provide FieldRef to disambiguate field references\nURL: https://github.com/apache/arrow/pull/6545\n \n \n   `FieldRef` is a new utility class which represents a reference to a field. It is intended to replace parameters like `int field_index` and `const std::string& name`; it can be implicitly constructed from either a field index or a name.\r\n   \r\n   Nested fields can be referenced as well:\r\n   ```C++\r\n   // the following all indicate schema->GetFieldByName(\"alpha\")->type()->child(0)\r\n   FieldRef ref1({FieldRef(\"alpha\"), FieldRef(0)});\r\n   FieldRef ref2(\"alpha\", 0);\r\n   ARROW_ASSIGN_OR_RAISE(FieldRef ref3,\r\n                         FieldRef::FromDotPath(\".alpha[0]\"));\r\n   ```\r\n   \r\n   FieldRefs provide a number of accessors for drilling down to potentially nested children. They are overloaded for convenience to support  Schema (returns a field), DataType (returns a child field), Field (returns a child field of this field's type) Array (returns a child array), RecordBatch (returns a column), ChunkedArray (returns a ChunkedArray where each chunk is a child array of the corresponding original chunk) and Table (returns a column).\r\n   \r\n   ```C++\r\n   // Field names can match multiple fields in a Schema\r\n   Schema a_is_ambiguous({field(\"a\", null()), field(\"a\", null())});\r\n   auto matches = FieldRef(\"a\").FindAll(a_is_ambiguous);\r\n   assert(matches.size() == 2);\r\n   assert_ok_and_eq(FieldRef::Get(match, a_is_ambiguous), a_is_ambiguous.field(0));\r\n   \r\n   // Convenience accessor raises a helpful error if the field is not found or ambiguous\r\n   ARROW_ASSIGN_OR_RAISE(auto column, FieldRef(\"struct\", \"field_i32\").GetOne(some_table));\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T15:14:45.359+0000",
                    "updated": "2020-03-05T15:14:45.359+0000",
                    "started": "2020-03-05T15:14:45.359+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398429",
                    "issueId": "13275061"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13275061/worklog/398430",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #6545: ARROW-7412: [C++][Dataset] Provide FieldRef to disambiguate field references\nURL: https://github.com/apache/arrow/pull/6545#issuecomment-595283001\n \n \n   https://issues.apache.org/jira/browse/ARROW-7412\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T15:16:32.872+0000",
                    "updated": "2020-03-05T15:16:32.872+0000",
                    "started": "2020-03-05T15:16:32.871+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398430",
                    "issueId": "13275061"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13275061/worklog/398481",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6545: ARROW-7412: [C++][Dataset] Provide FieldRef to disambiguate field references\nURL: https://github.com/apache/arrow/pull/6545#discussion_r388403480\n \n \n\n ##########\n File path: cpp/src/arrow/util/small_vector.h\n ##########\n @@ -0,0 +1,115 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <initializer_list>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/util/variant.h\"\n+\n+namespace arrow {\n+namespace util {\n+\n+/// A minimal vector-like container which holds up to a single element without allocation.\n \n Review comment:\n   That's neat! Can you add tests for this?\r\n   (also, it would be nice if you could also parameter the class with the number of static elements)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T16:41:08.767+0000",
                    "updated": "2020-03-05T16:41:08.767+0000",
                    "started": "2020-03-05T16:41:08.766+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398481",
                    "issueId": "13275061"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13275061/worklog/398482",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6545: ARROW-7412: [C++][Dataset] Provide FieldRef to disambiguate field references\nURL: https://github.com/apache/arrow/pull/6545#discussion_r388405079\n \n \n\n ##########\n File path: cpp/src/arrow/util/small_vector.h\n ##########\n @@ -0,0 +1,115 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <initializer_list>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/util/variant.h\"\n+\n+namespace arrow {\n+namespace util {\n+\n+/// A minimal vector-like container which holds up to a single element without allocation.\n+template <typename T>\n+class small_vector {\n+ public:\n+  using value_type = T;\n+  using iterator = T*;\n+  using const_iterator = const T*;\n+\n+  small_vector() = default;\n+\n+  small_vector(std::initializer_list<value_type> list) {\n+    if (list.size() == 1) {\n+      storage_ = *list.begin();\n+    } else {\n+      set_vector(list);\n+    }\n+  }\n+\n+  explicit small_vector(std::vector<value_type> vector) {\n+    if (vector.size() == 1) {\n \n Review comment:\n   What if `vector.size() == 0`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T16:41:08.956+0000",
                    "updated": "2020-03-05T16:41:08.956+0000",
                    "started": "2020-03-05T16:41:08.956+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398482",
                    "issueId": "13275061"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13275061/worklog/398483",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6545: ARROW-7412: [C++][Dataset] Provide FieldRef to disambiguate field references\nURL: https://github.com/apache/arrow/pull/6545#discussion_r388406246\n \n \n\n ##########\n File path: cpp/src/arrow/type.h\n ##########\n @@ -26,9 +26,12 @@\n #include <utility>\n #include <vector>\n \n+#include \"arrow/result.h\"\n #include \"arrow/type_fwd.h\"  // IWYU pragma: export\n #include \"arrow/util/checked_cast.h\"\n #include \"arrow/util/macros.h\"\n+#include \"arrow/util/small_vector.h\"\n+#include \"arrow/util/variant.h\"\n \n Review comment:\n   Hmm, it's a pity to start pulling the `variant` header in such a widely-used header...\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T16:41:08.960+0000",
                    "updated": "2020-03-05T16:41:08.960+0000",
                    "started": "2020-03-05T16:41:08.959+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398483",
                    "issueId": "13275061"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13275061/worklog/398484",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6545: ARROW-7412: [C++][Dataset] Provide FieldRef to disambiguate field references\nURL: https://github.com/apache/arrow/pull/6545#discussion_r388404747\n \n \n\n ##########\n File path: cpp/src/arrow/util/small_vector.h\n ##########\n @@ -0,0 +1,115 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <initializer_list>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/util/variant.h\"\n+\n+namespace arrow {\n+namespace util {\n+\n+/// A minimal vector-like container which holds up to a single element without allocation.\n+template <typename T>\n+class small_vector {\n+ public:\n+  using value_type = T;\n+  using iterator = T*;\n+  using const_iterator = const T*;\n+\n+  small_vector() = default;\n+\n+  small_vector(std::initializer_list<value_type> list) {\n \n Review comment:\n   What happens if I call `small_vector({})`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T16:41:09.089+0000",
                    "updated": "2020-03-05T16:41:09.089+0000",
                    "started": "2020-03-05T16:41:09.089+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398484",
                    "issueId": "13275061"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13275061/worklog/398485",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6545: ARROW-7412: [C++][Dataset] Provide FieldRef to disambiguate field references\nURL: https://github.com/apache/arrow/pull/6545#discussion_r388405476\n \n \n\n ##########\n File path: cpp/src/arrow/util/small_vector.h\n ##########\n @@ -0,0 +1,115 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <initializer_list>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/util/variant.h\"\n+\n+namespace arrow {\n+namespace util {\n+\n+/// A minimal vector-like container which holds up to a single element without allocation.\n+template <typename T>\n+class small_vector {\n+ public:\n+  using value_type = T;\n+  using iterator = T*;\n+  using const_iterator = const T*;\n+\n+  small_vector() = default;\n+\n+  small_vector(std::initializer_list<value_type> list) {\n+    if (list.size() == 1) {\n+      storage_ = *list.begin();\n+    } else {\n+      set_vector(list);\n+    }\n+  }\n+\n+  explicit small_vector(std::vector<value_type> vector) {\n+    if (vector.size() == 1) {\n+      storage_ = std::move(vector[0]);\n+    } else {\n+      set_vector(std::move(vector));\n+    }\n+  }\n+\n+  size_t size() const {\n+    if (holds_alternative<value_type>(storage_)) {\n+      return 1;\n+    }\n+    return get_vector().size();\n+  }\n+\n+  bool empty() const { return size() == 0; }\n+\n+  void clear() { set_vector({}); }\n+\n+  void push_back(value_type element) {\n+    switch (size()) {\n+      case 0:\n+        storage_ = std::move(element);\n+        return;\n+      case 1:\n+        set_vector({std::move(get<value_type>(storage_)), std::move(element)});\n+        return;\n+      default:\n+        get_vector().push_back(std::move(element));\n+        return;\n+    }\n+  }\n+\n+  template <typename... Args>\n+  void emplace_back(Args&&... args) {\n+    push_back(value_type(std::forward<Args>(args)...));\n+  }\n+\n+  value_type* data() {\n+    return size() != 1 ? get_vector().data() : &get<value_type>(storage_);\n \n Review comment:\n   What if `size() == 0`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T16:41:09.159+0000",
                    "updated": "2020-03-05T16:41:09.159+0000",
                    "started": "2020-03-05T16:41:09.158+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398485",
                    "issueId": "13275061"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13275061/worklog/398486",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6545: ARROW-7412: [C++][Dataset] Provide FieldRef to disambiguate field references\nURL: https://github.com/apache/arrow/pull/6545#discussion_r388412238\n \n \n\n ##########\n File path: cpp/src/arrow/type_test.cc\n ##########\n @@ -311,6 +315,85 @@ TEST(TestField, TestMerge) {\n   }\n }\n \n+TEST(TestFieldRef, Basics) {\n+  auto f0 = field(\"alpha\", int32());\n+  auto f1 = field(\"beta\", int32());\n+  auto f2 = field(\"alpha\", int32());\n+  auto f3 = field(\"beta\", int32());\n+  Schema s({f0, f1, f2, f3});\n+\n+  using I = FieldRef::Indices;\n+\n+  // lookup by index returns Indices{index}\n+  for (int index = 0; index < s.num_fields(); ++index) {\n+    EXPECT_THAT(FieldRef(index).FindAll(s), ElementsAre(I{index}));\n+  }\n+  // out of range index results in a failure to match\n+  EXPECT_THAT(FieldRef(s.num_fields() * 2).FindAll(s), ElementsAre());\n+\n+  // lookup by name returns the Indices of both matching fields\n+  EXPECT_THAT(FieldRef(\"alpha\").FindAll(s), ElementsAre(I{0}, I{2}));\n+  EXPECT_THAT(FieldRef(\"beta\").FindAll(s), ElementsAre(I{1}, I{3}));\n+  EXPECT_THAT(FieldRef(\"beta\").FindAll(s), ElementsAre(I{1}, I{3}));\n \n Review comment:\n   Is this duplicate test intended?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T16:41:09.180+0000",
                    "updated": "2020-03-05T16:41:09.180+0000",
                    "started": "2020-03-05T16:41:09.180+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398486",
                    "issueId": "13275061"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13275061/worklog/398487",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6545: ARROW-7412: [C++][Dataset] Provide FieldRef to disambiguate field references\nURL: https://github.com/apache/arrow/pull/6545#discussion_r388407973\n \n \n\n ##########\n File path: cpp/src/arrow/type.h\n ##########\n @@ -1398,6 +1401,167 @@ class ARROW_EXPORT DictionaryUnifier {\n                            std::shared_ptr<Array>* out_dict) = 0;\n };\n \n+// ----------------------------------------------------------------------\n+// FieldRef\n+\n+/// \\class FieldRef\n+/// \\brief Descriptor of a (potentially nested) field within a schema.\n+class ARROW_EXPORT FieldRef {\n+ public:\n+  /// Represents a path to a nested field using indices of child fields.\n+  /// For example, given indices {5, 9, 3} the field would be retrieved with\n+  /// schema->field(5)->type()->child(9)->type()->child(3)\n+  ///\n+  /// std::basic_string is used to take advantage\n+  /// of the short string approximation: up to four indices can be stored without memory\n+  /// allocation.\n+  using Indices = std::basic_string<int>;\n+\n+  /// Construct a FieldRef using a string of indices. The reference will be retrieved as:\n+  /// schema.fields[self.indices[0]].type.fields[self.indices[1]] ...\n+  ///\n+  /// Empty indices are not valid.\n+  FieldRef(Indices indices);  // NOLINT runtime/explicit\n+\n+  /// Construct a by-name FieldRef. Multiple fields may match a by-name FieldRef:\n+  /// [f for f in schema.fields where f.name == self.name]\n+  FieldRef(std::string name) : impl_(std::move(name)) {}  // NOLINT runtime/explicit\n+\n+  /// Equivalent to a single index string of indices.\n+  FieldRef(int index) : impl_(Indices({index})) {}  // NOLINT runtime/explicit\n+\n+  /// Construct a nested FieldRef.\n+  explicit FieldRef(std::vector<FieldRef> children);\n+\n+  /// Convenience constructor for nested FieldRefs: each argument will be used to\n+  /// construct a FieldRef\n+  template <typename A0, typename A1, typename... A>\n+  FieldRef(A0&& a0, A1&& a1, A&&... a)\n+      : FieldRef(std::vector<FieldRef>{\n+            // cpplint things the following are constructor decls\n \n Review comment:\n   \"thinks\"? \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T16:41:09.314+0000",
                    "updated": "2020-03-05T16:41:09.314+0000",
                    "started": "2020-03-05T16:41:09.314+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398487",
                    "issueId": "13275061"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13275061/worklog/398488",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6545: ARROW-7412: [C++][Dataset] Provide FieldRef to disambiguate field references\nURL: https://github.com/apache/arrow/pull/6545#discussion_r388410337\n \n \n\n ##########\n File path: cpp/src/arrow/type.h\n ##########\n @@ -1398,6 +1401,167 @@ class ARROW_EXPORT DictionaryUnifier {\n                            std::shared_ptr<Array>* out_dict) = 0;\n };\n \n+// ----------------------------------------------------------------------\n+// FieldRef\n+\n+/// \\class FieldRef\n+/// \\brief Descriptor of a (potentially nested) field within a schema.\n+class ARROW_EXPORT FieldRef {\n+ public:\n+  /// Represents a path to a nested field using indices of child fields.\n+  /// For example, given indices {5, 9, 3} the field would be retrieved with\n+  /// schema->field(5)->type()->child(9)->type()->child(3)\n+  ///\n+  /// std::basic_string is used to take advantage\n+  /// of the short string approximation: up to four indices can be stored without memory\n+  /// allocation.\n+  using Indices = std::basic_string<int>;\n+\n+  /// Construct a FieldRef using a string of indices. The reference will be retrieved as:\n+  /// schema.fields[self.indices[0]].type.fields[self.indices[1]] ...\n+  ///\n+  /// Empty indices are not valid.\n+  FieldRef(Indices indices);  // NOLINT runtime/explicit\n+\n+  /// Construct a by-name FieldRef. Multiple fields may match a by-name FieldRef:\n+  /// [f for f in schema.fields where f.name == self.name]\n+  FieldRef(std::string name) : impl_(std::move(name)) {}  // NOLINT runtime/explicit\n+\n+  /// Equivalent to a single index string of indices.\n+  FieldRef(int index) : impl_(Indices({index})) {}  // NOLINT runtime/explicit\n+\n+  /// Construct a nested FieldRef.\n+  explicit FieldRef(std::vector<FieldRef> children);\n+\n+  /// Convenience constructor for nested FieldRefs: each argument will be used to\n+  /// construct a FieldRef\n+  template <typename A0, typename A1, typename... A>\n+  FieldRef(A0&& a0, A1&& a1, A&&... a)\n+      : FieldRef(std::vector<FieldRef>{\n+            // cpplint things the following are constructor decls\n+            FieldRef(std::forward<A0>(a0)),       // NOLINT runtime/explicit\n+            FieldRef(std::forward<A1>(a1)),       // NOLINT runtime/explicit\n+            FieldRef(std::forward<A>(a))...}) {}  // NOLINT runtime/explicit\n+\n+  /// Parse a dot path into a FieldRef.\n+  ///\n+  /// dot_path = '.' name\n+  ///          | '[' digit+ ']'\n+  ///          | dot_path+\n+  ///\n+  /// Examples:\n+  ///   \".alpha\" => FieldRef(\"alpha\")\n+  ///   \"[2]\" => FieldRef(2)\n+  ///   \".beta[3]\" => FieldRef(\"beta\", 3)\n+  ///   \"[5].gamma.delta[7]\" => FieldRef(5, \"gamma\", \"delta\", 7)\n+  ///   \".hello world\" => FieldRef(\"hello world\")\n+  ///   R\"(.\\[y\\]\\\\tho\\.\\)\" => FieldRef(R\"([y]\\tho.\\)\")\n \n Review comment:\n   Does this example imply `FieldRef` supports regular expressions?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T16:41:09.317+0000",
                    "updated": "2020-03-05T16:41:09.317+0000",
                    "started": "2020-03-05T16:41:09.317+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398488",
                    "issueId": "13275061"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13275061/worklog/398489",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6545: ARROW-7412: [C++][Dataset] Provide FieldRef to disambiguate field references\nURL: https://github.com/apache/arrow/pull/6545#discussion_r388416157\n \n \n\n ##########\n File path: cpp/src/arrow/type.cc\n ##########\n @@ -608,6 +611,415 @@ std::string DictionaryType::ToString() const {\n \n std::string NullType::ToString() const { return name(); }\n \n+// ----------------------------------------------------------------------\n+// FieldRef\n+\n+FieldRef::FieldRef(Indices indices) : impl_(std::move(indices)) {\n+  DCHECK_GT(util::get<Indices>(impl_).size(), 0);\n+}\n+\n+FieldRef::FieldRef(std::vector<FieldRef> children) {\n+  // flatten children\n+  struct Visitor {\n+    void operator()(std::string&& name) { *out++ = FieldRef(std::move(name)); }\n+\n+    void operator()(Indices&& indices) { *out++ = FieldRef(std::move(indices)); }\n+\n+    void operator()(std::vector<FieldRef>&& children) {\n+      for (auto& child : children) {\n+        util::visit(*this, std::move(child.impl_));\n+      }\n+    }\n+\n+    std::back_insert_iterator<std::vector<FieldRef>> out;\n+  };\n+\n+  std::vector<FieldRef> out;\n+  Visitor visitor{std::back_inserter(out)};\n+  visitor(std::move(children));\n+\n+  DCHECK(!out.empty());\n+  DCHECK(std::none_of(out.begin(), out.end(),\n+                      [](const FieldRef& ref) { return ref.IsNested(); }));\n+\n+  if (out.size() == 1) {\n+    impl_ = std::move(out[0].impl_);\n+  } else {\n+    impl_ = std::move(out);\n+  }\n+}\n+\n+Result<FieldRef> FieldRef::FromDotPath(const std::string& dot_path_arg) {\n+  if (dot_path_arg.empty()) {\n+    return Status::Invalid(\"Dot path was empty\");\n+  }\n+\n+  std::vector<FieldRef> children;\n+\n+  util::string_view dot_path = dot_path_arg;\n+\n+  auto parse_name = [&] {\n+    std::string name;\n+    for (;;) {\n+      auto segment_end = dot_path.find_first_of(\"\\\\[.\");\n+      if (segment_end == util::string_view::npos) {\n+        // dot_path doesn't contain any other special characters; consume all\n+        name.append(dot_path.begin(), dot_path.end());\n+        dot_path = \"\";\n+        break;\n+      }\n+\n+      if (dot_path[segment_end] != '\\\\') {\n+        // segment_end points to a subscipt for a new FieldRef\n+        name.append(dot_path.begin(), segment_end);\n+        dot_path = dot_path.substr(segment_end);\n+        break;\n+      }\n+\n+      if (dot_path.size() == segment_end + 1) {\n+        // dot_path ends with backslash; consume it all\n+        name.append(dot_path.begin(), dot_path.end());\n+        dot_path = \"\";\n+        break;\n+      }\n+\n+      // append all characters before backslash, then the character which follows it\n+      name.append(dot_path.begin(), segment_end);\n+      name.push_back(dot_path[segment_end + 1]);\n+      dot_path = dot_path.substr(segment_end + 2);\n+    }\n+    return name;\n+  };\n+\n+  while (!dot_path.empty()) {\n+    auto subscipt = dot_path[0];\n \n Review comment:\n   Should be \"subscript\" everywhere (there are other occurrences).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T16:41:09.321+0000",
                    "updated": "2020-03-05T16:41:09.321+0000",
                    "started": "2020-03-05T16:41:09.320+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398489",
                    "issueId": "13275061"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13275061/worklog/398496",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6545: ARROW-7412: [C++][Dataset] Provide FieldRef to disambiguate field references\nURL: https://github.com/apache/arrow/pull/6545#discussion_r388430353\n \n \n\n ##########\n File path: cpp/src/arrow/util/small_vector.h\n ##########\n @@ -0,0 +1,115 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <initializer_list>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/util/variant.h\"\n+\n+namespace arrow {\n+namespace util {\n+\n+/// A minimal vector-like container which holds up to a single element without allocation.\n \n Review comment:\n   I can add tests.\r\n   If we want a full `small_vector` then we should probably vendor one. In any case I'll leave that for a follow up JIRA\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T17:00:24.857+0000",
                    "updated": "2020-03-05T17:00:24.857+0000",
                    "started": "2020-03-05T17:00:24.857+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398496",
                    "issueId": "13275061"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13275061/worklog/398497",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6545: ARROW-7412: [C++][Dataset] Provide FieldRef to disambiguate field references\nURL: https://github.com/apache/arrow/pull/6545#discussion_r388430806\n \n \n\n ##########\n File path: cpp/src/arrow/util/small_vector.h\n ##########\n @@ -0,0 +1,115 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <initializer_list>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/util/variant.h\"\n+\n+namespace arrow {\n+namespace util {\n+\n+/// A minimal vector-like container which holds up to a single element without allocation.\n+template <typename T>\n+class small_vector {\n+ public:\n+  using value_type = T;\n+  using iterator = T*;\n+  using const_iterator = const T*;\n+\n+  small_vector() = default;\n+\n+  small_vector(std::initializer_list<value_type> list) {\n+    if (list.size() == 1) {\n+      storage_ = *list.begin();\n+    } else {\n+      set_vector(list);\n+    }\n+  }\n+\n+  explicit small_vector(std::vector<value_type> vector) {\n+    if (vector.size() == 1) {\n+      storage_ = std::move(vector[0]);\n+    } else {\n+      set_vector(std::move(vector));\n+    }\n+  }\n+\n+  size_t size() const {\n+    if (holds_alternative<value_type>(storage_)) {\n+      return 1;\n+    }\n+    return get_vector().size();\n+  }\n+\n+  bool empty() const { return size() == 0; }\n+\n+  void clear() { set_vector({}); }\n+\n+  void push_back(value_type element) {\n+    switch (size()) {\n+      case 0:\n+        storage_ = std::move(element);\n+        return;\n+      case 1:\n+        set_vector({std::move(get<value_type>(storage_)), std::move(element)});\n+        return;\n+      default:\n+        get_vector().push_back(std::move(element));\n+        return;\n+    }\n+  }\n+\n+  template <typename... Args>\n+  void emplace_back(Args&&... args) {\n+    push_back(value_type(std::forward<Args>(args)...));\n+  }\n+\n+  value_type* data() {\n+    return size() != 1 ? get_vector().data() : &get<value_type>(storage_);\n \n Review comment:\n   Then `data()` comes from the zero length vector (probably will be nullptr)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T17:01:03.391+0000",
                    "updated": "2020-03-05T17:01:03.391+0000",
                    "started": "2020-03-05T17:01:03.390+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398497",
                    "issueId": "13275061"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13275061/worklog/398498",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6545: ARROW-7412: [C++][Dataset] Provide FieldRef to disambiguate field references\nURL: https://github.com/apache/arrow/pull/6545#discussion_r388430993\n \n \n\n ##########\n File path: cpp/src/arrow/type.h\n ##########\n @@ -1398,6 +1401,167 @@ class ARROW_EXPORT DictionaryUnifier {\n                            std::shared_ptr<Array>* out_dict) = 0;\n };\n \n+// ----------------------------------------------------------------------\n+// FieldRef\n+\n+/// \\class FieldRef\n+/// \\brief Descriptor of a (potentially nested) field within a schema.\n+class ARROW_EXPORT FieldRef {\n+ public:\n+  /// Represents a path to a nested field using indices of child fields.\n+  /// For example, given indices {5, 9, 3} the field would be retrieved with\n+  /// schema->field(5)->type()->child(9)->type()->child(3)\n+  ///\n+  /// std::basic_string is used to take advantage\n+  /// of the short string approximation: up to four indices can be stored without memory\n+  /// allocation.\n+  using Indices = std::basic_string<int>;\n+\n+  /// Construct a FieldRef using a string of indices. The reference will be retrieved as:\n+  /// schema.fields[self.indices[0]].type.fields[self.indices[1]] ...\n+  ///\n+  /// Empty indices are not valid.\n+  FieldRef(Indices indices);  // NOLINT runtime/explicit\n+\n+  /// Construct a by-name FieldRef. Multiple fields may match a by-name FieldRef:\n+  /// [f for f in schema.fields where f.name == self.name]\n+  FieldRef(std::string name) : impl_(std::move(name)) {}  // NOLINT runtime/explicit\n+\n+  /// Equivalent to a single index string of indices.\n+  FieldRef(int index) : impl_(Indices({index})) {}  // NOLINT runtime/explicit\n+\n+  /// Construct a nested FieldRef.\n+  explicit FieldRef(std::vector<FieldRef> children);\n+\n+  /// Convenience constructor for nested FieldRefs: each argument will be used to\n+  /// construct a FieldRef\n+  template <typename A0, typename A1, typename... A>\n+  FieldRef(A0&& a0, A1&& a1, A&&... a)\n+      : FieldRef(std::vector<FieldRef>{\n+            // cpplint things the following are constructor decls\n \n Review comment:\n   yep\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T17:01:21.649+0000",
                    "updated": "2020-03-05T17:01:21.649+0000",
                    "started": "2020-03-05T17:01:21.649+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398498",
                    "issueId": "13275061"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13275061/worklog/398499",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #6545: ARROW-7412: [C++][Dataset] Provide FieldRef to disambiguate field references\nURL: https://github.com/apache/arrow/pull/6545#discussion_r388431164\n \n \n\n ##########\n File path: cpp/src/arrow/util/small_vector.h\n ##########\n @@ -0,0 +1,115 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <initializer_list>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/util/variant.h\"\n+\n+namespace arrow {\n+namespace util {\n+\n+/// A minimal vector-like container which holds up to a single element without allocation.\n+template <typename T>\n+class small_vector {\n+ public:\n+  using value_type = T;\n+  using iterator = T*;\n+  using const_iterator = const T*;\n+\n+  small_vector() = default;\n+\n+  small_vector(std::initializer_list<value_type> list) {\n+    if (list.size() == 1) {\n+      storage_ = *list.begin();\n+    } else {\n+      set_vector(list);\n+    }\n+  }\n+\n+  explicit small_vector(std::vector<value_type> vector) {\n+    if (vector.size() == 1) {\n+      storage_ = std::move(vector[0]);\n+    } else {\n+      set_vector(std::move(vector));\n+    }\n+  }\n+\n+  size_t size() const {\n+    if (holds_alternative<value_type>(storage_)) {\n+      return 1;\n+    }\n+    return get_vector().size();\n+  }\n+\n+  bool empty() const { return size() == 0; }\n+\n+  void clear() { set_vector({}); }\n+\n+  void push_back(value_type element) {\n+    switch (size()) {\n+      case 0:\n+        storage_ = std::move(element);\n+        return;\n+      case 1:\n+        set_vector({std::move(get<value_type>(storage_)), std::move(element)});\n+        return;\n+      default:\n+        get_vector().push_back(std::move(element));\n+        return;\n+    }\n+  }\n+\n+  template <typename... Args>\n+  void emplace_back(Args&&... args) {\n+    push_back(value_type(std::forward<Args>(args)...));\n+  }\n+\n+  value_type* data() {\n+    return size() != 1 ? get_vector().data() : &get<value_type>(storage_);\n \n Review comment:\n   Hopefully...\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T17:01:37.873+0000",
                    "updated": "2020-03-05T17:01:37.873+0000",
                    "started": "2020-03-05T17:01:37.872+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398499",
                    "issueId": "13275061"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13275061/worklog/398501",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6545: ARROW-7412: [C++][Dataset] Provide FieldRef to disambiguate field references\nURL: https://github.com/apache/arrow/pull/6545#discussion_r388432053\n \n \n\n ##########\n File path: cpp/src/arrow/type.h\n ##########\n @@ -1398,6 +1401,167 @@ class ARROW_EXPORT DictionaryUnifier {\n                            std::shared_ptr<Array>* out_dict) = 0;\n };\n \n+// ----------------------------------------------------------------------\n+// FieldRef\n+\n+/// \\class FieldRef\n+/// \\brief Descriptor of a (potentially nested) field within a schema.\n+class ARROW_EXPORT FieldRef {\n+ public:\n+  /// Represents a path to a nested field using indices of child fields.\n+  /// For example, given indices {5, 9, 3} the field would be retrieved with\n+  /// schema->field(5)->type()->child(9)->type()->child(3)\n+  ///\n+  /// std::basic_string is used to take advantage\n+  /// of the short string approximation: up to four indices can be stored without memory\n+  /// allocation.\n+  using Indices = std::basic_string<int>;\n+\n+  /// Construct a FieldRef using a string of indices. The reference will be retrieved as:\n+  /// schema.fields[self.indices[0]].type.fields[self.indices[1]] ...\n+  ///\n+  /// Empty indices are not valid.\n+  FieldRef(Indices indices);  // NOLINT runtime/explicit\n+\n+  /// Construct a by-name FieldRef. Multiple fields may match a by-name FieldRef:\n+  /// [f for f in schema.fields where f.name == self.name]\n+  FieldRef(std::string name) : impl_(std::move(name)) {}  // NOLINT runtime/explicit\n+\n+  /// Equivalent to a single index string of indices.\n+  FieldRef(int index) : impl_(Indices({index})) {}  // NOLINT runtime/explicit\n+\n+  /// Construct a nested FieldRef.\n+  explicit FieldRef(std::vector<FieldRef> children);\n+\n+  /// Convenience constructor for nested FieldRefs: each argument will be used to\n+  /// construct a FieldRef\n+  template <typename A0, typename A1, typename... A>\n+  FieldRef(A0&& a0, A1&& a1, A&&... a)\n+      : FieldRef(std::vector<FieldRef>{\n+            // cpplint things the following are constructor decls\n+            FieldRef(std::forward<A0>(a0)),       // NOLINT runtime/explicit\n+            FieldRef(std::forward<A1>(a1)),       // NOLINT runtime/explicit\n+            FieldRef(std::forward<A>(a))...}) {}  // NOLINT runtime/explicit\n+\n+  /// Parse a dot path into a FieldRef.\n+  ///\n+  /// dot_path = '.' name\n+  ///          | '[' digit+ ']'\n+  ///          | dot_path+\n+  ///\n+  /// Examples:\n+  ///   \".alpha\" => FieldRef(\"alpha\")\n+  ///   \"[2]\" => FieldRef(2)\n+  ///   \".beta[3]\" => FieldRef(\"beta\", 3)\n+  ///   \"[5].gamma.delta[7]\" => FieldRef(5, \"gamma\", \"delta\", 7)\n+  ///   \".hello world\" => FieldRef(\"hello world\")\n+  ///   R\"(.\\[y\\]\\\\tho\\.\\)\" => FieldRef(R\"([y]\\tho.\\)\")\n \n Review comment:\n   No, just that `\\` will cause whatever character follows it to be interpreted literally in case your field name must include `\\`, '[', ']', or '.'\r\n   \r\n   I'll update the doccomment\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T17:03:00.101+0000",
                    "updated": "2020-03-05T17:03:00.101+0000",
                    "started": "2020-03-05T17:03:00.101+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398501",
                    "issueId": "13275061"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13275061/worklog/398502",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6545: ARROW-7412: [C++][Dataset] Provide FieldRef to disambiguate field references\nURL: https://github.com/apache/arrow/pull/6545#discussion_r388432145\n \n \n\n ##########\n File path: cpp/src/arrow/type_test.cc\n ##########\n @@ -311,6 +315,85 @@ TEST(TestField, TestMerge) {\n   }\n }\n \n+TEST(TestFieldRef, Basics) {\n+  auto f0 = field(\"alpha\", int32());\n+  auto f1 = field(\"beta\", int32());\n+  auto f2 = field(\"alpha\", int32());\n+  auto f3 = field(\"beta\", int32());\n+  Schema s({f0, f1, f2, f3});\n+\n+  using I = FieldRef::Indices;\n+\n+  // lookup by index returns Indices{index}\n+  for (int index = 0; index < s.num_fields(); ++index) {\n+    EXPECT_THAT(FieldRef(index).FindAll(s), ElementsAre(I{index}));\n+  }\n+  // out of range index results in a failure to match\n+  EXPECT_THAT(FieldRef(s.num_fields() * 2).FindAll(s), ElementsAre());\n+\n+  // lookup by name returns the Indices of both matching fields\n+  EXPECT_THAT(FieldRef(\"alpha\").FindAll(s), ElementsAre(I{0}, I{2}));\n+  EXPECT_THAT(FieldRef(\"beta\").FindAll(s), ElementsAre(I{1}, I{3}));\n+  EXPECT_THAT(FieldRef(\"beta\").FindAll(s), ElementsAre(I{1}, I{3}));\n \n Review comment:\n   No\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T17:03:11.084+0000",
                    "updated": "2020-03-05T17:03:11.084+0000",
                    "started": "2020-03-05T17:03:11.083+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398502",
                    "issueId": "13275061"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13275061/worklog/398504",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6545: ARROW-7412: [C++][Dataset] Provide FieldRef to disambiguate field references\nURL: https://github.com/apache/arrow/pull/6545#discussion_r388432890\n \n \n\n ##########\n File path: cpp/src/arrow/type.cc\n ##########\n @@ -608,6 +611,415 @@ std::string DictionaryType::ToString() const {\n \n std::string NullType::ToString() const { return name(); }\n \n+// ----------------------------------------------------------------------\n+// FieldRef\n+\n+FieldRef::FieldRef(Indices indices) : impl_(std::move(indices)) {\n+  DCHECK_GT(util::get<Indices>(impl_).size(), 0);\n+}\n+\n+FieldRef::FieldRef(std::vector<FieldRef> children) {\n+  // flatten children\n+  struct Visitor {\n+    void operator()(std::string&& name) { *out++ = FieldRef(std::move(name)); }\n+\n+    void operator()(Indices&& indices) { *out++ = FieldRef(std::move(indices)); }\n+\n+    void operator()(std::vector<FieldRef>&& children) {\n+      for (auto& child : children) {\n+        util::visit(*this, std::move(child.impl_));\n+      }\n+    }\n+\n+    std::back_insert_iterator<std::vector<FieldRef>> out;\n+  };\n+\n+  std::vector<FieldRef> out;\n+  Visitor visitor{std::back_inserter(out)};\n+  visitor(std::move(children));\n+\n+  DCHECK(!out.empty());\n+  DCHECK(std::none_of(out.begin(), out.end(),\n+                      [](const FieldRef& ref) { return ref.IsNested(); }));\n+\n+  if (out.size() == 1) {\n+    impl_ = std::move(out[0].impl_);\n+  } else {\n+    impl_ = std::move(out);\n+  }\n+}\n+\n+Result<FieldRef> FieldRef::FromDotPath(const std::string& dot_path_arg) {\n+  if (dot_path_arg.empty()) {\n+    return Status::Invalid(\"Dot path was empty\");\n+  }\n+\n+  std::vector<FieldRef> children;\n+\n+  util::string_view dot_path = dot_path_arg;\n+\n+  auto parse_name = [&] {\n+    std::string name;\n+    for (;;) {\n+      auto segment_end = dot_path.find_first_of(\"\\\\[.\");\n+      if (segment_end == util::string_view::npos) {\n+        // dot_path doesn't contain any other special characters; consume all\n+        name.append(dot_path.begin(), dot_path.end());\n+        dot_path = \"\";\n+        break;\n+      }\n+\n+      if (dot_path[segment_end] != '\\\\') {\n+        // segment_end points to a subscipt for a new FieldRef\n+        name.append(dot_path.begin(), segment_end);\n+        dot_path = dot_path.substr(segment_end);\n+        break;\n+      }\n+\n+      if (dot_path.size() == segment_end + 1) {\n+        // dot_path ends with backslash; consume it all\n+        name.append(dot_path.begin(), dot_path.end());\n+        dot_path = \"\";\n+        break;\n+      }\n+\n+      // append all characters before backslash, then the character which follows it\n+      name.append(dot_path.begin(), segment_end);\n+      name.push_back(dot_path[segment_end + 1]);\n+      dot_path = dot_path.substr(segment_end + 2);\n+    }\n+    return name;\n+  };\n+\n+  while (!dot_path.empty()) {\n+    auto subscipt = dot_path[0];\n \n Review comment:\n   Thanks!\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T17:04:23.430+0000",
                    "updated": "2020-03-05T17:04:23.430+0000",
                    "started": "2020-03-05T17:04:23.429+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398504",
                    "issueId": "13275061"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13275061/worklog/398505",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6545: ARROW-7412: [C++][Dataset] Provide FieldRef to disambiguate field references\nURL: https://github.com/apache/arrow/pull/6545#discussion_r388432053\n \n \n\n ##########\n File path: cpp/src/arrow/type.h\n ##########\n @@ -1398,6 +1401,167 @@ class ARROW_EXPORT DictionaryUnifier {\n                            std::shared_ptr<Array>* out_dict) = 0;\n };\n \n+// ----------------------------------------------------------------------\n+// FieldRef\n+\n+/// \\class FieldRef\n+/// \\brief Descriptor of a (potentially nested) field within a schema.\n+class ARROW_EXPORT FieldRef {\n+ public:\n+  /// Represents a path to a nested field using indices of child fields.\n+  /// For example, given indices {5, 9, 3} the field would be retrieved with\n+  /// schema->field(5)->type()->child(9)->type()->child(3)\n+  ///\n+  /// std::basic_string is used to take advantage\n+  /// of the short string approximation: up to four indices can be stored without memory\n+  /// allocation.\n+  using Indices = std::basic_string<int>;\n+\n+  /// Construct a FieldRef using a string of indices. The reference will be retrieved as:\n+  /// schema.fields[self.indices[0]].type.fields[self.indices[1]] ...\n+  ///\n+  /// Empty indices are not valid.\n+  FieldRef(Indices indices);  // NOLINT runtime/explicit\n+\n+  /// Construct a by-name FieldRef. Multiple fields may match a by-name FieldRef:\n+  /// [f for f in schema.fields where f.name == self.name]\n+  FieldRef(std::string name) : impl_(std::move(name)) {}  // NOLINT runtime/explicit\n+\n+  /// Equivalent to a single index string of indices.\n+  FieldRef(int index) : impl_(Indices({index})) {}  // NOLINT runtime/explicit\n+\n+  /// Construct a nested FieldRef.\n+  explicit FieldRef(std::vector<FieldRef> children);\n+\n+  /// Convenience constructor for nested FieldRefs: each argument will be used to\n+  /// construct a FieldRef\n+  template <typename A0, typename A1, typename... A>\n+  FieldRef(A0&& a0, A1&& a1, A&&... a)\n+      : FieldRef(std::vector<FieldRef>{\n+            // cpplint things the following are constructor decls\n+            FieldRef(std::forward<A0>(a0)),       // NOLINT runtime/explicit\n+            FieldRef(std::forward<A1>(a1)),       // NOLINT runtime/explicit\n+            FieldRef(std::forward<A>(a))...}) {}  // NOLINT runtime/explicit\n+\n+  /// Parse a dot path into a FieldRef.\n+  ///\n+  /// dot_path = '.' name\n+  ///          | '[' digit+ ']'\n+  ///          | dot_path+\n+  ///\n+  /// Examples:\n+  ///   \".alpha\" => FieldRef(\"alpha\")\n+  ///   \"[2]\" => FieldRef(2)\n+  ///   \".beta[3]\" => FieldRef(\"beta\", 3)\n+  ///   \"[5].gamma.delta[7]\" => FieldRef(5, \"gamma\", \"delta\", 7)\n+  ///   \".hello world\" => FieldRef(\"hello world\")\n+  ///   R\"(.\\[y\\]\\\\tho\\.\\)\" => FieldRef(R\"([y]\\tho.\\)\")\n \n Review comment:\n   No, just that `\\` will cause whatever character follows it to be interpreted literally in case your field name must include `\\`, `[`, `]`, or `.`\r\n   \r\n   I'll update the doccomment\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T17:04:58.657+0000",
                    "updated": "2020-03-05T17:04:58.657+0000",
                    "started": "2020-03-05T17:04:58.656+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398505",
                    "issueId": "13275061"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13275061/worklog/398506",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #6545: ARROW-7412: [C++][Dataset] Provide FieldRef to disambiguate field references\nURL: https://github.com/apache/arrow/pull/6545#discussion_r388433630\n \n \n\n ##########\n File path: cpp/src/arrow/util/small_vector.h\n ##########\n @@ -0,0 +1,115 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <initializer_list>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/util/variant.h\"\n+\n+namespace arrow {\n+namespace util {\n+\n+/// A minimal vector-like container which holds up to a single element without allocation.\n+template <typename T>\n+class small_vector {\n+ public:\n+  using value_type = T;\n+  using iterator = T*;\n+  using const_iterator = const T*;\n+\n+  small_vector() = default;\n+\n+  small_vector(std::initializer_list<value_type> list) {\n+    if (list.size() == 1) {\n+      storage_ = *list.begin();\n+    } else {\n+      set_vector(list);\n+    }\n+  }\n+\n+  explicit small_vector(std::vector<value_type> vector) {\n+    if (vector.size() == 1) {\n \n Review comment:\n   Then `storage_` will contain a zero length vector.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-03-05T17:05:42.305+0000",
                    "updated": "2020-03-05T17:05:42.305+0000",
                    "started": "2020-03-05T17:05:42.305+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "398506",
                    "issueId": "13275061"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 17400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3f4b944d[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@497dda07[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5e21d034[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@79ab8415[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5ef6e704[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3d2f84b8[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6d5f4359[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4871e9cb[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2156f906[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@609db3d0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@774f6111[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3037e182[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 17400,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Mar 13 23:57:25 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-03-13T23:57:25.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7412/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2019-12-17T17:26:32.000+0000",
        "updated": "2022-08-23T07:54:46.000+0000",
        "timeoriginalestimate": null,
        "description": "Fields in a schema don't have to have unique names, so we should make sure we're not assuming that.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 17400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Dataset] Ensure that dataset code is robust to schemas with duplicate field names",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13275061/comment/17009057",
                    "id": "17009057",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "For now, we should probably just error if a field is referenced whose name is not unique.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-01-06T17:51:20.155+0000",
                    "updated": "2020-01-06T17:51:20.155+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13275061/comment/17039101",
                    "id": "17039101",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "A more general solution would be provide an unambiguous way to refer to fields https://docs.google.com/document/d/1-aoAb1d00BfCcEP--kmYWDBb_eeOFgtlSVPPjSGy8ko/edit",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-02-18T13:54:35.050+0000",
                    "updated": "2020-02-18T13:54:35.050+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13275061/comment/17059133",
                    "id": "17059133",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 6545\n[https://github.com/apache/arrow/pull/6545]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-03-13T23:57:25.624+0000",
                    "updated": "2020-03-13T23:57:25.624+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z09row:",
        "customfield_12314139": null
    }
}