{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13208340",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208340",
    "key": "ARROW-4196",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343937",
                "id": "12343937",
                "description": "",
                "name": "0.13.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-04-01"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paddyhoran",
            "name": "paddyhoran",
            "key": "paddyhoran",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paddy Horan",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paddyhoran",
            "name": "paddyhoran",
            "key": "paddyhoran",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paddy Horan",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paddyhoran",
            "name": "paddyhoran",
            "key": "paddyhoran",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Paddy Horan",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 15600,
            "total": 15600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 15600,
            "total": 15600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4196/votes",
            "votes": 1,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 31,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208340/worklog/187958",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #3451: [WIP] ARROW-4196: [Rust] Add explicit SIMD vectorization for arithmetic ops in \"array_ops\"\nURL: https://github.com/apache/arrow/pull/3451\n \n \n   @andygrove @sunchao this is nowhere near done but I did want to get your opinions on two items before I go further:\r\n   \r\n    - the choice of `packed_simd`.  There are other options out there and some try to provide a higher level api.  However, I feel that ecosystem has not matured enough yet to the point that any single third party library is the clear choice for SIMD in rust and therefore is not worth picking it up as a dependency at this time.  In arrow we will always be working with packed vectors, couple this with the fact that the objective of `packed_simd` to to get [stablized](https://github.com/rust-lang/rfcs/pull/2366) in the future and I think that `packed_simd` is a good choice.  Alternatively, we could you the raw intrinsics in `std::arch`.\r\n   \r\n    - Re-organization of what is called `array_ops` into the `compute` sub module.  This is for two reasons.  Although I will try to make the SIMD optimized versions of the code as easy to use as possible (with run-time detection, etc.), the actual implementation of SIMD code tends to be a little verbose as we will want to conditionally compile different versions for different cpu's.  The C++ version is structured this way with a `compute` sub module.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-22T04:16:11.397+0000",
                    "updated": "2019-01-22T04:16:11.397+0000",
                    "started": "2019-01-22T04:16:11.397+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "187958",
                    "issueId": "13208340"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208340/worklog/188196",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on issue #3451: [WIP] ARROW-4196: [Rust] Add explicit SIMD vectorization for arithmetic ops in \"array_ops\"\nURL: https://github.com/apache/arrow/pull/3451#issuecomment-456411523\n \n \n   @paddyhoran This PR includes some commits in the diff view that should not come up. Can you rebase on master?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-22T14:07:52.467+0000",
                    "updated": "2019-01-22T14:07:52.467+0000",
                    "started": "2019-01-22T14:07:52.467+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "188196",
                    "issueId": "13208340"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208340/worklog/188270",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on issue #3451: [WIP] ARROW-4196: [Rust] Add explicit SIMD vectorization for arithmetic ops in \"array_ops\"\nURL: https://github.com/apache/arrow/pull/3451#issuecomment-456435902\n \n \n   Yep, sorry about that.  I'll rebase when I get a chance.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-22T15:15:11.194+0000",
                    "updated": "2019-01-22T15:15:11.194+0000",
                    "started": "2019-01-22T15:15:11.193+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "188270",
                    "issueId": "13208340"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208340/worklog/188618",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on issue #3451: [WIP] ARROW-4196: [Rust] Add explicit SIMD vectorization for arithmetic ops in \"array_ops\"\nURL: https://github.com/apache/arrow/pull/3451#issuecomment-456647820\n \n \n   @paddyhoran This is looking good. I don't have experience with SIMD yet but it was on my list to learn so this seems like a good opportunity .. I will start testing this.\r\n   \r\n   I like the `compute` module re-org.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-23T02:44:34.298+0000",
                    "updated": "2019-01-23T02:44:34.298+0000",
                    "started": "2019-01-23T02:44:34.298+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "188618",
                    "issueId": "13208340"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208340/worklog/188637",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on issue #3451: [WIP] ARROW-4196: [Rust] Add explicit SIMD vectorization for arithmetic ops in \"array_ops\"\nURL: https://github.com/apache/arrow/pull/3451#issuecomment-456657251\n \n \n   Thanks for the work @paddyhoran ! I'll take a look at this too.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-23T03:34:59.313+0000",
                    "updated": "2019-01-23T03:34:59.313+0000",
                    "started": "2019-01-23T03:34:59.312+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "188637",
                    "issueId": "13208340"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208340/worklog/188638",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on issue #3451: [WIP] ARROW-4196: [Rust] Add explicit SIMD vectorization for arithmetic ops in \"array_ops\"\nURL: https://github.com/apache/arrow/pull/3451#issuecomment-456657563\n \n \n   Hold off for a little, I'm trying to clean it up tonight.  I'll post what I have to get your opinions.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-23T03:36:44.371+0000",
                    "updated": "2019-01-23T03:36:44.371+0000",
                    "started": "2019-01-23T03:36:44.371+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "188638",
                    "issueId": "13208340"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208340/worklog/188866",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on issue #3451: [WIP] ARROW-4196: [Rust] Add explicit SIMD vectorization for arithmetic ops in \"array_ops\"\nURL: https://github.com/apache/arrow/pull/3451#issuecomment-456766883\n \n \n   I don't have any SIMD experience, I however \ud83d\udc4d the `compute` addition, as it's similar to what's being done in the cpp codebase.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-23T11:25:15.469+0000",
                    "updated": "2019-01-23T11:25:15.469+0000",
                    "started": "2019-01-23T11:25:15.469+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "188866",
                    "issueId": "13208340"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208340/worklog/190334",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #3451: [WIP] ARROW-4196: [Rust] Add explicit SIMD vectorization for arithmetic ops in \"array_ops\"\nURL: https://github.com/apache/arrow/pull/3451#discussion_r251190669\n \n \n\n ##########\n File path: rust/arrow/src/compute/arithmetic_kernels.rs\n ##########\n @@ -0,0 +1,141 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines basic arithmetic kernels for `PrimitiveArrays`.\n+//!\n+//! These kernels can leverage SIMD if available on your system.  Currently no runtime detection\n+//! is provided, you should enable the specific SIMD intrinsics using\n+//! `RUSTFLAGS=\"-C target-feature=+avx2\"` for example.  See the\n+//! [here] (https://doc.rust-lang.org/stable/std/arch/) for more information.\n+\n+use std::mem;\n+use std::ops::{Add, Div, Mul, Sub};\n+use std::slice::from_raw_parts_mut;\n+\n+use num::Zero;\n+\n+use crate::array::*;\n+use crate::buffer::MutableBuffer;\n+use crate::compute::array_ops::math_op;\n+use crate::datatypes;\n+use crate::error::{ArrowError, Result};\n+\n+/// Vectorized version of add operation\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn add_simd<T>(left: &PrimitiveArray<T>, right: &PrimitiveArray<T>) -> Result<PrimitiveArray<T>>\n+where\n+    T: datatypes::ArrowNumericType,\n+{\n+    if left.len() != right.len() {\n+        return Err(ArrowError::ComputeError(\n+            \"Cannot perform math operation on arrays of different length\".to_string(),\n+        ));\n+    }\n+\n+    let lanes = T::lanes();\n+    let buffer_size = left.len() * mem::size_of::<T::Native>();\n+    let mut result = MutableBuffer::new(buffer_size).with_bitset(buffer_size, false);\n+\n+    for i in (0..left.len()).step_by(lanes) {\n+        let simd_left = T::load(left.value_slice(i, lanes));\n+        let simd_right = T::load(right.value_slice(i, lanes));\n+        let simd_result = T::add(simd_left, simd_right);\n+\n+        let result_slice: &mut [T::Native] = unsafe {\n+            from_raw_parts_mut(\n+                (result.data_mut().as_mut_ptr() as *mut T::Native).offset(i as isize),\n+                lanes,\n+            )\n+        };\n+        T::write(simd_result, result_slice);\n+    }\n+\n+    Ok(PrimitiveArray::<T>::new(left.len(), result.freeze(), 0, 0))\n+}\n+\n+/// Perform `left + right` operation on two arrays. If either left or right value is null then the result is also null.\n+pub fn add<T>(left: &PrimitiveArray<T>, right: &PrimitiveArray<T>) -> Result<PrimitiveArray<T>>\n+where\n+    T: datatypes::ArrowNumericType,\n+    T::Native: Add<Output = T::Native>\n+        + Sub<Output = T::Native>\n+        + Mul<Output = T::Native>\n+        + Div<Output = T::Native>\n+        + Zero,\n+{\n+    #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n \n Review comment:\n   Can we make this runtime detection? e.g.:\r\n   ```rust\r\n       if is_x86_feature_detected!(\"avx2\") {\r\n           return add_simd(&left, &right);\r\n       } else {\r\n           math_op(left, right, |a, b| Ok(a + b))\r\n       }\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-26T07:17:48.528+0000",
                    "updated": "2019-01-26T07:17:48.528+0000",
                    "started": "2019-01-26T07:17:48.527+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "190334",
                    "issueId": "13208340"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208340/worklog/190337",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #3451: [WIP] ARROW-4196: [Rust] Add explicit SIMD vectorization for arithmetic ops in \"array_ops\"\nURL: https://github.com/apache/arrow/pull/3451#discussion_r251190852\n \n \n\n ##########\n File path: rust/arrow/src/mod.rs\n ##########\n @@ -17,6 +17,7 @@\n \n pub mod array;\n pub mod array_data;\n+pub mod compute;\n \n Review comment:\n   We should not need this file anymore since we have `lib.rs`. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-26T07:17:48.529+0000",
                    "updated": "2019-01-26T07:17:48.529+0000",
                    "started": "2019-01-26T07:17:48.528+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "190337",
                    "issueId": "13208340"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208340/worklog/190336",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #3451: [WIP] ARROW-4196: [Rust] Add explicit SIMD vectorization for arithmetic ops in \"array_ops\"\nURL: https://github.com/apache/arrow/pull/3451#discussion_r251190966\n \n \n\n ##########\n File path: rust/arrow/src/datatypes.rs\n ##########\n @@ -151,19 +152,70 @@ make_type!(UInt64Type, u64, DataType::UInt64, 64, 0u64);\n make_type!(Float32Type, f32, DataType::Float32, 32, 0.0f32);\n make_type!(Float64Type, f64, DataType::Float64, 64, 0.0f64);\n \n-/// A subtype of primitive type that represents numeric values.\n-pub trait ArrowNumericType: ArrowPrimitiveType {}\n-\n-impl ArrowNumericType for Int8Type {}\n-impl ArrowNumericType for Int16Type {}\n-impl ArrowNumericType for Int32Type {}\n-impl ArrowNumericType for Int64Type {}\n-impl ArrowNumericType for UInt8Type {}\n-impl ArrowNumericType for UInt16Type {}\n-impl ArrowNumericType for UInt32Type {}\n-impl ArrowNumericType for UInt64Type {}\n-impl ArrowNumericType for Float32Type {}\n-impl ArrowNumericType for Float64Type {}\n+/// A subtype of primitive type that represents numeric values, if available a SIMD type and\n+/// SIMD operations are defined in this trait.  SIMD is leveraged in the `compute` module if\n+/// available.\n+pub trait ArrowNumericType: ArrowPrimitiveType {\n+    /// Defines the SIMD type that should be used for this numeric type\n+    #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n \n Review comment:\n   Can we put this above the trait definition? also, I'm not sure if we should define another trait just for SIMD, since now `ArrowNumericType` really is almost all about SIMD.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-26T07:17:48.531+0000",
                    "updated": "2019-01-26T07:17:48.531+0000",
                    "started": "2019-01-26T07:17:48.530+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "190336",
                    "issueId": "13208340"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208340/worklog/190335",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #3451: [WIP] ARROW-4196: [Rust] Add explicit SIMD vectorization for arithmetic ops in \"array_ops\"\nURL: https://github.com/apache/arrow/pull/3451#discussion_r250899023\n \n \n\n ##########\n File path: rust/arrow/src/array.rs\n ##########\n @@ -226,8 +226,9 @@ impl<T: ArrowNumericType> PrimitiveArray<T> {\n     ///\n     /// Note this doesn't do any bound checking, for performance reason.\n     pub fn value_slice(&self, offset: usize, len: usize) -> &[T::Native] {\n-        let raw = unsafe { std::slice::from_raw_parts(self.raw_values(), self.len()) };\n-        &raw[offset..offset + len]\n+        let raw =\n+            unsafe { std::slice::from_raw_parts(self.raw_values().offset(offset as isize), len) };\n \n Review comment:\n   Why this change?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-26T07:17:48.533+0000",
                    "updated": "2019-01-26T07:17:48.533+0000",
                    "started": "2019-01-26T07:17:48.532+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "190335",
                    "issueId": "13208340"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208340/worklog/190338",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #3451: [WIP] ARROW-4196: [Rust] Add explicit SIMD vectorization for arithmetic ops in \"array_ops\"\nURL: https://github.com/apache/arrow/pull/3451#discussion_r251191039\n \n \n\n ##########\n File path: rust/arrow/src/datatypes.rs\n ##########\n @@ -151,19 +152,70 @@ make_type!(UInt64Type, u64, DataType::UInt64, 64, 0u64);\n make_type!(Float32Type, f32, DataType::Float32, 32, 0.0f32);\n make_type!(Float64Type, f64, DataType::Float64, 64, 0.0f64);\n \n-/// A subtype of primitive type that represents numeric values.\n-pub trait ArrowNumericType: ArrowPrimitiveType {}\n-\n-impl ArrowNumericType for Int8Type {}\n-impl ArrowNumericType for Int16Type {}\n-impl ArrowNumericType for Int32Type {}\n-impl ArrowNumericType for Int64Type {}\n-impl ArrowNumericType for UInt8Type {}\n-impl ArrowNumericType for UInt16Type {}\n-impl ArrowNumericType for UInt32Type {}\n-impl ArrowNumericType for UInt64Type {}\n-impl ArrowNumericType for Float32Type {}\n-impl ArrowNumericType for Float64Type {}\n+/// A subtype of primitive type that represents numeric values, if available a SIMD type and\n+/// SIMD operations are defined in this trait.  SIMD is leveraged in the `compute` module if\n+/// available.\n+pub trait ArrowNumericType: ArrowPrimitiveType {\n+    /// Defines the SIMD type that should be used for this numeric type\n+    #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+    type Simd;\n+\n+    /// The number of SIMD lanes available\n+    #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+    fn lanes() -> usize;\n+\n+    /// Loads a slice into a SIMD register\n+    #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+    fn load(slice: &[Self::Native]) -> Self::Simd;\n+\n+    /// Performs a SIMD add operation\n+    #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+    fn add(left: Self::Simd, right: Self::Simd) -> Self::Simd;\n+\n+    /// Writes a SIMD result back to a slice\n+    #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+    fn write(simd_result: Self::Simd, slice: &mut [Self::Native]);\n+}\n+\n+macro_rules! make_numeric_type {\n+    ($impl_ty:ty, $native_ty:ty, $simd_ty:ident) => {\n+        impl ArrowNumericType for $impl_ty {\n+            #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+            type Simd = $simd_ty;\n+\n+            #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+            fn lanes() -> usize {\n+                $simd_ty::lanes()\n+            }\n+\n+            #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+            fn load(slice: &[$native_ty]) -> $simd_ty {\n+                unsafe { $simd_ty::from_slice_unaligned_unchecked(slice) }\n+            }\n+\n+            #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+            fn add(left: $simd_ty, right: $simd_ty) -> $simd_ty {\n+                left + right\n+            }\n+\n+            #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+            fn write(simd_result: $simd_ty, slice: &mut [$native_ty]) {\n+                unsafe { simd_result.write_to_slice_unaligned_unchecked(slice) };\n+            }\n+        }\n+    };\n+}\n+\n+make_numeric_type!(Int8Type, i8, i8x64);\n \n Review comment:\n   Have you considered AVX-512? also wondering if it would be possible to support both depending on the architecture...\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-26T07:17:48.535+0000",
                    "updated": "2019-01-26T07:17:48.535+0000",
                    "started": "2019-01-26T07:17:48.534+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "190338",
                    "issueId": "13208340"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208340/worklog/190339",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #3451: [WIP] ARROW-4196: [Rust] Add explicit SIMD vectorization for arithmetic ops in \"array_ops\"\nURL: https://github.com/apache/arrow/pull/3451#discussion_r251190785\n \n \n\n ##########\n File path: rust/arrow/src/compute/arithmetic_kernels.rs\n ##########\n @@ -0,0 +1,141 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines basic arithmetic kernels for `PrimitiveArrays`.\n+//!\n+//! These kernels can leverage SIMD if available on your system.  Currently no runtime detection\n+//! is provided, you should enable the specific SIMD intrinsics using\n+//! `RUSTFLAGS=\"-C target-feature=+avx2\"` for example.  See the\n+//! [here] (https://doc.rust-lang.org/stable/std/arch/) for more information.\n+\n+use std::mem;\n+use std::ops::{Add, Div, Mul, Sub};\n+use std::slice::from_raw_parts_mut;\n+\n+use num::Zero;\n+\n+use crate::array::*;\n+use crate::buffer::MutableBuffer;\n+use crate::compute::array_ops::math_op;\n+use crate::datatypes;\n+use crate::error::{ArrowError, Result};\n+\n+/// Vectorized version of add operation\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn add_simd<T>(left: &PrimitiveArray<T>, right: &PrimitiveArray<T>) -> Result<PrimitiveArray<T>>\n+where\n+    T: datatypes::ArrowNumericType,\n+{\n+    if left.len() != right.len() {\n+        return Err(ArrowError::ComputeError(\n+            \"Cannot perform math operation on arrays of different length\".to_string(),\n+        ));\n+    }\n+\n+    let lanes = T::lanes();\n+    let buffer_size = left.len() * mem::size_of::<T::Native>();\n+    let mut result = MutableBuffer::new(buffer_size).with_bitset(buffer_size, false);\n+\n+    for i in (0..left.len()).step_by(lanes) {\n+        let simd_left = T::load(left.value_slice(i, lanes));\n+        let simd_right = T::load(right.value_slice(i, lanes));\n+        let simd_result = T::add(simd_left, simd_right);\n \n Review comment:\n   How are we going to handle nulls?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-26T07:17:48.552+0000",
                    "updated": "2019-01-26T07:17:48.552+0000",
                    "started": "2019-01-26T07:17:48.551+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "190339",
                    "issueId": "13208340"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208340/worklog/190340",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #3451: [WIP] ARROW-4196: [Rust] Add explicit SIMD vectorization for arithmetic ops in \"array_ops\"\nURL: https://github.com/apache/arrow/pull/3451#discussion_r251190778\n \n \n\n ##########\n File path: rust/arrow/src/datatypes.rs\n ##########\n @@ -151,19 +152,70 @@ make_type!(UInt64Type, u64, DataType::UInt64, 64, 0u64);\n make_type!(Float32Type, f32, DataType::Float32, 32, 0.0f32);\n make_type!(Float64Type, f64, DataType::Float64, 64, 0.0f64);\n \n-/// A subtype of primitive type that represents numeric values.\n-pub trait ArrowNumericType: ArrowPrimitiveType {}\n-\n-impl ArrowNumericType for Int8Type {}\n-impl ArrowNumericType for Int16Type {}\n-impl ArrowNumericType for Int32Type {}\n-impl ArrowNumericType for Int64Type {}\n-impl ArrowNumericType for UInt8Type {}\n-impl ArrowNumericType for UInt16Type {}\n-impl ArrowNumericType for UInt32Type {}\n-impl ArrowNumericType for UInt64Type {}\n-impl ArrowNumericType for Float32Type {}\n-impl ArrowNumericType for Float64Type {}\n+/// A subtype of primitive type that represents numeric values, if available a SIMD type and\n+/// SIMD operations are defined in this trait.  SIMD is leveraged in the `compute` module if\n+/// available.\n+pub trait ArrowNumericType: ArrowPrimitiveType {\n+    /// Defines the SIMD type that should be used for this numeric type\n+    #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+    type Simd;\n+\n+    /// The number of SIMD lanes available\n+    #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+    fn lanes() -> usize;\n+\n+    /// Loads a slice into a SIMD register\n+    #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+    fn load(slice: &[Self::Native]) -> Self::Simd;\n+\n+    /// Performs a SIMD add operation\n+    #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+    fn add(left: Self::Simd, right: Self::Simd) -> Self::Simd;\n \n Review comment:\n   Can we make this general to all math operations? e.g., +, -, *, /. Seems they are supported by the simd type.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-26T07:17:48.556+0000",
                    "updated": "2019-01-26T07:17:48.556+0000",
                    "started": "2019-01-26T07:17:48.555+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "190340",
                    "issueId": "13208340"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208340/worklog/190441",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #3451: [WIP] ARROW-4196: [Rust] Add explicit SIMD vectorization for arithmetic ops in \"array_ops\"\nURL: https://github.com/apache/arrow/pull/3451#discussion_r251207241\n \n \n\n ##########\n File path: rust/arrow/src/array.rs\n ##########\n @@ -226,8 +226,9 @@ impl<T: ArrowNumericType> PrimitiveArray<T> {\n     ///\n     /// Note this doesn't do any bound checking, for performance reason.\n     pub fn value_slice(&self, offset: usize, len: usize) -> &[T::Native] {\n-        let raw = unsafe { std::slice::from_raw_parts(self.raw_values(), self.len()) };\n-        &raw[offset..offset + len]\n+        let raw =\n+            unsafe { std::slice::from_raw_parts(self.raw_values().offset(offset as isize), len) };\n \n Review comment:\n   The comment says that it does not do bounds checking but I found that it did.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-26T18:02:29.537+0000",
                    "updated": "2019-01-26T18:02:29.537+0000",
                    "started": "2019-01-26T18:02:29.536+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "190441",
                    "issueId": "13208340"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208340/worklog/190442",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #3451: [WIP] ARROW-4196: [Rust] Add explicit SIMD vectorization for arithmetic ops in \"array_ops\"\nURL: https://github.com/apache/arrow/pull/3451#discussion_r251207613\n \n \n\n ##########\n File path: rust/arrow/src/compute/arithmetic_kernels.rs\n ##########\n @@ -0,0 +1,141 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines basic arithmetic kernels for `PrimitiveArrays`.\n+//!\n+//! These kernels can leverage SIMD if available on your system.  Currently no runtime detection\n+//! is provided, you should enable the specific SIMD intrinsics using\n+//! `RUSTFLAGS=\"-C target-feature=+avx2\"` for example.  See the\n+//! [here] (https://doc.rust-lang.org/stable/std/arch/) for more information.\n+\n+use std::mem;\n+use std::ops::{Add, Div, Mul, Sub};\n+use std::slice::from_raw_parts_mut;\n+\n+use num::Zero;\n+\n+use crate::array::*;\n+use crate::buffer::MutableBuffer;\n+use crate::compute::array_ops::math_op;\n+use crate::datatypes;\n+use crate::error::{ArrowError, Result};\n+\n+/// Vectorized version of add operation\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn add_simd<T>(left: &PrimitiveArray<T>, right: &PrimitiveArray<T>) -> Result<PrimitiveArray<T>>\n+where\n+    T: datatypes::ArrowNumericType,\n+{\n+    if left.len() != right.len() {\n+        return Err(ArrowError::ComputeError(\n+            \"Cannot perform math operation on arrays of different length\".to_string(),\n+        ));\n+    }\n+\n+    let lanes = T::lanes();\n+    let buffer_size = left.len() * mem::size_of::<T::Native>();\n+    let mut result = MutableBuffer::new(buffer_size).with_bitset(buffer_size, false);\n+\n+    for i in (0..left.len()).step_by(lanes) {\n+        let simd_left = T::load(left.value_slice(i, lanes));\n+        let simd_right = T::load(right.value_slice(i, lanes));\n+        let simd_result = T::add(simd_left, simd_right);\n \n Review comment:\n   I still have to work on nulls\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-26T18:11:12.485+0000",
                    "updated": "2019-01-26T18:11:12.485+0000",
                    "started": "2019-01-26T18:11:12.484+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "190442",
                    "issueId": "13208340"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208340/worklog/190443",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #3451: [WIP] ARROW-4196: [Rust] Add explicit SIMD vectorization for arithmetic ops in \"array_ops\"\nURL: https://github.com/apache/arrow/pull/3451#discussion_r251207689\n \n \n\n ##########\n File path: rust/arrow/src/datatypes.rs\n ##########\n @@ -151,19 +152,70 @@ make_type!(UInt64Type, u64, DataType::UInt64, 64, 0u64);\n make_type!(Float32Type, f32, DataType::Float32, 32, 0.0f32);\n make_type!(Float64Type, f64, DataType::Float64, 64, 0.0f64);\n \n-/// A subtype of primitive type that represents numeric values.\n-pub trait ArrowNumericType: ArrowPrimitiveType {}\n-\n-impl ArrowNumericType for Int8Type {}\n-impl ArrowNumericType for Int16Type {}\n-impl ArrowNumericType for Int32Type {}\n-impl ArrowNumericType for Int64Type {}\n-impl ArrowNumericType for UInt8Type {}\n-impl ArrowNumericType for UInt16Type {}\n-impl ArrowNumericType for UInt32Type {}\n-impl ArrowNumericType for UInt64Type {}\n-impl ArrowNumericType for Float32Type {}\n-impl ArrowNumericType for Float64Type {}\n+/// A subtype of primitive type that represents numeric values, if available a SIMD type and\n+/// SIMD operations are defined in this trait.  SIMD is leveraged in the `compute` module if\n+/// available.\n+pub trait ArrowNumericType: ArrowPrimitiveType {\n+    /// Defines the SIMD type that should be used for this numeric type\n+    #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n \n Review comment:\n   It looked wrong to have `#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]` in multiple places, I plan to go back and see how to clean this up.\r\n   \r\n   > also, I'm not sure if we should define another trait just for SIMD, since now ArrowNumericType really is almost all about SIMD.\r\n   \r\n   I don't quite understand what you mean here?  What do you propose?\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-26T18:13:35.547+0000",
                    "updated": "2019-01-26T18:13:35.547+0000",
                    "started": "2019-01-26T18:13:35.546+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "190443",
                    "issueId": "13208340"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208340/worklog/190445",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #3451: [WIP] ARROW-4196: [Rust] Add explicit SIMD vectorization for arithmetic ops in \"array_ops\"\nURL: https://github.com/apache/arrow/pull/3451#discussion_r251207744\n \n \n\n ##########\n File path: rust/arrow/src/datatypes.rs\n ##########\n @@ -151,19 +152,70 @@ make_type!(UInt64Type, u64, DataType::UInt64, 64, 0u64);\n make_type!(Float32Type, f32, DataType::Float32, 32, 0.0f32);\n make_type!(Float64Type, f64, DataType::Float64, 64, 0.0f64);\n \n-/// A subtype of primitive type that represents numeric values.\n-pub trait ArrowNumericType: ArrowPrimitiveType {}\n-\n-impl ArrowNumericType for Int8Type {}\n-impl ArrowNumericType for Int16Type {}\n-impl ArrowNumericType for Int32Type {}\n-impl ArrowNumericType for Int64Type {}\n-impl ArrowNumericType for UInt8Type {}\n-impl ArrowNumericType for UInt16Type {}\n-impl ArrowNumericType for UInt32Type {}\n-impl ArrowNumericType for UInt64Type {}\n-impl ArrowNumericType for Float32Type {}\n-impl ArrowNumericType for Float64Type {}\n+/// A subtype of primitive type that represents numeric values, if available a SIMD type and\n+/// SIMD operations are defined in this trait.  SIMD is leveraged in the `compute` module if\n+/// available.\n+pub trait ArrowNumericType: ArrowPrimitiveType {\n+    /// Defines the SIMD type that should be used for this numeric type\n+    #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+    type Simd;\n+\n+    /// The number of SIMD lanes available\n+    #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+    fn lanes() -> usize;\n+\n+    /// Loads a slice into a SIMD register\n+    #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+    fn load(slice: &[Self::Native]) -> Self::Simd;\n+\n+    /// Performs a SIMD add operation\n+    #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+    fn add(left: Self::Simd, right: Self::Simd) -> Self::Simd;\n+\n+    /// Writes a SIMD result back to a slice\n+    #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+    fn write(simd_result: Self::Simd, slice: &mut [Self::Native]);\n+}\n+\n+macro_rules! make_numeric_type {\n+    ($impl_ty:ty, $native_ty:ty, $simd_ty:ident) => {\n+        impl ArrowNumericType for $impl_ty {\n+            #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+            type Simd = $simd_ty;\n+\n+            #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+            fn lanes() -> usize {\n+                $simd_ty::lanes()\n+            }\n+\n+            #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+            fn load(slice: &[$native_ty]) -> $simd_ty {\n+                unsafe { $simd_ty::from_slice_unaligned_unchecked(slice) }\n+            }\n+\n+            #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+            fn add(left: $simd_ty, right: $simd_ty) -> $simd_ty {\n+                left + right\n+            }\n+\n+            #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+            fn write(simd_result: $simd_ty, slice: &mut [$native_ty]) {\n+                unsafe { simd_result.write_to_slice_unaligned_unchecked(slice) };\n+            }\n+        }\n+    };\n+}\n+\n+make_numeric_type!(Int8Type, i8, i8x64);\n \n Review comment:\n   I actually thought that `packed_simd` only supported up to 256, I need to update this.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-26T18:15:31.572+0000",
                    "updated": "2019-01-26T18:15:31.572+0000",
                    "started": "2019-01-26T18:15:31.571+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "190445",
                    "issueId": "13208340"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208340/worklog/190447",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on issue #3451: [WIP] ARROW-4196: [Rust] Add explicit SIMD vectorization for arithmetic ops in \"array_ops\"\nURL: https://github.com/apache/arrow/pull/3451#issuecomment-457854020\n \n \n   I wanted to leave a note on the general direction.  At first I wanted runtime detection of the \"best\" intrinsics.  However, after some research there is no \"best\" solution, it depends on the situation.\r\n   \r\n   Here is what I'm planning.  Support the larges SIMD registers available in `packed_simd` and allow the user to compile for which ever intrinsics they want via `RUSTFLAGS=\"-C target-feature=+avx2\"` or similar.\r\n   \r\n   `packed_simd` will do the correct thing where only smaller registers are available.  i.e. `f32x16` would be converted to two `f32x8`.\r\n   \r\n   I believe that sse is available on all intel cpu's and if you do not use `RUSTFLAGS=\"-C target-feature=***\"` at all it will still use sse.\r\n   \r\n   I think we should add runtime detection via a feature flag in another jira.  Runtime detection is not always worth using as even though you may have access to intrinsics with wider registers the memory bandwidth of your cpu won't really allow you to take advantage of it, that's the situation I'm in on my dev machine.  In this case you might end up checking for different intrinsics at runtime even though the most basic sse version is just as fast.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-26T18:29:18.791+0000",
                    "updated": "2019-01-26T18:29:18.791+0000",
                    "started": "2019-01-26T18:29:18.790+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "190447",
                    "issueId": "13208340"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208340/worklog/190448",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paddyhoran commented on pull request #3451: [WIP] ARROW-4196: [Rust] Add explicit SIMD vectorization for arithmetic ops in \"array_ops\"\nURL: https://github.com/apache/arrow/pull/3451#discussion_r251208274\n \n \n\n ##########\n File path: rust/arrow/src/compute/arithmetic_kernels.rs\n ##########\n @@ -0,0 +1,141 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Defines basic arithmetic kernels for `PrimitiveArrays`.\n+//!\n+//! These kernels can leverage SIMD if available on your system.  Currently no runtime detection\n+//! is provided, you should enable the specific SIMD intrinsics using\n+//! `RUSTFLAGS=\"-C target-feature=+avx2\"` for example.  See the\n+//! [here] (https://doc.rust-lang.org/stable/std/arch/) for more information.\n+\n+use std::mem;\n+use std::ops::{Add, Div, Mul, Sub};\n+use std::slice::from_raw_parts_mut;\n+\n+use num::Zero;\n+\n+use crate::array::*;\n+use crate::buffer::MutableBuffer;\n+use crate::compute::array_ops::math_op;\n+use crate::datatypes;\n+use crate::error::{ArrowError, Result};\n+\n+/// Vectorized version of add operation\n+#[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n+fn add_simd<T>(left: &PrimitiveArray<T>, right: &PrimitiveArray<T>) -> Result<PrimitiveArray<T>>\n+where\n+    T: datatypes::ArrowNumericType,\n+{\n+    if left.len() != right.len() {\n+        return Err(ArrowError::ComputeError(\n+            \"Cannot perform math operation on arrays of different length\".to_string(),\n+        ));\n+    }\n+\n+    let lanes = T::lanes();\n+    let buffer_size = left.len() * mem::size_of::<T::Native>();\n+    let mut result = MutableBuffer::new(buffer_size).with_bitset(buffer_size, false);\n+\n+    for i in (0..left.len()).step_by(lanes) {\n+        let simd_left = T::load(left.value_slice(i, lanes));\n+        let simd_right = T::load(right.value_slice(i, lanes));\n+        let simd_result = T::add(simd_left, simd_right);\n+\n+        let result_slice: &mut [T::Native] = unsafe {\n+            from_raw_parts_mut(\n+                (result.data_mut().as_mut_ptr() as *mut T::Native).offset(i as isize),\n+                lanes,\n+            )\n+        };\n+        T::write(simd_result, result_slice);\n+    }\n+\n+    Ok(PrimitiveArray::<T>::new(left.len(), result.freeze(), 0, 0))\n+}\n+\n+/// Perform `left + right` operation on two arrays. If either left or right value is null then the result is also null.\n+pub fn add<T>(left: &PrimitiveArray<T>, right: &PrimitiveArray<T>) -> Result<PrimitiveArray<T>>\n+where\n+    T: datatypes::ArrowNumericType,\n+    T::Native: Add<Output = T::Native>\n+        + Sub<Output = T::Native>\n+        + Mul<Output = T::Native>\n+        + Div<Output = T::Native>\n+        + Zero,\n+{\n+    #[cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n \n Review comment:\n   See below.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-01-26T18:29:35.434+0000",
                    "updated": "2019-01-26T18:29:35.434+0000",
                    "started": "2019-01-26T18:29:35.433+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "190448",
                    "issueId": "13208340"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 15600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@18c34cc4[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@703e5405[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1fb29d5e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1d2e7cd1[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2715f4f5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@108d2834[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1b5e0f16[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@75f83058[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7d42d04e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4779b5a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6fba127d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5b749522[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 15600,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Feb 18 18:15:42 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-02-18T18:15:42.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4196/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2019-01-08T15:36:52.000+0000",
        "updated": "2019-02-18T18:15:51.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 15600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Add explicit SIMD vectorization for arithmetic ops in \"array_ops\"",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13208340/comment/16771276",
                    "id": "16771276",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 3680\n[https://github.com/apache/arrow/pull/3680]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2019-02-18T18:15:42.232+0000",
                    "updated": "2019-02-18T18:15:42.232+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|u00ms8:",
        "customfield_12314139": null
    }
}