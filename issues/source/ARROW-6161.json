{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13249391",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249391",
    "key": "ARROW-6161",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "dataset",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
            "name": "fsaintjacques",
            "key": "fsaintjacques",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
            },
            "displayName": "Francois Saint-Jacques",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
            "name": "fsaintjacques",
            "key": "fsaintjacques",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
            },
            "displayName": "Francois Saint-Jacques",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
            "name": "fsaintjacques",
            "key": "fsaintjacques",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
            },
            "displayName": "Francois Saint-Jacques",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 35400,
            "total": 35400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 35400,
            "total": 35400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6161/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 66,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249391/worklog/294765",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #5083: ARROW-6161: [C++][Dataset] Implements ParquetFragment\nURL: https://github.com/apache/arrow/pull/5083\n \n \n   This implements the ParquetFragment whose main goal is to expose a streaming iterator of RecordBatch.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-14T14:05:25.596+0000",
                    "updated": "2019-08-14T14:05:25.596+0000",
                    "started": "2019-08-14T14:05:25.596+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "294765",
                    "issueId": "13249391"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249391/worklog/294956",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on issue #5083: ARROW-6161: [C++][Dataset] Implements ParquetFragment\nURL: https://github.com/apache/arrow/pull/5083#issuecomment-521383062\n \n \n   @ursabot build\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-14T19:22:45.197+0000",
                    "updated": "2019-08-14T19:22:45.197+0000",
                    "started": "2019-08-14T19:22:45.196+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "294956",
                    "issueId": "13249391"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249391/worklog/295814",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5083: ARROW-6161: [C++][Dataset] Implements ParquetFragment\nURL: https://github.com/apache/arrow/pull/5083#discussion_r314312312\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_base.cc\n ##########\n @@ -0,0 +1,45 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/dataset/file_base.h\"\n+\n+#include \"arrow/filesystem/filesystem.h\"\n+#include \"arrow/io/interfaces.h\"\n+#include \"arrow/io/memory.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+Status FileSource::Open(std::shared_ptr<arrow::io::RandomAccessFile>* out) const {\n+  switch (type_) {\n+    case PATH:\n+      return filesystem_->OpenInputFile(path_, out);\n+    case BUFFER:\n+      out->reset(new ::arrow::io::BufferReader(buffer_));\n \n Review comment:\n   Use `*out = make_shared<BufferReader>(buffer_)`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-15T22:47:41.640+0000",
                    "updated": "2019-08-15T22:47:41.640+0000",
                    "started": "2019-08-15T22:47:41.640+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "295814",
                    "issueId": "13249391"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249391/worklog/295815",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5083: ARROW-6161: [C++][Dataset] Implements ParquetFragment\nURL: https://github.com/apache/arrow/pull/5083#discussion_r314435950\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.cc\n ##########\n @@ -0,0 +1,177 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/dataset/file_parquet.h\"\n+\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/table.h\"\n+#include \"arrow/util/iterator.h\"\n+#include \"parquet/arrow/reader.h\"\n+#include \"parquet/file_reader.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+using ScanTaskPtr = std::unique_ptr<ScanTask>;\n+using ParquetFileReaderPtr = std::unique_ptr<parquet::ParquetFileReader>;\n+using RecordBatchReaderPtr = std::unique_ptr<RecordBatchReader>;\n+\n+// A set of RowGroup identifiers\n+using RowGroupSet = std::vector<int>;\n+\n+class ParquetScanTask : public ScanTask {\n+ public:\n+  static Status Make(RowGroupSet row_groups, const std::vector<int>& columns_projection,\n \n Review comment:\n   NB: The \"columns projection\" here is a significant can of worms. We probably will need to rethink the API for column subsetting for Parquet (because of issues relating to nested data)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-15T22:47:41.880+0000",
                    "updated": "2019-08-15T22:47:41.880+0000",
                    "started": "2019-08-15T22:47:41.880+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "295815",
                    "issueId": "13249391"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249391/worklog/295816",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5083: ARROW-6161: [C++][Dataset] Implements ParquetFragment\nURL: https://github.com/apache/arrow/pull/5083#discussion_r314433950\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_base.h\n ##########\n @@ -129,7 +135,13 @@ class ARROW_DS_EXPORT FileFormat {\n class ARROW_DS_EXPORT FileBasedDataFragment : public DataFragment {\n  public:\n   FileBasedDataFragment(const FileSource& location, std::shared_ptr<FileFormat> format,\n-                        std::shared_ptr<ScanOptions>);\n+                        std::shared_ptr<ScanOptions> scan_options)\n+      : location_(location),\n+        format_(std::move(format)),\n+        scan_options_(std::move(scan_options)) {}\n+\n+  Status GetTasks(std::shared_ptr<ScanContext> scan_context,\n \n Review comment:\n   I wonder if this function should be called simply `Scan`, `StartScan` or similar. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-15T22:47:42.068+0000",
                    "updated": "2019-08-15T22:47:42.068+0000",
                    "started": "2019-08-15T22:47:42.068+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "295816",
                    "issueId": "13249391"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249391/worklog/295817",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5083: ARROW-6161: [C++][Dataset] Implements ParquetFragment\nURL: https://github.com/apache/arrow/pull/5083#discussion_r314434781\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet-test.cc\n ##########\n @@ -0,0 +1,85 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/dataset/file_parquet.h\"\n+\n+#include \"arrow/dataset/test_util.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/testing/util.h\"\n+#include \"parquet/arrow/io_test.h\"\n+#include \"parquet/arrow/writer.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+using parquet::arrow::ArrowParquetWriterMixin;\n+\n+constexpr int64_t kBatchSize = 1UL << 15;\n+constexpr int64_t kBatchRepetitions = 1 << 10;\n+constexpr int64_t kNumRows = kBatchSize * kBatchRepetitions;\n+\n+class ParquetBufferFixtureMixin : public ArrowParquetWriterMixin {\n+ public:\n+  std::unique_ptr<FileSource> GetLocation(RecordBatchReader* reader) {\n+    auto buffer = Write(reader);\n+    return internal::make_unique<FileSource>(std::move(buffer));\n+  }\n+\n+  std::unique_ptr<RecordBatchReader> GetRecordBatchReader() {\n+    auto batch = GetRecordBatch();\n+    return internal::make_unique<RepeatedRecordBatch>(kBatchRepetitions, batch);\n+  }\n+\n+  std::shared_ptr<RecordBatch> GetRecordBatch() {\n+    ASSERT_OK_AND_ASSIGN(auto f64, MakeRepeatedArray(float64(), kBatchSize, 0.0));\n+\n+    auto schema_ = schema({field(\"f64\", f64->type())});\n+    return RecordBatch::Make(schema_, kBatchSize, {f64});\n+  }\n+};\n+\n+class TestParquetFileFormat : public ParquetBufferFixtureMixin {\n+ public:\n+  TestParquetFileFormat() : ctx_(std::make_shared<ScanContext>()) {}\n+\n+ protected:\n+  std::shared_ptr<ScanOptions> opts_;\n+  std::shared_ptr<ScanContext> ctx_;\n+};\n+\n+TEST_F(TestParquetFileFormat, ScanRecordBatchReader) {\n+  auto reader = GetRecordBatchReader();\n+  auto location = GetLocation(reader.get());\n \n Review comment:\n   Is it more of a \"source\"?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-15T22:47:42.126+0000",
                    "updated": "2019-08-15T22:47:42.126+0000",
                    "started": "2019-08-15T22:47:42.125+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "295817",
                    "issueId": "13249391"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249391/worklog/295818",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5083: ARROW-6161: [C++][Dataset] Implements ParquetFragment\nURL: https://github.com/apache/arrow/pull/5083#discussion_r314438907\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.cc\n ##########\n @@ -0,0 +1,177 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/dataset/file_parquet.h\"\n+\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/table.h\"\n+#include \"arrow/util/iterator.h\"\n+#include \"parquet/arrow/reader.h\"\n+#include \"parquet/file_reader.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+using ScanTaskPtr = std::unique_ptr<ScanTask>;\n+using ParquetFileReaderPtr = std::unique_ptr<parquet::ParquetFileReader>;\n+using RecordBatchReaderPtr = std::unique_ptr<RecordBatchReader>;\n+\n+// A set of RowGroup identifiers\n+using RowGroupSet = std::vector<int>;\n+\n+class ParquetScanTask : public ScanTask {\n+ public:\n+  static Status Make(RowGroupSet row_groups, const std::vector<int>& columns_projection,\n+                     std::shared_ptr<parquet::arrow::FileReader> reader,\n+                     ScanTaskPtr* out) {\n+    RecordBatchReaderPtr record_batch_reader;\n+    // TODO(fsaintjacques): Ensure GetRecordBatchReader is truly streaming and\n+    // not using a TableBatchReader (materializing the full partition instead\n+    // of streaming).\n+    RETURN_NOT_OK(reader->GetRecordBatchReader(row_groups, columns_projection,\n+                                               &record_batch_reader));\n+\n+    out->reset(new ParquetScanTask(row_groups, std::move(reader),\n+                                   std::move(record_batch_reader)));\n+    return Status::OK();\n+  }\n+\n+  std::unique_ptr<RecordBatchIterator> Scan() override {\n+    return std::move(record_batch_reader_);\n+  }\n+\n+ private:\n+  ParquetScanTask(RowGroupSet row_groups,\n+                  std::shared_ptr<parquet::arrow::FileReader> reader,\n+                  RecordBatchReaderPtr record_batch_reader)\n+      : row_groups_(std::move(row_groups)),\n+        reader_(reader),\n+        record_batch_reader_(std::move(record_batch_reader)) {}\n+\n+  // List of RowGroup identifiers this ScanTask is associated with.\n+  RowGroupSet row_groups_;\n+\n+  // The ScanTask _must_ hold a reference to reader_ because there's no\n+  // guarantee the producing ParquetScanTaskIterator is still alive. This is a\n+  // contract required by record_batch_reader_\n+  std::shared_ptr<parquet::arrow::FileReader> reader_;\n+  RecordBatchReaderPtr record_batch_reader_;\n+};\n+\n+constexpr int64_t kDefaultRowCountPerPartition = 1U << 16;\n+\n+// A class that clusters RowGroups of a Parquet file until the cluster has a specified\n+// total row count. This doesn't guarantee exact row counts; it may exceed the target.\n+class ParquetRowGroupPartitionner {\n+ public:\n+  ParquetRowGroupPartitionner(std::shared_ptr<parquet::FileMetaData> metadata,\n \n Review comment:\n   `Partitioner`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-15T22:47:42.208+0000",
                    "updated": "2019-08-15T22:47:42.208+0000",
                    "started": "2019-08-15T22:47:42.207+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "295818",
                    "issueId": "13249391"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249391/worklog/295819",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5083: ARROW-6161: [C++][Dataset] Implements ParquetFragment\nURL: https://github.com/apache/arrow/pull/5083#discussion_r314438676\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.cc\n ##########\n @@ -0,0 +1,177 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/dataset/file_parquet.h\"\n+\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/table.h\"\n+#include \"arrow/util/iterator.h\"\n+#include \"parquet/arrow/reader.h\"\n+#include \"parquet/file_reader.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+using ScanTaskPtr = std::unique_ptr<ScanTask>;\n+using ParquetFileReaderPtr = std::unique_ptr<parquet::ParquetFileReader>;\n+using RecordBatchReaderPtr = std::unique_ptr<RecordBatchReader>;\n+\n+// A set of RowGroup identifiers\n+using RowGroupSet = std::vector<int>;\n+\n+class ParquetScanTask : public ScanTask {\n+ public:\n+  static Status Make(RowGroupSet row_groups, const std::vector<int>& columns_projection,\n+                     std::shared_ptr<parquet::arrow::FileReader> reader,\n+                     ScanTaskPtr* out) {\n+    RecordBatchReaderPtr record_batch_reader;\n+    // TODO(fsaintjacques): Ensure GetRecordBatchReader is truly streaming and\n+    // not using a TableBatchReader (materializing the full partition instead\n+    // of streaming).\n+    RETURN_NOT_OK(reader->GetRecordBatchReader(row_groups, columns_projection,\n+                                               &record_batch_reader));\n+\n+    out->reset(new ParquetScanTask(row_groups, std::move(reader),\n+                                   std::move(record_batch_reader)));\n+    return Status::OK();\n+  }\n+\n+  std::unique_ptr<RecordBatchIterator> Scan() override {\n+    return std::move(record_batch_reader_);\n+  }\n+\n+ private:\n+  ParquetScanTask(RowGroupSet row_groups,\n+                  std::shared_ptr<parquet::arrow::FileReader> reader,\n+                  RecordBatchReaderPtr record_batch_reader)\n+      : row_groups_(std::move(row_groups)),\n+        reader_(reader),\n+        record_batch_reader_(std::move(record_batch_reader)) {}\n+\n+  // List of RowGroup identifiers this ScanTask is associated with.\n+  RowGroupSet row_groups_;\n+\n+  // The ScanTask _must_ hold a reference to reader_ because there's no\n+  // guarantee the producing ParquetScanTaskIterator is still alive. This is a\n+  // contract required by record_batch_reader_\n+  std::shared_ptr<parquet::arrow::FileReader> reader_;\n+  RecordBatchReaderPtr record_batch_reader_;\n+};\n+\n+constexpr int64_t kDefaultRowCountPerPartition = 1U << 16;\n+\n+// A class that clusters RowGroups of a Parquet file until the cluster has a specified\n+// total row count. This doesn't guarantee exact row counts; it may exceed the target.\n+class ParquetRowGroupPartitionner {\n \n Review comment:\n   This is curious -- in practice each row group yielding a ScanTask would be sufficient. Why do we need to cluster row groups?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-15T22:47:42.458+0000",
                    "updated": "2019-08-15T22:47:42.458+0000",
                    "started": "2019-08-15T22:47:42.457+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "295819",
                    "issueId": "13249391"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249391/worklog/295820",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5083: ARROW-6161: [C++][Dataset] Implements ParquetFragment\nURL: https://github.com/apache/arrow/pull/5083#discussion_r314439600\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.cc\n ##########\n @@ -0,0 +1,177 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/dataset/file_parquet.h\"\n+\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/table.h\"\n+#include \"arrow/util/iterator.h\"\n+#include \"parquet/arrow/reader.h\"\n+#include \"parquet/file_reader.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+using ScanTaskPtr = std::unique_ptr<ScanTask>;\n+using ParquetFileReaderPtr = std::unique_ptr<parquet::ParquetFileReader>;\n+using RecordBatchReaderPtr = std::unique_ptr<RecordBatchReader>;\n+\n+// A set of RowGroup identifiers\n+using RowGroupSet = std::vector<int>;\n+\n+class ParquetScanTask : public ScanTask {\n+ public:\n+  static Status Make(RowGroupSet row_groups, const std::vector<int>& columns_projection,\n+                     std::shared_ptr<parquet::arrow::FileReader> reader,\n+                     ScanTaskPtr* out) {\n+    RecordBatchReaderPtr record_batch_reader;\n+    // TODO(fsaintjacques): Ensure GetRecordBatchReader is truly streaming and\n+    // not using a TableBatchReader (materializing the full partition instead\n+    // of streaming).\n+    RETURN_NOT_OK(reader->GetRecordBatchReader(row_groups, columns_projection,\n+                                               &record_batch_reader));\n+\n+    out->reset(new ParquetScanTask(row_groups, std::move(reader),\n+                                   std::move(record_batch_reader)));\n+    return Status::OK();\n+  }\n+\n+  std::unique_ptr<RecordBatchIterator> Scan() override {\n+    return std::move(record_batch_reader_);\n+  }\n+\n+ private:\n+  ParquetScanTask(RowGroupSet row_groups,\n+                  std::shared_ptr<parquet::arrow::FileReader> reader,\n+                  RecordBatchReaderPtr record_batch_reader)\n+      : row_groups_(std::move(row_groups)),\n+        reader_(reader),\n+        record_batch_reader_(std::move(record_batch_reader)) {}\n+\n+  // List of RowGroup identifiers this ScanTask is associated with.\n+  RowGroupSet row_groups_;\n+\n+  // The ScanTask _must_ hold a reference to reader_ because there's no\n+  // guarantee the producing ParquetScanTaskIterator is still alive. This is a\n+  // contract required by record_batch_reader_\n+  std::shared_ptr<parquet::arrow::FileReader> reader_;\n+  RecordBatchReaderPtr record_batch_reader_;\n+};\n+\n+constexpr int64_t kDefaultRowCountPerPartition = 1U << 16;\n+\n+// A class that clusters RowGroups of a Parquet file until the cluster has a specified\n+// total row count. This doesn't guarantee exact row counts; it may exceed the target.\n+class ParquetRowGroupPartitionner {\n+ public:\n+  ParquetRowGroupPartitionner(std::shared_ptr<parquet::FileMetaData> metadata,\n+                              int64_t row_count = kDefaultRowCountPerPartition)\n+      : metadata_(std::move(metadata)), row_count_(row_count), row_group_idx_(0) {\n+    num_row_groups_ = metadata_->num_row_groups();\n+  }\n+\n+  RowGroupSet Next() {\n+    int64_t partition_size = 0;\n+    RowGroupSet partition;\n+\n+    while (row_group_idx_ < num_row_groups_ && partition_size < row_count_) {\n+      partition_size += metadata_->RowGroup(row_group_idx_)->num_rows();\n+      partition.push_back(row_group_idx_++);\n+    }\n+\n+    return partition;\n+  }\n+\n+ private:\n+  std::shared_ptr<parquet::FileMetaData> metadata_;\n+  int64_t row_count_;\n+  int row_group_idx_;\n+  int num_row_groups_;\n+};\n+\n+class ParquetScanTaskIterator : public ScanTaskIterator {\n+ public:\n+  static Status Make(std::shared_ptr<ScanOptions> options,\n+                     std::shared_ptr<ScanContext> context, ParquetFileReaderPtr reader,\n+                     std::unique_ptr<ScanTaskIterator>* out) {\n+    auto metadata = reader->metadata();\n+\n+    std::vector<int> columns_projection;\n+    RETURN_NOT_OK(InferColumnProjection(*metadata, options, &columns_projection));\n+\n+    std::unique_ptr<parquet::arrow::FileReader> arrow_reader;\n+    RETURN_NOT_OK(parquet::arrow::FileReader::Make(context->pool, std::move(reader),\n+                                                   &arrow_reader));\n+\n+    out->reset(new ParquetScanTaskIterator(columns_projection, metadata,\n+                                           std::move(arrow_reader)));\n+\n+    return Status::OK();\n+  }\n+\n+  Status Next(ScanTaskPtr* task) override {\n+    auto partition = partitionner_.Next();\n+\n+    // Iteration is done.\n+    if (partition.size() == 0) {\n+      task->reset(nullptr);\n+      return Status::OK();\n+    }\n+\n+    return ParquetScanTask::Make(std::move(partition), columns_projection_, reader_,\n+                                 task);\n+  }\n+\n+ private:\n+  // Compute the column projection out of an optional arrow::Schema\n+  static Status InferColumnProjection(const parquet::FileMetaData& metadata,\n+                                      const std::shared_ptr<ScanOptions>& options,\n+                                      std::vector<int>* out) {\n+    // TODO(fsaintjacques): Compute intersection _and_ validity\n+    *out = metadata.AllColumnIndices();\n+\n+    return Status::OK();\n+  }\n+\n+  ParquetScanTaskIterator(std::vector<int> columns_projection,\n+                          std::shared_ptr<parquet::FileMetaData> metadata,\n+                          std::unique_ptr<parquet::arrow::FileReader> reader)\n+      : columns_projection_(columns_projection),\n+        partitionner_(std::move(metadata)),\n+        reader_(std::move(reader)) {}\n+\n+  std::vector<int> columns_projection_;\n+  ParquetRowGroupPartitionner partitionner_;\n+  std::shared_ptr<parquet::arrow::FileReader> reader_;\n+};\n+\n+Status ParquetFileFormat::ScanFile(const FileSource& location,\n \n Review comment:\n   `source`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-15T22:47:42.596+0000",
                    "updated": "2019-08-15T22:47:42.596+0000",
                    "started": "2019-08-15T22:47:42.596+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "295820",
                    "issueId": "13249391"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249391/worklog/295821",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5083: ARROW-6161: [C++][Dataset] Implements ParquetFragment\nURL: https://github.com/apache/arrow/pull/5083#discussion_r314439102\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.cc\n ##########\n @@ -0,0 +1,177 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/dataset/file_parquet.h\"\n+\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/table.h\"\n+#include \"arrow/util/iterator.h\"\n+#include \"parquet/arrow/reader.h\"\n+#include \"parquet/file_reader.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+using ScanTaskPtr = std::unique_ptr<ScanTask>;\n+using ParquetFileReaderPtr = std::unique_ptr<parquet::ParquetFileReader>;\n+using RecordBatchReaderPtr = std::unique_ptr<RecordBatchReader>;\n+\n+// A set of RowGroup identifiers\n+using RowGroupSet = std::vector<int>;\n+\n+class ParquetScanTask : public ScanTask {\n+ public:\n+  static Status Make(RowGroupSet row_groups, const std::vector<int>& columns_projection,\n+                     std::shared_ptr<parquet::arrow::FileReader> reader,\n+                     ScanTaskPtr* out) {\n+    RecordBatchReaderPtr record_batch_reader;\n+    // TODO(fsaintjacques): Ensure GetRecordBatchReader is truly streaming and\n+    // not using a TableBatchReader (materializing the full partition instead\n+    // of streaming).\n+    RETURN_NOT_OK(reader->GetRecordBatchReader(row_groups, columns_projection,\n+                                               &record_batch_reader));\n+\n+    out->reset(new ParquetScanTask(row_groups, std::move(reader),\n+                                   std::move(record_batch_reader)));\n+    return Status::OK();\n+  }\n+\n+  std::unique_ptr<RecordBatchIterator> Scan() override {\n+    return std::move(record_batch_reader_);\n+  }\n+\n+ private:\n+  ParquetScanTask(RowGroupSet row_groups,\n+                  std::shared_ptr<parquet::arrow::FileReader> reader,\n+                  RecordBatchReaderPtr record_batch_reader)\n+      : row_groups_(std::move(row_groups)),\n+        reader_(reader),\n+        record_batch_reader_(std::move(record_batch_reader)) {}\n+\n+  // List of RowGroup identifiers this ScanTask is associated with.\n+  RowGroupSet row_groups_;\n+\n+  // The ScanTask _must_ hold a reference to reader_ because there's no\n+  // guarantee the producing ParquetScanTaskIterator is still alive. This is a\n+  // contract required by record_batch_reader_\n+  std::shared_ptr<parquet::arrow::FileReader> reader_;\n+  RecordBatchReaderPtr record_batch_reader_;\n+};\n+\n+constexpr int64_t kDefaultRowCountPerPartition = 1U << 16;\n+\n+// A class that clusters RowGroups of a Parquet file until the cluster has a specified\n+// total row count. This doesn't guarantee exact row counts; it may exceed the target.\n+class ParquetRowGroupPartitionner {\n+ public:\n+  ParquetRowGroupPartitionner(std::shared_ptr<parquet::FileMetaData> metadata,\n+                              int64_t row_count = kDefaultRowCountPerPartition)\n+      : metadata_(std::move(metadata)), row_count_(row_count), row_group_idx_(0) {\n+    num_row_groups_ = metadata_->num_row_groups();\n+  }\n+\n+  RowGroupSet Next() {\n+    int64_t partition_size = 0;\n+    RowGroupSet partition;\n+\n+    while (row_group_idx_ < num_row_groups_ && partition_size < row_count_) {\n+      partition_size += metadata_->RowGroup(row_group_idx_)->num_rows();\n+      partition.push_back(row_group_idx_++);\n+    }\n+\n+    return partition;\n+  }\n+\n+ private:\n+  std::shared_ptr<parquet::FileMetaData> metadata_;\n+  int64_t row_count_;\n+  int row_group_idx_;\n+  int num_row_groups_;\n+};\n+\n+class ParquetScanTaskIterator : public ScanTaskIterator {\n+ public:\n+  static Status Make(std::shared_ptr<ScanOptions> options,\n+                     std::shared_ptr<ScanContext> context, ParquetFileReaderPtr reader,\n+                     std::unique_ptr<ScanTaskIterator>* out) {\n+    auto metadata = reader->metadata();\n+\n+    std::vector<int> columns_projection;\n+    RETURN_NOT_OK(InferColumnProjection(*metadata, options, &columns_projection));\n+\n+    std::unique_ptr<parquet::arrow::FileReader> arrow_reader;\n+    RETURN_NOT_OK(parquet::arrow::FileReader::Make(context->pool, std::move(reader),\n+                                                   &arrow_reader));\n+\n+    out->reset(new ParquetScanTaskIterator(columns_projection, metadata,\n+                                           std::move(arrow_reader)));\n+\n+    return Status::OK();\n+  }\n+\n+  Status Next(ScanTaskPtr* task) override {\n+    auto partition = partitionner_.Next();\n+\n+    // Iteration is done.\n+    if (partition.size() == 0) {\n+      task->reset(nullptr);\n+      return Status::OK();\n+    }\n+\n+    return ParquetScanTask::Make(std::move(partition), columns_projection_, reader_,\n+                                 task);\n+  }\n+\n+ private:\n+  // Compute the column projection out of an optional arrow::Schema\n \n Review comment:\n   I'm not sure that the schema should be optional. IMHO schema discovery should be handled at a higher level than this\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-15T22:47:42.670+0000",
                    "updated": "2019-08-15T22:47:42.670+0000",
                    "started": "2019-08-15T22:47:42.670+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "295821",
                    "issueId": "13249391"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249391/worklog/295822",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5083: ARROW-6161: [C++][Dataset] Implements ParquetFragment\nURL: https://github.com/apache/arrow/pull/5083#discussion_r314522911\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/scanner.h\n ##########\n @@ -39,27 +42,35 @@ struct ARROW_DS_EXPORT ScanContext {};\n class ARROW_DS_EXPORT ScanOptions {\n  public:\n   virtual ~ScanOptions() = default;\n+\n+  const DataSelector* selector() const { return selector_.get(); }\n+\n+ protected:\n+  // Filters\n+  std::unique_ptr<DataSelector> selector_;\n };\n \n-/// \\brief Read record batches from a range of a single data fragment\n+/// \\brief Read record batches from a range of a single data fragment. A\n+/// ScanTask is meant to be a unit of work to be dispatched. The implementation\n+/// must be thread and concurrent safe.\n class ARROW_DS_EXPORT ScanTask {\n  public:\n-  virtual ~ScanTask() = default;\n-\n   /// \\brief Iterate through sequence of materialized record batches\n   /// resulting from the Scan. Execution semantics encapsulated in the\n   /// particular ScanTask implementation\n   virtual std::unique_ptr<RecordBatchIterator> Scan() = 0;\n+\n+  virtual ~ScanTask() = default;\n \n Review comment:\n   Is there some reason to move the dtor to the bottom?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-15T22:47:42.735+0000",
                    "updated": "2019-08-15T22:47:42.735+0000",
                    "started": "2019-08-15T22:47:42.735+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "295822",
                    "issueId": "13249391"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249391/worklog/295823",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5083: ARROW-6161: [C++][Dataset] Implements ParquetFragment\nURL: https://github.com/apache/arrow/pull/5083#discussion_r314439717\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/file_parquet.h\n ##########\n @@ -37,24 +37,31 @@ class ARROW_DS_EXPORT ParquetWriteOptions : public FileWriteOptions {\n   std::string file_type() const override;\n };\n \n-class ARROW_DS_EXPORT ParquetFragment : public FileBasedDataFragment {\n- public:\n-  bool splittable() const override { return true; }\n-};\n-\n /// \\brief A FileFormat implementation that reads from Parquet files\n class ARROW_DS_EXPORT ParquetFileFormat : public FileFormat {\n  public:\n-  std::string name() const override;\n+  std::string name() const override { return \"parquet\"; }\n \n   /// \\brief Return true if the given file extension\n-  bool IsKnownExtension(const std::string& ext) const override;\n+  bool IsKnownExtension(const std::string& ext) const override {\n+    return ext == \"par\" || ext == name();\n \n Review comment:\n   `parq` is also used\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-15T22:47:42.765+0000",
                    "updated": "2019-08-15T22:47:42.765+0000",
                    "started": "2019-08-15T22:47:42.765+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "295823",
                    "issueId": "13249391"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249391/worklog/295824",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5083: ARROW-6161: [C++][Dataset] Implements ParquetFragment\nURL: https://github.com/apache/arrow/pull/5083#discussion_r314522848\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/scanner.h\n ##########\n @@ -39,27 +42,35 @@ struct ARROW_DS_EXPORT ScanContext {};\n class ARROW_DS_EXPORT ScanOptions {\n  public:\n   virtual ~ScanOptions() = default;\n+\n+  const DataSelector* selector() const { return selector_.get(); }\n+\n+ protected:\n+  // Filters\n+  std::unique_ptr<DataSelector> selector_;\n \n Review comment:\n   Thought: Selectors could be reused. No need to change anything until it becomes an issue though\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-15T22:47:42.792+0000",
                    "updated": "2019-08-15T22:47:42.792+0000",
                    "started": "2019-08-15T22:47:42.792+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "295824",
                    "issueId": "13249391"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249391/worklog/295825",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5083: ARROW-6161: [C++][Dataset] Implements ParquetFragment\nURL: https://github.com/apache/arrow/pull/5083#discussion_r314523231\n \n \n\n ##########\n File path: cpp/src/arrow/dataset/test_util.h\n ##########\n @@ -0,0 +1,74 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/testing/test_data.h\"\n+\n+#include <memory>\n+#include <string>\n+#include <utility>\n+\n+#include \"arrow/dataset/file_base.h\"\n+#include \"arrow/record_batch.h\"\n+#include \"arrow/util/stl.h\"\n+\n+namespace arrow {\n+namespace dataset {\n+\n+// Convenience class allowing easy retrieval of FileSources pointing to test data.\n+class FileSourceFixtureMixin : public TestDataFixtureMixin {\n+ public:\n+  std::unique_ptr<FileSource> GetParquetDataLocation(\n+      const std::string& path,\n+      Compression::type compression = Compression::UNCOMPRESSED) {\n+    return internal::make_unique<FileSource>(path, parquet_fs_.get(), compression);\n+  }\n+\n+  std::unique_ptr<FileSource> GetArrowDataLocation(\n+      const std::string& path,\n+      Compression::type compression = Compression::UNCOMPRESSED) {\n+    return internal::make_unique<FileSource>(path, arrow_fs_.get(), compression);\n+  }\n+\n+  std::unique_ptr<FileSource> GetLocation(std::shared_ptr<Buffer> buffer) {\n+    return internal::make_unique<FileSource>(std::move(buffer));\n+  }\n+};\n+\n+class RepeatedRecordBatch : public RecordBatchReader {\n \n Review comment:\n   Wouldn't it be more useful to instead have a reader that takes an `std::vector<std::shared_ptr<RecordBatch>>` and compose that with a function that generates a vector of repeats?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-15T22:47:42.827+0000",
                    "updated": "2019-08-15T22:47:42.827+0000",
                    "started": "2019-08-15T22:47:42.827+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "295825",
                    "issueId": "13249391"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249391/worklog/295826",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5083: ARROW-6161: [C++][Dataset] Implements ParquetFragment\nURL: https://github.com/apache/arrow/pull/5083#discussion_r314524899\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/reader.h\n ##########\n @@ -150,7 +152,17 @@ class PARQUET_EXPORT FileReader {\n   /// \\returns error Status if row_group_indices contains invalid index\n   virtual ::arrow::Status GetRecordBatchReader(\n       const std::vector<int>& row_group_indices,\n-      std::shared_ptr<::arrow::RecordBatchReader>* out) = 0;\n+      std::unique_ptr<::arrow::RecordBatchReader>* out) = 0;\n \n Review comment:\n   Do you need to change this? It seems like it would be easier to rather use shared_ptr inside the dataset implementation\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-15T22:47:42.879+0000",
                    "updated": "2019-08-15T22:47:42.879+0000",
                    "started": "2019-08-15T22:47:42.878+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "295826",
                    "issueId": "13249391"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249391/worklog/295827",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5083: ARROW-6161: [C++][Dataset] Implements ParquetFragment\nURL: https://github.com/apache/arrow/pull/5083#discussion_r314523475\n \n \n\n ##########\n File path: cpp/src/arrow/testing/CMakeLists.txt\n ##########\n @@ -16,3 +16,17 @@\n # under the License.\n \n arrow_install_all_headers(\"arrow/testing\")\n+\n+if(DEFINED $ENV{ARROW_TEST_DATA})\n+  set(ARROW_TEST_DATA $ENV{ARROW_TEST_DATA})\n+else()\n+  set(ARROW_TEST_DATA ${CMAKE_SOURCE_DIR}/../testing)\n+endif()\n+\n+if(DEFINED $ENV{PARQUET_TEST_DATA})\n+  set(PARQUET_TEST_DATA $ENV{PARQUET_TEST_DATA})\n+else()\n+  set(PARQUET_TEST_DATA ${CMAKE_SOURCE_DIR}/submodules/parquet-testing)\n+endif()\n+\n+configure_file(test_data.h.in \"${CMAKE_CURRENT_BINARY_DIR}/test_data.h\" @ONLY)\n \n Review comment:\n   Not sure about this. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-15T22:47:42.880+0000",
                    "updated": "2019-08-15T22:47:42.880+0000",
                    "started": "2019-08-15T22:47:42.880+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "295827",
                    "issueId": "13249391"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249391/worklog/295828",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5083: ARROW-6161: [C++][Dataset] Implements ParquetFragment\nURL: https://github.com/apache/arrow/pull/5083#discussion_r314524569\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/CMakeLists.txt\n ##########\n @@ -16,3 +16,4 @@\n # under the License.\n \n arrow_install_all_headers(\"parquet/arrow\")\n+arrow_install_all_headers(\"parquet/arrow/dataset\")\n \n Review comment:\n   This seems out of place\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-15T22:47:42.937+0000",
                    "updated": "2019-08-15T22:47:42.937+0000",
                    "started": "2019-08-15T22:47:42.937+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "295828",
                    "issueId": "13249391"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249391/worklog/295829",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5083: ARROW-6161: [C++][Dataset] Implements ParquetFragment\nURL: https://github.com/apache/arrow/pull/5083#discussion_r314523355\n \n \n\n ##########\n File path: cpp/src/arrow/record_batch.h\n ##########\n @@ -178,6 +176,8 @@ class ARROW_EXPORT RecordBatchReader {\n   /// \\return Status\n   virtual Status ReadNext(std::shared_ptr<RecordBatch>* batch) = 0;\n \n+  Status Next(std::shared_ptr<RecordBatch>* batch) override { return ReadNext(batch); }\n \n Review comment:\n   Do you want to open a JIRA about deprecating `ReadNext`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-15T22:47:42.940+0000",
                    "updated": "2019-08-15T22:47:42.940+0000",
                    "started": "2019-08-15T22:47:42.940+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "295829",
                    "issueId": "13249391"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249391/worklog/295830",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5083: ARROW-6161: [C++][Dataset] Implements ParquetFragment\nURL: https://github.com/apache/arrow/pull/5083#discussion_r314525715\n \n \n\n ##########\n File path: cpp/src/arrow/testing/test_data.h.in\n ##########\n @@ -0,0 +1,73 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <string>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/filesystem/filesystem.h\"\n+#include \"arrow/filesystem/localfs.h\"\n+#include \"arrow/testing/gtest_util.h\"\n+\n+namespace arrow {\n+\n+static const char* ARROW_TEST_DATA_PATH = \"@ARROW_TEST_DATA@\";\n+\n+static const char* PARQUET_TEST_DATA_PATH = \"@PARQUET_TEST_DATA@\";\n+\n+std::string ArrowTestDataPath() { return ARROW_TEST_DATA_PATH; }\n+\n+std::string ParquetTestDataPath() { return PARQUET_TEST_DATA_PATH; }\n+\n+// Convenience class allowing to retrieve integration data easily, e.g.\n+//\n+// class MyTestClass : public ::testing::Test, TestDataFixtureMixin {\n+// }\n+//\n+// TEST(MyTestClass, ATest) {\n+//    this->OpenParquetFile(\"data/binary.parquet\")\n+//    // Do something\n+// }\n+class TestDataFixtureMixin : public ::testing::Test {\n+ public:\n+  TestDataFixtureMixin() {\n+    auto root = std::make_shared<fs::LocalFileSystem>();\n+    arrow_fs_ = std::make_shared<fs::SubTreeFileSystem>(ArrowTestDataPath(), root);\n+    parquet_fs_ = std::make_shared<fs::SubTreeFileSystem>(ParquetTestDataPath(), root);\n+  }\n+\n+  std::shared_ptr<io::RandomAccessFile> OpenParquetFile(const std::string& relative_path) {\n+    std::shared_ptr<io::RandomAccessFile> file;\n+    ARROW_EXPECT_OK(ParquetDataFileSystem()->OpenInputFile(relative_path, &file));\n+    return file;\n+  }\n+\n+  std::shared_ptr<io::RandomAccessFile> OpenArrowFile(const std::string& relative_path) {\n+    std::shared_ptr<io::RandomAccessFile> file;\n+    ARROW_EXPECT_OK(ArrowDataFileSystem()->OpenInputFile(relative_path, &file));\n+    return file;\n+  }\n+\n+  fs::FileSystem* ArrowDataFileSystem() const { return arrow_fs_.get(); }\n+  fs::FileSystem* ParquetDataFileSystem() const { return parquet_fs_.get(); }\n+\n+ protected:\n+  std::shared_ptr<fs::FileSystem> arrow_fs_;\n+  std::shared_ptr<fs::FileSystem> parquet_fs_;\n+};\n \n Review comment:\n   It seems like this file would best be found under arrow/dataset\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-15T22:47:43.056+0000",
                    "updated": "2019-08-15T22:47:43.056+0000",
                    "started": "2019-08-15T22:47:43.055+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "295830",
                    "issueId": "13249391"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249391/worklog/295831",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5083: ARROW-6161: [C++][Dataset] Implements ParquetFragment\nURL: https://github.com/apache/arrow/pull/5083#discussion_r314526542\n \n \n\n ##########\n File path: cpp/src/parquet/arrow/writer.cc\n ##########\n @@ -518,6 +518,36 @@ class FileWriterImpl : public FileWriter {\n     return Status::OK();\n   }\n \n+  Status WriteRecordBatch(const ::arrow::RecordBatch& batch) override {\n+    auto schema = batch.schema();\n+    auto size = batch.num_rows();\n+\n+    if (!schema->Equals(*schema_, false)) {\n+      return Status::Invalid(\"RecordBatch schema does not match this writer's. batch:'\",\n+                             schema->ToString(), \"' this:'\", schema_->ToString(), \"'\");\n+    }\n+\n+    RETURN_NOT_OK(NewRowGroup(size));\n \n Review comment:\n   I don't think we should be encouraging this. Parquet row groups are supposed to be large, while RecordBatches in general are going to be smaller. Guidance in Hadoop was to have row groups be approximately ~1GB (or around the size of an HDFS block) where systems like Dremio have relatively small record batches of 64K rows max. So a row group is in general going to be composed from many row groups\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-15T22:47:43.084+0000",
                    "updated": "2019-08-15T22:47:43.084+0000",
                    "started": "2019-08-15T22:47:43.084+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "295831",
                    "issueId": "13249391"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 35400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5b8f89cc[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@66716d57[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6e63f977[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3953a39[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@67c80ef9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@690c2a[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@71b0e511[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5bde5dec[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7cc62fa8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@34866446[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@42e887aa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6b708326[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 35400,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Aug 20 16:14:41 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-08-20T16:14:41.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6161/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-08-07T15:51:56.000+0000",
        "updated": "2019-08-21T23:46:30.000+0000",
        "timeoriginalestimate": null,
        "description": "This is first baby step in supporting datasets. The initial implementation will be minimal and trivial, no parallel, no schema adaptation.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "9h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 35400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Implements dataset::ParquetFile and associated Scan structures",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249391/comment/16911507",
                    "id": "16911507",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 5083\n[https://github.com/apache/arrow/pull/5083]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-08-20T16:14:41.091+0000",
                    "updated": "2019-08-20T16:14:41.091+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z05f6g:",
        "customfield_12314139": null
    }
}