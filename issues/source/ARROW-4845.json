{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13221201",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13221201",
    "key": "ARROW-4845",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344925",
                "id": "12344925",
                "description": "",
                "name": "0.14.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-07-04"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344987",
                "id": "12344987",
                "name": "0.12.1",
                "archived": false,
                "released": true,
                "releaseDate": "2019-02-25"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=romainfrancois",
            "name": "romainfrancois",
            "key": "romainfrancois",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=romainfrancois&avatarId=35092",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=romainfrancois&avatarId=35092",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=romainfrancois&avatarId=35092",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=romainfrancois&avatarId=35092"
            },
            "displayName": "Romain Francois",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jeroenooms",
            "name": "jeroenooms",
            "key": "jeroenooms",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Jeroen",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jeroenooms",
            "name": "jeroenooms",
            "key": "jeroenooms",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Jeroen",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4845/votes",
            "votes": 0,
            "hasVoted": false
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 9000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@47474c4e[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@22d3d38b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@46c89c96[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7abb404f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2446dd0d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1b7dff31[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@19d3fce4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@394a6ea9[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2bf66238[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5f868400[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@59b467c8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@33617571[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jun 12 08:29:36 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-06-12T08:29:35.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4845/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-03-12T18:28:39.000+0000",
        "updated": "2019-06-12T14:50:15.000+0000",
        "timeoriginalestimate": null,
        "description": "I am seeing the warnings below when compiling the R bindings on Windows. Most of these seem easy to fix (comparing int with size_t or int32 with int64).\r\n\r\n{code}\r\narray.cpp: In function 'Rcpp::LogicalVector Array__Mask(const std::shared_ptr<arrow::Array>&)':\r\narray.cpp:102:24: warning: comparison of integer expressions of different signedness: 'size_t' {aka 'long long unsigned int'} and 'int64_t' {aka 'long long int'} [-Wsign-compare]\r\n   for (size_t i = 0; i < array->length(); i++, bitmap_reader.Next()) {\r\n                      ~~^~~~~~~~~~~~~~~~~\r\n/mingw64/bin/g++  -std=gnu++11 -I\"C:/PROGRA~1/R/R-testing/include\" -DNDEBUG -DARROW_STATIC -I\"C:/R/library/Rcpp/include\"        -O2 -Wall  -mtune=generic -c array__to_vector.cpp -o array__to_vector.o\r\narray__to_vector.cpp: In member function 'virtual arrow::Status arrow::r::Converter_Boolean::Ingest_some_nulls(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const':\r\narray__to_vector.cpp:254:28: warning: comparison of integer expressions of different signedness: 'size_t' {aka 'long long unsigned int'} and 'R_xlen_t' {aka 'long long int'} [-Wsign-compare]\r\n       for (size_t i = 0; i < n; i++, data_reader.Next(), null_reader.Next(), ++p_data) {\r\n                          ~~^~~\r\narray__to_vector.cpp:258:28: warning: comparison of integer expressions of different signedness: 'size_t' {aka 'long long unsigned int'} and 'R_xlen_t' {aka 'long long int'} [-Wsign-compare]\r\n       for (size_t i = 0; i < n; i++, data_reader.Next(), ++p_data) {\r\n                          ~~^~~\r\narray__to_vector.cpp: In member function 'virtual arrow::Status arrow::r::Converter_Decimal::Ingest_some_nulls(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const':\r\narray__to_vector.cpp:473:28: warning: comparison of integer expressions of different signedness: 'size_t' {aka 'long long unsigned int'} and 'R_xlen_t' {aka 'long long int'} [-Wsign-compare]\r\n       for (size_t i = 0; i < n; i++, bitmap_reader.Next(), ++p_data) {\r\n                          ~~^~~\r\narray__to_vector.cpp:478:28: warning: comparison of integer expressions of different signedness: 'size_t' {aka 'long long unsigned int'} and 'R_xlen_t' {aka 'long long int'} [-Wsign-compare]\r\n       for (size_t i = 0; i < n; i++, ++p_data) {\r\n                          ~~^~~\r\narray__to_vector.cpp: In member function 'virtual arrow::Status arrow::r::Converter_Int64::Ingest_some_nulls(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const':\r\narray__to_vector.cpp:515:28: warning: comparison of integer expressions of different signedness: 'size_t' {aka 'long long unsigned int'} and 'R_xlen_t' {aka 'long long int'} [-Wsign-compare]\r\n       for (size_t i = 0; i < n; i++, bitmap_reader.Next(), ++p_data) {\r\n                          ~~^~~\r\narray__to_vector.cpp: In instantiation of 'arrow::Status arrow::r::SomeNull_Ingest(SEXP, R_xlen_t, R_xlen_t, const array_value_type*, const std::shared_ptr<arrow::Array>&, Lambda) [with int RTYPE = 14; array_value_type = long long int; Lambda = arrow::r::Converter_Date64::Ingest_some_nulls(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const::<lambda(int64_t)>; SEXP = SEXPREC*; R_xlen_t = long long int]':\r\narray__to_vector.cpp:366:77:   required from here\r\narray__to_vector.cpp:116:26: warning: comparison of integer expressions of different signedness: 'size_t' {aka 'long long unsigned int'} and 'R_xlen_t' {aka 'long long int'} [-Wsign-compare]\r\n     for (size_t i = 0; i < n; i++, bitmap_reader.Next(), ++p_data, ++p_values) {\r\n                        ~~^~~\r\narray__to_vector.cpp: In instantiation of 'arrow::Status arrow::r::SomeNull_Ingest(SEXP, R_xlen_t, R_xlen_t, const array_value_type*, const std::shared_ptr<arrow::Array>&, Lambda) [with int RTYPE = 13; array_value_type = unsigned char; Lambda = arrow::r::Converter_Dictionary::Ingest_some_nulls_Impl(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with Type = arrow::UInt8Type; SEXP = SEXPREC*; R_xlen_t = long long int]::<lambda(value_type)>; SEXP = SEXPREC*; R_xlen_t = long long int]':\r\narray__to_vector.cpp:341:47:   required from 'arrow::Status arrow::r::Converter_Dictionary::Ingest_some_nulls_Impl(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with Type = arrow::UInt8Type; SEXP = SEXPREC*; R_xlen_t = long long int]'\r\narray__to_vector.cpp:313:78:   required from here\r\narray__to_vector.cpp:116:26: warning: comparison of integer expressions of different signedness: 'size_t' {aka 'long long unsigned int'} and 'R_xlen_t' {aka 'long long int'} [-Wsign-compare]\r\narray__to_vector.cpp: In instantiation of 'arrow::Status arrow::r::SomeNull_Ingest(SEXP, R_xlen_t, R_xlen_t, const array_value_type*, const std::shared_ptr<arrow::Array>&, Lambda) [with int RTYPE = 13; array_value_type = signed char; Lambda = arrow::r::Converter_Dictionary::Ingest_some_nulls_Impl(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with Type = arrow::Int8Type; SEXP = SEXPREC*; R_xlen_t = long long int]::<lambda(value_type)>; SEXP = SEXPREC*; R_xlen_t = long long int]':\r\narray__to_vector.cpp:341:47:   required from 'arrow::Status arrow::r::Converter_Dictionary::Ingest_some_nulls_Impl(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with Type = arrow::Int8Type; SEXP = SEXPREC*; R_xlen_t = long long int]'\r\narray__to_vector.cpp:315:77:   required from here\r\narray__to_vector.cpp:116:26: warning: comparison of integer expressions of different signedness: 'size_t' {aka 'long long unsigned int'} and 'R_xlen_t' {aka 'long long int'} [-Wsign-compare]\r\narray__to_vector.cpp: In instantiation of 'arrow::Status arrow::r::SomeNull_Ingest(SEXP, R_xlen_t, R_xlen_t, const array_value_type*, const std::shared_ptr<arrow::Array>&, Lambda) [with int RTYPE = 13; array_value_type = short unsigned int; Lambda = arrow::r::Converter_Dictionary::Ingest_some_nulls_Impl(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with Type = arrow::UInt16Type; SEXP = SEXPREC*; R_xlen_t = long long int]::<lambda(value_type)>; SEXP = SEXPREC*; R_xlen_t = long long int]':\r\narray__to_vector.cpp:341:47:   required from 'arrow::Status arrow::r::Converter_Dictionary::Ingest_some_nulls_Impl(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with Type = arrow::UInt16Type; SEXP = SEXPREC*; R_xlen_t = long long int]'\r\narray__to_vector.cpp:317:79:   required from here\r\narray__to_vector.cpp:116:26: warning: comparison of integer expressions of different signedness: 'size_t' {aka 'long long unsigned int'} and 'R_xlen_t' {aka 'long long int'} [-Wsign-compare]\r\narray__to_vector.cpp: In instantiation of 'arrow::Status arrow::r::SomeNull_Ingest(SEXP, R_xlen_t, R_xlen_t, const array_value_type*, const std::shared_ptr<arrow::Array>&, Lambda) [with int RTYPE = 13; array_value_type = short int; Lambda = arrow::r::Converter_Dictionary::Ingest_some_nulls_Impl(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with Type = arrow::Int16Type; SEXP = SEXPREC*; R_xlen_t = long long int]::<lambda(value_type)>; SEXP = SEXPREC*; R_xlen_t = long long int]':\r\narray__to_vector.cpp:341:47:   required from 'arrow::Status arrow::r::Converter_Dictionary::Ingest_some_nulls_Impl(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with Type = arrow::Int16Type; SEXP = SEXPREC*; R_xlen_t = long long int]'\r\narray__to_vector.cpp:319:78:   required from here\r\narray__to_vector.cpp:116:26: warning: comparison of integer expressions of different signedness: 'size_t' {aka 'long long unsigned int'} and 'R_xlen_t' {aka 'long long int'} [-Wsign-compare]\r\narray__to_vector.cpp: In instantiation of 'arrow::Status arrow::r::SomeNull_Ingest(SEXP, R_xlen_t, R_xlen_t, const array_value_type*, const std::shared_ptr<arrow::Array>&, Lambda) [with int RTYPE = 13; array_value_type = int; Lambda = arrow::r::Converter_Dictionary::Ingest_some_nulls_Impl(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with Type = arrow::Int32Type; SEXP = SEXPREC*; R_xlen_t = long long int]::<lambda(value_type)>; SEXP = SEXPREC*; R_xlen_t = long long int]':\r\narray__to_vector.cpp:341:47:   required from 'arrow::Status arrow::r::Converter_Dictionary::Ingest_some_nulls_Impl(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with Type = arrow::Int32Type; SEXP = SEXPREC*; R_xlen_t = long long int]'\r\narray__to_vector.cpp:321:78:   required from here\r\narray__to_vector.cpp:116:26: warning: comparison of integer expressions of different signedness: 'size_t' {aka 'long long unsigned int'} and 'R_xlen_t' {aka 'long long int'} [-Wsign-compare]\r\narray__to_vector.cpp: In instantiation of 'arrow::Status arrow::r::SomeNull_Ingest(SEXP, R_xlen_t, R_xlen_t, const array_value_type*, const std::shared_ptr<arrow::Array>&, Lambda) [with int RTYPE = 14; array_value_type = long long int; Lambda = arrow::r::Converter_Time<value_type>::Ingest_some_nulls(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with value_type = long long int; SEXP = SEXPREC*; R_xlen_t = long long int]::<lambda(long long int)>; SEXP = SEXPREC*; R_xlen_t = long long int]':\r\narray__to_vector.cpp:421:48:   required from 'arrow::Status arrow::r::Converter_Time<value_type>::Ingest_some_nulls(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with value_type = long long int; SEXP = SEXPREC*; R_xlen_t = long long int]'\r\narray__to_vector.cpp:415:10:   required from here\r\narray__to_vector.cpp:116:26: warning: comparison of integer expressions of different signedness: 'size_t' {aka 'long long unsigned int'} and 'R_xlen_t' {aka 'long long int'} [-Wsign-compare]\r\narray__to_vector.cpp: In instantiation of 'arrow::Status arrow::r::SomeNull_Ingest(SEXP, R_xlen_t, R_xlen_t, const array_value_type*, const std::shared_ptr<arrow::Array>&, Lambda) [with int RTYPE = 14; array_value_type = int; Lambda = arrow::r::Converter_Time<value_type>::Ingest_some_nulls(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with value_type = int; SEXP = SEXPREC*; R_xlen_t = long long int]::<lambda(int)>; SEXP = SEXPREC*; R_xlen_t = long long int]':\r\narray__to_vector.cpp:421:48:   required from 'arrow::Status arrow::r::Converter_Time<value_type>::Ingest_some_nulls(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with value_type = int; SEXP = SEXPREC*; R_xlen_t = long long int]'\r\narray__to_vector.cpp:415:10:   required from here\r\narray__to_vector.cpp:116:26: warning: comparison of integer expressions of different signedness: 'size_t' {aka 'long long unsigned int'} and 'R_xlen_t' {aka 'long long int'} [-Wsign-compare]\r\narray__to_vector.cpp: In instantiation of 'arrow::Status arrow::r::SomeNull_Ingest(SEXP, R_xlen_t, R_xlen_t, const array_value_type*, const std::shared_ptr<arrow::Array>&, Lambda) [with int RTYPE = 14; array_value_type = float; Lambda = arrow::r::Converter_Promotion<RTYPE, Type>::Ingest_some_nulls(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with int RTYPE = 14; Type = arrow::FloatType; SEXP = SEXPREC*; R_xlen_t = long long int]::<lambda(arrow::r::Converter_Promotion<14, arrow::FloatType>::value_type)>; SEXP = SEXPREC*; R_xlen_t = long long int]':\r\narray__to_vector.cpp:389:46:   required from 'arrow::Status arrow::r::Converter_Promotion<RTYPE, Type>::Ingest_some_nulls(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with int RTYPE = 14; Type = arrow::FloatType; SEXP = SEXPREC*; R_xlen_t = long long int]'\r\narray__to_vector.cpp:386:10:   required from here\r\narray__to_vector.cpp:116:26: warning: comparison of integer expressions of different signedness: 'size_t' {aka 'long long unsigned int'} and 'R_xlen_t' {aka 'long long int'} [-Wsign-compare]\r\narray__to_vector.cpp: In instantiation of 'arrow::Status arrow::r::SomeNull_Ingest(SEXP, R_xlen_t, R_xlen_t, const array_value_type*, const std::shared_ptr<arrow::Array>&, Lambda) [with int RTYPE = 14; array_value_type = short unsigned int; Lambda = arrow::r::Converter_Promotion<RTYPE, Type>::Ingest_some_nulls(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with int RTYPE = 14; Type = arrow::HalfFloatType; SEXP = SEXPREC*; R_xlen_t = long long int]::<lambda(arrow::r::Converter_Promotion<14, arrow::HalfFloatType>::value_type)>; SEXP = SEXPREC*; R_xlen_t = long long int]':\r\narray__to_vector.cpp:389:46:   required from 'arrow::Status arrow::r::Converter_Promotion<RTYPE, Type>::Ingest_some_nulls(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with int RTYPE = 14; Type = arrow::HalfFloatType; SEXP = SEXPREC*; R_xlen_t = long long int]'\r\narray__to_vector.cpp:386:10:   required from here\r\narray__to_vector.cpp:116:26: warning: comparison of integer expressions of different signedness: 'size_t' {aka 'long long unsigned int'} and 'R_xlen_t' {aka 'long long int'} [-Wsign-compare]\r\narray__to_vector.cpp: In instantiation of 'arrow::Status arrow::r::SomeNull_Ingest(SEXP, R_xlen_t, R_xlen_t, const array_value_type*, const std::shared_ptr<arrow::Array>&, Lambda) [with int RTYPE = 14; array_value_type = unsigned int; Lambda = arrow::r::Converter_Promotion<RTYPE, Type>::Ingest_some_nulls(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with int RTYPE = 14; Type = arrow::UInt32Type; SEXP = SEXPREC*; R_xlen_t = long long int]::<lambda(arrow::r::Converter_Promotion<14, arrow::UInt32Type>::value_type)>; SEXP = SEXPREC*; R_xlen_t = long long int]':\r\narray__to_vector.cpp:389:46:   required from 'arrow::Status arrow::r::Converter_Promotion<RTYPE, Type>::Ingest_some_nulls(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with int RTYPE = 14; Type = arrow::UInt32Type; SEXP = SEXPREC*; R_xlen_t = long long int]'\r\narray__to_vector.cpp:386:10:   required from here\r\narray__to_vector.cpp:116:26: warning: comparison of integer expressions of different signedness: 'size_t' {aka 'long long unsigned int'} and 'R_xlen_t' {aka 'long long int'} [-Wsign-compare]\r\narray__to_vector.cpp: In instantiation of 'arrow::Status arrow::r::SomeNull_Ingest(SEXP, R_xlen_t, R_xlen_t, const array_value_type*, const std::shared_ptr<arrow::Array>&, Lambda) [with int RTYPE = 13; array_value_type = short unsigned int; Lambda = arrow::r::Converter_Promotion<RTYPE, Type>::Ingest_some_nulls(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with int RTYPE = 13; Type = arrow::UInt16Type; SEXP = SEXPREC*; R_xlen_t = long long int]::<lambda(arrow::r::Converter_Promotion<13, arrow::UInt16Type>::value_type)>; SEXP = SEXPREC*; R_xlen_t = long long int]':\r\narray__to_vector.cpp:389:46:   required from 'arrow::Status arrow::r::Converter_Promotion<RTYPE, Type>::Ingest_some_nulls(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with int RTYPE = 13; Type = arrow::UInt16Type; SEXP = SEXPREC*; R_xlen_t = long long int]'\r\narray__to_vector.cpp:386:10:   required from here\r\narray__to_vector.cpp:116:26: warning: comparison of integer expressions of different signedness: 'size_t' {aka 'long long unsigned int'} and 'R_xlen_t' {aka 'long long int'} [-Wsign-compare]\r\narray__to_vector.cpp: In instantiation of 'arrow::Status arrow::r::SomeNull_Ingest(SEXP, R_xlen_t, R_xlen_t, const array_value_type*, const std::shared_ptr<arrow::Array>&, Lambda) [with int RTYPE = 13; array_value_type = short int; Lambda = arrow::r::Converter_Promotion<RTYPE, Type>::Ingest_some_nulls(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with int RTYPE = 13; Type = arrow::Int16Type; SEXP = SEXPREC*; R_xlen_t = long long int]::<lambda(arrow::r::Converter_Promotion<13, arrow::Int16Type>::value_type)>; SEXP = SEXPREC*; R_xlen_t = long long int]':\r\narray__to_vector.cpp:389:46:   required from 'arrow::Status arrow::r::Converter_Promotion<RTYPE, Type>::Ingest_some_nulls(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with int RTYPE = 13; Type = arrow::Int16Type; SEXP = SEXPREC*; R_xlen_t = long long int]'\r\narray__to_vector.cpp:386:10:   required from here\r\narray__to_vector.cpp:116:26: warning: comparison of integer expressions of different signedness: 'size_t' {aka 'long long unsigned int'} and 'R_xlen_t' {aka 'long long int'} [-Wsign-compare]\r\narray__to_vector.cpp: In instantiation of 'arrow::Status arrow::r::SomeNull_Ingest(SEXP, R_xlen_t, R_xlen_t, const array_value_type*, const std::shared_ptr<arrow::Array>&, Lambda) [with int RTYPE = 13; array_value_type = unsigned char; Lambda = arrow::r::Converter_Promotion<RTYPE, Type>::Ingest_some_nulls(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with int RTYPE = 13; Type = arrow::UInt8Type; SEXP = SEXPREC*; R_xlen_t = long long int]::<lambda(arrow::r::Converter_Promotion<13, arrow::UInt8Type>::value_type)>; SEXP = SEXPREC*; R_xlen_t = long long int]':\r\narray__to_vector.cpp:389:46:   required from 'arrow::Status arrow::r::Converter_Promotion<RTYPE, Type>::Ingest_some_nulls(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with int RTYPE = 13; Type = arrow::UInt8Type; SEXP = SEXPREC*; R_xlen_t = long long int]'\r\narray__to_vector.cpp:386:10:   required from here\r\narray__to_vector.cpp:116:26: warning: comparison of integer expressions of different signedness: 'size_t' {aka 'long long unsigned int'} and 'R_xlen_t' {aka 'long long int'} [-Wsign-compare]\r\narray__to_vector.cpp: In instantiation of 'arrow::Status arrow::r::SomeNull_Ingest(SEXP, R_xlen_t, R_xlen_t, const array_value_type*, const std::shared_ptr<arrow::Array>&, Lambda) [with int RTYPE = 14; array_value_type = double; Lambda = arrow::r::Converter_SimpleArray<RTYPE>::Ingest_some_nulls(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with int RTYPE = 14; SEXP = SEXPREC*; R_xlen_t = long long int]::<lambda(arrow::r::Converter_SimpleArray<14>::value_type)>; SEXP = SEXPREC*; R_xlen_t = long long int]':\r\narray__to_vector.cpp:152:46:   required from 'arrow::Status arrow::r::Converter_SimpleArray<RTYPE>::Ingest_some_nulls(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with int RTYPE = 14; SEXP = SEXPREC*; R_xlen_t = long long int]'\r\narray__to_vector.cpp:148:10:   required from here\r\narray__to_vector.cpp:116:26: warning: comparison of integer expressions of different signedness: 'size_t' {aka 'long long unsigned int'} and 'R_xlen_t' {aka 'long long int'} [-Wsign-compare]\r\narray__to_vector.cpp: In instantiation of 'arrow::Status arrow::r::SomeNull_Ingest(SEXP, R_xlen_t, R_xlen_t, const array_value_type*, const std::shared_ptr<arrow::Array>&, Lambda) [with int RTYPE = 24; array_value_type = unsigned char; Lambda = arrow::r::Converter_SimpleArray<RTYPE>::Ingest_some_nulls(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with int RTYPE = 24; SEXP = SEXPREC*; R_xlen_t = long long int]::<lambda(arrow::r::Converter_SimpleArray<24>::value_type)>; SEXP = SEXPREC*; R_xlen_t = long long int]':\r\narray__to_vector.cpp:152:46:   required from 'arrow::Status arrow::r::Converter_SimpleArray<RTYPE>::Ingest_some_nulls(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with int RTYPE = 24; SEXP = SEXPREC*; R_xlen_t = long long int]'\r\narray__to_vector.cpp:148:10:   required from here\r\narray__to_vector.cpp:116:26: warning: comparison of integer expressions of different signedness: 'size_t' {aka 'long long unsigned int'} and 'R_xlen_t' {aka 'long long int'} [-Wsign-compare]\r\narray__to_vector.cpp: In instantiation of 'arrow::Status arrow::r::SomeNull_Ingest(SEXP, R_xlen_t, R_xlen_t, const array_value_type*, const std::shared_ptr<arrow::Array>&, Lambda) [with int RTYPE = 13; array_value_type = int; Lambda = arrow::r::Converter_SimpleArray<RTYPE>::Ingest_some_nulls(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with int RTYPE = 13; SEXP = SEXPREC*; R_xlen_t = long long int]::<lambda(arrow::r::Converter_SimpleArray<13>::value_type)>; SEXP = SEXPREC*; R_xlen_t = long long int]':\r\narray__to_vector.cpp:152:46:   required from 'arrow::Status arrow::r::Converter_SimpleArray<RTYPE>::Ingest_some_nulls(SEXP, const std::shared_ptr<arrow::Array>&, R_xlen_t, R_xlen_t) const [with int RTYPE = 13; SEXP = SEXPREC*; R_xlen_t = long long int]'\r\narray__to_vector.cpp:148:10:   required from here\r\narray__to_vector.cpp:116:26: warning: comparison of integer expressions of different signedness: 'size_t' {aka 'long long unsigned int'} and 'R_xlen_t' {aka 'long long int'} [-Wsign-compare]\r\narray__to_vector.cpp: In member function 'int arrow::r::Converter_Time<value_type>::TimeUnit_multiplier(const std::shared_ptr<arrow::Array>&) const [with value_type = long long int]':\r\narray__to_vector.cpp:437:3: warning: control reaches end of non-void function [-Wreturn-type]\r\n   }\r\n   ^\r\narray__to_vector.cpp: In member function 'int arrow::r::Converter_Time<value_type>::TimeUnit_multiplier(const std::shared_ptr<arrow::Array>&) const [with value_type = int]':\r\narray__to_vector.cpp:437:3: warning: control reaches end of non-void function [-Wreturn-type]\r\n/mingw64/bin/g++  -std=gnu++11 -I\"C:/PROGRA~1/R/R-testing/include\" -DNDEBUG -DARROW_STATIC -I\"C:/R/library/Rcpp/include\"        -O2 -Wall  -mtune=generic -c array_from_vector.cpp -o array_from_vector.o\r\narray_from_vector.cpp: In instantiation of 'arrow::Status arrow::internal::int_cast(T, Target*) [with T = int; Target = long long unsigned int]':\r\narray_from_vector.cpp:301:9:   required from 'static arrow::Status arrow::r::Unbox<Type, typename std::enable_if<std::is_base_of<arrow::Integer, T>::value>::type>::IngestRange(arrow::r::Unbox<Type, typename std::enable_if<std::is_base_of<arrow::Integer, T>::value>::type>::BuilderType*, T*, R_xlen_t, T) [with T = int; Type = arrow::UInt64Type; arrow::r::Unbox<Type, typename std::enable_if<std::is_base_of<arrow::Integer, T>::value>::type>::BuilderType = arrow::NumericBuilder<arrow::UInt64Type>; R_xlen_t = long long int]'\r\narray_from_vector.cpp:277:32:   required from 'static arrow::Status arrow::r::Unbox<Type, typename std::enable_if<std::is_base_of<arrow::Integer, T>::value>::type>::Ingest(arrow::r::Unbox<Type, typename std::enable_if<std::is_base_of<arrow::Integer, T>::value>::type>::BuilderType*, SEXP) [with Type = arrow::UInt64Type; arrow::r::Unbox<Type, typename std::enable_if<std::is_base_of<arrow::Integer, T>::value>::type>::BuilderType = arrow::NumericBuilder<arrow::UInt64Type>; SEXP = SEXPREC*]'\r\narray_from_vector.cpp:542:64:   required from 'arrow::Status arrow::r::TypedVectorConverter<Type, Derived>::Ingest(SEXP) [with Type = arrow::UInt64Type; Derived = arrow::r::NumericVectorConverter<arrow::UInt64Type>; SEXP = SEXPREC*]'\r\narray_from_vector.cpp:542:10:   required from here\r\narray_from_vector.cpp:187:9: warning: comparison of integer expressions of different signedness: 'int' and 'long long unsigned int' [-Wsign-compare]\r\n   if (x < std::numeric_limits<Target>::min() || x > std::numeric_limits<Target>::max()) {\r\n       ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\narray_from_vector.cpp:187:51: warning: comparison of integer expressions of different signedness: 'int' and 'long long unsigned int' [-Wsign-compare]\r\n   if (x < std::numeric_limits<Target>::min() || x > std::numeric_limits<Target>::max()) {\r\n                                                 ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\narray_from_vector.cpp: In instantiation of 'arrow::Status arrow::internal::int_cast(T, Target*) [with T = long long int; Target = long long unsigned int]':\r\narray_from_vector.cpp:301:9:   required from 'static arrow::Status arrow::r::Unbox<Type, typename std::enable_if<std::is_base_of<arrow::Integer, T>::value>::type>::IngestRange(arrow::r::Unbox<Type, typename std::enable_if<std::is_base_of<arrow::Integer, T>::value>::type>::BuilderType*, T*, R_xlen_t, T) [with T = long long int; Type = arrow::UInt64Type; arrow::r::Unbox<Type, typename std::enable_if<std::is_base_of<arrow::Integer, T>::value>::type>::BuilderType = arrow::NumericBuilder<arrow::UInt64Type>; R_xlen_t = long long int]'\r\narray_from_vector.cpp:280:38:   required from 'static arrow::Status arrow::r::Unbox<Type, typename std::enable_if<std::is_base_of<arrow::Integer, T>::value>::type>::Ingest(arrow::r::Unbox<Type, typename std::enable_if<std::is_base_of<arrow::Integer, T>::value>::type>::BuilderType*, SEXP) [with Type = arrow::UInt64Type; arrow::r::Unbox<Type, typename std::enable_if<std::is_base_of<arrow::Integer, T>::value>::type>::BuilderType = arrow::NumericBuilder<arrow::UInt64Type>; SEXP = SEXPREC*]'\r\narray_from_vector.cpp:542:64:   required from 'arrow::Status arrow::r::TypedVectorConverter<Type, Derived>::Ingest(SEXP) [with Type = arrow::UInt64Type; Derived = arrow::r::NumericVectorConverter<arrow::UInt64Type>; SEXP = SEXPREC*]'\r\narray_from_vector.cpp:542:10:   required from here\r\narray_from_vector.cpp:187:9: warning: comparison of integer expressions of different signedness: 'long long int' and 'long long unsigned int' [-Wsign-compare]\r\n   if (x < std::numeric_limits<Target>::min() || x > std::numeric_limits<Target>::max()) {\r\n       ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\narray_from_vector.cpp:187:51: warning: comparison of integer expressions of different signedness: 'long long int' and 'long long unsigned int' [-Wsign-compare]\r\n   if (x < std::numeric_limits<Target>::min() || x > std::numeric_limits<Target>::max()) {\r\n                                                 ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\narray_from_vector.cpp: In instantiation of 'arrow::Status arrow::internal::int_cast(T, Target*) [with T = int; Target = unsigned int]':\r\narray_from_vector.cpp:301:9:   required from 'static arrow::Status arrow::r::Unbox<Type, typename std::enable_if<std::is_base_of<arrow::Integer, T>::value>::type>::IngestRange(arrow::r::Unbox<Type, typename std::enable_if<std::is_base_of<arrow::Integer, T>::value>::type>::BuilderType*, T*, R_xlen_t, T) [with T = int; Type = arrow::UInt32Type; arrow::r::Unbox<Type, typename std::enable_if<std::is_base_of<arrow::Integer, T>::value>::type>::BuilderType = arrow::NumericBuilder<arrow::UInt32Type>; R_xlen_t = long long int]'\r\narray_from_vector.cpp:277:32:   required from 'static arrow::Status arrow::r::Unbox<Type, typename std::enable_if<std::is_base_of<arrow::Integer, T>::value>::type>::Ingest(arrow::r::Unbox<Type, typename std::enable_if<std::is_base_of<arrow::Integer, T>::value>::type>::BuilderType*, SEXP) [with Type = arrow::UInt32Type; arrow::r::Unbox<Type, typename std::enable_if<std::is_base_of<arrow::Integer, T>::value>::type>::BuilderType = arrow::NumericBuilder<arrow::UInt32Type>; SEXP = SEXPREC*]'\r\narray_from_vector.cpp:542:64:   required from 'arrow::Status arrow::r::TypedVectorConverter<Type, Derived>::Ingest(SEXP) [with Type = arrow::UInt32Type; Derived = arrow::r::NumericVectorConverter<arrow::UInt32Type>; SEXP = SEXPREC*]'\r\narray_from_vector.cpp:542:10:   required from here\r\narray_from_vector.cpp:187:9: warning: comparison of integer expressions of different signedness: 'int' and 'unsigned int' [-Wsign-compare]\r\n   if (x < std::numeric_limits<Target>::min() || x > std::numeric_limits<Target>::max()) {\r\n       ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\narray_from_vector.cpp:187:51: warning: comparison of integer expressions of different signedness: 'int' and 'unsigned int' [-Wsign-compare]\r\n   if (x < std::numeric_limits<Target>::min() || x > std::numeric_limits<Target>::max()) {\r\n                                                 ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\narray_from_vector.cpp: In function 'int64_t arrow::r::get_time_multiplier(arrow::TimeUnit::type)':\r\narray_from_vector.cpp:569:1: warning: control reaches end of non-void function [-Wreturn-type]\r\n }\r\n ^\r\narray_from_vector.cpp: In member function 'arrow::Status arrow::r::TypedVectorConverter<Type, Derived>::Ingest(SEXP) [with Type = arrow::DoubleType; Derived = arrow::r::NumericVectorConverter<arrow::DoubleType>]':\r\narray_from_vector.cpp:333:16: warning: 'value' may be used uninitialized in this function [-Wmaybe-uninitialized]\r\n         double value;\r\n                ^~~~~\r\narray_from_vector.cpp: In member function 'arrow::Status arrow::r::TypedVectorConverter<Type, Derived>::Ingest(SEXP) [with Type = arrow::FloatType; Derived = arrow::r::NumericVectorConverter<arrow::FloatType>]':\r\narray_from_vector.cpp:378:15: warning: 'value' may be used uninitialized in this function [-Wmaybe-uninitialized]\r\n         float value;\r\n               ^~~~~\r\narray_from_vector.cpp:378:15: warning: 'value' may be used uninitialized in this function [-Wmaybe-uninitialized]\r\narray_from_vector.cpp: In member function 'arrow::Status arrow::r::TypedVectorConverter<Type, Derived>::Ingest(SEXP) [with Type = arrow::Int8Type; Derived = arrow::r::NumericVectorConverter<arrow::Int8Type>]':\r\narray_from_vector.cpp:300:15: warning: 'value' may be used uninitialized in this function [-Wmaybe-uninitialized]\r\n         CType value;\r\n               ^~~~~\r\narray_from_vector.cpp:300:15: warning: 'value' may be used uninitialized in this function [-Wmaybe-uninitialized]\r\narray_from_vector.cpp: In member function 'arrow::Status arrow::r::TypedVectorConverter<Type, Derived>::Ingest(SEXP) [with Type = arrow::Int32Type; Derived = arrow::r::NumericVectorConverter<arrow::Int32Type>]':\r\narray_from_vector.cpp:300:15: warning: 'value' may be used uninitialized in this function [-Wmaybe-uninitialized]\r\narray_from_vector.cpp: In member function 'arrow::Status arrow::r::TypedVectorConverter<Type, Derived>::Ingest(SEXP) [with Type = arrow::Int16Type; Derived = arrow::r::NumericVectorConverter<arrow::Int16Type>]':\r\narray_from_vector.cpp:300:15: warning: 'value' may be used uninitialized in this function [-Wmaybe-uninitialized]\r\narray_from_vector.cpp:300:15: warning: 'value' may be used uninitialized in this function [-Wmaybe-uninitialized]\r\n{code}",
        "customfield_10010": null,
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Compiler warnings on Windows MingW64",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "customfield_12311820": "0|z00mjs:",
        "customfield_12314139": null
    }
}