{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13400766",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400766",
    "key": "ARROW-13982",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/2",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/critical.svg",
            "name": "Critical",
            "id": "2"
        },
        "labels": [
            "pull-request-available",
            "query-engine"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "1.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=framlog",
            "name": "framlog",
            "key": "framlog",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Huxley Hu",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=framlog",
            "name": "framlog",
            "key": "framlog",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Huxley Hu",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13982/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 18,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400766/worklog/650082",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm opened a new pull request #11145:\nURL: https://github.com/apache/arrow/pull/11145\n\n\n   Since reordering uses metadata on the batches, we have to emit at least one batch for every fragment, else we'll wait forever for a batch that never arrives. This adds a utility generator to emit an empty batch if the underlying generator is empty (that way we don't need to fix each file format individually).\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-13T15:38:29.181+0000",
                    "updated": "2021-09-13T15:38:29.181+0000",
                    "started": "2021-09-13T15:38:29.181+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "650082",
                    "issueId": "13400766"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400766/worklog/650083",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11145:\nURL: https://github.com/apache/arrow/pull/11145#issuecomment-918319059\n\n\n   https://issues.apache.org/jira/browse/ARROW-13982\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-13T15:38:44.171+0000",
                    "updated": "2021-09-13T15:38:44.171+0000",
                    "started": "2021-09-13T15:38:44.170+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "650083",
                    "issueId": "13400766"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400766/worklog/650084",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11145:\nURL: https://github.com/apache/arrow/pull/11145#issuecomment-918319088\n\n\n   This also fixes the repro I attached to JIRA.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-13T15:38:47.532+0000",
                    "updated": "2021-09-13T15:38:47.532+0000",
                    "started": "2021-09-13T15:38:47.532+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "650084",
                    "issueId": "13400766"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400766/worklog/650097",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on pull request #11145:\nURL: https://github.com/apache/arrow/pull/11145#issuecomment-918338980\n\n\n   In \"normal\" behavior, how does reordering operations knows that all batches for a fragment have been emitted?\r\n   \r\n   So basically this empty batch for filtered out fragments represents a _skip-fragment_ or _end-of-fragment-batches_ marker? Have we defined an end-of-stream marker in any other operations that process batches/fragments?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-13T16:00:55.755+0000",
                    "updated": "2021-09-13T16:00:55.755+0000",
                    "started": "2021-09-13T16:00:55.755+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "650097",
                    "issueId": "13400766"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400766/worklog/650103",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11145:\nURL: https://github.com/apache/arrow/pull/11145#issuecomment-918347177\n\n\n   @edponce ScanBatchesUnorderedAsync tags batches with a sequence number, fragment, and whether this is the last batch for the fragment. There is no other end of stream marker. Everything uses this. The problem, and we've gone over this before, is that async generators have an end of stream marker, but when merging multiple generators, you need a inner end of stream marker. We could separate it from the batches, maybe Weston has thoughts. I don't think the occasional empty batch is/should be a big deal.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-13T16:08:36.594+0000",
                    "updated": "2021-09-13T16:08:36.594+0000",
                    "started": "2021-09-13T16:08:36.593+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "650103",
                    "issueId": "13400766"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400766/worklog/650257",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #11145:\nURL: https://github.com/apache/arrow/pull/11145#discussion_r707772288\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1611,4 +1611,48 @@ AsyncGenerator<T> MakeCancellable(AsyncGenerator<T> source, StopToken stop_token\n   return CancellableGenerator<T>{std::move(source), std::move(stop_token)};\n }\n \n+template <typename T>\n+class OrGenerator {\n\nReview comment:\n       RxJS calls this [defaultIfEmpty](https://www.learnrxjs.io/learn-rxjs/operators/conditional/defaultifempty) which is a bit more explicit.  My first thought when I see OrGenerator would be something like... `AsyncGenerator<X>(AsyncGenerator<optional<X>>, X default)`\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-13T22:58:50.857+0000",
                    "updated": "2021-09-13T22:58:50.857+0000",
                    "started": "2021-09-13T22:58:50.856+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "650257",
                    "issueId": "13400766"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400766/worklog/650258",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11145:\nURL: https://github.com/apache/arrow/pull/11145#discussion_r707776161\n\n\n\n##########\nFile path: cpp/src/arrow/util/async_generator.h\n##########\n@@ -1611,4 +1611,48 @@ AsyncGenerator<T> MakeCancellable(AsyncGenerator<T> source, StopToken stop_token\n   return CancellableGenerator<T>{std::move(source), std::move(stop_token)};\n }\n \n+template <typename T>\n+class OrGenerator {\n\nReview comment:\n       Ah, I was trying to come up with a good name. I'll change to something along those lines. (I was looking at Rust's Option::or which is a little too terse in this context.)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-13T23:00:05.581+0000",
                    "updated": "2021-09-13T23:00:05.581+0000",
                    "started": "2021-09-13T23:00:05.581+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "650258",
                    "issueId": "13400766"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400766/worklog/650594",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11145:\nURL: https://github.com/apache/arrow/pull/11145#issuecomment-919198254\n\n\n   I've updated the name of the generator. It looks like the MinGW C++ tests are failing across multiple branches with some unrelated error now, but other things pass.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-14T14:20:08.042+0000",
                    "updated": "2021-09-14T14:20:08.042+0000",
                    "started": "2021-09-14T14:20:08.041+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "650594",
                    "issueId": "13400766"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400766/worklog/650595",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11145:\nURL: https://github.com/apache/arrow/pull/11145#issuecomment-919199225\n\n\n   Oh, actually, s390x fails with our favorite thread indexing error again:\r\n   \r\n   <details>\r\n   \r\n   ```\r\n   /arrow/cpp/src/arrow/compute/exec/aggregate_node.cc:80:  Check failed: (thread_index) < (Capacity()) thread index 4 is out of range [0, 4)\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::util::CerrLog::PrintBackTrace()+0x3e)[0x3ff8fa0364e]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::util::CerrLog::~CerrLog()+0x7c)[0x3ff8fa03584]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::util::CerrLog::~CerrLog()+0x22)[0x3ff8fa035ba]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::util::ArrowLog::~ArrowLog()+0x6e)[0x3ff8f9d83d6]\r\n   \r\n   /usr/local/lib/libarrow.so.600(+0x212b582)[0x3ff8f6ab582]\r\n   \r\n   /usr/local/lib/libarrow.so.600(+0x212b320)[0x3ff8f6ab320]\r\n   \r\n   /usr/local/lib/libarrow.so.600(+0x212d3e6)[0x3ff8f6ad3e6]\r\n   \r\n   /usr/local/lib/libarrow.so.600(+0x2149334)[0x3ff8f6c9334]\r\n   \r\n   /usr/local/lib/libarrow.so.600(+0x214a44c)[0x3ff8f6ca44c]\r\n   \r\n   /usr/local/lib/libarrow.so.600(+0x21656b0)[0x3ff8f6e56b0]\r\n   \r\n   /usr/local/lib/libarrow.so.600(+0x21652f2)[0x3ff8f6e52f2]\r\n   \r\n   /usr/local/lib/libarrow.so.600(+0x2164e6e)[0x3ff8f6e4e6e]\r\n   \r\n   /usr/local/lib/libarrow.so.600(+0x2164b06)[0x3ff8f6e4b06]\r\n   \r\n   /usr/local/lib/libarrow.so.600(+0x2163d32)[0x3ff8f6e3d32]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::internal::FnOnce<void (arrow::FutureImpl const&)>::operator()(arrow::FutureImpl const&) &&+0x92)[0x3ff8fa04d7a]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::RunOrScheduleCallback(std::shared_ptr<arrow::FutureImpl> const&, arrow::FutureImpl::CallbackRecord&&, bool)+0x276)[0x3ff8f9fc726]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::DoMarkFinishedOrFailed(arrow::FutureState)+0x2aa)[0x3ff8f9fcb22]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::DoMarkFinished()+0x26)[0x3ff8f9fbcee]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::FutureImpl::MarkFinished()+0x30)[0x3ff8f9ccec8]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::Future<nonstd::optional_lite::optional<arrow::compute::ExecBatch> >::DoMarkFinished(arrow::Result<nonstd::optional_lite::optional<arrow::compute::ExecBatch> >)+0xce)[0x3ff916142ce]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::Future<nonstd::optional_lite::optional<arrow::compute::ExecBatch> >::MarkFinished(arrow::Result<nonstd::optional_lite::optional<arrow::compute::ExecBatch> >)+0x66)[0x3ff9160e6ee]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::MappingGenerator<arrow::dataset::EnumeratedRecordBatch, nonstd::optional_lite::optional<arrow::compute::ExecBatch> >::MappedCallback::operator()(arrow::Result<nonstd::optional_lite::optional<arrow::compute::ExecBatch> > const&)+0x146)[0x3ff9162420e]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::Future<nonstd::optional_lite::optional<arrow::compute::ExecBatch> >::WrapResultyOnComplete::Callback<arrow::MappingGenerator<arrow::dataset::EnumeratedRecordBatch, nonstd::optional_lite::optional<arrow::compute::ExecBatch> >::MappedCallback>::operator()(arrow::FutureImpl const&) &&+0x4e)[0x3ff91623166]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::internal::FnOnce<void (arrow::FutureImpl const&)>::FnImpl<arrow::Future<nonstd::optional_lite::optional<arrow::compute::ExecBatch> >::WrapResultyOnComplete::Callback<arrow::MappingGenerator<arrow::dataset::EnumeratedRecordBatch, nonstd::optional_lite::optional<arrow::compute::ExecBatch> >::MappedCallback> >::invoke(arrow::FutureImpl const&)+0x52)[0x3ff91622cd2]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::internal::FnOnce<void (arrow::FutureImpl const&)>::operator()(arrow::FutureImpl const&) &&+0x92)[0x3ff8fa04d7a]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::RunOrScheduleCallback(std::shared_ptr<arrow::FutureImpl> const&, arrow::FutureImpl::CallbackRecord&&, bool)+0x276)[0x3ff8f9fc726]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::AddCallback(arrow::internal::FnOnce<void (arrow::FutureImpl const&)>, arrow::CallbackOptions)+0x12e)[0x3ff8f9fc016]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::FutureImpl::AddCallback(arrow::internal::FnOnce<void (arrow::FutureImpl const&)>, arrow::CallbackOptions)+0x9a)[0x3ff8f9ccfb2]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(void arrow::Future<nonstd::optional_lite::optional<arrow::compute::ExecBatch> >::AddCallback<arrow::MappingGenerator<arrow::dataset::EnumeratedRecordBatch, nonstd::optional_lite::optional<arrow::compute::ExecBatch> >::MappedCallback, arrow::Future<nonstd::optional_lite::optional<arrow::compute::ExecBatch> >::WrapResultyOnComplete::Callback<arrow::MappingGenerator<arrow::dataset::EnumeratedRecordBatch, nonstd::optional_lite::optional<arrow::compute::ExecBatch> >::MappedCallback> >(arrow::MappingGenerator<arrow::dataset::EnumeratedRecordBatch, nonstd::optional_lite::optional<arrow::compute::ExecBatch> >::MappedCallback, arrow::CallbackOptions) const+0xb8)[0x3ff9160ebf0]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::MappingGenerator<arrow::dataset::EnumeratedRecordBatch, nonstd::optional_lite::optional<arrow::compute::ExecBatch> >::Callback::operator()(arrow::Result<arrow::dataset::EnumeratedRecordBatch> const&)+0x442)[0x3ff916074e2]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::Future<arrow::dataset::EnumeratedRecordBatch>::WrapResultyOnComplete::Callback<arrow::MappingGenerator<arrow::dataset::EnumeratedRecordBatch, nonstd::optional_lite::optional<arrow::compute::ExecBatch> >::Callback>::operator()(arrow::FutureImpl const&) &&+0x4e)[0x3ff9160371e]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::internal::FnOnce<void (arrow::FutureImpl const&)>::FnImpl<arrow::Future<arrow::dataset::EnumeratedRecordBatch>::WrapResultyOnComplete::Callback<arrow::MappingGenerator<arrow::dataset::EnumeratedRecordBatch, nonstd::optional_lite::optional<arrow::compute::ExecBatch> >::Callback> >::invoke(arrow::FutureImpl const&)+0x52)[0x3ff915fd58a]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::internal::FnOnce<void (arrow::FutureImpl const&)>::operator()(arrow::FutureImpl const&) &&+0x92)[0x3ff8fa04d7a]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::RunOrScheduleCallback(std::shared_ptr<arrow::FutureImpl> const&, arrow::FutureImpl::CallbackRecord&&, bool)+0x276)[0x3ff8f9fc726]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::DoMarkFinishedOrFailed(arrow::FutureState)+0x2aa)[0x3ff8f9fcb22]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::DoMarkFinished()+0x26)[0x3ff8f9fbcee]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::FutureImpl::MarkFinished()+0x30)[0x3ff8f9ccec8]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::Future<arrow::dataset::EnumeratedRecordBatch>::DoMarkFinished(arrow::Result<arrow::dataset::EnumeratedRecordBatch>)+0xce)[0x3ff91614a9e]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::Future<arrow::dataset::EnumeratedRecordBatch>::MarkFinished(arrow::Result<arrow::dataset::EnumeratedRecordBatch>)+0x66)[0x3ff9160f126]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(std::enable_if<((!std::is_void<arrow::Result<arrow::dataset::EnumeratedRecordBatch> >::value)&&(!arrow::detail::is_future<std::is_void>::value))&&((!arrow::Future<arrow::dataset::EnumeratedRecordBatch>::is_empty)||std::is_same<std::is_void, arrow::Status>::value), void>::type arrow::detail::ContinueFuture::operator()<arrow::ReadaheadGenerator<arrow::dataset::EnumeratedRecordBatch>::AddMarkFinishedContinuation(arrow::Future<arrow::dataset::EnumeratedRecordBatch>)::{lambda(arrow::dataset::EnumeratedRecordBatch const&)#1}, arrow::dataset::EnumeratedRecordBatch const&, arrow::Result<arrow::dataset::EnumeratedRecordBatch>, arrow::Future<arrow::dataset::EnumeratedRecordBatch> >(arrow::detail::is_future<std::is_void>, arrow::ReadaheadGenerator<arrow::dataset::EnumeratedRecordBatch>::AddMarkFinishedContinuation(arrow::Future<arrow::dataset::EnumeratedRecordBatch>)::{lambda(arrow::dataset::EnumeratedRecordBatch const&)#1}&&, arrow::dataset::EnumeratedRecordBatch const&) const+0xa0)[0x3ff91612e90]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(void arrow::detail::ContinueFuture::IgnoringArgsIf<arrow::ReadaheadGenerator<arrow::dataset::EnumeratedRecordBatch>::AddMarkFinishedContinuation(arrow::Future<arrow::dataset::EnumeratedRecordBatch>)::{lambda(arrow::dataset::EnumeratedRecordBatch const&)#1}, arrow::Future<arrow::dataset::EnumeratedRecordBatch>, arrow::dataset::EnumeratedRecordBatch const&>(std::integral_constant<bool, false>, arrow::Future<arrow::dataset::EnumeratedRecordBatch>&&, arrow::ReadaheadGenerator<arrow::dataset::EnumeratedRecordBatch>::AddMarkFinishedContinuation(arrow::Future<arrow::dataset::EnumeratedRecordBatch>)::{lambda(arrow::dataset::EnumeratedRecordBatch const&)#1}&&, arrow::dataset::EnumeratedRecordBatch const&) const+0x9a)[0x3ff9160cdc2]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::Future<arrow::dataset::EnumeratedRecordBatch>::ThenOnComplete<arrow::ReadaheadGenerator<arrow::dataset::EnumeratedRecordBatch>::AddMarkFinishedContinuation(arrow::Future<arrow::dataset::EnumeratedRecordBatch>)::{lambda(arrow::dataset::EnumeratedRecordBatch const&)#1}, arrow::ReadaheadGenerator<arrow::dataset::EnumeratedRecordBatch>::AddMarkFinishedContinuation(arrow::Future<arrow::dataset::EnumeratedRecordBatch>)::{lambda(arrow::Status const&)#2}>::operator()(arrow::Result<arrow::dataset::EnumeratedRecordBatch> const&) &&+0xea)[0x3ff916050da]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::Future<arrow::dataset::EnumeratedRecordBatch>::WrapResultyOnComplete::Callback<arrow::Future<arrow::dataset::EnumeratedRecordBatch>::ThenOnComplete<arrow::ReadaheadGenerator<arrow::dataset::EnumeratedRecordBatch>::AddMarkFinishedContinuation(arrow::Future<arrow::dataset::EnumeratedRecordBatch>)::{lambda(arrow::dataset::EnumeratedRecordBatch const&)#1}, arrow::ReadaheadGenerator<arrow::dataset::EnumeratedRecordBatch>::AddMarkFinishedContinuation(arrow::Future<arrow::dataset::EnumeratedRecordBatch>)::{lambda(arrow::Status const&)#2}> >::operator()(arrow::FutureImpl const&) &&+0x4e)[0x3ff91602a2e]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::internal::FnOnce<void (arrow::FutureImpl const&)>::FnImpl<arrow::Future<arrow::dataset::EnumeratedRecordBatch>::WrapResultyOnComplete::Callback<arrow::Future<arrow::dataset::EnumeratedRecordBatch>::ThenOnComplete<arrow::ReadaheadGenerator<arrow::dataset::EnumeratedRecordBatch>::AddMarkFinishedContinuation(arrow::Future<arrow::dataset::EnumeratedRecordBatch>)::{lambda(arrow::dataset::EnumeratedRecordBatch const&)#1}, arrow::ReadaheadGenerator<arrow::dataset::EnumeratedRecordBatch>::AddMarkFinishedContinuation(arrow::Future<arrow::dataset::EnumeratedRecordBatch>)::{lambda(arrow::Status const&)#2}> > >::invoke(arrow::FutureImpl const&)+0x52)[0x3ff915f9cb2]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::internal::FnOnce<void (arrow::FutureImpl const&)>::operator()(arrow::FutureImpl const&) &&+0x92)[0x3ff8fa04d7a]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::RunOrScheduleCallback(std::shared_ptr<arrow::FutureImpl> const&, arrow::FutureImpl::CallbackRecord&&, bool)+0x276)[0x3ff8f9fc726]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::DoMarkFinishedOrFailed(arrow::FutureState)+0x2aa)[0x3ff8f9fcb22]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::DoMarkFinished()+0x26)[0x3ff8f9fbcee]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::FutureImpl::MarkFinished()+0x30)[0x3ff8f9ccec8]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::Future<arrow::dataset::EnumeratedRecordBatch>::DoMarkFinished(arrow::Result<arrow::dataset::EnumeratedRecordBatch>)+0xce)[0x3ff91614a9e]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::Future<arrow::dataset::EnumeratedRecordBatch>::MarkFinished(arrow::Result<arrow::dataset::EnumeratedRecordBatch>)+0x66)[0x3ff9160f126]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::MergedGenerator<arrow::dataset::EnumeratedRecordBatch>::InnerCallback::operator()(arrow::Result<arrow::dataset::EnumeratedRecordBatch> const&)+0x370)[0x3ff91608160]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::Future<arrow::dataset::EnumeratedRecordBatch>::WrapResultyOnComplete::Callback<arrow::MergedGenerator<arrow::dataset::EnumeratedRecordBatch>::InnerCallback>::operator()(arrow::FutureImpl const&) &&+0x4e)[0x3ff916037ce]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::internal::FnOnce<void (arrow::FutureImpl const&)>::FnImpl<arrow::Future<arrow::dataset::EnumeratedRecordBatch>::WrapResultyOnComplete::Callback<arrow::MergedGenerator<arrow::dataset::EnumeratedRecordBatch>::InnerCallback> >::invoke(arrow::FutureImpl const&)+0x52)[0x3ff915fd64a]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::internal::FnOnce<void (arrow::FutureImpl const&)>::operator()(arrow::FutureImpl const&) &&+0x92)[0x3ff8fa04d7a]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::RunOrScheduleCallback(std::shared_ptr<arrow::FutureImpl> const&, arrow::FutureImpl::CallbackRecord&&, bool)+0x276)[0x3ff8f9fc726]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::DoMarkFinishedOrFailed(arrow::FutureState)+0x2aa)[0x3ff8f9fcb22]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::DoMarkFinished()+0x26)[0x3ff8f9fbcee]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::FutureImpl::MarkFinished()+0x30)[0x3ff8f9ccec8]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::Future<arrow::dataset::EnumeratedRecordBatch>::DoMarkFinished(arrow::Result<arrow::dataset::EnumeratedRecordBatch>)+0xce)[0x3ff91614a9e]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::Future<arrow::dataset::EnumeratedRecordBatch>::MarkFinished(arrow::Result<arrow::dataset::EnumeratedRecordBatch>)+0x66)[0x3ff9160f126]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::MappingGenerator<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> >, arrow::dataset::EnumeratedRecordBatch>::MappedCallback::operator()(arrow::Result<arrow::dataset::EnumeratedRecordBatch> const&)+0x146)[0x3ff9162372e]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::Future<arrow::dataset::EnumeratedRecordBatch>::WrapResultyOnComplete::Callback<arrow::MappingGenerator<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> >, arrow::dataset::EnumeratedRecordBatch>::MappedCallback>::operator()(arrow::FutureImpl const&) &&+0x4e)[0x3ff91622f56]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::internal::FnOnce<void (arrow::FutureImpl const&)>::FnImpl<arrow::Future<arrow::dataset::EnumeratedRecordBatch>::WrapResultyOnComplete::Callback<arrow::MappingGenerator<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> >, arrow::dataset::EnumeratedRecordBatch>::MappedCallback> >::invoke(arrow::FutureImpl const&)+0x52)[0x3ff91622a92]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::internal::FnOnce<void (arrow::FutureImpl const&)>::operator()(arrow::FutureImpl const&) &&+0x92)[0x3ff8fa04d7a]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::RunOrScheduleCallback(std::shared_ptr<arrow::FutureImpl> const&, arrow::FutureImpl::CallbackRecord&&, bool)+0x276)[0x3ff8f9fc726]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::AddCallback(arrow::internal::FnOnce<void (arrow::FutureImpl const&)>, arrow::CallbackOptions)+0x12e)[0x3ff8f9fc016]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::FutureImpl::AddCallback(arrow::internal::FnOnce<void (arrow::FutureImpl const&)>, arrow::CallbackOptions)+0x9a)[0x3ff8f9ccfb2]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(void arrow::Future<arrow::dataset::EnumeratedRecordBatch>::AddCallback<arrow::MappingGenerator<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> >, arrow::dataset::EnumeratedRecordBatch>::MappedCallback, arrow::Future<arrow::dataset::EnumeratedRecordBatch>::WrapResultyOnComplete::Callback<arrow::MappingGenerator<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> >, arrow::dataset::EnumeratedRecordBatch>::MappedCallback> >(arrow::MappingGenerator<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> >, arrow::dataset::EnumeratedRecordBatch>::MappedCallback, arrow::CallbackOptions) const+0xb8)[0x3ff91611110]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::MappingGenerator<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> >, arrow::dataset::EnumeratedRecordBatch>::Callback::operator()(arrow::Result<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > const&)+0x442)[0x3ff9160ad7a]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >::WrapResultyOnComplete::Callback<arrow::MappingGenerator<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> >, arrow::dataset::EnumeratedRecordBatch>::Callback>::operator()(arrow::FutureImpl const&) &&+0x4e)[0x3ff91603c7e]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::internal::FnOnce<void (arrow::FutureImpl const&)>::FnImpl<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >::WrapResultyOnComplete::Callback<arrow::MappingGenerator<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> >, arrow::dataset::EnumeratedRecordBatch>::Callback> >::invoke(arrow::FutureImpl const&)+0x52)[0x3ff915fe66a]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::internal::FnOnce<void (arrow::FutureImpl const&)>::operator()(arrow::FutureImpl const&) &&+0x92)[0x3ff8fa04d7a]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::RunOrScheduleCallback(std::shared_ptr<arrow::FutureImpl> const&, arrow::FutureImpl::CallbackRecord&&, bool)+0x276)[0x3ff8f9fc726]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::DoMarkFinishedOrFailed(arrow::FutureState)+0x2aa)[0x3ff8f9fcb22]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::DoMarkFinished()+0x26)[0x3ff8f9fbcee]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::FutureImpl::MarkFinished()+0x30)[0x3ff8f9ccec8]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >::DoMarkFinished(arrow::Result<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >)+0xce)[0x3ff916185ae]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >::MarkFinished(arrow::Result<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >)+0x66)[0x3ff91613a06]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::detail::MarkNextFinished<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >, arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >, false, false>::operator()(arrow::Result<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > const&) &&+0x60)[0x3ff91623408]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >::WrapResultyOnComplete::Callback<arrow::detail::MarkNextFinished<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >, arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >, false, false> >::operator()(arrow::FutureImpl const&) &&+0x4e)[0x3ff91622e4e]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::internal::FnOnce<void (arrow::FutureImpl const&)>::FnImpl<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >::WrapResultyOnComplete::Callback<arrow::detail::MarkNextFinished<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >, arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >, false, false> > >::invoke(arrow::FutureImpl const&)+0x52)[0x3ff91622972]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::internal::FnOnce<void (arrow::FutureImpl const&)>::operator()(arrow::FutureImpl const&) &&+0x92)[0x3ff8fa04d7a]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::RunOrScheduleCallback(std::shared_ptr<arrow::FutureImpl> const&, arrow::FutureImpl::CallbackRecord&&, bool)+0x276)[0x3ff8f9fc726]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::AddCallback(arrow::internal::FnOnce<void (arrow::FutureImpl const&)>, arrow::CallbackOptions)+0x12e)[0x3ff8f9fc016]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::FutureImpl::AddCallback(arrow::internal::FnOnce<void (arrow::FutureImpl const&)>, arrow::CallbackOptions)+0x9a)[0x3ff8f9ccfb2]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(void arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >::AddCallback<arrow::detail::MarkNextFinished<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >, arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >, false, false>, arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >::WrapResultyOnComplete::Callback<arrow::detail::MarkNextFinished<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >, arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >, false, false> > >(arrow::detail::MarkNextFinished<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >, arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >, false, false>, arrow::CallbackOptions) const+0xb8)[0x3ff91618300]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(std::enable_if<arrow::detail::is_future<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > >::value, void>::type arrow::detail::ContinueFuture::operator()<arrow::FutureFirstGenerator<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >::operator()()::{lambda(std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> const&)#1}, std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> const&, arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >, arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > >(arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >, arrow::FutureFirstGenerator<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >::operator()()::{lambda(std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> const&)#1}&&, std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> const&) const+0xf4)[0x3ff9161385c]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(void arrow::detail::ContinueFuture::IgnoringArgsIf<arrow::FutureFirstGenerator<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >::operator()()::{lambda(std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> const&)#1}, arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >, std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> const&>(std::integral_constant<bool, false>, arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >&&, arrow::FutureFirstGenerator<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >::operator()()::{lambda(std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> const&)#1}&&, std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> const&) const+0x9a)[0x3ff9160dcc2]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::Future<std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> >::ThenOnComplete<arrow::FutureFirstGenerator<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >::operator()()::{lambda(std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> const&)#1}, arrow::Future<std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> >::PassthruOnFailure<{lambda(std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> const&)#1}> >::operator()(arrow::Result<std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> > const&) &&+0xc6)[0x3ff91606406]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::Future<std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> >::WrapResultyOnComplete::Callback<arrow::Future<std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> >::ThenOnComplete<arrow::FutureFirstGenerator<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >::operator()()::{lambda(std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> const&)#1}, arrow::Future<std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> >::PassthruOnFailure<{lambda(std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> const&)#1}> > >::operator()(arrow::FutureImpl const&) &&+0x4e)[0x3ff91603206]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::internal::FnOnce<void (arrow::FutureImpl const&)>::FnImpl<arrow::Future<std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> >::WrapResultyOnComplete::Callback<arrow::Future<std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> >::ThenOnComplete<arrow::FutureFirstGenerator<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > >::operator()()::{lambda(std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> const&)#1}, arrow::Future<std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> >::PassthruOnFailure<{lambda(std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> const&)#1}> > > >::invoke(arrow::FutureImpl const&)+0x52)[0x3ff915fbf3a]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::internal::FnOnce<void (arrow::FutureImpl const&)>::operator()(arrow::FutureImpl const&) &&+0x92)[0x3ff8fa04d7a]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::RunOrScheduleCallback(std::shared_ptr<arrow::FutureImpl> const&, arrow::FutureImpl::CallbackRecord&&, bool)+0x276)[0x3ff8f9fc726]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::DoMarkFinishedOrFailed(arrow::FutureState)+0x2aa)[0x3ff8f9fcb22]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::DoMarkFinished()+0x26)[0x3ff8f9fbcee]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::FutureImpl::MarkFinished()+0x30)[0x3ff8f9ccec8]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::Future<std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> >::DoMarkFinished(arrow::Result<std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> >)+0xce)[0x3ff9161b286]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::Future<std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> >::MarkFinished(arrow::Result<std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> >)+0x66)[0x3ff91616ea6]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(std::enable_if<((!std::is_void<std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> >::value)&&(!arrow::detail::is_future<std::is_void>::value))&&((!arrow::Future<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()>::is_empty)||std::is_same<std::is_void, arrow::Status>::value), void>::type arrow::detail::ContinueFuture::operator()<arrow::MakeEnumeratedGenerator<std::shared_ptr<arrow::RecordBatch> >(std::function<arrow::Future<std::shared_ptr<arrow::RecordBatch> > ()>)::{lambda(std::shared_ptr<arrow::RecordBatch> const&)#1}, std::shared_ptr<arrow::RecordBatch> const&, std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()>, arrow::Future<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> >(arrow::detail::is_future<std::is_void>, arrow::MakeEnumeratedGenerator<std::shared_ptr<arrow::RecordBatch> >(std::function<arrow::Future<std::shared_ptr<arrow::RecordBatch> > ()>)::{lambda(std::shared_ptr<arrow::RecordBatch> const&)#1}&&, std::shared_ptr<arrow::RecordBatch> const&) const+0xba)[0x3ff91616b9a]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(void arrow::detail::ContinueFuture::IgnoringArgsIf<arrow::MakeEnumeratedGenerator<std::shared_ptr<arrow::RecordBatch> >(std::function<arrow::Future<std::shared_ptr<arrow::RecordBatch> > ()>)::{lambda(std::shared_ptr<arrow::RecordBatch> const&)#1}, arrow::Future<std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> >, std::shared_ptr<arrow::RecordBatch> const&>(std::integral_constant<bool, false>, arrow::Future<std::function<arrow::Future<arrow::Enumerated<std::shared_ptr<arrow::RecordBatch> > > ()> >&&, arrow::MakeEnumeratedGenerator<std::shared_ptr<arrow::RecordBatch> >(std::function<arrow::Future<std::shared_ptr<arrow::RecordBatch> > ()>)::{lambda(std::shared_ptr<arrow::RecordBatch> const&)#1}&&, std::shared_ptr<arrow::RecordBatch> const&) const+0x9a)[0x3ff91611ffa]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::Future<std::shared_ptr<arrow::RecordBatch> >::ThenOnComplete<arrow::MakeEnumeratedGenerator<std::shared_ptr<arrow::RecordBatch> >(std::function<arrow::Future<std::shared_ptr<arrow::RecordBatch> > ()>)::{lambda(std::shared_ptr<arrow::RecordBatch> const&)#1}, arrow::Future<std::shared_ptr<arrow::RecordBatch> >::PassthruOnFailure<{lambda(std::shared_ptr<arrow::RecordBatch> const&)#1}> >::operator()(arrow::Result<std::shared_ptr<arrow::RecordBatch> > const&) &&+0xc6)[0x3ff9160c40e]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::Future<std::shared_ptr<arrow::RecordBatch> >::WrapResultyOnComplete::Callback<arrow::Future<std::shared_ptr<arrow::RecordBatch> >::ThenOnComplete<arrow::MakeEnumeratedGenerator<std::shared_ptr<arrow::RecordBatch> >(std::function<arrow::Future<std::shared_ptr<arrow::RecordBatch> > ()>)::{lambda(std::shared_ptr<arrow::RecordBatch> const&)#1}, arrow::Future<std::shared_ptr<arrow::RecordBatch> >::PassthruOnFailure<{lambda(std::shared_ptr<arrow::RecordBatch> const&)#1}> > >::operator()(arrow::FutureImpl const&) &&+0x4e)[0x3ff91604b06]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::internal::FnOnce<void (arrow::FutureImpl const&)>::FnImpl<arrow::Future<std::shared_ptr<arrow::RecordBatch> >::WrapResultyOnComplete::Callback<arrow::Future<std::shared_ptr<arrow::RecordBatch> >::ThenOnComplete<arrow::MakeEnumeratedGenerator<std::shared_ptr<arrow::RecordBatch> >(std::function<arrow::Future<std::shared_ptr<arrow::RecordBatch> > ()>)::{lambda(std::shared_ptr<arrow::RecordBatch> const&)#1}, arrow::Future<std::shared_ptr<arrow::RecordBatch> >::PassthruOnFailure<{lambda(std::shared_ptr<arrow::RecordBatch> const&)#1}> > > >::invoke(arrow::FutureImpl const&)+0x52)[0x3ff91601cda]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::internal::FnOnce<void (arrow::FutureImpl const&)>::operator()(arrow::FutureImpl const&) &&+0x92)[0x3ff8fa04d7a]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::RunOrScheduleCallback(std::shared_ptr<arrow::FutureImpl> const&, arrow::FutureImpl::CallbackRecord&&, bool)+0x276)[0x3ff8f9fc726]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::DoMarkFinishedOrFailed(arrow::FutureState)+0x2aa)[0x3ff8f9fcb22]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::DoMarkFinished()+0x26)[0x3ff8f9fbcee]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::FutureImpl::MarkFinished()+0x30)[0x3ff8f9ccec8]\r\n   \r\n   /build/cpp/debug/arrow-dataset-scanner-test(arrow::Future<std::shared_ptr<arrow::RecordBatch> >::DoMarkFinished(arrow::Result<std::shared_ptr<arrow::RecordBatch> >)+0xce)[0x2aa3fe8923e]\r\n   \r\n   /build/cpp/debug/arrow-dataset-scanner-test(arrow::Future<std::shared_ptr<arrow::RecordBatch> >::MarkFinished(arrow::Result<std::shared_ptr<arrow::RecordBatch> >)+0x66)[0x2aa3fe6f49e]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(std::enable_if<((!std::is_void<arrow::Result<std::shared_ptr<arrow::RecordBatch> > >::value)&&(!arrow::detail::is_future<std::is_void>::value))&&((!arrow::Future<std::shared_ptr<arrow::RecordBatch> >::is_empty)||std::is_same<std::is_void, arrow::Status>::value), void>::type arrow::detail::ContinueFuture::operator()<arrow::DefaultIfEmptyGenerator<std::shared_ptr<arrow::RecordBatch> >::operator()()::{unnamed type#1}, std::shared_ptr<arrow::RecordBatch> const&, arrow::Result<std::shared_ptr<arrow::RecordBatch> >, arrow::Future<std::shared_ptr<arrow::RecordBatch> > >(arrow::detail::is_future<std::is_void>, arrow::DefaultIfEmptyGenerator<std::shared_ptr<arrow::RecordBatch> >::operator()()::{unnamed type#1}&&, std::shared_ptr<arrow::RecordBatch> const&) const+0xa0)[0x3ff91613d00]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(void arrow::detail::ContinueFuture::IgnoringArgsIf<arrow::DefaultIfEmptyGenerator<std::shared_ptr<arrow::RecordBatch> >::operator()()::{unnamed type#1}, arrow::Future<std::shared_ptr<arrow::RecordBatch> >, std::shared_ptr<arrow::RecordBatch> const&>(std::integral_constant<bool, false>, arrow::Future<std::shared_ptr<arrow::RecordBatch> >&&, arrow::DefaultIfEmptyGenerator<std::shared_ptr<arrow::RecordBatch> >::operator()()::{unnamed type#1}&&, std::shared_ptr<arrow::RecordBatch> const&) const+0x9a)[0x3ff9160e1d2]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::Future<std::shared_ptr<arrow::RecordBatch> >::ThenOnComplete<arrow::DefaultIfEmptyGenerator<std::shared_ptr<arrow::RecordBatch> >::operator()()::{unnamed type#1}, arrow::Future<std::shared_ptr<arrow::RecordBatch> >::PassthruOnFailure<{unnamed type#1}> >::operator()(arrow::Result<std::shared_ptr<arrow::RecordBatch> > const&) &&+0xc6)[0x3ff91606916]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::Future<std::shared_ptr<arrow::RecordBatch> >::WrapResultyOnComplete::Callback<arrow::Future<std::shared_ptr<arrow::RecordBatch> >::ThenOnComplete<arrow::DefaultIfEmptyGenerator<std::shared_ptr<arrow::RecordBatch> >::operator()()::{unnamed type#1}, arrow::Future<std::shared_ptr<arrow::RecordBatch> >::PassthruOnFailure<{unnamed type#1}> > >::operator()(arrow::FutureImpl const&) &&+0x4e)[0x3ff91603396]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::internal::FnOnce<void (arrow::FutureImpl const&)>::FnImpl<arrow::Future<std::shared_ptr<arrow::RecordBatch> >::WrapResultyOnComplete::Callback<arrow::Future<std::shared_ptr<arrow::RecordBatch> >::ThenOnComplete<arrow::DefaultIfEmptyGenerator<std::shared_ptr<arrow::RecordBatch> >::operator()()::{unnamed type#1}, arrow::Future<std::shared_ptr<arrow::RecordBatch> >::PassthruOnFailure<{unnamed type#1}> > > >::invoke(arrow::FutureImpl const&)+0x52)[0x3ff915fc49a]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::internal::FnOnce<void (arrow::FutureImpl const&)>::operator()(arrow::FutureImpl const&) &&+0x92)[0x3ff8fa04d7a]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::RunOrScheduleCallback(std::shared_ptr<arrow::FutureImpl> const&, arrow::FutureImpl::CallbackRecord&&, bool)+0x276)[0x3ff8f9fc726]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::DoMarkFinishedOrFailed(arrow::FutureState)+0x2aa)[0x3ff8f9fcb22]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::ConcreteFutureImpl::DoMarkFinished()+0x26)[0x3ff8f9fbcee]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::FutureImpl::MarkFinished()+0x30)[0x3ff8f9ccec8]\r\n   \r\n   /build/cpp/debug/arrow-dataset-scanner-test(arrow::Future<std::shared_ptr<arrow::RecordBatch> >::DoMarkFinished(arrow::Result<std::shared_ptr<arrow::RecordBatch> >)+0xce)[0x2aa3fe8923e]\r\n   \r\n   /build/cpp/debug/arrow-dataset-scanner-test(arrow::Future<std::shared_ptr<arrow::RecordBatch> >::MarkFinished(arrow::Result<std::shared_ptr<arrow::RecordBatch> >)+0x66)[0x2aa3fe6f49e]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::internal::Executor::DoTransfer<std::shared_ptr<arrow::RecordBatch>, arrow::Future<std::shared_ptr<arrow::RecordBatch> >, arrow::Result<std::shared_ptr<arrow::RecordBatch> > >(arrow::Future<std::shared_ptr<arrow::RecordBatch> >, bool)::{lambda(arrow::Result<std::shared_ptr<arrow::RecordBatch> > const&)#2}::operator()(arrow::Result<std::shared_ptr<arrow::RecordBatch> > const&)::{lambda()#1}::operator()()+0x64)[0x3ff915a6f2c]\r\n   \r\n   /usr/local/lib/libarrow_dataset.so.600(arrow::internal::FnOnce<void ()>::FnImpl<arrow::internal::Executor::DoTransfer<std::shared_ptr<arrow::RecordBatch>, arrow::Future<std::shared_ptr<arrow::RecordBatch> >, arrow::Result<std::shared_ptr<arrow::RecordBatch> > >(arrow::Future<std::shared_ptr<arrow::RecordBatch> >, bool)::{lambda(arrow::Result<std::shared_ptr<arrow::RecordBatch> > const&)#2}::operator()(arrow::Result<std::shared_ptr<arrow::RecordBatch> > const&)::{lambda()#1}>::invoke()+0x38)[0x3ff915f9cf8]\r\n   \r\n   /usr/local/lib/libarrow.so.600(arrow::internal::FnOnce<void ()>::operator()() &&+0x70)[0x3ff8f9ad540]\r\n   \r\n   /usr/local/lib/libarrow.so.600(+0x241ab0e)[0x3ff8f99ab0e]\r\n   \r\n   /usr/local/lib/libarrow.so.600(+0x241bc8c)[0x3ff8f99bc8c]\r\n   \r\n   /usr/local/lib/libarrow.so.600(+0x242693c)[0x3ff8f9a693c]\r\n   \r\n   /usr/local/lib/libarrow.so.600(+0x242686e)[0x3ff8f9a686e]\r\n   \r\n   /usr/local/lib/libarrow.so.600(+0x24267a6)[0x3ff8f9a67a6]\r\n   \r\n   /usr/local/lib/libarrow.so.600(+0x2426736)[0x3ff8f9a6736]\r\n   \r\n   /usr/local/lib/libarrow.so.600(+0x24266aa)[0x3ff8f9a66aa]\r\n   \r\n   /lib/s390x-linux-gnu/libstdc++.so.6(+0xea136)[0x3ff8d0ea136]\r\n   \r\n   /lib/s390x-linux-gnu/libpthread.so.0(+0x9986)[0x3ff8cc09986]\r\n   \r\n   /lib/s390x-linux-gnu/libc.so.6(+0x103cc6)[0x3ff8ce83cc6]\r\n   ```\r\n   \r\n   </details>\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-14T14:21:11.672+0000",
                    "updated": "2021-09-14T14:21:11.672+0000",
                    "started": "2021-09-14T14:21:11.672+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "650595",
                    "issueId": "13400766"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400766/worklog/650606",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11145:\nURL: https://github.com/apache/arrow/pull/11145#issuecomment-919215909\n\n\n   And this reproduces it locally:\r\n   \r\n   ```\r\n   taskset --cpu-list 1 env OMP_NUM_THREADS=1 nice ./debug/arrow-dataset-scanner-test --gtest_filter=TestScannerThreading/TestScanner.CountRows/5AsyncSerial2d16b1024r --gtest_repeat=100\r\n   ```\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-14T14:39:35.596+0000",
                    "updated": "2021-09-14T14:39:35.596+0000",
                    "started": "2021-09-14T14:39:35.596+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "650606",
                    "issueId": "13400766"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400766/worklog/650634",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11145:\nURL: https://github.com/apache/arrow/pull/11145#issuecomment-919253529\n\n\n   This happens because CountRows() creates a dummy OneShotFragment. This fragment, when scanned, unconditionally uses a BackgroundIterator and transfers to the CPU executor. Hence under stress, this could cause both the main thread and CPU threads to be used. I think this needs to be fixed, but for the purposes of CountRows, we can instead use InMemoryFragment which does not transfer.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-14T15:20:15.626+0000",
                    "updated": "2021-09-14T15:20:15.626+0000",
                    "started": "2021-09-14T15:20:15.626+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "650634",
                    "issueId": "13400766"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400766/worklog/650635",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11145:\nURL: https://github.com/apache/arrow/pull/11145#issuecomment-919254413\n\n\n   Furthermore I think it would be useful if, during a non-parallel scan, we could abort or otherwise enforce that the CPU thread pool is not being used.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-14T15:21:03.705+0000",
                    "updated": "2021-09-14T15:21:03.705+0000",
                    "started": "2021-09-14T15:21:03.704+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "650635",
                    "issueId": "13400766"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400766/worklog/650636",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm edited a comment on pull request #11145:\nURL: https://github.com/apache/arrow/pull/11145#issuecomment-919254413\n\n\n   Furthermore I think it would be useful if, during a non-parallel scan, we could abort or otherwise enforce that the CPU thread pool is not being used. If we could propagate some sort of context uniformly to carry this sort of information, then we could check in the executor itself and abort whenever this mistake is made.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-14T15:21:49.179+0000",
                    "updated": "2021-09-14T15:21:49.179+0000",
                    "started": "2021-09-14T15:21:49.178+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "650636",
                    "issueId": "13400766"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400766/worklog/651132",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11145:\nURL: https://github.com/apache/arrow/pull/11145#issuecomment-920086958\n\n\n   @westonpace do you have time to take another look here? I'll also file a follow-up JIRA about debugging if you think it's useful. (Actually, given the talks about tracing, it would be interesting if we could somehow capture executor usage in the traces - particularly spawning thread.)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-15T14:46:41.077+0000",
                    "updated": "2021-09-15T14:46:41.077+0000",
                    "started": "2021-09-15T14:46:41.077+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "651132",
                    "issueId": "13400766"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400766/worklog/651214",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on pull request #11145:\nURL: https://github.com/apache/arrow/pull/11145#issuecomment-920204721\n\n\n   I think my approval still stands.\r\n   \r\n   > This fragment, when scanned, unconditionally uses a BackgroundIterator and transfers to the CPU executor. Hence under stress, this could cause both the main thread and CPU threads to be used. I think this needs to be fixed\r\n   \r\n   I'm not sure this is a bad thing.  The rules for scanners are pretty clear.  A ScanOptions has an I/O executor which fragments are welcome to use and, if they do so, they should transfer back to the CPU thread pool.  So OneShotFragment is following the rules here.  The fact that it causes an indexing error is a consequence of ARROW-13741.  If that latter issue were resolved then it shouldn't matter at all what the scanner is doing.\r\n   \r\n   I think the only thing that could be changed is adding a CPU executor to scan options instead of threads grabbing the internal CPU thread pool.  I think right now we hack around this with \"SafeExecute\".\r\n   \r\n   > Furthermore I think it would be useful if, during a non-parallel scan, we could abort or otherwise enforce that the CPU thread pool is not being used.\r\n   \r\n   A \"non-parallel\" scan means that the CPU and I/O executors are a serial executor.  So the internal code shouldn't change either way and there should be no possible way to use the CPU thread.  If we put the CPU executor into the scan options then it might be good to catch places we do internal::GetCpuThreadPool instead of using the options executor.\r\n   \r\n   > Actually, given the talks about tracing, it would be interesting if we could somehow capture executor usage in the traces - particularly spawning thread.\r\n   \r\n   Agreed.  Thread pool tasks should be a \"span\" and the name of the thread pool (also, thread pools should be named), and possibly a worker index/id, should be properties of the span.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-15T17:04:16.397+0000",
                    "updated": "2021-09-15T17:04:16.397+0000",
                    "started": "2021-09-15T17:04:16.397+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "651214",
                    "issueId": "13400766"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400766/worklog/651215",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11145:\nURL: https://github.com/apache/arrow/pull/11145#issuecomment-920207471\n\n\n   Thanks for the explanations.\r\n   \r\n   > I think my approval still stands.\r\n   > \r\n   > > This fragment, when scanned, unconditionally uses a BackgroundIterator and transfers to the CPU executor. Hence under stress, this could cause both the main thread and CPU threads to be used. I think this needs to be fixed\r\n   > \r\n   > I'm not sure this is a bad thing. The rules for scanners are pretty clear. A ScanOptions has an I/O executor which fragments are welcome to use and, if they do so, they should transfer back to the CPU thread pool. So OneShotFragment is following the rules here. The fact that it causes an indexing error is a consequence of [ARROW-13741](https://issues.apache.org/jira/browse/ARROW-13741). If that latter issue were resolved then it shouldn't matter at all what the scanner is doing.\r\n   \r\n   Sorry, I meant it shouldn't transfer unconditionally to *the* CPU executor, but rather the \"main\" executor. Thanks for linking the relevant JIRA. \r\n   \r\n   > \r\n   > I think the only thing that could be changed is adding a CPU executor to scan options instead of threads grabbing the internal CPU thread pool. I think right now we hack around this with \"SafeExecute\".\r\n   \r\n   That would be good. It would also perhaps give us more control if we start running multiple queries in process, if we want to divvy up resources. (Though maybe work-stealing or a higher level executor could take care of that instead.)\r\n   \r\n   > \r\n   > > Furthermore I think it would be useful if, during a non-parallel scan, we could abort or otherwise enforce that the CPU thread pool is not being used.\r\n   > \r\n   > A \"non-parallel\" scan means that the CPU and I/O executors are a serial executor. So the internal code shouldn't change either way and there should be no possible way to use the CPU thread. If we put the CPU executor into the scan options then it might be good to catch places we do internal::GetCpuThreadPool instead of using the options executor.\r\n   \r\n   Ah, ok - that makes sense.\r\n   \r\n   > \r\n   > > Actually, given the talks about tracing, it would be interesting if we could somehow capture executor usage in the traces - particularly spawning thread.\r\n   > \r\n   > Agreed. Thread pool tasks should be a \"span\" and the name of the thread pool (also, thread pools should be named), and possibly a worker index/id, should be properties of the span.\r\n   \r\n   I'm going to look at tracing again and would like to do this. It would also be nice if we could get an \"async stack trace\" of some sorts, perhaps by reconstructing via spans - right now with async, the stack trace in the debugger is essentially useless, unfortunately.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-15T17:08:07.660+0000",
                    "updated": "2021-09-15T17:08:07.660+0000",
                    "started": "2021-09-15T17:08:07.660+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "651215",
                    "issueId": "13400766"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400766/worklog/651219",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm closed pull request #11145:\nURL: https://github.com/apache/arrow/pull/11145\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-15T17:10:11.671+0000",
                    "updated": "2021-09-15T17:10:11.671+0000",
                    "started": "2021-09-15T17:10:11.671+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "651219",
                    "issueId": "13400766"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400766/worklog/651229",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on pull request #11145:\nURL: https://github.com/apache/arrow/pull/11145#issuecomment-920216234\n\n\n   > I'm going to look at tracing again and would like to do this. It would also be nice if we could get an \"async stack trace\" of some sorts, perhaps by reconstructing via spans - right now with async, the stack trace in the debugger is essentially useless, unfortunately.\r\n   \r\n   If you can solve that it would be awesome.\r\n   \r\n   Keep in mind there is a possible another approach.  If ExecPlan gets more and more robust then switching the scanner to use ExecPlan internally (so ScanNode becomes ScanDirectoryNode/ScanDatasetNode -> ScanFragmentNode -> ParseBatchNode) is possible and, if we do that, we don't need futures nearly as much and the stack traces should be more sensible (since they'd start with \"task\" and not \"random transferred continuation\")\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-15T17:20:57.779+0000",
                    "updated": "2021-09-15T17:20:57.779+0000",
                    "started": "2021-09-15T17:20:57.779+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "651229",
                    "issueId": "13400766"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 10800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4a2506b9[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@cff4044[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@385e44de[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4ed5cef1[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7acb55aa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@445688fe[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@e644c1e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6ea6a965[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e60c71e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3e81b754[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@12a90826[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@491f6697[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10800,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Sep 15 17:09:58 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": [
            "C++"
        ],
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-09-15T17:09:58.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13982/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2021-09-13T11:48:37.000+0000",
        "updated": "2021-09-15T17:20:58.000+0000",
        "timeoriginalestimate": null,
        "description": "Reading parquet files using dataset scanner may stall due to a never-finished future.\u00a0\r\n\r\nTo reproduce this case, one needs two parquet files and sets the filter expression to something that could filter one file completely.\u00a0 After that, calling `AsyncScanner::ToRecordBatchReader` and read data continually.\u00a0\r\n\r\nI also have dug this bug a little. It's caused by the `MakeEmptyGenerator<std::shared_ptr<RecordBatch>>` when filtered row groups is empty, which's ignored by `FragmentToBatches` and causes SequencingGenerator to stall.\r\n\r\nA quick fix is to return a record batch with 0 rows instead of returning a nullptr there.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/attachment/13033420",
                "id": "13033420",
                "filename": "repro.py",
                "author": {
                    "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                    "name": "lidavidm",
                    "key": "lidavidm",
                    "avatarUrls": {
                        "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                        "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                        "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                        "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                    },
                    "displayName": "David Li",
                    "active": true,
                    "timeZone": "America/New_York"
                },
                "created": "2021-09-13T14:34:00.008+0000",
                "size": 2133,
                "mimeType": "text/x-python",
                "content": "https://issues.apache.org/jira/secure/attachment/13033420/repro.py"
            }
        ],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Async scanner stalls if a fragment generates no batches",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": "ubuntu 18.04 LTS",
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400766/comment/17414203",
                    "id": "17414203",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Thanks for the bug report. I can confirm this affects both 5.0.0 and the current development version.\r\n\r\nQuick self-contained reproduction: [^repro.py]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-09-13T13:38:05.039+0000",
                    "updated": "2021-09-13T13:38:05.039+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400766/comment/17414214",
                    "id": "17414214",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "From digging around I don't think we can avoid sending an empty batch, given the pipeline doesn't really have any other way to carry information around. Unfortunately this will mean you might get the occasional empty batch, at least from the unordered scan (we could filter them out in the ordered scan if we really cared). This will also happen with empty CSV/Feather files (and presumably ORC as well).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-09-13T13:56:16.914+0000",
                    "updated": "2021-09-13T14:34:42.567+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400766/comment/17414620",
                    "id": "17414620",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "At the moment I can't think of anything better than empty batches.  At the very least, it seems removal of empty batches is an optimization we can explore at some future date when the exec plan is more sophisticated.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-09-13T22:21:37.028+0000",
                    "updated": "2021-09-13T22:21:37.028+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400766/comment/17415643",
                    "id": "17415643",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 11145\n[https://github.com/apache/arrow/pull/11145]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-09-15T17:09:58.550+0000",
                    "updated": "2021-09-15T17:09:58.550+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|z0uuq0:",
        "customfield_12314139": null
    }
}