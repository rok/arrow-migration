{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13205741",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13205741",
    "key": "ARROW-4087",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344316",
                "id": "12344316",
                "name": "0.11.1",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-23"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4087/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 17,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13205741/worklog/177627",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #3236: ARROW-4087: [C++] Make CSV spellings of null values configurable\nURL: https://github.com/apache/arrow/pull/3236\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-20T17:24:51.546+0000",
                    "updated": "2018-12-20T17:24:51.546+0000",
                    "started": "2018-12-20T17:24:51.545+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "177627",
                    "issueId": "13205741"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13205741/worklog/177636",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on issue #3236: ARROW-4087: [C++] Make CSV spellings of null values configurable\nURL: https://github.com/apache/arrow/pull/3236#issuecomment-449080650\n \n \n   Is the trie faster than a flat hash table?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-20T17:47:45.547+0000",
                    "updated": "2018-12-20T17:47:45.547+0000",
                    "started": "2018-12-20T17:47:45.546+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "177636",
                    "issueId": "13205741"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13205741/worklog/177640",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #3236: ARROW-4087: [C++] Make CSV spellings of null values configurable\nURL: https://github.com/apache/arrow/pull/3236#issuecomment-449083682\n \n \n   I haven't compared directly, but we can compute the hash of approximately 250M small strings/second, which is an upper bound for a full hash table lookup. The trie is faster than that when the string is not in the trie... My intuition is that the hash table is unlikely to be as performant for this use case (a small number of short strings).\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-20T17:58:02.431+0000",
                    "updated": "2018-12-20T17:58:02.431+0000",
                    "started": "2018-12-20T17:58:02.431+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "177640",
                    "issueId": "13205741"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13205741/worklog/177642",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on issue #3236: ARROW-4087: [C++] Make CSV spellings of null values configurable\nURL: https://github.com/apache/arrow/pull/3236#issuecomment-449084716\n \n \n   Small vector and linear scan should be the fastest when N is very small, which it is here. Bonus point if you can make the allocation on the cacheline after the vector struct.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-20T18:01:25.818+0000",
                    "updated": "2018-12-20T18:01:25.818+0000",
                    "started": "2018-12-20T18:01:25.817+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "177642",
                    "issueId": "13205741"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13205741/worklog/177643",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #3236: ARROW-4087: [C++] Make CSV spellings of null values configurable\nURL: https://github.com/apache/arrow/pull/3236#issuecomment-449085278\n \n \n   Hmm, I hadn't thought about a linear scan.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-20T18:03:29.108+0000",
                    "updated": "2018-12-20T18:03:29.108+0000",
                    "started": "2018-12-20T18:03:29.107+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "177643",
                    "issueId": "13205741"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13205741/worklog/177644",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou edited a comment on issue #3236: ARROW-4087: [C++] Make CSV spellings of null values configurable\nURL: https://github.com/apache/arrow/pull/3236#issuecomment-449085278\n \n \n   Hmm, I hadn't thought about a linear scan.\r\n   \r\n   Note there are 17 possible null values by default (coming from Pandas), which is small but not tiny.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-20T18:05:12.237+0000",
                    "updated": "2018-12-20T18:05:12.237+0000",
                    "started": "2018-12-20T18:05:12.237+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "177644",
                    "issueId": "13205741"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13205741/worklog/177648",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on issue #3236: ARROW-4087: [C++] Make CSV spellings of null values configurable\nURL: https://github.com/apache/arrow/pull/3236#issuecomment-449086306\n \n \n   And with small string optimization (which we have a good chance of hitting), everything will be on the stack of the function and on the same \"near\" cachelines without pointer chasing.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-20T18:07:14.247+0000",
                    "updated": "2018-12-20T18:07:14.247+0000",
                    "started": "2018-12-20T18:07:14.247+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "177648",
                    "issueId": "13205741"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13205741/worklog/177674",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3236: ARROW-4087: [C++] Make CSV spellings of null values configurable\nURL: https://github.com/apache/arrow/pull/3236#issuecomment-449089146\n \n \n   Aside: we need to curate that nulls list because NaN is not null in Arrow-land. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-20T18:17:23.657+0000",
                    "updated": "2018-12-20T18:17:23.657+0000",
                    "started": "2018-12-20T18:17:23.656+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "177674",
                    "issueId": "13205741"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13205741/worklog/177676",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3236: ARROW-4087: [C++] Make CSV spellings of null values configurable\nURL: https://github.com/apache/arrow/pull/3236#issuecomment-449089592\n \n \n   We should look at bloom filters at some point, too (there is an implementation of one under src/parquet already, albeit with virtual calls on the inner loop). They are popular for these \"not contained in\" checks, but I don't know where the crossover point in table size where a bloom filter becomes worthwhile\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-20T18:18:57.440+0000",
                    "updated": "2018-12-20T18:18:57.440+0000",
                    "started": "2018-12-20T18:18:57.439+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "177676",
                    "issueId": "13205741"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13205741/worklog/177681",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #3236: ARROW-4087: [C++] Make CSV spellings of null values configurable\nURL: https://github.com/apache/arrow/pull/3236#issuecomment-449091060\n \n \n   AFAIK, bloom filters are useful when your table is too large to fit in cache. The addressed use case here is a small table.\r\n   \r\n   (though, CPython uses a trivial bloom filter to speed up substring searches...)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-20T18:24:16.421+0000",
                    "updated": "2018-12-20T18:24:16.421+0000",
                    "started": "2018-12-20T18:24:16.420+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "177681",
                    "issueId": "13205741"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13205741/worklog/177688",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #3236: ARROW-4087: [C++] Make CSV spellings of null values configurable\nURL: https://github.com/apache/arrow/pull/3236#issuecomment-449092127\n \n \n   I forgot to paste the trie benchmark results:\r\n   ```\r\n   -------------------------------------------------------------------------------------\r\n   Benchmark                                              Time           CPU Iterations\r\n   -------------------------------------------------------------------------------------\r\n   BM_TrieLookupFound/repeats:2                         684 ns        684 ns     904964   139.435M items/s\r\n   BM_TrieLookupFound/repeats:2                         693 ns        693 ns     904964   137.673M items/s\r\n   BM_TrieLookupFound/repeats:2_mean                    688 ns        688 ns     904964   138.554M items/s\r\n   BM_TrieLookupFound/repeats:2_median                  688 ns        688 ns     904964   138.554M items/s\r\n   BM_TrieLookupFound/repeats:2_stddev                    6 ns          6 ns     904964   1.24601M items/s\r\n   BM_TrieLookupNotFound/repeats:2                      272 ns        272 ns    2562927   350.862M items/s\r\n   BM_TrieLookupNotFound/repeats:2                      279 ns        279 ns    2562927   341.903M items/s\r\n   BM_TrieLookupNotFound/repeats:2_mean                 275 ns        275 ns    2562927   346.383M items/s\r\n   BM_TrieLookupNotFound/repeats:2_median               275 ns        275 ns    2562927   346.383M items/s\r\n   BM_TrieLookupNotFound/repeats:2_stddev                 5 ns          5 ns    2562927   6.33469M items/s\r\n   BM_InlinedTrieLookupFound/repeats:2                  211 ns        211 ns    3273628   451.892M items/s\r\n   BM_InlinedTrieLookupFound/repeats:2                  209 ns        209 ns    3273628   456.781M items/s\r\n   BM_InlinedTrieLookupFound/repeats:2_mean             210 ns        210 ns    3273628   454.336M items/s\r\n   BM_InlinedTrieLookupFound/repeats:2_median           210 ns        210 ns    3273628   454.336M items/s\r\n   BM_InlinedTrieLookupFound/repeats:2_stddev             2 ns          2 ns    3273628   3.45708M items/s\r\n   BM_InlinedTrieLookupNotFound/repeats:2               170 ns        170 ns    3805474   562.033M items/s\r\n   BM_InlinedTrieLookupNotFound/repeats:2               168 ns        168 ns    3805474   567.026M items/s\r\n   BM_InlinedTrieLookupNotFound/repeats:2_mean          169 ns        169 ns    3805474   564.529M items/s\r\n   BM_InlinedTrieLookupNotFound/repeats:2_median        169 ns        169 ns    3805474   564.529M items/s\r\n   BM_InlinedTrieLookupNotFound/repeats:2_stddev          1 ns          1 ns    3805474   3.53072M items/s\r\n   ```\r\n   \r\n   Note that 350 million failed lookups / second is 10 CPU cycles per failed lookup.\r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-20T18:27:59.167+0000",
                    "updated": "2018-12-20T18:27:59.167+0000",
                    "started": "2018-12-20T18:27:59.165+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "177688",
                    "issueId": "13205741"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13205741/worklog/177781",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #3236: ARROW-4087: [C++] Make CSV spellings of null values configurable\nURL: https://github.com/apache/arrow/pull/3236#discussion_r243433055\n \n \n\n ##########\n File path: cpp/src/arrow/util/trie-test.cc\n ##########\n @@ -0,0 +1,283 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <cstring>\n+#include <string>\n+#include <unordered_map>\n+#include <utility>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/test-util.h\"\n+#include \"arrow/util/trie.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+TEST(SmallString, Basics) {\n+  using SS = SmallString<5>;\n+  {\n+    SS s;\n+    ASSERT_EQ(s.length(), 0);\n+    ASSERT_EQ(util::string_view(s), util::string_view(\"\"));\n+    ASSERT_EQ(s, \"\");\n+    ASSERT_NE(s, \"x\");\n+    ASSERT_EQ(sizeof(s), 6);\n+  }\n+  {\n+    SS s(\"abc\");\n+    ASSERT_EQ(s.length(), 3);\n+    ASSERT_EQ(util::string_view(s), util::string_view(\"abc\"));\n+    ASSERT_EQ(std::memcmp(s.data(), \"abc\", 3), 0);\n+    ASSERT_EQ(s, \"abc\");\n+    ASSERT_NE(s, \"ab\");\n+  }\n+}\n+\n+TEST(SmallString, Assign) {\n+  using SS = SmallString<5>;\n+  auto s = SS();\n+\n+  s = util::string_view(\"abc\");\n+  ASSERT_EQ(s.length(), 3);\n+  ASSERT_EQ(util::string_view(s), util::string_view(\"abc\"));\n+  ASSERT_EQ(std::memcmp(s.data(), \"abc\", 3), 0);\n+  ASSERT_EQ(s, \"abc\");\n+  ASSERT_NE(s, \"ab\");\n+\n+  s = std::string(\"ghijk\");\n+  ASSERT_EQ(s.length(), 5);\n+  ASSERT_EQ(util::string_view(s), util::string_view(\"ghijk\"));\n+  ASSERT_EQ(std::memcmp(s.data(), \"ghijk\", 5), 0);\n+  ASSERT_EQ(s, \"ghijk\");\n+  ASSERT_NE(s, \"\");\n+\n+  s = SS(\"xy\");\n+  ASSERT_EQ(s.length(), 2);\n+  ASSERT_EQ(util::string_view(s), util::string_view(\"xy\"));\n+  ASSERT_EQ(std::memcmp(s.data(), \"xy\", 2), 0);\n+  ASSERT_EQ(s, \"xy\");\n+  ASSERT_NE(s, \"xyz\");\n+}\n+\n+TEST(SmallString, Substr) {\n+  using SS = SmallString<5>;\n+  {\n+    auto s = SS();\n+    ASSERT_EQ(s.substr(0), \"\");\n+    ASSERT_EQ(s.substr(0, 2), \"\");\n+  }\n+  {\n+    auto s = SS(\"abcd\");\n+    ASSERT_EQ(s.substr(0), \"abcd\");\n+    ASSERT_EQ(s.substr(1), \"bcd\");\n+    ASSERT_EQ(s.substr(4), \"\");\n+    ASSERT_EQ(s.substr(0, 0), \"\");\n+    ASSERT_EQ(s.substr(0, 3), \"abc\");\n+    ASSERT_EQ(s.substr(0, 4), \"abcd\");\n+    ASSERT_EQ(s.substr(1, 0), \"\");\n+    ASSERT_EQ(s.substr(1, 2), \"bc\");\n+    ASSERT_EQ(s.substr(4, 0), \"\");\n+    ASSERT_EQ(s.substr(4, 1), \"\");\n+  }\n+}\n+\n+static std::vector<std::string> AllNulls() {\n+  return {\"#N/A\",    \"#N/A N/A\", \"#NA\", \"-1.#IND\", \"-1.#QNAN\", \"-NaN\", \"-nan\", \"1.#IND\",\n+          \"1.#QNAN\", \"N/A\",      \"NA\",  \"NULL\",    \"NaN\",      \"n/a\",  \"nan\",  \"null\"};\n+}\n+\n+static void TestTrieContents(const Trie& trie, const std::vector<std::string>& entries) {\n+  std::unordered_map<std::string, int32_t> control;\n+  auto n_entries = static_cast<int32_t>(entries.size());\n+\n+  // Build control container\n+  for (int32_t i = 0; i < n_entries; ++i) {\n+    auto p = control.insert({entries[i], i});\n+    ASSERT_TRUE(p.second);\n+  }\n+\n+  // Check all existing entries in trie\n+  for (int32_t i = 0; i < n_entries; ++i) {\n+    ASSERT_EQ(i, trie.Find(entries[i])) << \"for string '\" << entries[i] << \"'\";\n+  }\n+\n+  auto CheckNotExists = [&control, &trie](const std::string& s) {\n+    auto p = control.find(s);\n+    if (p == control.end()) {\n+      ASSERT_EQ(-1, trie.Find(s)) << \"for string '\" << s << \"'\";\n+    }\n+  };\n+\n+  // Check potentially non-existing strings\n+  CheckNotExists(\"\");\n+  CheckNotExists(\"X\");\n+  CheckNotExists(\"abcdefxxxxxxxxxxxxxxx\");\n+\n+  // Check potentially non-existing variations of existing entries\n+  for (const auto& e : entries) {\n+    CheckNotExists(e + \"X\");\n+    if (e.size() > 0) {\n+      CheckNotExists(e.substr(0, 1));\n+      auto prefix = e.substr(0, e.size() - 1);\n+      CheckNotExists(prefix);\n+      CheckNotExists(prefix + \"X\");\n+      auto split_at = e.size() / 2;\n+      CheckNotExists(e.substr(0, split_at) + 'x' + e.substr(split_at + 1));\n+    }\n+  }\n+}\n+\n+static void TestTrieContents(const std::vector<std::string>& entries) {\n+  TrieBuilder builder;\n+  for (const auto& s : entries) {\n+    ASSERT_OK(builder.Append(s));\n+  }\n+  const Trie trie = builder.Finish();\n+  ASSERT_OK(trie.Validate());\n+\n+  TestTrieContents(trie, entries);\n+}\n+\n+TEST(Trie, Empty) {\n+  TrieBuilder builder;\n+  const Trie trie = builder.Finish();\n+  ASSERT_OK(trie.Validate());\n+\n+  ASSERT_EQ(-1, trie.Find(\"\"));\n+  ASSERT_EQ(-1, trie.Find(\"x\"));\n+}\n+\n+TEST(Trie, EmptyString) {\n+  TrieBuilder builder;\n+  ASSERT_OK(builder.Append(\"\"));\n+  const Trie trie = builder.Finish();\n+  ASSERT_OK(trie.Validate());\n+\n+  ASSERT_EQ(0, trie.Find(\"\"));\n+  ASSERT_EQ(-1, trie.Find(\"x\"));\n+}\n+\n+TEST(Trie, Basics1) {\n+  TestTrieContents({\"abc\", \"de\", \"f\"});\n+  TestTrieContents({\"abc\", \"de\", \"f\", \"\"});\n+}\n+\n+TEST(Trie, Basics2) {\n+  TestTrieContents({\"a\", \"abc\", \"abcd\", \"abcdef\"});\n+  TestTrieContents({\"\", \"a\", \"abc\", \"abcd\", \"abcdef\"});\n+}\n+\n+TEST(Trie, Basics3) {\n+  TestTrieContents({\"abcd\", \"ab\", \"a\"});\n+  TestTrieContents({\"abcd\", \"ab\", \"a\", \"\"});\n+}\n+\n+TEST(Trie, LongStrings) {\n+  TestTrieContents({\"abcdefghijklmnopqr\", \"abcdefghijklmnoprq\", \"defghijklmnopqrst\"});\n+  TestTrieContents({\"abcdefghijklmnopqr\", \"abcdefghijklmnoprq\", \"abcde\"});\n \n Review comment:\n   The long strings only create 2 nodes (right?), not sure if there's value in having to create more than 2 to ensure that the recursion is happening properly\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-20T22:16:23.963+0000",
                    "updated": "2018-12-20T22:16:23.963+0000",
                    "started": "2018-12-20T22:16:23.962+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "177781",
                    "issueId": "13205741"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13205741/worklog/177782",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #3236: ARROW-4087: [C++] Make CSV spellings of null values configurable\nURL: https://github.com/apache/arrow/pull/3236#discussion_r243427294\n \n \n\n ##########\n File path: cpp/src/arrow/util/trie.h\n ##########\n @@ -0,0 +1,245 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_UTIL_TRIE_H\n+#define ARROW_UTIL_TRIE_H\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <cstring>\n+#include <limits>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+// A non-zero-terminated small string class.\n+// std::string usually has a small string optimization\n+// (see review at https://shaharmike.com/cpp/std-string/)\n+// but this one allows tight control and optimization of memory layout.\n+template <uint8_t N>\n+class SmallString {\n+ public:\n+  SmallString() : length_(0) {}\n+\n+  template <typename T>\n+  SmallString(const T& v) {  // NOLINT implicit constructor\n+    *this = util::string_view(v);\n+  }\n+\n+  SmallString& operator=(const util::string_view s) {\n+#ifndef NDEBUG\n+    CheckSize(s.size());\n+#endif\n+    length_ = static_cast<uint8_t>(s.size());\n+    std::memcpy(data_, s.data(), length_);\n+    return *this;\n+  }\n+\n+  SmallString& operator=(const std::string& s) {\n+    *this = util::string_view(s);\n+    return *this;\n+  }\n+\n+  SmallString& operator=(const char* s) {\n+    *this = util::string_view(s);\n+    return *this;\n+  }\n+\n+  explicit operator util::string_view() const {\n \n Review comment:\n   I wasn't aware you could do this, but cool\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-20T22:16:24.015+0000",
                    "updated": "2018-12-20T22:16:24.015+0000",
                    "started": "2018-12-20T22:16:24.014+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "177782",
                    "issueId": "13205741"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13205741/worklog/177783",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #3236: ARROW-4087: [C++] Make CSV spellings of null values configurable\nURL: https://github.com/apache/arrow/pull/3236\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/CMakeLists.txt b/cpp/src/arrow/CMakeLists.txt\nindex 8dd2ac082d..f2a8112472 100644\n--- a/cpp/src/arrow/CMakeLists.txt\n+++ b/cpp/src/arrow/CMakeLists.txt\n@@ -110,6 +110,7 @@ set(ARROW_SRCS\n   util/key_value_metadata.cc\n   util/task-group.cc\n   util/thread-pool.cc\n+  util/trie.cc\n   util/utf8.cc\n )\n \ndiff --git a/cpp/src/arrow/csv/converter-test.cc b/cpp/src/arrow/csv/converter-test.cc\nindex 2534541d31..ea12c0b66a 100644\n--- a/cpp/src/arrow/csv/converter-test.cc\n+++ b/cpp/src/arrow/csv/converter-test.cc\n@@ -176,13 +176,30 @@ TEST(IntegerConversion, Basics) {\n }\n \n TEST(IntegerConversion, Nulls) {\n-  AssertConversion<Int8Type, int8_t>(int8(), {\"12,34\\n\", \",-128\\n\"},\n-                                     {{12, 0}, {34, -128}},\n-                                     {{true, false}, {true, true}});\n+  AssertConversion<Int8Type, int8_t>(int8(), {\"12,N/A\\n\", \",-128\\n\"},\n+                                     {{12, 0}, {0, -128}},\n+                                     {{true, false}, {false, true}});\n \n   AssertConversionAllNulls<Int8Type, int8_t>(int8());\n }\n \n+TEST(IntegerConversion, CustomNulls) {\n+  auto options = ConvertOptions::Defaults();\n+  options.null_values = {\"xxx\", \"zzz\"};\n+\n+  AssertConversion<Int8Type, int8_t>(int8(), {\"12,xxx\\n\", \"zzz,-128\\n\"},\n+                                     {{12, 0}, {0, -128}}, {{true, false}, {false, true}},\n+                                     options);\n+\n+  AssertConversionError(int8(), {\",xxx,N/A\\n\"}, {0, 2}, options);\n+\n+  // Duplicate nulls allowed\n+  options.null_values = {\"xxx\", \"zzz\", \"xxx\"};\n+  AssertConversion<Int8Type, int8_t>(int8(), {\"12,xxx\\n\", \"zzz,-128\\n\"},\n+                                     {{12, 0}, {0, -128}}, {{true, false}, {false, true}},\n+                                     options);\n+}\n+\n TEST(IntegerConversion, Whitespace) {\n   AssertConversion<Int32Type, int32_t>(int32(), {\" 12,34 \\n\", \" 56 ,78\\n\"},\n                                        {{12, 56}, {34, 78}});\n@@ -203,6 +220,15 @@ TEST(FloatingPointConversion, Nulls) {\n   AssertConversionAllNulls<DoubleType, double>(float64());\n }\n \n+TEST(FloatingPointConversion, CustomNulls) {\n+  auto options = ConvertOptions::Defaults();\n+  options.null_values = {\"xxx\", \"zzz\"};\n+\n+  AssertConversion<FloatType, float>(float32(), {\"1.5,xxx\\n\", \"zzz,-1e10\\n\"},\n+                                     {{1.5, 0.}, {0., -1e10f}},\n+                                     {{true, false}, {false, true}}, options);\n+}\n+\n TEST(FloatingPointConversion, Whitespace) {\n   AssertConversion<DoubleType, double>(float64(), {\" 12,34.5\\n\", \" 0 ,-1e100 \\n\"},\n                                        {{12., 0.}, {34.5, -1e100}});\n@@ -220,6 +246,15 @@ TEST(BooleanConversion, Nulls) {\n                                       {{true, true}, {false, true}});\n }\n \n+TEST(BooleanConversion, CustomNulls) {\n+  auto options = ConvertOptions::Defaults();\n+  options.null_values = {\"xxx\", \"zzz\"};\n+\n+  AssertConversion<BooleanType, bool>(boolean(), {\"true,xxx\\n\", \"zzz,0\\n\"},\n+                                      {{true, false}, {false, false}},\n+                                      {{true, false}, {false, true}}, options);\n+}\n+\n TEST(TimestampConversion, Basics) {\n   auto type = timestamp(TimeUnit::SECOND);\n \n@@ -243,6 +278,16 @@ TEST(TimestampConversion, Nulls) {\n                                            {{true}, {false}, {false}});\n }\n \n+TEST(TimestampConversion, CustomNulls) {\n+  auto options = ConvertOptions::Defaults();\n+  options.null_values = {\"xxx\", \"zzz\"};\n+\n+  auto type = timestamp(TimeUnit::MILLI);\n+  AssertConversion<TimestampType, int64_t>(type, {\"1970-01-01 00:01:00,xxx,zzz\\n\"},\n+                                           {{60000}, {0}, {0}},\n+                                           {{true}, {false}, {false}}, options);\n+}\n+\n TEST(DecimalConversion, NotImplemented) {\n   std::shared_ptr<Converter> converter;\n   ASSERT_RAISES(NotImplemented,\ndiff --git a/cpp/src/arrow/csv/converter.cc b/cpp/src/arrow/csv/converter.cc\nindex 8a249a68c0..c1f182e24e 100644\n--- a/cpp/src/arrow/csv/converter.cc\n+++ b/cpp/src/arrow/csv/converter.cc\n@@ -21,6 +21,7 @@\n #include <sstream>\n #include <string>\n #include <type_traits>\n+#include <vector>\n \n #include \"arrow/builder.h\"\n #include \"arrow/csv/parser.h\"\n@@ -29,12 +30,15 @@\n #include \"arrow/type.h\"\n #include \"arrow/type_traits.h\"\n #include \"arrow/util/parsing.h\"  // IWYU pragma: keep\n+#include \"arrow/util/trie.h\"\n #include \"arrow/util/utf8.h\"\n \n namespace arrow {\n namespace csv {\n \n using internal::StringConverter;\n+using internal::Trie;\n+using internal::TrieBuilder;\n \n namespace {\n \n@@ -58,115 +62,28 @@ class ConcreteConverter : public Converter {\n   using Converter::Converter;\n \n  protected:\n-  Status Initialize() override { return Status::OK(); }\n+  Status Initialize() override;\n   inline bool IsNull(const uint8_t* data, uint32_t size, bool quoted);\n+\n+  Trie null_trie_;\n };\n \n-// Recognize various spellings of null values.  The list of possible spellings\n-// is taken from Pandas read_csv() documentation.\n+Status ConcreteConverter::Initialize() {\n+  // TODO no need to build a separate Trie for each Converter instance\n+  TrieBuilder builder;\n+  for (const auto& s : options_.null_values) {\n+    RETURN_NOT_OK(builder.Append(s, true /* allow_duplicates */));\n+  }\n+  null_trie_ = builder.Finish();\n+  return Status::OK();\n+}\n+\n bool ConcreteConverter::IsNull(const uint8_t* data, uint32_t size, bool quoted) {\n   if (quoted) {\n     return false;\n   }\n-  if (size == 0) {\n-    return true;\n-  }\n-  // No 1-character null value exists\n-  if (size == 1) {\n-    return false;\n-  }\n-\n-  // XXX if the CSV parser guaranteed enough excess bytes at the end of the\n-  // parsed area, we wouldn't need to always check size before comparing characters.\n-\n-  auto chars = reinterpret_cast<const char*>(data);\n-  auto first = chars[0];\n-  auto second = chars[1];\n-  switch (first) {\n-    case 'N': {\n-      // \"NA\", \"N/A\", \"NaN\", \"NULL\"\n-      if (size == 2) {\n-        return second == 'A';\n-      }\n-      auto third = chars[2];\n-      if (size == 3) {\n-        return (second == '/' && third == 'A') || (second == 'a' && third == 'N');\n-      }\n-      if (size == 4) {\n-        return (second == 'U' && third == 'L' && chars[3] == 'L');\n-      }\n-      return false;\n-    }\n-    case 'n': {\n-      // \"n/a\", \"nan\", \"null\"\n-      if (size == 2) {\n-        return false;\n-      }\n-      auto third = chars[2];\n-      if (size == 3) {\n-        return (second == '/' && third == 'a') || (second == 'a' && third == 'n');\n-      }\n-      if (size == 4) {\n-        return (second == 'u' && third == 'l' && chars[3] == 'l');\n-      }\n-      return false;\n-    }\n-    case '1': {\n-      // '1.#IND', '1.#QNAN'\n-      if (size == 6) {\n-        // '#' is the most unlikely char here, check it first\n-        return (chars[2] == '#' && chars[1] == '.' && chars[3] == 'I' &&\n-                chars[4] == 'N' && chars[5] == 'D');\n-      }\n-      if (size == 7) {\n-        return (chars[2] == '#' && chars[1] == '.' && chars[3] == 'Q' &&\n-                chars[4] == 'N' && chars[5] == 'A' && chars[6] == 'N');\n-      }\n-      return false;\n-    }\n-    case '-': {\n-      switch (second) {\n-        case 'N':\n-          // \"-NaN\"\n-          return (size == 4 && chars[2] == 'a' && chars[3] == 'N');\n-        case 'n':\n-          // \"-nan\"\n-          return (size == 4 && chars[2] == 'a' && chars[3] == 'n');\n-        case '1':\n-          // \"-1.#IND\", \"-1.#QNAN\"\n-          if (size == 7) {\n-            return (chars[3] == '#' && chars[2] == '.' && chars[4] == 'I' &&\n-                    chars[5] == 'N' && chars[6] == 'D');\n-          }\n-          if (size == 8) {\n-            return (chars[3] == '#' && chars[2] == '.' && chars[4] == 'Q' &&\n-                    chars[5] == 'N' && chars[6] == 'A' && chars[7] == 'N');\n-          }\n-          return false;\n-        default:\n-          return false;\n-      }\n-    }\n-    case '#': {\n-      // \"#N/A\", \"#N/A N/A\", \"#NA\"\n-      if (size < 3 || chars[1] != 'N') {\n-        return false;\n-      }\n-      auto third = chars[2];\n-      if (size == 3) {\n-        return third == 'A';\n-      }\n-      if (size == 4) {\n-        return third == '/' && chars[3] == 'A';\n-      }\n-      if (size == 8) {\n-        return std::memcmp(data + 2, \"/A N/A\", 5) == 0;\n-      }\n-      return false;\n-    }\n-    default:\n-      return false;\n-  }\n+  return null_trie_.Find(util::string_view(reinterpret_cast<const char*>(data), size)) >=\n+         0;\n }\n \n /////////////////////////////////////////////////////////////////////////\ndiff --git a/cpp/src/arrow/csv/converter.h b/cpp/src/arrow/csv/converter.h\nindex 38ade1d21a..d64fe695d0 100644\n--- a/cpp/src/arrow/csv/converter.h\n+++ b/cpp/src/arrow/csv/converter.h\n@@ -57,7 +57,7 @@ class ARROW_EXPORT Converter {\n \n   virtual Status Initialize() = 0;\n \n-  ConvertOptions options_;\n+  const ConvertOptions options_;\n   MemoryPool* pool_;\n   std::shared_ptr<DataType> type_;\n };\ndiff --git a/cpp/src/arrow/csv/options.cc b/cpp/src/arrow/csv/options.cc\nindex fccf0b67db..01e687b834 100644\n--- a/cpp/src/arrow/csv/options.cc\n+++ b/cpp/src/arrow/csv/options.cc\n@@ -22,7 +22,14 @@ namespace csv {\n \n ParseOptions ParseOptions::Defaults() { return ParseOptions(); }\n \n-ConvertOptions ConvertOptions::Defaults() { return ConvertOptions(); }\n+ConvertOptions ConvertOptions::Defaults() {\n+  auto options = ConvertOptions();\n+  // The default list of possible null spellings is taken from Pandas' read_csv().\n+  options.null_values = {\"\",     \"#N/A\", \"#N/A N/A\", \"#NA\",     \"-1.#IND\", \"-1.#QNAN\",\n+                         \"-NaN\", \"-nan\", \"1.#IND\",   \"1.#QNAN\", \"N/A\",     \"NA\",\n+                         \"NULL\", \"NaN\",  \"n/a\",      \"nan\",     \"null\"};\n+  return options;\n+}\n \n ReadOptions ReadOptions::Defaults() { return ReadOptions(); }\n \ndiff --git a/cpp/src/arrow/csv/options.h b/cpp/src/arrow/csv/options.h\nindex 10232d45e8..2b4653ccdc 100644\n--- a/cpp/src/arrow/csv/options.h\n+++ b/cpp/src/arrow/csv/options.h\n@@ -22,6 +22,7 @@\n #include <memory>\n #include <string>\n #include <unordered_map>\n+#include <vector>\n \n #include \"arrow/util/visibility.h\"\n \n@@ -66,6 +67,8 @@ struct ARROW_EXPORT ConvertOptions {\n   bool check_utf8 = true;\n   // Optional per-column types (disabling type inference on those columns)\n   std::unordered_map<std::string, std::shared_ptr<DataType>> column_types;\n+  // Recognized spellings for null values\n+  std::vector<std::string> null_values;\n \n   static ConvertOptions Defaults();\n };\ndiff --git a/cpp/src/arrow/test-util.h b/cpp/src/arrow/test-util.h\nindex 7fe7685f5a..3332163309 100644\n--- a/cpp/src/arrow/test-util.h\n+++ b/cpp/src/arrow/test-util.h\n@@ -69,12 +69,12 @@\n     ASSERT_EQ((message), s.ToString());                                   \\\n   } while (false)\n \n-#define ASSERT_OK(expr)                                               \\\n-  do {                                                                \\\n-    ::arrow::Status s = (expr);                                       \\\n-    if (!s.ok()) {                                                    \\\n-      FAIL() << \"'\" STRINGIFY(expr) \"' failed with \" << s.ToString(); \\\n-    }                                                                 \\\n+#define ASSERT_OK(expr)                                                \\\n+  do {                                                                 \\\n+    ::arrow::Status _s = (expr);                                       \\\n+    if (!_s.ok()) {                                                    \\\n+      FAIL() << \"'\" STRINGIFY(expr) \"' failed with \" << _s.ToString(); \\\n+    }                                                                  \\\n   } while (false)\n \n #define ASSERT_OK_NO_THROW(expr) ASSERT_NO_THROW(ASSERT_OK(expr))\ndiff --git a/cpp/src/arrow/util/CMakeLists.txt b/cpp/src/arrow/util/CMakeLists.txt\nindex b13b2f367b..e43b0cd7e5 100644\n--- a/cpp/src/arrow/util/CMakeLists.txt\n+++ b/cpp/src/arrow/util/CMakeLists.txt\n@@ -62,6 +62,7 @@ ADD_ARROW_TEST(rle-encoding-test)\n ADD_ARROW_TEST(stl-util-test)\n ADD_ARROW_TEST(task-group-test)\n ADD_ARROW_TEST(thread-pool-test)\n+ADD_ARROW_TEST(trie-test)\n ADD_ARROW_TEST(utf8-util-test)\n \n ADD_ARROW_BENCHMARK(bit-util-benchmark)\n@@ -71,4 +72,5 @@ ADD_ARROW_BENCHMARK(hashing-benchmark)\n ADD_ARROW_BENCHMARK(int-util-benchmark)\n ADD_ARROW_BENCHMARK(lazy-benchmark)\n ADD_ARROW_BENCHMARK(number-parsing-benchmark)\n+ADD_ARROW_BENCHMARK(trie-benchmark)\n ADD_ARROW_BENCHMARK(utf8-util-benchmark)\ndiff --git a/cpp/src/arrow/util/hashing-benchmark.cc b/cpp/src/arrow/util/hashing-benchmark.cc\nindex 7d91f0f536..09d00afd5f 100644\n--- a/cpp/src/arrow/util/hashing-benchmark.cc\n+++ b/cpp/src/arrow/util/hashing-benchmark.cc\n@@ -74,6 +74,7 @@ static void BM_HashIntegers(benchmark::State& state) {  // NOLINT non-const refe\n     benchmark::DoNotOptimize(total);\n   }\n   state.SetBytesProcessed(2 * state.iterations() * values.size() * sizeof(int64_t));\n+  state.SetItemsProcessed(2 * state.iterations() * values.size());\n }\n \n static void BenchmarkStringHashing(benchmark::State& state,  // NOLINT non-const reference\n@@ -92,6 +93,7 @@ static void BenchmarkStringHashing(benchmark::State& state,  // NOLINT non-const\n     benchmark::DoNotOptimize(total);\n   }\n   state.SetBytesProcessed(2 * state.iterations() * total_size);\n+  state.SetItemsProcessed(2 * state.iterations() * values.size());\n }\n \n static void BM_HashSmallStrings(benchmark::State& state) {  // NOLINT non-const reference\ndiff --git a/cpp/src/arrow/util/trie-benchmark.cc b/cpp/src/arrow/util/trie-benchmark.cc\nnew file mode 100644\nindex 0000000000..acc2892689\n--- /dev/null\n+++ b/cpp/src/arrow/util/trie-benchmark.cc\n@@ -0,0 +1,221 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"benchmark/benchmark.h\"\n+\n+#include <cstdint>\n+#include <string>\n+#include <vector>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/test-util.h\"\n+#include \"arrow/util/trie.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+static inline bool InlinedNullLookup(util::string_view s) {\n+  // An inlined version of trie lookup for a specific set of strings\n+  // (see AllNulls())\n+  auto size = s.length();\n+  auto data = s.data();\n+  if (size == 0) {\n+    return false;\n+  }\n+  if (size == 1) {\n+    return false;\n+  }\n+\n+  auto chars = reinterpret_cast<const char*>(data);\n+  auto first = chars[0];\n+  auto second = chars[1];\n+  switch (first) {\n+    case 'N': {\n+      // \"NA\", \"N/A\", \"NaN\", \"NULL\"\n+      if (size == 2) {\n+        return second == 'A';\n+      }\n+      auto third = chars[2];\n+      if (size == 3) {\n+        return (second == '/' && third == 'A') || (second == 'a' && third == 'N');\n+      }\n+      if (size == 4) {\n+        return (second == 'U' && third == 'L' && chars[3] == 'L');\n+      }\n+      return false;\n+    }\n+    case 'n': {\n+      // \"n/a\", \"nan\", \"null\"\n+      if (size == 2) {\n+        return false;\n+      }\n+      auto third = chars[2];\n+      if (size == 3) {\n+        return (second == '/' && third == 'a') || (second == 'a' && third == 'n');\n+      }\n+      if (size == 4) {\n+        return (second == 'u' && third == 'l' && chars[3] == 'l');\n+      }\n+      return false;\n+    }\n+    case '1': {\n+      // '1.#IND', '1.#QNAN'\n+      if (size == 6) {\n+        // '#' is the most unlikely char here, check it first\n+        return (chars[2] == '#' && chars[1] == '.' && chars[3] == 'I' &&\n+                chars[4] == 'N' && chars[5] == 'D');\n+      }\n+      if (size == 7) {\n+        return (chars[2] == '#' && chars[1] == '.' && chars[3] == 'Q' &&\n+                chars[4] == 'N' && chars[5] == 'A' && chars[6] == 'N');\n+      }\n+      return false;\n+    }\n+    case '-': {\n+      switch (second) {\n+        case 'N':\n+          // \"-NaN\"\n+          return (size == 4 && chars[2] == 'a' && chars[3] == 'N');\n+        case 'n':\n+          // \"-nan\"\n+          return (size == 4 && chars[2] == 'a' && chars[3] == 'n');\n+        case '1':\n+          // \"-1.#IND\", \"-1.#QNAN\"\n+          if (size == 7) {\n+            return (chars[3] == '#' && chars[2] == '.' && chars[4] == 'I' &&\n+                    chars[5] == 'N' && chars[6] == 'D');\n+          }\n+          if (size == 8) {\n+            return (chars[3] == '#' && chars[2] == '.' && chars[4] == 'Q' &&\n+                    chars[5] == 'N' && chars[6] == 'A' && chars[7] == 'N');\n+          }\n+          return false;\n+        default:\n+          return false;\n+      }\n+    }\n+    case '#': {\n+      // \"#N/A\", \"#N/A N/A\", \"#NA\"\n+      if (size < 3 || chars[1] != 'N') {\n+        return false;\n+      }\n+      auto third = chars[2];\n+      if (size == 3) {\n+        return third == 'A';\n+      }\n+      if (size == 4) {\n+        return third == '/' && chars[3] == 'A';\n+      }\n+      if (size == 8) {\n+        return std::memcmp(data + 2, \"/A N/A\", 5) == 0;\n+      }\n+      return false;\n+    }\n+    default:\n+      return false;\n+  }\n+}\n+\n+std::vector<std::string> AllNulls() {\n+  return {\"#N/A\",    \"#N/A N/A\", \"#NA\", \"-1.#IND\", \"-1.#QNAN\", \"-NaN\", \"-nan\", \"1.#IND\",\n+          \"1.#QNAN\", \"N/A\",      \"NA\",  \"NULL\",    \"NaN\",      \"n/a\",  \"nan\",  \"null\"};\n+}\n+\n+Trie MakeNullsTrie() {\n+  auto nulls = AllNulls();\n+\n+  TrieBuilder builder;\n+  for (const auto& str : AllNulls()) {\n+    ABORT_NOT_OK(builder.Append(str));\n+  }\n+  return builder.Finish();\n+}\n+\n+std::vector<std::string> Expand(const std::vector<std::string>& base, size_t n) {\n+  std::vector<std::string> result;\n+  result.reserve(n);\n+\n+  while (true) {\n+    for (const auto& v : base) {\n+      result.push_back(v);\n+      if (result.size() == n) {\n+        return result;\n+      }\n+    }\n+  }\n+}\n+\n+static void BenchmarkTrieLookups(benchmark::State& state,  // NOLINT non-const reference\n+                                 const std::vector<std::string>& strings) {\n+  Trie trie = MakeNullsTrie();\n+  int32_t total = 0;\n+\n+  auto lookups = Expand(strings, 100);\n+\n+  for (auto _ : state) {\n+    for (const auto& s : lookups) {\n+      total += trie.Find(s);\n+    }\n+  }\n+  benchmark::DoNotOptimize(total);\n+  state.SetItemsProcessed(state.iterations() * lookups.size());\n+}\n+\n+static void BenchmarkInlinedTrieLookups(\n+    benchmark::State& state,  // NOLINT non-const reference\n+    const std::vector<std::string>& strings) {\n+  int32_t total = 0;\n+\n+  auto lookups = Expand(strings, 100);\n+\n+  for (auto _ : state) {\n+    for (const auto& s : lookups) {\n+      total += InlinedNullLookup(s);\n+    }\n+  }\n+  benchmark::DoNotOptimize(total);\n+  state.SetItemsProcessed(state.iterations() * lookups.size());\n+}\n+\n+static void BM_TrieLookupFound(benchmark::State& state) {  // NOLINT non-const reference\n+  BenchmarkTrieLookups(state, {\"N/A\", \"null\", \"-1.#IND\", \"N/A\"});\n+}\n+\n+static void BM_TrieLookupNotFound(\n+    benchmark::State& state) {  // NOLINT non-const reference\n+  BenchmarkTrieLookups(state, {\"None\", \"1.0\", \"\", \"abc\"});\n+}\n+\n+static void BM_InlinedTrieLookupFound(\n+    benchmark::State& state) {  // NOLINT non-const reference\n+  BenchmarkInlinedTrieLookups(state, {\"N/A\", \"null\", \"-1.#IND\", \"N/A\"});\n+}\n+\n+static void BM_InlinedTrieLookupNotFound(\n+    benchmark::State& state) {  // NOLINT non-const reference\n+  BenchmarkInlinedTrieLookups(state, {\"None\", \"1.0\", \"\", \"abc\"});\n+}\n+\n+static const int kRepetitions = 2;\n+\n+BENCHMARK(BM_TrieLookupFound)->Repetitions(kRepetitions);\n+BENCHMARK(BM_TrieLookupNotFound)->Repetitions(kRepetitions);\n+BENCHMARK(BM_InlinedTrieLookupFound)->Repetitions(kRepetitions);\n+BENCHMARK(BM_InlinedTrieLookupNotFound)->Repetitions(kRepetitions);\n+\n+}  // namespace internal\n+}  // namespace arrow\ndiff --git a/cpp/src/arrow/util/trie-test.cc b/cpp/src/arrow/util/trie-test.cc\nnew file mode 100644\nindex 0000000000..33eefa9d93\n--- /dev/null\n+++ b/cpp/src/arrow/util/trie-test.cc\n@@ -0,0 +1,283 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <cstring>\n+#include <string>\n+#include <unordered_map>\n+#include <utility>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/test-util.h\"\n+#include \"arrow/util/trie.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+TEST(SmallString, Basics) {\n+  using SS = SmallString<5>;\n+  {\n+    SS s;\n+    ASSERT_EQ(s.length(), 0);\n+    ASSERT_EQ(util::string_view(s), util::string_view(\"\"));\n+    ASSERT_EQ(s, \"\");\n+    ASSERT_NE(s, \"x\");\n+    ASSERT_EQ(sizeof(s), 6);\n+  }\n+  {\n+    SS s(\"abc\");\n+    ASSERT_EQ(s.length(), 3);\n+    ASSERT_EQ(util::string_view(s), util::string_view(\"abc\"));\n+    ASSERT_EQ(std::memcmp(s.data(), \"abc\", 3), 0);\n+    ASSERT_EQ(s, \"abc\");\n+    ASSERT_NE(s, \"ab\");\n+  }\n+}\n+\n+TEST(SmallString, Assign) {\n+  using SS = SmallString<5>;\n+  auto s = SS();\n+\n+  s = util::string_view(\"abc\");\n+  ASSERT_EQ(s.length(), 3);\n+  ASSERT_EQ(util::string_view(s), util::string_view(\"abc\"));\n+  ASSERT_EQ(std::memcmp(s.data(), \"abc\", 3), 0);\n+  ASSERT_EQ(s, \"abc\");\n+  ASSERT_NE(s, \"ab\");\n+\n+  s = std::string(\"ghijk\");\n+  ASSERT_EQ(s.length(), 5);\n+  ASSERT_EQ(util::string_view(s), util::string_view(\"ghijk\"));\n+  ASSERT_EQ(std::memcmp(s.data(), \"ghijk\", 5), 0);\n+  ASSERT_EQ(s, \"ghijk\");\n+  ASSERT_NE(s, \"\");\n+\n+  s = SS(\"xy\");\n+  ASSERT_EQ(s.length(), 2);\n+  ASSERT_EQ(util::string_view(s), util::string_view(\"xy\"));\n+  ASSERT_EQ(std::memcmp(s.data(), \"xy\", 2), 0);\n+  ASSERT_EQ(s, \"xy\");\n+  ASSERT_NE(s, \"xyz\");\n+}\n+\n+TEST(SmallString, Substr) {\n+  using SS = SmallString<5>;\n+  {\n+    auto s = SS();\n+    ASSERT_EQ(s.substr(0), \"\");\n+    ASSERT_EQ(s.substr(0, 2), \"\");\n+  }\n+  {\n+    auto s = SS(\"abcd\");\n+    ASSERT_EQ(s.substr(0), \"abcd\");\n+    ASSERT_EQ(s.substr(1), \"bcd\");\n+    ASSERT_EQ(s.substr(4), \"\");\n+    ASSERT_EQ(s.substr(0, 0), \"\");\n+    ASSERT_EQ(s.substr(0, 3), \"abc\");\n+    ASSERT_EQ(s.substr(0, 4), \"abcd\");\n+    ASSERT_EQ(s.substr(1, 0), \"\");\n+    ASSERT_EQ(s.substr(1, 2), \"bc\");\n+    ASSERT_EQ(s.substr(4, 0), \"\");\n+    ASSERT_EQ(s.substr(4, 1), \"\");\n+  }\n+}\n+\n+static std::vector<std::string> AllNulls() {\n+  return {\"#N/A\",    \"#N/A N/A\", \"#NA\", \"-1.#IND\", \"-1.#QNAN\", \"-NaN\", \"-nan\", \"1.#IND\",\n+          \"1.#QNAN\", \"N/A\",      \"NA\",  \"NULL\",    \"NaN\",      \"n/a\",  \"nan\",  \"null\"};\n+}\n+\n+static void TestTrieContents(const Trie& trie, const std::vector<std::string>& entries) {\n+  std::unordered_map<std::string, int32_t> control;\n+  auto n_entries = static_cast<int32_t>(entries.size());\n+\n+  // Build control container\n+  for (int32_t i = 0; i < n_entries; ++i) {\n+    auto p = control.insert({entries[i], i});\n+    ASSERT_TRUE(p.second);\n+  }\n+\n+  // Check all existing entries in trie\n+  for (int32_t i = 0; i < n_entries; ++i) {\n+    ASSERT_EQ(i, trie.Find(entries[i])) << \"for string '\" << entries[i] << \"'\";\n+  }\n+\n+  auto CheckNotExists = [&control, &trie](const std::string& s) {\n+    auto p = control.find(s);\n+    if (p == control.end()) {\n+      ASSERT_EQ(-1, trie.Find(s)) << \"for string '\" << s << \"'\";\n+    }\n+  };\n+\n+  // Check potentially non-existing strings\n+  CheckNotExists(\"\");\n+  CheckNotExists(\"X\");\n+  CheckNotExists(\"abcdefxxxxxxxxxxxxxxx\");\n+\n+  // Check potentially non-existing variations of existing entries\n+  for (const auto& e : entries) {\n+    CheckNotExists(e + \"X\");\n+    if (e.size() > 0) {\n+      CheckNotExists(e.substr(0, 1));\n+      auto prefix = e.substr(0, e.size() - 1);\n+      CheckNotExists(prefix);\n+      CheckNotExists(prefix + \"X\");\n+      auto split_at = e.size() / 2;\n+      CheckNotExists(e.substr(0, split_at) + 'x' + e.substr(split_at + 1));\n+    }\n+  }\n+}\n+\n+static void TestTrieContents(const std::vector<std::string>& entries) {\n+  TrieBuilder builder;\n+  for (const auto& s : entries) {\n+    ASSERT_OK(builder.Append(s));\n+  }\n+  const Trie trie = builder.Finish();\n+  ASSERT_OK(trie.Validate());\n+\n+  TestTrieContents(trie, entries);\n+}\n+\n+TEST(Trie, Empty) {\n+  TrieBuilder builder;\n+  const Trie trie = builder.Finish();\n+  ASSERT_OK(trie.Validate());\n+\n+  ASSERT_EQ(-1, trie.Find(\"\"));\n+  ASSERT_EQ(-1, trie.Find(\"x\"));\n+}\n+\n+TEST(Trie, EmptyString) {\n+  TrieBuilder builder;\n+  ASSERT_OK(builder.Append(\"\"));\n+  const Trie trie = builder.Finish();\n+  ASSERT_OK(trie.Validate());\n+\n+  ASSERT_EQ(0, trie.Find(\"\"));\n+  ASSERT_EQ(-1, trie.Find(\"x\"));\n+}\n+\n+TEST(Trie, Basics1) {\n+  TestTrieContents({\"abc\", \"de\", \"f\"});\n+  TestTrieContents({\"abc\", \"de\", \"f\", \"\"});\n+}\n+\n+TEST(Trie, Basics2) {\n+  TestTrieContents({\"a\", \"abc\", \"abcd\", \"abcdef\"});\n+  TestTrieContents({\"\", \"a\", \"abc\", \"abcd\", \"abcdef\"});\n+}\n+\n+TEST(Trie, Basics3) {\n+  TestTrieContents({\"abcd\", \"ab\", \"a\"});\n+  TestTrieContents({\"abcd\", \"ab\", \"a\", \"\"});\n+}\n+\n+TEST(Trie, LongStrings) {\n+  TestTrieContents({\"abcdefghijklmnopqr\", \"abcdefghijklmnoprq\", \"defghijklmnopqrst\"});\n+  TestTrieContents({\"abcdefghijklmnopqr\", \"abcdefghijklmnoprq\", \"abcde\"});\n+}\n+\n+TEST(Trie, NullChars) {\n+  const std::string empty;\n+  const std::string nul(1, '\\x00');\n+  std::string a, b, c, d;\n+  a = \"x\" + nul + \"y\";\n+  b = \"x\" + nul + \"z\";\n+  c = nul + \"y\";\n+  d = nul;\n+  ASSERT_EQ(a.length(), 3);\n+  ASSERT_EQ(d.length(), 1);\n+\n+  TestTrieContents({a, b, c, d});\n+  TestTrieContents({a, b, c});\n+  TestTrieContents({a, b, c, d, \"\"});\n+  TestTrieContents({a, b, c, \"\"});\n+  TestTrieContents({d, c, b, a});\n+  TestTrieContents({c, b, a});\n+  TestTrieContents({d, c, b, a, \"\"});\n+  TestTrieContents({c, b, a, \"\"});\n+}\n+\n+TEST(Trie, NegativeChars) {\n+  // Test with characters >= 0x80 (to check the absence of sign issues)\n+  TestTrieContents({\"\\x7f\\x80\\x81\\xff\", \"\\x7f\\x80\\x81\", \"\\x7f\\xff\\x81\", \"\\xff\\x80\\x81\"});\n+}\n+\n+TEST(Trie, CSVNulls) { TestTrieContents(AllNulls()); }\n+\n+TEST(Trie, Duplicates) {\n+  {\n+    TrieBuilder builder;\n+    ASSERT_OK(builder.Append(\"ab\"));\n+    ASSERT_OK(builder.Append(\"abc\"));\n+    ASSERT_RAISES(Invalid, builder.Append(\"abc\"));\n+    ASSERT_OK(builder.Append(\"abcd\"));\n+    ASSERT_RAISES(Invalid, builder.Append(\"ab\"));\n+    ASSERT_OK(builder.Append(\"abcde\"));\n+    const Trie trie = builder.Finish();\n+\n+    TestTrieContents(trie, {\"ab\", \"abc\", \"abcd\", \"abcde\"});\n+  }\n+  {\n+    // With allow_duplicates = true\n+    TrieBuilder builder;\n+    ASSERT_OK(builder.Append(\"ab\", true));\n+    ASSERT_OK(builder.Append(\"abc\", true));\n+    ASSERT_OK(builder.Append(\"abc\", true));\n+    ASSERT_OK(builder.Append(\"abcd\", true));\n+    ASSERT_OK(builder.Append(\"ab\", true));\n+    ASSERT_OK(builder.Append(\"abcde\", true));\n+    const Trie trie = builder.Finish();\n+\n+    TestTrieContents(trie, {\"ab\", \"abc\", \"abcd\", \"abcde\"});\n+  }\n+}\n+\n+TEST(Trie, CapacityError) {\n+  // A trie uses 16-bit indices into various internal structures and\n+  // therefore has limited size available.\n+  TrieBuilder builder;\n+  uint8_t first, second, third;\n+  bool had_capacity_error = false;\n+  uint8_t s[] = \"\\x00\\x00\\x00\\x00\";\n+\n+  for (first = 1; first < 125; ++first) {\n+    s[0] = first;\n+    for (second = 1; second < 125; ++second) {\n+      s[1] = second;\n+      for (third = 1; third < 125; ++third) {\n+        s[2] = third;\n+        auto st = builder.Append(reinterpret_cast<const char*>(s));\n+        if (st.IsCapacityError()) {\n+          DCHECK_GE(first, 2);\n+          had_capacity_error = true;\n+          break;\n+        } else {\n+          ASSERT_OK(st);\n+        }\n+      }\n+    }\n+  }\n+  ASSERT_TRUE(had_capacity_error) << \"Should have produced CapacityError\";\n+}\n+\n+}  // namespace internal\n+}  // namespace arrow\ndiff --git a/cpp/src/arrow/util/trie.cc b/cpp/src/arrow/util/trie.cc\nnew file mode 100644\nindex 0000000000..eaa02b7c53\n--- /dev/null\n+++ b/cpp/src/arrow/util/trie.cc\n@@ -0,0 +1,209 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/util/trie.h\"\n+\n+#include <iostream>\n+#include <utility>\n+\n+#include \"arrow/util/logging.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+Status Trie::Validate() const {\n+  const auto n_nodes = static_cast<fast_index_type>(nodes_.size());\n+  if (size_ > n_nodes) {\n+    return Status::Invalid(\"Number of entries larger than number of nodes\");\n+  }\n+  for (const auto& node : nodes_) {\n+    if (node.found_index_ >= size_) {\n+      return Status::Invalid(\"Found index >= size\");\n+    }\n+    if (node.child_lookup_ != -1 &&\n+        node.child_lookup_ * 256 >\n+            static_cast<fast_index_type>(lookup_table_.size() - 256)) {\n+      return Status::Invalid(\"Child lookup base doesn't point to 256 valid indices\");\n+    }\n+  }\n+  for (const auto index : lookup_table_) {\n+    if (index >= n_nodes) {\n+      return Status::Invalid(\"Child lookup index out of bounds\");\n+    }\n+  }\n+  return Status::OK();\n+}\n+\n+void Trie::Dump(const Node* node, const std::string& indent) const {\n+  std::cerr << \"[\\\"\" << node->substring_ << \"\\\"]\";\n+  if (node->found_index_ >= 0) {\n+    std::cerr << \" *\";\n+  }\n+  std::cerr << \"\\n\";\n+  if (node->child_lookup_ >= 0) {\n+    auto child_indent = indent + \"   \";\n+    std::cerr << child_indent << \"|\\n\";\n+    for (fast_index_type i = 0; i < 256; ++i) {\n+      auto child_index = lookup_table_[node->child_lookup_ * 256 + i];\n+      if (child_index >= 0) {\n+        const Node* child = &nodes_[child_index];\n+        std::cerr << child_indent << \"|-> '\" << static_cast<char>(i) << \"' (\" << i\n+                  << \") -> \";\n+        Dump(child, child_indent);\n+      }\n+    }\n+  }\n+}\n+\n+void Trie::Dump() const { Dump(&nodes_[0], \"\"); }\n+\n+TrieBuilder::TrieBuilder() { trie_.nodes_.push_back(Trie::Node{-1, -1, \"\"}); }\n+\n+Status TrieBuilder::AppendChildNode(Trie::Node* parent, uint8_t ch, Trie::Node&& node) {\n+  if (parent->child_lookup_ == -1) {\n+    RETURN_NOT_OK(ExtendLookupTable(&parent->child_lookup_));\n+  }\n+  auto parent_lookup = parent->child_lookup_ * 256 + ch;\n+\n+  DCHECK_EQ(trie_.lookup_table_[parent_lookup], -1);\n+  if (trie_.nodes_.size() >= static_cast<size_t>(kMaxIndex)) {\n+    return Status::CapacityError(\"Trie out of bounds\");\n+  }\n+  trie_.nodes_.push_back(std::move(node));\n+  trie_.lookup_table_[parent_lookup] = static_cast<index_type>(trie_.nodes_.size() - 1);\n+  return Status::OK();\n+}\n+\n+Status TrieBuilder::CreateChildNode(Trie::Node* parent, uint8_t ch,\n+                                    util::string_view substring) {\n+  const auto kMaxSubstringLength = Trie::kMaxSubstringLength;\n+\n+  while (substring.length() > kMaxSubstringLength) {\n+    // Substring doesn't fit in node => create intermediate node\n+    auto mid_node = Trie::Node{-1, -1, substring.substr(0, kMaxSubstringLength)};\n+    RETURN_NOT_OK(AppendChildNode(parent, ch, std::move(mid_node)));\n+    // Recurse\n+    parent = &trie_.nodes_.back();\n+    ch = static_cast<uint8_t>(substring[kMaxSubstringLength]);\n+    substring = substring.substr(kMaxSubstringLength + 1);\n+  }\n+\n+  // Create final matching node\n+  auto child_node = Trie::Node{trie_.size_, -1, substring};\n+  RETURN_NOT_OK(AppendChildNode(parent, ch, std::move(child_node)));\n+  ++trie_.size_;\n+  return Status::OK();\n+}\n+\n+Status TrieBuilder::CreateChildNode(Trie::Node* parent, char ch,\n+                                    util::string_view substring) {\n+  return CreateChildNode(parent, static_cast<uint8_t>(ch), substring);\n+}\n+\n+Status TrieBuilder::ExtendLookupTable(index_type* out_index) {\n+  auto cur_size = trie_.lookup_table_.size();\n+  auto cur_index = cur_size / 256;\n+  if (cur_index > static_cast<size_t>(kMaxIndex)) {\n+    return Status::CapacityError(\"Trie out of bounds\");\n+  }\n+  trie_.lookup_table_.resize(cur_size + 256, -1);\n+  *out_index = static_cast<index_type>(cur_index);\n+  return Status::OK();\n+}\n+\n+Status TrieBuilder::SplitNode(fast_index_type node_index, fast_index_type split_at) {\n+  Trie::Node* node = &trie_.nodes_[node_index];\n+\n+  DCHECK_LT(split_at, node->substring_length());\n+\n+  // Before:\n+  //   {node} -> [...]\n+  // After:\n+  //   {node} -> [c] -> {out_node} -> [...]\n+  auto child_node = Trie::Node{node->found_index_, node->child_lookup_,\n+                               node->substring_.substr(split_at + 1)};\n+  auto ch = node->substring_[split_at];\n+  node->child_lookup_ = -1;\n+  node->found_index_ = -1;\n+  node->substring_ = node->substring_.substr(0, split_at);\n+  RETURN_NOT_OK(AppendChildNode(node, ch, std::move(child_node)));\n+\n+  return Status::OK();\n+}\n+\n+Status TrieBuilder::Append(util::string_view s, bool allow_duplicate) {\n+  // Find or create node for string\n+  fast_index_type node_index = 0;\n+  fast_index_type pos = 0;\n+  fast_index_type remaining = static_cast<fast_index_type>(s.length());\n+\n+  while (true) {\n+    Trie::Node* node = &trie_.nodes_[node_index];\n+    const auto substring_length = node->substring_length();\n+    const auto substring_data = node->substring_data();\n+\n+    for (fast_index_type i = 0; i < substring_length; ++i) {\n+      if (remaining == 0) {\n+        // New string too short => need to split node\n+        RETURN_NOT_OK(SplitNode(node_index, i));\n+        // Current node matches exactly\n+        node = &trie_.nodes_[node_index];\n+        node->found_index_ = trie_.size_++;\n+        return Status::OK();\n+      }\n+      if (s[pos] != substring_data[i]) {\n+        // Mismatching substring => need to split node\n+        RETURN_NOT_OK(SplitNode(node_index, i));\n+        // Create new node for mismatching char\n+        node = &trie_.nodes_[node_index];\n+        return CreateChildNode(node, s[pos], s.substr(pos + 1));\n+      }\n+      ++pos;\n+      --remaining;\n+    }\n+    if (remaining == 0) {\n+      // Node matches exactly\n+      if (node->found_index_ >= 0) {\n+        if (allow_duplicate) {\n+          return Status::OK();\n+        } else {\n+          return Status::Invalid(\"Duplicate entry in trie\");\n+        }\n+      }\n+      node->found_index_ = trie_.size_++;\n+      return Status::OK();\n+    }\n+    // Lookup child using next input character\n+    if (node->child_lookup_ == -1) {\n+      // Need to extend lookup table for this node\n+      RETURN_NOT_OK(ExtendLookupTable(&node->child_lookup_));\n+    }\n+    auto c = static_cast<uint8_t>(s[pos++]);\n+    --remaining;\n+    node_index = trie_.lookup_table_[node->child_lookup_ * 256 + c];\n+    if (node_index == -1) {\n+      // Child not found => need to create child node\n+      return CreateChildNode(node, c, s.substr(pos));\n+    }\n+    node = &trie_.nodes_[node_index];\n+  }\n+}\n+\n+Trie TrieBuilder::Finish() { return std::move(trie_); }\n+\n+}  // namespace internal\n+}  // namespace arrow\ndiff --git a/cpp/src/arrow/util/trie.h b/cpp/src/arrow/util/trie.h\nnew file mode 100644\nindex 0000000000..3e82bfd8ee\n--- /dev/null\n+++ b/cpp/src/arrow/util/trie.h\n@@ -0,0 +1,245 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#ifndef ARROW_UTIL_TRIE_H\n+#define ARROW_UTIL_TRIE_H\n+\n+#include <cassert>\n+#include <cstdint>\n+#include <cstring>\n+#include <limits>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/status.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+// A non-zero-terminated small string class.\n+// std::string usually has a small string optimization\n+// (see review at https://shaharmike.com/cpp/std-string/)\n+// but this one allows tight control and optimization of memory layout.\n+template <uint8_t N>\n+class SmallString {\n+ public:\n+  SmallString() : length_(0) {}\n+\n+  template <typename T>\n+  SmallString(const T& v) {  // NOLINT implicit constructor\n+    *this = util::string_view(v);\n+  }\n+\n+  SmallString& operator=(const util::string_view s) {\n+#ifndef NDEBUG\n+    CheckSize(s.size());\n+#endif\n+    length_ = static_cast<uint8_t>(s.size());\n+    std::memcpy(data_, s.data(), length_);\n+    return *this;\n+  }\n+\n+  SmallString& operator=(const std::string& s) {\n+    *this = util::string_view(s);\n+    return *this;\n+  }\n+\n+  SmallString& operator=(const char* s) {\n+    *this = util::string_view(s);\n+    return *this;\n+  }\n+\n+  explicit operator util::string_view() const {\n+    return util::string_view(data_, length_);\n+  }\n+\n+  const char* data() const { return data_; }\n+  size_t length() const { return length_; }\n+  bool empty() const { return length_ == 0; }\n+  char operator[](size_t pos) const {\n+#ifdef NDEBUG\n+    assert(pos <= length_);\n+#endif\n+    return data_[pos];\n+  }\n+\n+  SmallString substr(size_t pos) const {\n+    return SmallString(util::string_view(*this).substr(pos));\n+  }\n+\n+  SmallString substr(size_t pos, size_t count) const {\n+    return SmallString(util::string_view(*this).substr(pos, count));\n+  }\n+\n+  template <typename T>\n+  bool operator==(T&& other) const {\n+    return util::string_view(*this) == util::string_view(std::forward<T>(other));\n+  }\n+\n+  template <typename T>\n+  bool operator!=(T&& other) const {\n+    return util::string_view(*this) != util::string_view(std::forward<T>(other));\n+  }\n+\n+ protected:\n+  uint8_t length_;\n+  char data_[N];\n+\n+#ifndef NDEBUG\n+  void CheckSize(size_t n) { assert(n <= N); }\n+#endif\n+};\n+\n+template <uint8_t N>\n+std::ostream& operator<<(std::ostream& os, const SmallString<N>& str) {\n+  return os << util::string_view(str);\n+}\n+\n+// A trie class for byte strings, optimized for small sets of short strings.\n+// This class is immutable by design, use a TrieBuilder to construct it.\n+class ARROW_EXPORT Trie {\n+  using index_type = int16_t;\n+  using fast_index_type = int_fast16_t;\n+\n+ public:\n+  Trie() : size_(0) {}\n+  Trie(Trie&&) = default;\n+  Trie& operator=(Trie&&) = default;\n+\n+  int32_t Find(util::string_view s) const {\n+    const Node* node = &nodes_[0];\n+    fast_index_type pos = 0;\n+    fast_index_type remaining = static_cast<fast_index_type>(s.length());\n+\n+    while (remaining > 0) {\n+      auto substring_length = node->substring_length();\n+      if (substring_length > 0) {\n+        auto substring_data = node->substring_data();\n+        if (remaining < substring_length) {\n+          // Input too short\n+          return -1;\n+        }\n+        for (fast_index_type i = 0; i < substring_length; ++i) {\n+          if (s[pos++] != substring_data[i]) {\n+            // Mismatching substring\n+            return -1;\n+          }\n+          --remaining;\n+        }\n+        if (remaining == 0) {\n+          // Matched node exactly\n+          return node->found_index_;\n+        }\n+      }\n+      // Lookup child using next input character\n+      if (node->child_lookup_ == -1) {\n+        // Input too long\n+        return -1;\n+      }\n+      auto c = static_cast<uint8_t>(s[pos++]);\n+      --remaining;\n+      auto child_index = lookup_table_[node->child_lookup_ * 256 + c];\n+      if (child_index == -1) {\n+        // Child not found\n+        return -1;\n+      }\n+      node = &nodes_[child_index];\n+    }\n+\n+    // Input exhausted\n+    if (node->substring_.empty()) {\n+      // Matched node exactly\n+      return node->found_index_;\n+    } else {\n+      return -1;\n+    }\n+  }\n+\n+  Status Validate() const;\n+\n+  void Dump() const;\n+\n+ protected:\n+  static constexpr size_t kNodeSize = 16;\n+  static constexpr auto kMaxSubstringLength =\n+      kNodeSize - 2 * sizeof(index_type) - sizeof(int8_t);\n+\n+  struct Node {\n+    // If this node is a valid end of string, index of found string, otherwise -1\n+    index_type found_index_;\n+    // Base index for child lookup in lookup_table_ (-1 if no child nodes)\n+    index_type child_lookup_;\n+    // The substring for this node.\n+    SmallString<kMaxSubstringLength> substring_;\n+\n+    fast_index_type substring_length() const {\n+      return static_cast<fast_index_type>(substring_.length());\n+    }\n+    const char* substring_data() const { return substring_.data(); }\n+  };\n+\n+  static_assert(sizeof(Node) == kNodeSize, \"Unexpected node size\");\n+\n+  ARROW_DISALLOW_COPY_AND_ASSIGN(Trie);\n+\n+  void Dump(const Node* node, const std::string& indent) const;\n+\n+  // Node table: entry 0 is the root node\n+  std::vector<Node> nodes_;\n+\n+  // Indexed lookup structure: gives index in node table, or -1 if not found\n+  std::vector<index_type> lookup_table_;\n+\n+  // Number of entries\n+  index_type size_;\n+\n+  friend class TrieBuilder;\n+};\n+\n+class ARROW_EXPORT TrieBuilder {\n+  using index_type = Trie::index_type;\n+  using fast_index_type = Trie::fast_index_type;\n+\n+ public:\n+  TrieBuilder();\n+  Status Append(util::string_view s, bool allow_duplicate = false);\n+  Trie Finish();\n+\n+ protected:\n+  // Extend the lookup table by 256 entries, return the index of the new span\n+  Status ExtendLookupTable(index_type* out_lookup_index);\n+  // Split the node given by the index at the substring index `split_at`\n+  Status SplitNode(fast_index_type node_index, fast_index_type split_at);\n+  // Append an already constructed child node to the parent\n+  Status AppendChildNode(Trie::Node* parent, uint8_t ch, Trie::Node&& node);\n+  // Create a matching child node from this parent\n+  Status CreateChildNode(Trie::Node* parent, uint8_t ch, util::string_view substring);\n+  Status CreateChildNode(Trie::Node* parent, char ch, util::string_view substring);\n+\n+  Trie trie_;\n+\n+  static constexpr auto kMaxIndex = std::numeric_limits<index_type>::max();\n+};\n+\n+}  // namespace internal\n+}  // namespace arrow\n+\n+#endif  // ARROW_UTIL_TRIE_H\ndiff --git a/python/pyarrow/_csv.pyx b/python/pyarrow/_csv.pyx\nindex 91d1b08dee..db81046598 100644\n--- a/python/pyarrow/_csv.pyx\n+++ b/python/pyarrow/_csv.pyx\n@@ -252,6 +252,9 @@ cdef class ConvertOptions:\n     column_types: dict, optional\n         Map column names to column types\n         (disabling type inference on those columns).\n+    null_values: list, optional\n+        A sequence of strings that denote nulls in the data\n+        (defaults are appropriate in most cases).\n     \"\"\"\n     cdef:\n         CCSVConvertOptions options\n@@ -259,12 +262,14 @@ cdef class ConvertOptions:\n     # Avoid mistakingly creating attributes\n     __slots__ = ()\n \n-    def __init__(self, check_utf8=None, column_types=None):\n+    def __init__(self, check_utf8=None, column_types=None, null_values=None):\n         self.options = CCSVConvertOptions.Defaults()\n         if check_utf8 is not None:\n             self.check_utf8 = check_utf8\n         if column_types is not None:\n             self.column_types = column_types\n+        if null_values is not None:\n+            self.null_values = null_values\n \n     @property\n     def check_utf8(self):\n@@ -306,6 +311,17 @@ cdef class ConvertOptions:\n             assert typ != NULL\n             self.options.column_types[tobytes(k)] = typ\n \n+    @property\n+    def null_values(self):\n+        \"\"\"\n+        A sequence of strings that denote nulls in the data.\n+        \"\"\"\n+        return [frombytes(x) for x in self.options.null_values]\n+\n+    @null_values.setter\n+    def null_values(self, value):\n+        self.options.null_values = [tobytes(x) for x in value]\n+\n \n cdef _get_reader(input_file, shared_ptr[InputStream]* out):\n     use_memory_map = False\ndiff --git a/python/pyarrow/includes/libarrow.pxd b/python/pyarrow/includes/libarrow.pxd\nindex f4629af061..7ce03bf6eb 100644\n--- a/python/pyarrow/includes/libarrow.pxd\n+++ b/python/pyarrow/includes/libarrow.pxd\n@@ -954,6 +954,7 @@ cdef extern from \"arrow/csv/api.h\" namespace \"arrow::csv\" nogil:\n     cdef cppclass CCSVConvertOptions\" arrow::csv::ConvertOptions\":\n         c_bool check_utf8\n         unordered_map[c_string, shared_ptr[CDataType]] column_types\n+        vector[c_string] null_values\n \n         @staticmethod\n         CCSVConvertOptions Defaults()\ndiff --git a/python/pyarrow/tests/test_csv.py b/python/pyarrow/tests/test_csv.py\nindex c5816de8a4..14ba999fea 100644\n--- a/python/pyarrow/tests/test_csv.py\n+++ b/python/pyarrow/tests/test_csv.py\n@@ -151,9 +151,17 @@ def test_convert_options():\n     with pytest.raises(TypeError):\n         opts.column_types = 0\n \n-    opts = cls(check_utf8=False, column_types={'a': pa.null()})\n+    assert isinstance(opts.null_values, list)\n+    assert '' in opts.null_values\n+    assert 'N/A' in opts.null_values\n+    opts.null_values = ['xxx', 'yyy']\n+    assert opts.null_values == ['xxx', 'yyy']\n+\n+    opts = cls(check_utf8=False, column_types={'a': pa.null()},\n+               null_values=['xxx', 'yyy'])\n     assert opts.check_utf8 is False\n     assert opts.column_types == {'a': pa.null()}\n+    assert opts.null_values == ['xxx', 'yyy']\n \n \n class BaseTestCSVRead:\n@@ -233,6 +241,34 @@ def test_simple_timestamps(self):\n             'b': [datetime(1970, 1, 1), datetime(1989, 7, 14)],\n             }\n \n+    def test_custom_nulls(self):\n+        # Infer nulls with custom values\n+        opts = ConvertOptions(null_values=['Xxx', 'Zzz'])\n+        rows = b\"a,b,c,d\\nZzz,Xxx,1,2\\nXxx,#N/A,,Zzz\\n\"\n+        table = self.read_bytes(rows, convert_options=opts)\n+        schema = pa.schema([('a', pa.null()),\n+                            ('b', pa.string()),\n+                            ('c', pa.string()),\n+                            ('d', pa.int64())])\n+        assert table.schema == schema\n+        assert table.to_pydict() == {\n+            'a': [None, None],\n+            'b': [u\"Xxx\", u\"#N/A\"],\n+            'c': [u\"1\", u\"\"],\n+            'd': [2, None],\n+            }\n+\n+        opts = ConvertOptions(null_values=[])\n+        rows = b\"a,b\\n#N/A,\\n\"\n+        table = self.read_bytes(rows, convert_options=opts)\n+        schema = pa.schema([('a', pa.string()),\n+                            ('b', pa.string())])\n+        assert table.schema == schema\n+        assert table.to_pydict() == {\n+            'a': [u\"#N/A\"],\n+            'b': [u\"\"],\n+            }\n+\n     def test_column_types(self):\n         # Ask for specific column types in ConvertOptions\n         opts = ConvertOptions(column_types={'b': 'float32',\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-20T22:18:44.916+0000",
                    "updated": "2018-12-20T22:18:44.916+0000",
                    "started": "2018-12-20T22:18:44.915+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "177783",
                    "issueId": "13205741"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13205741/worklog/177787",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3236: ARROW-4087: [C++] Make CSV spellings of null values configurable\nURL: https://github.com/apache/arrow/pull/3236#issuecomment-449154595\n \n \n   On my hardware (xeon e3-1505m @ 3.7GHz) the Trie beats the inlined in not found\r\n   \r\n   ```\r\n   $ ./release/arrow-trie-benchmark \r\n   2018-12-20 16:21:37\r\n   Running ./release/arrow-trie-benchmark\r\n   Run on (8 X 3700 MHz CPU s)\r\n   CPU Caches:\r\n     L1 Data 32K (x4)\r\n     L1 Instruction 32K (x4)\r\n     L2 Unified 256K (x4)\r\n     L3 Unified 8192K (x1)\r\n   -------------------------------------------------------------------------------------\r\n   Benchmark                                              Time           CPU Iterations\r\n   -------------------------------------------------------------------------------------\r\n   BM_TrieLookupFound/repeats:2                         635 ns        635 ns    1093358   150.116M items/s\r\n   BM_TrieLookupFound/repeats:2                         636 ns        636 ns    1093358   149.879M items/s\r\n   BM_TrieLookupFound/repeats:2_mean                    636 ns        636 ns    1093358   149.997M items/s\r\n   BM_TrieLookupFound/repeats:2_median                  636 ns        636 ns    1093358   149.997M items/s\r\n   BM_TrieLookupFound/repeats:2_stddev                    1 ns          1 ns    1093358   171.131k items/s\r\n   BM_TrieLookupNotFound/repeats:2                      234 ns        234 ns    3014197   407.312M items/s\r\n   BM_TrieLookupNotFound/repeats:2                      235 ns        235 ns    3014197   405.283M items/s\r\n   BM_TrieLookupNotFound/repeats:2_mean                 235 ns        235 ns    3014197   406.297M items/s\r\n   BM_TrieLookupNotFound/repeats:2_median               235 ns        235 ns    3014197   406.297M items/s\r\n   BM_TrieLookupNotFound/repeats:2_stddev                 1 ns          1 ns    3014197   1.43421M items/s\r\n   BM_InlinedTrieLookupFound/repeats:2                  269 ns        269 ns    2578567   354.334M items/s\r\n   BM_InlinedTrieLookupFound/repeats:2                  268 ns        268 ns    2578567   355.394M items/s\r\n   BM_InlinedTrieLookupFound/repeats:2_mean             269 ns        269 ns    2578567   354.864M items/s\r\n   BM_InlinedTrieLookupFound/repeats:2_median           269 ns        269 ns    2578567   354.864M items/s\r\n   BM_InlinedTrieLookupFound/repeats:2_stddev             1 ns          1 ns    2578567   767.929k items/s\r\n   BM_InlinedTrieLookupNotFound/repeats:2               243 ns        243 ns    2879162   392.837M items/s\r\n   BM_InlinedTrieLookupNotFound/repeats:2               243 ns        243 ns    2879162   393.025M items/s\r\n   BM_InlinedTrieLookupNotFound/repeats:2_mean          243 ns        243 ns    2879162   392.931M items/s\r\n   BM_InlinedTrieLookupNotFound/repeats:2_median        243 ns        243 ns    2879162   392.931M items/s\r\n   BM_InlinedTrieLookupNotFound/repeats:2_stddev          0 ns          0 ns    2879162   136.835k items/s\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-20T22:22:54.370+0000",
                    "updated": "2018-12-20T22:22:54.370+0000",
                    "started": "2018-12-20T22:22:54.370+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "177787",
                    "issueId": "13205741"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13205741/worklog/178024",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #3236: ARROW-4087: [C++] Make CSV spellings of null values configurable\nURL: https://github.com/apache/arrow/pull/3236#discussion_r243619611\n \n \n\n ##########\n File path: cpp/src/arrow/util/trie-test.cc\n ##########\n @@ -0,0 +1,283 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <cstring>\n+#include <string>\n+#include <unordered_map>\n+#include <utility>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/test-util.h\"\n+#include \"arrow/util/trie.h\"\n+\n+namespace arrow {\n+namespace internal {\n+\n+TEST(SmallString, Basics) {\n+  using SS = SmallString<5>;\n+  {\n+    SS s;\n+    ASSERT_EQ(s.length(), 0);\n+    ASSERT_EQ(util::string_view(s), util::string_view(\"\"));\n+    ASSERT_EQ(s, \"\");\n+    ASSERT_NE(s, \"x\");\n+    ASSERT_EQ(sizeof(s), 6);\n+  }\n+  {\n+    SS s(\"abc\");\n+    ASSERT_EQ(s.length(), 3);\n+    ASSERT_EQ(util::string_view(s), util::string_view(\"abc\"));\n+    ASSERT_EQ(std::memcmp(s.data(), \"abc\", 3), 0);\n+    ASSERT_EQ(s, \"abc\");\n+    ASSERT_NE(s, \"ab\");\n+  }\n+}\n+\n+TEST(SmallString, Assign) {\n+  using SS = SmallString<5>;\n+  auto s = SS();\n+\n+  s = util::string_view(\"abc\");\n+  ASSERT_EQ(s.length(), 3);\n+  ASSERT_EQ(util::string_view(s), util::string_view(\"abc\"));\n+  ASSERT_EQ(std::memcmp(s.data(), \"abc\", 3), 0);\n+  ASSERT_EQ(s, \"abc\");\n+  ASSERT_NE(s, \"ab\");\n+\n+  s = std::string(\"ghijk\");\n+  ASSERT_EQ(s.length(), 5);\n+  ASSERT_EQ(util::string_view(s), util::string_view(\"ghijk\"));\n+  ASSERT_EQ(std::memcmp(s.data(), \"ghijk\", 5), 0);\n+  ASSERT_EQ(s, \"ghijk\");\n+  ASSERT_NE(s, \"\");\n+\n+  s = SS(\"xy\");\n+  ASSERT_EQ(s.length(), 2);\n+  ASSERT_EQ(util::string_view(s), util::string_view(\"xy\"));\n+  ASSERT_EQ(std::memcmp(s.data(), \"xy\", 2), 0);\n+  ASSERT_EQ(s, \"xy\");\n+  ASSERT_NE(s, \"xyz\");\n+}\n+\n+TEST(SmallString, Substr) {\n+  using SS = SmallString<5>;\n+  {\n+    auto s = SS();\n+    ASSERT_EQ(s.substr(0), \"\");\n+    ASSERT_EQ(s.substr(0, 2), \"\");\n+  }\n+  {\n+    auto s = SS(\"abcd\");\n+    ASSERT_EQ(s.substr(0), \"abcd\");\n+    ASSERT_EQ(s.substr(1), \"bcd\");\n+    ASSERT_EQ(s.substr(4), \"\");\n+    ASSERT_EQ(s.substr(0, 0), \"\");\n+    ASSERT_EQ(s.substr(0, 3), \"abc\");\n+    ASSERT_EQ(s.substr(0, 4), \"abcd\");\n+    ASSERT_EQ(s.substr(1, 0), \"\");\n+    ASSERT_EQ(s.substr(1, 2), \"bc\");\n+    ASSERT_EQ(s.substr(4, 0), \"\");\n+    ASSERT_EQ(s.substr(4, 1), \"\");\n+  }\n+}\n+\n+static std::vector<std::string> AllNulls() {\n+  return {\"#N/A\",    \"#N/A N/A\", \"#NA\", \"-1.#IND\", \"-1.#QNAN\", \"-NaN\", \"-nan\", \"1.#IND\",\n+          \"1.#QNAN\", \"N/A\",      \"NA\",  \"NULL\",    \"NaN\",      \"n/a\",  \"nan\",  \"null\"};\n+}\n+\n+static void TestTrieContents(const Trie& trie, const std::vector<std::string>& entries) {\n+  std::unordered_map<std::string, int32_t> control;\n+  auto n_entries = static_cast<int32_t>(entries.size());\n+\n+  // Build control container\n+  for (int32_t i = 0; i < n_entries; ++i) {\n+    auto p = control.insert({entries[i], i});\n+    ASSERT_TRUE(p.second);\n+  }\n+\n+  // Check all existing entries in trie\n+  for (int32_t i = 0; i < n_entries; ++i) {\n+    ASSERT_EQ(i, trie.Find(entries[i])) << \"for string '\" << entries[i] << \"'\";\n+  }\n+\n+  auto CheckNotExists = [&control, &trie](const std::string& s) {\n+    auto p = control.find(s);\n+    if (p == control.end()) {\n+      ASSERT_EQ(-1, trie.Find(s)) << \"for string '\" << s << \"'\";\n+    }\n+  };\n+\n+  // Check potentially non-existing strings\n+  CheckNotExists(\"\");\n+  CheckNotExists(\"X\");\n+  CheckNotExists(\"abcdefxxxxxxxxxxxxxxx\");\n+\n+  // Check potentially non-existing variations of existing entries\n+  for (const auto& e : entries) {\n+    CheckNotExists(e + \"X\");\n+    if (e.size() > 0) {\n+      CheckNotExists(e.substr(0, 1));\n+      auto prefix = e.substr(0, e.size() - 1);\n+      CheckNotExists(prefix);\n+      CheckNotExists(prefix + \"X\");\n+      auto split_at = e.size() / 2;\n+      CheckNotExists(e.substr(0, split_at) + 'x' + e.substr(split_at + 1));\n+    }\n+  }\n+}\n+\n+static void TestTrieContents(const std::vector<std::string>& entries) {\n+  TrieBuilder builder;\n+  for (const auto& s : entries) {\n+    ASSERT_OK(builder.Append(s));\n+  }\n+  const Trie trie = builder.Finish();\n+  ASSERT_OK(trie.Validate());\n+\n+  TestTrieContents(trie, entries);\n+}\n+\n+TEST(Trie, Empty) {\n+  TrieBuilder builder;\n+  const Trie trie = builder.Finish();\n+  ASSERT_OK(trie.Validate());\n+\n+  ASSERT_EQ(-1, trie.Find(\"\"));\n+  ASSERT_EQ(-1, trie.Find(\"x\"));\n+}\n+\n+TEST(Trie, EmptyString) {\n+  TrieBuilder builder;\n+  ASSERT_OK(builder.Append(\"\"));\n+  const Trie trie = builder.Finish();\n+  ASSERT_OK(trie.Validate());\n+\n+  ASSERT_EQ(0, trie.Find(\"\"));\n+  ASSERT_EQ(-1, trie.Find(\"x\"));\n+}\n+\n+TEST(Trie, Basics1) {\n+  TestTrieContents({\"abc\", \"de\", \"f\"});\n+  TestTrieContents({\"abc\", \"de\", \"f\", \"\"});\n+}\n+\n+TEST(Trie, Basics2) {\n+  TestTrieContents({\"a\", \"abc\", \"abcd\", \"abcdef\"});\n+  TestTrieContents({\"\", \"a\", \"abc\", \"abcd\", \"abcdef\"});\n+}\n+\n+TEST(Trie, Basics3) {\n+  TestTrieContents({\"abcd\", \"ab\", \"a\"});\n+  TestTrieContents({\"abcd\", \"ab\", \"a\", \"\"});\n+}\n+\n+TEST(Trie, LongStrings) {\n+  TestTrieContents({\"abcdefghijklmnopqr\", \"abcdefghijklmnoprq\", \"defghijklmnopqrst\"});\n+  TestTrieContents({\"abcdefghijklmnopqr\", \"abcdefghijklmnoprq\", \"abcde\"});\n \n Review comment:\n   Hmm... right, our small strings should be 11 chars long.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-21T15:53:40.258+0000",
                    "updated": "2018-12-21T15:53:40.258+0000",
                    "started": "2018-12-21T15:53:40.258+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "178024",
                    "issueId": "13205741"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13205741/worklog/178052",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #3236: ARROW-4087: [C++] Make CSV spellings of null values configurable\nURL: https://github.com/apache/arrow/pull/3236#issuecomment-449450916\n \n \n   For the record, I tried replacing the trie with a hash table: it makes CSV parsing (for columns of integers) around 10% slower.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-21T17:36:22.256+0000",
                    "updated": "2018-12-21T17:36:22.256+0000",
                    "started": "2018-12-21T17:36:22.255+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "178052",
                    "issueId": "13205741"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 10200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@36844b24[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6160801a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6abedf9c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@f3be281[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@22029fe2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6700c2b1[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7bdeb3f2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2ba169e2[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1d6a0efb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7c1e42ad[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@72513fff[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@521fb62e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10200,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Dec 20 22:18:35 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-12-20T22:18:35.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4087/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-12-20T14:31:14.000+0000",
        "updated": "2018-12-21T17:36:22.000+0000",
        "timeoriginalestimate": null,
        "description": "It could be useful to allow the user to configure the set of strings recognized as nulls.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Make CSV nulls configurable",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13205741/comment/16726266",
                    "id": "16726266",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 3236\n[https://github.com/apache/arrow/pull/3236]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-12-20T22:18:35.263+0000",
                    "updated": "2018-12-20T22:18:35.263+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|u006zs:",
        "customfield_12314139": null
    }
}