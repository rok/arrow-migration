{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13347213",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347213",
    "key": "ARROW-11004",
    "fields": {
        "parent": {
            "id": "13338723",
            "key": "ARROW-10486",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13338723",
            "fields": {
                "summary": "[FlightRPC][C++][Python] Header-based authentication",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                    "description": "The issue is open and ready for the assignee to start work on it.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                    "name": "Open",
                    "id": "1",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                        "id": 2,
                        "key": "new",
                        "colorName": "blue-gray",
                        "name": "To Do"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=tifflhl",
            "name": "tifflhl",
            "key": "tifflhl",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Tiffany Lam",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334621",
                "id": "12334621",
                "name": "FlightRPC"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=tifflhl",
            "name": "tifflhl",
            "key": "tifflhl",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Tiffany Lam",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=tifflhl",
            "name": "tifflhl",
            "key": "tifflhl",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Tiffany Lam",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10200,
            "total": 10200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11004/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 17,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347213/worklog/526979",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tifflhl commented on a change in pull request #8959:\nURL: https://github.com/apache/arrow/pull/8959#discussion_r546951872\n\n\n\n##########\nFile path: python/pyarrow/tests/test_flight.py\n##########\n@@ -506,6 +505,95 @@ def get_token(self):\n         return self.token\n \n \n+class NoopAuthHandler(ServerAuthHandler):\n+    \"\"\"A no-op auth handler.\"\"\"\n+\n+    def authenticate(self, outgoing, incoming):\n+        \"\"\"Do nothing.\"\"\"\n+\n+    def is_valid(self, token):\n+        \"\"\"Do nothing.\"\"\"\n+        return \"\"\n+\n+\n+class HeaderAuthServerMiddlewareFactory(ServerMiddlewareFactory):\n\nReview comment:\n       This PR is only for the client implementation of header based auth in Python, same as the C++ implementation done here: https://github.com/apache/arrow/pull/8724. I've created a new subtask in ARROW-10486 that reflects this scope of work: https://issues.apache.org/jira/browse/ARROW-11004.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-21T22:03:19.155+0000",
                    "updated": "2020-12-21T22:03:19.155+0000",
                    "started": "2020-12-21T22:03:19.155+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526979",
                    "issueId": "13347213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347213/worklog/526981",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tifflhl commented on a change in pull request #8959:\nURL: https://github.com/apache/arrow/pull/8959#discussion_r546952806\n\n\n\n##########\nFile path: python/pyarrow/_flight.pyx\n##########\n@@ -1150,6 +1156,38 @@ cdef class FlightClient(_Weakrefable):\n                 self.client.get().Authenticate(deref(c_options),\n                                                move(handler)))\n \n+    def authenticateBasicToken(self, username, password,\n+                               options: FlightCallOptions = None):\n+        \"\"\"Authenticate to the server with header token authentication.\n+\n+        Parameters\n+        ----------\n+        username : string\n+            Username to authenticate with\n+        password : string\n+            Password to authenticate with\n+        options  : FlightCallOptions\n+            Options for this call\n+\n+        Returns\n+        -------\n+        pair : pair[string, string]\n+            A pair representing the FlightCallOptions header\n+            entry of a bearer token.\n+        \"\"\"\n+        cdef:\n+            CResult[pair[c_string, c_string]] result\n+            CFlightCallOptions* c_options = FlightCallOptions.unwrap(options)\n+            c_string user = tobytes(username)\n+            c_string pw = tobytes(password)\n+\n+        with nogil:\n+            result = self.client.get().AuthenticateBasicToken(deref(c_options),\n\nReview comment:\n       Based on how the C++ code was implemented , the Python wrapper can only wrap the AuthenticateBasicToken method in the C++ client. Seems like we would need to expand the C++ client implementation if we were to have C++/Python impl match the Java client implementation. https://github.com/apache/arrow/pull/8724 -> C++ impl only exposed authenticateBasicToken.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-21T22:05:34.865+0000",
                    "updated": "2020-12-21T22:05:34.865+0000",
                    "started": "2020-12-21T22:05:34.865+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526981",
                    "issueId": "13347213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347213/worklog/526984",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8959:\nURL: https://github.com/apache/arrow/pull/8959#issuecomment-749225142\n\n\n   https://issues.apache.org/jira/browse/ARROW-11004\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-21T22:11:16.800+0000",
                    "updated": "2020-12-21T22:11:16.800+0000",
                    "started": "2020-12-21T22:11:16.800+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526984",
                    "issueId": "13347213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347213/worklog/527007",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tifflhl commented on a change in pull request #8959:\nURL: https://github.com/apache/arrow/pull/8959#discussion_r546987299\n\n\n\n##########\nFile path: python/pyarrow/_flight.pyx\n##########\n@@ -1150,6 +1156,38 @@ cdef class FlightClient(_Weakrefable):\n                 self.client.get().Authenticate(deref(c_options),\n                                                move(handler)))\n \n+    def authenticateBasicToken(self, username, password,\n+                               options: FlightCallOptions = None):\n+        \"\"\"Authenticate to the server with header token authentication.\n\nReview comment:\n       Addressed in new commit.\n\n##########\nFile path: python/pyarrow/includes/libarrow_flight.pxd\n##########\n@@ -307,6 +308,12 @@ cdef extern from \"arrow/flight/api.h\" namespace \"arrow\" nogil:\n         CStatus Authenticate(CFlightCallOptions& options,\n                              unique_ptr[CClientAuthHandler] auth_handler)\n \n+        # TODO: Add AuthenticateBasicToken\n\nReview comment:\n       Addressed in new commit.\n\n##########\nFile path: python/pyarrow/tests/test_flight.py\n##########\n@@ -506,6 +505,95 @@ def get_token(self):\n         return self.token\n \n \n+class NoopAuthHandler(ServerAuthHandler):\n+    \"\"\"A no-op auth handler.\"\"\"\n+\n+    def authenticate(self, outgoing, incoming):\n+        \"\"\"Do nothing.\"\"\"\n+\n+    def is_valid(self, token):\n+        \"\"\"Do nothing.\"\"\"\n+        return \"\"\n\nReview comment:\n       Returning None gives the error `Flight RPC failed with Python exception \"TypeError: expected bytes, NoneType found\"`. Based on the method's documentation [here](https://github.com/apache/arrow/blob/a2e7d3a87fb8fa1cc98a54029c0262df468838fa/python/pyarrow/_flight.pyx#L2046), returning an empty string is allowed, I added a comment to clarify the behaviour.\n\n##########\nFile path: python/pyarrow/tests/test_flight.py\n##########\n@@ -506,6 +505,95 @@ def get_token(self):\n         return self.token\n \n \n+class NoopAuthHandler(ServerAuthHandler):\n+    \"\"\"A no-op auth handler.\"\"\"\n+\n+    def authenticate(self, outgoing, incoming):\n+        \"\"\"Do nothing.\"\"\"\n+\n+    def is_valid(self, token):\n+        \"\"\"Do nothing.\"\"\"\n+        return \"\"\n+\n+\n+class HeaderAuthServerMiddlewareFactory(ServerMiddlewareFactory):\n+    \"\"\"Validates incoming username and password.\"\"\"\n+\n+    def start_call(self, info, headers):\n+        auth_header = headers.get('authorization')\n\nReview comment:\n       Addressed in new commit.\n\n##########\nFile path: python/pyarrow/tests/test_flight.py\n##########\n@@ -506,6 +505,95 @@ def get_token(self):\n         return self.token\n \n \n+class NoopAuthHandler(ServerAuthHandler):\n+    \"\"\"A no-op auth handler.\"\"\"\n+\n+    def authenticate(self, outgoing, incoming):\n+        \"\"\"Do nothing.\"\"\"\n+\n+    def is_valid(self, token):\n+        \"\"\"Do nothing.\"\"\"\n+        return \"\"\n+\n+\n+class HeaderAuthServerMiddlewareFactory(ServerMiddlewareFactory):\n+    \"\"\"Validates incoming username and password.\"\"\"\n+\n+    def start_call(self, info, headers):\n+        auth_header = headers.get('authorization')\n+        values = auth_header[0].split(' ')\n+        token = ''\n+\n+        if values[0] == 'Basic':\n+            decoded = base64.b64decode(values[1])\n+            pair = decoded.decode(\"utf-8\").split(':')\n+            if not (pair[0] == 'test' and pair[1] == 'password'):\n+                raise flight.FlightUnauthenticatedError('Invalid credentials')\n+            token = 'token1234'\n+        elif values[0] == 'Bearer':\n+            token = values[1]\n+            if not token == 'token1234':\n+                raise flight.FlightUnauthenticatedError('Invalid credentials')\n+        else:\n+            raise flight.FlightUnauthenticatedError('Invalid credentials')\n+\n+        return HeaderAuthServerMiddleware(token)\n+\n+\n+class HeaderAuthServerMiddleware(ServerMiddleware):\n+    \"\"\"A ServerMiddleware that transports incoming username and passowrd.\"\"\"\n+\n+    def __init__(self, token):\n+        self.token = token\n+\n+    def sending_headers(self):\n+        return {'authorization': 'Bearer ' + self.token}\n\nReview comment:\n       It would seem the C++ grpc impl does not allow capitals in key, when using capital A, the header was rejected due to https://github.com/grpc/grpc/blob/b1df40104c1720bde3b22ded451a037f11b5dc54/src/core/lib/surface/validate_metadata.cc#L78\n\n##########\nFile path: python/pyarrow/tests/test_flight.py\n##########\n@@ -506,6 +505,95 @@ def get_token(self):\n         return self.token\n \n \n+class NoopAuthHandler(ServerAuthHandler):\n+    \"\"\"A no-op auth handler.\"\"\"\n+\n+    def authenticate(self, outgoing, incoming):\n+        \"\"\"Do nothing.\"\"\"\n+\n+    def is_valid(self, token):\n+        \"\"\"Do nothing.\"\"\"\n+        return \"\"\n+\n+\n+class HeaderAuthServerMiddlewareFactory(ServerMiddlewareFactory):\n+    \"\"\"Validates incoming username and password.\"\"\"\n+\n+    def start_call(self, info, headers):\n+        auth_header = headers.get('authorization')\n+        values = auth_header[0].split(' ')\n+        token = ''\n+\n+        if values[0] == 'Basic':\n+            decoded = base64.b64decode(values[1])\n+            pair = decoded.decode(\"utf-8\").split(':')\n+            if not (pair[0] == 'test' and pair[1] == 'password'):\n+                raise flight.FlightUnauthenticatedError('Invalid credentials')\n+            token = 'token1234'\n+        elif values[0] == 'Bearer':\n+            token = values[1]\n+            if not token == 'token1234':\n+                raise flight.FlightUnauthenticatedError('Invalid credentials')\n+        else:\n+            raise flight.FlightUnauthenticatedError('Invalid credentials')\n+\n+        return HeaderAuthServerMiddleware(token)\n+\n+\n+class HeaderAuthServerMiddleware(ServerMiddleware):\n+    \"\"\"A ServerMiddleware that transports incoming username and passowrd.\"\"\"\n+\n+    def __init__(self, token):\n+        self.token = token\n+\n+    def sending_headers(self):\n+        return {'authorization': 'Bearer ' + self.token}\n+\n+\n+class HeaderAuthFlightServer(FlightServerBase):\n+    \"\"\"A Flight server that tests with basic token authentication. \"\"\"\n+\n+    def do_action(self, context, action):\n+        middleware = context.get_middleware(\"auth\")\n+        if middleware:\n+            headers = middleware.sending_headers()\n+            auth_header = headers.get('authorization')\n+            values = auth_header.split(' ')\n+            return [values[1].encode(\"utf-8\")]\n+        raise flight.FlightUnauthenticatedError(\n\nReview comment:\n       Addressed in new commit.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-21T23:44:10.840+0000",
                    "updated": "2020-12-21T23:44:10.840+0000",
                    "started": "2020-12-21T23:44:10.840+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527007",
                    "issueId": "13347213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347213/worklog/527015",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tifflhl commented on pull request #8959:\nURL: https://github.com/apache/arrow/pull/8959#issuecomment-749275421\n\n\n   I added a test example implementation called ClientHeaderAuthMiddleware, it intercepts headers from a HTTP header auth enabled server and make it accessible to the code using the FlightClient. A new test also demonstrates how to use the ClientMiddleware to intercept an Authorization header returned from the server and to use it in subsequent calls. \r\n   I don't think it makes sense to include the example ClientMiddleware to the .pyx pr .pxd, since they are not callable objects in C++. Also seems like a convention to not define explicit middleware objects in python, but rather, provide examples?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-22T00:46:42.888+0000",
                    "updated": "2020-12-22T00:46:42.888+0000",
                    "started": "2020-12-22T00:46:42.887+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527015",
                    "issueId": "13347213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347213/worklog/527086",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on a change in pull request #8959:\nURL: https://github.com/apache/arrow/pull/8959#discussion_r547117857\n\n\n\n##########\nFile path: python/pyarrow/tests/test_flight.py\n##########\n@@ -506,6 +505,95 @@ def get_token(self):\n         return self.token\n \n \n+class NoopAuthHandler(ServerAuthHandler):\n+    \"\"\"A no-op auth handler.\"\"\"\n+\n+    def authenticate(self, outgoing, incoming):\n+        \"\"\"Do nothing.\"\"\"\n+\n+    def is_valid(self, token):\n+        \"\"\"Do nothing.\"\"\"\n+        return \"\"\n+\n+\n+class HeaderAuthServerMiddlewareFactory(ServerMiddlewareFactory):\n+    \"\"\"Validates incoming username and password.\"\"\"\n+\n+    def start_call(self, info, headers):\n+        auth_header = headers.get('authorization')\n+        values = auth_header[0].split(' ')\n+        token = ''\n+\n+        if values[0] == 'Basic':\n+            decoded = base64.b64decode(values[1])\n+            pair = decoded.decode(\"utf-8\").split(':')\n+            if not (pair[0] == 'test' and pair[1] == 'password'):\n+                raise flight.FlightUnauthenticatedError('Invalid credentials')\n+            token = 'token1234'\n+        elif values[0] == 'Bearer':\n+            token = values[1]\n+            if not token == 'token1234':\n+                raise flight.FlightUnauthenticatedError('Invalid credentials')\n+        else:\n+            raise flight.FlightUnauthenticatedError('Invalid credentials')\n+\n+        return HeaderAuthServerMiddleware(token)\n+\n+\n+class HeaderAuthServerMiddleware(ServerMiddleware):\n+    \"\"\"A ServerMiddleware that transports incoming username and passowrd.\"\"\"\n+\n+    def __init__(self, token):\n+        self.token = token\n+\n+    def sending_headers(self):\n+        return {'authorization': 'Bearer ' + self.token}\n\nReview comment:\n       Should that be a comment for the headers parameter?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-22T07:42:08.321+0000",
                    "updated": "2020-12-22T07:42:08.321+0000",
                    "started": "2020-12-22T07:42:08.320+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527086",
                    "issueId": "13347213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347213/worklog/527704",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stevelorddremio commented on a change in pull request #8959:\nURL: https://github.com/apache/arrow/pull/8959#discussion_r548050472\n\n\n\n##########\nFile path: python/pyarrow/_flight.pyx\n##########\n@@ -1150,6 +1156,38 @@ cdef class FlightClient(_Weakrefable):\n                 self.client.get().Authenticate(deref(c_options),\n                                                move(handler)))\n \n+    def authenticateBasicToken(self, username, password,\n\nReview comment:\n       Do you need to add a description for self in the list of parameters?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-23T16:51:13.375+0000",
                    "updated": "2020-12-23T16:51:13.375+0000",
                    "started": "2020-12-23T16:51:13.375+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527704",
                    "issueId": "13347213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347213/worklog/527705",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stevelorddremio commented on a change in pull request #8959:\nURL: https://github.com/apache/arrow/pull/8959#discussion_r548050472\n\n\n\n##########\nFile path: python/pyarrow/_flight.pyx\n##########\n@@ -1150,6 +1156,38 @@ cdef class FlightClient(_Weakrefable):\n                 self.client.get().Authenticate(deref(c_options),\n                                                move(handler)))\n \n+    def authenticateBasicToken(self, username, password,\n\nReview comment:\n       Do you need to add a description for self in the list of parameters below?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-23T16:51:36.315+0000",
                    "updated": "2020-12-23T16:51:36.315+0000",
                    "started": "2020-12-23T16:51:36.315+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527705",
                    "issueId": "13347213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347213/worklog/527706",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stevelorddremio commented on a change in pull request #8959:\nURL: https://github.com/apache/arrow/pull/8959#discussion_r548051765\n\n\n\n##########\nFile path: python/pyarrow/_flight.pyx\n##########\n@@ -1871,7 +1909,6 @@ cdef CStatus _server_authenticate(void* self, CServerAuthSender* outgoing,\n         reader.poison()\n\nReview comment:\n       Is this a typo \"poison\"?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-23T16:54:19.748+0000",
                    "updated": "2020-12-23T16:54:19.748+0000",
                    "started": "2020-12-23T16:54:19.747+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527706",
                    "issueId": "13347213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347213/worklog/527711",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stevelorddremio commented on a change in pull request #8959:\nURL: https://github.com/apache/arrow/pull/8959#discussion_r548055425\n\n\n\n##########\nFile path: python/pyarrow/includes/libarrow_flight.pxd\n##########\n@@ -307,6 +308,11 @@ cdef extern from \"arrow/flight/api.h\" namespace \"arrow\" nogil:\n         CStatus Authenticate(CFlightCallOptions& options,\n                              unique_ptr[CClientAuthHandler] auth_handler)\n \n+        CResult[pair[c_string, c_string]] AuthenticateBasicToken(\n+            CFlightCallOptions& options,\n+            const c_string& username,\n\nReview comment:\n       For the uninitiated, what are the coding standards on Class & variable names? I see a mixture of camel case and underscore separated names.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-23T17:03:10.454+0000",
                    "updated": "2020-12-23T17:03:10.454+0000",
                    "started": "2020-12-23T17:03:10.454+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527711",
                    "issueId": "13347213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347213/worklog/527712",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stevelorddremio commented on a change in pull request #8959:\nURL: https://github.com/apache/arrow/pull/8959#discussion_r548056216\n\n\n\n##########\nFile path: python/pyarrow/tests/test_flight.py\n##########\n@@ -506,6 +505,162 @@ def get_token(self):\n         return self.token\n \n \n+class NoopAuthHandler(ServerAuthHandler):\n+    \"\"\"A no-op auth handler.\"\"\"\n+\n+    def authenticate(self, outgoing, incoming):\n+        \"\"\"Do nothing.\"\"\"\n+\n+    def is_valid(self, token):\n+        \"\"\"\n+        Returning an empty string.\n+        Returning None causes Type error.\n+        \"\"\"\n+        return \"\"\n+\n+\n+def case_insensitive_header_lookup(headers, lookup_key):\n+    \"\"\"Lookup the value of given key in the given headers.\n+       The key lookup is case insensitive.\n+    \"\"\"\n+    for key in headers:\n+        if key.lower() == lookup_key.lower():\n+            return headers.get(key)\n+\n+    raise flight.FlightUnauthenticatedError(\n+        'No authorization header found.')\n+\n+\n+class ClientHeaderAuthMiddlewareFactory(ClientMiddlewareFactory):\n+    \"\"\"ClientMiddlewareFactory that creates ClientAuthHeaderMiddleware.\"\"\"\n+\n+    def __init__(self):\n+        self.call_credential = []\n+\n+    def start_call(self, info):\n+        return ClientHeaderAuthMiddleware(self)\n+\n+    def set_call_credential(self, call_credential):\n+        self.call_credential = call_credential\n+\n+\n+class ClientHeaderAuthMiddleware(ClientMiddleware):\n+    \"\"\"\n+    ClientMiddleware that extracts the authorization header\n+    from the server.\n+\n+    This is an example of a ClientMiddleware that can extract\n+    the bearer token authorization header from a HTTP header\n+    authentication enabled server.\n+\n+    Parameters\n+    ----------\n+    factory : ClientHeaderAuthMiddlewareFactory\n+        This factory is used to set call credentials if an\n+        authorization header is found in the headers from the server.\n+    \"\"\"\n+\n+    def __init__(self, factory):\n+        self.factory = factory\n+\n+    def received_headers(self, headers):\n+        auth_header = case_insensitive_header_lookup(headers, 'Authorization')\n\nReview comment:\n       There seems to be a mix of single and double quotes for strings. Should these be consistent?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-23T17:05:14.206+0000",
                    "updated": "2020-12-23T17:05:14.206+0000",
                    "started": "2020-12-23T17:05:14.206+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527712",
                    "issueId": "13347213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347213/worklog/527716",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stevelorddremio commented on a change in pull request #8959:\nURL: https://github.com/apache/arrow/pull/8959#discussion_r548058361\n\n\n\n##########\nFile path: python/pyarrow/tests/test_flight.py\n##########\n@@ -506,6 +505,162 @@ def get_token(self):\n         return self.token\n \n \n+class NoopAuthHandler(ServerAuthHandler):\n+    \"\"\"A no-op auth handler.\"\"\"\n+\n+    def authenticate(self, outgoing, incoming):\n+        \"\"\"Do nothing.\"\"\"\n+\n+    def is_valid(self, token):\n+        \"\"\"\n+        Returning an empty string.\n+        Returning None causes Type error.\n+        \"\"\"\n+        return \"\"\n+\n+\n+def case_insensitive_header_lookup(headers, lookup_key):\n+    \"\"\"Lookup the value of given key in the given headers.\n+       The key lookup is case insensitive.\n+    \"\"\"\n+    for key in headers:\n+        if key.lower() == lookup_key.lower():\n+            return headers.get(key)\n+\n+    raise flight.FlightUnauthenticatedError(\n+        'No authorization header found.')\n+\n+\n+class ClientHeaderAuthMiddlewareFactory(ClientMiddlewareFactory):\n+    \"\"\"ClientMiddlewareFactory that creates ClientAuthHeaderMiddleware.\"\"\"\n+\n+    def __init__(self):\n+        self.call_credential = []\n+\n+    def start_call(self, info):\n+        return ClientHeaderAuthMiddleware(self)\n+\n+    def set_call_credential(self, call_credential):\n+        self.call_credential = call_credential\n+\n+\n+class ClientHeaderAuthMiddleware(ClientMiddleware):\n+    \"\"\"\n+    ClientMiddleware that extracts the authorization header\n+    from the server.\n+\n+    This is an example of a ClientMiddleware that can extract\n+    the bearer token authorization header from a HTTP header\n+    authentication enabled server.\n+\n+    Parameters\n+    ----------\n+    factory : ClientHeaderAuthMiddlewareFactory\n+        This factory is used to set call credentials if an\n+        authorization header is found in the headers from the server.\n+    \"\"\"\n+\n+    def __init__(self, factory):\n+        self.factory = factory\n+\n+    def received_headers(self, headers):\n+        auth_header = case_insensitive_header_lookup(headers, 'Authorization')\n+        self.factory.set_call_credential([\n+            b'authorization',\n+            auth_header[0].encode(\"utf-8\")])\n+\n+\n+class HeaderAuthServerMiddlewareFactory(ServerMiddlewareFactory):\n+    \"\"\"Validates incoming username and password.\"\"\"\n+\n+    def start_call(self, info, headers):\n+        auth_header = case_insensitive_header_lookup(\n+            headers,\n+            'Authorization'\n+        )\n+        values = auth_header[0].split(' ')\n+        token = ''\n+\n+        if values[0] == 'Basic':\n+            decoded = base64.b64decode(values[1])\n+            pair = decoded.decode(\"utf-8\").split(':')\n+            if not (pair[0] == 'test' and pair[1] == 'password'):\n+                raise flight.FlightUnauthenticatedError('Invalid credentials')\n\nReview comment:\n       3 uses of the string 'Invalid credentials'. Should this be made a constant?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-23T17:10:38.564+0000",
                    "updated": "2020-12-23T17:10:38.564+0000",
                    "started": "2020-12-23T17:10:38.564+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527716",
                    "issueId": "13347213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347213/worklog/527825",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #8959:\nURL: https://github.com/apache/arrow/pull/8959#discussion_r548194584\n\n\n\n##########\nFile path: python/pyarrow/_flight.pyx\n##########\n@@ -118,12 +118,18 @@ cdef class FlightCallOptions(_Weakrefable):\n         write_options : pyarrow.ipc.IpcWriteOptions, optional\n             IPC write options. The default options can be controlled\n             by environment variables (see pyarrow.ipc).\n-\n+        headers : vector[pair[c_string, c_string]], optional\n\nReview comment:\n       This type hint should use Python conventions (e.g. `List[Tuple[str, str]]`)\n\n##########\nFile path: python/pyarrow/_flight.pyx\n##########\n@@ -1150,6 +1156,38 @@ cdef class FlightClient(_Weakrefable):\n                 self.client.get().Authenticate(deref(c_options),\n                                                move(handler)))\n \n+    def authenticateBasicToken(self, username, password,\n\nReview comment:\n       Let's follow Python naming conventions - this should use snake_case.\n\n##########\nFile path: python/pyarrow/tests/test_flight.py\n##########\n@@ -506,6 +505,162 @@ def get_token(self):\n         return self.token\n \n \n+class NoopAuthHandler(ServerAuthHandler):\n+    \"\"\"A no-op auth handler.\"\"\"\n+\n+    def authenticate(self, outgoing, incoming):\n+        \"\"\"Do nothing.\"\"\"\n+\n+    def is_valid(self, token):\n+        \"\"\"\n+        Returning an empty string.\n+        Returning None causes Type error.\n+        \"\"\"\n+        return \"\"\n+\n+\n+def case_insensitive_header_lookup(headers, lookup_key):\n\nReview comment:\n       This is specifically to extract an authentication header based n the exception it raises, let's make sure the name reflects that.\n\n##########\nFile path: python/pyarrow/_flight.pyx\n##########\n@@ -1871,7 +1909,6 @@ cdef CStatus _server_authenticate(void* self, CServerAuthSender* outgoing,\n         reader.poison()\n\nReview comment:\n       Not a typo.\n\n##########\nFile path: python/pyarrow/tests/test_flight.py\n##########\n@@ -996,6 +1152,100 @@ def test_token_auth_invalid():\n             client.authenticate(TokenClientAuthHandler('test', 'wrong'))\n \n \n+header_auth_server_middleware_factory = HeaderAuthServerMiddlewareFactory()\n+no_op_auth_handler = NoopAuthHandler()\n+\n+\n+def test_authenticate_basic_token():\n+    \"\"\"Test authenticateBasicToken with bearer token and auth headers.\"\"\"\n+    with HeaderAuthFlightServer(auth_handler=no_op_auth_handler, middleware={\n+        \"auth\": HeaderAuthServerMiddlewareFactory()\n+    }) as server:\n+        client = FlightClient(('localhost', server.port))\n+        token_pair = client.authenticateBasicToken(b'test', b'password')\n+        assert token_pair[0] == b'authorization'\n+        assert token_pair[1] == b'Bearer ' + b'token1234'\n+\n+\n+def test_authenticate_basic_token_invalid_password():\n+    \"\"\"Test authenticateBasicToken with an invalid password.\"\"\"\n+    with HeaderAuthFlightServer(auth_handler=no_op_auth_handler, middleware={\n+        \"auth\": HeaderAuthServerMiddlewareFactory()\n+    }) as server:\n+        client = FlightClient(('localhost', server.port))\n+        with pytest.raises(flight.FlightUnauthenticatedError):\n+            client.authenticateBasicToken(b'test', b'badpassword')\n+\n+\n+def test_authenticate_basic_token_and_action():\n+    \"\"\"Test authenticateBasicToken and doAction after authentication.\"\"\"\n+    with HeaderAuthFlightServer(auth_handler=no_op_auth_handler, middleware={\n+        \"auth\": HeaderAuthServerMiddlewareFactory()\n+    }) as server:\n+        client = FlightClient(('localhost', server.port))\n+        token_pair = client.authenticateBasicToken(b'test', b'password')\n+        assert token_pair[0] == b'authorization'\n+        assert token_pair[1] == b'Bearer ' + b'token1234'\n+        options = flight.FlightCallOptions(headers=[token_pair])\n+        result = list(client.do_action(\n+            action=flight.Action('test-action', b''), options=options))\n+        assert result[0].body.to_pybytes() == b'token1234'\n+\n+\n+def test_authenticate_basic_token_with_client_middleware():\n+    \"\"\"Test authenticateBasicToken with client middleware\n+       to intercept authorization header returned by the\n+       HTTP header auth enabled server.\n+    \"\"\"\n+    with HeaderAuthFlightServer(auth_handler=no_op_auth_handler, middleware={\n+        \"auth\": HeaderAuthServerMiddlewareFactory()\n+    }) as server:\n+        client_auth_middleware = ClientHeaderAuthMiddlewareFactory()\n+        client = FlightClient(\n+            ('localhost', server.port),\n+            middleware=[client_auth_middleware]\n+        )\n+        encoded_credentials = base64.b64encode(b'test:password')\n+        options = flight.FlightCallOptions(headers=[\n+            (b'authorization', b'Basic ' + encoded_credentials)\n+        ])\n+        result = list(client.do_action(\n+            action=flight.Action('test-action', b''), options=options))\n+        assert result[0].body.to_pybytes() == b'token1234'\n+        assert client_auth_middleware.call_credential[0] == b'authorization'\n+        assert client_auth_middleware.call_credential[1] == \\\n+            b'Bearer ' + b'token1234'\n+        result2 = list(client.do_action(\n+            action=flight.Action('test-action', b''), options=options))\n+        assert result2[0].body.to_pybytes() == b'token1234'\n+        assert client_auth_middleware.call_credential[0] == b'authorization'\n+        assert client_auth_middleware.call_credential[1] == \\\n+            b'Bearer ' + b'token1234'\n+\n+\n+def test_arbitrary_headers_in_flight_call_options():\n+    \"\"\"Test passing multiple arbitrary headers to the middleware.\"\"\"\n+    with ArbitraryHeadersFlightServer(\n+            auth_handler=no_op_auth_handler,\n+            middleware={\n+                \"auth\": HeaderAuthServerMiddlewareFactory(),\n+                \"arbitrary-headers\": ArbitraryHeadersServerMiddlewareFactory()\n+            }) as server:\n+        client = FlightClient(('localhost', server.port))\n+        token_pair = client.authenticateBasicToken(b'test', b'password')\n+        assert token_pair[0] == b'authorization'\n+        assert token_pair[1] == b'Bearer ' + b'token1234'\n\nReview comment:\n       nit: why concat here? (and above)\n\n##########\nFile path: python/pyarrow/_flight.pyx\n##########\n@@ -1150,6 +1156,38 @@ cdef class FlightClient(_Weakrefable):\n                 self.client.get().Authenticate(deref(c_options),\n                                                move(handler)))\n \n+    def authenticateBasicToken(self, username, password,\n\nReview comment:\n       self is never documented - it's implicitly passed by Python (it's equivalent to `this` in Java et al)\n\n##########\nFile path: python/pyarrow/_flight.pyx\n##########\n@@ -1150,6 +1156,38 @@ cdef class FlightClient(_Weakrefable):\n                 self.client.get().Authenticate(deref(c_options),\n                                                move(handler)))\n \n+    def authenticateBasicToken(self, username, password,\n+                               options: FlightCallOptions = None):\n+        \"\"\"Authenticate to the server with HTTP basic authentication.\n+\n+        Parameters\n+        ----------\n+        username : string\n+            Username to authenticate with\n+        password : string\n+            Password to authenticate with\n+        options  : FlightCallOptions\n+            Options for this call\n+\n+        Returns\n+        -------\n+        pair : pair[string, string]\n\nReview comment:\n       Same for the type hints here - use `str` and `Tuple`\n\n##########\nFile path: python/pyarrow/tests/test_flight.py\n##########\n@@ -506,6 +505,95 @@ def get_token(self):\n         return self.token\n \n \n+class NoopAuthHandler(ServerAuthHandler):\n+    \"\"\"A no-op auth handler.\"\"\"\n+\n+    def authenticate(self, outgoing, incoming):\n+        \"\"\"Do nothing.\"\"\"\n+\n+    def is_valid(self, token):\n+        \"\"\"Do nothing.\"\"\"\n+        return \"\"\n+\n+\n+class HeaderAuthServerMiddlewareFactory(ServerMiddlewareFactory):\n+    \"\"\"Validates incoming username and password.\"\"\"\n+\n+    def start_call(self, info, headers):\n+        auth_header = headers.get('authorization')\n+        values = auth_header[0].split(' ')\n+        token = ''\n+\n+        if values[0] == 'Basic':\n+            decoded = base64.b64decode(values[1])\n+            pair = decoded.decode(\"utf-8\").split(':')\n+            if not (pair[0] == 'test' and pair[1] == 'password'):\n+                raise flight.FlightUnauthenticatedError('Invalid credentials')\n+            token = 'token1234'\n+        elif values[0] == 'Bearer':\n+            token = values[1]\n+            if not token == 'token1234':\n+                raise flight.FlightUnauthenticatedError('Invalid credentials')\n+        else:\n+            raise flight.FlightUnauthenticatedError('Invalid credentials')\n+\n+        return HeaderAuthServerMiddleware(token)\n+\n+\n+class HeaderAuthServerMiddleware(ServerMiddleware):\n+    \"\"\"A ServerMiddleware that transports incoming username and passowrd.\"\"\"\n+\n+    def __init__(self, token):\n+        self.token = token\n+\n+    def sending_headers(self):\n+        return {'authorization': 'Bearer ' + self.token}\n\nReview comment:\n       Headers are supposed to be treated case-insensitively so even though other languages may use Authorization, it will all get folded to the same case\n\n##########\nFile path: python/pyarrow/includes/libarrow_flight.pxd\n##########\n@@ -307,6 +308,11 @@ cdef extern from \"arrow/flight/api.h\" namespace \"arrow\" nogil:\n         CStatus Authenticate(CFlightCallOptions& options,\n                              unique_ptr[CClientAuthHandler] auth_handler)\n \n+        CResult[pair[c_string, c_string]] AuthenticateBasicToken(\n+            CFlightCallOptions& options,\n+            const c_string& username,\n\nReview comment:\n       The mixture here is because this is a set of Cython type definitions for C++ code, which uses the C++ conventions (e.g. CResult), but the overall project is in Python, which uses Python conventions (e.g. c_string)\n\n##########\nFile path: python/pyarrow/_flight.pyx\n##########\n@@ -1871,7 +1909,6 @@ cdef CStatus _server_authenticate(void* self, CServerAuthSender* outgoing,\n         reader.poison()\n\nReview comment:\n       This is to ensure a server doesn't use the Python reader beyond the lifetime of the C++ reader it wraps. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-23T20:28:00.636+0000",
                    "updated": "2020-12-23T20:28:00.636+0000",
                    "started": "2020-12-23T20:28:00.635+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527825",
                    "issueId": "13347213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347213/worklog/527968",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "tifflhl commented on a change in pull request #8959:\nURL: https://github.com/apache/arrow/pull/8959#discussion_r548374081\n\n\n\n##########\nFile path: python/pyarrow/tests/test_flight.py\n##########\n@@ -506,6 +505,162 @@ def get_token(self):\n         return self.token\n \n \n+class NoopAuthHandler(ServerAuthHandler):\n+    \"\"\"A no-op auth handler.\"\"\"\n+\n+    def authenticate(self, outgoing, incoming):\n+        \"\"\"Do nothing.\"\"\"\n+\n+    def is_valid(self, token):\n+        \"\"\"\n+        Returning an empty string.\n+        Returning None causes Type error.\n+        \"\"\"\n+        return \"\"\n+\n+\n+def case_insensitive_header_lookup(headers, lookup_key):\n+    \"\"\"Lookup the value of given key in the given headers.\n+       The key lookup is case insensitive.\n+    \"\"\"\n+    for key in headers:\n+        if key.lower() == lookup_key.lower():\n+            return headers.get(key)\n+\n+    raise flight.FlightUnauthenticatedError(\n+        'No authorization header found.')\n+\n+\n+class ClientHeaderAuthMiddlewareFactory(ClientMiddlewareFactory):\n+    \"\"\"ClientMiddlewareFactory that creates ClientAuthHeaderMiddleware.\"\"\"\n+\n+    def __init__(self):\n+        self.call_credential = []\n+\n+    def start_call(self, info):\n+        return ClientHeaderAuthMiddleware(self)\n+\n+    def set_call_credential(self, call_credential):\n+        self.call_credential = call_credential\n+\n+\n+class ClientHeaderAuthMiddleware(ClientMiddleware):\n+    \"\"\"\n+    ClientMiddleware that extracts the authorization header\n+    from the server.\n+\n+    This is an example of a ClientMiddleware that can extract\n+    the bearer token authorization header from a HTTP header\n+    authentication enabled server.\n+\n+    Parameters\n+    ----------\n+    factory : ClientHeaderAuthMiddlewareFactory\n+        This factory is used to set call credentials if an\n+        authorization header is found in the headers from the server.\n+    \"\"\"\n+\n+    def __init__(self, factory):\n+        self.factory = factory\n+\n+    def received_headers(self, headers):\n+        auth_header = case_insensitive_header_lookup(headers, 'Authorization')\n\nReview comment:\n       The two are interchangeable. \n\n##########\nFile path: python/pyarrow/tests/test_flight.py\n##########\n@@ -506,6 +505,162 @@ def get_token(self):\n         return self.token\n \n \n+class NoopAuthHandler(ServerAuthHandler):\n+    \"\"\"A no-op auth handler.\"\"\"\n+\n+    def authenticate(self, outgoing, incoming):\n+        \"\"\"Do nothing.\"\"\"\n+\n+    def is_valid(self, token):\n+        \"\"\"\n+        Returning an empty string.\n+        Returning None causes Type error.\n+        \"\"\"\n+        return \"\"\n+\n+\n+def case_insensitive_header_lookup(headers, lookup_key):\n+    \"\"\"Lookup the value of given key in the given headers.\n+       The key lookup is case insensitive.\n+    \"\"\"\n+    for key in headers:\n+        if key.lower() == lookup_key.lower():\n+            return headers.get(key)\n+\n+    raise flight.FlightUnauthenticatedError(\n+        'No authorization header found.')\n+\n+\n+class ClientHeaderAuthMiddlewareFactory(ClientMiddlewareFactory):\n+    \"\"\"ClientMiddlewareFactory that creates ClientAuthHeaderMiddleware.\"\"\"\n+\n+    def __init__(self):\n+        self.call_credential = []\n+\n+    def start_call(self, info):\n+        return ClientHeaderAuthMiddleware(self)\n+\n+    def set_call_credential(self, call_credential):\n+        self.call_credential = call_credential\n+\n+\n+class ClientHeaderAuthMiddleware(ClientMiddleware):\n+    \"\"\"\n+    ClientMiddleware that extracts the authorization header\n+    from the server.\n+\n+    This is an example of a ClientMiddleware that can extract\n+    the bearer token authorization header from a HTTP header\n+    authentication enabled server.\n+\n+    Parameters\n+    ----------\n+    factory : ClientHeaderAuthMiddlewareFactory\n+        This factory is used to set call credentials if an\n+        authorization header is found in the headers from the server.\n+    \"\"\"\n+\n+    def __init__(self, factory):\n+        self.factory = factory\n+\n+    def received_headers(self, headers):\n+        auth_header = case_insensitive_header_lookup(headers, 'Authorization')\n+        self.factory.set_call_credential([\n+            b'authorization',\n+            auth_header[0].encode(\"utf-8\")])\n+\n+\n+class HeaderAuthServerMiddlewareFactory(ServerMiddlewareFactory):\n+    \"\"\"Validates incoming username and password.\"\"\"\n+\n+    def start_call(self, info, headers):\n+        auth_header = case_insensitive_header_lookup(\n+            headers,\n+            'Authorization'\n+        )\n+        values = auth_header[0].split(' ')\n+        token = ''\n+\n+        if values[0] == 'Basic':\n+            decoded = base64.b64decode(values[1])\n+            pair = decoded.decode(\"utf-8\").split(':')\n+            if not (pair[0] == 'test' and pair[1] == 'password'):\n+                raise flight.FlightUnauthenticatedError('Invalid credentials')\n\nReview comment:\n       Addressed.\n\n##########\nFile path: python/pyarrow/_flight.pyx\n##########\n@@ -1150,6 +1156,38 @@ cdef class FlightClient(_Weakrefable):\n                 self.client.get().Authenticate(deref(c_options),\n                                                move(handler)))\n \n+    def authenticateBasicToken(self, username, password,\n\nReview comment:\n       Addressed.\n\n##########\nFile path: python/pyarrow/_flight.pyx\n##########\n@@ -118,12 +118,18 @@ cdef class FlightCallOptions(_Weakrefable):\n         write_options : pyarrow.ipc.IpcWriteOptions, optional\n             IPC write options. The default options can be controlled\n             by environment variables (see pyarrow.ipc).\n-\n+        headers : vector[pair[c_string, c_string]], optional\n\nReview comment:\n       Addressed.\n\n##########\nFile path: python/pyarrow/_flight.pyx\n##########\n@@ -1150,6 +1156,38 @@ cdef class FlightClient(_Weakrefable):\n                 self.client.get().Authenticate(deref(c_options),\n                                                move(handler)))\n \n+    def authenticateBasicToken(self, username, password,\n+                               options: FlightCallOptions = None):\n+        \"\"\"Authenticate to the server with HTTP basic authentication.\n+\n+        Parameters\n+        ----------\n+        username : string\n+            Username to authenticate with\n+        password : string\n+            Password to authenticate with\n+        options  : FlightCallOptions\n+            Options for this call\n+\n+        Returns\n+        -------\n+        pair : pair[string, string]\n\nReview comment:\n       Addressed.\n\n##########\nFile path: python/pyarrow/tests/test_flight.py\n##########\n@@ -506,6 +505,162 @@ def get_token(self):\n         return self.token\n \n \n+class NoopAuthHandler(ServerAuthHandler):\n+    \"\"\"A no-op auth handler.\"\"\"\n+\n+    def authenticate(self, outgoing, incoming):\n+        \"\"\"Do nothing.\"\"\"\n+\n+    def is_valid(self, token):\n+        \"\"\"\n+        Returning an empty string.\n+        Returning None causes Type error.\n+        \"\"\"\n+        return \"\"\n+\n+\n+def case_insensitive_header_lookup(headers, lookup_key):\n\nReview comment:\n       I modified the function to not raise an exception when the header is not found. The method is used in a test not related to authentication as well.\n\n##########\nFile path: python/pyarrow/tests/test_flight.py\n##########\n@@ -996,6 +1152,100 @@ def test_token_auth_invalid():\n             client.authenticate(TokenClientAuthHandler('test', 'wrong'))\n \n \n+header_auth_server_middleware_factory = HeaderAuthServerMiddlewareFactory()\n+no_op_auth_handler = NoopAuthHandler()\n+\n+\n+def test_authenticate_basic_token():\n+    \"\"\"Test authenticateBasicToken with bearer token and auth headers.\"\"\"\n+    with HeaderAuthFlightServer(auth_handler=no_op_auth_handler, middleware={\n+        \"auth\": HeaderAuthServerMiddlewareFactory()\n+    }) as server:\n+        client = FlightClient(('localhost', server.port))\n+        token_pair = client.authenticateBasicToken(b'test', b'password')\n+        assert token_pair[0] == b'authorization'\n+        assert token_pair[1] == b'Bearer ' + b'token1234'\n+\n+\n+def test_authenticate_basic_token_invalid_password():\n+    \"\"\"Test authenticateBasicToken with an invalid password.\"\"\"\n+    with HeaderAuthFlightServer(auth_handler=no_op_auth_handler, middleware={\n+        \"auth\": HeaderAuthServerMiddlewareFactory()\n+    }) as server:\n+        client = FlightClient(('localhost', server.port))\n+        with pytest.raises(flight.FlightUnauthenticatedError):\n+            client.authenticateBasicToken(b'test', b'badpassword')\n+\n+\n+def test_authenticate_basic_token_and_action():\n+    \"\"\"Test authenticateBasicToken and doAction after authentication.\"\"\"\n+    with HeaderAuthFlightServer(auth_handler=no_op_auth_handler, middleware={\n+        \"auth\": HeaderAuthServerMiddlewareFactory()\n+    }) as server:\n+        client = FlightClient(('localhost', server.port))\n+        token_pair = client.authenticateBasicToken(b'test', b'password')\n+        assert token_pair[0] == b'authorization'\n+        assert token_pair[1] == b'Bearer ' + b'token1234'\n+        options = flight.FlightCallOptions(headers=[token_pair])\n+        result = list(client.do_action(\n+            action=flight.Action('test-action', b''), options=options))\n+        assert result[0].body.to_pybytes() == b'token1234'\n+\n+\n+def test_authenticate_basic_token_with_client_middleware():\n+    \"\"\"Test authenticateBasicToken with client middleware\n+       to intercept authorization header returned by the\n+       HTTP header auth enabled server.\n+    \"\"\"\n+    with HeaderAuthFlightServer(auth_handler=no_op_auth_handler, middleware={\n+        \"auth\": HeaderAuthServerMiddlewareFactory()\n+    }) as server:\n+        client_auth_middleware = ClientHeaderAuthMiddlewareFactory()\n+        client = FlightClient(\n+            ('localhost', server.port),\n+            middleware=[client_auth_middleware]\n+        )\n+        encoded_credentials = base64.b64encode(b'test:password')\n+        options = flight.FlightCallOptions(headers=[\n+            (b'authorization', b'Basic ' + encoded_credentials)\n+        ])\n+        result = list(client.do_action(\n+            action=flight.Action('test-action', b''), options=options))\n+        assert result[0].body.to_pybytes() == b'token1234'\n+        assert client_auth_middleware.call_credential[0] == b'authorization'\n+        assert client_auth_middleware.call_credential[1] == \\\n+            b'Bearer ' + b'token1234'\n+        result2 = list(client.do_action(\n+            action=flight.Action('test-action', b''), options=options))\n+        assert result2[0].body.to_pybytes() == b'token1234'\n+        assert client_auth_middleware.call_credential[0] == b'authorization'\n+        assert client_auth_middleware.call_credential[1] == \\\n+            b'Bearer ' + b'token1234'\n+\n+\n+def test_arbitrary_headers_in_flight_call_options():\n+    \"\"\"Test passing multiple arbitrary headers to the middleware.\"\"\"\n+    with ArbitraryHeadersFlightServer(\n+            auth_handler=no_op_auth_handler,\n+            middleware={\n+                \"auth\": HeaderAuthServerMiddlewareFactory(),\n+                \"arbitrary-headers\": ArbitraryHeadersServerMiddlewareFactory()\n+            }) as server:\n+        client = FlightClient(('localhost', server.port))\n+        token_pair = client.authenticateBasicToken(b'test', b'password')\n+        assert token_pair[0] == b'authorization'\n+        assert token_pair[1] == b'Bearer ' + b'token1234'\n\nReview comment:\n       Addressed.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-24T04:12:10.650+0000",
                    "updated": "2020-12-24T04:12:10.650+0000",
                    "started": "2020-12-24T04:12:10.650+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "527968",
                    "issueId": "13347213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347213/worklog/528546",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #8959:\nURL: https://github.com/apache/arrow/pull/8959#discussion_r549010231\n\n\n\n##########\nFile path: python/pyarrow/_flight.pyx\n##########\n@@ -1150,6 +1156,38 @@ cdef class FlightClient(_Weakrefable):\n                 self.client.get().Authenticate(deref(c_options),\n                                                move(handler)))\n \n+    def authenticateBasicToken(self, username, password,\n+                               options: FlightCallOptions = None):\n+        \"\"\"Authenticate to the server with header token authentication.\n+\n+        Parameters\n+        ----------\n+        username : string\n+            Username to authenticate with\n+        password : string\n+            Password to authenticate with\n+        options  : FlightCallOptions\n+            Options for this call\n+\n+        Returns\n+        -------\n+        pair : pair[string, string]\n+            A pair representing the FlightCallOptions header\n+            entry of a bearer token.\n+        \"\"\"\n+        cdef:\n+            CResult[pair[c_string, c_string]] result\n+            CFlightCallOptions* c_options = FlightCallOptions.unwrap(options)\n+            c_string user = tobytes(username)\n+            c_string pw = tobytes(password)\n+\n+        with nogil:\n+            result = self.client.get().AuthenticateBasicToken(deref(c_options),\n\nReview comment:\n       @jduo are the changes in this PR sufficient?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-26T16:49:31.615+0000",
                    "updated": "2020-12-26T16:49:31.615+0000",
                    "started": "2020-12-26T16:49:31.615+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "528546",
                    "issueId": "13347213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347213/worklog/528561",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jduo commented on pull request #8959:\nURL: https://github.com/apache/arrow/pull/8959#issuecomment-751390132\n\n\n   @lidavidm yes these changes are sufficient.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-26T19:51:54.372+0000",
                    "updated": "2020-12-26T19:51:54.372+0000",
                    "started": "2020-12-26T19:51:54.372+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "528561",
                    "issueId": "13347213"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347213/worklog/528564",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm closed pull request #8959:\nURL: https://github.com/apache/arrow/pull/8959\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-26T21:25:37.810+0000",
                    "updated": "2020-12-26T21:25:37.810+0000",
                    "started": "2020-12-26T21:25:37.809+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "528564",
                    "issueId": "13347213"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 10200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@315dc4e3[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3b2d012[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@10ef7c44[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5481c0b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3e732dd3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@27bcafcc[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4c5aea23[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@9b70fe7[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e8da6b7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6c0dae65[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@779d5a35[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@46e4bb16[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10200,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Dec 26 21:25:28 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-12-26T21:25:28.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11004/watchers",
            "watchCount": 0,
            "isWatching": false
        },
        "created": "2020-12-21T22:00:53.000+0000",
        "updated": "2020-12-26T21:25:38.000+0000",
        "timeoriginalestimate": null,
        "description": "Create equivalent header based auth mechanism in Python that wraps the C++ implementation.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[FlightRPC][Python] Header-based auth in clients",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13347213/comment/17255126",
                    "id": "17255126",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 8959\n[https://github.com/apache/arrow/pull/8959]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-12-26T21:25:28.556+0000",
                    "updated": "2020-12-26T21:25:28.556+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0lpv4:",
        "customfield_12314139": null
    }
}