{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13403209",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13403209",
    "key": "ARROW-14127",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=baksmj",
            "name": "baksmj",
            "key": "baksmj",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=baksmj&avatarId=46648",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=baksmj&avatarId=46648",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=baksmj&avatarId=46648",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=baksmj&avatarId=46648"
            },
            "displayName": "Benson Muite",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332532",
                "id": "12332532",
                "name": "Documentation"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=baksmj",
            "name": "baksmj",
            "key": "baksmj",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=baksmj&avatarId=46648",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=baksmj&avatarId=46648",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=baksmj&avatarId=46648",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=baksmj&avatarId=46648"
            },
            "displayName": "Benson Muite",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=baksmj",
            "name": "baksmj",
            "key": "baksmj",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=baksmj&avatarId=46648",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=baksmj&avatarId=46648",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=baksmj&avatarId=46648",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=baksmj&avatarId=46648"
            },
            "displayName": "Benson Muite",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 16800,
            "total": 16800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 16800,
            "total": 16800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14127/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 28,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13403209/worklog/655065",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11231:\nURL: https://github.com/apache/arrow/pull/11231#issuecomment-926875031\n\n\n   https://issues.apache.org/jira/browse/ARROW-14127\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-24T19:37:37.920+0000",
                    "updated": "2021-09-24T19:37:37.920+0000",
                    "started": "2021-09-24T19:37:37.920+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "655065",
                    "issueId": "13403209"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13403209/worklog/655202",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #11231:\nURL: https://github.com/apache/arrow/pull/11231#discussion_r716124933\n\n\n\n##########\nFile path: cpp/examples/arrow/compute_and_write_csv_example.cc\n##########\n@@ -0,0 +1,130 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api_aggregate.h>\n+#include <arrow/compute/cast.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/csv/api.h>\n+#include <arrow/csv/writer.h>\n+#include <arrow/io/file.h>\n+#include <arrow/io/interfaces.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+#include <iostream>\n+#include <vector>\n+\n+// Many operations in Apache arrow operate on\n+// columns of data, and the columns of data are\n+// assembled into a table. In this example, we\n+// examine how to compare two arrays which are\n+// combined to form a table that is then written\n+// out to a CSV file.\n+\n+#define ABORT_ON_FAILURE(expr)                     \\\n+  do {                                             \\\n+    arrow::Status status_ = (expr);                \\\n+    if (!status_.ok()) {                           \\\n+      std::cerr << status_.message() << std::endl; \\\n+      abort();                                     \\\n+    }                                              \\\n+  } while (0);\n+\n+\n+int main(int argc, char** argv){\n+        const char* csv_filename = \"output.csv\";\n+\n+        // Make Arrays\n+        arrow::NumericBuilder<arrow::Int64Type>  int64_builder;\n+        arrow::BooleanBuilder boolean_builder;\n+\n+        // Make place for 8 values in total\n+        ABORT_ON_FAILURE(int64_builder.Resize(8));\n+        ABORT_ON_FAILURE(boolean_builder.Resize(8));\n+\n+        // Bulk append the given values\n+        std::vector<int64_t> int64_values = {1, 2, 3, 4, 5, 6, 7, 8};\n+        ABORT_ON_FAILURE(int64_builder.AppendValues(int64_values));\n+        std::shared_ptr<arrow::Array> array_a;\n+        ABORT_ON_FAILURE(int64_builder.Finish(&array_a));\n+        int64_builder.Reset();\n+        int64_values = {2, 5, 1, 3, 6, 2, 7, 4};\n+        std::shared_ptr<arrow::Array> array_b;\n+        ABORT_ON_FAILURE(int64_builder.AppendValues(int64_values));\n+        ABORT_ON_FAILURE(int64_builder.Finish(&array_b));\n+\n+        // Cast the Arrays to their actual types\n+        auto int64_array_a = std::static_pointer_cast<arrow::Int64Array>(array_a);\n+        auto int64_array_b = std::static_pointer_cast<arrow::Int64Array>(array_b);\n+        for(int64_t i=0; i < 8; i++)\n+        {\n+                if( (!int64_array_a->IsNull(i)) & \n+                    (!int64_array_b->IsNull(i))    )\n+                {\n+                  bool comparison_result = int64_array_a->Value(i) > \n+                                           int64_array_b->Value(i);\n+                  boolean_builder.UnsafeAppend(comparison_result);\n+                }\n+        }\n+        std::shared_ptr<arrow::Array> array_c;\n+        ABORT_ON_FAILURE(boolean_builder.Finish(&array_c));\n+        //auto bool_array_c  = std::static_pointer_cast<arrow::BooleanArray>(array_c);\n+        std::cout << \"Array created\" << std::endl;\n+\n+        // Try a compute function\n+        arrow::Datum compared_datum;\n+        std::shared_ptr<arrow::Array> compared_array;\n+        //auto bool_compared_array  = std::static_pointer_cast<arrow::BooleanArray>(compared_array);\n+        arrow::Result<arrow::Datum> st_compared_datum = \n+                arrow::compute::CallFunction(\"greater\",{array_a,array_b});\n+        if (st_compared_datum.ok()) {\n+                compared_datum = std::move(st_compared_datum).ValueOrDie();\n+                compared_array = compared_datum.make_array();\n+        }else{\n+                std::cerr << st_compared_datum.status() << std::endl;\n+        }\n+        // Create a table\n+        auto schema = arrow::schema({arrow::field(\"a\", arrow::int64()),\n+                                     arrow::field(\"b\", arrow::int64()),\n+                                     arrow::field(\"c\", arrow::boolean()),\n+                                     arrow::field(\"d\", arrow::boolean())  });\n+        std::shared_ptr<arrow::Table> my_table = arrow::Table::Make(schema, {array_a,array_b,array_c,\n+                                                           compared_array});\n+\n+        std::cout << \"Table created\" << std::endl;\n+\n+        // Write table to CSV file\n\nReview comment:\n       Though it's an example, I think we should still be careful not to accidentally destroy a possible same named file under current directory.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-26T02:07:50.354+0000",
                    "updated": "2021-09-26T02:07:50.354+0000",
                    "started": "2021-09-26T02:07:50.353+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "655202",
                    "issueId": "13403209"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13403209/worklog/655241",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkmgit commented on a change in pull request #11231:\nURL: https://github.com/apache/arrow/pull/11231#discussion_r716156626\n\n\n\n##########\nFile path: cpp/examples/arrow/compute_and_write_csv_example.cc\n##########\n@@ -0,0 +1,130 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api_aggregate.h>\n+#include <arrow/compute/cast.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/csv/api.h>\n+#include <arrow/csv/writer.h>\n+#include <arrow/io/file.h>\n+#include <arrow/io/interfaces.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+#include <iostream>\n+#include <vector>\n+\n+// Many operations in Apache arrow operate on\n+// columns of data, and the columns of data are\n+// assembled into a table. In this example, we\n+// examine how to compare two arrays which are\n+// combined to form a table that is then written\n+// out to a CSV file.\n+\n+#define ABORT_ON_FAILURE(expr)                     \\\n+  do {                                             \\\n+    arrow::Status status_ = (expr);                \\\n+    if (!status_.ok()) {                           \\\n+      std::cerr << status_.message() << std::endl; \\\n+      abort();                                     \\\n+    }                                              \\\n+  } while (0);\n+\n+\n+int main(int argc, char** argv){\n+        const char* csv_filename = \"output.csv\";\n+\n+        // Make Arrays\n+        arrow::NumericBuilder<arrow::Int64Type>  int64_builder;\n+        arrow::BooleanBuilder boolean_builder;\n+\n+        // Make place for 8 values in total\n+        ABORT_ON_FAILURE(int64_builder.Resize(8));\n+        ABORT_ON_FAILURE(boolean_builder.Resize(8));\n+\n+        // Bulk append the given values\n+        std::vector<int64_t> int64_values = {1, 2, 3, 4, 5, 6, 7, 8};\n+        ABORT_ON_FAILURE(int64_builder.AppendValues(int64_values));\n+        std::shared_ptr<arrow::Array> array_a;\n+        ABORT_ON_FAILURE(int64_builder.Finish(&array_a));\n+        int64_builder.Reset();\n+        int64_values = {2, 5, 1, 3, 6, 2, 7, 4};\n+        std::shared_ptr<arrow::Array> array_b;\n+        ABORT_ON_FAILURE(int64_builder.AppendValues(int64_values));\n+        ABORT_ON_FAILURE(int64_builder.Finish(&array_b));\n+\n+        // Cast the Arrays to their actual types\n+        auto int64_array_a = std::static_pointer_cast<arrow::Int64Array>(array_a);\n+        auto int64_array_b = std::static_pointer_cast<arrow::Int64Array>(array_b);\n+        for(int64_t i=0; i < 8; i++)\n+        {\n+                if( (!int64_array_a->IsNull(i)) & \n+                    (!int64_array_b->IsNull(i))    )\n+                {\n+                  bool comparison_result = int64_array_a->Value(i) > \n+                                           int64_array_b->Value(i);\n+                  boolean_builder.UnsafeAppend(comparison_result);\n+                }\n+        }\n+        std::shared_ptr<arrow::Array> array_c;\n+        ABORT_ON_FAILURE(boolean_builder.Finish(&array_c));\n+        //auto bool_array_c  = std::static_pointer_cast<arrow::BooleanArray>(array_c);\n+        std::cout << \"Array created\" << std::endl;\n+\n+        // Try a compute function\n+        arrow::Datum compared_datum;\n+        std::shared_ptr<arrow::Array> compared_array;\n+        //auto bool_compared_array  = std::static_pointer_cast<arrow::BooleanArray>(compared_array);\n+        arrow::Result<arrow::Datum> st_compared_datum = \n+                arrow::compute::CallFunction(\"greater\",{array_a,array_b});\n+        if (st_compared_datum.ok()) {\n+                compared_datum = std::move(st_compared_datum).ValueOrDie();\n+                compared_array = compared_datum.make_array();\n+        }else{\n+                std::cerr << st_compared_datum.status() << std::endl;\n+        }\n+        // Create a table\n+        auto schema = arrow::schema({arrow::field(\"a\", arrow::int64()),\n+                                     arrow::field(\"b\", arrow::int64()),\n+                                     arrow::field(\"c\", arrow::boolean()),\n+                                     arrow::field(\"d\", arrow::boolean())  });\n+        std::shared_ptr<arrow::Table> my_table = arrow::Table::Make(schema, {array_a,array_b,array_c,\n+                                                           compared_array});\n+\n+        std::cout << \"Table created\" << std::endl;\n+\n+        // Write table to CSV file\n\nReview comment:\n       Thanks for the feedback. The [dataset_documentation_example.cc ](https://github.com/apache/arrow/blob/master/cpp/examples/arrow/dataset_documentation_example.cc) creates a new directory for the files that are created. Can follow the same approach here.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-26T07:18:40.902+0000",
                    "updated": "2021-09-26T07:18:40.902+0000",
                    "started": "2021-09-26T07:18:40.902+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "655241",
                    "issueId": "13403209"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13403209/worklog/655352",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkmgit commented on a change in pull request #11231:\nURL: https://github.com/apache/arrow/pull/11231#discussion_r716401667\n\n\n\n##########\nFile path: cpp/examples/arrow/compute_and_write_csv_example.cc\n##########\n@@ -0,0 +1,130 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api_aggregate.h>\n+#include <arrow/compute/cast.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/csv/api.h>\n+#include <arrow/csv/writer.h>\n+#include <arrow/io/file.h>\n+#include <arrow/io/interfaces.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+#include <iostream>\n+#include <vector>\n+\n+// Many operations in Apache arrow operate on\n+// columns of data, and the columns of data are\n+// assembled into a table. In this example, we\n+// examine how to compare two arrays which are\n+// combined to form a table that is then written\n+// out to a CSV file.\n+\n+#define ABORT_ON_FAILURE(expr)                     \\\n+  do {                                             \\\n+    arrow::Status status_ = (expr);                \\\n+    if (!status_.ok()) {                           \\\n+      std::cerr << status_.message() << std::endl; \\\n+      abort();                                     \\\n+    }                                              \\\n+  } while (0);\n+\n+\n+int main(int argc, char** argv){\n+        const char* csv_filename = \"output.csv\";\n+\n+        // Make Arrays\n+        arrow::NumericBuilder<arrow::Int64Type>  int64_builder;\n+        arrow::BooleanBuilder boolean_builder;\n+\n+        // Make place for 8 values in total\n+        ABORT_ON_FAILURE(int64_builder.Resize(8));\n+        ABORT_ON_FAILURE(boolean_builder.Resize(8));\n+\n+        // Bulk append the given values\n+        std::vector<int64_t> int64_values = {1, 2, 3, 4, 5, 6, 7, 8};\n+        ABORT_ON_FAILURE(int64_builder.AppendValues(int64_values));\n+        std::shared_ptr<arrow::Array> array_a;\n+        ABORT_ON_FAILURE(int64_builder.Finish(&array_a));\n+        int64_builder.Reset();\n+        int64_values = {2, 5, 1, 3, 6, 2, 7, 4};\n+        std::shared_ptr<arrow::Array> array_b;\n+        ABORT_ON_FAILURE(int64_builder.AppendValues(int64_values));\n+        ABORT_ON_FAILURE(int64_builder.Finish(&array_b));\n+\n+        // Cast the Arrays to their actual types\n+        auto int64_array_a = std::static_pointer_cast<arrow::Int64Array>(array_a);\n+        auto int64_array_b = std::static_pointer_cast<arrow::Int64Array>(array_b);\n+        for(int64_t i=0; i < 8; i++)\n+        {\n+                if( (!int64_array_a->IsNull(i)) & \n+                    (!int64_array_b->IsNull(i))    )\n+                {\n+                  bool comparison_result = int64_array_a->Value(i) > \n+                                           int64_array_b->Value(i);\n+                  boolean_builder.UnsafeAppend(comparison_result);\n+                }\n+        }\n+        std::shared_ptr<arrow::Array> array_c;\n+        ABORT_ON_FAILURE(boolean_builder.Finish(&array_c));\n+        //auto bool_array_c  = std::static_pointer_cast<arrow::BooleanArray>(array_c);\n+        std::cout << \"Array created\" << std::endl;\n+\n+        // Try a compute function\n+        arrow::Datum compared_datum;\n+        std::shared_ptr<arrow::Array> compared_array;\n+        //auto bool_compared_array  = std::static_pointer_cast<arrow::BooleanArray>(compared_array);\n+        arrow::Result<arrow::Datum> st_compared_datum = \n+                arrow::compute::CallFunction(\"greater\",{array_a,array_b});\n+        if (st_compared_datum.ok()) {\n+                compared_datum = std::move(st_compared_datum).ValueOrDie();\n+                compared_array = compared_datum.make_array();\n+        }else{\n+                std::cerr << st_compared_datum.status() << std::endl;\n+        }\n+        // Create a table\n+        auto schema = arrow::schema({arrow::field(\"a\", arrow::int64()),\n+                                     arrow::field(\"b\", arrow::int64()),\n+                                     arrow::field(\"c\", arrow::boolean()),\n+                                     arrow::field(\"d\", arrow::boolean())  });\n+        std::shared_ptr<arrow::Table> my_table = arrow::Table::Make(schema, {array_a,array_b,array_c,\n+                                                           compared_array});\n+\n+        std::cout << \"Table created\" << std::endl;\n+\n+        // Write table to CSV file\n\nReview comment:\n       @cyb70289 Have updated the example. Let me know if ok.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-27T07:09:21.118+0000",
                    "updated": "2021-09-27T07:09:21.118+0000",
                    "started": "2021-09-27T07:09:21.117+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "655352",
                    "issueId": "13403209"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13403209/worklog/656153",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #11231:\nURL: https://github.com/apache/arrow/pull/11231#discussion_r717592082\n\n\n\n##########\nFile path: cpp/examples/arrow/compute_and_write_csv_example.cc\n##########\n@@ -0,0 +1,140 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api_aggregate.h>\n+#include <arrow/compute/cast.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/csv/api.h>\n+#include <arrow/csv/writer.h>\n+#include <arrow/filesystem/filesystem.h>\n+#include <arrow/io/file.h>\n+#include <arrow/io/interfaces.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+\n+#include <iostream>\n+#include <vector>\n+\n+// Many operations in Apache arrow operate on\n+// columns of data, and the columns of data are\n+// assembled into a table. In this example, we\n+// examine how to compare two arrays which are\n+// combined to form a table that is then written\n+// out to a CSV file.\n+//\n+// To run this example you can use\n+// ./comparison_example uri\n+//\n+// where uri is the universal resource identifier\n+// to the directory you want created on your\n+// filesystem that output will be put into, for\n+// example on a local linux system\n+// ./comparison_example file:///$PWD\n+\n+int main(int argc, char** argv) {\n+  if (argc < 2) {\n+    std::cout << \"Please enter the path to which you want data saved\" << std::endl;\n+    // Fake success for CI purposes.\n+    return EXIT_SUCCESS;\n+  }\n+\n+  // Make Arrays\n+  arrow::NumericBuilder<arrow::Int64Type> int64_builder;\n+  arrow::BooleanBuilder boolean_builder;\n+\n+  // Make place for 8 values in total\n+  ARROW_RETURN_NOT_OK(int64_builder.Resize(8));\n+  ARROW_RETURN_NOT_OK(boolean_builder.Resize(8));\n+\n+  // Bulk append the given values\n+  std::vector<int64_t> int64_values = {1, 2, 3, 4, 5, 6, 7, 8};\n+  ARROW_RETURN_NOT_OK(int64_builder.AppendValues(int64_values));\n+  std::shared_ptr<arrow::Array> array_a;\n+  ARROW_RETURN_NOT_OK(int64_builder.Finish(&array_a));\n+  int64_builder.Reset();\n+  int64_values = {2, 5, 1, 3, 6, 2, 7, 4};\n+  std::shared_ptr<arrow::Array> array_b;\n+  ARROW_RETURN_NOT_OK(int64_builder.AppendValues(int64_values));\n+  ARROW_RETURN_NOT_OK(int64_builder.Finish(&array_b));\n+\n+  // Cast the arrays to their actual types\n+  auto int64_array_a = std::static_pointer_cast<arrow::Int64Array>(array_a);\n+  auto int64_array_b = std::static_pointer_cast<arrow::Int64Array>(array_b);\n+  // Explicit comparison using a loop\n+  for (int64_t i = 0; i < 8; i++) {\n+    if ((!int64_array_a->IsNull(i)) & (!int64_array_b->IsNull(i))) {\n+      bool comparison_result = int64_array_a->Value(i) > int64_array_b->Value(i);\n+      boolean_builder.UnsafeAppend(comparison_result);\n+    }\n+  }\n+  std::shared_ptr<arrow::Array> array_c;\n+  ARROW_RETURN_NOT_OK(boolean_builder.Finish(&array_c));\n+  std::cout << \"Array explicitly compared\" << std::endl;\n+\n+  // Try a compute function for comparison\n+  arrow::Datum compared_datum;\n+  std::shared_ptr<arrow::Array> array_d;\n+  arrow::Result<arrow::Datum> st_compared_datum =\n+      arrow::compute::CallFunction(\"greater\", {array_a, array_b});\n+  if (st_compared_datum.ok()) {\n+    compared_datum = std::move(st_compared_datum).ValueOrDie();\n+    array_d = compared_datum.make_array();\n+  } else {\n+    std::cerr << st_compared_datum.status() << std::endl;\n+  }\n+  std::cout << \"Arrays compared using a compute function\" << std::endl;\n+  // Create a table\n+  auto schema =\n+      arrow::schema({arrow::field(\"a\", arrow::int64()), \n+                     arrow::field(\"b\", arrow::int64()),\n+                     arrow::field(\"a>b? (self written)\", arrow::boolean()),\n+                     arrow::field(\"a>b? (arrow)\", arrow::boolean())});\n+  std::shared_ptr<arrow::Table> my_table =\n+      arrow::Table::Make(schema, {array_a, array_b, array_c, array_d});\n+\n+  std::cout << \"Table created\" << std::endl;\n+\n+  // Create a folder to output the data\n+  std::string uri = argv[1];\n+  std::string root_path;\n+  auto fs = arrow::fs::FileSystemFromUri(uri, &root_path).ValueOrDie();\n+  std::string base_path = root_path + \"/csv_dataset\";\n+  std::cout << \"Base path \" << base_path << std::endl;\n+  ARROW_RETURN_NOT_OK(fs->CreateDir(base_path));\n\nReview comment:\n       appveyor ci error needs be fixed:\r\n   https://ci.appveyor.com/project/ApacheSoftwareFoundation/arrow/builds/40927445/job/rmy2wlpipu4xg6ny#L1201\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T13:44:07.262+0000",
                    "updated": "2021-09-28T13:44:07.262+0000",
                    "started": "2021-09-28T13:44:07.261+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "656153",
                    "issueId": "13403209"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13403209/worklog/656470",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #11231:\nURL: https://github.com/apache/arrow/pull/11231#discussion_r717592082\n\n\n\n##########\nFile path: cpp/examples/arrow/compute_and_write_csv_example.cc\n##########\n@@ -0,0 +1,140 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api_aggregate.h>\n+#include <arrow/compute/cast.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/csv/api.h>\n+#include <arrow/csv/writer.h>\n+#include <arrow/filesystem/filesystem.h>\n+#include <arrow/io/file.h>\n+#include <arrow/io/interfaces.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+\n+#include <iostream>\n+#include <vector>\n+\n+// Many operations in Apache arrow operate on\n+// columns of data, and the columns of data are\n+// assembled into a table. In this example, we\n+// examine how to compare two arrays which are\n+// combined to form a table that is then written\n+// out to a CSV file.\n+//\n+// To run this example you can use\n+// ./comparison_example uri\n+//\n+// where uri is the universal resource identifier\n+// to the directory you want created on your\n+// filesystem that output will be put into, for\n+// example on a local linux system\n+// ./comparison_example file:///$PWD\n+\n+int main(int argc, char** argv) {\n+  if (argc < 2) {\n+    std::cout << \"Please enter the path to which you want data saved\" << std::endl;\n+    // Fake success for CI purposes.\n+    return EXIT_SUCCESS;\n+  }\n+\n+  // Make Arrays\n+  arrow::NumericBuilder<arrow::Int64Type> int64_builder;\n+  arrow::BooleanBuilder boolean_builder;\n+\n+  // Make place for 8 values in total\n+  ARROW_RETURN_NOT_OK(int64_builder.Resize(8));\n+  ARROW_RETURN_NOT_OK(boolean_builder.Resize(8));\n+\n+  // Bulk append the given values\n+  std::vector<int64_t> int64_values = {1, 2, 3, 4, 5, 6, 7, 8};\n+  ARROW_RETURN_NOT_OK(int64_builder.AppendValues(int64_values));\n+  std::shared_ptr<arrow::Array> array_a;\n+  ARROW_RETURN_NOT_OK(int64_builder.Finish(&array_a));\n+  int64_builder.Reset();\n+  int64_values = {2, 5, 1, 3, 6, 2, 7, 4};\n+  std::shared_ptr<arrow::Array> array_b;\n+  ARROW_RETURN_NOT_OK(int64_builder.AppendValues(int64_values));\n+  ARROW_RETURN_NOT_OK(int64_builder.Finish(&array_b));\n+\n+  // Cast the arrays to their actual types\n+  auto int64_array_a = std::static_pointer_cast<arrow::Int64Array>(array_a);\n+  auto int64_array_b = std::static_pointer_cast<arrow::Int64Array>(array_b);\n+  // Explicit comparison using a loop\n+  for (int64_t i = 0; i < 8; i++) {\n+    if ((!int64_array_a->IsNull(i)) & (!int64_array_b->IsNull(i))) {\n+      bool comparison_result = int64_array_a->Value(i) > int64_array_b->Value(i);\n+      boolean_builder.UnsafeAppend(comparison_result);\n+    }\n+  }\n+  std::shared_ptr<arrow::Array> array_c;\n+  ARROW_RETURN_NOT_OK(boolean_builder.Finish(&array_c));\n+  std::cout << \"Array explicitly compared\" << std::endl;\n+\n+  // Try a compute function for comparison\n+  arrow::Datum compared_datum;\n+  std::shared_ptr<arrow::Array> array_d;\n+  arrow::Result<arrow::Datum> st_compared_datum =\n+      arrow::compute::CallFunction(\"greater\", {array_a, array_b});\n+  if (st_compared_datum.ok()) {\n+    compared_datum = std::move(st_compared_datum).ValueOrDie();\n+    array_d = compared_datum.make_array();\n+  } else {\n+    std::cerr << st_compared_datum.status() << std::endl;\n+  }\n+  std::cout << \"Arrays compared using a compute function\" << std::endl;\n+  // Create a table\n+  auto schema =\n+      arrow::schema({arrow::field(\"a\", arrow::int64()), \n+                     arrow::field(\"b\", arrow::int64()),\n+                     arrow::field(\"a>b? (self written)\", arrow::boolean()),\n+                     arrow::field(\"a>b? (arrow)\", arrow::boolean())});\n+  std::shared_ptr<arrow::Table> my_table =\n+      arrow::Table::Make(schema, {array_a, array_b, array_c, array_d});\n+\n+  std::cout << \"Table created\" << std::endl;\n+\n+  // Create a folder to output the data\n+  std::string uri = argv[1];\n+  std::string root_path;\n+  auto fs = arrow::fs::FileSystemFromUri(uri, &root_path).ValueOrDie();\n+  std::string base_path = root_path + \"/csv_dataset\";\n+  std::cout << \"Base path \" << base_path << std::endl;\n+  ARROW_RETURN_NOT_OK(fs->CreateDir(base_path));\n\nReview comment:\n       appveyor ci error needs be fixed:\r\n   https://ci.appveyor.com/project/ApacheSoftwareFoundation/arrow/builds/40927445/job/rmy2wlpipu4xg6ny#L1201\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T19:52:07.952+0000",
                    "updated": "2021-09-28T19:52:07.952+0000",
                    "started": "2021-09-28T19:52:07.952+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "656470",
                    "issueId": "13403209"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13403209/worklog/658120",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkmgit commented on a change in pull request #11231:\nURL: https://github.com/apache/arrow/pull/11231#discussion_r719112678\n\n\n\n##########\nFile path: cpp/examples/arrow/compute_and_write_csv_example.cc\n##########\n@@ -0,0 +1,140 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api_aggregate.h>\n+#include <arrow/compute/cast.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/csv/api.h>\n+#include <arrow/csv/writer.h>\n+#include <arrow/filesystem/filesystem.h>\n+#include <arrow/io/file.h>\n+#include <arrow/io/interfaces.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+\n+#include <iostream>\n+#include <vector>\n+\n+// Many operations in Apache arrow operate on\n+// columns of data, and the columns of data are\n+// assembled into a table. In this example, we\n+// examine how to compare two arrays which are\n+// combined to form a table that is then written\n+// out to a CSV file.\n+//\n+// To run this example you can use\n+// ./comparison_example uri\n+//\n+// where uri is the universal resource identifier\n+// to the directory you want created on your\n+// filesystem that output will be put into, for\n+// example on a local linux system\n+// ./comparison_example file:///$PWD\n+\n+int main(int argc, char** argv) {\n+  if (argc < 2) {\n+    std::cout << \"Please enter the path to which you want data saved\" << std::endl;\n+    // Fake success for CI purposes.\n+    return EXIT_SUCCESS;\n+  }\n+\n+  // Make Arrays\n+  arrow::NumericBuilder<arrow::Int64Type> int64_builder;\n+  arrow::BooleanBuilder boolean_builder;\n+\n+  // Make place for 8 values in total\n+  ARROW_RETURN_NOT_OK(int64_builder.Resize(8));\n+  ARROW_RETURN_NOT_OK(boolean_builder.Resize(8));\n+\n+  // Bulk append the given values\n+  std::vector<int64_t> int64_values = {1, 2, 3, 4, 5, 6, 7, 8};\n+  ARROW_RETURN_NOT_OK(int64_builder.AppendValues(int64_values));\n+  std::shared_ptr<arrow::Array> array_a;\n+  ARROW_RETURN_NOT_OK(int64_builder.Finish(&array_a));\n+  int64_builder.Reset();\n+  int64_values = {2, 5, 1, 3, 6, 2, 7, 4};\n+  std::shared_ptr<arrow::Array> array_b;\n+  ARROW_RETURN_NOT_OK(int64_builder.AppendValues(int64_values));\n+  ARROW_RETURN_NOT_OK(int64_builder.Finish(&array_b));\n+\n+  // Cast the arrays to their actual types\n+  auto int64_array_a = std::static_pointer_cast<arrow::Int64Array>(array_a);\n+  auto int64_array_b = std::static_pointer_cast<arrow::Int64Array>(array_b);\n+  // Explicit comparison using a loop\n+  for (int64_t i = 0; i < 8; i++) {\n+    if ((!int64_array_a->IsNull(i)) & (!int64_array_b->IsNull(i))) {\n+      bool comparison_result = int64_array_a->Value(i) > int64_array_b->Value(i);\n+      boolean_builder.UnsafeAppend(comparison_result);\n+    }\n+  }\n+  std::shared_ptr<arrow::Array> array_c;\n+  ARROW_RETURN_NOT_OK(boolean_builder.Finish(&array_c));\n+  std::cout << \"Array explicitly compared\" << std::endl;\n+\n+  // Try a compute function for comparison\n+  arrow::Datum compared_datum;\n+  std::shared_ptr<arrow::Array> array_d;\n+  arrow::Result<arrow::Datum> st_compared_datum =\n+      arrow::compute::CallFunction(\"greater\", {array_a, array_b});\n+  if (st_compared_datum.ok()) {\n+    compared_datum = std::move(st_compared_datum).ValueOrDie();\n+    array_d = compared_datum.make_array();\n+  } else {\n+    std::cerr << st_compared_datum.status() << std::endl;\n+  }\n+  std::cout << \"Arrays compared using a compute function\" << std::endl;\n+  // Create a table\n+  auto schema =\n+      arrow::schema({arrow::field(\"a\", arrow::int64()), \n+                     arrow::field(\"b\", arrow::int64()),\n+                     arrow::field(\"a>b? (self written)\", arrow::boolean()),\n+                     arrow::field(\"a>b? (arrow)\", arrow::boolean())});\n+  std::shared_ptr<arrow::Table> my_table =\n+      arrow::Table::Make(schema, {array_a, array_b, array_c, array_d});\n+\n+  std::cout << \"Table created\" << std::endl;\n+\n+  // Create a folder to output the data\n+  std::string uri = argv[1];\n+  std::string root_path;\n+  auto fs = arrow::fs::FileSystemFromUri(uri, &root_path).ValueOrDie();\n+  std::string base_path = root_path + \"/csv_dataset\";\n+  std::cout << \"Base path \" << base_path << std::endl;\n+  ARROW_RETURN_NOT_OK(fs->CreateDir(base_path));\n\nReview comment:\n       @cyb70289 Appveyor build passes. Tests in C++ / AMD64 MacOS 10.15 C++  pass, but then it seems to time out.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-30T06:58:55.423+0000",
                    "updated": "2021-09-30T06:58:55.423+0000",
                    "started": "2021-09-30T06:58:55.423+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "658120",
                    "issueId": "13403209"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13403209/worklog/658215",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkmgit commented on a change in pull request #11231:\nURL: https://github.com/apache/arrow/pull/11231#discussion_r719219776\n\n\n\n##########\nFile path: cpp/examples/arrow/compute_and_write_csv_example.cc\n##########\n@@ -0,0 +1,140 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api_aggregate.h>\n+#include <arrow/compute/cast.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/csv/api.h>\n+#include <arrow/csv/writer.h>\n+#include <arrow/filesystem/filesystem.h>\n+#include <arrow/io/file.h>\n+#include <arrow/io/interfaces.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+\n+#include <iostream>\n+#include <vector>\n+\n+// Many operations in Apache arrow operate on\n+// columns of data, and the columns of data are\n+// assembled into a table. In this example, we\n+// examine how to compare two arrays which are\n+// combined to form a table that is then written\n+// out to a CSV file.\n+//\n+// To run this example you can use\n+// ./comparison_example uri\n+//\n+// where uri is the universal resource identifier\n+// to the directory you want created on your\n+// filesystem that output will be put into, for\n+// example on a local linux system\n+// ./comparison_example file:///$PWD\n+\n+int main(int argc, char** argv) {\n+  if (argc < 2) {\n+    std::cout << \"Please enter the path to which you want data saved\" << std::endl;\n+    // Fake success for CI purposes.\n+    return EXIT_SUCCESS;\n+  }\n+\n+  // Make Arrays\n+  arrow::NumericBuilder<arrow::Int64Type> int64_builder;\n+  arrow::BooleanBuilder boolean_builder;\n+\n+  // Make place for 8 values in total\n+  ARROW_RETURN_NOT_OK(int64_builder.Resize(8));\n+  ARROW_RETURN_NOT_OK(boolean_builder.Resize(8));\n+\n+  // Bulk append the given values\n+  std::vector<int64_t> int64_values = {1, 2, 3, 4, 5, 6, 7, 8};\n+  ARROW_RETURN_NOT_OK(int64_builder.AppendValues(int64_values));\n+  std::shared_ptr<arrow::Array> array_a;\n+  ARROW_RETURN_NOT_OK(int64_builder.Finish(&array_a));\n+  int64_builder.Reset();\n+  int64_values = {2, 5, 1, 3, 6, 2, 7, 4};\n+  std::shared_ptr<arrow::Array> array_b;\n+  ARROW_RETURN_NOT_OK(int64_builder.AppendValues(int64_values));\n+  ARROW_RETURN_NOT_OK(int64_builder.Finish(&array_b));\n+\n+  // Cast the arrays to their actual types\n+  auto int64_array_a = std::static_pointer_cast<arrow::Int64Array>(array_a);\n+  auto int64_array_b = std::static_pointer_cast<arrow::Int64Array>(array_b);\n+  // Explicit comparison using a loop\n+  for (int64_t i = 0; i < 8; i++) {\n+    if ((!int64_array_a->IsNull(i)) & (!int64_array_b->IsNull(i))) {\n+      bool comparison_result = int64_array_a->Value(i) > int64_array_b->Value(i);\n+      boolean_builder.UnsafeAppend(comparison_result);\n+    }\n+  }\n+  std::shared_ptr<arrow::Array> array_c;\n+  ARROW_RETURN_NOT_OK(boolean_builder.Finish(&array_c));\n+  std::cout << \"Array explicitly compared\" << std::endl;\n+\n+  // Try a compute function for comparison\n+  arrow::Datum compared_datum;\n+  std::shared_ptr<arrow::Array> array_d;\n+  arrow::Result<arrow::Datum> st_compared_datum =\n+      arrow::compute::CallFunction(\"greater\", {array_a, array_b});\n+  if (st_compared_datum.ok()) {\n+    compared_datum = std::move(st_compared_datum).ValueOrDie();\n+    array_d = compared_datum.make_array();\n+  } else {\n+    std::cerr << st_compared_datum.status() << std::endl;\n+  }\n+  std::cout << \"Arrays compared using a compute function\" << std::endl;\n+  // Create a table\n+  auto schema =\n+      arrow::schema({arrow::field(\"a\", arrow::int64()), \n+                     arrow::field(\"b\", arrow::int64()),\n+                     arrow::field(\"a>b? (self written)\", arrow::boolean()),\n+                     arrow::field(\"a>b? (arrow)\", arrow::boolean())});\n+  std::shared_ptr<arrow::Table> my_table =\n+      arrow::Table::Make(schema, {array_a, array_b, array_c, array_d});\n+\n+  std::cout << \"Table created\" << std::endl;\n+\n+  // Create a folder to output the data\n+  std::string uri = argv[1];\n+  std::string root_path;\n+  auto fs = arrow::fs::FileSystemFromUri(uri, &root_path).ValueOrDie();\n+  std::string base_path = root_path + \"/csv_dataset\";\n+  std::cout << \"Base path \" << base_path << std::endl;\n+  ARROW_RETURN_NOT_OK(fs->CreateDir(base_path));\n\nReview comment:\n       @cyb70289 All tests pass.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-30T09:19:35.408+0000",
                    "updated": "2021-09-30T09:19:35.408+0000",
                    "started": "2021-09-30T09:19:35.408+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "658215",
                    "issueId": "13403209"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13403209/worklog/659229",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #11231:\nURL: https://github.com/apache/arrow/pull/11231#discussion_r720686604\n\n\n\n##########\nFile path: cpp/examples/arrow/compute_and_write_csv_example.cc\n##########\n@@ -0,0 +1,140 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api_aggregate.h>\n+#include <arrow/compute/cast.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/csv/api.h>\n+#include <arrow/csv/writer.h>\n+#include <arrow/filesystem/filesystem.h>\n+#include <arrow/io/file.h>\n+#include <arrow/io/interfaces.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+\n+#include <iostream>\n+#include <vector>\n+\n+// Many operations in Apache arrow operate on\n+// columns of data, and the columns of data are\n+// assembled into a table. In this example, we\n+// examine how to compare two arrays which are\n+// combined to form a table that is then written\n+// out to a CSV file.\n+//\n+// To run this example you can use\n+// ./comparison_example uri\n+//\n+// where uri is the universal resource identifier\n+// to the directory you want created on your\n+// filesystem that output will be put into, for\n+// example on a local linux system\n+// ./comparison_example file:///$PWD\n+\n+int main(int argc, char** argv) {\n+  if (argc < 2) {\n+    std::cout << \"Please enter the path to which you want data saved\" << std::endl;\n+    // Fake success for CI purposes.\n+    return EXIT_SUCCESS;\n+  }\n+\n+  // Make Arrays\n+  arrow::NumericBuilder<arrow::Int64Type> int64_builder;\n+  arrow::BooleanBuilder boolean_builder;\n+\n+  // Make place for 8 values in total\n+  ARROW_RETURN_NOT_OK(int64_builder.Resize(8));\n+  ARROW_RETURN_NOT_OK(boolean_builder.Resize(8));\n+\n+  // Bulk append the given values\n+  std::vector<int64_t> int64_values = {1, 2, 3, 4, 5, 6, 7, 8};\n+  ARROW_RETURN_NOT_OK(int64_builder.AppendValues(int64_values));\n+  std::shared_ptr<arrow::Array> array_a;\n+  ARROW_RETURN_NOT_OK(int64_builder.Finish(&array_a));\n+  int64_builder.Reset();\n+  int64_values = {2, 5, 1, 3, 6, 2, 7, 4};\n+  std::shared_ptr<arrow::Array> array_b;\n+  ARROW_RETURN_NOT_OK(int64_builder.AppendValues(int64_values));\n+  ARROW_RETURN_NOT_OK(int64_builder.Finish(&array_b));\n+\n+  // Cast the arrays to their actual types\n+  auto int64_array_a = std::static_pointer_cast<arrow::Int64Array>(array_a);\n+  auto int64_array_b = std::static_pointer_cast<arrow::Int64Array>(array_b);\n+  // Explicit comparison using a loop\n+  for (int64_t i = 0; i < 8; i++) {\n+    if ((!int64_array_a->IsNull(i)) & (!int64_array_b->IsNull(i))) {\n+      bool comparison_result = int64_array_a->Value(i) > int64_array_b->Value(i);\n+      boolean_builder.UnsafeAppend(comparison_result);\n+    }\n+  }\n+  std::shared_ptr<arrow::Array> array_c;\n+  ARROW_RETURN_NOT_OK(boolean_builder.Finish(&array_c));\n+  std::cout << \"Array explicitly compared\" << std::endl;\n+\n+  // Try a compute function for comparison\n+  arrow::Datum compared_datum;\n+  std::shared_ptr<arrow::Array> array_d;\n+  arrow::Result<arrow::Datum> st_compared_datum =\n+      arrow::compute::CallFunction(\"greater\", {array_a, array_b});\n+  if (st_compared_datum.ok()) {\n+    compared_datum = std::move(st_compared_datum).ValueOrDie();\n+    array_d = compared_datum.make_array();\n+  } else {\n+    std::cerr << st_compared_datum.status() << std::endl;\n+  }\n+  std::cout << \"Arrays compared using a compute function\" << std::endl;\n+  // Create a table\n+  auto schema =\n+      arrow::schema({arrow::field(\"a\", arrow::int64()), \n+                     arrow::field(\"b\", arrow::int64()),\n+                     arrow::field(\"a>b? (self written)\", arrow::boolean()),\n+                     arrow::field(\"a>b? (arrow)\", arrow::boolean())});\n+  std::shared_ptr<arrow::Table> my_table =\n+      arrow::Table::Make(schema, {array_a, array_b, array_c, array_d});\n+\n+  std::cout << \"Table created\" << std::endl;\n+\n+  // Create a folder to output the data\n+  std::string uri = argv[1];\n+  std::string root_path;\n+  auto fs = arrow::fs::FileSystemFromUri(uri, &root_path).ValueOrDie();\n+  std::string base_path = root_path + \"/csv_dataset\";\n+  std::cout << \"Base path \" << base_path << std::endl;\n+  ARROW_RETURN_NOT_OK(fs->CreateDir(base_path));\n\nReview comment:\n       @bkmgit , I'm in holiday next week, may not have time to review your code. Will do when I'm back asap.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-02T14:33:16.815+0000",
                    "updated": "2021-10-02T14:33:16.815+0000",
                    "started": "2021-10-02T14:33:16.815+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "659229",
                    "issueId": "13403209"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13403209/worklog/659409",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkmgit commented on a change in pull request #11231:\nURL: https://github.com/apache/arrow/pull/11231#discussion_r721051096\n\n\n\n##########\nFile path: cpp/examples/arrow/compute_and_write_csv_example.cc\n##########\n@@ -0,0 +1,140 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api_aggregate.h>\n+#include <arrow/compute/cast.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/csv/api.h>\n+#include <arrow/csv/writer.h>\n+#include <arrow/filesystem/filesystem.h>\n+#include <arrow/io/file.h>\n+#include <arrow/io/interfaces.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+\n+#include <iostream>\n+#include <vector>\n+\n+// Many operations in Apache arrow operate on\n+// columns of data, and the columns of data are\n+// assembled into a table. In this example, we\n+// examine how to compare two arrays which are\n+// combined to form a table that is then written\n+// out to a CSV file.\n+//\n+// To run this example you can use\n+// ./comparison_example uri\n+//\n+// where uri is the universal resource identifier\n+// to the directory you want created on your\n+// filesystem that output will be put into, for\n+// example on a local linux system\n+// ./comparison_example file:///$PWD\n+\n+int main(int argc, char** argv) {\n+  if (argc < 2) {\n+    std::cout << \"Please enter the path to which you want data saved\" << std::endl;\n+    // Fake success for CI purposes.\n+    return EXIT_SUCCESS;\n+  }\n+\n+  // Make Arrays\n+  arrow::NumericBuilder<arrow::Int64Type> int64_builder;\n+  arrow::BooleanBuilder boolean_builder;\n+\n+  // Make place for 8 values in total\n+  ARROW_RETURN_NOT_OK(int64_builder.Resize(8));\n+  ARROW_RETURN_NOT_OK(boolean_builder.Resize(8));\n+\n+  // Bulk append the given values\n+  std::vector<int64_t> int64_values = {1, 2, 3, 4, 5, 6, 7, 8};\n+  ARROW_RETURN_NOT_OK(int64_builder.AppendValues(int64_values));\n+  std::shared_ptr<arrow::Array> array_a;\n+  ARROW_RETURN_NOT_OK(int64_builder.Finish(&array_a));\n+  int64_builder.Reset();\n+  int64_values = {2, 5, 1, 3, 6, 2, 7, 4};\n+  std::shared_ptr<arrow::Array> array_b;\n+  ARROW_RETURN_NOT_OK(int64_builder.AppendValues(int64_values));\n+  ARROW_RETURN_NOT_OK(int64_builder.Finish(&array_b));\n+\n+  // Cast the arrays to their actual types\n+  auto int64_array_a = std::static_pointer_cast<arrow::Int64Array>(array_a);\n+  auto int64_array_b = std::static_pointer_cast<arrow::Int64Array>(array_b);\n+  // Explicit comparison using a loop\n+  for (int64_t i = 0; i < 8; i++) {\n+    if ((!int64_array_a->IsNull(i)) & (!int64_array_b->IsNull(i))) {\n+      bool comparison_result = int64_array_a->Value(i) > int64_array_b->Value(i);\n+      boolean_builder.UnsafeAppend(comparison_result);\n+    }\n+  }\n+  std::shared_ptr<arrow::Array> array_c;\n+  ARROW_RETURN_NOT_OK(boolean_builder.Finish(&array_c));\n+  std::cout << \"Array explicitly compared\" << std::endl;\n+\n+  // Try a compute function for comparison\n+  arrow::Datum compared_datum;\n+  std::shared_ptr<arrow::Array> array_d;\n+  arrow::Result<arrow::Datum> st_compared_datum =\n+      arrow::compute::CallFunction(\"greater\", {array_a, array_b});\n+  if (st_compared_datum.ok()) {\n+    compared_datum = std::move(st_compared_datum).ValueOrDie();\n+    array_d = compared_datum.make_array();\n+  } else {\n+    std::cerr << st_compared_datum.status() << std::endl;\n+  }\n+  std::cout << \"Arrays compared using a compute function\" << std::endl;\n+  // Create a table\n+  auto schema =\n+      arrow::schema({arrow::field(\"a\", arrow::int64()), \n+                     arrow::field(\"b\", arrow::int64()),\n+                     arrow::field(\"a>b? (self written)\", arrow::boolean()),\n+                     arrow::field(\"a>b? (arrow)\", arrow::boolean())});\n+  std::shared_ptr<arrow::Table> my_table =\n+      arrow::Table::Make(schema, {array_a, array_b, array_c, array_d});\n+\n+  std::cout << \"Table created\" << std::endl;\n+\n+  // Create a folder to output the data\n+  std::string uri = argv[1];\n+  std::string root_path;\n+  auto fs = arrow::fs::FileSystemFromUri(uri, &root_path).ValueOrDie();\n+  std::string base_path = root_path + \"/csv_dataset\";\n+  std::cout << \"Base path \" << base_path << std::endl;\n+  ARROW_RETURN_NOT_OK(fs->CreateDir(base_path));\n\nReview comment:\n       ok\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-04T05:25:07.021+0000",
                    "updated": "2021-10-04T05:25:07.021+0000",
                    "started": "2021-10-04T05:25:07.020+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "659409",
                    "issueId": "13403209"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13403209/worklog/663310",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkmgit commented on a change in pull request #11231:\nURL: https://github.com/apache/arrow/pull/11231#discussion_r725777633\n\n\n\n##########\nFile path: cpp/examples/arrow/compute_and_write_csv_example.cc\n##########\n@@ -0,0 +1,149 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api_aggregate.h>\n+#include <arrow/compute/cast.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/csv/api.h>\n+#include <arrow/csv/writer.h>\n+#include <arrow/filesystem/filesystem.h>\n+#include <arrow/io/file.h>\n+#include <arrow/io/interfaces.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+\n+#include <iostream>\n+#include <vector>\n+\n+// Many operations in Apache Arrow operate on\n+// columns of data, and the columns of data are\n+// assembled into a table. In this example, we\n+// examine how to compare two arrays which are\n+// combined to form a table that is then written\n+// out to a CSV file.\n+//\n+// To run this example you can use\n+// ./comparison_example URI\n+//\n+// where URI is the universal resource identifier\n+// to the directory you want created on your\n+// filesystem that output will be put into, for\n+// example on a local linux system\n+// ./comparison_example file:///$PWD\n+\n+#define ABORT_ON_FAILURE(expr)                     \\\n+  do {                                             \\\n+    arrow::Status status_ = (expr);                \\\n+    if (!status_.ok()) {                           \\\n+      std::cerr << status_.message() << std::endl; \\\n+      abort();                                     \\\n+    }                                              \\\n+  } while (0);\n+\n+int main(int argc, char** argv) {\n+  if (argc < 2) {\n+    std::cout << \"Please enter the path to which you want data saved\" << std::endl;\n+    // Fake success for CI purposes.\n+    return EXIT_SUCCESS;\n+  }\n+\n+  // Make Arrays\n+  arrow::NumericBuilder<arrow::Int64Type> int64_builder;\n+  arrow::BooleanBuilder boolean_builder;\n+\n+  // Make place for 8 values in total\n+  ABORT_ON_FAILURE(int64_builder.Resize(8));\n+  ABORT_ON_FAILURE(boolean_builder.Resize(8));\n+\n+  // Bulk append the given values\n+  std::vector<int64_t> int64_values = {1, 2, 3, 4, 5, 6, 7, 8};\n+  ABORT_ON_FAILURE(int64_builder.AppendValues(int64_values));\n+  std::shared_ptr<arrow::Array> array_a;\n+  ABORT_ON_FAILURE(int64_builder.Finish(&array_a));\n+  int64_builder.Reset();\n+  int64_values = {2, 5, 1, 3, 6, 2, 7, 4};\n+  std::shared_ptr<arrow::Array> array_b;\n+  ABORT_ON_FAILURE(int64_builder.AppendValues(int64_values));\n+  ABORT_ON_FAILURE(int64_builder.Finish(&array_b));\n+\n+  // Cast the arrays to their actual types\n+  auto int64_array_a = std::static_pointer_cast<arrow::Int64Array>(array_a);\n+  auto int64_array_b = std::static_pointer_cast<arrow::Int64Array>(array_b);\n+  // Explicit comparison of values using a loop\n+  for (int64_t i = 0; i < 8; i++) {\n+    if ((!int64_array_a->IsNull(i)) & (!int64_array_b->IsNull(i))) {\n+      bool comparison_result = int64_array_a->Value(i) > int64_array_b->Value(i);\n+      boolean_builder.UnsafeAppend(comparison_result);\n+    }\n+  }\n+  std::shared_ptr<arrow::Array> array_c;\n+  ABORT_ON_FAILURE(boolean_builder.Finish(&array_c));\n+  std::cout << \"Array explicitly compared\" << std::endl;\n+\n+  // Explicit comparison of values using a compute function\n+  arrow::Datum compared_datum;\n+  std::shared_ptr<arrow::Array> array_d;\n+  arrow::Result<arrow::Datum> st_compared_datum =\n+      arrow::compute::CallFunction(\"greater\", {array_a, array_b});\n+  if (st_compared_datum.ok()) {\n+    compared_datum = std::move(st_compared_datum).ValueOrDie();\n+    array_d = compared_datum.make_array();\n+  } else {\n+    std::cerr << st_compared_datum.status() << std::endl;\n+  }\n+  std::cout << \"Arrays compared using a compute function\" << std::endl;\n+  // Create a table for the output\n+  auto schema =\n+      arrow::schema({arrow::field(\"a\", arrow::int64()), \n+                     arrow::field(\"b\", arrow::int64()),\n+                     arrow::field(\"a>b? (self written)\", arrow::boolean()),\n+                     arrow::field(\"a>b? (arrow)\", arrow::boolean())});\n+  std::shared_ptr<arrow::Table> my_table =\n+      arrow::Table::Make(schema, {array_a, array_b, array_c, array_d});\n+\n+  std::cout << \"Table created\" << std::endl;\n+\n+  // Create a folder to output the data\n\nReview comment:\n       Suggested by @cyb70289 so do not overwrite information in current directory. Similar style used in the [dataset documentation example](https://github.com/apache/arrow/blob/master/cpp/examples/arrow/dataset_documentation_example.cc)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-11T04:14:42.868+0000",
                    "updated": "2021-10-11T04:14:42.868+0000",
                    "started": "2021-10-11T04:14:42.868+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "663310",
                    "issueId": "13403209"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13403209/worklog/663311",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkmgit commented on a change in pull request #11231:\nURL: https://github.com/apache/arrow/pull/11231#discussion_r725778386\n\n\n\n##########\nFile path: cpp/examples/arrow/compute_and_write_csv_example.cc\n##########\n@@ -0,0 +1,149 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api_aggregate.h>\n+#include <arrow/compute/cast.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/csv/api.h>\n+#include <arrow/csv/writer.h>\n+#include <arrow/filesystem/filesystem.h>\n+#include <arrow/io/file.h>\n+#include <arrow/io/interfaces.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+\n+#include <iostream>\n+#include <vector>\n+\n+// Many operations in Apache Arrow operate on\n+// columns of data, and the columns of data are\n+// assembled into a table. In this example, we\n+// examine how to compare two arrays which are\n+// combined to form a table that is then written\n+// out to a CSV file.\n+//\n+// To run this example you can use\n+// ./comparison_example URI\n+//\n+// where URI is the universal resource identifier\n+// to the directory you want created on your\n+// filesystem that output will be put into, for\n+// example on a local linux system\n+// ./comparison_example file:///$PWD\n+\n+#define ABORT_ON_FAILURE(expr)                     \\\n+  do {                                             \\\n+    arrow::Status status_ = (expr);                \\\n+    if (!status_.ok()) {                           \\\n+      std::cerr << status_.message() << std::endl; \\\n+      abort();                                     \\\n+    }                                              \\\n+  } while (0);\n+\n+int main(int argc, char** argv) {\n+  if (argc < 2) {\n+    std::cout << \"Please enter the path to which you want data saved\" << std::endl;\n+    // Fake success for CI purposes.\n+    return EXIT_SUCCESS;\n+  }\n\nReview comment:\n       Ok. Can make similar update for [Parquet example](https://github.com/apache/arrow/blob/master/cpp/examples/arrow/dataset_parquet_scan_example.cc)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-11T04:17:32.586+0000",
                    "updated": "2021-10-11T04:17:32.586+0000",
                    "started": "2021-10-11T04:17:32.586+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "663311",
                    "issueId": "13403209"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13403209/worklog/663312",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkmgit commented on a change in pull request #11231:\nURL: https://github.com/apache/arrow/pull/11231#discussion_r725779633\n\n\n\n##########\nFile path: cpp/examples/arrow/compute_and_write_csv_example.cc\n##########\n@@ -0,0 +1,149 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api_aggregate.h>\n+#include <arrow/compute/cast.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/csv/api.h>\n+#include <arrow/csv/writer.h>\n+#include <arrow/filesystem/filesystem.h>\n+#include <arrow/io/file.h>\n+#include <arrow/io/interfaces.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+\n+#include <iostream>\n+#include <vector>\n+\n+// Many operations in Apache Arrow operate on\n+// columns of data, and the columns of data are\n+// assembled into a table. In this example, we\n+// examine how to compare two arrays which are\n+// combined to form a table that is then written\n+// out to a CSV file.\n+//\n+// To run this example you can use\n+// ./comparison_example URI\n+//\n+// where URI is the universal resource identifier\n+// to the directory you want created on your\n+// filesystem that output will be put into, for\n+// example on a local linux system\n+// ./comparison_example file:///$PWD\n+\n+#define ABORT_ON_FAILURE(expr)                     \\\n+  do {                                             \\\n+    arrow::Status status_ = (expr);                \\\n+    if (!status_.ok()) {                           \\\n+      std::cerr << status_.message() << std::endl; \\\n+      abort();                                     \\\n+    }                                              \\\n+  } while (0);\n+\n+int main(int argc, char** argv) {\n+  if (argc < 2) {\n+    std::cout << \"Please enter the path to which you want data saved\" << std::endl;\n+    // Fake success for CI purposes.\n+    return EXIT_SUCCESS;\n+  }\n+\n+  // Make Arrays\n+  arrow::NumericBuilder<arrow::Int64Type> int64_builder;\n+  arrow::BooleanBuilder boolean_builder;\n+\n+  // Make place for 8 values in total\n+  ABORT_ON_FAILURE(int64_builder.Resize(8));\n+  ABORT_ON_FAILURE(boolean_builder.Resize(8));\n+\n+  // Bulk append the given values\n+  std::vector<int64_t> int64_values = {1, 2, 3, 4, 5, 6, 7, 8};\n+  ABORT_ON_FAILURE(int64_builder.AppendValues(int64_values));\n+  std::shared_ptr<arrow::Array> array_a;\n+  ABORT_ON_FAILURE(int64_builder.Finish(&array_a));\n+  int64_builder.Reset();\n+  int64_values = {2, 5, 1, 3, 6, 2, 7, 4};\n+  std::shared_ptr<arrow::Array> array_b;\n+  ABORT_ON_FAILURE(int64_builder.AppendValues(int64_values));\n+  ABORT_ON_FAILURE(int64_builder.Finish(&array_b));\n+\n+  // Cast the arrays to their actual types\n+  auto int64_array_a = std::static_pointer_cast<arrow::Int64Array>(array_a);\n+  auto int64_array_b = std::static_pointer_cast<arrow::Int64Array>(array_b);\n+  // Explicit comparison of values using a loop\n+  for (int64_t i = 0; i < 8; i++) {\n+    if ((!int64_array_a->IsNull(i)) & (!int64_array_b->IsNull(i))) {\n+      bool comparison_result = int64_array_a->Value(i) > int64_array_b->Value(i);\n+      boolean_builder.UnsafeAppend(comparison_result);\n+    }\n+  }\n+  std::shared_ptr<arrow::Array> array_c;\n+  ABORT_ON_FAILURE(boolean_builder.Finish(&array_c));\n+  std::cout << \"Array explicitly compared\" << std::endl;\n+\n+  // Explicit comparison of values using a compute function\n+  arrow::Datum compared_datum;\n+  std::shared_ptr<arrow::Array> array_d;\n+  arrow::Result<arrow::Datum> st_compared_datum =\n\nReview comment:\n        `st` is helpful to indicate expecting return of arrow::Result object with status information.\r\n   \r\n   Can use auto.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-11T04:22:52.684+0000",
                    "updated": "2021-10-11T04:22:52.684+0000",
                    "started": "2021-10-11T04:22:52.684+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "663312",
                    "issueId": "13403209"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13403209/worklog/663313",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkmgit commented on a change in pull request #11231:\nURL: https://github.com/apache/arrow/pull/11231#discussion_r725780767\n\n\n\n##########\nFile path: cpp/examples/arrow/compute_and_write_csv_example.cc\n##########\n@@ -0,0 +1,149 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api_aggregate.h>\n+#include <arrow/compute/cast.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/csv/api.h>\n+#include <arrow/csv/writer.h>\n+#include <arrow/filesystem/filesystem.h>\n+#include <arrow/io/file.h>\n+#include <arrow/io/interfaces.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+\n+#include <iostream>\n+#include <vector>\n+\n+// Many operations in Apache Arrow operate on\n+// columns of data, and the columns of data are\n+// assembled into a table. In this example, we\n+// examine how to compare two arrays which are\n+// combined to form a table that is then written\n+// out to a CSV file.\n+//\n+// To run this example you can use\n+// ./comparison_example URI\n+//\n+// where URI is the universal resource identifier\n+// to the directory you want created on your\n+// filesystem that output will be put into, for\n+// example on a local linux system\n+// ./comparison_example file:///$PWD\n+\n+#define ABORT_ON_FAILURE(expr)                     \\\n+  do {                                             \\\n+    arrow::Status status_ = (expr);                \\\n+    if (!status_.ok()) {                           \\\n+      std::cerr << status_.message() << std::endl; \\\n+      abort();                                     \\\n+    }                                              \\\n+  } while (0);\n+\n+int main(int argc, char** argv) {\n+  if (argc < 2) {\n+    std::cout << \"Please enter the path to which you want data saved\" << std::endl;\n+    // Fake success for CI purposes.\n+    return EXIT_SUCCESS;\n+  }\n+\n+  // Make Arrays\n+  arrow::NumericBuilder<arrow::Int64Type> int64_builder;\n+  arrow::BooleanBuilder boolean_builder;\n+\n+  // Make place for 8 values in total\n+  ABORT_ON_FAILURE(int64_builder.Resize(8));\n+  ABORT_ON_FAILURE(boolean_builder.Resize(8));\n+\n+  // Bulk append the given values\n+  std::vector<int64_t> int64_values = {1, 2, 3, 4, 5, 6, 7, 8};\n+  ABORT_ON_FAILURE(int64_builder.AppendValues(int64_values));\n+  std::shared_ptr<arrow::Array> array_a;\n+  ABORT_ON_FAILURE(int64_builder.Finish(&array_a));\n+  int64_builder.Reset();\n+  int64_values = {2, 5, 1, 3, 6, 2, 7, 4};\n+  std::shared_ptr<arrow::Array> array_b;\n+  ABORT_ON_FAILURE(int64_builder.AppendValues(int64_values));\n+  ABORT_ON_FAILURE(int64_builder.Finish(&array_b));\n+\n+  // Cast the arrays to their actual types\n+  auto int64_array_a = std::static_pointer_cast<arrow::Int64Array>(array_a);\n+  auto int64_array_b = std::static_pointer_cast<arrow::Int64Array>(array_b);\n+  // Explicit comparison of values using a loop\n+  for (int64_t i = 0; i < 8; i++) {\n+    if ((!int64_array_a->IsNull(i)) & (!int64_array_b->IsNull(i))) {\n+      bool comparison_result = int64_array_a->Value(i) > int64_array_b->Value(i);\n+      boolean_builder.UnsafeAppend(comparison_result);\n+    }\n+  }\n+  std::shared_ptr<arrow::Array> array_c;\n+  ABORT_ON_FAILURE(boolean_builder.Finish(&array_c));\n+  std::cout << \"Array explicitly compared\" << std::endl;\n+\n+  // Explicit comparison of values using a compute function\n+  arrow::Datum compared_datum;\n\nReview comment:\n       ok\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-11T04:27:49.774+0000",
                    "updated": "2021-10-11T04:27:49.774+0000",
                    "started": "2021-10-11T04:27:49.774+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "663313",
                    "issueId": "13403209"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13403209/worklog/663314",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #11231:\nURL: https://github.com/apache/arrow/pull/11231#discussion_r725781052\n\n\n\n##########\nFile path: cpp/examples/arrow/compute_and_write_csv_example.cc\n##########\n@@ -0,0 +1,149 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api_aggregate.h>\n+#include <arrow/compute/cast.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/csv/api.h>\n+#include <arrow/csv/writer.h>\n+#include <arrow/filesystem/filesystem.h>\n+#include <arrow/io/file.h>\n+#include <arrow/io/interfaces.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+\n+#include <iostream>\n+#include <vector>\n+\n+// Many operations in Apache Arrow operate on\n+// columns of data, and the columns of data are\n+// assembled into a table. In this example, we\n+// examine how to compare two arrays which are\n+// combined to form a table that is then written\n+// out to a CSV file.\n+//\n+// To run this example you can use\n+// ./comparison_example URI\n+//\n+// where URI is the universal resource identifier\n+// to the directory you want created on your\n+// filesystem that output will be put into, for\n+// example on a local linux system\n+// ./comparison_example file:///$PWD\n+\n+#define ABORT_ON_FAILURE(expr)                     \\\n+  do {                                             \\\n+    arrow::Status status_ = (expr);                \\\n+    if (!status_.ok()) {                           \\\n+      std::cerr << status_.message() << std::endl; \\\n+      abort();                                     \\\n+    }                                              \\\n+  } while (0);\n+\n+int main(int argc, char** argv) {\n+  if (argc < 2) {\n+    std::cout << \"Please enter the path to which you want data saved\" << std::endl;\n+    // Fake success for CI purposes.\n+    return EXIT_SUCCESS;\n+  }\n+\n+  // Make Arrays\n+  arrow::NumericBuilder<arrow::Int64Type> int64_builder;\n+  arrow::BooleanBuilder boolean_builder;\n+\n+  // Make place for 8 values in total\n+  ABORT_ON_FAILURE(int64_builder.Resize(8));\n+  ABORT_ON_FAILURE(boolean_builder.Resize(8));\n+\n+  // Bulk append the given values\n+  std::vector<int64_t> int64_values = {1, 2, 3, 4, 5, 6, 7, 8};\n+  ABORT_ON_FAILURE(int64_builder.AppendValues(int64_values));\n+  std::shared_ptr<arrow::Array> array_a;\n+  ABORT_ON_FAILURE(int64_builder.Finish(&array_a));\n+  int64_builder.Reset();\n+  int64_values = {2, 5, 1, 3, 6, 2, 7, 4};\n+  std::shared_ptr<arrow::Array> array_b;\n+  ABORT_ON_FAILURE(int64_builder.AppendValues(int64_values));\n+  ABORT_ON_FAILURE(int64_builder.Finish(&array_b));\n+\n+  // Cast the arrays to their actual types\n+  auto int64_array_a = std::static_pointer_cast<arrow::Int64Array>(array_a);\n+  auto int64_array_b = std::static_pointer_cast<arrow::Int64Array>(array_b);\n+  // Explicit comparison of values using a loop\n+  for (int64_t i = 0; i < 8; i++) {\n+    if ((!int64_array_a->IsNull(i)) & (!int64_array_b->IsNull(i))) {\n+      bool comparison_result = int64_array_a->Value(i) > int64_array_b->Value(i);\n+      boolean_builder.UnsafeAppend(comparison_result);\n+    }\n+  }\n+  std::shared_ptr<arrow::Array> array_c;\n+  ABORT_ON_FAILURE(boolean_builder.Finish(&array_c));\n+  std::cout << \"Array explicitly compared\" << std::endl;\n+\n+  // Explicit comparison of values using a compute function\n+  arrow::Datum compared_datum;\n+  std::shared_ptr<arrow::Array> array_d;\n+  arrow::Result<arrow::Datum> st_compared_datum =\n\nReview comment:\n       `st` is an abbreviation of `status`?\r\n   \r\n   We use `maybe_XXX` or `XXX_result` for `arrow::Result<>` variable.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-11T04:28:46.059+0000",
                    "updated": "2021-10-11T04:28:46.059+0000",
                    "started": "2021-10-11T04:28:46.059+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "663314",
                    "issueId": "13403209"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13403209/worklog/663316",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #11231:\nURL: https://github.com/apache/arrow/pull/11231#discussion_r725782075\n\n\n\n##########\nFile path: cpp/examples/arrow/compute_and_write_csv_example.cc\n##########\n@@ -0,0 +1,149 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api_aggregate.h>\n+#include <arrow/compute/cast.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/csv/api.h>\n+#include <arrow/csv/writer.h>\n+#include <arrow/filesystem/filesystem.h>\n+#include <arrow/io/file.h>\n+#include <arrow/io/interfaces.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+\n+#include <iostream>\n+#include <vector>\n+\n+// Many operations in Apache Arrow operate on\n+// columns of data, and the columns of data are\n+// assembled into a table. In this example, we\n+// examine how to compare two arrays which are\n+// combined to form a table that is then written\n+// out to a CSV file.\n+//\n+// To run this example you can use\n+// ./comparison_example URI\n+//\n+// where URI is the universal resource identifier\n+// to the directory you want created on your\n+// filesystem that output will be put into, for\n+// example on a local linux system\n+// ./comparison_example file:///$PWD\n+\n+#define ABORT_ON_FAILURE(expr)                     \\\n+  do {                                             \\\n+    arrow::Status status_ = (expr);                \\\n+    if (!status_.ok()) {                           \\\n+      std::cerr << status_.message() << std::endl; \\\n+      abort();                                     \\\n+    }                                              \\\n+  } while (0);\n+\n+int main(int argc, char** argv) {\n+  if (argc < 2) {\n+    std::cout << \"Please enter the path to which you want data saved\" << std::endl;\n+    // Fake success for CI purposes.\n+    return EXIT_SUCCESS;\n+  }\n+\n+  // Make Arrays\n+  arrow::NumericBuilder<arrow::Int64Type> int64_builder;\n+  arrow::BooleanBuilder boolean_builder;\n+\n+  // Make place for 8 values in total\n+  ABORT_ON_FAILURE(int64_builder.Resize(8));\n+  ABORT_ON_FAILURE(boolean_builder.Resize(8));\n+\n+  // Bulk append the given values\n+  std::vector<int64_t> int64_values = {1, 2, 3, 4, 5, 6, 7, 8};\n+  ABORT_ON_FAILURE(int64_builder.AppendValues(int64_values));\n+  std::shared_ptr<arrow::Array> array_a;\n+  ABORT_ON_FAILURE(int64_builder.Finish(&array_a));\n+  int64_builder.Reset();\n+  int64_values = {2, 5, 1, 3, 6, 2, 7, 4};\n+  std::shared_ptr<arrow::Array> array_b;\n+  ABORT_ON_FAILURE(int64_builder.AppendValues(int64_values));\n+  ABORT_ON_FAILURE(int64_builder.Finish(&array_b));\n+\n+  // Cast the arrays to their actual types\n+  auto int64_array_a = std::static_pointer_cast<arrow::Int64Array>(array_a);\n+  auto int64_array_b = std::static_pointer_cast<arrow::Int64Array>(array_b);\n+  // Explicit comparison of values using a loop\n+  for (int64_t i = 0; i < 8; i++) {\n+    if ((!int64_array_a->IsNull(i)) & (!int64_array_b->IsNull(i))) {\n+      bool comparison_result = int64_array_a->Value(i) > int64_array_b->Value(i);\n+      boolean_builder.UnsafeAppend(comparison_result);\n+    }\n+  }\n+  std::shared_ptr<arrow::Array> array_c;\n+  ABORT_ON_FAILURE(boolean_builder.Finish(&array_c));\n+  std::cout << \"Array explicitly compared\" << std::endl;\n+\n+  // Explicit comparison of values using a compute function\n+  arrow::Datum compared_datum;\n+  std::shared_ptr<arrow::Array> array_d;\n+  arrow::Result<arrow::Datum> st_compared_datum =\n+      arrow::compute::CallFunction(\"greater\", {array_a, array_b});\n+  if (st_compared_datum.ok()) {\n+    compared_datum = std::move(st_compared_datum).ValueOrDie();\n+    array_d = compared_datum.make_array();\n+  } else {\n+    std::cerr << st_compared_datum.status() << std::endl;\n+  }\n+  std::cout << \"Arrays compared using a compute function\" << std::endl;\n+  // Create a table for the output\n+  auto schema =\n+      arrow::schema({arrow::field(\"a\", arrow::int64()), \n+                     arrow::field(\"b\", arrow::int64()),\n+                     arrow::field(\"a>b? (self written)\", arrow::boolean()),\n+                     arrow::field(\"a>b? (arrow)\", arrow::boolean())});\n+  std::shared_ptr<arrow::Table> my_table =\n+      arrow::Table::Make(schema, {array_a, array_b, array_c, array_d});\n+\n+  std::cout << \"Table created\" << std::endl;\n+\n+  // Create a folder to output the data\n\nReview comment:\n       The dataset example needs to create a directory because dataset reads data from base directory.\r\n   \r\n   How about using prefix for the default path such as `comute_and_write_csv_example.csv` or something instead of creating a directory? Then we can remove code for creating directory with filesystem API. The API isn't related to compute API nor writing CSV API.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-11T04:32:50.359+0000",
                    "updated": "2021-10-11T04:32:50.359+0000",
                    "started": "2021-10-11T04:32:50.359+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "663316",
                    "issueId": "13403209"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13403209/worklog/663319",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkmgit commented on a change in pull request #11231:\nURL: https://github.com/apache/arrow/pull/11231#discussion_r725783158\n\n\n\n##########\nFile path: cpp/examples/arrow/compute_and_write_csv_example.cc\n##########\n@@ -0,0 +1,149 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api_aggregate.h>\n+#include <arrow/compute/cast.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/csv/api.h>\n+#include <arrow/csv/writer.h>\n+#include <arrow/filesystem/filesystem.h>\n+#include <arrow/io/file.h>\n+#include <arrow/io/interfaces.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+\n+#include <iostream>\n+#include <vector>\n+\n+// Many operations in Apache Arrow operate on\n+// columns of data, and the columns of data are\n+// assembled into a table. In this example, we\n+// examine how to compare two arrays which are\n+// combined to form a table that is then written\n+// out to a CSV file.\n+//\n+// To run this example you can use\n+// ./comparison_example URI\n+//\n+// where URI is the universal resource identifier\n+// to the directory you want created on your\n+// filesystem that output will be put into, for\n+// example on a local linux system\n+// ./comparison_example file:///$PWD\n+\n+#define ABORT_ON_FAILURE(expr)                     \\\n+  do {                                             \\\n+    arrow::Status status_ = (expr);                \\\n+    if (!status_.ok()) {                           \\\n+      std::cerr << status_.message() << std::endl; \\\n+      abort();                                     \\\n+    }                                              \\\n+  } while (0);\n+\n+int main(int argc, char** argv) {\n+  if (argc < 2) {\n+    std::cout << \"Please enter the path to which you want data saved\" << std::endl;\n+    // Fake success for CI purposes.\n+    return EXIT_SUCCESS;\n+  }\n+\n+  // Make Arrays\n+  arrow::NumericBuilder<arrow::Int64Type> int64_builder;\n+  arrow::BooleanBuilder boolean_builder;\n+\n+  // Make place for 8 values in total\n+  ABORT_ON_FAILURE(int64_builder.Resize(8));\n+  ABORT_ON_FAILURE(boolean_builder.Resize(8));\n+\n+  // Bulk append the given values\n+  std::vector<int64_t> int64_values = {1, 2, 3, 4, 5, 6, 7, 8};\n+  ABORT_ON_FAILURE(int64_builder.AppendValues(int64_values));\n+  std::shared_ptr<arrow::Array> array_a;\n+  ABORT_ON_FAILURE(int64_builder.Finish(&array_a));\n+  int64_builder.Reset();\n+  int64_values = {2, 5, 1, 3, 6, 2, 7, 4};\n+  std::shared_ptr<arrow::Array> array_b;\n+  ABORT_ON_FAILURE(int64_builder.AppendValues(int64_values));\n+  ABORT_ON_FAILURE(int64_builder.Finish(&array_b));\n+\n+  // Cast the arrays to their actual types\n+  auto int64_array_a = std::static_pointer_cast<arrow::Int64Array>(array_a);\n+  auto int64_array_b = std::static_pointer_cast<arrow::Int64Array>(array_b);\n+  // Explicit comparison of values using a loop\n+  for (int64_t i = 0; i < 8; i++) {\n+    if ((!int64_array_a->IsNull(i)) & (!int64_array_b->IsNull(i))) {\n+      bool comparison_result = int64_array_a->Value(i) > int64_array_b->Value(i);\n+      boolean_builder.UnsafeAppend(comparison_result);\n+    }\n+  }\n+  std::shared_ptr<arrow::Array> array_c;\n+  ABORT_ON_FAILURE(boolean_builder.Finish(&array_c));\n+  std::cout << \"Array explicitly compared\" << std::endl;\n+\n+  // Explicit comparison of values using a compute function\n+  arrow::Datum compared_datum;\n+  std::shared_ptr<arrow::Array> array_d;\n+  arrow::Result<arrow::Datum> st_compared_datum =\n+      arrow::compute::CallFunction(\"greater\", {array_a, array_b});\n+  if (st_compared_datum.ok()) {\n+    compared_datum = std::move(st_compared_datum).ValueOrDie();\n+    array_d = compared_datum.make_array();\n+  } else {\n+    std::cerr << st_compared_datum.status() << std::endl;\n+  }\n+  std::cout << \"Arrays compared using a compute function\" << std::endl;\n+  // Create a table for the output\n+  auto schema =\n+      arrow::schema({arrow::field(\"a\", arrow::int64()), \n+                     arrow::field(\"b\", arrow::int64()),\n+                     arrow::field(\"a>b? (self written)\", arrow::boolean()),\n+                     arrow::field(\"a>b? (arrow)\", arrow::boolean())});\n+  std::shared_ptr<arrow::Table> my_table =\n+      arrow::Table::Make(schema, {array_a, array_b, array_c, array_d});\n+\n+  std::cout << \"Table created\" << std::endl;\n+\n+  // Create a folder to output the data\n\nReview comment:\n       ok\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-11T04:36:39.427+0000",
                    "updated": "2021-10-11T04:36:39.427+0000",
                    "started": "2021-10-11T04:36:39.427+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "663319",
                    "issueId": "13403209"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13403209/worklog/663320",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkmgit commented on a change in pull request #11231:\nURL: https://github.com/apache/arrow/pull/11231#discussion_r725783287\n\n\n\n##########\nFile path: cpp/examples/arrow/compute_and_write_csv_example.cc\n##########\n@@ -0,0 +1,149 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api_aggregate.h>\n+#include <arrow/compute/cast.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/csv/api.h>\n+#include <arrow/csv/writer.h>\n+#include <arrow/filesystem/filesystem.h>\n+#include <arrow/io/file.h>\n+#include <arrow/io/interfaces.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+\n+#include <iostream>\n+#include <vector>\n+\n+// Many operations in Apache Arrow operate on\n+// columns of data, and the columns of data are\n+// assembled into a table. In this example, we\n+// examine how to compare two arrays which are\n+// combined to form a table that is then written\n+// out to a CSV file.\n+//\n+// To run this example you can use\n+// ./comparison_example URI\n+//\n+// where URI is the universal resource identifier\n+// to the directory you want created on your\n+// filesystem that output will be put into, for\n+// example on a local linux system\n+// ./comparison_example file:///$PWD\n+\n+#define ABORT_ON_FAILURE(expr)                     \\\n+  do {                                             \\\n+    arrow::Status status_ = (expr);                \\\n+    if (!status_.ok()) {                           \\\n+      std::cerr << status_.message() << std::endl; \\\n+      abort();                                     \\\n+    }                                              \\\n+  } while (0);\n+\n+int main(int argc, char** argv) {\n+  if (argc < 2) {\n+    std::cout << \"Please enter the path to which you want data saved\" << std::endl;\n+    // Fake success for CI purposes.\n+    return EXIT_SUCCESS;\n+  }\n+\n+  // Make Arrays\n+  arrow::NumericBuilder<arrow::Int64Type> int64_builder;\n+  arrow::BooleanBuilder boolean_builder;\n+\n+  // Make place for 8 values in total\n+  ABORT_ON_FAILURE(int64_builder.Resize(8));\n+  ABORT_ON_FAILURE(boolean_builder.Resize(8));\n+\n+  // Bulk append the given values\n+  std::vector<int64_t> int64_values = {1, 2, 3, 4, 5, 6, 7, 8};\n+  ABORT_ON_FAILURE(int64_builder.AppendValues(int64_values));\n+  std::shared_ptr<arrow::Array> array_a;\n+  ABORT_ON_FAILURE(int64_builder.Finish(&array_a));\n+  int64_builder.Reset();\n+  int64_values = {2, 5, 1, 3, 6, 2, 7, 4};\n+  std::shared_ptr<arrow::Array> array_b;\n+  ABORT_ON_FAILURE(int64_builder.AppendValues(int64_values));\n+  ABORT_ON_FAILURE(int64_builder.Finish(&array_b));\n+\n+  // Cast the arrays to their actual types\n+  auto int64_array_a = std::static_pointer_cast<arrow::Int64Array>(array_a);\n+  auto int64_array_b = std::static_pointer_cast<arrow::Int64Array>(array_b);\n+  // Explicit comparison of values using a loop\n+  for (int64_t i = 0; i < 8; i++) {\n+    if ((!int64_array_a->IsNull(i)) & (!int64_array_b->IsNull(i))) {\n+      bool comparison_result = int64_array_a->Value(i) > int64_array_b->Value(i);\n+      boolean_builder.UnsafeAppend(comparison_result);\n+    }\n+  }\n+  std::shared_ptr<arrow::Array> array_c;\n+  ABORT_ON_FAILURE(boolean_builder.Finish(&array_c));\n+  std::cout << \"Array explicitly compared\" << std::endl;\n+\n+  // Explicit comparison of values using a compute function\n+  arrow::Datum compared_datum;\n+  std::shared_ptr<arrow::Array> array_d;\n+  arrow::Result<arrow::Datum> st_compared_datum =\n+      arrow::compute::CallFunction(\"greater\", {array_a, array_b});\n+  if (st_compared_datum.ok()) {\n+    compared_datum = std::move(st_compared_datum).ValueOrDie();\n+    array_d = compared_datum.make_array();\n+  } else {\n+    std::cerr << st_compared_datum.status() << std::endl;\n+  }\n+  std::cout << \"Arrays compared using a compute function\" << std::endl;\n+  // Create a table for the output\n+  auto schema =\n+      arrow::schema({arrow::field(\"a\", arrow::int64()), \n+                     arrow::field(\"b\", arrow::int64()),\n+                     arrow::field(\"a>b? (self written)\", arrow::boolean()),\n+                     arrow::field(\"a>b? (arrow)\", arrow::boolean())});\n+  std::shared_ptr<arrow::Table> my_table =\n+      arrow::Table::Make(schema, {array_a, array_b, array_c, array_d});\n+\n+  std::cout << \"Table created\" << std::endl;\n+\n+  // Create a folder to output the data\n+  std::string uri = argv[1];\n+  std::string root_path;\n+  auto fs = arrow::fs::FileSystemFromUri(uri, &root_path).ValueOrDie();\n+  std::string base_path = root_path + \"/csv_dataset\";\n+  std::cout << \"Base path \" << base_path << std::endl;\n+  ABORT_ON_FAILURE(fs->CreateDir(base_path));\n+  auto csv_filename = base_path + \"/output.csv\";\n+\n+  // Write table to CSV file\n+  std::shared_ptr<arrow::io::FileOutputStream> outstream;\n+  arrow::Result<std::shared_ptr<arrow::io::FileOutputStream>> st =\n+      arrow::io::FileOutputStream::Open(csv_filename, false);\n+  if (st.ok()) {\n+    outstream = std::move(st).ValueOrDie();\n+  } else {\n+    std::cerr << st.status() << std::endl;\n+  }\n+\n+  auto write_options = arrow::csv::WriteOptions::Defaults();\n+  std::cout << \"Writing CSV file\" << std::endl;\n+  if (arrow::csv::WriteCSV(*my_table, write_options, outstream.get()).ok()) {\n\nReview comment:\n       ok\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-11T04:37:22.681+0000",
                    "updated": "2021-10-11T04:37:22.681+0000",
                    "started": "2021-10-11T04:37:22.681+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "663320",
                    "issueId": "13403209"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13403209/worklog/663322",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkmgit commented on a change in pull request #11231:\nURL: https://github.com/apache/arrow/pull/11231#discussion_r725783715\n\n\n\n##########\nFile path: cpp/examples/arrow/compute_and_write_csv_example.cc\n##########\n@@ -0,0 +1,149 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api_aggregate.h>\n+#include <arrow/compute/cast.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/csv/api.h>\n+#include <arrow/csv/writer.h>\n+#include <arrow/filesystem/filesystem.h>\n+#include <arrow/io/file.h>\n+#include <arrow/io/interfaces.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+\n+#include <iostream>\n+#include <vector>\n+\n+// Many operations in Apache Arrow operate on\n+// columns of data, and the columns of data are\n+// assembled into a table. In this example, we\n+// examine how to compare two arrays which are\n+// combined to form a table that is then written\n+// out to a CSV file.\n+//\n+// To run this example you can use\n+// ./comparison_example URI\n+//\n+// where URI is the universal resource identifier\n+// to the directory you want created on your\n+// filesystem that output will be put into, for\n+// example on a local linux system\n+// ./comparison_example file:///$PWD\n+\n+#define ABORT_ON_FAILURE(expr)                     \\\n+  do {                                             \\\n+    arrow::Status status_ = (expr);                \\\n+    if (!status_.ok()) {                           \\\n+      std::cerr << status_.message() << std::endl; \\\n+      abort();                                     \\\n+    }                                              \\\n+  } while (0);\n+\n+int main(int argc, char** argv) {\n+  if (argc < 2) {\n+    std::cout << \"Please enter the path to which you want data saved\" << std::endl;\n+    // Fake success for CI purposes.\n+    return EXIT_SUCCESS;\n+  }\n+\n+  // Make Arrays\n+  arrow::NumericBuilder<arrow::Int64Type> int64_builder;\n+  arrow::BooleanBuilder boolean_builder;\n+\n+  // Make place for 8 values in total\n+  ABORT_ON_FAILURE(int64_builder.Resize(8));\n+  ABORT_ON_FAILURE(boolean_builder.Resize(8));\n+\n+  // Bulk append the given values\n+  std::vector<int64_t> int64_values = {1, 2, 3, 4, 5, 6, 7, 8};\n+  ABORT_ON_FAILURE(int64_builder.AppendValues(int64_values));\n+  std::shared_ptr<arrow::Array> array_a;\n+  ABORT_ON_FAILURE(int64_builder.Finish(&array_a));\n+  int64_builder.Reset();\n+  int64_values = {2, 5, 1, 3, 6, 2, 7, 4};\n+  std::shared_ptr<arrow::Array> array_b;\n+  ABORT_ON_FAILURE(int64_builder.AppendValues(int64_values));\n+  ABORT_ON_FAILURE(int64_builder.Finish(&array_b));\n+\n+  // Cast the arrays to their actual types\n+  auto int64_array_a = std::static_pointer_cast<arrow::Int64Array>(array_a);\n+  auto int64_array_b = std::static_pointer_cast<arrow::Int64Array>(array_b);\n+  // Explicit comparison of values using a loop\n+  for (int64_t i = 0; i < 8; i++) {\n+    if ((!int64_array_a->IsNull(i)) & (!int64_array_b->IsNull(i))) {\n+      bool comparison_result = int64_array_a->Value(i) > int64_array_b->Value(i);\n+      boolean_builder.UnsafeAppend(comparison_result);\n+    }\n+  }\n+  std::shared_ptr<arrow::Array> array_c;\n+  ABORT_ON_FAILURE(boolean_builder.Finish(&array_c));\n+  std::cout << \"Array explicitly compared\" << std::endl;\n+\n+  // Explicit comparison of values using a compute function\n+  arrow::Datum compared_datum;\n+  std::shared_ptr<arrow::Array> array_d;\n+  arrow::Result<arrow::Datum> st_compared_datum =\n\nReview comment:\n       XXX_result is helpful\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-11T04:38:57.528+0000",
                    "updated": "2021-10-11T04:38:57.528+0000",
                    "started": "2021-10-11T04:38:57.528+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "663322",
                    "issueId": "13403209"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13403209/worklog/663409",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkmgit commented on a change in pull request #11231:\nURL: https://github.com/apache/arrow/pull/11231#discussion_r725950001\n\n\n\n##########\nFile path: cpp/examples/arrow/compute_and_write_csv_example.cc\n##########\n@@ -0,0 +1,149 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements. See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership. The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License. You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied. See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <arrow/api.h>\n+#include <arrow/compute/api_aggregate.h>\n+#include <arrow/compute/cast.h>\n+#include <arrow/compute/exec/expression.h>\n+#include <arrow/csv/api.h>\n+#include <arrow/csv/writer.h>\n+#include <arrow/filesystem/filesystem.h>\n+#include <arrow/io/file.h>\n+#include <arrow/io/interfaces.h>\n+#include <arrow/result.h>\n+#include <arrow/status.h>\n+\n+#include <iostream>\n+#include <vector>\n+\n+// Many operations in Apache Arrow operate on\n+// columns of data, and the columns of data are\n+// assembled into a table. In this example, we\n+// examine how to compare two arrays which are\n+// combined to form a table that is then written\n+// out to a CSV file.\n+//\n+// To run this example you can use\n+// ./comparison_example URI\n+//\n+// where URI is the universal resource identifier\n+// to the directory you want created on your\n+// filesystem that output will be put into, for\n+// example on a local linux system\n+// ./comparison_example file:///$PWD\n+\n+#define ABORT_ON_FAILURE(expr)                     \\\n+  do {                                             \\\n+    arrow::Status status_ = (expr);                \\\n+    if (!status_.ok()) {                           \\\n+      std::cerr << status_.message() << std::endl; \\\n+      abort();                                     \\\n+    }                                              \\\n+  } while (0);\n+\n+int main(int argc, char** argv) {\n+  if (argc < 2) {\n+    std::cout << \"Please enter the path to which you want data saved\" << std::endl;\n+    // Fake success for CI purposes.\n+    return EXIT_SUCCESS;\n+  }\n+\n+  // Make Arrays\n+  arrow::NumericBuilder<arrow::Int64Type> int64_builder;\n+  arrow::BooleanBuilder boolean_builder;\n+\n+  // Make place for 8 values in total\n+  ABORT_ON_FAILURE(int64_builder.Resize(8));\n+  ABORT_ON_FAILURE(boolean_builder.Resize(8));\n+\n+  // Bulk append the given values\n+  std::vector<int64_t> int64_values = {1, 2, 3, 4, 5, 6, 7, 8};\n+  ABORT_ON_FAILURE(int64_builder.AppendValues(int64_values));\n+  std::shared_ptr<arrow::Array> array_a;\n+  ABORT_ON_FAILURE(int64_builder.Finish(&array_a));\n+  int64_builder.Reset();\n+  int64_values = {2, 5, 1, 3, 6, 2, 7, 4};\n+  std::shared_ptr<arrow::Array> array_b;\n+  ABORT_ON_FAILURE(int64_builder.AppendValues(int64_values));\n+  ABORT_ON_FAILURE(int64_builder.Finish(&array_b));\n+\n+  // Cast the arrays to their actual types\n+  auto int64_array_a = std::static_pointer_cast<arrow::Int64Array>(array_a);\n+  auto int64_array_b = std::static_pointer_cast<arrow::Int64Array>(array_b);\n+  // Explicit comparison of values using a loop\n+  for (int64_t i = 0; i < 8; i++) {\n+    if ((!int64_array_a->IsNull(i)) & (!int64_array_b->IsNull(i))) {\n+      bool comparison_result = int64_array_a->Value(i) > int64_array_b->Value(i);\n+      boolean_builder.UnsafeAppend(comparison_result);\n+    }\n+  }\n+  std::shared_ptr<arrow::Array> array_c;\n+  ABORT_ON_FAILURE(boolean_builder.Finish(&array_c));\n+  std::cout << \"Array explicitly compared\" << std::endl;\n+\n+  // Explicit comparison of values using a compute function\n+  arrow::Datum compared_datum;\n+  std::shared_ptr<arrow::Array> array_d;\n+  arrow::Result<arrow::Datum> st_compared_datum =\n+      arrow::compute::CallFunction(\"greater\", {array_a, array_b});\n+  if (st_compared_datum.ok()) {\n+    compared_datum = std::move(st_compared_datum).ValueOrDie();\n+    array_d = compared_datum.make_array();\n+  } else {\n+    std::cerr << st_compared_datum.status() << std::endl;\n+  }\n+  std::cout << \"Arrays compared using a compute function\" << std::endl;\n+  // Create a table for the output\n+  auto schema =\n+      arrow::schema({arrow::field(\"a\", arrow::int64()), \n+                     arrow::field(\"b\", arrow::int64()),\n+                     arrow::field(\"a>b? (self written)\", arrow::boolean()),\n+                     arrow::field(\"a>b? (arrow)\", arrow::boolean())});\n+  std::shared_ptr<arrow::Table> my_table =\n+      arrow::Table::Make(schema, {array_a, array_b, array_c, array_d});\n+\n+  std::cout << \"Table created\" << std::endl;\n+\n+  // Create a folder to output the data\n+  std::string uri = argv[1];\n+  std::string root_path;\n+  auto fs = arrow::fs::FileSystemFromUri(uri, &root_path).ValueOrDie();\n+  std::string base_path = root_path + \"/csv_dataset\";\n+  std::cout << \"Base path \" << base_path << std::endl;\n+  ABORT_ON_FAILURE(fs->CreateDir(base_path));\n+  auto csv_filename = base_path + \"/output.csv\";\n+\n+  // Write table to CSV file\n+  std::shared_ptr<arrow::io::FileOutputStream> outstream;\n+  arrow::Result<std::shared_ptr<arrow::io::FileOutputStream>> st =\n+      arrow::io::FileOutputStream::Open(csv_filename, false);\n+  if (st.ok()) {\n+    outstream = std::move(st).ValueOrDie();\n+  } else {\n+    std::cerr << st.status() << std::endl;\n+  }\n+\n+  auto write_options = arrow::csv::WriteOptions::Defaults();\n+  std::cout << \"Writing CSV file\" << std::endl;\n+  if (arrow::csv::WriteCSV(*my_table, write_options, outstream.get()).ok()) {\n\nReview comment:\n       Done\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-10-11T09:31:59.606+0000",
                    "updated": "2021-10-11T09:31:59.606+0000",
                    "started": "2021-10-11T09:31:59.606+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "663409",
                    "issueId": "13403209"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 16800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2f6c27e9[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7b4fd64e[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2059e37f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2521bc9c[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@25c90f8c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6d54945e[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f9d090[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2a94490f[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@47cc86be[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@e731c7d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@42c23073[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4a16c515[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 16800,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Oct 13 19:34:59 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": [
            "C++"
        ],
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-10-13T19:34:59.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14127/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-09-24T19:28:27.000+0000",
        "updated": "2021-10-14T05:02:31.000+0000",
        "timeoriginalestimate": null,
        "description": "Add a C++ example which demonstrates use of a compute function and output to CSV file.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 16800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Docs] Example of using compute function and output",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13403209/comment/17428463",
                    "id": "17428463",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "Issue resolved by pull request 11231\n[https://github.com/apache/arrow/pull/11231]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2021-10-13T19:34:59.866+0000",
                    "updated": "2021-10-13T19:34:59.866+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0v9sg:",
        "customfield_12314139": null
    }
}