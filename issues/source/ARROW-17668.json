{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13480916",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13480916",
    "key": "ARROW-17668",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jinshang",
            "name": "jinshang",
            "key": "JIRAUSER295132",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER295132&avatarId=51712",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER295132&avatarId=51712",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER295132&avatarId=51712",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER295132&avatarId=51712"
            },
            "displayName": "Jin Shang",
            "active": true,
            "timeZone": "Asia/Hong_Kong"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/3",
            "description": "This issue is being actively worked on at the moment by the assignee.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/inprogress.png",
            "name": "In Progress",
            "id": "3",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/4",
                "id": 4,
                "key": "indeterminate",
                "colorName": "yellow",
                "name": "In Progress"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334626",
                "id": "12334626",
                "name": "C++ - Gandiva"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jinshang",
            "name": "jinshang",
            "key": "JIRAUSER295132",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER295132&avatarId=51712",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER295132&avatarId=51712",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER295132&avatarId=51712",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER295132&avatarId=51712"
            },
            "displayName": "Jin Shang",
            "active": true,
            "timeZone": "Asia/Hong_Kong"
        },
        "subtasks": [
            {
                "id": "13481283",
                "key": "ARROW-17701",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13481283",
                "fields": {
                    "summary": "[C++][Gandiva] Add support for untyped node",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                        "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                        "name": "Resolved",
                        "id": "5",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                            "id": 3,
                            "key": "done",
                            "colorName": "green",
                            "name": "Done"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                        "name": "Minor",
                        "id": "4"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13481446",
                "key": "ARROW-17722",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13481446",
                "fields": {
                    "summary": "[C++][Gandiva] Add token and grammar rules for literals and fields",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/3",
                        "description": "This issue is being actively worked on at the moment by the assignee.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/inprogress.png",
                        "name": "In Progress",
                        "id": "3",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/4",
                            "id": 4,
                            "key": "indeterminate",
                            "colorName": "yellow",
                            "name": "In Progress"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                        "name": "Minor",
                        "id": "4"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13481743",
                "key": "ARROW-17743",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13481743",
                "fields": {
                    "summary": "[C++][Gandiva] Add token and grammar rules for functions",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/3",
                        "description": "This issue is being actively worked on at the moment by the assignee.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/inprogress.png",
                        "name": "In Progress",
                        "id": "3",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/4",
                            "id": 4,
                            "key": "indeterminate",
                            "colorName": "yellow",
                            "name": "In Progress"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                        "name": "Minor",
                        "id": "4"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13481746",
                "key": "ARROW-17744",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13481746",
                "fields": {
                    "summary": "[C++][Gandiva] Add token and grammar rules for if and bool",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/3",
                        "description": "This issue is being actively worked on at the moment by the assignee.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/inprogress.png",
                        "name": "In Progress",
                        "id": "3",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/4",
                            "id": 4,
                            "key": "indeterminate",
                            "colorName": "yellow",
                            "name": "In Progress"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                        "name": "Minor",
                        "id": "4"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13481747",
                "key": "ARROW-17745",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13481747",
                "fields": {
                    "summary": "[C++][Gandiva] Add token and grammar rules for in expression",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                        "description": "The issue is open and ready for the assignee to start work on it.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                        "name": "Open",
                        "id": "1",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                            "id": 2,
                            "key": "new",
                            "colorName": "blue-gray",
                            "name": "To Do"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                        "name": "Minor",
                        "id": "4"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13481748",
                "key": "ARROW-17746",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13481748",
                "fields": {
                    "summary": "[C++][Gandiva] Allow searching function signatures by name",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/3",
                        "description": "This issue is being actively worked on at the moment by the assignee.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/inprogress.png",
                        "name": "In Progress",
                        "id": "3",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/4",
                            "id": 4,
                            "key": "indeterminate",
                            "colorName": "yellow",
                            "name": "In Progress"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                        "name": "Minor",
                        "id": "4"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            },
            {
                "id": "13481749",
                "key": "ARROW-17747",
                "self": "https://issues.apache.org/jira/rest/api/2/issue/13481749",
                "fields": {
                    "summary": "[C++][Gandiva] Add type inference to Gandiva parser",
                    "status": {
                        "self": "https://issues.apache.org/jira/rest/api/2/status/3",
                        "description": "This issue is being actively worked on at the moment by the assignee.",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/inprogress.png",
                        "name": "In Progress",
                        "id": "3",
                        "statusCategory": {
                            "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/4",
                            "id": 4,
                            "key": "indeterminate",
                            "colorName": "yellow",
                            "name": "In Progress"
                        }
                    },
                    "priority": {
                        "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                        "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                        "name": "Minor",
                        "id": "4"
                    },
                    "issuetype": {
                        "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                        "id": "7",
                        "description": "The sub-task of the issue",
                        "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                        "name": "Sub-task",
                        "subtask": true,
                        "avatarId": 21146
                    }
                }
            }
        ],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jinshang",
            "name": "jinshang",
            "key": "JIRAUSER295132",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER295132&avatarId=51712",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER295132&avatarId=51712",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER295132&avatarId=51712",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER295132&avatarId=51712"
            },
            "displayName": "Jin Shang",
            "active": true,
            "timeZone": "Asia/Hong_Kong"
        },
        "aggregateprogress": {
            "progress": 12000,
            "total": 12000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17668/votes",
            "votes": 0,
            "hasVoted": false
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 6600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@30272554[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7d1243a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2a0ae311[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2474e29e[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5a1b7efc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@ab8f1f9[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@77d799d4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@74b4f5a2[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@75d99956[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@38a3992d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@73f1bed4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@20bb4ced[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12000,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Sep 15 20:00:20 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": [
            "C++"
        ],
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17668/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2022-09-09T17:46:30.000+0000",
        "updated": "2022-10-11T07:17:18.000+0000",
        "timeoriginalestimate": null,
        "description": "h2. Background\r\n\r\nMy team uses an expression computation library for our C++ feature engineering pipeline. We currently use\u00a0[Exprtk|https://github.com/ArashPartow/exprtk]. We recently tried out Gandiva and wrote some benchmarks. We discovered that Gandiva is several times faster than Exprtk in our use cases. Therefore we decided to switch to Gandiva for computing expressions.\r\nh2. Objective\r\n\r\nAs of current, due to its lack of a frontend, we need to manually construct an AST to use Gandiva. This is inconvenient and requires extra learning costs. We also want to enable our ML engineers to dynamically create/update an expression with runtime hot-loaded configs without restarting our server. This is currently impossible with Gandiva because the Expression tree is statically created with C++ and must be compiled in the server binary.\r\n\r\nTherefore, we would like to implement a parser frontend for Gandiva, so that Gandiva becomes a standalone complete expression compiler and evaluator, and a drop-in replacement for the existing libraries like\u00a0[Exprtk|https://github.com/ArashPartow/exprtk]\u00a0and\u00a0[TinyExpr|https://github.com/codeplea/tinyexpr]. The goal is to enable the following functionality:\r\n\r\n\u00a0\r\n\r\n{{}}\r\n{code:java}\r\n// Create schema for gandiva\r\nauto field_x = arrow::field(\"x\", arrow::uint64());\r\nauto field_y = arrow::field(\"y\", arrow::float64());\r\nauto field_z = arrow::field(\"z\", arrow::boolean());\r\nauto schema = arrow::schema({field_x, field_y, field_z});\r\n\r\n/** BEGIN CHANGE **/\r\n// Use the Parser to generate a NodePtr\r\nstd::string expr_str = \"if(z, castFloat8(x), y * 1000.0)\";\r\nauto parser = gandiva::Parser(schema);\r\ngandiva::NodePtr root_node;\r\nauto status = parser.Parse(expr_str, &root_node);\r\n/** END CHANGE **/\r\n\r\n// The rest is normal usage of Gandiva projector\r\nauto expr_ptr = std::make_shared<gandiva::Expression>(root_node, result_field);\r\nstd::shared_ptr<gandiva::Projector> projector;\r\nauto status = gandiva::Projector::Make(schema, {expr_ptr}, &projector);\r\n\r\nauto in_batch = arrow::RecordBatch::Make(schema, size, input_arr);\r\nauto* pool = arrow::default_memory_pool();\r\narrow::ArrayVector outputs;\r\nauto status = projector->Evaluate(*in_batch, pool, &outputs);{code}\r\n{{\u00a0}}\r\n\r\nThe code block enclosed by \u201cBEGIN CHANGE\u201d and \u201cEND CHANGE\u201d is the proposed usage of the parser. It offers two benefits:\r\n # It\u2019s more intuitive to write math expressions compared to constructing trees, thus easier to use.\r\n # It allows dynamically adding new expressions or and changing existing ones with a runtime hot-loaded config file without restarting our server.\r\n\r\nh2. Syntax\r\n\r\nThe goal is to design a succinct and intuitive grammar for both schema and Gandiva expressions. We will need a corresponding grammar for each Node type in Gandiva.\r\n * Literals: We find Rust\u2019s literal representation([https://doc.rust-lang.org/rust-by-example/types/literals.html]) very intuitive. We\u2019ll support suffixes such as\u00a0{{{}i32{}}},\u00a0{{{}u64{}}},\u00a0{{f32}}\u00a0to denote a literal node\u2019s type. The types of unsuffixed literals are inferred by their usage. Otherwise, the default type for integers is\u00a0{{int32}}\u00a0and\u00a0{{float32}}\u00a0for floating points. String and binary literals are wrapped with single or double quotes. Decimal128 literals will not be supported in the first version.\r\n\r\n * Fields: Just their names as defined in the schema. To avoid conflicts with other node types, field names must start with alphabetical letters.\r\n\r\n * Functions:\u00a0{{{}<function_name>(<param1>, <param2>, ...){}}}. For functions with multiple overloads, their return type is inferred from input types. For commonly used functions, we would also like to support infix forms. They include:\r\n\r\n ** Comparisons: equal(==), not equal(!=), greater than(>), greater than or equal to(>=), less than(<), less than or equal to(<=)\r\n ** Arithmetics: add(+), subtract(-), multiply(*), divide(/), modulo(%), power(^), bitwise and(&), bitwise or(|), bitwise xor(^), bitwise not(~)\r\nFunction aliases with spaces in their names won\u2019t be supported such as \u201cis not false\u201d are not supported.\r\n\r\n * Ifs: We would like to support two grammars for if expressions:\r\n\r\n ** {{if(<cond>, <then>, <else>)}}\u00a0for its simplicity and functional feel;\r\n ** {{if(<cond>) \\{ <then> } else \\{ <else> }}}\u00a0since it\u2019s the C++\u00a0{{if}}\u00a0grammar and has better formatting for complex expressions.\r\n * Booleans: We would like to support both\u00a0{{&& ||}}\u00a0and\u00a0{{and or}}\u00a0keywords the same as C++.\r\n\r\n * InExpressions:\u00a0{{<eval> in (<member1>, <member2>, ...)}}\u00a0. Its type is also inferred.\r\n\r\nThe grammar can be roughly represented as:\r\n\r\n\u00a0\r\n\r\n{{}}\r\n{code:java}\r\n// Create schema for gandiva\r\nauto field_x = arrow::field(\"x\", arrow::uint64());\r\nauto field_y = arrow::field(\"y\", arrow::float64());\r\nauto field_z = arrow::field(\"z\", arrow::boolean());\r\nauto schema = arrow::schema({field_x, field_y, field_z});\r\n\r\n/** BEGIN CHANGE **/\r\n// Use the Parser to generate a NodePtr\r\nstd::string expr_str = \"if(z, castFloat8(x), y * 1000.0)\";\r\nauto parser = gandiva::Parser(schema);\r\ngandiva::NodePtr root_node;\r\nauto status = parser.Parse(expr_str, &root_node);\r\n/** END CHANGE **/\r\n\r\n// The rest is normal usage of Gandiva projector\r\nauto expr_ptr = std::make_shared<gandiva::Expression>(root_node, result_field);\r\nstd::shared_ptr<gandiva::Projector> projector;\r\nauto status = gandiva::Projector::Make(schema, {expr_ptr}, &projector);\r\n\r\nauto in_batch = arrow::RecordBatch::Make(schema, size, input_arr);\r\nauto* pool = arrow::default_memory_pool();\r\narrow::ArrayVector outputs;\r\nauto status = projector->Evaluate(*in_batch, pool, &outputs);{code}\r\n{{\u00a0}}\r\n\r\nlower cases are non-terminals and upper cases are tokens.\r\nh2. Implementation\r\nh3. Lexing and Parsing\r\n\r\nWe would like to use flex and bison for lexing and parsing. They have several advantages compared to other options like Antlr4 and Boost::Spirit.\r\n # They are the most classical and popular parsing library in the cpp world.\r\n # They allow us to precompile the parser codes and have no runtime dependencies.\r\n\r\nFlex&bison takes a string and outputs a\u00a0{{gandiva::node}}\u00a0tree. The tree may contain untyped nodes, e.g., unsuffixed literals and functions.\r\nh3. Type Inference\r\n\r\nWe\u2019ll have a TypeInferenceVisitor class that inherits node visitor, implementing a 2-pass DFS algorithm to do type inference. In each pass, the visitor tries to infer current node\u2019s and its children\u2019s types from currently available info:\r\n\r\nIf it\u2019s a non-leaf node such as\u00a0{{function}}\u00a0,{{{}if{}}}\u00a0,{{{}boolean{}}}:\r\n # First visit each child: let them infer their own types as much as they can.\r\n # Create a\u00a0{{SignaturePattern}}\u00a0based on currently known types. The pattern includes the current node\u2019s type and children\u2019s types. The types can be\u00a0{{nullptr}}\u00a0meaning the type is currently unknown. For example, the\u00a0{{SignaturePattern}}\u00a0for\u00a0{{func(x: u64, 5: untyped)}}\u00a0will be\u00a0{{(u64, nullptr)\u2014>nullptr.}}\r\n # Get all available signatures of the current node. For\u00a0{{{}function{}}}s, it\u2019s the signatures registered at the function registry. For\u00a0{{{}if{}}}, it\u2019s\u00a0{{(bool, <type>, <type>)\u2014><type>}}\u00a0for any type etc.\r\n # Try to match each signature with the current pattern\u00a0{{SignaturePattern}}\r\n ## If no one matches, it\u2019s a type error.\r\n ## If only one matches, it\u2019s the matched signature. We then update current node\u2019s and their children\u2019s types based on this signature.\r\n ## If more than one matches, we extract a common pattern from the set of matched signatures. For example,\u00a0{{(nullptr, nullptr)\u2014>bool}}\u00a0can be extracted from\u00a0{{(double, double)\u2014>bool}}\u00a0and\u00a0{{(int32, int32)\u2014>bool}}\u00a0. We then update types based on this common pattern.\r\n\r\nIf it\u2019s a leaf node, just update its value if its type is set by its parent. We need to do this because untyped literals\u2019 values are saved in a generic container.\r\n\r\nWe run this procedure 2 times, with the second pass a bit different. In the second pass, if a literal node is still untyped, give it a default type ({{{}int32{}}}\u00a0for ints and\u00a0{{float32}}\u00a0for floats).\r\n # The first pass is bottom up propagation of types. A parent\u2019s type is inferred from its children.\r\n # The second pass is both:\r\n ## top down propagation of first pass\u2019 info. Once a parent\u2019s type is known in the first pass, it may set it\u2019s children\u2019s type\r\n ## bottom up of default literal types. A literal is given a default type.\r\n\r\nIn the second pass, since all leaf nodes\u2019 types are known. The types of all nodes are guaranteed to be inferred.\r\nh3. Proof of correctness\r\n\r\nI have a proof of correctness of this inference procedure in mind, but it\u2019s too long to be written down here. (Fermat did it too :)) But the correctness is based on these two facts:\r\n # There are no overloads that differ only on their return types. E.g. there are no\u00a0{{func := (int32, int32)-->int32}}\u00a0and\u00a0{{func := (int32, int32)-->double}}\u00a0in the Gandiva registry. Therefore we can always know a function\u2019s type if its children\u2019s types are known.\r\n # There are no overloads that accept only non-default numeric types. For example, if there is a\u00a0{{func := (int16, int16)-->int16}}\u00a0and\u00a0{{{}func := (int64, int64)-->int64{}}}, but no\u00a0{{{}func := (int32, int32)-->int32{}}}, then the inference procedure will fail on expression\u00a0{{func(1, 2)}}\u00a0because it cannot tell the types of\u00a0{{1}}\u00a0and\u00a0{{{}2{}}}, and giving them default types won't work.\r\n\r\nh2. Prototype and Examples\r\n\r\nI\u2019ve already written a mostly working prototype of the parser and type inference visitor and unit tests for them. They are on the branch\u00a0[https://github.com/js8544/arrow/tree/jinshang/gandiva/type_inference].\r\n\r\nYou can checkout the diffs here:\u00a0[https://github.com/apache/arrow/compare/master...js8544:arrow:jinshang/gandiva/type_inference]\r\n\r\nThe main files are:\r\n # cpp/src/gandiva/grammar.yy: grammar rules for Bison.\r\n # cpp/src/gandiva/lex.ll: lex rules for Flex.\r\n # cpp/src/gandiva/typeinference.h/cc: type inference procedure.\r\n # cpp/src/gandiva/parser.cc: the driver class that combines the three components.\r\n # cpp/src/gandiva/parser_test.cc: unit tests containing examples of the proposed syntax and the result expression trees the parser generates. You can run the tests by running\u00a0{{cmake .. --preset=ninja-debug-gandiva}}\u00a0and\u00a0{{{}ninja test-gandiva-tests{}}}.\r\n\r\nAny suggestion/question is appreciated!",
        "customfield_10010": null,
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Gandiva] Add parser frontend for Gandiva",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "customfield_12311820": "0|z18gcg:",
        "customfield_12314139": null
    }
}