{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13426650",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426650",
    "key": "ARROW-15573",
    "fields": {
        "parent": {
            "id": "13418565",
            "key": "ARROW-15156",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13418565",
            "fields": {
                "summary": "[Doc] Implement Tutorials for the Java Documentation",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=dsusanibara",
            "name": "dsusanibara",
            "key": "dsusanibara",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Dali Susanibar Arce",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332532",
                "id": "12332532",
                "name": "Documentation"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
            "name": "amol-",
            "key": "amol-",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
            },
            "displayName": "Alessandro Molina",
            "active": true,
            "timeZone": "Europe/Rome"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
            "name": "amol-",
            "key": "amol-",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
            },
            "displayName": "Alessandro Molina",
            "active": true,
            "timeZone": "Europe/Rome"
        },
        "aggregateprogress": {
            "progress": 29400,
            "total": 29400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 29400,
            "total": 29400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15573/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 49,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426650/worklog/739566",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar opened a new pull request #12603:\nURL: https://github.com/apache/arrow/pull/12603\n\n\n   Apache Arrow java memory documentation.\r\n   \r\n   @lidavidm \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-10T16:12:42.210+0000",
                    "updated": "2022-03-10T16:12:42.210+0000",
                    "started": "2022-03-10T16:12:42.209+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "739566",
                    "issueId": "13426650"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426650/worklog/739596",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12603:\nURL: https://github.com/apache/arrow/pull/12603#issuecomment-1064274834\n\n\n   https://issues.apache.org/jira/browse/ARROW-15573\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-10T16:46:27.208+0000",
                    "updated": "2022-03-10T16:46:27.208+0000",
                    "started": "2022-03-10T16:46:27.208+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "739596",
                    "issueId": "13426650"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426650/worklog/739735",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #12603:\nURL: https://github.com/apache/arrow/pull/12603#issuecomment-1064531314\n\n\n   Sorry, just a note: please try to ping people in a separate comment since the PR description will get put in the eventual commit message and that leads to notification spam (and we don't always remember to remove the ping before merging)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-10T21:43:23.531+0000",
                    "updated": "2022-03-10T21:43:23.531+0000",
                    "started": "2022-03-10T21:43:23.531+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "739735",
                    "issueId": "13426650"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426650/worklog/739739",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12603:\nURL: https://github.com/apache/arrow/pull/12603#discussion_r824186945\n\n\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n\nReview comment:\n       This sentence is a little redundant\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n\nReview comment:\n       Maybe `BufferAllocator` and link to the Javadoc\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n\nReview comment:\n       Maybe `ArrowBuf` and link to the Javadoc\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n\nReview comment:\n       I would argue that \"Reference counting\" is a third major concept\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n\nReview comment:\n       Arrow provides multiple modules, but users only need one or two of them:\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n\nReview comment:\n       Hmm, the focus here is a little off IMO. Something like this: Arrow's memory management is built around the needs of the columnar format and using off-heap memory. Also, it is its own independent implementation, and does not wrap the C++ implementation.\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n\nReview comment:\n       I'm not really sure what this tells us, what is the user learning here?\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n\nReview comment:\n       ```\r\n   ``memory-core``: provides the interfaces used by the Arrow libraries and applications.\r\n   ```\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n+* Memory Netty: Netty allocator and utils for allocating memory in Arrow.\n\nReview comment:\n       ```\r\n   ``memory-netty``: an implementation of the memory interfaces based on the [Netty](INSERT LINK HERE) library.\r\n   ```\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n+* Memory Netty: Netty allocator and utils for allocating memory in Arrow.\n+* Memory Unsafe: Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+\n+Allocators\n+==========\n+\n+Memory core module define the next allocators:\n\nReview comment:\n       Again, for a beginner, I think we can have more explanation, and focus less on just replicating the README 1-1\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n+* Memory Netty: Netty allocator and utils for allocating memory in Arrow.\n+* Memory Unsafe: Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+\n+Allocators\n+==========\n+\n+Memory core module define the next allocators:\n+\n+* Buffer Allocator: The public interface application users should be leveraging.\n+* Root Allocator: A root allocator for using direct memory. Typically only one created for a JVM.\n\nReview comment:\n       \"The concrete implementation of the allocator. Applications should generally create one allocator at the start of the program.\" \r\n   \r\n   The direct memory stuff should be described above, not here.\r\n   \r\n   Also, if we are referencing a class name, then just use the class name (ideally with a link to the docs), e.g. \"RootAllocator\", else it gets confusing\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n+* Memory Netty: Netty allocator and utils for allocating memory in Arrow.\n+* Memory Unsafe: Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n\nReview comment:\n       and ditto\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n+* Memory Netty: Netty allocator and utils for allocating memory in Arrow.\n+* Memory Unsafe: Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+\n+Allocators\n+==========\n+\n+Memory core module define the next allocators:\n+\n+* Buffer Allocator: The public interface application users should be leveraging.\n+* Root Allocator: A root allocator for using direct memory. Typically only one created for a JVM.\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n+\n+Please consider this note on your development:\n+\n+* Use BufferAllocator instead of RootAllocator in your allocator creation.\n+* Create your allocator inside of a try-with-resources statement.\n+\n+.. code-block:: Java\n+\n+    try (BufferAllocator allocator = new RootAllocator(Long.MAX_VALUE) ) { ; }\n+\n+ArrowBuf\n+========\n+\n+The facade for interacting directly with a chunk of memory.\n+\n+Two important instance variables of an ArrowBuf:\n+\n+* Address: Starting virtual address in the underlying memory chunk that this ArrowBuf has access to.\n+* Length: Length (in bytes) in the underlying memory chunk that this ArrowBuf has access to.\n+\n\nReview comment:\n       As suggested above we should have a section on reference counting. We should talk about remembering to `close()` objects here\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n+* Memory Netty: Netty allocator and utils for allocating memory in Arrow.\n+* Memory Unsafe: Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+\n+Allocators\n+==========\n+\n+Memory core module define the next allocators:\n+\n+* Buffer Allocator: The public interface application users should be leveraging.\n+* Root Allocator: A root allocator for using direct memory. Typically only one created for a JVM.\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n+\n+Please consider this note on your development:\n\nReview comment:\n       \"Consider these guidelines:\"\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n+* Memory Netty: Netty allocator and utils for allocating memory in Arrow.\n+* Memory Unsafe: Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+\n+Allocators\n+==========\n+\n+Memory core module define the next allocators:\n+\n+* Buffer Allocator: The public interface application users should be leveraging.\n+* Root Allocator: A root allocator for using direct memory. Typically only one created for a JVM.\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n+\n+Please consider this note on your development:\n+\n+* Use BufferAllocator instead of RootAllocator in your allocator creation.\n+* Create your allocator inside of a try-with-resources statement.\n\nReview comment:\n       \"Remember to close() allocators after use (whether they are child allocators or the RootAllocator), either manually or preferably via a try-with-resources statement. Allocators will check for outstanding memory allocations when closed, and throw an exception if there are allocated buffers; this helps detect memory leaks.\" \n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n+* Memory Netty: Netty allocator and utils for allocating memory in Arrow.\n+* Memory Unsafe: Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+\n+Allocators\n+==========\n+\n+Memory core module define the next allocators:\n+\n+* Buffer Allocator: The public interface application users should be leveraging.\n+* Root Allocator: A root allocator for using direct memory. Typically only one created for a JVM.\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n+\n+Please consider this note on your development:\n+\n+* Use BufferAllocator instead of RootAllocator in your allocator creation.\n+* Create your allocator inside of a try-with-resources statement.\n+\n+.. code-block:: Java\n+\n+    try (BufferAllocator allocator = new RootAllocator(Long.MAX_VALUE) ) { ; }\n+\n+ArrowBuf\n+========\n+\n+The facade for interacting directly with a chunk of memory.\n+\n+Two important instance variables of an ArrowBuf:\n+\n+* Address: Starting virtual address in the underlying memory chunk that this ArrowBuf has access to.\n+* Length: Length (in bytes) in the underlying memory chunk that this ArrowBuf has access to.\n\nReview comment:\n       I don't think we need to elaborate on this so much. \n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n+* Memory Netty: Netty allocator and utils for allocating memory in Arrow.\n+* Memory Unsafe: Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+\n+Allocators\n+==========\n+\n+Memory core module define the next allocators:\n+\n+* Buffer Allocator: The public interface application users should be leveraging.\n+* Root Allocator: A root allocator for using direct memory. Typically only one created for a JVM.\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n+\n+Please consider this note on your development:\n+\n+* Use BufferAllocator instead of RootAllocator in your allocator creation.\n\nReview comment:\n       \"Use the BufferAllocator interface in APIs instead of RootAllocator.\"\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n+* Memory Netty: Netty allocator and utils for allocating memory in Arrow.\n+* Memory Unsafe: Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+\n+Allocators\n+==========\n+\n+Memory core module define the next allocators:\n+\n+* Buffer Allocator: The public interface application users should be leveraging.\n+* Root Allocator: A root allocator for using direct memory. Typically only one created for a JVM.\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n+\n+Please consider this note on your development:\n+\n+* Use BufferAllocator instead of RootAllocator in your allocator creation.\n+* Create your allocator inside of a try-with-resources statement.\n+\n+.. code-block:: Java\n+\n+    try (BufferAllocator allocator = new RootAllocator(Long.MAX_VALUE) ) { ; }\n+\n+ArrowBuf\n+========\n+\n+The facade for interacting directly with a chunk of memory.\n\nReview comment:\n       \"ArrowBuf represents a single, contiguous allocation of direct memory. It consists of an address and a length, and provides low-level interfaces for working with the contents, similar to ByteBuffer. Unlike (Direct)ByteBuffer, it has reference counting built in (see the next section).\"\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n\nReview comment:\n       ```suggestion\r\n   The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\r\n   ```\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n+* Memory Netty: Netty allocator and utils for allocating memory in Arrow.\n+* Memory Unsafe: Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+\n+Allocators\n+==========\n+\n+Memory core module define the next allocators:\n+\n+* Buffer Allocator: The public interface application users should be leveraging.\n+* Root Allocator: A root allocator for using direct memory. Typically only one created for a JVM.\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n+\n+Please consider this note on your development:\n+\n+* Use BufferAllocator instead of RootAllocator in your allocator creation.\n+* Create your allocator inside of a try-with-resources statement.\n+\n+.. code-block:: Java\n+\n+    try (BufferAllocator allocator = new RootAllocator(Long.MAX_VALUE) ) { ; }\n\nReview comment:\n       Java users know how to use try-with-resources. We should assume they are a beginner to Arrow, but are reasonably familiar with Java itself.\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n\nReview comment:\n       We should elaborate on how and why Arrow uses direct memory\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n+* Memory Netty: Netty allocator and utils for allocating memory in Arrow.\n+* Memory Unsafe: Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+\n+Allocators\n+==========\n+\n+Memory core module define the next allocators:\n\nReview comment:\n       \"One of the interfaces defined by memory-core is BufferAllocator. This class is responsible for...\"\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n+* Memory Netty: Netty allocator and utils for allocating memory in Arrow.\n+* Memory Unsafe: Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+\n+Allocators\n+==========\n+\n+Memory core module define the next allocators:\n+\n+* Buffer Allocator: The public interface application users should be leveraging.\n+* Root Allocator: A root allocator for using direct memory. Typically only one created for a JVM.\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n+\n+Please consider this note on your development:\n+\n+* Use BufferAllocator instead of RootAllocator in your allocator creation.\n+* Create your allocator inside of a try-with-resources statement.\n+\n+.. code-block:: Java\n+\n+    try (BufferAllocator allocator = new RootAllocator(Long.MAX_VALUE) ) { ; }\n+\n+ArrowBuf\n+========\n+\n+The facade for interacting directly with a chunk of memory.\n+\n+Two important instance variables of an ArrowBuf:\n+\n+* Address: Starting virtual address in the underlying memory chunk that this ArrowBuf has access to.\n+* Length: Length (in bytes) in the underlying memory chunk that this ArrowBuf has access to.\n+\n+Memory Modules\n+==============\n+\n+Memory core define the bases to work with direct memory and the application decided to allocate arrow buffer bases on\n+the dependency added on your pom.xml (memory-unsafe or memory-netty). If any of these is not added the application raise\n+an exception.\n\nReview comment:\n       This should just be one sentence as part of the list of modules above. \"Applications should depend on memory-core and one of the two implementations, else an exception will be raised at runtime.\"\r\n   \r\n   We generally shouldn't talk about pom.xml. Not all people use Maven.\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n+* Memory Netty: Netty allocator and utils for allocating memory in Arrow.\n+* Memory Unsafe: Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+\n+Allocators\n+==========\n+\n+Memory core module define the next allocators:\n+\n+* Buffer Allocator: The public interface application users should be leveraging.\n+* Root Allocator: A root allocator for using direct memory. Typically only one created for a JVM.\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n\nReview comment:\n       Why do we want to use child allocators?\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n+* Memory Netty: Netty allocator and utils for allocating memory in Arrow.\n+* Memory Unsafe: Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+\n+Allocators\n+==========\n+\n+Memory core module define the next allocators:\n+\n+* Buffer Allocator: The public interface application users should be leveraging.\n+* Root Allocator: A root allocator for using direct memory. Typically only one created for a JVM.\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n+\n+Please consider this note on your development:\n+\n+* Use BufferAllocator instead of RootAllocator in your allocator creation.\n+* Create your allocator inside of a try-with-resources statement.\n\nReview comment:\n       Allocators have a debug mode, IIRC, that makes it easier to figure out where a leak originated\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-10T21:59:17.085+0000",
                    "updated": "2022-03-10T21:59:17.085+0000",
                    "started": "2022-03-10T21:59:17.085+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "739739",
                    "issueId": "13426650"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426650/worklog/741317",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on a change in pull request #12603:\nURL: https://github.com/apache/arrow/pull/12603#discussion_r826442304\n\n\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n+* Memory Netty: Netty allocator and utils for allocating memory in Arrow.\n+* Memory Unsafe: Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+\n+Allocators\n+==========\n+\n+Memory core module define the next allocators:\n+\n+* Buffer Allocator: The public interface application users should be leveraging.\n+* Root Allocator: A root allocator for using direct memory. Typically only one created for a JVM.\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n+\n+Please consider this note on your development:\n+\n+* Use BufferAllocator instead of RootAllocator in your allocator creation.\n+* Create your allocator inside of a try-with-resources statement.\n+\n+.. code-block:: Java\n+\n+    try (BufferAllocator allocator = new RootAllocator(Long.MAX_VALUE) ) { ; }\n+\n+ArrowBuf\n+========\n+\n+The facade for interacting directly with a chunk of memory.\n+\n+Two important instance variables of an ArrowBuf:\n+\n+* Address: Starting virtual address in the underlying memory chunk that this ArrowBuf has access to.\n+* Length: Length (in bytes) in the underlying memory chunk that this ArrowBuf has access to.\n\nReview comment:\n       Deleted\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n+* Memory Netty: Netty allocator and utils for allocating memory in Arrow.\n+* Memory Unsafe: Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+\n+Allocators\n+==========\n+\n+Memory core module define the next allocators:\n+\n+* Buffer Allocator: The public interface application users should be leveraging.\n+* Root Allocator: A root allocator for using direct memory. Typically only one created for a JVM.\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n+\n+Please consider this note on your development:\n+\n+* Use BufferAllocator instead of RootAllocator in your allocator creation.\n+* Create your allocator inside of a try-with-resources statement.\n+\n+.. code-block:: Java\n+\n+    try (BufferAllocator allocator = new RootAllocator(Long.MAX_VALUE) ) { ; }\n+\n+ArrowBuf\n+========\n+\n+The facade for interacting directly with a chunk of memory.\n\nReview comment:\n       Added\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n+* Memory Netty: Netty allocator and utils for allocating memory in Arrow.\n+* Memory Unsafe: Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+\n+Allocators\n+==========\n+\n+Memory core module define the next allocators:\n+\n+* Buffer Allocator: The public interface application users should be leveraging.\n+* Root Allocator: A root allocator for using direct memory. Typically only one created for a JVM.\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n+\n+Please consider this note on your development:\n+\n+* Use BufferAllocator instead of RootAllocator in your allocator creation.\n\nReview comment:\n       Updated\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n\nReview comment:\n       Added\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-14T22:51:01.720+0000",
                    "updated": "2022-03-14T22:51:01.720+0000",
                    "started": "2022-03-14T22:51:01.720+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "741317",
                    "issueId": "13426650"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426650/worklog/741318",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on a change in pull request #12603:\nURL: https://github.com/apache/arrow/pull/12603#discussion_r826442524\n\n\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n+* Memory Netty: Netty allocator and utils for allocating memory in Arrow.\n+* Memory Unsafe: Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+\n+Allocators\n+==========\n+\n+Memory core module define the next allocators:\n+\n+* Buffer Allocator: The public interface application users should be leveraging.\n+* Root Allocator: A root allocator for using direct memory. Typically only one created for a JVM.\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n+\n+Please consider this note on your development:\n+\n+* Use BufferAllocator instead of RootAllocator in your allocator creation.\n+* Create your allocator inside of a try-with-resources statement.\n+\n+.. code-block:: Java\n+\n+    try (BufferAllocator allocator = new RootAllocator(Long.MAX_VALUE) ) { ; }\n\nReview comment:\n       Deleted\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n+* Memory Netty: Netty allocator and utils for allocating memory in Arrow.\n+* Memory Unsafe: Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+\n+Allocators\n+==========\n+\n+Memory core module define the next allocators:\n+\n+* Buffer Allocator: The public interface application users should be leveraging.\n+* Root Allocator: A root allocator for using direct memory. Typically only one created for a JVM.\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n+\n+Please consider this note on your development:\n+\n+* Use BufferAllocator instead of RootAllocator in your allocator creation.\n+* Create your allocator inside of a try-with-resources statement.\n\nReview comment:\n       Added\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-14T22:51:35.248+0000",
                    "updated": "2022-03-14T22:51:35.248+0000",
                    "started": "2022-03-14T22:51:35.248+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "741318",
                    "issueId": "13426650"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426650/worklog/741319",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on a change in pull request #12603:\nURL: https://github.com/apache/arrow/pull/12603#discussion_r826442618\n\n\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n\nReview comment:\n       Deleted\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n\nReview comment:\n       Updated\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n\nReview comment:\n       Updated\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-14T22:51:57.720+0000",
                    "updated": "2022-03-14T22:51:57.720+0000",
                    "started": "2022-03-14T22:51:57.720+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "741319",
                    "issueId": "13426650"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426650/worklog/741321",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on a change in pull request #12603:\nURL: https://github.com/apache/arrow/pull/12603#discussion_r826442783\n\n\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n+* Memory Netty: Netty allocator and utils for allocating memory in Arrow.\n\nReview comment:\n       Updated\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n+* Memory Netty: Netty allocator and utils for allocating memory in Arrow.\n+* Memory Unsafe: Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n\nReview comment:\n       Updated\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n+* Memory Netty: Netty allocator and utils for allocating memory in Arrow.\n+* Memory Unsafe: Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+\n+Allocators\n+==========\n+\n+Memory core module define the next allocators:\n\nReview comment:\n       Updated\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-14T22:52:32.669+0000",
                    "updated": "2022-03-14T22:52:32.669+0000",
                    "started": "2022-03-14T22:52:32.669+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "741321",
                    "issueId": "13426650"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426650/worklog/741322",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on a change in pull request #12603:\nURL: https://github.com/apache/arrow/pull/12603#discussion_r826443178\n\n\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n+* Memory Netty: Netty allocator and utils for allocating memory in Arrow.\n+* Memory Unsafe: Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+\n+Allocators\n+==========\n+\n+Memory core module define the next allocators:\n+\n+* Buffer Allocator: The public interface application users should be leveraging.\n+* Root Allocator: A root allocator for using direct memory. Typically only one created for a JVM.\n\nReview comment:\n       Updated\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-14T22:52:56.997+0000",
                    "updated": "2022-03-14T22:52:56.997+0000",
                    "started": "2022-03-14T22:52:56.997+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "741322",
                    "issueId": "13426650"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426650/worklog/741323",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on a change in pull request #12603:\nURL: https://github.com/apache/arrow/pull/12603#discussion_r826443285\n\n\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n+* Memory Netty: Netty allocator and utils for allocating memory in Arrow.\n+* Memory Unsafe: Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+\n+Allocators\n+==========\n+\n+Memory core module define the next allocators:\n+\n+* Buffer Allocator: The public interface application users should be leveraging.\n+* Root Allocator: A root allocator for using direct memory. Typically only one created for a JVM.\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n+\n+Please consider this note on your development:\n+\n+* Use BufferAllocator instead of RootAllocator in your allocator creation.\n+* Create your allocator inside of a try-with-resources statement.\n+\n+.. code-block:: Java\n+\n+    try (BufferAllocator allocator = new RootAllocator(Long.MAX_VALUE) ) { ; }\n+\n+ArrowBuf\n+========\n+\n+The facade for interacting directly with a chunk of memory.\n+\n+Two important instance variables of an ArrowBuf:\n+\n+* Address: Starting virtual address in the underlying memory chunk that this ArrowBuf has access to.\n+* Length: Length (in bytes) in the underlying memory chunk that this ArrowBuf has access to.\n+\n+Memory Modules\n+==============\n+\n+Memory core define the bases to work with direct memory and the application decided to allocate arrow buffer bases on\n+the dependency added on your pom.xml (memory-unsafe or memory-netty). If any of these is not added the application raise\n+an exception.\n\nReview comment:\n       Updated\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-14T22:53:09.568+0000",
                    "updated": "2022-03-14T22:53:09.568+0000",
                    "started": "2022-03-14T22:53:09.568+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "741323",
                    "issueId": "13426650"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426650/worklog/741324",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on a change in pull request #12603:\nURL: https://github.com/apache/arrow/pull/12603#discussion_r826443891\n\n\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n+* Memory Netty: Netty allocator and utils for allocating memory in Arrow.\n+* Memory Unsafe: Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+\n+Allocators\n+==========\n+\n+Memory core module define the next allocators:\n+\n+* Buffer Allocator: The public interface application users should be leveraging.\n+* Root Allocator: A root allocator for using direct memory. Typically only one created for a JVM.\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n\nReview comment:\n       Added an example,  but please @lidavidm  if you could help me with more examples or reason to use child allocators.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-14T22:54:23.229+0000",
                    "updated": "2022-03-14T22:54:23.229+0000",
                    "started": "2022-03-14T22:54:23.229+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "741324",
                    "issueId": "13426650"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426650/worklog/741326",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on a change in pull request #12603:\nURL: https://github.com/apache/arrow/pull/12603#discussion_r826443988\n\n\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n+* Memory Netty: Netty allocator and utils for allocating memory in Arrow.\n+* Memory Unsafe: Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+\n+Allocators\n+==========\n+\n+Memory core module define the next allocators:\n+\n+* Buffer Allocator: The public interface application users should be leveraging.\n+* Root Allocator: A root allocator for using direct memory. Typically only one created for a JVM.\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n+\n+Please consider this note on your development:\n+\n+* Use BufferAllocator instead of RootAllocator in your allocator creation.\n+* Create your allocator inside of a try-with-resources statement.\n+\n+.. code-block:: Java\n+\n+    try (BufferAllocator allocator = new RootAllocator(Long.MAX_VALUE) ) { ; }\n+\n+ArrowBuf\n+========\n+\n+The facade for interacting directly with a chunk of memory.\n+\n+Two important instance variables of an ArrowBuf:\n+\n+* Address: Starting virtual address in the underlying memory chunk that this ArrowBuf has access to.\n+* Length: Length (in bytes) in the underlying memory chunk that this ArrowBuf has access to.\n+\n\nReview comment:\n       Added\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n+.. contents::\n+\n+Getting Started\n+===============\n+\n+Java memory implementation is independently from C++ (not a wrapper around).\n+Java memory was implemented considering these specifications: Arrow Columnar Format and Java Off Heap references.\n+\n+.. note::\n+\n+    Java Memory Data = Data (Columnar mode reference) + Metadata (Flatbuffers serialization reference).\n+\n+These are the java memory modules:\n+\n+* Memory Core: Core off-heap memory management libraries for Arrow ValueVectors.\n+* Memory Netty: Netty allocator and utils for allocating memory in Arrow.\n+* Memory Unsafe: Allocator and utils for allocating memory in Arrow based on sun.misc.Unsafe.\n+\n+Allocators\n+==========\n+\n+Memory core module define the next allocators:\n+\n+* Buffer Allocator: The public interface application users should be leveraging.\n+* Root Allocator: A root allocator for using direct memory. Typically only one created for a JVM.\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n+\n+Please consider this note on your development:\n\nReview comment:\n       Updated\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-14T22:54:48.135+0000",
                    "updated": "2022-03-14T22:54:48.135+0000",
                    "started": "2022-03-14T22:54:48.134+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "741326",
                    "issueId": "13426650"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426650/worklog/741597",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #12603:\nURL: https://github.com/apache/arrow/pull/12603#discussion_r826914806\n\n\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,114 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+.. contents::\n+\n+The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* `ArrowBuf`_\n+* `Reference counting`_\n\nReview comment:\n       Let's not link to Netty's docs right off the bat, I think that's a little confusing without context\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,114 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+.. contents::\n+\n+The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* `ArrowBuf`_\n+* `Reference counting`_\n+* `BufferAllocator`_\n+\n+Getting Started\n+===============\n+\n+Arrow's memory management is built around the needs of the columnar format and using off-heap memory.\n+Also, it is its own independent implementation, and does not wrap the C++ implementation.\n+\n+Arrow offer a high level of abstraction providing several access APIs to read/write data into a direct memory.\n+\n+Arrow provides multiple modules, but users only need two of them:\n+\n+* ``Memory Core``: Provides the interfaces used by the Arrow libraries and applications.\n+* ``Memory Netty``: An implementation of the memory interfaces based on the `Netty`_ library.\n+* ``Memory Unsafe``: An implementation of the memory interfaces based on the `sun.misc.Unsafe`_ library.\n+\n+ArrowBuf\n+========\n+\n+ArrowBuf represents a single, contiguous allocation of direct memory. It consists of an address and a length,\n+and provides low-level interfaces for working with the contents, similar to ByteBuffer.\n+\n+Unlike (Direct)ByteBuffer, it has reference counting built in (see the next section).\n+\n+Reference counting\n+==================\n+\n\nReview comment:\n       More context here as well. \"Direct memory is more expensive to allocate and deallocate, so allocators pool/cache allocated buffers.\" (We could move Allocator before this section.) \"Arrow uses manual reference counting to track whether a buffer is in use, or can be deallocated or returned to the allocator's pool. This simply means that each buffer has a counter keeping track of the number of references to the buffer, and code is responsible for properly incrementing/decrementing the counter as the buffer is used. (Some programming languages offer this as a general memory management strategy, albeit usually hidden from the user to some extent.) \r\n   \r\n   In Arrow, each buffer has an associated ReferenceManager that tracks the reference count, which can be retrieved with ArrowBuf.getReferenceManager(). The reference count can be updated with ReferenceManager.release and ReferenceManager.retain. Of course, this is tedious and error-prone, so usually, instead of directly working with buffers, we use higher-level APIs like ValueVector. Such classes generally implement Closeable/AutoCloseable and will automatically decrement the reference count when closed.\"\r\n   \r\n   also feel free to rewrite things, I'm just trying to sketch out the amount of context I think we should provide\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,114 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+.. contents::\n+\n+The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* `ArrowBuf`_\n+* `Reference counting`_\n+* `BufferAllocator`_\n+\n+Getting Started\n+===============\n+\n+Arrow's memory management is built around the needs of the columnar format and using off-heap memory.\n+Also, it is its own independent implementation, and does not wrap the C++ implementation.\n+\n+Arrow offer a high level of abstraction providing several access APIs to read/write data into a direct memory.\n+\n+Arrow provides multiple modules, but users only need two of them:\n\nReview comment:\n       \"Arrow provides multiple modules: the core interfaces, and implementations of the interfaces. Users need the core interfaces, and exactly one of the implementations.\"\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,114 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+.. contents::\n+\n+The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* `ArrowBuf`_\n+* `Reference counting`_\n+* `BufferAllocator`_\n+\n+Getting Started\n+===============\n+\n+Arrow's memory management is built around the needs of the columnar format and using off-heap memory.\n+Also, it is its own independent implementation, and does not wrap the C++ implementation.\n+\n+Arrow offer a high level of abstraction providing several access APIs to read/write data into a direct memory.\n+\n+Arrow provides multiple modules, but users only need two of them:\n+\n+* ``Memory Core``: Provides the interfaces used by the Arrow libraries and applications.\n+* ``Memory Netty``: An implementation of the memory interfaces based on the `Netty`_ library.\n+* ``Memory Unsafe``: An implementation of the memory interfaces based on the `sun.misc.Unsafe`_ library.\n+\n+ArrowBuf\n+========\n+\n+ArrowBuf represents a single, contiguous allocation of direct memory. It consists of an address and a length,\n+and provides low-level interfaces for working with the contents, similar to ByteBuffer.\n+\n+Unlike (Direct)ByteBuffer, it has reference counting built in (see the next section).\n+\n+Reference counting\n+==================\n+\n+Is a technique to help computer programs manage memory. Tracks the reference/pointers to an object, it increase\n++1 or decrease -1 the reference counting between the objects.\n+\n+If an object ValidityBuffer has a reference with object IntVector, then, IntVector should increase the\n+reference counting to 1 (0 + 1 = 1), then if at the same time, ValueBuffer has a reference with IntVector,\n+then, IntVector should increase the reference counting to 2 (1 + 1 = 2).\n+\n+.. code-block::\n+\n+    |__ A = Allocator\n+    |____ B = IntVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+    |____ C = VarcharVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+\n+Base on best practices at some point you are going to close your allocator objects using ``close()`` method,\n+allocators check for reference counting and throw an exception if they are in use.\n+\n+Reference Manager manages the reference counting for the underlying memory chunk.\n+\n+Allocators\n+==========\n+\n+One of the interfaces defined by memory-core is BufferAllocator. This interface collect all the definitions for deal\n+with byte buffer allocation.\n+\n+The concrete implementation of the allocator is Root Allocator. Applications should generally\n+create one allocator at the start of the program..\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n+\n+As an example of child allocator consider `Flight Client`_ creation.\n+\n+Memory Modules\n+==============\n+\n+Applications should depend on memory-core and one of the two implementations,\n+else an exception will be raised at runtime.\n\nReview comment:\n       This is redundant with above.\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,114 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+.. contents::\n+\n+The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* `ArrowBuf`_\n+* `Reference counting`_\n+* `BufferAllocator`_\n+\n+Getting Started\n+===============\n+\n+Arrow's memory management is built around the needs of the columnar format and using off-heap memory.\n+Also, it is its own independent implementation, and does not wrap the C++ implementation.\n+\n+Arrow offer a high level of abstraction providing several access APIs to read/write data into a direct memory.\n+\n+Arrow provides multiple modules, but users only need two of them:\n+\n+* ``Memory Core``: Provides the interfaces used by the Arrow libraries and applications.\n+* ``Memory Netty``: An implementation of the memory interfaces based on the `Netty`_ library.\n+* ``Memory Unsafe``: An implementation of the memory interfaces based on the `sun.misc.Unsafe`_ library.\n+\n+ArrowBuf\n+========\n+\n+ArrowBuf represents a single, contiguous allocation of direct memory. It consists of an address and a length,\n+and provides low-level interfaces for working with the contents, similar to ByteBuffer.\n+\n+Unlike (Direct)ByteBuffer, it has reference counting built in (see the next section).\n+\n+Reference counting\n+==================\n+\n+Is a technique to help computer programs manage memory. Tracks the reference/pointers to an object, it increase\n++1 or decrease -1 the reference counting between the objects.\n+\n+If an object ValidityBuffer has a reference with object IntVector, then, IntVector should increase the\n+reference counting to 1 (0 + 1 = 1), then if at the same time, ValueBuffer has a reference with IntVector,\n+then, IntVector should increase the reference counting to 2 (1 + 1 = 2).\n+\n+.. code-block::\n+\n+    |__ A = Allocator\n+    |____ B = IntVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+    |____ C = VarcharVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+\n+Base on best practices at some point you are going to close your allocator objects using ``close()`` method,\n+allocators check for reference counting and throw an exception if they are in use.\n+\n+Reference Manager manages the reference counting for the underlying memory chunk.\n+\n+Allocators\n+==========\n+\n+One of the interfaces defined by memory-core is BufferAllocator. This interface collect all the definitions for deal\n+with byte buffer allocation.\n+\n+The concrete implementation of the allocator is Root Allocator. Applications should generally\n+create one allocator at the start of the program..\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n+\n+As an example of child allocator consider `Flight Client`_ creation.\n+\n+Memory Modules\n+==============\n+\n+Applications should depend on memory-core and one of the two implementations,\n+else an exception will be raised at runtime.\n+\n+Development Guidelines\n+======================\n+\n+* Use the BufferAllocator interface in APIs instead of RootAllocator.\n+* Applications should generally create one allocator at the start of the program.\n+* Remember to close() allocators after use (whether they are child allocators or the RootAllocator), either manually or preferably via a try-with-resources statement.\n+* Allocators will check for outstanding memory allocations when closed, and throw an exception if there are allocated buffers, this helps detect memory leaks.\n+* Allocators have a debug mode, that makes it easier to figure out where a leak originated (Consider to add this parameter to your application: -Darrow.memory.debug.allocator=true)\n+* Arrow modules use logback to collect logs configure that properly to see your logs (create logback-test.xml file on resources folder).\n\nReview comment:\n       I think this can also go as part of a section about debugging memory leaks/allocations\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,114 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+.. contents::\n+\n+The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* `ArrowBuf`_\n+* `Reference counting`_\n+* `BufferAllocator`_\n+\n+Getting Started\n+===============\n+\n+Arrow's memory management is built around the needs of the columnar format and using off-heap memory.\n+Also, it is its own independent implementation, and does not wrap the C++ implementation.\n+\n+Arrow offer a high level of abstraction providing several access APIs to read/write data into a direct memory.\n+\n+Arrow provides multiple modules, but users only need two of them:\n+\n+* ``Memory Core``: Provides the interfaces used by the Arrow libraries and applications.\n+* ``Memory Netty``: An implementation of the memory interfaces based on the `Netty`_ library.\n+* ``Memory Unsafe``: An implementation of the memory interfaces based on the `sun.misc.Unsafe`_ library.\n+\n+ArrowBuf\n+========\n+\n+ArrowBuf represents a single, contiguous allocation of direct memory. It consists of an address and a length,\n+and provides low-level interfaces for working with the contents, similar to ByteBuffer.\n+\n+Unlike (Direct)ByteBuffer, it has reference counting built in (see the next section).\n+\n+Reference counting\n+==================\n+\n+Is a technique to help computer programs manage memory. Tracks the reference/pointers to an object, it increase\n++1 or decrease -1 the reference counting between the objects.\n+\n+If an object ValidityBuffer has a reference with object IntVector, then, IntVector should increase the\n+reference counting to 1 (0 + 1 = 1), then if at the same time, ValueBuffer has a reference with IntVector,\n+then, IntVector should increase the reference counting to 2 (1 + 1 = 2).\n+\n+.. code-block::\n+\n+    |__ A = Allocator\n+    |____ B = IntVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+    |____ C = VarcharVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+\n+Base on best practices at some point you are going to close your allocator objects using ``close()`` method,\n+allocators check for reference counting and throw an exception if they are in use.\n+\n+Reference Manager manages the reference counting for the underlying memory chunk.\n+\n+Allocators\n+==========\n+\n+One of the interfaces defined by memory-core is BufferAllocator. This interface collect all the definitions for deal\n+with byte buffer allocation.\n+\n+The concrete implementation of the allocator is Root Allocator. Applications should generally\n+create one allocator at the start of the program..\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n+\n+As an example of child allocator consider `Flight Client`_ creation.\n+\n+Memory Modules\n+==============\n+\n+Applications should depend on memory-core and one of the two implementations,\n+else an exception will be raised at runtime.\n+\n+Development Guidelines\n+======================\n+\n+* Use the BufferAllocator interface in APIs instead of RootAllocator.\n+* Applications should generally create one allocator at the start of the program.\n\nReview comment:\n       ```suggestion\r\n   * Applications should generally create one RootAllocator at the start of the program.\r\n   ```\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,114 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+.. contents::\n+\n+The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* `ArrowBuf`_\n+* `Reference counting`_\n+* `BufferAllocator`_\n+\n+Getting Started\n+===============\n+\n+Arrow's memory management is built around the needs of the columnar format and using off-heap memory.\n+Also, it is its own independent implementation, and does not wrap the C++ implementation.\n+\n+Arrow offer a high level of abstraction providing several access APIs to read/write data into a direct memory.\n\nReview comment:\n       ```suggestion\r\n   Arrow offers a high level of abstraction providing several access APIs to read/write data into a direct memory.\r\n   ```\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,114 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+.. contents::\n+\n+The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* `ArrowBuf`_\n+* `Reference counting`_\n+* `BufferAllocator`_\n+\n+Getting Started\n+===============\n+\n+Arrow's memory management is built around the needs of the columnar format and using off-heap memory.\n+Also, it is its own independent implementation, and does not wrap the C++ implementation.\n+\n+Arrow offer a high level of abstraction providing several access APIs to read/write data into a direct memory.\n+\n+Arrow provides multiple modules, but users only need two of them:\n+\n+* ``Memory Core``: Provides the interfaces used by the Arrow libraries and applications.\n+* ``Memory Netty``: An implementation of the memory interfaces based on the `Netty`_ library.\n+* ``Memory Unsafe``: An implementation of the memory interfaces based on the `sun.misc.Unsafe`_ library.\n+\n+ArrowBuf\n+========\n+\n+ArrowBuf represents a single, contiguous allocation of direct memory. It consists of an address and a length,\n\nReview comment:\n       nit: link to the API docs again here\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,114 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+.. contents::\n+\n+The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* `ArrowBuf`_\n+* `Reference counting`_\n+* `BufferAllocator`_\n+\n+Getting Started\n+===============\n+\n+Arrow's memory management is built around the needs of the columnar format and using off-heap memory.\n+Also, it is its own independent implementation, and does not wrap the C++ implementation.\n+\n+Arrow offer a high level of abstraction providing several access APIs to read/write data into a direct memory.\n+\n+Arrow provides multiple modules, but users only need two of them:\n+\n+* ``Memory Core``: Provides the interfaces used by the Arrow libraries and applications.\n+* ``Memory Netty``: An implementation of the memory interfaces based on the `Netty`_ library.\n+* ``Memory Unsafe``: An implementation of the memory interfaces based on the `sun.misc.Unsafe`_ library.\n+\n+ArrowBuf\n+========\n+\n+ArrowBuf represents a single, contiguous allocation of direct memory. It consists of an address and a length,\n+and provides low-level interfaces for working with the contents, similar to ByteBuffer.\n+\n+Unlike (Direct)ByteBuffer, it has reference counting built in (see the next section).\n+\n+Reference counting\n+==================\n+\n+Is a technique to help computer programs manage memory. Tracks the reference/pointers to an object, it increase\n++1 or decrease -1 the reference counting between the objects.\n+\n+If an object ValidityBuffer has a reference with object IntVector, then, IntVector should increase the\n+reference counting to 1 (0 + 1 = 1), then if at the same time, ValueBuffer has a reference with IntVector,\n+then, IntVector should increase the reference counting to 2 (1 + 1 = 2).\n\nReview comment:\n       Is this the case? As described this sounds like a reference cycle.\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,114 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+.. contents::\n+\n+The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* `ArrowBuf`_\n+* `Reference counting`_\n+* `BufferAllocator`_\n+\n+Getting Started\n+===============\n+\n+Arrow's memory management is built around the needs of the columnar format and using off-heap memory.\n+Also, it is its own independent implementation, and does not wrap the C++ implementation.\n+\n+Arrow offer a high level of abstraction providing several access APIs to read/write data into a direct memory.\n+\n+Arrow provides multiple modules, but users only need two of them:\n+\n+* ``Memory Core``: Provides the interfaces used by the Arrow libraries and applications.\n+* ``Memory Netty``: An implementation of the memory interfaces based on the `Netty`_ library.\n+* ``Memory Unsafe``: An implementation of the memory interfaces based on the `sun.misc.Unsafe`_ library.\n+\n+ArrowBuf\n+========\n+\n+ArrowBuf represents a single, contiguous allocation of direct memory. It consists of an address and a length,\n+and provides low-level interfaces for working with the contents, similar to ByteBuffer.\n+\n+Unlike (Direct)ByteBuffer, it has reference counting built in (see the next section).\n+\n+Reference counting\n+==================\n+\n+Is a technique to help computer programs manage memory. Tracks the reference/pointers to an object, it increase\n++1 or decrease -1 the reference counting between the objects.\n+\n+If an object ValidityBuffer has a reference with object IntVector, then, IntVector should increase the\n+reference counting to 1 (0 + 1 = 1), then if at the same time, ValueBuffer has a reference with IntVector,\n+then, IntVector should increase the reference counting to 2 (1 + 1 = 2).\n+\n+.. code-block::\n+\n+    |__ A = Allocator\n+    |____ B = IntVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+    |____ C = VarcharVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+\n+Base on best practices at some point you are going to close your allocator objects using ``close()`` method,\n+allocators check for reference counting and throw an exception if they are in use.\n\nReview comment:\n       \"Allocators implement AutoCloseable as well. In this case, closing the allocator will check that all buffers obtained from the allocator are closed. If not, close() will raise an exception; this helps track memory leaks from unclosed buffers. When combined with child allocators, this is especially useful for ensuring at an independent section of code has fully cleaned up all allocated buffers, while still maintaining a global memory limit through the RootAllocator.\"\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,114 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+.. contents::\n+\n+The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* `ArrowBuf`_\n+* `Reference counting`_\n+* `BufferAllocator`_\n+\n+Getting Started\n+===============\n+\n+Arrow's memory management is built around the needs of the columnar format and using off-heap memory.\n+Also, it is its own independent implementation, and does not wrap the C++ implementation.\n+\n+Arrow offer a high level of abstraction providing several access APIs to read/write data into a direct memory.\n+\n+Arrow provides multiple modules, but users only need two of them:\n+\n+* ``Memory Core``: Provides the interfaces used by the Arrow libraries and applications.\n+* ``Memory Netty``: An implementation of the memory interfaces based on the `Netty`_ library.\n+* ``Memory Unsafe``: An implementation of the memory interfaces based on the `sun.misc.Unsafe`_ library.\n+\n+ArrowBuf\n+========\n+\n+ArrowBuf represents a single, contiguous allocation of direct memory. It consists of an address and a length,\n+and provides low-level interfaces for working with the contents, similar to ByteBuffer.\n+\n+Unlike (Direct)ByteBuffer, it has reference counting built in (see the next section).\n+\n+Reference counting\n+==================\n+\n+Is a technique to help computer programs manage memory. Tracks the reference/pointers to an object, it increase\n++1 or decrease -1 the reference counting between the objects.\n+\n+If an object ValidityBuffer has a reference with object IntVector, then, IntVector should increase the\n+reference counting to 1 (0 + 1 = 1), then if at the same time, ValueBuffer has a reference with IntVector,\n+then, IntVector should increase the reference counting to 2 (1 + 1 = 2).\n+\n+.. code-block::\n+\n+    |__ A = Allocator\n+    |____ B = IntVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+    |____ C = VarcharVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+\n+Base on best practices at some point you are going to close your allocator objects using ``close()`` method,\n+allocators check for reference counting and throw an exception if they are in use.\n+\n+Reference Manager manages the reference counting for the underlying memory chunk.\n+\n+Allocators\n+==========\n+\n+One of the interfaces defined by memory-core is BufferAllocator. This interface collect all the definitions for deal\n+with byte buffer allocation.\n+\n+The concrete implementation of the allocator is Root Allocator. Applications should generally\n+create one allocator at the start of the program..\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n+\n+As an example of child allocator consider `Flight Client`_ creation.\n+\n+Memory Modules\n+==============\n+\n+Applications should depend on memory-core and one of the two implementations,\n+else an exception will be raised at runtime.\n+\n+Development Guidelines\n+======================\n+\n+* Use the BufferAllocator interface in APIs instead of RootAllocator.\n+* Applications should generally create one allocator at the start of the program.\n+* Remember to close() allocators after use (whether they are child allocators or the RootAllocator), either manually or preferably via a try-with-resources statement.\n+* Allocators will check for outstanding memory allocations when closed, and throw an exception if there are allocated buffers, this helps detect memory leaks.\n+* Allocators have a debug mode, that makes it easier to figure out where a leak originated (Consider to add this parameter to your application: -Darrow.memory.debug.allocator=true)\n\nReview comment:\n       What does the debug mode do? Also, I think this can be a subsection of the Allocators section, since we should expand on it\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,114 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+.. contents::\n+\n+The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* `ArrowBuf`_\n+* `Reference counting`_\n+* `BufferAllocator`_\n+\n+Getting Started\n+===============\n+\n+Arrow's memory management is built around the needs of the columnar format and using off-heap memory.\n+Also, it is its own independent implementation, and does not wrap the C++ implementation.\n+\n+Arrow offer a high level of abstraction providing several access APIs to read/write data into a direct memory.\n+\n+Arrow provides multiple modules, but users only need two of them:\n+\n+* ``Memory Core``: Provides the interfaces used by the Arrow libraries and applications.\n+* ``Memory Netty``: An implementation of the memory interfaces based on the `Netty`_ library.\n+* ``Memory Unsafe``: An implementation of the memory interfaces based on the `sun.misc.Unsafe`_ library.\n+\n+ArrowBuf\n+========\n+\n+ArrowBuf represents a single, contiguous allocation of direct memory. It consists of an address and a length,\n\nReview comment:\n       We need more context here in general. We should link \"direct memory\" to https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/nio/ByteBuffer.html since it explains direct byte buffers.\r\n   \r\n   We should also briefly summarize what direct memory is, and why Arrow uses it.\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,114 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+.. contents::\n+\n+The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* `ArrowBuf`_\n+* `Reference counting`_\n+* `BufferAllocator`_\n+\n+Getting Started\n+===============\n+\n+Arrow's memory management is built around the needs of the columnar format and using off-heap memory.\n+Also, it is its own independent implementation, and does not wrap the C++ implementation.\n+\n+Arrow offer a high level of abstraction providing several access APIs to read/write data into a direct memory.\n+\n+Arrow provides multiple modules, but users only need two of them:\n+\n+* ``Memory Core``: Provides the interfaces used by the Arrow libraries and applications.\n+* ``Memory Netty``: An implementation of the memory interfaces based on the `Netty`_ library.\n+* ``Memory Unsafe``: An implementation of the memory interfaces based on the `sun.misc.Unsafe`_ library.\n+\n+ArrowBuf\n+========\n+\n+ArrowBuf represents a single, contiguous allocation of direct memory. It consists of an address and a length,\n+and provides low-level interfaces for working with the contents, similar to ByteBuffer.\n+\n+Unlike (Direct)ByteBuffer, it has reference counting built in (see the next section).\n+\n+Reference counting\n+==================\n+\n+Is a technique to help computer programs manage memory. Tracks the reference/pointers to an object, it increase\n++1 or decrease -1 the reference counting between the objects.\n+\n+If an object ValidityBuffer has a reference with object IntVector, then, IntVector should increase the\n+reference counting to 1 (0 + 1 = 1), then if at the same time, ValueBuffer has a reference with IntVector,\n+then, IntVector should increase the reference counting to 2 (1 + 1 = 2).\n+\n+.. code-block::\n+\n+    |__ A = Allocator\n+    |____ B = IntVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+    |____ C = VarcharVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+\n+Base on best practices at some point you are going to close your allocator objects using ``close()`` method,\n+allocators check for reference counting and throw an exception if they are in use.\n+\n+Reference Manager manages the reference counting for the underlying memory chunk.\n+\n+Allocators\n+==========\n+\n+One of the interfaces defined by memory-core is BufferAllocator. This interface collect all the definitions for deal\n+with byte buffer allocation.\n\nReview comment:\n       \"The BufferAllocator interface deals with allocating ArrowBufs for the application.\"\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,114 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+.. contents::\n+\n+The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* `ArrowBuf`_\n+* `Reference counting`_\n+* `BufferAllocator`_\n+\n+Getting Started\n+===============\n+\n+Arrow's memory management is built around the needs of the columnar format and using off-heap memory.\n+Also, it is its own independent implementation, and does not wrap the C++ implementation.\n+\n+Arrow offer a high level of abstraction providing several access APIs to read/write data into a direct memory.\n+\n+Arrow provides multiple modules, but users only need two of them:\n+\n+* ``Memory Core``: Provides the interfaces used by the Arrow libraries and applications.\n+* ``Memory Netty``: An implementation of the memory interfaces based on the `Netty`_ library.\n+* ``Memory Unsafe``: An implementation of the memory interfaces based on the `sun.misc.Unsafe`_ library.\n+\n+ArrowBuf\n+========\n+\n+ArrowBuf represents a single, contiguous allocation of direct memory. It consists of an address and a length,\n+and provides low-level interfaces for working with the contents, similar to ByteBuffer.\n+\n+Unlike (Direct)ByteBuffer, it has reference counting built in (see the next section).\n+\n+Reference counting\n+==================\n+\n+Is a technique to help computer programs manage memory. Tracks the reference/pointers to an object, it increase\n++1 or decrease -1 the reference counting between the objects.\n+\n+If an object ValidityBuffer has a reference with object IntVector, then, IntVector should increase the\n+reference counting to 1 (0 + 1 = 1), then if at the same time, ValueBuffer has a reference with IntVector,\n+then, IntVector should increase the reference counting to 2 (1 + 1 = 2).\n+\n+.. code-block::\n+\n+    |__ A = Allocator\n+    |____ B = IntVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+    |____ C = VarcharVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+\n+Base on best practices at some point you are going to close your allocator objects using ``close()`` method,\n+allocators check for reference counting and throw an exception if they are in use.\n+\n+Reference Manager manages the reference counting for the underlying memory chunk.\n+\n+Allocators\n+==========\n+\n+One of the interfaces defined by memory-core is BufferAllocator. This interface collect all the definitions for deal\n+with byte buffer allocation.\n+\n+The concrete implementation of the allocator is Root Allocator. Applications should generally\n+create one allocator at the start of the program..\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n+\n+As an example of child allocator consider `Flight Client`_ creation.\n\nReview comment:\n       IMO, pointing into internal implementation details does not make for a good example. We should add and link to a cookbook example.\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,114 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+.. contents::\n+\n+The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* `ArrowBuf`_\n+* `Reference counting`_\n+* `BufferAllocator`_\n+\n+Getting Started\n+===============\n+\n+Arrow's memory management is built around the needs of the columnar format and using off-heap memory.\n+Also, it is its own independent implementation, and does not wrap the C++ implementation.\n+\n+Arrow offer a high level of abstraction providing several access APIs to read/write data into a direct memory.\n+\n+Arrow provides multiple modules, but users only need two of them:\n+\n+* ``Memory Core``: Provides the interfaces used by the Arrow libraries and applications.\n+* ``Memory Netty``: An implementation of the memory interfaces based on the `Netty`_ library.\n+* ``Memory Unsafe``: An implementation of the memory interfaces based on the `sun.misc.Unsafe`_ library.\n+\n+ArrowBuf\n+========\n+\n+ArrowBuf represents a single, contiguous allocation of direct memory. It consists of an address and a length,\n+and provides low-level interfaces for working with the contents, similar to ByteBuffer.\n+\n+Unlike (Direct)ByteBuffer, it has reference counting built in (see the next section).\n+\n+Reference counting\n+==================\n+\n+Is a technique to help computer programs manage memory. Tracks the reference/pointers to an object, it increase\n++1 or decrease -1 the reference counting between the objects.\n+\n+If an object ValidityBuffer has a reference with object IntVector, then, IntVector should increase the\n+reference counting to 1 (0 + 1 = 1), then if at the same time, ValueBuffer has a reference with IntVector,\n+then, IntVector should increase the reference counting to 2 (1 + 1 = 2).\n+\n+.. code-block::\n+\n+    |__ A = Allocator\n+    |____ B = IntVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+    |____ C = VarcharVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+\n+Base on best practices at some point you are going to close your allocator objects using ``close()`` method,\n+allocators check for reference counting and throw an exception if they are in use.\n+\n+Reference Manager manages the reference counting for the underlying memory chunk.\n+\n+Allocators\n+==========\n+\n+One of the interfaces defined by memory-core is BufferAllocator. This interface collect all the definitions for deal\n+with byte buffer allocation.\n+\n+The concrete implementation of the allocator is Root Allocator. Applications should generally\n+create one allocator at the start of the program..\n\nReview comment:\n       ```suggestion\r\n   The concrete implementation of the allocator is RootAllocator. Applications should generally\r\n   create one allocator at the start of the program, and use it through the BufferAllocator interface.\r\n   ```\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,114 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+.. contents::\n+\n+The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* `ArrowBuf`_\n+* `Reference counting`_\n+* `BufferAllocator`_\n+\n+Getting Started\n+===============\n+\n+Arrow's memory management is built around the needs of the columnar format and using off-heap memory.\n+Also, it is its own independent implementation, and does not wrap the C++ implementation.\n+\n+Arrow offer a high level of abstraction providing several access APIs to read/write data into a direct memory.\n+\n+Arrow provides multiple modules, but users only need two of them:\n+\n+* ``Memory Core``: Provides the interfaces used by the Arrow libraries and applications.\n+* ``Memory Netty``: An implementation of the memory interfaces based on the `Netty`_ library.\n+* ``Memory Unsafe``: An implementation of the memory interfaces based on the `sun.misc.Unsafe`_ library.\n+\n+ArrowBuf\n+========\n+\n+ArrowBuf represents a single, contiguous allocation of direct memory. It consists of an address and a length,\n+and provides low-level interfaces for working with the contents, similar to ByteBuffer.\n+\n+Unlike (Direct)ByteBuffer, it has reference counting built in (see the next section).\n+\n+Reference counting\n+==================\n+\n+Is a technique to help computer programs manage memory. Tracks the reference/pointers to an object, it increase\n++1 or decrease -1 the reference counting between the objects.\n+\n+If an object ValidityBuffer has a reference with object IntVector, then, IntVector should increase the\n+reference counting to 1 (0 + 1 = 1), then if at the same time, ValueBuffer has a reference with IntVector,\n+then, IntVector should increase the reference counting to 2 (1 + 1 = 2).\n+\n+.. code-block::\n+\n+    |__ A = Allocator\n+    |____ B = IntVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+    |____ C = VarcharVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+\n+Base on best practices at some point you are going to close your allocator objects using ``close()`` method,\n+allocators check for reference counting and throw an exception if they are in use.\n+\n+Reference Manager manages the reference counting for the underlying memory chunk.\n+\n+Allocators\n+==========\n+\n+One of the interfaces defined by memory-core is BufferAllocator. This interface collect all the definitions for deal\n+with byte buffer allocation.\n+\n+The concrete implementation of the allocator is Root Allocator. Applications should generally\n+create one allocator at the start of the program..\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n\nReview comment:\n       Add the method used to create child allocators. \r\n   \r\n   Mention that allocators have a memory limit. The RootAllocator then effectively sets the program-wide memory limit. One of the uses of child allocators is to set a lower temporary limit for one section of the code. Also, child allocators can be named; this makes it easier to tell where an ArrowBuf came from during debugging.\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,114 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+.. contents::\n+\n+The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* `ArrowBuf`_\n+* `Reference counting`_\n+* `BufferAllocator`_\n+\n+Getting Started\n+===============\n+\n+Arrow's memory management is built around the needs of the columnar format and using off-heap memory.\n+Also, it is its own independent implementation, and does not wrap the C++ implementation.\n+\n+Arrow offer a high level of abstraction providing several access APIs to read/write data into a direct memory.\n+\n+Arrow provides multiple modules, but users only need two of them:\n+\n+* ``Memory Core``: Provides the interfaces used by the Arrow libraries and applications.\n+* ``Memory Netty``: An implementation of the memory interfaces based on the `Netty`_ library.\n+* ``Memory Unsafe``: An implementation of the memory interfaces based on the `sun.misc.Unsafe`_ library.\n+\n+ArrowBuf\n+========\n+\n+ArrowBuf represents a single, contiguous allocation of direct memory. It consists of an address and a length,\n+and provides low-level interfaces for working with the contents, similar to ByteBuffer.\n+\n+Unlike (Direct)ByteBuffer, it has reference counting built in (see the next section).\n+\n+Reference counting\n+==================\n+\n+Is a technique to help computer programs manage memory. Tracks the reference/pointers to an object, it increase\n++1 or decrease -1 the reference counting between the objects.\n+\n+If an object ValidityBuffer has a reference with object IntVector, then, IntVector should increase the\n+reference counting to 1 (0 + 1 = 1), then if at the same time, ValueBuffer has a reference with IntVector,\n+then, IntVector should increase the reference counting to 2 (1 + 1 = 2).\n+\n+.. code-block::\n+\n+    |__ A = Allocator\n+    |____ B = IntVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+    |____ C = VarcharVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+\n+Base on best practices at some point you are going to close your allocator objects using ``close()`` method,\n+allocators check for reference counting and throw an exception if they are in use.\n+\n+Reference Manager manages the reference counting for the underlying memory chunk.\n+\n+Allocators\n+==========\n+\n+One of the interfaces defined by memory-core is BufferAllocator. This interface collect all the definitions for deal\n+with byte buffer allocation.\n+\n+The concrete implementation of the allocator is Root Allocator. Applications should generally\n+create one allocator at the start of the program..\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n+\n+As an example of child allocator consider `Flight Client`_ creation.\n+\n+Memory Modules\n+==============\n+\n+Applications should depend on memory-core and one of the two implementations,\n+else an exception will be raised at runtime.\n+\n+Development Guidelines\n+======================\n+\n+* Use the BufferAllocator interface in APIs instead of RootAllocator.\n+* Applications should generally create one allocator at the start of the program.\n+* Remember to close() allocators after use (whether they are child allocators or the RootAllocator), either manually or preferably via a try-with-resources statement.\n+* Allocators will check for outstanding memory allocations when closed, and throw an exception if there are allocated buffers, this helps detect memory leaks.\n\nReview comment:\n       This isn't a guideline IMO (it should be something specific and concrete that developers should do, not a description of the Arrow implementation)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-15T12:59:48.795+0000",
                    "updated": "2022-03-15T12:59:48.795+0000",
                    "started": "2022-03-15T12:59:48.795+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "741597",
                    "issueId": "13426650"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426650/worklog/741902",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on a change in pull request #12603:\nURL: https://github.com/apache/arrow/pull/12603#discussion_r827442810\n\n\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n\nReview comment:\n       Updated\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n\nReview comment:\n       Updated\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,82 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+The memory management package contains all the memory allocation related items that Arrow uses to manage memory.\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* Allocator\n+* Arrowbuf\n+\n\nReview comment:\n       Added\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-15T21:47:35.376+0000",
                    "updated": "2022-03-15T21:47:35.376+0000",
                    "started": "2022-03-15T21:47:35.376+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "741902",
                    "issueId": "13426650"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426650/worklog/741903",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on a change in pull request #12603:\nURL: https://github.com/apache/arrow/pull/12603#discussion_r827443293\n\n\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,114 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+.. contents::\n+\n+The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* `ArrowBuf`_\n+* `Reference counting`_\n\nReview comment:\n       Deleted\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-15T21:48:07.904+0000",
                    "updated": "2022-03-15T21:48:07.904+0000",
                    "started": "2022-03-15T21:48:07.904+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "741903",
                    "issueId": "13426650"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426650/worklog/741904",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on a change in pull request #12603:\nURL: https://github.com/apache/arrow/pull/12603#discussion_r827443428\n\n\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,114 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+.. contents::\n+\n+The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* `ArrowBuf`_\n+* `Reference counting`_\n+* `BufferAllocator`_\n+\n+Getting Started\n+===============\n+\n+Arrow's memory management is built around the needs of the columnar format and using off-heap memory.\n+Also, it is its own independent implementation, and does not wrap the C++ implementation.\n+\n+Arrow offer a high level of abstraction providing several access APIs to read/write data into a direct memory.\n+\n+Arrow provides multiple modules, but users only need two of them:\n\nReview comment:\n       Updated\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,114 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+.. contents::\n+\n+The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* `ArrowBuf`_\n+* `Reference counting`_\n+* `BufferAllocator`_\n+\n+Getting Started\n+===============\n+\n+Arrow's memory management is built around the needs of the columnar format and using off-heap memory.\n+Also, it is its own independent implementation, and does not wrap the C++ implementation.\n+\n+Arrow offer a high level of abstraction providing several access APIs to read/write data into a direct memory.\n+\n+Arrow provides multiple modules, but users only need two of them:\n+\n+* ``Memory Core``: Provides the interfaces used by the Arrow libraries and applications.\n+* ``Memory Netty``: An implementation of the memory interfaces based on the `Netty`_ library.\n+* ``Memory Unsafe``: An implementation of the memory interfaces based on the `sun.misc.Unsafe`_ library.\n+\n+ArrowBuf\n+========\n+\n+ArrowBuf represents a single, contiguous allocation of direct memory. It consists of an address and a length,\n\nReview comment:\n       Added\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-15T21:48:30.460+0000",
                    "updated": "2022-03-15T21:48:30.460+0000",
                    "started": "2022-03-15T21:48:30.460+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "741904",
                    "issueId": "13426650"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426650/worklog/741906",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on a change in pull request #12603:\nURL: https://github.com/apache/arrow/pull/12603#discussion_r827443835\n\n\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,114 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+.. contents::\n+\n+The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* `ArrowBuf`_\n+* `Reference counting`_\n+* `BufferAllocator`_\n+\n+Getting Started\n+===============\n+\n+Arrow's memory management is built around the needs of the columnar format and using off-heap memory.\n+Also, it is its own independent implementation, and does not wrap the C++ implementation.\n+\n+Arrow offer a high level of abstraction providing several access APIs to read/write data into a direct memory.\n+\n+Arrow provides multiple modules, but users only need two of them:\n+\n+* ``Memory Core``: Provides the interfaces used by the Arrow libraries and applications.\n+* ``Memory Netty``: An implementation of the memory interfaces based on the `Netty`_ library.\n+* ``Memory Unsafe``: An implementation of the memory interfaces based on the `sun.misc.Unsafe`_ library.\n+\n+ArrowBuf\n+========\n+\n+ArrowBuf represents a single, contiguous allocation of direct memory. It consists of an address and a length,\n+and provides low-level interfaces for working with the contents, similar to ByteBuffer.\n+\n+Unlike (Direct)ByteBuffer, it has reference counting built in (see the next section).\n+\n+Reference counting\n+==================\n+\n+Is a technique to help computer programs manage memory. Tracks the reference/pointers to an object, it increase\n++1 or decrease -1 the reference counting between the objects.\n+\n+If an object ValidityBuffer has a reference with object IntVector, then, IntVector should increase the\n+reference counting to 1 (0 + 1 = 1), then if at the same time, ValueBuffer has a reference with IntVector,\n+then, IntVector should increase the reference counting to 2 (1 + 1 = 2).\n\nReview comment:\n       Deleted and change by suggested\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,114 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+.. contents::\n+\n+The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* `ArrowBuf`_\n+* `Reference counting`_\n+* `BufferAllocator`_\n+\n+Getting Started\n+===============\n+\n+Arrow's memory management is built around the needs of the columnar format and using off-heap memory.\n+Also, it is its own independent implementation, and does not wrap the C++ implementation.\n+\n+Arrow offer a high level of abstraction providing several access APIs to read/write data into a direct memory.\n+\n+Arrow provides multiple modules, but users only need two of them:\n+\n+* ``Memory Core``: Provides the interfaces used by the Arrow libraries and applications.\n+* ``Memory Netty``: An implementation of the memory interfaces based on the `Netty`_ library.\n+* ``Memory Unsafe``: An implementation of the memory interfaces based on the `sun.misc.Unsafe`_ library.\n+\n+ArrowBuf\n+========\n+\n+ArrowBuf represents a single, contiguous allocation of direct memory. It consists of an address and a length,\n+and provides low-level interfaces for working with the contents, similar to ByteBuffer.\n+\n+Unlike (Direct)ByteBuffer, it has reference counting built in (see the next section).\n+\n+Reference counting\n+==================\n+\n\nReview comment:\n       Thank you\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,114 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+.. contents::\n+\n+The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* `ArrowBuf`_\n+* `Reference counting`_\n+* `BufferAllocator`_\n+\n+Getting Started\n+===============\n+\n+Arrow's memory management is built around the needs of the columnar format and using off-heap memory.\n+Also, it is its own independent implementation, and does not wrap the C++ implementation.\n+\n+Arrow offer a high level of abstraction providing several access APIs to read/write data into a direct memory.\n+\n+Arrow provides multiple modules, but users only need two of them:\n+\n+* ``Memory Core``: Provides the interfaces used by the Arrow libraries and applications.\n+* ``Memory Netty``: An implementation of the memory interfaces based on the `Netty`_ library.\n+* ``Memory Unsafe``: An implementation of the memory interfaces based on the `sun.misc.Unsafe`_ library.\n+\n+ArrowBuf\n+========\n+\n+ArrowBuf represents a single, contiguous allocation of direct memory. It consists of an address and a length,\n+and provides low-level interfaces for working with the contents, similar to ByteBuffer.\n+\n+Unlike (Direct)ByteBuffer, it has reference counting built in (see the next section).\n+\n+Reference counting\n+==================\n+\n+Is a technique to help computer programs manage memory. Tracks the reference/pointers to an object, it increase\n++1 or decrease -1 the reference counting between the objects.\n+\n+If an object ValidityBuffer has a reference with object IntVector, then, IntVector should increase the\n+reference counting to 1 (0 + 1 = 1), then if at the same time, ValueBuffer has a reference with IntVector,\n+then, IntVector should increase the reference counting to 2 (1 + 1 = 2).\n+\n+.. code-block::\n+\n+    |__ A = Allocator\n+    |____ B = IntVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+    |____ C = VarcharVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+\n+Base on best practices at some point you are going to close your allocator objects using ``close()`` method,\n+allocators check for reference counting and throw an exception if they are in use.\n\nReview comment:\n       Added\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,114 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+.. contents::\n+\n+The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* `ArrowBuf`_\n+* `Reference counting`_\n+* `BufferAllocator`_\n+\n+Getting Started\n+===============\n+\n+Arrow's memory management is built around the needs of the columnar format and using off-heap memory.\n+Also, it is its own independent implementation, and does not wrap the C++ implementation.\n+\n+Arrow offer a high level of abstraction providing several access APIs to read/write data into a direct memory.\n+\n+Arrow provides multiple modules, but users only need two of them:\n+\n+* ``Memory Core``: Provides the interfaces used by the Arrow libraries and applications.\n+* ``Memory Netty``: An implementation of the memory interfaces based on the `Netty`_ library.\n+* ``Memory Unsafe``: An implementation of the memory interfaces based on the `sun.misc.Unsafe`_ library.\n+\n+ArrowBuf\n+========\n+\n+ArrowBuf represents a single, contiguous allocation of direct memory. It consists of an address and a length,\n+and provides low-level interfaces for working with the contents, similar to ByteBuffer.\n+\n+Unlike (Direct)ByteBuffer, it has reference counting built in (see the next section).\n+\n+Reference counting\n+==================\n+\n+Is a technique to help computer programs manage memory. Tracks the reference/pointers to an object, it increase\n++1 or decrease -1 the reference counting between the objects.\n+\n+If an object ValidityBuffer has a reference with object IntVector, then, IntVector should increase the\n+reference counting to 1 (0 + 1 = 1), then if at the same time, ValueBuffer has a reference with IntVector,\n+then, IntVector should increase the reference counting to 2 (1 + 1 = 2).\n+\n+.. code-block::\n+\n+    |__ A = Allocator\n+    |____ B = IntVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+    |____ C = VarcharVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+\n+Base on best practices at some point you are going to close your allocator objects using ``close()`` method,\n+allocators check for reference counting and throw an exception if they are in use.\n+\n+Reference Manager manages the reference counting for the underlying memory chunk.\n+\n+Allocators\n+==========\n+\n+One of the interfaces defined by memory-core is BufferAllocator. This interface collect all the definitions for deal\n+with byte buffer allocation.\n+\n+The concrete implementation of the allocator is Root Allocator. Applications should generally\n+create one allocator at the start of the program..\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n+\n+As an example of child allocator consider `Flight Client`_ creation.\n+\n+Memory Modules\n+==============\n+\n+Applications should depend on memory-core and one of the two implementations,\n+else an exception will be raised at runtime.\n\nReview comment:\n       Deleted\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-15T21:49:25.146+0000",
                    "updated": "2022-03-15T21:49:25.146+0000",
                    "started": "2022-03-15T21:49:25.146+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "741906",
                    "issueId": "13426650"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426650/worklog/741907",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on a change in pull request #12603:\nURL: https://github.com/apache/arrow/pull/12603#discussion_r827444201\n\n\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,114 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+.. contents::\n+\n+The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* `ArrowBuf`_\n+* `Reference counting`_\n+* `BufferAllocator`_\n+\n+Getting Started\n+===============\n+\n+Arrow's memory management is built around the needs of the columnar format and using off-heap memory.\n+Also, it is its own independent implementation, and does not wrap the C++ implementation.\n+\n+Arrow offer a high level of abstraction providing several access APIs to read/write data into a direct memory.\n+\n+Arrow provides multiple modules, but users only need two of them:\n+\n+* ``Memory Core``: Provides the interfaces used by the Arrow libraries and applications.\n+* ``Memory Netty``: An implementation of the memory interfaces based on the `Netty`_ library.\n+* ``Memory Unsafe``: An implementation of the memory interfaces based on the `sun.misc.Unsafe`_ library.\n+\n+ArrowBuf\n+========\n+\n+ArrowBuf represents a single, contiguous allocation of direct memory. It consists of an address and a length,\n+and provides low-level interfaces for working with the contents, similar to ByteBuffer.\n+\n+Unlike (Direct)ByteBuffer, it has reference counting built in (see the next section).\n+\n+Reference counting\n+==================\n+\n+Is a technique to help computer programs manage memory. Tracks the reference/pointers to an object, it increase\n++1 or decrease -1 the reference counting between the objects.\n+\n+If an object ValidityBuffer has a reference with object IntVector, then, IntVector should increase the\n+reference counting to 1 (0 + 1 = 1), then if at the same time, ValueBuffer has a reference with IntVector,\n+then, IntVector should increase the reference counting to 2 (1 + 1 = 2).\n+\n+.. code-block::\n+\n+    |__ A = Allocator\n+    |____ B = IntVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+    |____ C = VarcharVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+\n+Base on best practices at some point you are going to close your allocator objects using ``close()`` method,\n+allocators check for reference counting and throw an exception if they are in use.\n+\n+Reference Manager manages the reference counting for the underlying memory chunk.\n+\n+Allocators\n+==========\n+\n+One of the interfaces defined by memory-core is BufferAllocator. This interface collect all the definitions for deal\n+with byte buffer allocation.\n+\n+The concrete implementation of the allocator is Root Allocator. Applications should generally\n+create one allocator at the start of the program..\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n+\n+As an example of child allocator consider `Flight Client`_ creation.\n+\n+Memory Modules\n+==============\n+\n+Applications should depend on memory-core and one of the two implementations,\n+else an exception will be raised at runtime.\n+\n+Development Guidelines\n+======================\n+\n+* Use the BufferAllocator interface in APIs instead of RootAllocator.\n+* Applications should generally create one allocator at the start of the program.\n+* Remember to close() allocators after use (whether they are child allocators or the RootAllocator), either manually or preferably via a try-with-resources statement.\n+* Allocators will check for outstanding memory allocations when closed, and throw an exception if there are allocated buffers, this helps detect memory leaks.\n\nReview comment:\n       Deleted\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-15T21:49:37.787+0000",
                    "updated": "2022-03-15T21:49:37.787+0000",
                    "started": "2022-03-15T21:49:37.787+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "741907",
                    "issueId": "13426650"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426650/worklog/741908",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on a change in pull request #12603:\nURL: https://github.com/apache/arrow/pull/12603#discussion_r827444486\n\n\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,114 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+.. contents::\n+\n+The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* `ArrowBuf`_\n+* `Reference counting`_\n+* `BufferAllocator`_\n+\n+Getting Started\n+===============\n+\n+Arrow's memory management is built around the needs of the columnar format and using off-heap memory.\n+Also, it is its own independent implementation, and does not wrap the C++ implementation.\n+\n+Arrow offer a high level of abstraction providing several access APIs to read/write data into a direct memory.\n+\n+Arrow provides multiple modules, but users only need two of them:\n+\n+* ``Memory Core``: Provides the interfaces used by the Arrow libraries and applications.\n+* ``Memory Netty``: An implementation of the memory interfaces based on the `Netty`_ library.\n+* ``Memory Unsafe``: An implementation of the memory interfaces based on the `sun.misc.Unsafe`_ library.\n+\n+ArrowBuf\n+========\n+\n+ArrowBuf represents a single, contiguous allocation of direct memory. It consists of an address and a length,\n+and provides low-level interfaces for working with the contents, similar to ByteBuffer.\n+\n+Unlike (Direct)ByteBuffer, it has reference counting built in (see the next section).\n+\n+Reference counting\n+==================\n+\n+Is a technique to help computer programs manage memory. Tracks the reference/pointers to an object, it increase\n++1 or decrease -1 the reference counting between the objects.\n+\n+If an object ValidityBuffer has a reference with object IntVector, then, IntVector should increase the\n+reference counting to 1 (0 + 1 = 1), then if at the same time, ValueBuffer has a reference with IntVector,\n+then, IntVector should increase the reference counting to 2 (1 + 1 = 2).\n+\n+.. code-block::\n+\n+    |__ A = Allocator\n+    |____ B = IntVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+    |____ C = VarcharVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+\n+Base on best practices at some point you are going to close your allocator objects using ``close()`` method,\n+allocators check for reference counting and throw an exception if they are in use.\n+\n+Reference Manager manages the reference counting for the underlying memory chunk.\n+\n+Allocators\n+==========\n+\n+One of the interfaces defined by memory-core is BufferAllocator. This interface collect all the definitions for deal\n+with byte buffer allocation.\n+\n+The concrete implementation of the allocator is Root Allocator. Applications should generally\n+create one allocator at the start of the program..\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n+\n+As an example of child allocator consider `Flight Client`_ creation.\n+\n+Memory Modules\n+==============\n+\n+Applications should depend on memory-core and one of the two implementations,\n+else an exception will be raised at runtime.\n+\n+Development Guidelines\n+======================\n+\n+* Use the BufferAllocator interface in APIs instead of RootAllocator.\n+* Applications should generally create one allocator at the start of the program.\n+* Remember to close() allocators after use (whether they are child allocators or the RootAllocator), either manually or preferably via a try-with-resources statement.\n+* Allocators will check for outstanding memory allocations when closed, and throw an exception if there are allocated buffers, this helps detect memory leaks.\n+* Allocators have a debug mode, that makes it easier to figure out where a leak originated (Consider to add this parameter to your application: -Darrow.memory.debug.allocator=true)\n\nReview comment:\n       Added Debugging Memory Leaks/Allocation\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,114 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+.. contents::\n+\n+The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* `ArrowBuf`_\n+* `Reference counting`_\n+* `BufferAllocator`_\n+\n+Getting Started\n+===============\n+\n+Arrow's memory management is built around the needs of the columnar format and using off-heap memory.\n+Also, it is its own independent implementation, and does not wrap the C++ implementation.\n+\n+Arrow offer a high level of abstraction providing several access APIs to read/write data into a direct memory.\n+\n+Arrow provides multiple modules, but users only need two of them:\n+\n+* ``Memory Core``: Provides the interfaces used by the Arrow libraries and applications.\n+* ``Memory Netty``: An implementation of the memory interfaces based on the `Netty`_ library.\n+* ``Memory Unsafe``: An implementation of the memory interfaces based on the `sun.misc.Unsafe`_ library.\n+\n+ArrowBuf\n+========\n+\n+ArrowBuf represents a single, contiguous allocation of direct memory. It consists of an address and a length,\n+and provides low-level interfaces for working with the contents, similar to ByteBuffer.\n+\n+Unlike (Direct)ByteBuffer, it has reference counting built in (see the next section).\n+\n+Reference counting\n+==================\n+\n+Is a technique to help computer programs manage memory. Tracks the reference/pointers to an object, it increase\n++1 or decrease -1 the reference counting between the objects.\n+\n+If an object ValidityBuffer has a reference with object IntVector, then, IntVector should increase the\n+reference counting to 1 (0 + 1 = 1), then if at the same time, ValueBuffer has a reference with IntVector,\n+then, IntVector should increase the reference counting to 2 (1 + 1 = 2).\n+\n+.. code-block::\n+\n+    |__ A = Allocator\n+    |____ B = IntVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+    |____ C = VarcharVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+\n+Base on best practices at some point you are going to close your allocator objects using ``close()`` method,\n+allocators check for reference counting and throw an exception if they are in use.\n+\n+Reference Manager manages the reference counting for the underlying memory chunk.\n+\n+Allocators\n+==========\n+\n+One of the interfaces defined by memory-core is BufferAllocator. This interface collect all the definitions for deal\n+with byte buffer allocation.\n+\n+The concrete implementation of the allocator is Root Allocator. Applications should generally\n+create one allocator at the start of the program..\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n+\n+As an example of child allocator consider `Flight Client`_ creation.\n+\n+Memory Modules\n+==============\n+\n+Applications should depend on memory-core and one of the two implementations,\n+else an exception will be raised at runtime.\n+\n+Development Guidelines\n+======================\n+\n+* Use the BufferAllocator interface in APIs instead of RootAllocator.\n+* Applications should generally create one allocator at the start of the program.\n+* Remember to close() allocators after use (whether they are child allocators or the RootAllocator), either manually or preferably via a try-with-resources statement.\n+* Allocators will check for outstanding memory allocations when closed, and throw an exception if there are allocated buffers, this helps detect memory leaks.\n+* Allocators have a debug mode, that makes it easier to figure out where a leak originated (Consider to add this parameter to your application: -Darrow.memory.debug.allocator=true)\n+* Arrow modules use logback to collect logs configure that properly to see your logs (create logback-test.xml file on resources folder).\n\nReview comment:\n       Added Debugging Memory Leaks/Allocation\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-15T21:50:10.373+0000",
                    "updated": "2022-03-15T21:50:10.373+0000",
                    "started": "2022-03-15T21:50:10.372+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "741908",
                    "issueId": "13426650"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426650/worklog/741909",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "davisusanibar commented on a change in pull request #12603:\nURL: https://github.com/apache/arrow/pull/12603#discussion_r827444767\n\n\n\n##########\nFile path: docs/source/java/memory.rst\n##########\n@@ -0,0 +1,114 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+=================\n+Memory Management\n+=================\n+\n+.. contents::\n+\n+The memory modules contain all the functionality that Arrow uses to manage memory (allocation and deallocation).\n+This section will introduce you to the major concepts in Java\u2019s memory management:\n+\n+* `ArrowBuf`_\n+* `Reference counting`_\n+* `BufferAllocator`_\n+\n+Getting Started\n+===============\n+\n+Arrow's memory management is built around the needs of the columnar format and using off-heap memory.\n+Also, it is its own independent implementation, and does not wrap the C++ implementation.\n+\n+Arrow offer a high level of abstraction providing several access APIs to read/write data into a direct memory.\n+\n+Arrow provides multiple modules, but users only need two of them:\n+\n+* ``Memory Core``: Provides the interfaces used by the Arrow libraries and applications.\n+* ``Memory Netty``: An implementation of the memory interfaces based on the `Netty`_ library.\n+* ``Memory Unsafe``: An implementation of the memory interfaces based on the `sun.misc.Unsafe`_ library.\n+\n+ArrowBuf\n+========\n+\n+ArrowBuf represents a single, contiguous allocation of direct memory. It consists of an address and a length,\n+and provides low-level interfaces for working with the contents, similar to ByteBuffer.\n+\n+Unlike (Direct)ByteBuffer, it has reference counting built in (see the next section).\n+\n+Reference counting\n+==================\n+\n+Is a technique to help computer programs manage memory. Tracks the reference/pointers to an object, it increase\n++1 or decrease -1 the reference counting between the objects.\n+\n+If an object ValidityBuffer has a reference with object IntVector, then, IntVector should increase the\n+reference counting to 1 (0 + 1 = 1), then if at the same time, ValueBuffer has a reference with IntVector,\n+then, IntVector should increase the reference counting to 2 (1 + 1 = 2).\n+\n+.. code-block::\n+\n+    |__ A = Allocator\n+    |____ B = IntVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+    |____ C = VarcharVector (reference count = 2 )\n+    |____________ ValidityBuffer\n+    |____________ ValueBuffer\n+\n+Base on best practices at some point you are going to close your allocator objects using ``close()`` method,\n+allocators check for reference counting and throw an exception if they are in use.\n+\n+Reference Manager manages the reference counting for the underlying memory chunk.\n+\n+Allocators\n+==========\n+\n+One of the interfaces defined by memory-core is BufferAllocator. This interface collect all the definitions for deal\n+with byte buffer allocation.\n+\n+The concrete implementation of the allocator is Root Allocator. Applications should generally\n+create one allocator at the start of the program..\n+\n+Arrow provides a tree-based model for memory allocation. The RootAllocator is created first,\n+then all allocators are created as children of that allocator. The RootAllocator is responsible\n+for being the master bookkeeper for memory allocations.\n+\n+As an example of child allocator consider `Flight Client`_ creation.\n\nReview comment:\n       Deleted\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-15T21:50:32.939+0000",
                    "updated": "2022-03-15T21:50:32.939+0000",
                    "started": "2022-03-15T21:50:32.939+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "741909",
                    "issueId": "13426650"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 29400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@498440f8[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4cbb7292[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1cb3847a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@b0b4a9c[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@55023533[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7ebdeabb[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7ead3142[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2f23cba1[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6bccd8db[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7a351f2b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6d05060e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5ccaa6cc[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 29400,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Mar 17 13:33:52 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-03-17T13:33:52.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15573/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2022-02-04T15:43:51.000+0000",
        "updated": "2022-03-18T15:00:55.000+0000",
        "timeoriginalestimate": null,
        "description": "- Apache arrow memory management: -\r\n    - Apache java [arrow off-heap](https://github.com/apache/arrow/blob/ccffcea3fd383c448aa9da292baf2d0805ecab4d/java/memory/memory-core/pom.xml#L23) reference implementation with examples:\r\n        - Figure out a use case when we could show power of off-heap versus common java heap implementations (for example: off-heap is performing well for faster start up)\r\n    - Apache arrow best practices to working without problems with off-heap implementation",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "8h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 29400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java][Doc] Apache Arrow memory  management",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426650/comment/17504392",
                    "id": "17504392",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=dsusanibara",
                        "name": "dsusanibara",
                        "key": "dsusanibara",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Dali Susanibar Arce",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "PR related: https://github.com/apache/arrow/pull/12603",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=dsusanibara",
                        "name": "dsusanibara",
                        "key": "dsusanibara",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Dali Susanibar Arce",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-03-10T16:12:48.996+0000",
                    "updated": "2022-03-10T16:12:48.996+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13426650/comment/17508194",
                    "id": "17508194",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 12603\n[https://github.com/apache/arrow/pull/12603]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-03-17T13:33:52.617+0000",
                    "updated": "2022-03-17T13:33:52.617+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z0z9k8:",
        "customfield_12314139": null
    }
}