{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13036848",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036848",
    "key": "ARROW-507",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-507/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@173a5d2d[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7304cc9a[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1705b6b1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4230c8d7[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@660af0ad[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2e863a15[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@140ca14a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@50beb56c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6100a84e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7ec960e9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@f3e888b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2a8e49d5[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Oct 23 21:57:34 UTC 2017",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2017-10-23T21:57:34.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-507/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2017-01-22T04:58:35.000+0000",
        "updated": "2017-10-23T21:57:34.000+0000",
        "timeoriginalestimate": null,
        "description": "This is the inverse operation from flattening a list type into its child values (dropping the offsets)",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++/Python] Construct List container from offsets and values subarrays",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036848/comment/16089191",
                    "id": "16089191",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Moving this to 0.6.0. I added a preliminary implementation in the patch for ARROW-1177, but to make it complete, we need to handle \"sanitizing\" offsets that contain nulls (replacing the null values with the previous value) and adding unit tests to validate. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-07-16T23:51:07.228+0000",
                    "updated": "2017-07-16T23:51:07.228+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036848/comment/16213597",
                    "id": "16213597",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "GitHub user wesm opened a pull request:\n\n    https://github.com/apache/arrow/pull/1224\n\n    ARROW-507: [C++] Complete ListArray::FromArrays implementation, add unit tests\n\n    In the event that the offsets array has nulls, this will backward-fill the offsets to compute the correct value sizes.\r\n    \r\n    I left one TODO which is to possibly create a new validity bitmap with the last offset bit zero'd out (since the offsets array is one longer than the length of the created array, and it must be non-null). I might go ahead and do that\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/wesm/arrow ARROW-507\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/arrow/pull/1224.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #1224\n    \n----\ncommit d99c0dfa0dcd311f9ea7c80de8b1e47d3ba5824b\nAuthor: Wes McKinney <wes.mckinney@twosigma.com>\nDate:   2017-10-20T20:43:32Z\n\n    Complete C++ implementation, unit test for ListArray::FromArrays, handling of offsets with nulls\n    \n    Change-Id: I89ef1dccbf101fcfdd56e3d7bc0d19e78842140d\n\ncommit 868a727a080afd0747c812fd082127afb57c1560\nAuthor: Wes McKinney <wes.mckinney@twosigma.com>\nDate:   2017-10-21T00:36:26Z\n\n    Implement / add tests for ListArray.from_arrays in Python\n    \n    Change-Id: I75e1123193d3a35ad788380405fc2d31e5511eba\n\n----\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-21T00:47:27.381+0000",
                    "updated": "2017-10-21T00:47:27.381+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036848/comment/16215920",
                    "id": "16215920",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1224: ARROW-507: [C++] Complete ListArray::FromArrays implementation, add unit tests\nURL: https://github.com/apache/arrow/pull/1224#issuecomment-338808828\n \n \n   +1\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-23T21:57:04.339+0000",
                    "updated": "2017-10-23T21:57:04.339+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036848/comment/16215923",
                    "id": "16215923",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1224: ARROW-507: [C++] Complete ListArray::FromArrays implementation, add unit tests\nURL: https://github.com/apache/arrow/pull/1224\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/array-test.cc b/cpp/src/arrow/array-test.cc\nindex ae9e9fd00..168ef1057 100644\n--- a/cpp/src/arrow/array-test.cc\n+++ b/cpp/src/arrow/array-test.cc\n@@ -1946,7 +1946,7 @@ TEST(TestDecimalDictionaryBuilder, DoubleTableSize) {\n // ----------------------------------------------------------------------\n // List tests\n \n-class TestListBuilder : public TestBuilder {\n+class TestListArray : public TestBuilder {\n  public:\n   void SetUp() {\n     TestBuilder::SetUp();\n@@ -1973,7 +1973,7 @@ class TestListBuilder : public TestBuilder {\n   std::shared_ptr<ListArray> result_;\n };\n \n-TEST_F(TestListBuilder, Equality) {\n+TEST_F(TestListArray, Equality) {\n   Int32Builder* vb = static_cast<Int32Builder*>(builder_->value_builder());\n \n   std::shared_ptr<Array> array, equal_array, unequal_array;\n@@ -2032,9 +2032,66 @@ TEST_F(TestListBuilder, Equality) {\n   ASSERT_TRUE(array->RangeEquals(1, 5, 0, slice));\n }\n \n-TEST_F(TestListBuilder, TestResize) {}\n+TEST_F(TestListArray, TestResize) {}\n \n-TEST_F(TestListBuilder, TestAppendNull) {\n+TEST_F(TestListArray, TestFromArrays) {\n+  std::shared_ptr<Array> offsets1, offsets2, offsets3, offsets4, values;\n+\n+  std::vector<bool> offsets_is_valid3 = {true, false, true, true};\n+  std::vector<bool> offsets_is_valid4 = {true, true, false, true};\n+\n+  std::vector<bool> values_is_valid = {true, false, true, true, true, true};\n+\n+  std::vector<int32_t> offset1_values = {0, 2, 2, 6};\n+  std::vector<int32_t> offset2_values = {0, 2, 6, 6};\n+\n+  std::vector<int8_t> values_values = {0, 1, 2, 3, 4, 5};\n+  const int length = 3;\n+\n+  ArrayFromVector<Int32Type, int32_t>(offset1_values, &offsets1);\n+  ArrayFromVector<Int32Type, int32_t>(offset2_values, &offsets2);\n+\n+  ArrayFromVector<Int32Type, int32_t>(offsets_is_valid3, offset1_values, &offsets3);\n+  ArrayFromVector<Int32Type, int32_t>(offsets_is_valid4, offset2_values, &offsets4);\n+\n+  ArrayFromVector<Int8Type, int8_t>(values_is_valid, values_values, &values);\n+\n+  auto list_type = list(int8());\n+\n+  std::shared_ptr<Array> list1, list3, list4;\n+  ASSERT_OK(ListArray::FromArrays(*offsets1, *values, pool_, &list1));\n+  ASSERT_OK(ListArray::FromArrays(*offsets3, *values, pool_, &list3));\n+  ASSERT_OK(ListArray::FromArrays(*offsets4, *values, pool_, &list4));\n+\n+  ListArray expected1(list_type, length, offsets1->data()->buffers[1], values,\n+                      offsets1->data()->buffers[0], 0);\n+  AssertArraysEqual(expected1, *list1);\n+\n+  // Use null bitmap from offsets3, but clean offsets from non-null version\n+  ListArray expected3(list_type, length, offsets1->data()->buffers[1], values,\n+                      offsets3->data()->buffers[0], 1);\n+  AssertArraysEqual(expected3, *list3);\n+\n+  // Check that the last offset bit is zero\n+  ASSERT_TRUE(BitUtil::BitNotSet(list3->null_bitmap()->data(), length + 1));\n+\n+  ListArray expected4(list_type, length, offsets2->data()->buffers[1], values,\n+                      offsets4->data()->buffers[0], 1);\n+  AssertArraysEqual(expected4, *list4);\n+\n+  // Test failure modes\n+\n+  std::shared_ptr<Array> tmp;\n+\n+  // Zero-length offsets\n+  ASSERT_RAISES(Invalid,\n+                ListArray::FromArrays(*offsets1->Slice(0, 0), *values, pool_, &tmp));\n+\n+  // Offsets not int32\n+  ASSERT_RAISES(Invalid, ListArray::FromArrays(*values, *offsets1, pool_, &tmp));\n+}\n+\n+TEST_F(TestListArray, TestAppendNull) {\n   ASSERT_OK(builder_->AppendNull());\n   ASSERT_OK(builder_->AppendNull());\n \n@@ -2076,7 +2133,7 @@ void ValidateBasicListArray(const ListArray* result, const vector<int32_t>& valu\n   }\n }\n \n-TEST_F(TestListBuilder, TestBasics) {\n+TEST_F(TestListArray, TestBasics) {\n   vector<int32_t> values = {0, 1, 2, 3, 4, 5, 6};\n   vector<int> lengths = {3, 0, 4};\n   vector<uint8_t> is_valid = {1, 0, 1};\n@@ -2098,7 +2155,7 @@ TEST_F(TestListBuilder, TestBasics) {\n   ValidateBasicListArray(result_.get(), values, is_valid);\n }\n \n-TEST_F(TestListBuilder, BulkAppend) {\n+TEST_F(TestListArray, BulkAppend) {\n   vector<int32_t> values = {0, 1, 2, 3, 4, 5, 6};\n   vector<int> lengths = {3, 0, 4};\n   vector<uint8_t> is_valid = {1, 0, 1};\n@@ -2115,7 +2172,7 @@ TEST_F(TestListBuilder, BulkAppend) {\n   ValidateBasicListArray(result_.get(), values, is_valid);\n }\n \n-TEST_F(TestListBuilder, BulkAppendInvalid) {\n+TEST_F(TestListArray, BulkAppendInvalid) {\n   vector<int32_t> values = {0, 1, 2, 3, 4, 5, 6};\n   vector<int> lengths = {3, 0, 4};\n   vector<uint8_t> is_null = {0, 1, 0};\n@@ -2135,7 +2192,7 @@ TEST_F(TestListBuilder, BulkAppendInvalid) {\n   ASSERT_RAISES(Invalid, ValidateArray(*result_));\n }\n \n-TEST_F(TestListBuilder, TestZeroLength) {\n+TEST_F(TestListArray, TestZeroLength) {\n   // All buffers are null\n   Done();\n   ASSERT_OK(ValidateArray(*result_));\ndiff --git a/cpp/src/arrow/array.cc b/cpp/src/arrow/array.cc\nindex eaac187a3..fc4b96e1b 100644\n--- a/cpp/src/arrow/array.cc\n+++ b/cpp/src/arrow/array.cc\n@@ -172,27 +172,55 @@ ListArray::ListArray(const std::shared_ptr<DataType>& type, int64_t length,\n   SetData(internal_data);\n }\n \n-Status ListArray::FromArrays(const Array& offsets, const Array& values,\n-                             MemoryPool* ARROW_ARG_UNUSED(pool),\n+Status ListArray::FromArrays(const Array& offsets, const Array& values, MemoryPool* pool,\n                              std::shared_ptr<Array>* out) {\n-  if (ARROW_PREDICT_FALSE(offsets.length() == 0)) {\n+  if (offsets.length() == 0) {\n     return Status::Invalid(\"List offsets must have non-zero length\");\n   }\n \n-  if (ARROW_PREDICT_FALSE(offsets.null_count() > 0)) {\n-    return Status::Invalid(\"Null offsets in ListArray::FromArrays not yet implemented\");\n-  }\n-\n-  if (ARROW_PREDICT_FALSE(offsets.type_id() != Type::INT32)) {\n+  if (offsets.type_id() != Type::INT32) {\n     return Status::Invalid(\"List offsets must be signed int32\");\n   }\n \n-  BufferVector buffers = {offsets.null_bitmap(),\n-                          static_cast<const Int32Array&>(offsets).values()};\n+  BufferVector buffers = {};\n+\n+  const auto& typed_offsets = static_cast<const Int32Array&>(offsets);\n+\n+  const int64_t num_offsets = offsets.length();\n+\n+  if (offsets.null_count() > 0) {\n+    std::shared_ptr<Buffer> clean_offsets, clean_valid_bits;\n+\n+    RETURN_NOT_OK(AllocateBuffer(pool, num_offsets * sizeof(int32_t), &clean_offsets));\n+\n+    // Copy valid bits, zero out the bit for the final offset\n+    RETURN_NOT_OK(offsets.null_bitmap()->Copy(0, BitUtil::BytesForBits(num_offsets - 1),\n+                                              &clean_valid_bits));\n+    BitUtil::ClearBit(clean_valid_bits->mutable_data(), num_offsets);\n+    buffers.emplace_back(std::move(clean_valid_bits));\n+\n+    const int32_t* raw_offsets = typed_offsets.raw_values();\n+    auto clean_raw_offsets = reinterpret_cast<int32_t*>(clean_offsets->mutable_data());\n+\n+    // Must work backwards so we can tell how many values were in the last non-null value\n+    DCHECK(offsets.IsValid(num_offsets - 1));\n+    int32_t current_offset = raw_offsets[num_offsets - 1];\n+    for (int64_t i = num_offsets - 1; i >= 0; --i) {\n+      if (offsets.IsValid(i)) {\n+        current_offset = raw_offsets[i];\n+      }\n+      clean_raw_offsets[i] = current_offset;\n+    }\n+\n+    buffers.emplace_back(std::move(clean_offsets));\n+  } else {\n+    buffers.emplace_back(offsets.null_bitmap());\n+    buffers.emplace_back(typed_offsets.values());\n+  }\n \n   auto list_type = list(values.type());\n   auto internal_data =\n-      std::make_shared<ArrayData>(list_type, offsets.length() - 1, std::move(buffers),\n+      std::make_shared<ArrayData>(list_type, num_offsets - 1, std::move(buffers),\n                                   offsets.null_count(), offsets.offset());\n   internal_data->child_data.push_back(values.data());\n \ndiff --git a/cpp/src/arrow/array.h b/cpp/src/arrow/array.h\nindex 75dda4a75..b5d253099 100644\n--- a/cpp/src/arrow/array.h\n+++ b/cpp/src/arrow/array.h\n@@ -400,10 +400,13 @@ class ARROW_EXPORT ListArray : public Array {\n \n   /// \\brief Construct ListArray from array of offsets and child value array\n   ///\n-  /// Note: does not validate input beyond sanity checks. Use\n-  /// arrow::ValidateArray if you need stronger validation of inputs\n+  /// This function does the bare minimum of validation of the offsets and\n+  /// input types, and will allocate a new offsets array if necessary (i.e. if\n+  /// the offsets contain any nulls). If the offsets do not have nulls, they\n+  /// are assumed to be well-formed\n   ///\n-  /// \\param[in] offsets Array containing n + 1 offsets encoding length and size\n+  /// \\param[in] offsets Array containing n + 1 offsets encoding length and\n+  /// size. Must be of int32 type\n   /// \\param[in] values Array containing\n   /// \\param[in] pool MemoryPool in case new offsets array needs to be\n   /// allocated because of null values\ndiff --git a/python/pyarrow/array.pxi b/python/pyarrow/array.pxi\nindex f402defc9..c5f28a951 100644\n--- a/python/pyarrow/array.pxi\n+++ b/python/pyarrow/array.pxi\n@@ -173,6 +173,29 @@ def array(object obj, type=None, mask=None,\n         return _sequence_to_array(obj, size, type, pool)\n \n \n+def asarray(values, type=None):\n+    \"\"\"\n+    Convert to pyarrow.Array, inferring type if not provided. Attempt to cast\n+    if indicated type is different\n+\n+    Parameters\n+    ----------\n+    values : array-like (sequence, numpy.ndarray, pyarrow.Array)\n+    type : string or DataType\n+\n+    Returns\n+    -------\n+    arr : Array\n+    \"\"\"\n+    if isinstance(values, Array):\n+        if type is not None and not values.type.equals(type):\n+            values = values.cast(type)\n+\n+        return values\n+    else:\n+        return array(values, type=type)\n+\n+\n def _normalize_slice(object arrow_obj, slice key):\n     cdef Py_ssize_t n = len(arrow_obj)\n \n@@ -574,7 +597,7 @@ cdef class DecimalArray(FixedSizeBinaryArray):\n cdef class ListArray(Array):\n \n     @staticmethod\n-    def from_arrays(Array offsets, Array values, MemoryPool pool=None):\n+    def from_arrays(offsets, values, MemoryPool pool=None):\n         \"\"\"\n         Construct ListArray from arrays of int32 offsets and values\n \n@@ -587,11 +610,17 @@ cdef class ListArray(Array):\n         -------\n         list_array : ListArray\n         \"\"\"\n-        cdef shared_ptr[CArray] out\n+        cdef:\n+            Array _offsets, _values\n+            shared_ptr[CArray] out\n         cdef CMemoryPool* cpool = maybe_unbox_memory_pool(pool)\n+\n+        _offsets = asarray(offsets, type='int32')\n+        _values = asarray(values)\n+\n         with nogil:\n-            check_status(CListArray.FromArrays(\n-                deref(offsets.ap), deref(values.ap), cpool, &out))\n+            check_status(CListArray.FromArrays(_offsets.ap[0], _values.ap[0],\n+                                               cpool, &out))\n         return pyarrow_wrap_array(out)\n \n \ndiff --git a/python/pyarrow/tests/test_array.py b/python/pyarrow/tests/test_array.py\nindex 414a268ce..418076f81 100644\n--- a/python/pyarrow/tests/test_array.py\n+++ b/python/pyarrow/tests/test_array.py\n@@ -218,6 +218,22 @@ def test_list_from_arrays():\n \n     assert result.equals(expected)\n \n+    # With nulls\n+    offsets = [0, None, 2, 6]\n+\n+    values = ['a', 'b', 'c', 'd', 'e', 'f']\n+\n+    result = pa.ListArray.from_arrays(offsets, values)\n+    expected = pa.array([values[:2], None, values[2:]])\n+\n+    assert result.equals(expected)\n+\n+    # Another edge case\n+    offsets2 = [0, 2, None, 6]\n+    result = pa.ListArray.from_arrays(offsets2, values)\n+    expected = pa.array([values[:2], values[2:], None])\n+    assert result.equals(expected)\n+\n \n def _check_cast_case(case, safe=True):\n     in_data, in_type, out_data, out_type = case\ndiff --git a/python/pyarrow/types.pxi b/python/pyarrow/types.pxi\nindex 0bef1aa60..3d838ba39 100644\n--- a/python/pyarrow/types.pxi\n+++ b/python/pyarrow/types.pxi\n@@ -73,7 +73,27 @@ cdef class DataType:\n         return '{0.__class__.__name__}({0})'.format(self)\n \n     def __richcmp__(DataType self, object other, int op):\n+        if op == cp.Py_EQ:\n+            return self.equals(other)\n+        elif op == cp.Py_NE:\n+            return not self.equals(other)\n+        else:\n+            raise TypeError('Invalid comparison')\n+\n+    def equals(self, other):\n+        \"\"\"\n+        Return true if type is equivalent to passed value\n+\n+        Parameters\n+        ----------\n+        other : DataType or string convertible to DataType\n+\n+        Returns\n+        -------\n+        is_equal : boolean\n+        \"\"\"\n         cdef DataType other_type\n+\n         if not isinstance(other, DataType):\n             if not isinstance(other, six.string_types):\n                 raise TypeError(other)\n@@ -81,12 +101,7 @@ cdef class DataType:\n         else:\n             other_type = other\n \n-        if op == cp.Py_EQ:\n-            return self.type.Equals(deref(other_type.type))\n-        elif op == cp.Py_NE:\n-            return not self.type.Equals(deref(other_type.type))\n-        else:\n-            raise TypeError('Invalid comparison')\n+        return self.type.Equals(deref(other_type.type))\n \n     def to_pandas_dtype(self):\n         \"\"\"\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-23T21:57:22.261+0000",
                    "updated": "2017-10-23T21:57:22.261+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13036848/comment/16215924",
                    "id": "16215924",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Resolved by PR https://github.com/apache/arrow/pull/1224",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-10-23T21:57:34.293+0000",
                    "updated": "2017-10-23T21:57:34.293+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|i391if:",
        "customfield_12314139": null
    }
}