{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13337468",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337468",
    "key": "ARROW-10402",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10402/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 14,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337468/worklog/505352",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao opened a new pull request #8541:\nURL: https://github.com/apache/arrow/pull/8541\n\n\n   This is a major refactor of the `equal.rs` module. :/\r\n   \r\n   The rational for this change is many fold: \r\n   \r\n   * currently array comparison requires downcasting the array ref to its concrete types. This is painful and not very ergonomics, as the user must \"guess\" what to downcast for comparison. We can see this in the hacks around `sort`, `take` and `concatenate` kernel's tests, and some of the tests of the builders.\r\n   * the code in array comparison is hard to follow given the amount of calls that they perform.\r\n   * The implementation currently indirectly uses many of the `unsafe` APIs that we have (via `is_null`, `value` and the like), which makes it risky to operate and mutate.\r\n   * Some code is being repeated.\r\n   \r\n   This PR:\r\n   \r\n   1. adds `impl PartialEq for dyn Array`, to allow `Array` comparison based on `Array::data` (main change)\r\n   2. Makes array equality to only depend on `ArrayData`, i.e. it no longer depends on concrete array types (such as `PrimitiveArray` and related API) to perform comparisons.\r\n   3. Significantly reduces the risk of panics and UB when composite arrays are of different types, by checking the types on `range` comparison\r\n   4. Makes array equality be statically dispatched, via `match datatype`.\r\n   5. DRY the code around array equality\r\n   6. Fixes an error in equality of dictionary with equal values\r\n   7. Added tests to equalities that were not tested (fixed binary, some edge cases of dictionaries)\r\n   8. splits `equal.rs` in smaller, more manageable files.\r\n   9. Removes `ArrayListOps`, since it it no longer needed\r\n   10. Moves Json equality to its own module, for clarity.\r\n   11. removes the need to have two functions per type to compare arrays.\r\n   12. Adds, as part of the specification, the number of buffers and their respective width to datatypes. This was backported from #8401\r\n   \r\n   This is a draft as there is a significant design change here: all our code base so far focused on implementing the logic on the implementers of `Array` instead of `ArrayData`. This PR breaks that design, by using an Array-independent implementation, so that we can use it on `dyn Array == dyn Array`.\r\n   \r\n   Note that this does not implement `PartialEq` for `ArrayData`, only `dyn Array`, as different data does not a different array (due to the nullability). That implementation is being worked on #8200.\r\n   \r\n   IMO this PR significantly simplifies the code around array comparison, to the point where many implementations are 5 lines long.\r\n   \r\n   The first 3 commits are almost independent of the rest. The remaining are historically correct, but not very interesting to read. The functions are divided by modules for readability.\r\n   \r\n   All tests are there, plus new tests for some of the edge cases and untested arrays.\r\n   \r\n   This change is backward incompatible `array1.equals(&array2)` no longer works: use `array1 == array2` instead, which is the idiomatic way of comparing structs and trait objects in rust. :P\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-27T18:06:00.828+0000",
                    "updated": "2020-10-27T18:06:00.828+0000",
                    "started": "2020-10-27T18:06:00.827+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "505352",
                    "issueId": "13337468"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337468/worklog/505353",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8541:\nURL: https://github.com/apache/arrow/pull/8541#issuecomment-717427176\n\n\n   https://issues.apache.org/jira/browse/ARROW-10402\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-27T18:09:34.622+0000",
                    "updated": "2020-10-27T18:09:34.622+0000",
                    "started": "2020-10-27T18:09:34.622+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "505353",
                    "issueId": "13337468"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337468/worklog/507349",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8541:\nURL: https://github.com/apache/arrow/pull/8541#discussion_r516989790\n\n\n\n##########\nFile path: rust/arrow/src/array/equal/variable_size.rs\n##########\n@@ -0,0 +1,90 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use crate::array::{ArrayData, OffsetSizeTrait};\n+\n+use super::utils::equal_len;\n+\n+fn offset_value_equal<T: OffsetSizeTrait>(\n+    lhs_values: &[u8],\n+    rhs_values: &[u8],\n+    lhs_offsets: &[T],\n+    rhs_offsets: &[T],\n+    lhs_pos: usize,\n+    rhs_pos: usize,\n+    len: usize,\n+) -> bool {\n+    let lhs_start = lhs_offsets[lhs_pos].to_usize().unwrap();\n+    let rhs_start = rhs_offsets[rhs_pos].to_usize().unwrap();\n+    let lhs_len = lhs_offsets[lhs_pos + len] - lhs_offsets[lhs_pos];\n+    let rhs_len = rhs_offsets[rhs_pos + len] - rhs_offsets[rhs_pos];\n+\n+    lhs_len == rhs_len\n+        && equal_len(\n+            lhs_values,\n+            rhs_values,\n+            lhs_start,\n+            rhs_start,\n+            lhs_len.to_usize().unwrap(),\n+        )\n+}\n+\n+pub fn variable_sized_equal<T: OffsetSizeTrait>(\n\nReview comment:\n       May you please add a doc, as it's a public function\n\n##########\nFile path: rust/arrow/src/array/equal/null.rs\n##########\n@@ -0,0 +1,31 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use crate::array::ArrayData;\n+\n+#[inline]\n+pub fn null_equal(\n+    _lhs: &ArrayData,\n+    _rhs: &ArrayData,\n+    _lhs_start: usize,\n+    _rhs_start: usize,\n+    _len: usize,\n+) -> bool {\n+    // a null buffer's range is always true, as every element is by definition equal (to null).\n+    // We only need to compare data_types\n+    true\n\nReview comment:\n       We also need to compare the lengths so we can achieve logical equality. `NullArray::new(3) != NullArray::new(4)`.\r\n   If I write an IPC file with a single array for both those 2 arrays, it'll be unequal because we still encode lengths in the array's data.\n\n##########\nFile path: rust/arrow/src/array/data.rs\n##########\n@@ -26,6 +26,15 @@ use crate::buffer::Buffer;\n use crate::datatypes::DataType;\n use crate::util::bit_util;\n \n+fn count_nulls(null_bit_buffer: Option<&Buffer>, offset: usize, len: usize) -> usize {\n\nReview comment:\n       Perhaps we could inline this? I haven't peeked at what happens with the assembly of these small functions, but I've read somewhere in the past that it might be beneficial to always inline small functions.\n\n##########\nFile path: rust/arrow/src/array/data.rs\n##########\n@@ -207,6 +210,56 @@ impl ArrayData {\n \n         size\n     }\n+\n+    /// Creates a zero-copy slice of itself. This creates a new [ArrayData]\n+    /// with a different offset, len and a shifted null bitmap.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `offset + length > self.len()`.\n+    pub fn slice(&self, offset: usize, length: usize) -> ArrayData {\n+        assert!((offset + length) <= self.len());\n+\n+        let mut new_data = self.clone();\n+\n+        new_data.len = length;\n+        new_data.offset = offset + self.offset;\n+\n+        new_data.null_count =\n+            count_nulls(new_data.null_buffer(), new_data.offset, new_data.len);\n+\n+        new_data\n+    }\n+\n+    /// Returns the buffer `buffer` as a slice of type `T`. When the expected buffer is bit-packed,\n+    /// the slice is not offset.\n+    #[inline]\n+    pub(super) fn buffer<T>(&self, buffer: usize) -> &[T] {\n+        let values = unsafe { self.buffers[buffer].data().align_to::<T>() };\n+        if values.0.len() != 0 || values.2.len() != 0 {\n+            panic!(\"The buffer is not byte-aligned with its interpretation\")\n+        };\n+        if self.data_type.width(buffer).unwrap() == 1 {\n+            // bitpacked buffers are offset differently and it is the consumers that need to worry about.\n+            &values.1\n+        } else {\n+            &values.1[self.offset..]\n+        }\n+    }\n+\n+    /// Returns the buffer `buffer` as a slice of type `T`. When the expected buffer is bit-packed,\n+    /// the slice is not offset.\n+    #[inline]\n+    pub fn buffer_data(&self, buffer: usize) -> &[u8] {\n+        let values = self.buffers[buffer].data();\n+        let width = self.data_type.width(buffer).unwrap();\n+        if width == 1 {\n+            // bitpacked buffers are offset differently and it is the consumers that need to worry about.\n+            &values\n+        } else {\n+            &values[self.offset * (width / 8)..]\n+        }\n+    }\n }\n \n impl PartialEq for ArrayData {\n\nReview comment:\n       My changes here muddy the water. While reviewing this, I started to clean this up. I'll try submit a PR on top of this, removing the asserts, and completing the implementation.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-03T22:22:04.390+0000",
                    "updated": "2020-11-03T22:22:04.390+0000",
                    "started": "2020-11-03T22:22:04.390+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "507349",
                    "issueId": "13337468"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337468/worklog/507491",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8541:\nURL: https://github.com/apache/arrow/pull/8541#discussion_r517095720\n\n\n\n##########\nFile path: rust/arrow/src/array/data.rs\n##########\n@@ -207,6 +210,56 @@ impl ArrayData {\n \n         size\n     }\n+\n+    /// Creates a zero-copy slice of itself. This creates a new [ArrayData]\n+    /// with a different offset, len and a shifted null bitmap.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `offset + length > self.len()`.\n+    pub fn slice(&self, offset: usize, length: usize) -> ArrayData {\n+        assert!((offset + length) <= self.len());\n+\n+        let mut new_data = self.clone();\n+\n+        new_data.len = length;\n+        new_data.offset = offset + self.offset;\n+\n+        new_data.null_count =\n+            count_nulls(new_data.null_buffer(), new_data.offset, new_data.len);\n+\n+        new_data\n+    }\n+\n+    /// Returns the buffer `buffer` as a slice of type `T`. When the expected buffer is bit-packed,\n+    /// the slice is not offset.\n+    #[inline]\n+    pub(super) fn buffer<T>(&self, buffer: usize) -> &[T] {\n+        let values = unsafe { self.buffers[buffer].data().align_to::<T>() };\n+        if values.0.len() != 0 || values.2.len() != 0 {\n+            panic!(\"The buffer is not byte-aligned with its interpretation\")\n+        };\n+        if self.data_type.width(buffer).unwrap() == 1 {\n+            // bitpacked buffers are offset differently and it is the consumers that need to worry about.\n+            &values.1\n+        } else {\n+            &values.1[self.offset..]\n+        }\n+    }\n+\n+    /// Returns the buffer `buffer` as a slice of type `T`. When the expected buffer is bit-packed,\n+    /// the slice is not offset.\n+    #[inline]\n+    pub fn buffer_data(&self, buffer: usize) -> &[u8] {\n+        let values = self.buffers[buffer].data();\n+        let width = self.data_type.width(buffer).unwrap();\n+        if width == 1 {\n+            // bitpacked buffers are offset differently and it is the consumers that need to worry about.\n+            &values\n+        } else {\n+            &values[self.offset * (width / 8)..]\n+        }\n+    }\n }\n \n impl PartialEq for ArrayData {\n\nReview comment:\n       One Idea would be to use the equality code from this PR, but sprinkle it with `debug_assert_eq`, so that during debug, it is more clear where the difference is. An alternative is to use `assert_eq`, so that the two arrays are shown side-by-side (this only works for small arrays, though).\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-04T04:49:19.608+0000",
                    "updated": "2020-11-04T04:49:19.608+0000",
                    "started": "2020-11-04T04:49:19.608+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "507491",
                    "issueId": "13337468"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337468/worklog/507500",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8541:\nURL: https://github.com/apache/arrow/pull/8541#discussion_r517105140\n\n\n\n##########\nFile path: rust/arrow/src/array/equal/null.rs\n##########\n@@ -0,0 +1,31 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use crate::array::ArrayData;\n+\n+#[inline]\n+pub fn null_equal(\n+    _lhs: &ArrayData,\n+    _rhs: &ArrayData,\n+    _lhs_start: usize,\n+    _rhs_start: usize,\n+    _len: usize,\n+) -> bool {\n+    // a null buffer's range is always true, as every element is by definition equal (to null).\n+    // We only need to compare data_types\n+    true\n\nReview comment:\n       Note that this function already assumes that me performed that comparison before-hand. We do that on the `equal::equal` and `equal::equal_range` functions.\r\n   \r\n   The reason I moved `base_equal` away from type-specific functions is that it allow us to have a single function per type for both range equality and equality.\r\n   \r\n   To avoid the risk of being misused (i.e. not checking `base_equal` first), I pushed a commit that privatizes all these functions, effectively making `equal::equal` the only public function of the module `equal`.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-04T05:29:28.641+0000",
                    "updated": "2020-11-04T05:29:28.641+0000",
                    "started": "2020-11-04T05:29:28.640+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "507500",
                    "issueId": "13337468"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337468/worklog/507502",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8541:\nURL: https://github.com/apache/arrow/pull/8541#discussion_r517105719\n\n\n\n##########\nFile path: rust/arrow/src/array/equal/variable_size.rs\n##########\n@@ -0,0 +1,90 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use crate::array::{ArrayData, OffsetSizeTrait};\n+\n+use super::utils::equal_len;\n+\n+fn offset_value_equal<T: OffsetSizeTrait>(\n+    lhs_values: &[u8],\n+    rhs_values: &[u8],\n+    lhs_offsets: &[T],\n+    rhs_offsets: &[T],\n+    lhs_pos: usize,\n+    rhs_pos: usize,\n+    len: usize,\n+) -> bool {\n+    let lhs_start = lhs_offsets[lhs_pos].to_usize().unwrap();\n+    let rhs_start = rhs_offsets[rhs_pos].to_usize().unwrap();\n+    let lhs_len = lhs_offsets[lhs_pos + len] - lhs_offsets[lhs_pos];\n+    let rhs_len = rhs_offsets[rhs_pos + len] - rhs_offsets[rhs_pos];\n+\n+    lhs_len == rhs_len\n+        && equal_len(\n+            lhs_values,\n+            rhs_values,\n+            lhs_start,\n+            rhs_start,\n+            lhs_len.to_usize().unwrap(),\n+        )\n+}\n+\n+pub fn variable_sized_equal<T: OffsetSizeTrait>(\n\nReview comment:\n       I have privatized this function, as it assumes that the user already used `base_equal`. This reminded me to document the `equal::equal` function, which is the public one of the module.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-04T05:31:34.013+0000",
                    "updated": "2020-11-04T05:31:34.013+0000",
                    "started": "2020-11-04T05:31:34.013+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "507502",
                    "issueId": "13337468"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337468/worklog/507959",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8541:\nURL: https://github.com/apache/arrow/pull/8541#discussion_r517811042\n\n\n\n##########\nFile path: rust/arrow/src/array/equal/null.rs\n##########\n@@ -0,0 +1,31 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use crate::array::ArrayData;\n+\n+#[inline]\n+pub fn null_equal(\n+    _lhs: &ArrayData,\n+    _rhs: &ArrayData,\n+    _lhs_start: usize,\n+    _rhs_start: usize,\n+    _len: usize,\n+) -> bool {\n+    // a null buffer's range is always true, as every element is by definition equal (to null).\n+    // We only need to compare data_types\n+    true\n\nReview comment:\n       I added a test for this, just for avoidance of doubts :)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-05T06:06:27.973+0000",
                    "updated": "2020-11-05T06:06:27.973+0000",
                    "started": "2020-11-05T06:06:27.972+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "507959",
                    "issueId": "13337468"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337468/worklog/508390",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #8541:\nURL: https://github.com/apache/arrow/pull/8541#issuecomment-722936811\n\n\n   I have simplified this code further to allow the compiler to optimize out some functions. The code is now 10-40% faster compared to current master. I updated the description accordingly.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-06T08:00:41.196+0000",
                    "updated": "2020-11-06T08:00:41.196+0000",
                    "started": "2020-11-06T08:00:41.196+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508390",
                    "issueId": "13337468"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337468/worklog/508707",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on a change in pull request #8541:\nURL: https://github.com/apache/arrow/pull/8541#discussion_r519115194\n\n\n\n##########\nFile path: rust/arrow/src/array/equal/structure.rs\n##########\n@@ -0,0 +1,59 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use crate::array::ArrayData;\n+\n+use super::equal_range;\n+\n+fn equal_values(\n+    lhs: &ArrayData,\n+    rhs: &ArrayData,\n+    lhs_start: usize,\n+    rhs_start: usize,\n+    len: usize,\n+) -> bool {\n+    lhs.child_data()\n+        .iter()\n+        .zip(rhs.child_data())\n+        .all(|(lhs_values, rhs_values)| {\n+            equal_range(lhs_values, rhs_values, lhs_start, rhs_start, len)\n+        })\n+}\n+\n+pub(super) fn struct_equal(\n+    lhs: &ArrayData,\n+    rhs: &ArrayData,\n+    lhs_start: usize,\n+    rhs_start: usize,\n+    len: usize,\n+) -> bool {\n\nReview comment:\n       Something that we can address later, is that if a struct slot is null, we should carry that nullness across to its children. This is actually the problem that @carols10cents and I encountered on both parquet roundtrips and integration tests.\r\n   \r\n   The spec (http://arrow.apache.org/docs/format/Columnar.html#struct-layout) says:\r\n   \r\n   > While a struct does not have physical storage for each of its semantic slots (i.e. each scalar C-like struct), an entire struct slot can be set to null via the validity bitmap. Any of the child field arrays can have null values according to their respective independent validity bitmaps. This implies that for a particular struct slot the validity bitmap for the struct array might indicate a null slot when one or more of its child arrays has a non-null value in their corresponding slot. When reading the struct array the parent validity bitmap takes priority.\r\n   \r\n   I think we can address this in a separate PR, if we still find that `struct_equal` doesn't cover that edge case.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-07T05:48:25.108+0000",
                    "updated": "2020-11-07T05:48:25.108+0000",
                    "started": "2020-11-07T05:48:25.108+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508707",
                    "issueId": "13337468"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337468/worklog/508757",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8541:\nURL: https://github.com/apache/arrow/pull/8541#discussion_r519169437\n\n\n\n##########\nFile path: rust/arrow/src/array/builder.rs\n##########\n@@ -3535,14 +3531,15 @@ mod tests {\n             None,\n             Some(6),\n             Some(7),\n+            // array.data() end\n             Some(3),\n             None,\n             None,\n             Some(6),\n-        ])) as ArrayRef;\n+        ]);\n         assert_eq!(finished.len(), expected.len());\n         assert_eq!(finished.null_count(), expected.null_count());\n-        assert!(finished.equals(&(*expected)));\n+        assert_eq!(finished, expected);\n\nReview comment:\n       this is certainly a lot nicer\n\n##########\nFile path: rust/arrow/src/array/builder.rs\n##########\n@@ -531,7 +531,7 @@ impl<T: ArrowPrimitiveType> ArrayBuilder for PrimitiveBuilder<T> {\n \n             for i in 0..len {\n                 // account for offset as `ArrayData` does not\n\nReview comment:\n       this comment may need to be updated as the code seems to no longer account for offset\n\n##########\nFile path: rust/arrow/src/array/equal/mod.rs\n##########\n@@ -0,0 +1,829 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Module containing functionality to compute array equality.\n+//! This module uses [ArrayData] and does not\n+//! depend on dynamic casting of `Array`.\n+\n+use super::{\n+    array::BinaryOffsetSizeTrait, Array, ArrayData, FixedSizeBinaryArray,\n+    GenericBinaryArray, GenericListArray, GenericStringArray, OffsetSizeTrait,\n+    PrimitiveArray, StringOffsetSizeTrait, StructArray,\n+};\n+\n+use crate::datatypes::{ArrowPrimitiveType, DataType, IntervalUnit};\n+\n+mod boolean;\n+mod dictionary;\n+mod fixed_binary;\n+mod fixed_list;\n+mod list;\n+mod null;\n+mod primitive;\n+mod structure;\n+mod utils;\n+mod variable_size;\n+\n+// these methods assume the same type, len and null count.\n+// For this reason, they are not exposed and are instead used\n+// to build the generic functions below (`equal_range` and `equal`).\n+use boolean::boolean_equal;\n+use dictionary::dictionary_equal;\n+use fixed_binary::fixed_binary_equal;\n+use fixed_list::fixed_list_equal;\n+use list::list_equal;\n+use null::null_equal;\n+use primitive::primitive_equal;\n+use structure::struct_equal;\n+use variable_size::variable_sized_equal;\n+\n+impl PartialEq for dyn Array {\n+    fn eq(&self, other: &Self) -> bool {\n+        equal(self.data().as_ref(), other.data().as_ref())\n+    }\n+}\n+\n+impl<T: Array> PartialEq<T> for dyn Array {\n+    fn eq(&self, other: &T) -> bool {\n+        equal(self.data().as_ref(), other.data().as_ref())\n+    }\n+}\n+\n+impl<T: ArrowPrimitiveType> PartialEq for PrimitiveArray<T> {\n+    fn eq(&self, other: &PrimitiveArray<T>) -> bool {\n+        equal(self.data().as_ref(), other.data().as_ref())\n+    }\n+}\n+\n+impl<OffsetSize: StringOffsetSizeTrait> PartialEq for GenericStringArray<OffsetSize> {\n+    fn eq(&self, other: &Self) -> bool {\n+        equal(self.data().as_ref(), other.data().as_ref())\n+    }\n+}\n+\n+impl<OffsetSize: BinaryOffsetSizeTrait> PartialEq for GenericBinaryArray<OffsetSize> {\n+    fn eq(&self, other: &Self) -> bool {\n+        equal(self.data().as_ref(), other.data().as_ref())\n+    }\n+}\n+\n+impl PartialEq for FixedSizeBinaryArray {\n+    fn eq(&self, other: &Self) -> bool {\n+        equal(self.data().as_ref(), other.data().as_ref())\n+    }\n+}\n+\n+impl<OffsetSize: OffsetSizeTrait> PartialEq for GenericListArray<OffsetSize> {\n+    fn eq(&self, other: &Self) -> bool {\n+        equal(self.data().as_ref(), other.data().as_ref())\n+    }\n+}\n+\n+impl PartialEq for StructArray {\n+    fn eq(&self, other: &Self) -> bool {\n+        equal(self.data().as_ref(), other.data().as_ref())\n+    }\n+}\n+\n+#[inline]\n+fn equal_values(\n\nReview comment:\n       ```suggestion\r\n   /// Compares two arrays for equality starting at `lhs_start` and `rhs_start`\r\n   /// `lhs` and `rhs` *must* have the same data type\r\n   fn equal_values(\r\n   ```\n\n##########\nFile path: rust/arrow/src/array/data.rs\n##########\n@@ -207,6 +206,41 @@ impl ArrayData {\n \n         size\n     }\n+\n+    /// Creates a zero-copy slice of itself. This creates a new [ArrayData]\n+    /// with a different offset, len and a shifted null bitmap.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `offset + length > self.len()`.\n+    pub fn slice(&self, offset: usize, length: usize) -> ArrayData {\n+        assert!((offset + length) <= self.len());\n+\n+        let mut new_data = self.clone();\n+\n+        new_data.len = length;\n+        new_data.offset = offset + self.offset;\n+\n+        new_data.null_count =\n+            count_nulls(new_data.null_buffer(), new_data.offset, new_data.len);\n+\n+        new_data\n+    }\n+\n+    /// Returns the buffer `buffer` as a slice of type `T`. The slice is already offset.\n\nReview comment:\n       ```suggestion\r\n       /// Returns self.buffers at index `buffer` as a slice of type `T` starting at self.offset\r\n   ```\n\n##########\nFile path: rust/arrow/src/array/data.rs\n##########\n@@ -207,6 +206,41 @@ impl ArrayData {\n \n         size\n     }\n+\n+    /// Creates a zero-copy slice of itself. This creates a new [ArrayData]\n+    /// with a different offset, len and a shifted null bitmap.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `offset + length > self.len()`.\n+    pub fn slice(&self, offset: usize, length: usize) -> ArrayData {\n+        assert!((offset + length) <= self.len());\n+\n+        let mut new_data = self.clone();\n+\n+        new_data.len = length;\n+        new_data.offset = offset + self.offset;\n+\n+        new_data.null_count =\n+            count_nulls(new_data.null_buffer(), new_data.offset, new_data.len);\n+\n+        new_data\n+    }\n+\n+    /// Returns the buffer `buffer` as a slice of type `T`. The slice is already offset.\n+    /// # Panics\n+    /// This function panics if:\n+    /// * the buffer is not byte-aligned with type T, or\n+    /// * the datatype is `Boolean` (it corresponds to a bit-packed buffer where the offset is not applicable)\n+    #[inline]\n+    pub(super) fn buffer<T: ArrowNativeType>(&self, buffer: usize) -> &[T] {\n+        let values = unsafe { self.buffers[buffer].data().align_to::<T>() };\n+        if values.0.len() != 0 || values.2.len() != 0 {\n+            panic!(\"The buffer is not byte-aligned with its interpretation\")\n\nReview comment:\n       \ud83d\udc4d for the panic\n\n##########\nFile path: rust/arrow/src/array/builder.rs\n##########\n@@ -3999,7 +3996,7 @@ mod tests {\n         let expected_list =\n             FixedSizeListArray::from(Arc::new(expected_list_data) as ArrayDataRef);\n         let expected_list = FixedSizeBinaryArray::from(expected_list);\n-        // assert!(expected_list.values().equals(&*finished.values()));\n+        // assert_eq!(expected_list.values(), finished.values());\n\nReview comment:\n       not that you did it, but I wonder why this code is commented out -- maybe your changes will have fixed it\n\n##########\nFile path: rust/arrow/src/array/array.rs\n##########\n@@ -112,10 +112,10 @@ pub trait Array: fmt::Debug + Send + Sync + ArrayEqual + JsonEqual {\n     /// // Make slice over the values [2, 3, 4]\n     /// let array_slice = array.slice(1, 3);\n     ///\n-    /// assert!(array_slice.equals(&Int32Array::from(vec![2, 3, 4])));\n+    /// assert_eq!(array_slice.as_ref(), &Int32Array::from(vec![2, 3, 4]));\n\nReview comment:\n       :heart\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-07T12:16:51.202+0000",
                    "updated": "2020-11-07T12:16:51.202+0000",
                    "started": "2020-11-07T12:16:51.202+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508757",
                    "issueId": "13337468"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337468/worklog/508772",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jhorstmann commented on a change in pull request #8541:\nURL: https://github.com/apache/arrow/pull/8541#discussion_r519187056\n\n\n\n##########\nFile path: rust/arrow/src/array/data.rs\n##########\n@@ -121,7 +120,7 @@ impl ArrayData {\n     /// Returns whether the element at index `i` is null\n     pub fn is_null(&self, i: usize) -> bool {\n         if let Some(ref b) = self.null_bitmap {\n-            return !b.is_set(i);\n+            return !b.is_set(self.offset + i);\n\nReview comment:\n       Thanks a lot, I think I have another ticket that would be fixed by this change\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-07T15:13:54.937+0000",
                    "updated": "2020-11-07T15:13:54.937+0000",
                    "started": "2020-11-07T15:13:54.936+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508772",
                    "issueId": "13337468"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337468/worklog/508779",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #8541:\nURL: https://github.com/apache/arrow/pull/8541#issuecomment-723470287\n\n\n   @alamb , @nevi-me and @jhorstmann , thanks a lot for taking a close look into this, also for the amazing work yesterday and today on reviewing and merging stuff. Really impressive! \ud83d\udcaf \r\n   \r\n   I rebased this and resolved conflicts.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-07T17:12:06.797+0000",
                    "updated": "2020-11-07T17:12:06.797+0000",
                    "started": "2020-11-07T17:12:06.797+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508779",
                    "issueId": "13337468"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337468/worklog/508782",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #8541:\nURL: https://github.com/apache/arrow/pull/8541#issuecomment-723471732\n\n\n   > @alamb , @nevi-me and @jhorstmann , thanks a lot for taking a close look into this, also for the amazing work yesterday and today on reviewing and merging stuff. Really impressive! \ud83d\udcaf\r\n   > \r\n   > I rebased this and resolved conflicts.\r\n   \r\n   I'm super-excited, because this likely unlocks us on the failures that I've been getting on #8200.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-07T17:25:19.239+0000",
                    "updated": "2020-11-07T17:25:19.239+0000",
                    "started": "2020-11-07T17:25:19.239+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508782",
                    "issueId": "13337468"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337468/worklog/508785",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me closed pull request #8541:\nURL: https://github.com/apache/arrow/pull/8541\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-07T17:45:29.771+0000",
                    "updated": "2020-11-07T17:45:29.771+0000",
                    "started": "2020-11-07T17:45:29.771+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "508785",
                    "issueId": "13337468"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 8400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@313b6aad[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@560ef074[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6feed67[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2752209c[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@170b2de[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@39d01e03[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4834498b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7e54c6d1[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7a367d87[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@432f54c4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@293d353b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@71071c83[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 8400,
        "customfield_12312520": null,
        "customfield_12312521": "Sat Nov 07 17:45:22 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-11-07T17:45:22.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10402/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-10-27T16:08:28.000+0000",
        "updated": "2020-11-07T17:45:30.000+0000",
        "timeoriginalestimate": null,
        "description": "Currently, equality between two arrays requires downcasting the array to the correct type before comparing them. This is not very ergonomic.\r\n\r\nThe root cause of this is that array equality currently depends on the concrete types. I.e. the actual calculations depend on the concrete type.\r\n\r\nThe goal of this task is to simplify array equality by making it independent of the concrete type that the array depends on.\r\n\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 8400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Improve array equality",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337468/comment/17227848",
                    "id": "17227848",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "body": "Issue resolved by pull request 8541\n[https://github.com/apache/arrow/pull/8541]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "created": "2020-11-07T17:45:22.670+0000",
                    "updated": "2020-11-07T17:45:22.670+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0k1sw:",
        "customfield_12314139": null
    }
}