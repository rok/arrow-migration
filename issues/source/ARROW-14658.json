{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13411063",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411063",
    "key": "ARROW-14658",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available",
            "query-engine"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12631462",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12631462",
                "type": {
                    "id": "12310560",
                    "name": "Problem/Incident",
                    "inward": "is caused by",
                    "outward": "causes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310560"
                },
                "outwardIssue": {
                    "id": "13423296",
                    "key": "ARROW-15358",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13423296",
                    "fields": {
                        "summary": "[C++] Compilation error",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/1",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/blocker.svg",
                            "name": "Blocker",
                            "id": "1"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            },
            {
                "id": "12628526",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12628526",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13400871",
                    "key": "ARROW-13987",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13400871",
                    "fields": {
                        "summary": "[C++] Support nested FieldRefs",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12628527",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12628527",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13417223",
                    "key": "ARROW-15089",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417223",
                    "fields": {
                        "summary": "[C++] Add compute kernel to get MapArray value for given key",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12631460",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12631460",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13423292",
                    "key": "ARROW-15357",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13423292",
                    "fields": {
                        "summary": "[C++] Directly support nested field refs in exec plan",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12633377",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12633377",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13427734",
                    "key": "ARROW-15643",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13427734",
                    "fields": {
                        "summary": "[C++] Kernel to select subset of fields of a StructArray",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 19800,
            "total": 19800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 19800,
            "total": 19800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14658/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 33,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411063/worklog/681521",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm opened a new pull request #11704:\nURL: https://github.com/apache/arrow/pull/11704\n\n\n   This implements the following:\r\n   \r\n   - Being able to project and filter on nested fields in the scanner/query engine.\r\n   \r\n   Parquet, ORC, and Feather are supported. CSV does not support reading any nested types. For Parquet, we will materialize only the leaf nodes necessary for the projection. For ORC and Feather, we will read the entire top-level column.\r\n   \r\n   The following are not implemented:\r\n   - Normally, the scanner can fill in a column of nulls if a requested column does not exist in a file. This is not supported for nested field refs because we need ARROW-1888 to be implemented.\r\n   - A nested field ref cannot be used as a key/target of an aggregation or join. Their respective nodes currently compute a FieldPath to resolve a FieldRef, but then throw away the path, keeping only the first index. To implement this, we would need to store the FieldPath and use the struct_field kernel to resolve the actual array, however, this will have more overhead and we should be careful about regressions here, especially in the common case of no nested field refs.\r\n   - Only FieldRefs consisting of field names are supported. For FieldPath (= a sequence of indices), the semantics are unclear. So far, the scanner is robust to individual files having fields in a different order than the overall dataset, but this won't work for FieldPath, so either we must require that the schema is consistent across files, or come up with some way to map file schemas onto the dataset schema so that indices have a consistent meaning.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-15T14:15:30.709+0000",
                    "updated": "2021-11-15T14:15:30.709+0000",
                    "started": "2021-11-15T14:15:30.709+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "681521",
                    "issueId": "13411063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411063/worklog/681522",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11704:\nURL: https://github.com/apache/arrow/pull/11704#issuecomment-968952692\n\n\n   https://issues.apache.org/jira/browse/ARROW-14658\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-15T14:15:53.732+0000",
                    "updated": "2021-11-15T14:15:53.732+0000",
                    "started": "2021-11-15T14:15:53.732+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "681522",
                    "issueId": "13411063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411063/worklog/681529",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #11704:\nURL: https://github.com/apache/arrow/pull/11704#issuecomment-968965923\n\n\n   > * A nested field ref cannot be used as a key/target of an aggregation or join.\r\n   \r\n   If I project `a = struct_col.some_nested_field` in one step, can I then aggregate it?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-15T14:30:02.174+0000",
                    "updated": "2021-11-15T14:30:02.174+0000",
                    "started": "2021-11-15T14:30:02.174+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "681529",
                    "issueId": "13411063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411063/worklog/681530",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson edited a comment on pull request #11704:\nURL: https://github.com/apache/arrow/pull/11704#issuecomment-968965923\n\n\n   > * A nested field ref cannot be used as a key/target of an aggregation or join.\r\n   \r\n   If I project `a = struct_col.some_nested_field` in one step, can I then aggregate `a`?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-15T14:30:15.064+0000",
                    "updated": "2021-11-15T14:30:15.064+0000",
                    "started": "2021-11-15T14:30:15.063+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "681530",
                    "issueId": "13411063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411063/worklog/681535",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11704:\nURL: https://github.com/apache/arrow/pull/11704#issuecomment-968973045\n\n\n   > > * A nested field ref cannot be used as a key/target of an aggregation or join.\r\n   > \r\n   > If I project `a = struct_col.some_nested_field` in one step, can I then aggregate `a`?\r\n   \r\n   Yes, you can (I just pushed a test to confirm that).\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-15T14:37:16.186+0000",
                    "updated": "2021-11-15T14:37:16.186+0000",
                    "started": "2021-11-15T14:37:16.185+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "681535",
                    "issueId": "13411063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411063/worklog/681537",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #11704:\nURL: https://github.com/apache/arrow/pull/11704#issuecomment-968974033\n\n\n   > > > * A nested field ref cannot be used as a key/target of an aggregation or join.\r\n   > > \r\n   > > \r\n   > > If I project `a = struct_col.some_nested_field` in one step, can I then aggregate `a`?\r\n   > \r\n   > Yes, you can (I just pushed a test to confirm that).\r\n   \r\n   Excellent. Can you note that on the PR description then? (i.e. you can't directly use a nested field ref there but you can project and then use what you projected)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-15T14:38:13.985+0000",
                    "updated": "2021-11-15T14:38:13.985+0000",
                    "started": "2021-11-15T14:38:13.985+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "681537",
                    "issueId": "13411063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411063/worklog/681539",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #11704:\nURL: https://github.com/apache/arrow/pull/11704#issuecomment-968976533\n\n\n   Done (also clarified the comment about CSV)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-15T14:40:58.056+0000",
                    "updated": "2021-11-15T14:40:58.056+0000",
                    "started": "2021-11-15T14:40:58.055+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "681539",
                    "issueId": "13411063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411063/worklog/681745",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #11704:\nURL: https://github.com/apache/arrow/pull/11704#discussion_r749702773\n\n\n\n##########\nFile path: cpp/src/arrow/type.h\n##########\n@@ -1657,6 +1657,11 @@ class ARROW_EXPORT FieldRef {\n   const std::string* name() const {\n     return IsName() ? &util::get<std::string>(impl_) : NULLPTR;\n   }\n+  const std::vector<FieldRef>* nested_refs() const {\n+    return util::holds_alternative<std::vector<FieldRef>>(impl_)\n+               ? &util::get<std::vector<FieldRef>>(impl_)\n+               : NULLPTR;\n+  }\n\nReview comment:\n       Why is the logic here different than the logic above in `IsNested`?  I would expect this would be `return IsNested() ? ...`\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -231,30 +231,105 @@ void AddColumnIndices(const SchemaField& schema_field,\n   }\n }\n \n-// Compute the column projection out of an optional arrow::Schema\n-std::vector<int> InferColumnProjection(const parquet::arrow::FileReader& reader,\n-                                       const ScanOptions& options) {\n+Status ResolveOneFieldRef(\n+    const SchemaManifest& manifest, const FieldRef& field_ref,\n+    const std::unordered_map<std::string, const SchemaField*>& field_lookup,\n+    const std::unordered_set<std::string>& duplicate_fields,\n+    std::vector<int>* columns_selection) {\n+  if (const auto* name = field_ref.name()) {\n+    auto it = field_lookup.find(*name);\n+    if (it != field_lookup.end()) {\n+      AddColumnIndices(*it->second, columns_selection);\n+    } else if (duplicate_fields.find(*name) != duplicate_fields.end()) {\n+      // We shouldn't generally get here because SetProjection will reject such references\n+      return Status::Invalid(\"Ambiguous reference to column '\", *name,\n+                             \"' which occurs more than once\");\n+    }\n+    // \"Virtual\" column: field is not in file but is in the ScanOptions.\n+    // Ignore it here, as projection will pad the batch with a null column.\n+    return Status::OK();\n+  }\n+\n+  const SchemaField* field = nullptr;\n+  if (const auto* refs = field_ref.nested_refs()) {\n+    // Only supports a sequence of names\n+    for (const auto& ref : *refs) {\n+      if (const auto* name = ref.name()) {\n\nReview comment:\n       ```suggestion\r\n         if (const std::string* name = ref.name()) {\r\n   ```\r\n   Of course, by this point, I think I'm unlikely to forget the rule :laughing: Feel free to ignore these.\n\n##########\nFile path: cpp/src/arrow/dataset/test_util.h\n##########\n@@ -534,6 +543,8 @@ class FileFormatFixtureMixin : public ::testing::Test {\n   std::shared_ptr<ScanOptions> opts_;\n };\n \n+MATCHER(PointeesEquals, \"\") { return std::get<0>(arg)->Equals(*std::get<1>(arg)); }\n\nReview comment:\n       This seems general enough to go in a test util file?\n\n##########\nFile path: cpp/src/arrow/dataset/scanner_test.cc\n##########\n@@ -1343,6 +1431,69 @@ DatasetAndBatches MakeBasicDataset() {\n   return {dataset, batches};\n }\n \n+DatasetAndBatches MakeNestedDataset() {\n+  const auto dataset_schema = ::arrow::schema({\n+      field(\"a\", int32()),\n+      field(\"b\", boolean()),\n+      field(\"c\", struct_({\n+                     field(\"d\", int64()),\n+                     field(\"e\", float64()),\n+                 })),\n+  });\n+\n+  const auto physical_schema = ::arrow::schema({\n+      field(\"a\", int32()),\n+      field(\"b\", boolean()),\n+      field(\"c\", struct_({\n+                     field(\"e\", int64()),\n+                 })),\n+  });\n+\n+  RecordBatchVector record_batches{\n+      RecordBatchFromJSON(physical_schema, R\"([{\"a\": 1,    \"b\": null,  \"c\": {\"e\": 0}},\n+                                               {\"a\": 2,    \"b\": true,  \"c\": {\"e\": 1}}])\"),\n+      RecordBatchFromJSON(physical_schema, R\"([{\"a\": null, \"b\": true,  \"c\": {\"e\": 2}},\n+                                               {\"a\": 3,    \"b\": false, \"c\": {\"e\": null}}])\"),\n+      RecordBatchFromJSON(physical_schema, R\"([{\"a\": null, \"b\": true,  \"c\": {\"e\": 4}},\n+                                               {\"a\": 4,    \"b\": false, \"c\": {\"e\": 5}}])\"),\n+      RecordBatchFromJSON(physical_schema, R\"([{\"a\": 5,    \"b\": null,  \"c\": {\"e\": 6}},\n+                                               {\"a\": 6,    \"b\": false, \"c\": {\"e\": 7}},\n+                                               {\"a\": 7,    \"b\": false, \"c\": {\"e\": null}}])\"),\n+  };\n+\n+  auto dataset = std::make_shared<FragmentDataset>(\n+      dataset_schema,\n+      FragmentVector{\n+          std::make_shared<InMemoryFragment>(\n+              physical_schema, RecordBatchVector{record_batches[0], record_batches[1]},\n+              literal(true)),\n+          std::make_shared<InMemoryFragment>(\n+              physical_schema, RecordBatchVector{record_batches[2], record_batches[3]},\n+              literal(true)),\n+      });\n+\n+  std::vector<compute::ExecBatch> batches;\n+\n+  auto batch_it = record_batches.begin();\n+  for (int fragment_index = 0; fragment_index < 2; ++fragment_index) {\n+    for (int batch_index = 0; batch_index < 2; ++batch_index) {\n+      const auto& batch = *batch_it++;\n+\n+      // the scanned ExecBatches will begin with physical columns\n+      batches.emplace_back(*batch);\n+\n+      // scanned batches will be augmented with fragment and batch indices\n+      batches.back().values.emplace_back(fragment_index);\n+      batches.back().values.emplace_back(batch_index);\n+\n+      // ... and with the last-in-fragment flag\n+      batches.back().values.emplace_back(batch_index == 1);\n+    }\n+  }\n\nReview comment:\n       This logic feels like it belongs in a helper method somewhere.  Maybe a `DatasetAndBatchesFromJSON`\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -231,30 +231,105 @@ void AddColumnIndices(const SchemaField& schema_field,\n   }\n }\n \n-// Compute the column projection out of an optional arrow::Schema\n-std::vector<int> InferColumnProjection(const parquet::arrow::FileReader& reader,\n-                                       const ScanOptions& options) {\n+Status ResolveOneFieldRef(\n+    const SchemaManifest& manifest, const FieldRef& field_ref,\n+    const std::unordered_map<std::string, const SchemaField*>& field_lookup,\n+    const std::unordered_set<std::string>& duplicate_fields,\n+    std::vector<int>* columns_selection) {\n+  if (const auto* name = field_ref.name()) {\n\nReview comment:\n       ```suggestion\r\n     if (const std::string* name = field_ref.name()) {\r\n   ```\r\n   Same optional nit as above.\n\n##########\nFile path: cpp/src/arrow/dataset/test_util.h\n##########\n@@ -631,12 +646,92 @@ class FileFormatScanMixin : public FileFormatFixtureMixin<FormatHelper>,\n     for (auto maybe_batch : PhysicalBatches(fragment)) {\n       ASSERT_OK_AND_ASSIGN(auto batch, maybe_batch);\n       row_count += batch->num_rows();\n-      AssertSchemaEqual(*batch->schema(), *expected_schema,\n-                        /*check_metadata=*/false);\n+      ASSERT_THAT(\n+          batch->schema()->fields(),\n+          ::testing::UnorderedPointwise(PointeesEquals(), expected_schema->fields()))\n+          << \"EXPECTED:\\n\"\n+          << expected_schema->ToString() << \"\\nACTUAL:\\n\"\n+          << batch->schema()->ToString();\n     }\n \n     ASSERT_EQ(row_count, expected_rows());\n   }\n+  void TestScanProjectedNested(bool fine_grained_selection = false) {\n+    auto f32 = field(\"f32\", float32());\n+    auto f64 = field(\"f64\", float64());\n+    auto i32 = field(\"i32\", int32());\n+    auto i64 = field(\"i64\", int64());\n+    auto struct1 = field(\"struct1\", struct_({f32, i32}));\n+    auto struct2 = field(\"struct2\", struct_({f64, i64, struct1}));\n+    this->SetSchema({struct1, struct2, f32, f64, i32, i64});\n+    this->ProjectNested({\".struct1.f32\", \".struct2.struct1\", \".struct2.struct1.f32\"});\n+    this->SetFilter(equal(field_ref(FieldRef(\"struct2\", \"i64\")), literal(0)));\n+\n+    std::shared_ptr<Schema> expected_schema;\n+    if (fine_grained_selection) {\n+      // Some formats, like Parquet, let you pluck only a part of a complex type\n+      expected_schema = schema({\n+          field(\"struct1\", struct_({f32})),\n+          field(\"struct2\", struct_({i64, struct1})),\n+      });\n+    } else {\n+      expected_schema = schema({struct1, struct2});\n+    }\n+\n+    {\n+      auto reader = this->GetRecordBatchReader(opts_->dataset_schema);\n+      auto source = this->GetFileSource(reader.get());\n+      auto fragment = this->MakeFragment(*source);\n+\n+      int64_t row_count = 0;\n+      for (auto maybe_batch : PhysicalBatches(fragment)) {\n+        ASSERT_OK_AND_ASSIGN(auto batch, maybe_batch);\n+        row_count += batch->num_rows();\n+        ASSERT_THAT(\n+            batch->schema()->fields(),\n+            ::testing::UnorderedPointwise(PointeesEquals(), expected_schema->fields()))\n+            << \"EXPECTED:\\n\"\n+            << expected_schema->ToString() << \"\\nACTUAL:\\n\"\n+            << batch->schema()->ToString();\n+      }\n+      ASSERT_EQ(row_count, expected_rows());\n+    }\n+    {\n+      // File includes an extra child in struct2\n\nReview comment:\n       It seems arbitrary that we can't handle this case but we're fine with a missing child.  Though maybe I am reading the test incorrectly.\n\n##########\nFile path: cpp/src/arrow/dataset/test_util.h\n##########\n@@ -709,6 +808,35 @@ class FileFormatScanMixin : public FileFormatFixtureMixin<FormatHelper>,\n       ASSERT_EQ(row_count, expected_rows());\n     }\n   }\n+  void TestScanWithDuplicateColumn() {\n\nReview comment:\n       Is there any particular reason to allow this?\n\n##########\nFile path: cpp/src/arrow/compute/exec/test_util.cc\n##########\n@@ -190,6 +190,19 @@ BatchesWithSchema MakeBasicBatches() {\n   return out;\n }\n \n+BatchesWithSchema MakeNestedBatches() {\n+  auto ty = struct_({field(\"i32\", int32()), field(\"bool\", boolean())});\n+  BatchesWithSchema out;\n+  out.batches = {\n+      ExecBatchFromJSON(\n+          {ty}, R\"([[{\"i32\": null, \"bool\": true}], [{\"i32\": 4, \"bool\": false}]])\"),\n+      ExecBatchFromJSON(\n+          {ty},\n+          R\"([[{\"i32\": 5, \"bool\": null}], [{\"i32\": 6, \"bool\": false}], [{\"i32\": 7, \"bool\": false}]])\")};\n\nReview comment:\n       Nit: Maybe include a top-level null.\n\n##########\nFile path: cpp/src/arrow/dataset/file_csv.cc\n##########\n@@ -111,9 +111,26 @@ static inline Result<csv::ConvertOptions> GetConvertOptions(\n \n   if (!scan_options) return convert_options;\n \n-  auto materialized = scan_options->MaterializedFields();\n-  std::unordered_set<std::string> materialized_fields(materialized.begin(),\n-                                                      materialized.end());\n+  auto field_refs = scan_options->MaterializedFields();\n+  std::unordered_set<std::string> materialized_fields;\n+  materialized_fields.reserve(field_refs.size());\n+  // Preprocess field refs. We try to avoid FieldRef::GetFoo here since that's\n+  // quadratic (and this is significant overhead with 1000+ columns)\n+  for (const auto& ref : field_refs) {\n+    if (const auto* name = ref.name()) {\n+      // Common case\n+      materialized_fields.emplace(*name);\n+      continue;\n+    }\n+    // CSV doesn't really support nested types so do our best\n\nReview comment:\n       What is \"do our best\" mean here?  It seems like we are looking for a column with the same name as the parent field and then trying to cast from a primitive type to the nested type?  Will that ever succeed?\n\n##########\nFile path: cpp/src/arrow/dataset/file_csv.cc\n##########\n@@ -111,9 +111,26 @@ static inline Result<csv::ConvertOptions> GetConvertOptions(\n \n   if (!scan_options) return convert_options;\n \n-  auto materialized = scan_options->MaterializedFields();\n-  std::unordered_set<std::string> materialized_fields(materialized.begin(),\n-                                                      materialized.end());\n+  auto field_refs = scan_options->MaterializedFields();\n+  std::unordered_set<std::string> materialized_fields;\n+  materialized_fields.reserve(field_refs.size());\n+  // Preprocess field refs. We try to avoid FieldRef::GetFoo here since that's\n+  // quadratic (and this is significant overhead with 1000+ columns)\n+  for (const auto& ref : field_refs) {\n+    if (const auto* name = ref.name()) {\n\nReview comment:\n       Nit: Maybe it's just me but I have to look up `const auto*` every time to remember what the rules are since we so rarely return raw pointers.  Maybe we could just be explicit.\r\n   ```suggestion\r\n       if (const std::string* name = ref.name()) {\r\n   ```\n\n##########\nFile path: cpp/src/arrow/dataset/scanner_test.cc\n##########\n@@ -1343,6 +1431,69 @@ DatasetAndBatches MakeBasicDataset() {\n   return {dataset, batches};\n }\n \n+DatasetAndBatches MakeNestedDataset() {\n+  const auto dataset_schema = ::arrow::schema({\n+      field(\"a\", int32()),\n+      field(\"b\", boolean()),\n+      field(\"c\", struct_({\n+                     field(\"d\", int64()),\n+                     field(\"e\", float64()),\n+                 })),\n+  });\n+\n+  const auto physical_schema = ::arrow::schema({\n+      field(\"a\", int32()),\n+      field(\"b\", boolean()),\n+      field(\"c\", struct_({\n+                     field(\"e\", int64()),\n+                 })),\n+  });\n+\n+  RecordBatchVector record_batches{\n+      RecordBatchFromJSON(physical_schema, R\"([{\"a\": 1,    \"b\": null,  \"c\": {\"e\": 0}},\n+                                               {\"a\": 2,    \"b\": true,  \"c\": {\"e\": 1}}])\"),\n+      RecordBatchFromJSON(physical_schema, R\"([{\"a\": null, \"b\": true,  \"c\": {\"e\": 2}},\n+                                               {\"a\": 3,    \"b\": false, \"c\": {\"e\": null}}])\"),\n+      RecordBatchFromJSON(physical_schema, R\"([{\"a\": null, \"b\": true,  \"c\": {\"e\": 4}},\n+                                               {\"a\": 4,    \"b\": false, \"c\": {\"e\": 5}}])\"),\n+      RecordBatchFromJSON(physical_schema, R\"([{\"a\": 5,    \"b\": null,  \"c\": {\"e\": 6}},\n+                                               {\"a\": 6,    \"b\": false, \"c\": {\"e\": 7}},\n+                                               {\"a\": 7,    \"b\": false, \"c\": {\"e\": null}}])\"),\n\nReview comment:\n       Nit: Add some top-level nulls?  Or cases where `c` is null?\n\n##########\nFile path: cpp/src/arrow/dataset/test_util.h\n##########\n@@ -631,12 +646,92 @@ class FileFormatScanMixin : public FileFormatFixtureMixin<FormatHelper>,\n     for (auto maybe_batch : PhysicalBatches(fragment)) {\n       ASSERT_OK_AND_ASSIGN(auto batch, maybe_batch);\n       row_count += batch->num_rows();\n-      AssertSchemaEqual(*batch->schema(), *expected_schema,\n-                        /*check_metadata=*/false);\n+      ASSERT_THAT(\n+          batch->schema()->fields(),\n+          ::testing::UnorderedPointwise(PointeesEquals(), expected_schema->fields()))\n+          << \"EXPECTED:\\n\"\n+          << expected_schema->ToString() << \"\\nACTUAL:\\n\"\n+          << batch->schema()->ToString();\n     }\n \n     ASSERT_EQ(row_count, expected_rows());\n   }\n+  void TestScanProjectedNested(bool fine_grained_selection = false) {\n+    auto f32 = field(\"f32\", float32());\n+    auto f64 = field(\"f64\", float64());\n+    auto i32 = field(\"i32\", int32());\n+    auto i64 = field(\"i64\", int64());\n+    auto struct1 = field(\"struct1\", struct_({f32, i32}));\n+    auto struct2 = field(\"struct2\", struct_({f64, i64, struct1}));\n+    this->SetSchema({struct1, struct2, f32, f64, i32, i64});\n+    this->ProjectNested({\".struct1.f32\", \".struct2.struct1\", \".struct2.struct1.f32\"});\n+    this->SetFilter(equal(field_ref(FieldRef(\"struct2\", \"i64\")), literal(0)));\n+\n+    std::shared_ptr<Schema> expected_schema;\n+    if (fine_grained_selection) {\n+      // Some formats, like Parquet, let you pluck only a part of a complex type\n+      expected_schema = schema({\n+          field(\"struct1\", struct_({f32})),\n+          field(\"struct2\", struct_({i64, struct1})),\n+      });\n+    } else {\n+      expected_schema = schema({struct1, struct2});\n+    }\n\nReview comment:\n       If I'm understanding this I'm not sure I like it.  I would expect the resulting schema to be the same regardless of whether the underlying format supported partial projection or not.  For formats that don't support partial projection I would expect it would be simulated by a full read and then a cast.\n\n##########\nFile path: cpp/src/arrow/dataset/file_parquet.cc\n##########\n@@ -231,30 +231,105 @@ void AddColumnIndices(const SchemaField& schema_field,\n   }\n }\n \n-// Compute the column projection out of an optional arrow::Schema\n-std::vector<int> InferColumnProjection(const parquet::arrow::FileReader& reader,\n-                                       const ScanOptions& options) {\n+Status ResolveOneFieldRef(\n+    const SchemaManifest& manifest, const FieldRef& field_ref,\n+    const std::unordered_map<std::string, const SchemaField*>& field_lookup,\n+    const std::unordered_set<std::string>& duplicate_fields,\n+    std::vector<int>* columns_selection) {\n+  if (const auto* name = field_ref.name()) {\n+    auto it = field_lookup.find(*name);\n+    if (it != field_lookup.end()) {\n+      AddColumnIndices(*it->second, columns_selection);\n+    } else if (duplicate_fields.find(*name) != duplicate_fields.end()) {\n+      // We shouldn't generally get here because SetProjection will reject such references\n+      return Status::Invalid(\"Ambiguous reference to column '\", *name,\n+                             \"' which occurs more than once\");\n+    }\n+    // \"Virtual\" column: field is not in file but is in the ScanOptions.\n+    // Ignore it here, as projection will pad the batch with a null column.\n+    return Status::OK();\n+  }\n+\n+  const SchemaField* field = nullptr;\n+  if (const auto* refs = field_ref.nested_refs()) {\n\nReview comment:\n       ```suggestion\r\n     if (const std::vector<FieldRef>* refs = field_ref.nested_refs()) {\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-15T22:39:26.875+0000",
                    "updated": "2021-11-15T22:39:26.875+0000",
                    "started": "2021-11-15T22:39:26.875+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "681745",
                    "issueId": "13411063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411063/worklog/681999",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11704:\nURL: https://github.com/apache/arrow/pull/11704#discussion_r750253049\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/test_util.h\n##########\n@@ -631,12 +646,92 @@ class FileFormatScanMixin : public FileFormatFixtureMixin<FormatHelper>,\n     for (auto maybe_batch : PhysicalBatches(fragment)) {\n       ASSERT_OK_AND_ASSIGN(auto batch, maybe_batch);\n       row_count += batch->num_rows();\n-      AssertSchemaEqual(*batch->schema(), *expected_schema,\n-                        /*check_metadata=*/false);\n+      ASSERT_THAT(\n+          batch->schema()->fields(),\n+          ::testing::UnorderedPointwise(PointeesEquals(), expected_schema->fields()))\n+          << \"EXPECTED:\\n\"\n+          << expected_schema->ToString() << \"\\nACTUAL:\\n\"\n+          << batch->schema()->ToString();\n     }\n \n     ASSERT_EQ(row_count, expected_rows());\n   }\n+  void TestScanProjectedNested(bool fine_grained_selection = false) {\n+    auto f32 = field(\"f32\", float32());\n+    auto f64 = field(\"f64\", float64());\n+    auto i32 = field(\"i32\", int32());\n+    auto i64 = field(\"i64\", int64());\n+    auto struct1 = field(\"struct1\", struct_({f32, i32}));\n+    auto struct2 = field(\"struct2\", struct_({f64, i64, struct1}));\n+    this->SetSchema({struct1, struct2, f32, f64, i32, i64});\n+    this->ProjectNested({\".struct1.f32\", \".struct2.struct1\", \".struct2.struct1.f32\"});\n+    this->SetFilter(equal(field_ref(FieldRef(\"struct2\", \"i64\")), literal(0)));\n+\n+    std::shared_ptr<Schema> expected_schema;\n+    if (fine_grained_selection) {\n+      // Some formats, like Parquet, let you pluck only a part of a complex type\n+      expected_schema = schema({\n+          field(\"struct1\", struct_({f32})),\n+          field(\"struct2\", struct_({i64, struct1})),\n+      });\n+    } else {\n+      expected_schema = schema({struct1, struct2});\n+    }\n\nReview comment:\n       The overall schema will be the same once we pass through projection, i.e. the cast is done in the scanner instead of inside every file format. However, the tests here are reading from the fragment directly to check the physical schema, instead of the post-projection schema. I'll make sure both cases are covered in tests, though.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-16T13:05:35.620+0000",
                    "updated": "2021-11-16T13:05:35.620+0000",
                    "started": "2021-11-16T13:05:35.619+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "681999",
                    "issueId": "13411063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411063/worklog/682007",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11704:\nURL: https://github.com/apache/arrow/pull/11704#discussion_r750277344\n\n\n\n##########\nFile path: cpp/src/arrow/type.h\n##########\n@@ -1657,6 +1657,11 @@ class ARROW_EXPORT FieldRef {\n   const std::string* name() const {\n     return IsName() ? &util::get<std::string>(impl_) : NULLPTR;\n   }\n+  const std::vector<FieldRef>* nested_refs() const {\n+    return util::holds_alternative<std::vector<FieldRef>>(impl_)\n+               ? &util::get<std::vector<FieldRef>>(impl_)\n+               : NULLPTR;\n+  }\n\nReview comment:\n       Ah, this is because IsNested is checking whether it's either a FieldPath or a series of Names, but this accessor only wants the latter case. (I think the IsNested naming is a little unfortunate\u2026)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-16T13:34:58.443+0000",
                    "updated": "2021-11-16T13:34:58.443+0000",
                    "started": "2021-11-16T13:34:58.443+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "682007",
                    "issueId": "13411063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411063/worklog/682008",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11704:\nURL: https://github.com/apache/arrow/pull/11704#discussion_r750277858\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/test_util.h\n##########\n@@ -709,6 +808,35 @@ class FileFormatScanMixin : public FileFormatFixtureMixin<FormatHelper>,\n       ASSERT_EQ(row_count, expected_rows());\n     }\n   }\n+  void TestScanWithDuplicateColumn() {\n\nReview comment:\n       Perhaps not - I just wanted to make sure I didn't break this inadvertently since it was working.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-16T13:35:33.707+0000",
                    "updated": "2021-11-16T13:35:33.707+0000",
                    "started": "2021-11-16T13:35:33.707+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "682008",
                    "issueId": "13411063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411063/worklog/682009",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11704:\nURL: https://github.com/apache/arrow/pull/11704#discussion_r750278502\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/test_util.h\n##########\n@@ -631,12 +646,92 @@ class FileFormatScanMixin : public FileFormatFixtureMixin<FormatHelper>,\n     for (auto maybe_batch : PhysicalBatches(fragment)) {\n       ASSERT_OK_AND_ASSIGN(auto batch, maybe_batch);\n       row_count += batch->num_rows();\n-      AssertSchemaEqual(*batch->schema(), *expected_schema,\n-                        /*check_metadata=*/false);\n+      ASSERT_THAT(\n+          batch->schema()->fields(),\n+          ::testing::UnorderedPointwise(PointeesEquals(), expected_schema->fields()))\n+          << \"EXPECTED:\\n\"\n+          << expected_schema->ToString() << \"\\nACTUAL:\\n\"\n+          << batch->schema()->ToString();\n     }\n \n     ASSERT_EQ(row_count, expected_rows());\n   }\n+  void TestScanProjectedNested(bool fine_grained_selection = false) {\n+    auto f32 = field(\"f32\", float32());\n+    auto f64 = field(\"f64\", float64());\n+    auto i32 = field(\"i32\", int32());\n+    auto i64 = field(\"i64\", int64());\n+    auto struct1 = field(\"struct1\", struct_({f32, i32}));\n+    auto struct2 = field(\"struct2\", struct_({f64, i64, struct1}));\n+    this->SetSchema({struct1, struct2, f32, f64, i32, i64});\n+    this->ProjectNested({\".struct1.f32\", \".struct2.struct1\", \".struct2.struct1.f32\"});\n+    this->SetFilter(equal(field_ref(FieldRef(\"struct2\", \"i64\")), literal(0)));\n+\n+    std::shared_ptr<Schema> expected_schema;\n+    if (fine_grained_selection) {\n+      // Some formats, like Parquet, let you pluck only a part of a complex type\n+      expected_schema = schema({\n+          field(\"struct1\", struct_({f32})),\n+          field(\"struct2\", struct_({i64, struct1})),\n+      });\n+    } else {\n+      expected_schema = schema({struct1, struct2});\n+    }\n+\n+    {\n+      auto reader = this->GetRecordBatchReader(opts_->dataset_schema);\n+      auto source = this->GetFileSource(reader.get());\n+      auto fragment = this->MakeFragment(*source);\n+\n+      int64_t row_count = 0;\n+      for (auto maybe_batch : PhysicalBatches(fragment)) {\n+        ASSERT_OK_AND_ASSIGN(auto batch, maybe_batch);\n+        row_count += batch->num_rows();\n+        ASSERT_THAT(\n+            batch->schema()->fields(),\n+            ::testing::UnorderedPointwise(PointeesEquals(), expected_schema->fields()))\n+            << \"EXPECTED:\\n\"\n+            << expected_schema->ToString() << \"\\nACTUAL:\\n\"\n+            << batch->schema()->ToString();\n+      }\n+      ASSERT_EQ(row_count, expected_rows());\n+    }\n+    {\n+      // File includes an extra child in struct2\n\nReview comment:\n       We can handle missing fields just fine because (once ARROW-1888 is implemented) we can synthesize a null child to stand in for it. But, we can't handle a duplicate name because it's ambiguous which child we're referring to.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-16T13:36:17.820+0000",
                    "updated": "2021-11-16T13:36:17.820+0000",
                    "started": "2021-11-16T13:36:17.820+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "682009",
                    "issueId": "13411063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411063/worklog/682010",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11704:\nURL: https://github.com/apache/arrow/pull/11704#discussion_r750278750\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/test_util.h\n##########\n@@ -631,12 +646,92 @@ class FileFormatScanMixin : public FileFormatFixtureMixin<FormatHelper>,\n     for (auto maybe_batch : PhysicalBatches(fragment)) {\n       ASSERT_OK_AND_ASSIGN(auto batch, maybe_batch);\n       row_count += batch->num_rows();\n-      AssertSchemaEqual(*batch->schema(), *expected_schema,\n-                        /*check_metadata=*/false);\n+      ASSERT_THAT(\n+          batch->schema()->fields(),\n+          ::testing::UnorderedPointwise(PointeesEquals(), expected_schema->fields()))\n+          << \"EXPECTED:\\n\"\n+          << expected_schema->ToString() << \"\\nACTUAL:\\n\"\n+          << batch->schema()->ToString();\n     }\n \n     ASSERT_EQ(row_count, expected_rows());\n   }\n+  void TestScanProjectedNested(bool fine_grained_selection = false) {\n+    auto f32 = field(\"f32\", float32());\n+    auto f64 = field(\"f64\", float64());\n+    auto i32 = field(\"i32\", int32());\n+    auto i64 = field(\"i64\", int64());\n+    auto struct1 = field(\"struct1\", struct_({f32, i32}));\n+    auto struct2 = field(\"struct2\", struct_({f64, i64, struct1}));\n+    this->SetSchema({struct1, struct2, f32, f64, i32, i64});\n+    this->ProjectNested({\".struct1.f32\", \".struct2.struct1\", \".struct2.struct1.f32\"});\n+    this->SetFilter(equal(field_ref(FieldRef(\"struct2\", \"i64\")), literal(0)));\n+\n+    std::shared_ptr<Schema> expected_schema;\n+    if (fine_grained_selection) {\n+      // Some formats, like Parquet, let you pluck only a part of a complex type\n+      expected_schema = schema({\n+          field(\"struct1\", struct_({f32})),\n+          field(\"struct2\", struct_({i64, struct1})),\n+      });\n+    } else {\n+      expected_schema = schema({struct1, struct2});\n+    }\n+\n+    {\n+      auto reader = this->GetRecordBatchReader(opts_->dataset_schema);\n+      auto source = this->GetFileSource(reader.get());\n+      auto fragment = this->MakeFragment(*source);\n+\n+      int64_t row_count = 0;\n+      for (auto maybe_batch : PhysicalBatches(fragment)) {\n+        ASSERT_OK_AND_ASSIGN(auto batch, maybe_batch);\n+        row_count += batch->num_rows();\n+        ASSERT_THAT(\n+            batch->schema()->fields(),\n+            ::testing::UnorderedPointwise(PointeesEquals(), expected_schema->fields()))\n+            << \"EXPECTED:\\n\"\n+            << expected_schema->ToString() << \"\\nACTUAL:\\n\"\n+            << batch->schema()->ToString();\n+      }\n+      ASSERT_EQ(row_count, expected_rows());\n+    }\n+    {\n+      // File includes an extra child in struct2\n\nReview comment:\n       Ah, the comment here is a little misleading. I'll edit it to reflect that it's a duplicate name.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-16T13:36:30.838+0000",
                    "updated": "2021-11-16T13:36:30.838+0000",
                    "started": "2021-11-16T13:36:30.838+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "682010",
                    "issueId": "13411063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411063/worklog/682012",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11704:\nURL: https://github.com/apache/arrow/pull/11704#discussion_r750280185\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_csv.cc\n##########\n@@ -111,9 +111,26 @@ static inline Result<csv::ConvertOptions> GetConvertOptions(\n \n   if (!scan_options) return convert_options;\n \n-  auto materialized = scan_options->MaterializedFields();\n-  std::unordered_set<std::string> materialized_fields(materialized.begin(),\n-                                                      materialized.end());\n+  auto field_refs = scan_options->MaterializedFields();\n+  std::unordered_set<std::string> materialized_fields;\n+  materialized_fields.reserve(field_refs.size());\n+  // Preprocess field refs. We try to avoid FieldRef::GetFoo here since that's\n+  // quadratic (and this is significant overhead with 1000+ columns)\n+  for (const auto& ref : field_refs) {\n+    if (const auto* name = ref.name()) {\n+      // Common case\n+      materialized_fields.emplace(*name);\n+      continue;\n+    }\n+    // CSV doesn't really support nested types so do our best\n\nReview comment:\n       This is the same behavior as IPC/ORC: if a nested field is selected, load the entire top-level field and let the projection take care of selecting the child field later. By \"do our best\" I just mean that CSV doesn't support reading any nested types in the first place so there's nothing to test/this branch should never really get hit, but I'll clarify what's going on here.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-16T13:38:10.235+0000",
                    "updated": "2021-11-16T13:38:10.235+0000",
                    "started": "2021-11-16T13:38:10.235+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "682012",
                    "issueId": "13411063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411063/worklog/682014",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11704:\nURL: https://github.com/apache/arrow/pull/11704#discussion_r750282835\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/file_csv.cc\n##########\n@@ -111,9 +111,26 @@ static inline Result<csv::ConvertOptions> GetConvertOptions(\n \n   if (!scan_options) return convert_options;\n \n-  auto materialized = scan_options->MaterializedFields();\n-  std::unordered_set<std::string> materialized_fields(materialized.begin(),\n-                                                      materialized.end());\n+  auto field_refs = scan_options->MaterializedFields();\n+  std::unordered_set<std::string> materialized_fields;\n+  materialized_fields.reserve(field_refs.size());\n+  // Preprocess field refs. We try to avoid FieldRef::GetFoo here since that's\n+  // quadratic (and this is significant overhead with 1000+ columns)\n+  for (const auto& ref : field_refs) {\n+    if (const auto* name = ref.name()) {\n\nReview comment:\n       I'll write these out. I used `const auto*` to stress that we're getting a raw pointer here instead of a reference but it's probably best to be explicit about the types in that case anyways.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-16T13:41:17.968+0000",
                    "updated": "2021-11-16T13:41:17.968+0000",
                    "started": "2021-11-16T13:41:17.967+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "682014",
                    "issueId": "13411063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411063/worklog/682051",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11704:\nURL: https://github.com/apache/arrow/pull/11704#discussion_r750377614\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/test_util.h\n##########\n@@ -631,12 +646,92 @@ class FileFormatScanMixin : public FileFormatFixtureMixin<FormatHelper>,\n     for (auto maybe_batch : PhysicalBatches(fragment)) {\n       ASSERT_OK_AND_ASSIGN(auto batch, maybe_batch);\n       row_count += batch->num_rows();\n-      AssertSchemaEqual(*batch->schema(), *expected_schema,\n-                        /*check_metadata=*/false);\n+      ASSERT_THAT(\n+          batch->schema()->fields(),\n+          ::testing::UnorderedPointwise(PointeesEquals(), expected_schema->fields()))\n+          << \"EXPECTED:\\n\"\n+          << expected_schema->ToString() << \"\\nACTUAL:\\n\"\n+          << batch->schema()->ToString();\n     }\n \n     ASSERT_EQ(row_count, expected_rows());\n   }\n+  void TestScanProjectedNested(bool fine_grained_selection = false) {\n+    auto f32 = field(\"f32\", float32());\n+    auto f64 = field(\"f64\", float64());\n+    auto i32 = field(\"i32\", int32());\n+    auto i64 = field(\"i64\", int64());\n+    auto struct1 = field(\"struct1\", struct_({f32, i32}));\n+    auto struct2 = field(\"struct2\", struct_({f64, i64, struct1}));\n+    this->SetSchema({struct1, struct2, f32, f64, i32, i64});\n+    this->ProjectNested({\".struct1.f32\", \".struct2.struct1\", \".struct2.struct1.f32\"});\n+    this->SetFilter(equal(field_ref(FieldRef(\"struct2\", \"i64\")), literal(0)));\n+\n+    std::shared_ptr<Schema> expected_schema;\n+    if (fine_grained_selection) {\n+      // Some formats, like Parquet, let you pluck only a part of a complex type\n+      expected_schema = schema({\n+          field(\"struct1\", struct_({f32})),\n+          field(\"struct2\", struct_({i64, struct1})),\n+      });\n+    } else {\n+      expected_schema = schema({struct1, struct2});\n+    }\n\nReview comment:\n       Ah\u2026this is a little problematic since filtering/projection cast to the dataset schema first, and then we run into ARROW-1888 again as a result. I might go implement that first since this PR becomes a lot more useful with that.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-16T15:16:48.711+0000",
                    "updated": "2021-11-16T15:16:48.711+0000",
                    "started": "2021-11-16T15:16:48.710+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "682051",
                    "issueId": "13411063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411063/worklog/682052",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11704:\nURL: https://github.com/apache/arrow/pull/11704#discussion_r750381791\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/test_util.h\n##########\n@@ -631,12 +646,92 @@ class FileFormatScanMixin : public FileFormatFixtureMixin<FormatHelper>,\n     for (auto maybe_batch : PhysicalBatches(fragment)) {\n       ASSERT_OK_AND_ASSIGN(auto batch, maybe_batch);\n       row_count += batch->num_rows();\n-      AssertSchemaEqual(*batch->schema(), *expected_schema,\n-                        /*check_metadata=*/false);\n+      ASSERT_THAT(\n+          batch->schema()->fields(),\n+          ::testing::UnorderedPointwise(PointeesEquals(), expected_schema->fields()))\n+          << \"EXPECTED:\\n\"\n+          << expected_schema->ToString() << \"\\nACTUAL:\\n\"\n+          << batch->schema()->ToString();\n     }\n \n     ASSERT_EQ(row_count, expected_rows());\n   }\n+  void TestScanProjectedNested(bool fine_grained_selection = false) {\n+    auto f32 = field(\"f32\", float32());\n+    auto f64 = field(\"f64\", float64());\n+    auto i32 = field(\"i32\", int32());\n+    auto i64 = field(\"i64\", int64());\n+    auto struct1 = field(\"struct1\", struct_({f32, i32}));\n+    auto struct2 = field(\"struct2\", struct_({f64, i64, struct1}));\n+    this->SetSchema({struct1, struct2, f32, f64, i32, i64});\n+    this->ProjectNested({\".struct1.f32\", \".struct2.struct1\", \".struct2.struct1.f32\"});\n+    this->SetFilter(equal(field_ref(FieldRef(\"struct2\", \"i64\")), literal(0)));\n+\n+    std::shared_ptr<Schema> expected_schema;\n+    if (fine_grained_selection) {\n+      // Some formats, like Parquet, let you pluck only a part of a complex type\n+      expected_schema = schema({\n+          field(\"struct1\", struct_({f32})),\n+          field(\"struct2\", struct_({i64, struct1})),\n+      });\n+    } else {\n+      expected_schema = schema({struct1, struct2});\n+    }\n\nReview comment:\n       (And, well, ARROW-1888 is a little easier with ARROW-7051\u2026)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-16T15:20:43.657+0000",
                    "updated": "2021-11-16T15:20:43.657+0000",
                    "started": "2021-11-16T15:20:43.656+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "682052",
                    "issueId": "13411063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411063/worklog/682062",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #11704:\nURL: https://github.com/apache/arrow/pull/11704#discussion_r750415524\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/test_util.h\n##########\n@@ -631,12 +646,92 @@ class FileFormatScanMixin : public FileFormatFixtureMixin<FormatHelper>,\n     for (auto maybe_batch : PhysicalBatches(fragment)) {\n       ASSERT_OK_AND_ASSIGN(auto batch, maybe_batch);\n       row_count += batch->num_rows();\n-      AssertSchemaEqual(*batch->schema(), *expected_schema,\n-                        /*check_metadata=*/false);\n+      ASSERT_THAT(\n+          batch->schema()->fields(),\n+          ::testing::UnorderedPointwise(PointeesEquals(), expected_schema->fields()))\n+          << \"EXPECTED:\\n\"\n+          << expected_schema->ToString() << \"\\nACTUAL:\\n\"\n+          << batch->schema()->ToString();\n     }\n \n     ASSERT_EQ(row_count, expected_rows());\n   }\n+  void TestScanProjectedNested(bool fine_grained_selection = false) {\n+    auto f32 = field(\"f32\", float32());\n+    auto f64 = field(\"f64\", float64());\n+    auto i32 = field(\"i32\", int32());\n+    auto i64 = field(\"i64\", int64());\n+    auto struct1 = field(\"struct1\", struct_({f32, i32}));\n+    auto struct2 = field(\"struct2\", struct_({f64, i64, struct1}));\n+    this->SetSchema({struct1, struct2, f32, f64, i32, i64});\n+    this->ProjectNested({\".struct1.f32\", \".struct2.struct1\", \".struct2.struct1.f32\"});\n+    this->SetFilter(equal(field_ref(FieldRef(\"struct2\", \"i64\")), literal(0)));\n+\n+    std::shared_ptr<Schema> expected_schema;\n+    if (fine_grained_selection) {\n+      // Some formats, like Parquet, let you pluck only a part of a complex type\n+      expected_schema = schema({\n+          field(\"struct1\", struct_({f32})),\n+          field(\"struct2\", struct_({i64, struct1})),\n+      });\n+    } else {\n+      expected_schema = schema({struct1, struct2});\n+    }\n\nReview comment:\n       Yes, projection is not inside the exec plan.  Also, projection doesn't occur until near the end of the exec plan (e.g. the filter step runs on the unprojected data).  So it is important for the scan to do its own internal projection to the dataset schema.\r\n   \r\n   If the blocker is ARROW-1888 I think it would be fine to implement this as-is with comments for a follow-up JIRA next to the test behavior we expect to change.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-16T15:52:32.437+0000",
                    "updated": "2021-11-16T15:52:32.437+0000",
                    "started": "2021-11-16T15:52:32.436+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "682062",
                    "issueId": "13411063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411063/worklog/682063",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on a change in pull request #11704:\nURL: https://github.com/apache/arrow/pull/11704#discussion_r750415524\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/test_util.h\n##########\n@@ -631,12 +646,92 @@ class FileFormatScanMixin : public FileFormatFixtureMixin<FormatHelper>,\n     for (auto maybe_batch : PhysicalBatches(fragment)) {\n       ASSERT_OK_AND_ASSIGN(auto batch, maybe_batch);\n       row_count += batch->num_rows();\n-      AssertSchemaEqual(*batch->schema(), *expected_schema,\n-                        /*check_metadata=*/false);\n+      ASSERT_THAT(\n+          batch->schema()->fields(),\n+          ::testing::UnorderedPointwise(PointeesEquals(), expected_schema->fields()))\n+          << \"EXPECTED:\\n\"\n+          << expected_schema->ToString() << \"\\nACTUAL:\\n\"\n+          << batch->schema()->ToString();\n     }\n \n     ASSERT_EQ(row_count, expected_rows());\n   }\n+  void TestScanProjectedNested(bool fine_grained_selection = false) {\n+    auto f32 = field(\"f32\", float32());\n+    auto f64 = field(\"f64\", float64());\n+    auto i32 = field(\"i32\", int32());\n+    auto i64 = field(\"i64\", int64());\n+    auto struct1 = field(\"struct1\", struct_({f32, i32}));\n+    auto struct2 = field(\"struct2\", struct_({f64, i64, struct1}));\n+    this->SetSchema({struct1, struct2, f32, f64, i32, i64});\n+    this->ProjectNested({\".struct1.f32\", \".struct2.struct1\", \".struct2.struct1.f32\"});\n+    this->SetFilter(equal(field_ref(FieldRef(\"struct2\", \"i64\")), literal(0)));\n+\n+    std::shared_ptr<Schema> expected_schema;\n+    if (fine_grained_selection) {\n+      // Some formats, like Parquet, let you pluck only a part of a complex type\n+      expected_schema = schema({\n+          field(\"struct1\", struct_({f32})),\n+          field(\"struct2\", struct_({i64, struct1})),\n+      });\n+    } else {\n+      expected_schema = schema({struct1, struct2});\n+    }\n\nReview comment:\n       Yes, projection is now inside the exec plan.  Also, projection doesn't occur until near the end of the exec plan (e.g. the filter step runs on the unprojected data).  So it is important for the scan to do its own internal projection to the dataset schema.\r\n   \r\n   If the blocker is ARROW-1888 I think it would be fine to implement this as-is with comments for a follow-up JIRA next to the test behavior we expect to change.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-16T15:52:45.256+0000",
                    "updated": "2021-11-16T15:52:45.256+0000",
                    "started": "2021-11-16T15:52:45.255+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "682063",
                    "issueId": "13411063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411063/worklog/682065",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11704:\nURL: https://github.com/apache/arrow/pull/11704#discussion_r750417849\n\n\n\n##########\nFile path: cpp/src/arrow/dataset/test_util.h\n##########\n@@ -631,12 +646,92 @@ class FileFormatScanMixin : public FileFormatFixtureMixin<FormatHelper>,\n     for (auto maybe_batch : PhysicalBatches(fragment)) {\n       ASSERT_OK_AND_ASSIGN(auto batch, maybe_batch);\n       row_count += batch->num_rows();\n-      AssertSchemaEqual(*batch->schema(), *expected_schema,\n-                        /*check_metadata=*/false);\n+      ASSERT_THAT(\n+          batch->schema()->fields(),\n+          ::testing::UnorderedPointwise(PointeesEquals(), expected_schema->fields()))\n+          << \"EXPECTED:\\n\"\n+          << expected_schema->ToString() << \"\\nACTUAL:\\n\"\n+          << batch->schema()->ToString();\n     }\n \n     ASSERT_EQ(row_count, expected_rows());\n   }\n+  void TestScanProjectedNested(bool fine_grained_selection = false) {\n+    auto f32 = field(\"f32\", float32());\n+    auto f64 = field(\"f64\", float64());\n+    auto i32 = field(\"i32\", int32());\n+    auto i64 = field(\"i64\", int64());\n+    auto struct1 = field(\"struct1\", struct_({f32, i32}));\n+    auto struct2 = field(\"struct2\", struct_({f64, i64, struct1}));\n+    this->SetSchema({struct1, struct2, f32, f64, i32, i64});\n+    this->ProjectNested({\".struct1.f32\", \".struct2.struct1\", \".struct2.struct1.f32\"});\n+    this->SetFilter(equal(field_ref(FieldRef(\"struct2\", \"i64\")), literal(0)));\n+\n+    std::shared_ptr<Schema> expected_schema;\n+    if (fine_grained_selection) {\n+      // Some formats, like Parquet, let you pluck only a part of a complex type\n+      expected_schema = schema({\n+          field(\"struct1\", struct_({f32})),\n+          field(\"struct2\", struct_({i64, struct1})),\n+      });\n+    } else {\n+      expected_schema = schema({struct1, struct2});\n+    }\n\nReview comment:\n       No tests will change (other than the one marked already), but as-is, you can't scan a Parquet dataset and project a nested field (since when we project from the specific schema to the dataset schema, we'll fail).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-16T15:54:41.059+0000",
                    "updated": "2021-11-16T15:54:41.059+0000",
                    "started": "2021-11-16T15:54:41.059+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "682065",
                    "issueId": "13411063"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 19800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1105a316[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e5d0239[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3e48ea14[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@78c26b2e[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7a8422fa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3702e272[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e63b6cc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@25133f35[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7e5b4a9f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5e6a2654[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@dec2e83[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@313a529c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 19800,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jan 18 14:08:13 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-01-18T14:08:13.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14658/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-11-10T12:58:14.000+0000",
        "updated": "2022-02-11T14:13:11.000+0000",
        "timeoriginalestimate": null,
        "description": "A follow-up to ARROW-13987.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 19800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add basic support for nested field refs in scanning",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13411063/comment/17477890",
                    "id": "17477890",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 11704\n[https://github.com/apache/arrow/pull/11704]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-01-18T14:08:13.496+0000",
                    "updated": "2022-01-18T14:08:13.496+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0wm2w:",
        "customfield_12314139": null
    }
}