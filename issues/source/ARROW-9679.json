{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13321701",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13321701",
    "key": "ARROW-9679",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9679/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 13,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13321701/worklog/469461",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove opened a new pull request #7936:\nURL: https://github.com/apache/arrow/pull/7936\n\n\n   This isn't quite there yet. I hope to wrap this up tomorrow.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-12T00:25:08.423+0000",
                    "updated": "2020-08-12T00:25:08.423+0000",
                    "started": "2020-08-12T00:25:08.423+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "469461",
                    "issueId": "13321701"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13321701/worklog/469464",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #7936:\nURL: https://github.com/apache/arrow/pull/7936#issuecomment-672393908\n\n\n   @alamb @jorgecarleitao @houqp fyi, since you've all been contributing to DataFusion lately\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-12T00:27:10.004+0000",
                    "updated": "2020-08-12T00:27:10.004+0000",
                    "started": "2020-08-12T00:27:10.004+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "469464",
                    "issueId": "13321701"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13321701/worklog/469472",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7936:\nURL: https://github.com/apache/arrow/pull/7936#issuecomment-672408880\n\n\n   https://issues.apache.org/jira/browse/ARROW-9679\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-12T00:48:57.031+0000",
                    "updated": "2020-08-12T00:48:57.031+0000",
                    "started": "2020-08-12T00:48:57.031+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "469472",
                    "issueId": "13321701"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13321701/worklog/469674",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #7936:\nURL: https://github.com/apache/arrow/pull/7936#discussion_r469206575\n\n\n\n##########\nFile path: rust/datafusion/src/execution/physical_plan/expressions.rs\n##########\n@@ -413,20 +413,7 @@ impl Max {\n \n impl AggregateExpr for Max {\n     fn data_type(&self, input_schema: &Schema) -> Result<DataType> {\n-        match self.expr.data_type(input_schema)? {\n\nReview comment:\n       I agree that the type of `Max` and `Min` should be the same as the input (as those functions are never going to overflow the value type of their input, the way `Sum` or `Avg` could. \r\n   \r\n   I actually think the change results in cleaner code too, which is a nice bonus\n\n##########\nFile path: rust/datafusion/src/execution/physical_plan/hash_aggregate.rs\n##########\n@@ -677,6 +532,152 @@ impl RecordBatchReader for HashAggregateIterator {\n     }\n }\n \n+/// Append a grouping expression value to a builder\n+macro_rules! append_group_value {\n+    ($BUILDER:expr, $BUILDER_TY:ident, $VALUE:expr) => {{\n+        let builder = $BUILDER\n+            .downcast_mut::<$BUILDER_TY>()\n+            .expect(\"failed to downcast group value builder to expected type\");\n+        builder.append_value($VALUE)?;\n+    }};\n+}\n+\n+/// Append an aggregate expression value to a builder\n+macro_rules! append_aggr_value {\n+    ($BUILDER:expr, $BUILDER_TY:ident, $VALUE:expr, $SCALAR_TY:ident) => {{\n\nReview comment:\n       I think the names `$BUILDER_TY` and `$SCALAR_TY` are easier to understand than the previous `$TY:ident, $TY2:ty` \ud83d\udc4d \n\n##########\nFile path: rust/datafusion/src/execution/physical_plan/hash_aggregate.rs\n##########\n@@ -677,6 +532,152 @@ impl RecordBatchReader for HashAggregateIterator {\n     }\n }\n \n+/// Append a grouping expression value to a builder\n+macro_rules! append_group_value {\n+    ($BUILDER:expr, $BUILDER_TY:ident, $VALUE:expr) => {{\n+        let builder = $BUILDER\n+            .downcast_mut::<$BUILDER_TY>()\n+            .expect(\"failed to downcast group value builder to expected type\");\n+        builder.append_value($VALUE)?;\n+    }};\n+}\n+\n+/// Append an aggregate expression value to a builder\n+macro_rules! append_aggr_value {\n+    ($BUILDER:expr, $BUILDER_TY:ident, $VALUE:expr, $SCALAR_TY:ident) => {{\n+        println!(\"downcast {:#?} to {:#?}\", $BUILDER, $VALUE);\n\nReview comment:\n       ```suggestion\r\n   ```\n\n##########\nFile path: rust/datafusion/src/execution/physical_plan/hash_aggregate.rs\n##########\n@@ -677,6 +532,152 @@ impl RecordBatchReader for HashAggregateIterator {\n     }\n }\n \n+/// Append a grouping expression value to a builder\n+macro_rules! append_group_value {\n+    ($BUILDER:expr, $BUILDER_TY:ident, $VALUE:expr) => {{\n+        let builder = $BUILDER\n+            .downcast_mut::<$BUILDER_TY>()\n+            .expect(\"failed to downcast group value builder to expected type\");\n+        builder.append_value($VALUE)?;\n+    }};\n+}\n+\n+/// Append an aggregate expression value to a builder\n+macro_rules! append_aggr_value {\n+    ($BUILDER:expr, $BUILDER_TY:ident, $VALUE:expr, $SCALAR_TY:ident) => {{\n+        println!(\"downcast {:#?} to {:#?}\", $BUILDER, $VALUE);\n+        let builder = $BUILDER\n+            .downcast_mut::<$BUILDER_TY>()\n+            .expect(\"failed to downcast aggregate value builder to expected type\");\n+        match $VALUE {\n+            Some(ScalarValue::$SCALAR_TY(n)) => builder.append_value(n)?,\n+            None => builder.append_null()?,\n+            Some(_) => panic!(),\n+        }\n+    }};\n+}\n+\n+/// Create a RecordBatch representing the accumulated results in a map\n+fn create_batch_from_map(\n+    map: &FnvHashMap<Vec<GroupByScalar>, Rc<AccumulatorSet>>,\n+    num_group_expr: usize,\n+    num_aggr_expr: usize,\n+    output_schema: &Schema,\n+) -> Result<RecordBatch> {\n+    let mut builders: Vec<Box<dyn ArrayBuilder>> = vec![];\n+    for i in 0..num_group_expr + num_aggr_expr {\n\nReview comment:\n       ```suggestion\r\n       for i in 0..output_schema.fields().len() {\r\n   ```\r\n   \r\n   This is just a style suggestion / defensive coding suggestion (as `output_schema.field(i)` is matched below).\r\n   \r\n   If you wanted to get all `rust`y / functional, you could also think about rewriting this as a map over fields. Something like this (untested):\r\n   \r\n   ```\r\n   let builders = output_schema\r\n     .fields()\r\n     .iter()\r\n     .map(|f| { match f.data_type ... // the match statement below})\r\n     .collect::<Result<Vec<_>>?;\r\n   ```\r\n   \n\n##########\nFile path: rust/datafusion/src/execution/physical_plan/hash_aggregate.rs\n##########\n@@ -677,6 +532,152 @@ impl RecordBatchReader for HashAggregateIterator {\n     }\n }\n \n+/// Append a grouping expression value to a builder\n+macro_rules! append_group_value {\n+    ($BUILDER:expr, $BUILDER_TY:ident, $VALUE:expr) => {{\n+        let builder = $BUILDER\n+            .downcast_mut::<$BUILDER_TY>()\n+            .expect(\"failed to downcast group value builder to expected type\");\n+        builder.append_value($VALUE)?;\n+    }};\n+}\n+\n+/// Append an aggregate expression value to a builder\n+macro_rules! append_aggr_value {\n+    ($BUILDER:expr, $BUILDER_TY:ident, $VALUE:expr, $SCALAR_TY:ident) => {{\n+        println!(\"downcast {:#?} to {:#?}\", $BUILDER, $VALUE);\n+        let builder = $BUILDER\n+            .downcast_mut::<$BUILDER_TY>()\n+            .expect(\"failed to downcast aggregate value builder to expected type\");\n+        match $VALUE {\n+            Some(ScalarValue::$SCALAR_TY(n)) => builder.append_value(n)?,\n+            None => builder.append_null()?,\n+            Some(_) => panic!(),\n+        }\n+    }};\n+}\n+\n+/// Create a RecordBatch representing the accumulated results in a map\n+fn create_batch_from_map(\n+    map: &FnvHashMap<Vec<GroupByScalar>, Rc<AccumulatorSet>>,\n+    num_group_expr: usize,\n+    num_aggr_expr: usize,\n+    output_schema: &Schema,\n+) -> Result<RecordBatch> {\n+    let mut builders: Vec<Box<dyn ArrayBuilder>> = vec![];\n+    for i in 0..num_group_expr + num_aggr_expr {\n+        let builder: Box<dyn ArrayBuilder> = match output_schema.field(i).data_type() {\n+            DataType::Int8 => Box::new(Int8Builder::new(map.len())),\n+            DataType::Int16 => Box::new(Int16Builder::new(map.len())),\n+            DataType::Int32 => Box::new(Int32Builder::new(map.len())),\n+            DataType::Int64 => Box::new(Int64Builder::new(map.len())),\n+            DataType::UInt8 => Box::new(UInt8Builder::new(map.len())),\n+            DataType::UInt16 => Box::new(UInt16Builder::new(map.len())),\n+            DataType::UInt32 => Box::new(UInt32Builder::new(map.len())),\n+            DataType::UInt64 => Box::new(UInt64Builder::new(map.len())),\n+            DataType::Float32 => Box::new(Float32Builder::new(map.len())),\n+            DataType::Float64 => Box::new(Float64Builder::new(map.len())),\n+            DataType::Utf8 => Box::new(StringBuilder::new(map.len())),\n+            _ => {\n+                return Err(ExecutionError::ExecutionError(\n+                    \"Unsupported group data type\".to_string(),\n+                ))\n+            }\n+        };\n+        builders.push(builder);\n+    }\n+\n+    // iterate over the map\n+    for (k, v) in map.iter() {\n+        // add group values to builders\n+        for i in 0..num_group_expr {\n+            let builder = builders[i].as_any_mut();\n+            match &k[i] {\n+                GroupByScalar::Int8(n) => append_group_value!(builder, Int8Builder, *n),\n+                GroupByScalar::Int16(n) => append_group_value!(builder, Int16Builder, *n),\n+                GroupByScalar::Int32(n) => append_group_value!(builder, Int32Builder, *n),\n+                GroupByScalar::Int64(n) => append_group_value!(builder, Int64Builder, *n),\n+                GroupByScalar::UInt8(n) => append_group_value!(builder, UInt8Builder, *n),\n+                GroupByScalar::UInt16(n) => {\n+                    append_group_value!(builder, UInt16Builder, *n)\n+                }\n+                GroupByScalar::UInt32(n) => {\n+                    append_group_value!(builder, UInt32Builder, *n)\n+                }\n+                GroupByScalar::UInt64(n) => {\n+                    append_group_value!(builder, UInt64Builder, *n)\n+                }\n+                GroupByScalar::Utf8(str) => {\n+                    append_group_value!(builder, StringBuilder, str)\n+                }\n+            }\n+        }\n+\n+        // add agggregate values to builders\n+        for i in 0..num_aggr_expr {\n+            let value = v[i].borrow().get_value()?;\n+            let index = num_group_expr + i;\n+            let builder = builders[index].as_any_mut();\n+            match output_schema.field(i).data_type() {\n+                DataType::Int8 => append_aggr_value!(builder, Int8Builder, value, Int8),\n+                DataType::Int16 => {\n+                    append_aggr_value!(builder, Int16Builder, value, Int16)\n+                }\n+                DataType::Int32 => {\n+                    append_aggr_value!(builder, Int32Builder, value, Int32)\n+                }\n+                DataType::Int64 => {\n+                    append_aggr_value!(builder, Int64Builder, value, Int64)\n+                }\n+                DataType::UInt8 => {\n+                    append_aggr_value!(builder, UInt8Builder, value, UInt8)\n+                }\n+                DataType::UInt16 => {\n+                    append_aggr_value!(builder, UInt16Builder, value, UInt16)\n+                }\n+                DataType::UInt32 => {\n+                    append_aggr_value!(builder, UInt32Builder, value, UInt32)\n+                }\n+                DataType::UInt64 => {\n+                    append_aggr_value!(builder, UInt64Builder, value, UInt64)\n+                }\n+                DataType::Float32 => {\n+                    append_aggr_value!(builder, Float32Builder, value, Float32)\n+                }\n+                DataType::Float64 => {\n+                    append_aggr_value!(builder, Float64Builder, value, Float64)\n+                }\n+                DataType::Utf8 => {\n\nReview comment:\n       I am sure you have a good reason, but I didn't see quite why this match arm can't use `append_aggr_value!` as well\n\n##########\nFile path: rust/datafusion/src/execution/physical_plan/hash_aggregate.rs\n##########\n@@ -677,6 +532,152 @@ impl RecordBatchReader for HashAggregateIterator {\n     }\n }\n \n+/// Append a grouping expression value to a builder\n+macro_rules! append_group_value {\n+    ($BUILDER:expr, $BUILDER_TY:ident, $VALUE:expr) => {{\n+        let builder = $BUILDER\n+            .downcast_mut::<$BUILDER_TY>()\n+            .expect(\"failed to downcast group value builder to expected type\");\n+        builder.append_value($VALUE)?;\n+    }};\n+}\n+\n+/// Append an aggregate expression value to a builder\n+macro_rules! append_aggr_value {\n+    ($BUILDER:expr, $BUILDER_TY:ident, $VALUE:expr, $SCALAR_TY:ident) => {{\n+        println!(\"downcast {:#?} to {:#?}\", $BUILDER, $VALUE);\n+        let builder = $BUILDER\n+            .downcast_mut::<$BUILDER_TY>()\n+            .expect(\"failed to downcast aggregate value builder to expected type\");\n+        match $VALUE {\n+            Some(ScalarValue::$SCALAR_TY(n)) => builder.append_value(n)?,\n+            None => builder.append_null()?,\n+            Some(_) => panic!(),\n\nReview comment:\n       ```suggestion\r\n               Some(_) => Err(ExecutionError::ExecutionError(\"unexpected type when creating aggregate value\".to_string()),\r\n   ```\n\n##########\nFile path: rust/datafusion/src/execution/physical_plan/merge.rs\n##########\n@@ -81,11 +81,13 @@ impl Partition for MergePartition {\n         // combine the results from each thread\n         let mut combined_results: Vec<Arc<RecordBatch>> = vec![];\n         for thread in threads {\n-            let join = thread.join().expect(\"Failed to join thread\");\n-            let result = join?;\n-            result\n-                .iter()\n-                .for_each(|batch| combined_results.push(Arc::new(batch.clone())));\n+            match thread.join() {\n+                Ok(join) => {\n+                    join?.iter()\n+                        .for_each(|batch| combined_results.push(Arc::new(batch.clone())));\n+                }\n+                Err(e) => return Err(ExecutionError::General(format!(\"{:?}\", e)))\n\nReview comment:\n       This is another good change (don't panic if there is a thread error while merging) -- maybe worth a mention in the PR title (or maybe even its own PR).\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-12T12:33:34.739+0000",
                    "updated": "2020-08-12T12:33:34.739+0000",
                    "started": "2020-08-12T12:33:34.739+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "469674",
                    "issueId": "13321701"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13321701/worklog/469725",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #7936:\nURL: https://github.com/apache/arrow/pull/7936#discussion_r469292982\n\n\n\n##########\nFile path: rust/datafusion/src/execution/physical_plan/hash_aggregate.rs\n##########\n@@ -677,6 +532,152 @@ impl RecordBatchReader for HashAggregateIterator {\n     }\n }\n \n+/// Append a grouping expression value to a builder\n+macro_rules! append_group_value {\n+    ($BUILDER:expr, $BUILDER_TY:ident, $VALUE:expr) => {{\n+        let builder = $BUILDER\n+            .downcast_mut::<$BUILDER_TY>()\n+            .expect(\"failed to downcast group value builder to expected type\");\n+        builder.append_value($VALUE)?;\n+    }};\n+}\n+\n+/// Append an aggregate expression value to a builder\n+macro_rules! append_aggr_value {\n+    ($BUILDER:expr, $BUILDER_TY:ident, $VALUE:expr, $SCALAR_TY:ident) => {{\n+        println!(\"downcast {:#?} to {:#?}\", $BUILDER, $VALUE);\n+        let builder = $BUILDER\n+            .downcast_mut::<$BUILDER_TY>()\n+            .expect(\"failed to downcast aggregate value builder to expected type\");\n+        match $VALUE {\n+            Some(ScalarValue::$SCALAR_TY(n)) => builder.append_value(n)?,\n+            None => builder.append_null()?,\n+            Some(_) => panic!(),\n+        }\n+    }};\n+}\n+\n+/// Create a RecordBatch representing the accumulated results in a map\n+fn create_batch_from_map(\n+    map: &FnvHashMap<Vec<GroupByScalar>, Rc<AccumulatorSet>>,\n+    num_group_expr: usize,\n+    num_aggr_expr: usize,\n+    output_schema: &Schema,\n+) -> Result<RecordBatch> {\n+    let mut builders: Vec<Box<dyn ArrayBuilder>> = vec![];\n+    for i in 0..num_group_expr + num_aggr_expr {\n+        let builder: Box<dyn ArrayBuilder> = match output_schema.field(i).data_type() {\n+            DataType::Int8 => Box::new(Int8Builder::new(map.len())),\n+            DataType::Int16 => Box::new(Int16Builder::new(map.len())),\n+            DataType::Int32 => Box::new(Int32Builder::new(map.len())),\n+            DataType::Int64 => Box::new(Int64Builder::new(map.len())),\n+            DataType::UInt8 => Box::new(UInt8Builder::new(map.len())),\n+            DataType::UInt16 => Box::new(UInt16Builder::new(map.len())),\n+            DataType::UInt32 => Box::new(UInt32Builder::new(map.len())),\n+            DataType::UInt64 => Box::new(UInt64Builder::new(map.len())),\n+            DataType::Float32 => Box::new(Float32Builder::new(map.len())),\n+            DataType::Float64 => Box::new(Float64Builder::new(map.len())),\n+            DataType::Utf8 => Box::new(StringBuilder::new(map.len())),\n+            _ => {\n+                return Err(ExecutionError::ExecutionError(\n+                    \"Unsupported group data type\".to_string(),\n+                ))\n+            }\n+        };\n+        builders.push(builder);\n+    }\n+\n+    // iterate over the map\n+    for (k, v) in map.iter() {\n+        // add group values to builders\n+        for i in 0..num_group_expr {\n+            let builder = builders[i].as_any_mut();\n+            match &k[i] {\n+                GroupByScalar::Int8(n) => append_group_value!(builder, Int8Builder, *n),\n+                GroupByScalar::Int16(n) => append_group_value!(builder, Int16Builder, *n),\n+                GroupByScalar::Int32(n) => append_group_value!(builder, Int32Builder, *n),\n+                GroupByScalar::Int64(n) => append_group_value!(builder, Int64Builder, *n),\n+                GroupByScalar::UInt8(n) => append_group_value!(builder, UInt8Builder, *n),\n+                GroupByScalar::UInt16(n) => {\n+                    append_group_value!(builder, UInt16Builder, *n)\n+                }\n+                GroupByScalar::UInt32(n) => {\n+                    append_group_value!(builder, UInt32Builder, *n)\n+                }\n+                GroupByScalar::UInt64(n) => {\n+                    append_group_value!(builder, UInt64Builder, *n)\n+                }\n+                GroupByScalar::Utf8(str) => {\n+                    append_group_value!(builder, StringBuilder, str)\n+                }\n+            }\n+        }\n+\n+        // add agggregate values to builders\n+        for i in 0..num_aggr_expr {\n+            let value = v[i].borrow().get_value()?;\n+            let index = num_group_expr + i;\n+            let builder = builders[index].as_any_mut();\n+            match output_schema.field(i).data_type() {\n+                DataType::Int8 => append_aggr_value!(builder, Int8Builder, value, Int8),\n+                DataType::Int16 => {\n+                    append_aggr_value!(builder, Int16Builder, value, Int16)\n+                }\n+                DataType::Int32 => {\n+                    append_aggr_value!(builder, Int32Builder, value, Int32)\n+                }\n+                DataType::Int64 => {\n+                    append_aggr_value!(builder, Int64Builder, value, Int64)\n+                }\n+                DataType::UInt8 => {\n+                    append_aggr_value!(builder, UInt8Builder, value, UInt8)\n+                }\n+                DataType::UInt16 => {\n+                    append_aggr_value!(builder, UInt16Builder, value, UInt16)\n+                }\n+                DataType::UInt32 => {\n+                    append_aggr_value!(builder, UInt32Builder, value, UInt32)\n+                }\n+                DataType::UInt64 => {\n+                    append_aggr_value!(builder, UInt64Builder, value, UInt64)\n+                }\n+                DataType::Float32 => {\n+                    append_aggr_value!(builder, Float32Builder, value, Float32)\n+                }\n+                DataType::Float64 => {\n+                    append_aggr_value!(builder, Float64Builder, value, Float64)\n+                }\n+                DataType::Utf8 => {\n\nReview comment:\n       The issue here was that `ScalarValue::Utf8` contains `String` and the builder wants `&str`. In all other cases the scalar and builder types are the same.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-12T14:16:51.505+0000",
                    "updated": "2020-08-12T14:16:51.505+0000",
                    "started": "2020-08-12T14:16:51.505+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "469725",
                    "issueId": "13321701"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13321701/worklog/469726",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #7936:\nURL: https://github.com/apache/arrow/pull/7936#issuecomment-672899284\n\n\n   Thanks for the review @alamb. I've addressed the formatting, removed debug printlns, and tests are now passing.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-12T14:18:04.835+0000",
                    "updated": "2020-08-12T14:18:04.835+0000",
                    "started": "2020-08-12T14:18:04.835+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "469726",
                    "issueId": "13321701"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13321701/worklog/469727",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #7936:\nURL: https://github.com/apache/arrow/pull/7936#issuecomment-672899448\n\n\n   @nevi-me @paddyhoran PTAL if you have time.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-12T14:18:17.890+0000",
                    "updated": "2020-08-12T14:18:17.890+0000",
                    "started": "2020-08-12T14:18:17.890+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "469727",
                    "issueId": "13321701"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13321701/worklog/469728",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #7936:\nURL: https://github.com/apache/arrow/pull/7936#discussion_r469294746\n\n\n\n##########\nFile path: rust/datafusion/src/execution/physical_plan/hash_aggregate.rs\n##########\n@@ -677,6 +532,152 @@ impl RecordBatchReader for HashAggregateIterator {\n     }\n }\n \n+/// Append a grouping expression value to a builder\n+macro_rules! append_group_value {\n+    ($BUILDER:expr, $BUILDER_TY:ident, $VALUE:expr) => {{\n+        let builder = $BUILDER\n+            .downcast_mut::<$BUILDER_TY>()\n+            .expect(\"failed to downcast group value builder to expected type\");\n+        builder.append_value($VALUE)?;\n+    }};\n+}\n+\n+/// Append an aggregate expression value to a builder\n+macro_rules! append_aggr_value {\n+    ($BUILDER:expr, $BUILDER_TY:ident, $VALUE:expr, $SCALAR_TY:ident) => {{\n+        println!(\"downcast {:#?} to {:#?}\", $BUILDER, $VALUE);\n+        let builder = $BUILDER\n+            .downcast_mut::<$BUILDER_TY>()\n+            .expect(\"failed to downcast aggregate value builder to expected type\");\n+        match $VALUE {\n+            Some(ScalarValue::$SCALAR_TY(n)) => builder.append_value(n)?,\n+            None => builder.append_null()?,\n+            Some(_) => panic!(),\n+        }\n+    }};\n+}\n+\n+/// Create a RecordBatch representing the accumulated results in a map\n+fn create_batch_from_map(\n+    map: &FnvHashMap<Vec<GroupByScalar>, Rc<AccumulatorSet>>,\n+    num_group_expr: usize,\n+    num_aggr_expr: usize,\n+    output_schema: &Schema,\n+) -> Result<RecordBatch> {\n+    let mut builders: Vec<Box<dyn ArrayBuilder>> = vec![];\n+    for i in 0..num_group_expr + num_aggr_expr {\n+        let builder: Box<dyn ArrayBuilder> = match output_schema.field(i).data_type() {\n+            DataType::Int8 => Box::new(Int8Builder::new(map.len())),\n+            DataType::Int16 => Box::new(Int16Builder::new(map.len())),\n+            DataType::Int32 => Box::new(Int32Builder::new(map.len())),\n+            DataType::Int64 => Box::new(Int64Builder::new(map.len())),\n+            DataType::UInt8 => Box::new(UInt8Builder::new(map.len())),\n+            DataType::UInt16 => Box::new(UInt16Builder::new(map.len())),\n+            DataType::UInt32 => Box::new(UInt32Builder::new(map.len())),\n+            DataType::UInt64 => Box::new(UInt64Builder::new(map.len())),\n+            DataType::Float32 => Box::new(Float32Builder::new(map.len())),\n+            DataType::Float64 => Box::new(Float64Builder::new(map.len())),\n+            DataType::Utf8 => Box::new(StringBuilder::new(map.len())),\n+            _ => {\n+                return Err(ExecutionError::ExecutionError(\n+                    \"Unsupported group data type\".to_string(),\n+                ))\n+            }\n+        };\n+        builders.push(builder);\n+    }\n+\n+    // iterate over the map\n+    for (k, v) in map.iter() {\n+        // add group values to builders\n+        for i in 0..num_group_expr {\n+            let builder = builders[i].as_any_mut();\n+            match &k[i] {\n+                GroupByScalar::Int8(n) => append_group_value!(builder, Int8Builder, *n),\n+                GroupByScalar::Int16(n) => append_group_value!(builder, Int16Builder, *n),\n+                GroupByScalar::Int32(n) => append_group_value!(builder, Int32Builder, *n),\n+                GroupByScalar::Int64(n) => append_group_value!(builder, Int64Builder, *n),\n+                GroupByScalar::UInt8(n) => append_group_value!(builder, UInt8Builder, *n),\n+                GroupByScalar::UInt16(n) => {\n+                    append_group_value!(builder, UInt16Builder, *n)\n+                }\n+                GroupByScalar::UInt32(n) => {\n+                    append_group_value!(builder, UInt32Builder, *n)\n+                }\n+                GroupByScalar::UInt64(n) => {\n+                    append_group_value!(builder, UInt64Builder, *n)\n+                }\n+                GroupByScalar::Utf8(str) => {\n+                    append_group_value!(builder, StringBuilder, str)\n+                }\n+            }\n+        }\n+\n+        // add agggregate values to builders\n+        for i in 0..num_aggr_expr {\n+            let value = v[i].borrow().get_value()?;\n+            let index = num_group_expr + i;\n+            let builder = builders[index].as_any_mut();\n+            match output_schema.field(i).data_type() {\n+                DataType::Int8 => append_aggr_value!(builder, Int8Builder, value, Int8),\n+                DataType::Int16 => {\n+                    append_aggr_value!(builder, Int16Builder, value, Int16)\n+                }\n+                DataType::Int32 => {\n+                    append_aggr_value!(builder, Int32Builder, value, Int32)\n+                }\n+                DataType::Int64 => {\n+                    append_aggr_value!(builder, Int64Builder, value, Int64)\n+                }\n+                DataType::UInt8 => {\n+                    append_aggr_value!(builder, UInt8Builder, value, UInt8)\n+                }\n+                DataType::UInt16 => {\n+                    append_aggr_value!(builder, UInt16Builder, value, UInt16)\n+                }\n+                DataType::UInt32 => {\n+                    append_aggr_value!(builder, UInt32Builder, value, UInt32)\n+                }\n+                DataType::UInt64 => {\n+                    append_aggr_value!(builder, UInt64Builder, value, UInt64)\n+                }\n+                DataType::Float32 => {\n+                    append_aggr_value!(builder, Float32Builder, value, Float32)\n+                }\n+                DataType::Float64 => {\n+                    append_aggr_value!(builder, Float64Builder, value, Float64)\n+                }\n+                DataType::Utf8 => {\n\nReview comment:\n       that might be worth adding in a comment so future readers would not have to wonder. \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-12T14:19:18.020+0000",
                    "updated": "2020-08-12T14:19:18.020+0000",
                    "started": "2020-08-12T14:19:18.020+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "469728",
                    "issueId": "13321701"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13321701/worklog/469730",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #7936:\nURL: https://github.com/apache/arrow/pull/7936#discussion_r469297203\n\n\n\n##########\nFile path: rust/datafusion/src/execution/physical_plan/hash_aggregate.rs\n##########\n@@ -677,6 +532,152 @@ impl RecordBatchReader for HashAggregateIterator {\n     }\n }\n \n+/// Append a grouping expression value to a builder\n+macro_rules! append_group_value {\n+    ($BUILDER:expr, $BUILDER_TY:ident, $VALUE:expr) => {{\n+        let builder = $BUILDER\n+            .downcast_mut::<$BUILDER_TY>()\n+            .expect(\"failed to downcast group value builder to expected type\");\n+        builder.append_value($VALUE)?;\n+    }};\n+}\n+\n+/// Append an aggregate expression value to a builder\n+macro_rules! append_aggr_value {\n+    ($BUILDER:expr, $BUILDER_TY:ident, $VALUE:expr, $SCALAR_TY:ident) => {{\n+        println!(\"downcast {:#?} to {:#?}\", $BUILDER, $VALUE);\n+        let builder = $BUILDER\n+            .downcast_mut::<$BUILDER_TY>()\n+            .expect(\"failed to downcast aggregate value builder to expected type\");\n+        match $VALUE {\n+            Some(ScalarValue::$SCALAR_TY(n)) => builder.append_value(n)?,\n+            None => builder.append_null()?,\n+            Some(_) => panic!(),\n\nReview comment:\n       Thanks. Fixed.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-12T14:22:38.553+0000",
                    "updated": "2020-08-12T14:22:38.553+0000",
                    "started": "2020-08-12T14:22:38.553+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "469730",
                    "issueId": "13321701"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13321701/worklog/469747",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #7936:\nURL: https://github.com/apache/arrow/pull/7936#discussion_r469309756\n\n\n\n##########\nFile path: rust/datafusion/src/execution/physical_plan/hash_aggregate.rs\n##########\n@@ -677,6 +532,152 @@ impl RecordBatchReader for HashAggregateIterator {\n     }\n }\n \n+/// Append a grouping expression value to a builder\n+macro_rules! append_group_value {\n+    ($BUILDER:expr, $BUILDER_TY:ident, $VALUE:expr) => {{\n+        let builder = $BUILDER\n+            .downcast_mut::<$BUILDER_TY>()\n+            .expect(\"failed to downcast group value builder to expected type\");\n+        builder.append_value($VALUE)?;\n+    }};\n+}\n+\n+/// Append an aggregate expression value to a builder\n+macro_rules! append_aggr_value {\n+    ($BUILDER:expr, $BUILDER_TY:ident, $VALUE:expr, $SCALAR_TY:ident) => {{\n+        println!(\"downcast {:#?} to {:#?}\", $BUILDER, $VALUE);\n+        let builder = $BUILDER\n+            .downcast_mut::<$BUILDER_TY>()\n+            .expect(\"failed to downcast aggregate value builder to expected type\");\n+        match $VALUE {\n+            Some(ScalarValue::$SCALAR_TY(n)) => builder.append_value(n)?,\n+            None => builder.append_null()?,\n+            Some(_) => panic!(),\n+        }\n+    }};\n+}\n+\n+/// Create a RecordBatch representing the accumulated results in a map\n+fn create_batch_from_map(\n+    map: &FnvHashMap<Vec<GroupByScalar>, Rc<AccumulatorSet>>,\n+    num_group_expr: usize,\n+    num_aggr_expr: usize,\n+    output_schema: &Schema,\n+) -> Result<RecordBatch> {\n+    let mut builders: Vec<Box<dyn ArrayBuilder>> = vec![];\n+    for i in 0..num_group_expr + num_aggr_expr {\n+        let builder: Box<dyn ArrayBuilder> = match output_schema.field(i).data_type() {\n+            DataType::Int8 => Box::new(Int8Builder::new(map.len())),\n+            DataType::Int16 => Box::new(Int16Builder::new(map.len())),\n+            DataType::Int32 => Box::new(Int32Builder::new(map.len())),\n+            DataType::Int64 => Box::new(Int64Builder::new(map.len())),\n+            DataType::UInt8 => Box::new(UInt8Builder::new(map.len())),\n+            DataType::UInt16 => Box::new(UInt16Builder::new(map.len())),\n+            DataType::UInt32 => Box::new(UInt32Builder::new(map.len())),\n+            DataType::UInt64 => Box::new(UInt64Builder::new(map.len())),\n+            DataType::Float32 => Box::new(Float32Builder::new(map.len())),\n+            DataType::Float64 => Box::new(Float64Builder::new(map.len())),\n+            DataType::Utf8 => Box::new(StringBuilder::new(map.len())),\n+            _ => {\n+                return Err(ExecutionError::ExecutionError(\n+                    \"Unsupported group data type\".to_string(),\n+                ))\n+            }\n+        };\n+        builders.push(builder);\n+    }\n+\n+    // iterate over the map\n+    for (k, v) in map.iter() {\n+        // add group values to builders\n+        for i in 0..num_group_expr {\n+            let builder = builders[i].as_any_mut();\n+            match &k[i] {\n+                GroupByScalar::Int8(n) => append_group_value!(builder, Int8Builder, *n),\n+                GroupByScalar::Int16(n) => append_group_value!(builder, Int16Builder, *n),\n+                GroupByScalar::Int32(n) => append_group_value!(builder, Int32Builder, *n),\n+                GroupByScalar::Int64(n) => append_group_value!(builder, Int64Builder, *n),\n+                GroupByScalar::UInt8(n) => append_group_value!(builder, UInt8Builder, *n),\n+                GroupByScalar::UInt16(n) => {\n+                    append_group_value!(builder, UInt16Builder, *n)\n+                }\n+                GroupByScalar::UInt32(n) => {\n+                    append_group_value!(builder, UInt32Builder, *n)\n+                }\n+                GroupByScalar::UInt64(n) => {\n+                    append_group_value!(builder, UInt64Builder, *n)\n+                }\n+                GroupByScalar::Utf8(str) => {\n+                    append_group_value!(builder, StringBuilder, str)\n+                }\n+            }\n+        }\n+\n+        // add agggregate values to builders\n+        for i in 0..num_aggr_expr {\n+            let value = v[i].borrow().get_value()?;\n+            let index = num_group_expr + i;\n+            let builder = builders[index].as_any_mut();\n+            match output_schema.field(i).data_type() {\n+                DataType::Int8 => append_aggr_value!(builder, Int8Builder, value, Int8),\n+                DataType::Int16 => {\n+                    append_aggr_value!(builder, Int16Builder, value, Int16)\n+                }\n+                DataType::Int32 => {\n+                    append_aggr_value!(builder, Int32Builder, value, Int32)\n+                }\n+                DataType::Int64 => {\n+                    append_aggr_value!(builder, Int64Builder, value, Int64)\n+                }\n+                DataType::UInt8 => {\n+                    append_aggr_value!(builder, UInt8Builder, value, UInt8)\n+                }\n+                DataType::UInt16 => {\n+                    append_aggr_value!(builder, UInt16Builder, value, UInt16)\n+                }\n+                DataType::UInt32 => {\n+                    append_aggr_value!(builder, UInt32Builder, value, UInt32)\n+                }\n+                DataType::UInt64 => {\n+                    append_aggr_value!(builder, UInt64Builder, value, UInt64)\n+                }\n+                DataType::Float32 => {\n+                    append_aggr_value!(builder, Float32Builder, value, Float32)\n+                }\n+                DataType::Float64 => {\n+                    append_aggr_value!(builder, Float64Builder, value, Float64)\n+                }\n+                DataType::Utf8 => {\n\nReview comment:\n       Done.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-12T14:39:41.566+0000",
                    "updated": "2020-08-12T14:39:41.566+0000",
                    "started": "2020-08-12T14:39:41.566+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "469747",
                    "issueId": "13321701"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13321701/worklog/469755",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #7936:\nURL: https://github.com/apache/arrow/pull/7936#discussion_r469332693\n\n\n\n##########\nFile path: rust/datafusion/src/execution/physical_plan/hash_aggregate.rs\n##########\n@@ -677,6 +532,152 @@ impl RecordBatchReader for HashAggregateIterator {\n     }\n }\n \n+/// Append a grouping expression value to a builder\n+macro_rules! append_group_value {\n+    ($BUILDER:expr, $BUILDER_TY:ident, $VALUE:expr) => {{\n+        let builder = $BUILDER\n+            .downcast_mut::<$BUILDER_TY>()\n+            .expect(\"failed to downcast group value builder to expected type\");\n+        builder.append_value($VALUE)?;\n+    }};\n+}\n+\n+/// Append an aggregate expression value to a builder\n+macro_rules! append_aggr_value {\n+    ($BUILDER:expr, $BUILDER_TY:ident, $VALUE:expr, $SCALAR_TY:ident) => {{\n+        println!(\"downcast {:#?} to {:#?}\", $BUILDER, $VALUE);\n+        let builder = $BUILDER\n+            .downcast_mut::<$BUILDER_TY>()\n+            .expect(\"failed to downcast aggregate value builder to expected type\");\n+        match $VALUE {\n+            Some(ScalarValue::$SCALAR_TY(n)) => builder.append_value(n)?,\n+            None => builder.append_null()?,\n+            Some(_) => panic!(),\n+        }\n+    }};\n+}\n+\n+/// Create a RecordBatch representing the accumulated results in a map\n+fn create_batch_from_map(\n+    map: &FnvHashMap<Vec<GroupByScalar>, Rc<AccumulatorSet>>,\n+    num_group_expr: usize,\n+    num_aggr_expr: usize,\n+    output_schema: &Schema,\n+) -> Result<RecordBatch> {\n+    let mut builders: Vec<Box<dyn ArrayBuilder>> = vec![];\n+    for i in 0..num_group_expr + num_aggr_expr {\n\nReview comment:\n       I took a quick look at doing this but I needed an explicit assignment still otherwise it complained about the match arms returning different types, so it ended up not being much cleaner really. However, I did change it to use `for data_type in &output_types` which is a little cleaner.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-12T15:10:38.839+0000",
                    "updated": "2020-08-12T15:10:38.839+0000",
                    "started": "2020-08-12T15:10:38.839+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "469755",
                    "issueId": "13321701"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13321701/worklog/469908",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #7936:\nURL: https://github.com/apache/arrow/pull/7936#issuecomment-673072087\n\n\n   LGTM! Thanks a lot for this, nice cleanup! I closed #7687 in favor of this one as the overall is too high to salvage.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-12T19:41:51.137+0000",
                    "updated": "2020-08-12T19:41:51.137+0000",
                    "started": "2020-08-12T19:41:51.136+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "469908",
                    "issueId": "13321701"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13321701/worklog/469912",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove closed pull request #7936:\nURL: https://github.com/apache/arrow/pull/7936\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-12T19:52:44.413+0000",
                    "updated": "2020-08-12T19:52:44.413+0000",
                    "started": "2020-08-12T19:52:44.413+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "469912",
                    "issueId": "13321701"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 7800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@58c7a252[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@ccdb5b9[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3d1be8fb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5c1ae29c[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@726b8aa2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@72647f85[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@105a1d02[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1b5f1397[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@354fb4c4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@64867dbf[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@24f4ce20[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@47d4b282[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7800,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Aug 12 19:52:39 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-08-12T19:52:39.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9679/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-08-09T16:50:15.000+0000",
        "updated": "2020-08-12T19:52:45.000+0000",
        "timeoriginalestimate": null,
        "description": "The current HashAggregate implementation iterates over the final hash map once for each grouping expression and once for each aggregate expression. This is inefficient and possibly dangerous depending on the ordering gaurantees made by the hash map implementation.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] HashAggregate walks map many times building final batch",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13321701/comment/17176562",
                    "id": "17176562",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 7936\n[https://github.com/apache/arrow/pull/7936]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-08-12T19:52:39.424+0000",
                    "updated": "2020-08-12T19:52:39.424+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0hllk:",
        "customfield_12314139": null
    }
}