{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13351111",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13351111",
    "key": "ARROW-11188",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=ovrweb",
            "name": "ovrweb",
            "key": "ovrweb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Patsura Dmitry",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=ovrweb",
            "name": "ovrweb",
            "key": "ovrweb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Patsura Dmitry",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=ovrweb",
            "name": "ovrweb",
            "key": "ovrweb",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Patsura Dmitry",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 15000,
            "total": 15000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11188/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 25,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13351111/worklog/533083",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ovr opened a new pull request #9139:\nURL: https://github.com/apache/arrow/pull/9139\n\n\n   \u2026(md5, sha)\r\n   \r\n   Hello!\r\n   \r\n   I am still working on it, It's DRAFT because I am interested to indicate that I am working on it.\r\n   \r\n   Plan to support:\r\n   \r\n   - [ ] MD5\r\n   - [ ] SHA224\r\n   - [ ] SHA256\r\n   - [ ] SHA384\r\n   - [ ] SHA512\r\n   \r\n   Thanks\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-08T15:53:31.895+0000",
                    "updated": "2021-01-08T15:53:31.895+0000",
                    "started": "2021-01-08T15:53:31.895+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533083",
                    "issueId": "13351111"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13351111/worklog/533134",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9139:\nURL: https://github.com/apache/arrow/pull/9139#issuecomment-756887914\n\n\n   https://issues.apache.org/jira/browse/ARROW-11188\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-08T17:14:35.610+0000",
                    "updated": "2021-01-08T17:14:35.610+0000",
                    "started": "2021-01-08T17:14:35.610+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533134",
                    "issueId": "13351111"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13351111/worklog/533187",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #9139:\nURL: https://github.com/apache/arrow/pull/9139#issuecomment-756952094\n\n\n   This PR probably needs to be rebased to pick up the fix for #9138 FYI\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-08T19:30:50.185+0000",
                    "updated": "2021-01-08T19:30:50.185+0000",
                    "started": "2021-01-08T19:30:50.184+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533187",
                    "issueId": "13351111"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13351111/worklog/533193",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ovr commented on pull request #9139:\nURL: https://github.com/apache/arrow/pull/9139#issuecomment-756956692\n\n\n   Thank you @alamb for notice \ud83d\udc4d \r\n   \r\n    I've done with PR, marked it as ready for review and awaiting review from DF's team.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-08T19:41:27.535+0000",
                    "updated": "2021-01-08T19:41:27.535+0000",
                    "started": "2021-01-08T19:41:27.534+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533193",
                    "issueId": "13351111"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13351111/worklog/533428",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9139:\nURL: https://github.com/apache/arrow/pull/9139#discussion_r554389768\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/crypto_expressions.rs\n##########\n@@ -0,0 +1,114 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Crypto expressions\n+\n+use md5::Md5;\n+use sha2::{\n+    digest::Output as SHA2DigestOutput, Digest as SHA2Digest, Sha224, Sha256, Sha384,\n+    Sha512,\n+};\n+\n+use crate::error::{DataFusionError, Result};\n+use arrow::array::{\n+    ArrayRef, BinaryBuilder, GenericBinaryArray, GenericStringArray,\n+    StringOffsetSizeTrait,\n+};\n+\n+fn md5_process(input: &str) -> String {\n+    let mut digest = Md5::default();\n+    digest.update(&input);\n+\n+    let mut result = String::new();\n+\n+    for byte in &digest.finalize() {\n+        result.push_str(&format!(\"{:02x}\", byte));\n+    }\n+\n+    result\n+}\n+\n+// It's not possible to return &[u8], because trait in trait without short lifetime\n+fn sha_process<D: SHA2Digest + Default>(input: &str) -> SHA2DigestOutput<D> {\n+    let mut digest = D::default();\n+    digest.update(&input);\n+\n+    digest.finalize()\n+}\n+\n+macro_rules! crypto_unary_string_function {\n+    ($NAME:ident, $FUNC:expr) => {\n+        /// crypto function that accepts Utf8 or LargeUtf8 and returns Utf8 string\n+        pub fn $NAME<T: StringOffsetSizeTrait>(\n+            args: &[ArrayRef],\n+        ) -> Result<GenericStringArray<i32>> {\n+            if args.len() != 1 {\n+                return Err(DataFusionError::Internal(format!(\n+                    \"{:?} args were supplied but {} takes exactly one argument\",\n+                    args.len(),\n+                    String::from(stringify!($NAME)),\n+                )));\n+            }\n+\n+            let array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            // first map is the iterator, second is for the `Option<_>`\n+            Ok(array.iter().map(|x| x.map(|x| $FUNC(x))).collect())\n+        }\n+    };\n+}\n+\n+macro_rules! crypto_unary_binary_function {\n+    ($NAME:ident, $FUNC:expr) => {\n+        /// crypto function that accepts Utf8 or LargeUtf8 and returns Binary\n+        pub fn $NAME<T: StringOffsetSizeTrait>(\n+            args: &[ArrayRef],\n+        ) -> Result<GenericBinaryArray<i32>> {\n+            if args.len() != 1 {\n+                return Err(DataFusionError::Internal(format!(\n+                    \"{:?} args were supplied but {} takes exactly one argument\",\n+                    args.len(),\n+                    String::from(stringify!($NAME)),\n+                )));\n+            }\n+\n+            let array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            let mut builder = BinaryBuilder::new(args.len());\n+\n+            for value in array.iter() {\n+                builder\n+                    .append_value($FUNC(value.unwrap()).as_slice())\n+                    .unwrap();\n+            }\n+\n+            Ok(builder.finish())\n+        }\n+    };\n+}\n+\n+crypto_unary_string_function!(md5, md5_process);\n\nReview comment:\n       Aren't these always of a fixed size (e.g. `128-bit` for md5)?\n\n##########\nFile path: rust/datafusion/src/physical_plan/crypto_expressions.rs\n##########\n@@ -0,0 +1,114 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Crypto expressions\n+\n+use md5::Md5;\n+use sha2::{\n+    digest::Output as SHA2DigestOutput, Digest as SHA2Digest, Sha224, Sha256, Sha384,\n+    Sha512,\n+};\n+\n+use crate::error::{DataFusionError, Result};\n+use arrow::array::{\n+    ArrayRef, BinaryBuilder, GenericBinaryArray, GenericStringArray,\n+    StringOffsetSizeTrait,\n+};\n+\n+fn md5_process(input: &str) -> String {\n+    let mut digest = Md5::default();\n+    digest.update(&input);\n+\n+    let mut result = String::new();\n+\n+    for byte in &digest.finalize() {\n+        result.push_str(&format!(\"{:02x}\", byte));\n+    }\n+\n+    result\n+}\n+\n+// It's not possible to return &[u8], because trait in trait without short lifetime\n+fn sha_process<D: SHA2Digest + Default>(input: &str) -> SHA2DigestOutput<D> {\n+    let mut digest = D::default();\n+    digest.update(&input);\n+\n+    digest.finalize()\n+}\n+\n+macro_rules! crypto_unary_string_function {\n+    ($NAME:ident, $FUNC:expr) => {\n+        /// crypto function that accepts Utf8 or LargeUtf8 and returns Utf8 string\n+        pub fn $NAME<T: StringOffsetSizeTrait>(\n+            args: &[ArrayRef],\n+        ) -> Result<GenericStringArray<i32>> {\n+            if args.len() != 1 {\n+                return Err(DataFusionError::Internal(format!(\n+                    \"{:?} args were supplied but {} takes exactly one argument\",\n+                    args.len(),\n+                    String::from(stringify!($NAME)),\n+                )));\n+            }\n+\n+            let array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            // first map is the iterator, second is for the `Option<_>`\n+            Ok(array.iter().map(|x| x.map(|x| $FUNC(x))).collect())\n+        }\n+    };\n+}\n+\n+macro_rules! crypto_unary_binary_function {\n+    ($NAME:ident, $FUNC:expr) => {\n+        /// crypto function that accepts Utf8 or LargeUtf8 and returns Binary\n+        pub fn $NAME<T: StringOffsetSizeTrait>(\n+            args: &[ArrayRef],\n+        ) -> Result<GenericBinaryArray<i32>> {\n+            if args.len() != 1 {\n+                return Err(DataFusionError::Internal(format!(\n+                    \"{:?} args were supplied but {} takes exactly one argument\",\n+                    args.len(),\n+                    String::from(stringify!($NAME)),\n+                )));\n+            }\n+\n+            let array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            let mut builder = BinaryBuilder::new(args.len());\n+\n+            for value in array.iter() {\n+                builder\n+                    .append_value($FUNC(value.unwrap()).as_slice())\n+                    .unwrap();\n+            }\n\nReview comment:\n       This will crash on null values, no?\r\n   \r\n   Binary can also be built from an iterator, afai remember.\n\n##########\nFile path: rust/datafusion/src/physical_plan/crypto_expressions.rs\n##########\n@@ -0,0 +1,114 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Crypto expressions\n+\n+use md5::Md5;\n+use sha2::{\n+    digest::Output as SHA2DigestOutput, Digest as SHA2Digest, Sha224, Sha256, Sha384,\n+    Sha512,\n+};\n+\n+use crate::error::{DataFusionError, Result};\n+use arrow::array::{\n+    ArrayRef, BinaryBuilder, GenericBinaryArray, GenericStringArray,\n+    StringOffsetSizeTrait,\n+};\n+\n+fn md5_process(input: &str) -> String {\n+    let mut digest = Md5::default();\n+    digest.update(&input);\n+\n+    let mut result = String::new();\n+\n+    for byte in &digest.finalize() {\n+        result.push_str(&format!(\"{:02x}\", byte));\n+    }\n+\n+    result\n+}\n+\n+// It's not possible to return &[u8], because trait in trait without short lifetime\n+fn sha_process<D: SHA2Digest + Default>(input: &str) -> SHA2DigestOutput<D> {\n+    let mut digest = D::default();\n+    digest.update(&input);\n+\n+    digest.finalize()\n+}\n+\n+macro_rules! crypto_unary_string_function {\n+    ($NAME:ident, $FUNC:expr) => {\n+        /// crypto function that accepts Utf8 or LargeUtf8 and returns Utf8 string\n+        pub fn $NAME<T: StringOffsetSizeTrait>(\n+            args: &[ArrayRef],\n+        ) -> Result<GenericStringArray<i32>> {\n+            if args.len() != 1 {\n+                return Err(DataFusionError::Internal(format!(\n+                    \"{:?} args were supplied but {} takes exactly one argument\",\n+                    args.len(),\n+                    String::from(stringify!($NAME)),\n+                )));\n+            }\n+\n+            let array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            // first map is the iterator, second is for the `Option<_>`\n+            Ok(array.iter().map(|x| x.map(|x| $FUNC(x))).collect())\n+        }\n+    };\n+}\n+\n+macro_rules! crypto_unary_binary_function {\n+    ($NAME:ident, $FUNC:expr) => {\n+        /// crypto function that accepts Utf8 or LargeUtf8 and returns Binary\n+        pub fn $NAME<T: StringOffsetSizeTrait>(\n+            args: &[ArrayRef],\n+        ) -> Result<GenericBinaryArray<i32>> {\n+            if args.len() != 1 {\n+                return Err(DataFusionError::Internal(format!(\n+                    \"{:?} args were supplied but {} takes exactly one argument\",\n+                    args.len(),\n+                    String::from(stringify!($NAME)),\n+                )));\n+            }\n+\n+            let array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            let mut builder = BinaryBuilder::new(args.len());\n+\n+            for value in array.iter() {\n+                builder\n+                    .append_value($FUNC(value.unwrap()).as_slice())\n+                    .unwrap();\n+            }\n+\n+            Ok(builder.finish())\n+        }\n+    };\n+}\n+\n+crypto_unary_string_function!(md5, md5_process);\n+crypto_unary_binary_function!(sha224, sha_process::<Sha224>);\n+crypto_unary_binary_function!(sha256, sha_process::<Sha256>);\n+crypto_unary_binary_function!(sha384, sha_process::<Sha384>);\n+crypto_unary_binary_function!(sha512, sha_process::<Sha512>);\n\nReview comment:\n       IMO we should have a test of one of these functions here, with and without nulls, and with an empty string.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-09T12:03:26.415+0000",
                    "updated": "2021-01-09T12:03:26.415+0000",
                    "started": "2021-01-09T12:03:26.414+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533428",
                    "issueId": "13351111"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13351111/worklog/533430",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9139:\nURL: https://github.com/apache/arrow/pull/9139#discussion_r554389768\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/crypto_expressions.rs\n##########\n@@ -0,0 +1,114 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Crypto expressions\n+\n+use md5::Md5;\n+use sha2::{\n+    digest::Output as SHA2DigestOutput, Digest as SHA2Digest, Sha224, Sha256, Sha384,\n+    Sha512,\n+};\n+\n+use crate::error::{DataFusionError, Result};\n+use arrow::array::{\n+    ArrayRef, BinaryBuilder, GenericBinaryArray, GenericStringArray,\n+    StringOffsetSizeTrait,\n+};\n+\n+fn md5_process(input: &str) -> String {\n+    let mut digest = Md5::default();\n+    digest.update(&input);\n+\n+    let mut result = String::new();\n+\n+    for byte in &digest.finalize() {\n+        result.push_str(&format!(\"{:02x}\", byte));\n+    }\n+\n+    result\n+}\n+\n+// It's not possible to return &[u8], because trait in trait without short lifetime\n+fn sha_process<D: SHA2Digest + Default>(input: &str) -> SHA2DigestOutput<D> {\n+    let mut digest = D::default();\n+    digest.update(&input);\n+\n+    digest.finalize()\n+}\n+\n+macro_rules! crypto_unary_string_function {\n+    ($NAME:ident, $FUNC:expr) => {\n+        /// crypto function that accepts Utf8 or LargeUtf8 and returns Utf8 string\n+        pub fn $NAME<T: StringOffsetSizeTrait>(\n+            args: &[ArrayRef],\n+        ) -> Result<GenericStringArray<i32>> {\n+            if args.len() != 1 {\n+                return Err(DataFusionError::Internal(format!(\n+                    \"{:?} args were supplied but {} takes exactly one argument\",\n+                    args.len(),\n+                    String::from(stringify!($NAME)),\n+                )));\n+            }\n+\n+            let array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            // first map is the iterator, second is for the `Option<_>`\n+            Ok(array.iter().map(|x| x.map(|x| $FUNC(x))).collect())\n+        }\n+    };\n+}\n+\n+macro_rules! crypto_unary_binary_function {\n+    ($NAME:ident, $FUNC:expr) => {\n+        /// crypto function that accepts Utf8 or LargeUtf8 and returns Binary\n+        pub fn $NAME<T: StringOffsetSizeTrait>(\n+            args: &[ArrayRef],\n+        ) -> Result<GenericBinaryArray<i32>> {\n+            if args.len() != 1 {\n+                return Err(DataFusionError::Internal(format!(\n+                    \"{:?} args were supplied but {} takes exactly one argument\",\n+                    args.len(),\n+                    String::from(stringify!($NAME)),\n+                )));\n+            }\n+\n+            let array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            let mut builder = BinaryBuilder::new(args.len());\n+\n+            for value in array.iter() {\n+                builder\n+                    .append_value($FUNC(value.unwrap()).as_slice())\n+                    .unwrap();\n+            }\n+\n+            Ok(builder.finish())\n+        }\n+    };\n+}\n+\n+crypto_unary_string_function!(md5, md5_process);\n\nReview comment:\n       Aren't these always of a fixed size (e.g. `128-bit` for md5)?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-09T12:18:10.947+0000",
                    "updated": "2021-01-09T12:18:10.947+0000",
                    "started": "2021-01-09T12:18:10.946+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533430",
                    "issueId": "13351111"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13351111/worklog/533436",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ovr commented on a change in pull request #9139:\nURL: https://github.com/apache/arrow/pull/9139#discussion_r554424637\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/crypto_expressions.rs\n##########\n@@ -0,0 +1,114 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Crypto expressions\n+\n+use md5::Md5;\n+use sha2::{\n+    digest::Output as SHA2DigestOutput, Digest as SHA2Digest, Sha224, Sha256, Sha384,\n+    Sha512,\n+};\n+\n+use crate::error::{DataFusionError, Result};\n+use arrow::array::{\n+    ArrayRef, BinaryBuilder, GenericBinaryArray, GenericStringArray,\n+    StringOffsetSizeTrait,\n+};\n+\n+fn md5_process(input: &str) -> String {\n+    let mut digest = Md5::default();\n+    digest.update(&input);\n+\n+    let mut result = String::new();\n+\n+    for byte in &digest.finalize() {\n+        result.push_str(&format!(\"{:02x}\", byte));\n+    }\n+\n+    result\n+}\n+\n+// It's not possible to return &[u8], because trait in trait without short lifetime\n+fn sha_process<D: SHA2Digest + Default>(input: &str) -> SHA2DigestOutput<D> {\n+    let mut digest = D::default();\n+    digest.update(&input);\n+\n+    digest.finalize()\n+}\n+\n+macro_rules! crypto_unary_string_function {\n+    ($NAME:ident, $FUNC:expr) => {\n+        /// crypto function that accepts Utf8 or LargeUtf8 and returns Utf8 string\n+        pub fn $NAME<T: StringOffsetSizeTrait>(\n+            args: &[ArrayRef],\n+        ) -> Result<GenericStringArray<i32>> {\n+            if args.len() != 1 {\n+                return Err(DataFusionError::Internal(format!(\n+                    \"{:?} args were supplied but {} takes exactly one argument\",\n+                    args.len(),\n+                    String::from(stringify!($NAME)),\n+                )));\n+            }\n+\n+            let array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            // first map is the iterator, second is for the `Option<_>`\n+            Ok(array.iter().map(|x| x.map(|x| $FUNC(x))).collect())\n+        }\n+    };\n+}\n+\n+macro_rules! crypto_unary_binary_function {\n+    ($NAME:ident, $FUNC:expr) => {\n+        /// crypto function that accepts Utf8 or LargeUtf8 and returns Binary\n+        pub fn $NAME<T: StringOffsetSizeTrait>(\n+            args: &[ArrayRef],\n+        ) -> Result<GenericBinaryArray<i32>> {\n+            if args.len() != 1 {\n+                return Err(DataFusionError::Internal(format!(\n+                    \"{:?} args were supplied but {} takes exactly one argument\",\n+                    args.len(),\n+                    String::from(stringify!($NAME)),\n+                )));\n+            }\n+\n+            let array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            let mut builder = BinaryBuilder::new(args.len());\n+\n+            for value in array.iter() {\n+                builder\n+                    .append_value($FUNC(value.unwrap()).as_slice())\n+                    .unwrap();\n+            }\n\nReview comment:\n       Yes, it will crash.\r\n   \r\n   Replaced this with `Ok(array.iter().map(|x| x.map(|x| $FUNC(x))).collect())` without as_slice\r\n   And it works. Weird, Where `SHA2DigestOutput<D>` converted to slice.\r\n   \r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-09T12:57:50.301+0000",
                    "updated": "2021-01-09T12:57:50.301+0000",
                    "started": "2021-01-09T12:57:50.301+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533436",
                    "issueId": "13351111"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13351111/worklog/533437",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ovr commented on a change in pull request #9139:\nURL: https://github.com/apache/arrow/pull/9139#discussion_r554424667\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/crypto_expressions.rs\n##########\n@@ -0,0 +1,114 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Crypto expressions\n+\n+use md5::Md5;\n+use sha2::{\n+    digest::Output as SHA2DigestOutput, Digest as SHA2Digest, Sha224, Sha256, Sha384,\n+    Sha512,\n+};\n+\n+use crate::error::{DataFusionError, Result};\n+use arrow::array::{\n+    ArrayRef, BinaryBuilder, GenericBinaryArray, GenericStringArray,\n+    StringOffsetSizeTrait,\n+};\n+\n+fn md5_process(input: &str) -> String {\n+    let mut digest = Md5::default();\n+    digest.update(&input);\n+\n+    let mut result = String::new();\n+\n+    for byte in &digest.finalize() {\n+        result.push_str(&format!(\"{:02x}\", byte));\n+    }\n+\n+    result\n+}\n+\n+// It's not possible to return &[u8], because trait in trait without short lifetime\n+fn sha_process<D: SHA2Digest + Default>(input: &str) -> SHA2DigestOutput<D> {\n+    let mut digest = D::default();\n+    digest.update(&input);\n+\n+    digest.finalize()\n+}\n+\n+macro_rules! crypto_unary_string_function {\n+    ($NAME:ident, $FUNC:expr) => {\n+        /// crypto function that accepts Utf8 or LargeUtf8 and returns Utf8 string\n+        pub fn $NAME<T: StringOffsetSizeTrait>(\n+            args: &[ArrayRef],\n+        ) -> Result<GenericStringArray<i32>> {\n+            if args.len() != 1 {\n+                return Err(DataFusionError::Internal(format!(\n+                    \"{:?} args were supplied but {} takes exactly one argument\",\n+                    args.len(),\n+                    String::from(stringify!($NAME)),\n+                )));\n+            }\n+\n+            let array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            // first map is the iterator, second is for the `Option<_>`\n+            Ok(array.iter().map(|x| x.map(|x| $FUNC(x))).collect())\n+        }\n+    };\n+}\n+\n+macro_rules! crypto_unary_binary_function {\n+    ($NAME:ident, $FUNC:expr) => {\n+        /// crypto function that accepts Utf8 or LargeUtf8 and returns Binary\n+        pub fn $NAME<T: StringOffsetSizeTrait>(\n+            args: &[ArrayRef],\n+        ) -> Result<GenericBinaryArray<i32>> {\n+            if args.len() != 1 {\n+                return Err(DataFusionError::Internal(format!(\n+                    \"{:?} args were supplied but {} takes exactly one argument\",\n+                    args.len(),\n+                    String::from(stringify!($NAME)),\n+                )));\n+            }\n+\n+            let array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            let mut builder = BinaryBuilder::new(args.len());\n+\n+            for value in array.iter() {\n+                builder\n+                    .append_value($FUNC(value.unwrap()).as_slice())\n+                    .unwrap();\n+            }\n+\n+            Ok(builder.finish())\n+        }\n+    };\n+}\n+\n+crypto_unary_string_function!(md5, md5_process);\n+crypto_unary_binary_function!(sha224, sha_process::<Sha224>);\n+crypto_unary_binary_function!(sha256, sha_process::<Sha256>);\n+crypto_unary_binary_function!(sha384, sha_process::<Sha384>);\n+crypto_unary_binary_function!(sha512, sha_process::<Sha512>);\n\nReview comment:\n       Good catch, I added tests for nulls and empty strings by SQL execution.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-09T12:58:13.234+0000",
                    "updated": "2021-01-09T12:58:13.234+0000",
                    "started": "2021-01-09T12:58:13.234+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533437",
                    "issueId": "13351111"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13351111/worklog/533438",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ovr commented on a change in pull request #9139:\nURL: https://github.com/apache/arrow/pull/9139#discussion_r554424637\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/crypto_expressions.rs\n##########\n@@ -0,0 +1,114 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Crypto expressions\n+\n+use md5::Md5;\n+use sha2::{\n+    digest::Output as SHA2DigestOutput, Digest as SHA2Digest, Sha224, Sha256, Sha384,\n+    Sha512,\n+};\n+\n+use crate::error::{DataFusionError, Result};\n+use arrow::array::{\n+    ArrayRef, BinaryBuilder, GenericBinaryArray, GenericStringArray,\n+    StringOffsetSizeTrait,\n+};\n+\n+fn md5_process(input: &str) -> String {\n+    let mut digest = Md5::default();\n+    digest.update(&input);\n+\n+    let mut result = String::new();\n+\n+    for byte in &digest.finalize() {\n+        result.push_str(&format!(\"{:02x}\", byte));\n+    }\n+\n+    result\n+}\n+\n+// It's not possible to return &[u8], because trait in trait without short lifetime\n+fn sha_process<D: SHA2Digest + Default>(input: &str) -> SHA2DigestOutput<D> {\n+    let mut digest = D::default();\n+    digest.update(&input);\n+\n+    digest.finalize()\n+}\n+\n+macro_rules! crypto_unary_string_function {\n+    ($NAME:ident, $FUNC:expr) => {\n+        /// crypto function that accepts Utf8 or LargeUtf8 and returns Utf8 string\n+        pub fn $NAME<T: StringOffsetSizeTrait>(\n+            args: &[ArrayRef],\n+        ) -> Result<GenericStringArray<i32>> {\n+            if args.len() != 1 {\n+                return Err(DataFusionError::Internal(format!(\n+                    \"{:?} args were supplied but {} takes exactly one argument\",\n+                    args.len(),\n+                    String::from(stringify!($NAME)),\n+                )));\n+            }\n+\n+            let array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            // first map is the iterator, second is for the `Option<_>`\n+            Ok(array.iter().map(|x| x.map(|x| $FUNC(x))).collect())\n+        }\n+    };\n+}\n+\n+macro_rules! crypto_unary_binary_function {\n+    ($NAME:ident, $FUNC:expr) => {\n+        /// crypto function that accepts Utf8 or LargeUtf8 and returns Binary\n+        pub fn $NAME<T: StringOffsetSizeTrait>(\n+            args: &[ArrayRef],\n+        ) -> Result<GenericBinaryArray<i32>> {\n+            if args.len() != 1 {\n+                return Err(DataFusionError::Internal(format!(\n+                    \"{:?} args were supplied but {} takes exactly one argument\",\n+                    args.len(),\n+                    String::from(stringify!($NAME)),\n+                )));\n+            }\n+\n+            let array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            let mut builder = BinaryBuilder::new(args.len());\n+\n+            for value in array.iter() {\n+                builder\n+                    .append_value($FUNC(value.unwrap()).as_slice())\n+                    .unwrap();\n+            }\n\nReview comment:\n       Yes, it will crash.\r\n   \r\n   Replaced this with `Ok(array.iter().map(|x| x.map(|x| $FUNC(x))).collect())` without calling `as_slice()` directly on `SHA2DigestOutput<D>` and It works. Wierd... How is it possible?)\r\n   \r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-09T12:59:26.219+0000",
                    "updated": "2021-01-09T12:59:26.219+0000",
                    "started": "2021-01-09T12:59:26.219+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533438",
                    "issueId": "13351111"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13351111/worklog/533439",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ovr commented on a change in pull request #9139:\nURL: https://github.com/apache/arrow/pull/9139#discussion_r554425163\n\n\n\n##########\nFile path: rust/datafusion/tests/sql.rs\n##########\n@@ -1859,19 +1859,33 @@ async fn crypto_expressions() -> Result<()> {\n     let mut ctx = ExecutionContext::new();\n     let sql = \"SELECT\n         md5('tom') AS md5_tom,\n+        md5('') AS md5_empty_str,\n+        md5(null) AS md5_null,\n         sha224('tom') AS sha224_tom,\n+        sha224('') AS sha224_empty_str,\n+        sha224(null) AS sha224_null,\n         sha256('tom') AS sha256_tom,\n+        sha256('') AS sha256_empty_str,\n         sha384('tom') AS sha348_tom,\n-        sha512('tom') AS sha512_tom\n+        sha384('') AS sha384_empty_str,\n+        sha512('tom') AS sha512_tom,\n+        sha512('') AS sha512_empty_str\n     \";\n     let actual = execute(&mut ctx, sql).await;\n \n     let expected = vec![vec![\n         \"34b7da764b21d298ef307d04d8152dc5\",\n-        \"BF6CB62649C42A9AE3876AB6F6D92AD36CB5414E495F8873292BE4D\",\n-        \"E1608F75C5D7813F3D4031CB30BFB786507D98137538FF8E128A6FF74E84E643\",\n-        \"96F5B68AA77848E4FDF5C1CB35DE2DBFAD6FFD7C25D9EA7C6C19B8A4D55A9187EB117C557883F58C16DFAC3E343\",\n-        \"6E1B9B3FE84068E3751F7AD5E959D6F39AD0F8885D855166F55C659469D3C8B78118C44A2A49C72DDB481CD6D8731034E11CC0307BA843A9B3495CB8D3E\"\n+        \"d41d8cd98f00b204e9800998ecf8427e\",\n\nReview comment:\n       Tested with real PostgreSQL.\r\n   \r\n   ```sql\r\n   select\r\n           md5('tom') AS md5_tom,\r\n           md5('') AS md5_empty_str,\r\n           md5(null) AS md5_null,\r\n           encode(sha224('tom'), 'hex') AS sha224_tom,\r\n           encode(sha224(''), 'hex') AS sha224_empty_str,\r\n           sha224(null) AS sha224_null;\r\n   ```\r\n   \r\n   ```json\r\n   [\r\n     {\r\n       \"md5_tom\": \"34b7da764b21d298ef307d04d8152dc5\",\r\n       \"md5_empty_str\": \"d41d8cd98f00b204e9800998ecf8427e\",\r\n       \"md5_null\": null,\r\n       \"sha224_tom\": \"0bf6cb62649c42a9ae3876ab6f6d92ad36cb5414e495f8873292be4d\",\r\n       \"sha224_empty_str\": \"d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f\",\r\n       \"sha224_null\": null\r\n     }\r\n   ]\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-09T13:03:49.945+0000",
                    "updated": "2021-01-09T13:03:49.945+0000",
                    "started": "2021-01-09T13:03:49.945+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533439",
                    "issueId": "13351111"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13351111/worklog/533440",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ovr commented on pull request #9139:\nURL: https://github.com/apache/arrow/pull/9139#issuecomment-757169119\n\n\n   Thank you, @jorgecarleitao, for your review. I've added tests + fix handling null values.\r\n   \r\n   I've compared it with PostgreSQL, and It works as expected.\r\n   \r\n   ```sql\r\n   select\r\n           md5('tom') AS md5_tom,\r\n           md5('') AS md5_empty_str,\r\n           md5(null) AS md5_null,\r\n           encode(sha224('tom'), 'hex') AS sha224_tom,\r\n           encode(sha224(''), 'hex') AS sha224_empty_str,\r\n           sha224(null) AS sha224_null;\r\n   ```\r\n   \r\n   ```json\r\n   [\r\n     {\r\n       \"md5_tom\": \"34b7da764b21d298ef307d04d8152dc5\",\r\n       \"md5_empty_str\": \"d41d8cd98f00b204e9800998ecf8427e\",\r\n       \"md5_null\": null,\r\n       \"sha224_tom\": \"0bf6cb62649c42a9ae3876ab6f6d92ad36cb5414e495f8873292be4d\",\r\n       \"sha224_empty_str\": \"d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f\",\r\n       \"sha224_null\": null\r\n     }\r\n   ]\r\n   ```\r\n   \r\n   Thanks\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-09T13:07:03.255+0000",
                    "updated": "2021-01-09T13:07:03.255+0000",
                    "started": "2021-01-09T13:07:03.255+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533440",
                    "issueId": "13351111"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13351111/worklog/533626",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ovr commented on a change in pull request #9139:\nURL: https://github.com/apache/arrow/pull/9139#discussion_r554424637\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/crypto_expressions.rs\n##########\n@@ -0,0 +1,114 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Crypto expressions\n+\n+use md5::Md5;\n+use sha2::{\n+    digest::Output as SHA2DigestOutput, Digest as SHA2Digest, Sha224, Sha256, Sha384,\n+    Sha512,\n+};\n+\n+use crate::error::{DataFusionError, Result};\n+use arrow::array::{\n+    ArrayRef, BinaryBuilder, GenericBinaryArray, GenericStringArray,\n+    StringOffsetSizeTrait,\n+};\n+\n+fn md5_process(input: &str) -> String {\n+    let mut digest = Md5::default();\n+    digest.update(&input);\n+\n+    let mut result = String::new();\n+\n+    for byte in &digest.finalize() {\n+        result.push_str(&format!(\"{:02x}\", byte));\n+    }\n+\n+    result\n+}\n+\n+// It's not possible to return &[u8], because trait in trait without short lifetime\n+fn sha_process<D: SHA2Digest + Default>(input: &str) -> SHA2DigestOutput<D> {\n+    let mut digest = D::default();\n+    digest.update(&input);\n+\n+    digest.finalize()\n+}\n+\n+macro_rules! crypto_unary_string_function {\n+    ($NAME:ident, $FUNC:expr) => {\n+        /// crypto function that accepts Utf8 or LargeUtf8 and returns Utf8 string\n+        pub fn $NAME<T: StringOffsetSizeTrait>(\n+            args: &[ArrayRef],\n+        ) -> Result<GenericStringArray<i32>> {\n+            if args.len() != 1 {\n+                return Err(DataFusionError::Internal(format!(\n+                    \"{:?} args were supplied but {} takes exactly one argument\",\n+                    args.len(),\n+                    String::from(stringify!($NAME)),\n+                )));\n+            }\n+\n+            let array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            // first map is the iterator, second is for the `Option<_>`\n+            Ok(array.iter().map(|x| x.map(|x| $FUNC(x))).collect())\n+        }\n+    };\n+}\n+\n+macro_rules! crypto_unary_binary_function {\n+    ($NAME:ident, $FUNC:expr) => {\n+        /// crypto function that accepts Utf8 or LargeUtf8 and returns Binary\n+        pub fn $NAME<T: StringOffsetSizeTrait>(\n+            args: &[ArrayRef],\n+        ) -> Result<GenericBinaryArray<i32>> {\n+            if args.len() != 1 {\n+                return Err(DataFusionError::Internal(format!(\n+                    \"{:?} args were supplied but {} takes exactly one argument\",\n+                    args.len(),\n+                    String::from(stringify!($NAME)),\n+                )));\n+            }\n+\n+            let array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            let mut builder = BinaryBuilder::new(args.len());\n+\n+            for value in array.iter() {\n+                builder\n+                    .append_value($FUNC(value.unwrap()).as_slice())\n+                    .unwrap();\n+            }\n\nReview comment:\n       Yes, it will crash.\r\n   \r\n   Replaced this with `Ok(array.iter().map(|x| x.map(|x| $FUNC(x))).collect())` without as_slice\r\n   And it works. Weird, Where `SHA2DigestOutput<D>` converted to slice.\r\n   \r\n   \n\n##########\nFile path: rust/datafusion/src/physical_plan/crypto_expressions.rs\n##########\n@@ -0,0 +1,114 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Crypto expressions\n+\n+use md5::Md5;\n+use sha2::{\n+    digest::Output as SHA2DigestOutput, Digest as SHA2Digest, Sha224, Sha256, Sha384,\n+    Sha512,\n+};\n+\n+use crate::error::{DataFusionError, Result};\n+use arrow::array::{\n+    ArrayRef, BinaryBuilder, GenericBinaryArray, GenericStringArray,\n+    StringOffsetSizeTrait,\n+};\n+\n+fn md5_process(input: &str) -> String {\n+    let mut digest = Md5::default();\n+    digest.update(&input);\n+\n+    let mut result = String::new();\n+\n+    for byte in &digest.finalize() {\n+        result.push_str(&format!(\"{:02x}\", byte));\n+    }\n+\n+    result\n+}\n+\n+// It's not possible to return &[u8], because trait in trait without short lifetime\n+fn sha_process<D: SHA2Digest + Default>(input: &str) -> SHA2DigestOutput<D> {\n+    let mut digest = D::default();\n+    digest.update(&input);\n+\n+    digest.finalize()\n+}\n+\n+macro_rules! crypto_unary_string_function {\n+    ($NAME:ident, $FUNC:expr) => {\n+        /// crypto function that accepts Utf8 or LargeUtf8 and returns Utf8 string\n+        pub fn $NAME<T: StringOffsetSizeTrait>(\n+            args: &[ArrayRef],\n+        ) -> Result<GenericStringArray<i32>> {\n+            if args.len() != 1 {\n+                return Err(DataFusionError::Internal(format!(\n+                    \"{:?} args were supplied but {} takes exactly one argument\",\n+                    args.len(),\n+                    String::from(stringify!($NAME)),\n+                )));\n+            }\n+\n+            let array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            // first map is the iterator, second is for the `Option<_>`\n+            Ok(array.iter().map(|x| x.map(|x| $FUNC(x))).collect())\n+        }\n+    };\n+}\n+\n+macro_rules! crypto_unary_binary_function {\n+    ($NAME:ident, $FUNC:expr) => {\n+        /// crypto function that accepts Utf8 or LargeUtf8 and returns Binary\n+        pub fn $NAME<T: StringOffsetSizeTrait>(\n+            args: &[ArrayRef],\n+        ) -> Result<GenericBinaryArray<i32>> {\n+            if args.len() != 1 {\n+                return Err(DataFusionError::Internal(format!(\n+                    \"{:?} args were supplied but {} takes exactly one argument\",\n+                    args.len(),\n+                    String::from(stringify!($NAME)),\n+                )));\n+            }\n+\n+            let array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            let mut builder = BinaryBuilder::new(args.len());\n+\n+            for value in array.iter() {\n+                builder\n+                    .append_value($FUNC(value.unwrap()).as_slice())\n+                    .unwrap();\n+            }\n+\n+            Ok(builder.finish())\n+        }\n+    };\n+}\n+\n+crypto_unary_string_function!(md5, md5_process);\n+crypto_unary_binary_function!(sha224, sha_process::<Sha224>);\n+crypto_unary_binary_function!(sha256, sha_process::<Sha256>);\n+crypto_unary_binary_function!(sha384, sha_process::<Sha384>);\n+crypto_unary_binary_function!(sha512, sha_process::<Sha512>);\n\nReview comment:\n       Good catch, I added tests for nulls and empty strings by SQL execution.\n\n##########\nFile path: rust/datafusion/src/physical_plan/crypto_expressions.rs\n##########\n@@ -0,0 +1,114 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Crypto expressions\n+\n+use md5::Md5;\n+use sha2::{\n+    digest::Output as SHA2DigestOutput, Digest as SHA2Digest, Sha224, Sha256, Sha384,\n+    Sha512,\n+};\n+\n+use crate::error::{DataFusionError, Result};\n+use arrow::array::{\n+    ArrayRef, BinaryBuilder, GenericBinaryArray, GenericStringArray,\n+    StringOffsetSizeTrait,\n+};\n+\n+fn md5_process(input: &str) -> String {\n+    let mut digest = Md5::default();\n+    digest.update(&input);\n+\n+    let mut result = String::new();\n+\n+    for byte in &digest.finalize() {\n+        result.push_str(&format!(\"{:02x}\", byte));\n+    }\n+\n+    result\n+}\n+\n+// It's not possible to return &[u8], because trait in trait without short lifetime\n+fn sha_process<D: SHA2Digest + Default>(input: &str) -> SHA2DigestOutput<D> {\n+    let mut digest = D::default();\n+    digest.update(&input);\n+\n+    digest.finalize()\n+}\n+\n+macro_rules! crypto_unary_string_function {\n+    ($NAME:ident, $FUNC:expr) => {\n+        /// crypto function that accepts Utf8 or LargeUtf8 and returns Utf8 string\n+        pub fn $NAME<T: StringOffsetSizeTrait>(\n+            args: &[ArrayRef],\n+        ) -> Result<GenericStringArray<i32>> {\n+            if args.len() != 1 {\n+                return Err(DataFusionError::Internal(format!(\n+                    \"{:?} args were supplied but {} takes exactly one argument\",\n+                    args.len(),\n+                    String::from(stringify!($NAME)),\n+                )));\n+            }\n+\n+            let array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            // first map is the iterator, second is for the `Option<_>`\n+            Ok(array.iter().map(|x| x.map(|x| $FUNC(x))).collect())\n+        }\n+    };\n+}\n+\n+macro_rules! crypto_unary_binary_function {\n+    ($NAME:ident, $FUNC:expr) => {\n+        /// crypto function that accepts Utf8 or LargeUtf8 and returns Binary\n+        pub fn $NAME<T: StringOffsetSizeTrait>(\n+            args: &[ArrayRef],\n+        ) -> Result<GenericBinaryArray<i32>> {\n+            if args.len() != 1 {\n+                return Err(DataFusionError::Internal(format!(\n+                    \"{:?} args were supplied but {} takes exactly one argument\",\n+                    args.len(),\n+                    String::from(stringify!($NAME)),\n+                )));\n+            }\n+\n+            let array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            let mut builder = BinaryBuilder::new(args.len());\n+\n+            for value in array.iter() {\n+                builder\n+                    .append_value($FUNC(value.unwrap()).as_slice())\n+                    .unwrap();\n+            }\n\nReview comment:\n       Yes, it will crash.\r\n   \r\n   Replaced this with `Ok(array.iter().map(|x| x.map(|x| $FUNC(x))).collect())` without calling `as_slice()` directly on `SHA2DigestOutput<D>` and It works. Wierd... How is it possible?)\r\n   \r\n   \n\n##########\nFile path: rust/datafusion/tests/sql.rs\n##########\n@@ -1859,19 +1859,33 @@ async fn crypto_expressions() -> Result<()> {\n     let mut ctx = ExecutionContext::new();\n     let sql = \"SELECT\n         md5('tom') AS md5_tom,\n+        md5('') AS md5_empty_str,\n+        md5(null) AS md5_null,\n         sha224('tom') AS sha224_tom,\n+        sha224('') AS sha224_empty_str,\n+        sha224(null) AS sha224_null,\n         sha256('tom') AS sha256_tom,\n+        sha256('') AS sha256_empty_str,\n         sha384('tom') AS sha348_tom,\n-        sha512('tom') AS sha512_tom\n+        sha384('') AS sha384_empty_str,\n+        sha512('tom') AS sha512_tom,\n+        sha512('') AS sha512_empty_str\n     \";\n     let actual = execute(&mut ctx, sql).await;\n \n     let expected = vec![vec![\n         \"34b7da764b21d298ef307d04d8152dc5\",\n-        \"BF6CB62649C42A9AE3876AB6F6D92AD36CB5414E495F8873292BE4D\",\n-        \"E1608F75C5D7813F3D4031CB30BFB786507D98137538FF8E128A6FF74E84E643\",\n-        \"96F5B68AA77848E4FDF5C1CB35DE2DBFAD6FFD7C25D9EA7C6C19B8A4D55A9187EB117C557883F58C16DFAC3E343\",\n-        \"6E1B9B3FE84068E3751F7AD5E959D6F39AD0F8885D855166F55C659469D3C8B78118C44A2A49C72DDB481CD6D8731034E11CC0307BA843A9B3495CB8D3E\"\n+        \"d41d8cd98f00b204e9800998ecf8427e\",\n\nReview comment:\n       Tested with real PostgreSQL.\r\n   \r\n   ```sql\r\n   select\r\n           md5('tom') AS md5_tom,\r\n           md5('') AS md5_empty_str,\r\n           md5(null) AS md5_null,\r\n           encode(sha224('tom'), 'hex') AS sha224_tom,\r\n           encode(sha224(''), 'hex') AS sha224_empty_str,\r\n           sha224(null) AS sha224_null;\r\n   ```\r\n   \r\n   ```json\r\n   [\r\n     {\r\n       \"md5_tom\": \"34b7da764b21d298ef307d04d8152dc5\",\r\n       \"md5_empty_str\": \"d41d8cd98f00b204e9800998ecf8427e\",\r\n       \"md5_null\": null,\r\n       \"sha224_tom\": \"0bf6cb62649c42a9ae3876ab6f6d92ad36cb5414e495f8873292be4d\",\r\n       \"sha224_empty_str\": \"d14a028c2a3a2bc9476102bb288234c415a2b01f828ea62ac5b3e42f\",\r\n       \"sha224_null\": null\r\n     }\r\n   ]\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-10T04:03:03.677+0000",
                    "updated": "2021-01-10T04:03:03.677+0000",
                    "started": "2021-01-10T04:03:03.676+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533626",
                    "issueId": "13351111"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13351111/worklog/533643",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ovr opened a new pull request #9139:\nURL: https://github.com/apache/arrow/pull/9139\n\n\n   \u2026(md5, sha)\r\n   \r\n   Hello!\r\n   \r\n   I am still working on it, It's DRAFT because I am interested to indicate that I am working on it.\r\n   \r\n   Plan to support:\r\n   \r\n   - [ ] MD5\r\n   - [ ] SHA224\r\n   - [ ] SHA256\r\n   - [ ] SHA384\r\n   - [ ] SHA512\r\n   \r\n   Thanks\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-10T04:05:01.911+0000",
                    "updated": "2021-01-10T04:05:01.911+0000",
                    "started": "2021-01-10T04:05:01.911+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533643",
                    "issueId": "13351111"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13351111/worklog/533806",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9139:\nURL: https://github.com/apache/arrow/pull/9139#discussion_r554389768\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/crypto_expressions.rs\n##########\n@@ -0,0 +1,114 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Crypto expressions\n+\n+use md5::Md5;\n+use sha2::{\n+    digest::Output as SHA2DigestOutput, Digest as SHA2Digest, Sha224, Sha256, Sha384,\n+    Sha512,\n+};\n+\n+use crate::error::{DataFusionError, Result};\n+use arrow::array::{\n+    ArrayRef, BinaryBuilder, GenericBinaryArray, GenericStringArray,\n+    StringOffsetSizeTrait,\n+};\n+\n+fn md5_process(input: &str) -> String {\n+    let mut digest = Md5::default();\n+    digest.update(&input);\n+\n+    let mut result = String::new();\n+\n+    for byte in &digest.finalize() {\n+        result.push_str(&format!(\"{:02x}\", byte));\n+    }\n+\n+    result\n+}\n+\n+// It's not possible to return &[u8], because trait in trait without short lifetime\n+fn sha_process<D: SHA2Digest + Default>(input: &str) -> SHA2DigestOutput<D> {\n+    let mut digest = D::default();\n+    digest.update(&input);\n+\n+    digest.finalize()\n+}\n+\n+macro_rules! crypto_unary_string_function {\n+    ($NAME:ident, $FUNC:expr) => {\n+        /// crypto function that accepts Utf8 or LargeUtf8 and returns Utf8 string\n+        pub fn $NAME<T: StringOffsetSizeTrait>(\n+            args: &[ArrayRef],\n+        ) -> Result<GenericStringArray<i32>> {\n+            if args.len() != 1 {\n+                return Err(DataFusionError::Internal(format!(\n+                    \"{:?} args were supplied but {} takes exactly one argument\",\n+                    args.len(),\n+                    String::from(stringify!($NAME)),\n+                )));\n+            }\n+\n+            let array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            // first map is the iterator, second is for the `Option<_>`\n+            Ok(array.iter().map(|x| x.map(|x| $FUNC(x))).collect())\n+        }\n+    };\n+}\n+\n+macro_rules! crypto_unary_binary_function {\n+    ($NAME:ident, $FUNC:expr) => {\n+        /// crypto function that accepts Utf8 or LargeUtf8 and returns Binary\n+        pub fn $NAME<T: StringOffsetSizeTrait>(\n+            args: &[ArrayRef],\n+        ) -> Result<GenericBinaryArray<i32>> {\n+            if args.len() != 1 {\n+                return Err(DataFusionError::Internal(format!(\n+                    \"{:?} args were supplied but {} takes exactly one argument\",\n+                    args.len(),\n+                    String::from(stringify!($NAME)),\n+                )));\n+            }\n+\n+            let array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            let mut builder = BinaryBuilder::new(args.len());\n+\n+            for value in array.iter() {\n+                builder\n+                    .append_value($FUNC(value.unwrap()).as_slice())\n+                    .unwrap();\n+            }\n+\n+            Ok(builder.finish())\n+        }\n+    };\n+}\n+\n+crypto_unary_string_function!(md5, md5_process);\n\nReview comment:\n       Aren't these always of a fixed size (e.g. `128-bit` for md5)?\n\n##########\nFile path: rust/datafusion/src/physical_plan/crypto_expressions.rs\n##########\n@@ -0,0 +1,114 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Crypto expressions\n+\n+use md5::Md5;\n+use sha2::{\n+    digest::Output as SHA2DigestOutput, Digest as SHA2Digest, Sha224, Sha256, Sha384,\n+    Sha512,\n+};\n+\n+use crate::error::{DataFusionError, Result};\n+use arrow::array::{\n+    ArrayRef, BinaryBuilder, GenericBinaryArray, GenericStringArray,\n+    StringOffsetSizeTrait,\n+};\n+\n+fn md5_process(input: &str) -> String {\n+    let mut digest = Md5::default();\n+    digest.update(&input);\n+\n+    let mut result = String::new();\n+\n+    for byte in &digest.finalize() {\n+        result.push_str(&format!(\"{:02x}\", byte));\n+    }\n+\n+    result\n+}\n+\n+// It's not possible to return &[u8], because trait in trait without short lifetime\n+fn sha_process<D: SHA2Digest + Default>(input: &str) -> SHA2DigestOutput<D> {\n+    let mut digest = D::default();\n+    digest.update(&input);\n+\n+    digest.finalize()\n+}\n+\n+macro_rules! crypto_unary_string_function {\n+    ($NAME:ident, $FUNC:expr) => {\n+        /// crypto function that accepts Utf8 or LargeUtf8 and returns Utf8 string\n+        pub fn $NAME<T: StringOffsetSizeTrait>(\n+            args: &[ArrayRef],\n+        ) -> Result<GenericStringArray<i32>> {\n+            if args.len() != 1 {\n+                return Err(DataFusionError::Internal(format!(\n+                    \"{:?} args were supplied but {} takes exactly one argument\",\n+                    args.len(),\n+                    String::from(stringify!($NAME)),\n+                )));\n+            }\n+\n+            let array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            // first map is the iterator, second is for the `Option<_>`\n+            Ok(array.iter().map(|x| x.map(|x| $FUNC(x))).collect())\n+        }\n+    };\n+}\n+\n+macro_rules! crypto_unary_binary_function {\n+    ($NAME:ident, $FUNC:expr) => {\n+        /// crypto function that accepts Utf8 or LargeUtf8 and returns Binary\n+        pub fn $NAME<T: StringOffsetSizeTrait>(\n+            args: &[ArrayRef],\n+        ) -> Result<GenericBinaryArray<i32>> {\n+            if args.len() != 1 {\n+                return Err(DataFusionError::Internal(format!(\n+                    \"{:?} args were supplied but {} takes exactly one argument\",\n+                    args.len(),\n+                    String::from(stringify!($NAME)),\n+                )));\n+            }\n+\n+            let array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            let mut builder = BinaryBuilder::new(args.len());\n+\n+            for value in array.iter() {\n+                builder\n+                    .append_value($FUNC(value.unwrap()).as_slice())\n+                    .unwrap();\n+            }\n\nReview comment:\n       This will crash on null values, no?\r\n   \r\n   Binary can also be built from an iterator, afai remember.\n\n##########\nFile path: rust/datafusion/src/physical_plan/crypto_expressions.rs\n##########\n@@ -0,0 +1,114 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Crypto expressions\n+\n+use md5::Md5;\n+use sha2::{\n+    digest::Output as SHA2DigestOutput, Digest as SHA2Digest, Sha224, Sha256, Sha384,\n+    Sha512,\n+};\n+\n+use crate::error::{DataFusionError, Result};\n+use arrow::array::{\n+    ArrayRef, BinaryBuilder, GenericBinaryArray, GenericStringArray,\n+    StringOffsetSizeTrait,\n+};\n+\n+fn md5_process(input: &str) -> String {\n+    let mut digest = Md5::default();\n+    digest.update(&input);\n+\n+    let mut result = String::new();\n+\n+    for byte in &digest.finalize() {\n+        result.push_str(&format!(\"{:02x}\", byte));\n+    }\n+\n+    result\n+}\n+\n+// It's not possible to return &[u8], because trait in trait without short lifetime\n+fn sha_process<D: SHA2Digest + Default>(input: &str) -> SHA2DigestOutput<D> {\n+    let mut digest = D::default();\n+    digest.update(&input);\n+\n+    digest.finalize()\n+}\n+\n+macro_rules! crypto_unary_string_function {\n+    ($NAME:ident, $FUNC:expr) => {\n+        /// crypto function that accepts Utf8 or LargeUtf8 and returns Utf8 string\n+        pub fn $NAME<T: StringOffsetSizeTrait>(\n+            args: &[ArrayRef],\n+        ) -> Result<GenericStringArray<i32>> {\n+            if args.len() != 1 {\n+                return Err(DataFusionError::Internal(format!(\n+                    \"{:?} args were supplied but {} takes exactly one argument\",\n+                    args.len(),\n+                    String::from(stringify!($NAME)),\n+                )));\n+            }\n+\n+            let array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            // first map is the iterator, second is for the `Option<_>`\n+            Ok(array.iter().map(|x| x.map(|x| $FUNC(x))).collect())\n+        }\n+    };\n+}\n+\n+macro_rules! crypto_unary_binary_function {\n+    ($NAME:ident, $FUNC:expr) => {\n+        /// crypto function that accepts Utf8 or LargeUtf8 and returns Binary\n+        pub fn $NAME<T: StringOffsetSizeTrait>(\n+            args: &[ArrayRef],\n+        ) -> Result<GenericBinaryArray<i32>> {\n+            if args.len() != 1 {\n+                return Err(DataFusionError::Internal(format!(\n+                    \"{:?} args were supplied but {} takes exactly one argument\",\n+                    args.len(),\n+                    String::from(stringify!($NAME)),\n+                )));\n+            }\n+\n+            let array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            let mut builder = BinaryBuilder::new(args.len());\n+\n+            for value in array.iter() {\n+                builder\n+                    .append_value($FUNC(value.unwrap()).as_slice())\n+                    .unwrap();\n+            }\n+\n+            Ok(builder.finish())\n+        }\n+    };\n+}\n+\n+crypto_unary_string_function!(md5, md5_process);\n+crypto_unary_binary_function!(sha224, sha_process::<Sha224>);\n+crypto_unary_binary_function!(sha256, sha_process::<Sha256>);\n+crypto_unary_binary_function!(sha384, sha_process::<Sha384>);\n+crypto_unary_binary_function!(sha512, sha_process::<Sha512>);\n\nReview comment:\n       IMO we should have a test of one of these functions here, with and without nulls, and with an empty string.\n\n##########\nFile path: rust/datafusion/src/physical_plan/crypto_expressions.rs\n##########\n@@ -0,0 +1,114 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! Crypto expressions\n+\n+use md5::Md5;\n+use sha2::{\n+    digest::Output as SHA2DigestOutput, Digest as SHA2Digest, Sha224, Sha256, Sha384,\n+    Sha512,\n+};\n+\n+use crate::error::{DataFusionError, Result};\n+use arrow::array::{\n+    ArrayRef, BinaryBuilder, GenericBinaryArray, GenericStringArray,\n+    StringOffsetSizeTrait,\n+};\n+\n+fn md5_process(input: &str) -> String {\n+    let mut digest = Md5::default();\n+    digest.update(&input);\n+\n+    let mut result = String::new();\n+\n+    for byte in &digest.finalize() {\n+        result.push_str(&format!(\"{:02x}\", byte));\n+    }\n+\n+    result\n+}\n+\n+// It's not possible to return &[u8], because trait in trait without short lifetime\n+fn sha_process<D: SHA2Digest + Default>(input: &str) -> SHA2DigestOutput<D> {\n+    let mut digest = D::default();\n+    digest.update(&input);\n+\n+    digest.finalize()\n+}\n+\n+macro_rules! crypto_unary_string_function {\n+    ($NAME:ident, $FUNC:expr) => {\n+        /// crypto function that accepts Utf8 or LargeUtf8 and returns Utf8 string\n+        pub fn $NAME<T: StringOffsetSizeTrait>(\n+            args: &[ArrayRef],\n+        ) -> Result<GenericStringArray<i32>> {\n+            if args.len() != 1 {\n+                return Err(DataFusionError::Internal(format!(\n+                    \"{:?} args were supplied but {} takes exactly one argument\",\n+                    args.len(),\n+                    String::from(stringify!($NAME)),\n+                )));\n+            }\n+\n+            let array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            // first map is the iterator, second is for the `Option<_>`\n+            Ok(array.iter().map(|x| x.map(|x| $FUNC(x))).collect())\n+        }\n+    };\n+}\n+\n+macro_rules! crypto_unary_binary_function {\n+    ($NAME:ident, $FUNC:expr) => {\n+        /// crypto function that accepts Utf8 or LargeUtf8 and returns Binary\n+        pub fn $NAME<T: StringOffsetSizeTrait>(\n+            args: &[ArrayRef],\n+        ) -> Result<GenericBinaryArray<i32>> {\n+            if args.len() != 1 {\n+                return Err(DataFusionError::Internal(format!(\n+                    \"{:?} args were supplied but {} takes exactly one argument\",\n+                    args.len(),\n+                    String::from(stringify!($NAME)),\n+                )));\n+            }\n+\n+            let array = args[0]\n+                .as_any()\n+                .downcast_ref::<GenericStringArray<T>>()\n+                .unwrap();\n+\n+            let mut builder = BinaryBuilder::new(args.len());\n+\n+            for value in array.iter() {\n+                builder\n+                    .append_value($FUNC(value.unwrap()).as_slice())\n+                    .unwrap();\n+            }\n+\n+            Ok(builder.finish())\n+        }\n+    };\n+}\n+\n+crypto_unary_string_function!(md5, md5_process);\n\nReview comment:\n       Aren't these always of a fixed size (e.g. `128-bit` for md5)?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-10T04:21:16.203+0000",
                    "updated": "2021-01-10T04:21:16.203+0000",
                    "started": "2021-01-10T04:21:16.202+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533806",
                    "issueId": "13351111"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13351111/worklog/533883",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9139:\nURL: https://github.com/apache/arrow/pull/9139#issuecomment-756887914\n\n\n   https://issues.apache.org/jira/browse/ARROW-11188\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-10T04:28:49.454+0000",
                    "updated": "2021-01-10T04:28:49.454+0000",
                    "started": "2021-01-10T04:28:49.454+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533883",
                    "issueId": "13351111"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13351111/worklog/533906",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #9139:\nURL: https://github.com/apache/arrow/pull/9139#issuecomment-756952094\n\n\n   This PR probably needs to be rebased to pick up the fix for #9138 FYI\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-10T04:30:44.854+0000",
                    "updated": "2021-01-10T04:30:44.854+0000",
                    "started": "2021-01-10T04:30:44.854+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533906",
                    "issueId": "13351111"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13351111/worklog/533911",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ovr commented on pull request #9139:\nURL: https://github.com/apache/arrow/pull/9139#issuecomment-756956692\n\n\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-10T04:31:12.494+0000",
                    "updated": "2021-01-10T04:31:12.494+0000",
                    "started": "2021-01-10T04:31:12.494+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533911",
                    "issueId": "13351111"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13351111/worklog/533979",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #9139:\nURL: https://github.com/apache/arrow/pull/9139#discussion_r554557321\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/functions.rs\n##########\n@@ -392,23 +498,18 @@ fn signature(fun: &BuiltinScalarFunction) -> Signature {\n \n     // for now, the list is small, as we do not have many built-in functions.\n     match fun {\n-        BuiltinScalarFunction::Length => {\n-            Signature::Uniform(1, vec![DataType::Utf8, DataType::LargeUtf8])\n-        }\n         BuiltinScalarFunction::Concat => Signature::Variadic(vec![DataType::Utf8]),\n-        BuiltinScalarFunction::Lower => {\n-            Signature::Uniform(1, vec![DataType::Utf8, DataType::LargeUtf8])\n-        }\n-        BuiltinScalarFunction::Upper => {\n-            Signature::Uniform(1, vec![DataType::Utf8, DataType::LargeUtf8])\n-        }\n-        BuiltinScalarFunction::Trim => {\n-            Signature::Uniform(1, vec![DataType::Utf8, DataType::LargeUtf8])\n-        }\n-        BuiltinScalarFunction::Ltrim => {\n-            Signature::Uniform(1, vec![DataType::Utf8, DataType::LargeUtf8])\n-        }\n-        BuiltinScalarFunction::Rtrim => {\n+        BuiltinScalarFunction::Upper\n\nReview comment:\n       \ud83d\udc4d  nice cleanup\n\n##########\nFile path: rust/datafusion/Cargo.toml\n##########\n@@ -61,6 +61,8 @@ futures = \"0.3\"\n pin-project-lite= \"^0.2.0\"\n tokio = { version = \"0.2\", features = [\"macros\", \"blocking\", \"rt-core\", \"rt-threaded\", \"sync\"] }\n log = \"^0.4\"\n+md-5 = \"^0.9.1\"\n\nReview comment:\n       It seems to me like we might want to start offering a way to keep the number of required dependencies of DataFusion down. For example, in this case we could potentially put the use of crypto functions behind a feature flag. \r\n   \r\n   I am not proposing to add the feature flag as part of this PR, but more like trying to set the general direction of allowing users to pick features that they need and not have to pay compilation time (or binary size) cost for those they don't\r\n   \r\n   What do you think @jorgecarleitao  and @andygrove \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-10T12:03:00.674+0000",
                    "updated": "2021-01-10T12:03:00.674+0000",
                    "started": "2021-01-10T12:03:00.674+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533979",
                    "issueId": "13351111"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13351111/worklog/533981",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on pull request #9139:\nURL: https://github.com/apache/arrow/pull/9139#issuecomment-757472748\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/9139?src=pr&el=h1) Report\n   > Merging [#9139](https://codecov.io/gh/apache/arrow/pull/9139?src=pr&el=desc) (871e18c) into [master](https://codecov.io/gh/apache/arrow/commit/08cccd68802c9ddc3ca0a5d4bad6e4ba382d74b4?el=desc) (08cccd6) will **decrease** coverage by `0.04%`.\n   > The diff coverage is `66.66%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/9139/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/9139?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #9139      +/-   ##\n   ==========================================\n   - Coverage   81.81%   81.77%   -0.05%     \n   ==========================================\n     Files         214      215       +1     \n     Lines       51373    51461      +88     \n   ==========================================\n   + Hits        42033    42083      +50     \n   - Misses       9340     9378      +38     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/9139?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/datafusion/src/logical\\_plan/expr.rs](https://codecov.io/gh/apache/arrow/pull/9139/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9sb2dpY2FsX3BsYW4vZXhwci5ycw==) | `76.92% <\u00f8> (\u00f8)` | |\n   | [rust/datafusion/src/physical\\_plan/mod.rs](https://codecov.io/gh/apache/arrow/pull/9139/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL21vZC5ycw==) | `86.00% <\u00f8> (\u00f8)` | |\n   | [rust/arrow/src/util/display.rs](https://codecov.io/gh/apache/arrow/pull/9139/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvdXRpbC9kaXNwbGF5LnJz) | `48.33% <33.33%> (-0.79%)` | :arrow_down: |\n   | [rust/datafusion/src/physical\\_plan/functions.rs](https://codecov.io/gh/apache/arrow/pull/9139/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL2Z1bmN0aW9ucy5ycw==) | `74.82% <60.00%> (-3.69%)` | :arrow_down: |\n   | [...datafusion/src/physical\\_plan/crypto\\_expressions.rs](https://codecov.io/gh/apache/arrow/pull/9139/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL2NyeXB0b19leHByZXNzaW9ucy5ycw==) | `75.00% <75.00%> (\u00f8)` | |\n   | [rust/datafusion/tests/sql.rs](https://codecov.io/gh/apache/arrow/pull/9139/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3Rlc3RzL3NxbC5ycw==) | `99.82% <100.00%> (+<0.01%)` | :arrow_up: |\n   | [rust/datafusion/src/datasource/csv.rs](https://codecov.io/gh/apache/arrow/pull/9139/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9kYXRhc291cmNlL2Nzdi5ycw==) | `65.00% <0.00%> (-16.25%)` | :arrow_down: |\n   | [rust/datafusion/src/datasource/parquet.rs](https://codecov.io/gh/apache/arrow/pull/9139/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9kYXRhc291cmNlL3BhcnF1ZXQucnM=) | `94.77% <0.00%> (-1.44%)` | :arrow_down: |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/9139?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/9139?src=pr&el=footer). Last update [08cccd6...871e18c](https://codecov.io/gh/apache/arrow/pull/9139?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-10T13:02:05.817+0000",
                    "updated": "2021-01-10T13:02:05.817+0000",
                    "started": "2021-01-10T13:02:05.816+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "533981",
                    "issueId": "13351111"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13351111/worklog/534037",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #9139:\nURL: https://github.com/apache/arrow/pull/9139#discussion_r554604954\n\n\n\n##########\nFile path: rust/datafusion/Cargo.toml\n##########\n@@ -61,6 +61,8 @@ futures = \"0.3\"\n pin-project-lite= \"^0.2.0\"\n tokio = { version = \"0.2\", features = [\"macros\", \"blocking\", \"rt-core\", \"rt-threaded\", \"sync\"] }\n log = \"^0.4\"\n+md-5 = \"^0.9.1\"\n\nReview comment:\n       I generally agree with you, @alamb. In this case, we want to support posgres dialect, so it makes sense to support these functions (and not implement these ourselves, as they are even security related).\r\n   \r\n   In general, as long as the crates are small, I do not see a major issue. Our expensive dependencies are Tokio, crossbeam, etc, specially because they really increase the compile time (e.g. compared to the arrow crate).\r\n   \r\n   We already offer a scalar UDF that has the same performance as our own expressions. So, I think that this is the most we can do here.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-01-10T18:29:08.052+0000",
                    "updated": "2021-01-10T18:29:08.052+0000",
                    "started": "2021-01-10T18:29:08.051+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "534037",
                    "issueId": "13351111"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 15000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@36985d25[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@42d104f5[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@56f7d950[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1c4b89d7[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6d7c4953[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@59f0458b[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@31252abc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7160087e[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7e59f1d0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@255e2f8d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3db69150[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4c645d60[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 15000,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Jan 11 21:41:55 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-01-11T21:41:55.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-11188/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-01-08T15:50:39.000+0000",
        "updated": "2021-01-11T21:42:14.000+0000",
        "timeoriginalestimate": null,
        "description": "Hello!\r\n\r\n\u00a0\r\n * md5\r\n * sha224\r\n * sha256\r\n * sha384\r\n * sha512\r\n\r\n\u00a0\r\n\r\nThanks",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 15000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Implement crypto functions from PostgreSQL dialect",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13351111/comment/17262944",
                    "id": "17262944",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 9139\n[https://github.com/apache/arrow/pull/9139]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-01-11T21:41:55.515+0000",
                    "updated": "2021-01-11T21:41:55.515+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0me3c:",
        "customfield_12314139": null
    }
}