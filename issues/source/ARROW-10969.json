{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13346880",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346880",
    "key": "ARROW-10969",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=MikeSeddonAU",
            "name": "MikeSeddonAU",
            "key": "mikeseddonau",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Mike Seddon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=MikeSeddonAU",
            "name": "MikeSeddonAU",
            "key": "mikeseddonau",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Mike Seddon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=MikeSeddonAU",
            "name": "MikeSeddonAU",
            "key": "mikeseddonau",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Mike Seddon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 13800,
            "total": 13800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 13800,
            "total": 13800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10969/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 23,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346880/worklog/526194",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 opened a new pull request #8966:\nURL: https://github.com/apache/arrow/pull/8966\n\n\n   This PR implements some of the basic string functions as per the ANSI SQL specification. To properly meet the ANSI specification work will need to be done on the `sqlparser` to support the verbose style that the ANSI spec has such as \r\n   ```sql\r\n   trim(both 'xyz' from 'yxTomxx')\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-19T00:25:21.129+0000",
                    "updated": "2020-12-19T00:25:21.129+0000",
                    "started": "2020-12-19T00:25:21.129+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526194",
                    "issueId": "13346880"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346880/worklog/526196",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8966:\nURL: https://github.com/apache/arrow/pull/8966#issuecomment-748388644\n\n\n   https://issues.apache.org/jira/browse/ARROW-10969\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-19T00:34:38.113+0000",
                    "updated": "2020-12-19T00:34:38.113+0000",
                    "started": "2020-12-19T00:34:38.113+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526196",
                    "issueId": "13346880"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346880/worklog/526229",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8966:\nURL: https://github.com/apache/arrow/pull/8966#discussion_r546203216\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -66,3 +71,73 @@ pub fn concatenate(args: &[ArrayRef]) -> Result<StringArray> {\n     }\n     Ok(builder.finish())\n }\n+\n+/// character_length returns number of characters in the string\n+/// character_length('jos\u00e9') = 4\n+pub fn character_length(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let num_rows = args[0].len();\n+    let string_args =\n+        &args[0]\n+            .as_any()\n+            .downcast_ref::<StringArray>()\n+            .ok_or_else(|| {\n+                DataFusionError::Internal(\n+                    \"could not cast input to StringArray\".to_string(),\n+                )\n+            })?;\n+\n+    let result = (0..num_rows)\n+        .map(|i| {\n+            if string_args.is_null(i) {\n+                // NB: Since we use the same null bitset as the input,\n+                // the output for this value will be ignored, but we\n+                // need some value in the array we are building.\n+                Ok(0)\n+            } else {\n+                Ok(string_args.value(i).chars().count() as i32)\n+            }\n+        })\n+        .collect::<Result<Vec<_>>>()?;\n+\n+    let data = ArrayData::new(\n+        DataType::Int32,\n+        num_rows,\n+        Some(string_args.null_count()),\n+        string_args.data().null_buffer().cloned(),\n+        0,\n+        vec![Buffer::from(result.to_byte_slice())],\n+        vec![],\n+    );\n+\n+    Ok(Int32Array::from(Arc::new(data)))\n+}\n+\n+macro_rules! string_unary_function {\n+    ($NAME:ident, $FUNC:ident) => {\n+        /// string function that accepts utf8 and returns utf8\n+        pub fn $NAME(args: &[ArrayRef]) -> Result<StringArray> {\n+            let string_args = &args[0]\n+                .as_any()\n+                .downcast_ref::<StringArray>()\n+                .ok_or_else(|| {\n+                    DataFusionError::Internal(\n+                        \"could not cast input to StringArray\".to_string(),\n+                    )\n+                })?;\n+\n+            let mut builder = StringBuilder::new(args.len());\n+            for index in 0..args[0].len() {\n+                if string_args.is_null(index) {\n+                    builder.append_null()?;\n+                } else {\n+                    builder.append_value(&string_args.value(index).$FUNC())?;\n+                }\n+            }\n+            Ok(builder.finish())\n\nReview comment:\n       The Arrow crate implements efficient `IntoIter` and `FromIter` that generally make the code simpler to read and more performant because it performs less bound checks. I.e. something like\r\n   \r\n   ```rust\r\n   string_args.iter().map(|x| x.map(|x| x.$FUNC())).collect()\r\n   // (first map is the iterator, second is for the `Option<_>`\r\n   ```\r\n   \r\n   will probably work.\n\n##########\nFile path: rust/datafusion/tests/sql.rs\n##########\n@@ -1826,3 +1826,21 @@ async fn csv_between_expr_negated() -> Result<()> {\n     assert_eq!(expected, actual);\n     Ok(())\n }\n+\n+#[tokio::test]\n+async fn string_expressions() -> Result<()> {\n+    let mut ctx = ExecutionContext::new();\n+    register_aggregate_csv(&mut ctx)?;\n+    let sql = \"SELECT\n+        char_length('jos\u00e9') AS char_length\n+        ,character_length('jos\u00e9') AS character_length\n+        ,lower('TOM') AS lower\n+        ,upper('tom') AS upper\n+        ,trim(' tom ') AS trim\n\nReview comment:\n       I think that this does not cover the null cases.\n\n##########\nFile path: rust/datafusion/src/physical_plan/functions.rs\n##########\n@@ -203,6 +216,10 @@ pub fn return_type(\n             }\n         }),\n         BuiltinScalarFunction::Concat => Ok(DataType::Utf8),\n+        BuiltinScalarFunction::CharacterLength => Ok(DataType::Int32),\n+        BuiltinScalarFunction::Lower => Ok(DataType::Utf8),\n+        BuiltinScalarFunction::Upper => Ok(DataType::Utf8),\n+        BuiltinScalarFunction::Trim => Ok(DataType::Utf8),\n\nReview comment:\n       Could you add functions to `logical_plan::expr` and `prelude` to expose these new functions also there, so that they can also be used in the DataFrame API?\n\n##########\nFile path: rust/datafusion/tests/sql.rs\n##########\n@@ -1826,3 +1826,21 @@ async fn csv_between_expr_negated() -> Result<()> {\n     assert_eq!(expected, actual);\n     Ok(())\n }\n+\n+#[tokio::test]\n+async fn string_expressions() -> Result<()> {\n+    let mut ctx = ExecutionContext::new();\n+    register_aggregate_csv(&mut ctx)?;\n\nReview comment:\n       Do we need to register this CSV?\n\n##########\nFile path: rust/datafusion/src/physical_plan/functions.rs\n##########\n@@ -280,6 +309,18 @@ fn signature(fun: &BuiltinScalarFunction) -> Signature {\n             Signature::Uniform(1, vec![DataType::Utf8, DataType::LargeUtf8])\n         }\n         BuiltinScalarFunction::Concat => Signature::Variadic(vec![DataType::Utf8]),\n+        BuiltinScalarFunction::CharacterLength => {\n+            Signature::Uniform(1, vec![DataType::Utf8, DataType::LargeUtf8])\n\nReview comment:\n       The signature states that `LargeUtf8` is supported, but the implementation only supports `Utf8`.\r\n   \r\n   If we only use `DataType::Utf8` here, the planner will coerce any `LargeUtf8` to `Utf8`. :)\n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -66,3 +71,73 @@ pub fn concatenate(args: &[ArrayRef]) -> Result<StringArray> {\n     }\n     Ok(builder.finish())\n }\n+\n+/// character_length returns number of characters in the string\n+/// character_length('jos\u00e9') = 4\n+pub fn character_length(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let num_rows = args[0].len();\n+    let string_args =\n+        &args[0]\n+            .as_any()\n+            .downcast_ref::<StringArray>()\n+            .ok_or_else(|| {\n+                DataFusionError::Internal(\n+                    \"could not cast input to StringArray\".to_string(),\n+                )\n+            })?;\n+\n+    let result = (0..num_rows)\n\nReview comment:\n       I would try to use the from and to iterator here also. It should make this code simpler also.\n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -66,3 +71,73 @@ pub fn concatenate(args: &[ArrayRef]) -> Result<StringArray> {\n     }\n     Ok(builder.finish())\n }\n+\n+/// character_length returns number of characters in the string\n+/// character_length('jos\u00e9') = 4\n+pub fn character_length(args: &[ArrayRef]) -> Result<Int32Array> {\n\nReview comment:\n       Any reason to use `Int32` instead of `UInt32`?\n\n##########\nFile path: rust/datafusion/src/physical_plan/functions.rs\n##########\n@@ -118,6 +118,14 @@ pub enum BuiltinScalarFunction {\n     Length,\n     /// concat\n     Concat,\n+    /// character_length\n+    CharacterLength,\n+    /// lower\n+    Lower,\n+    /// upper\n+    Upper,\n+    /// ltrim\n\nReview comment:\n       Is this `ltrim` or trim? The test seems to indicate `trim`.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-19T07:16:57.724+0000",
                    "updated": "2020-12-19T07:16:57.724+0000",
                    "started": "2020-12-19T07:16:57.724+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526229",
                    "issueId": "13346880"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346880/worklog/526230",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on pull request #8966:\nURL: https://github.com/apache/arrow/pull/8966#issuecomment-748433846\n\n\n   > Overall, this looks really good. Thanks a lot for taking the time to implement these.\r\n   > \r\n   > I left a lot of comments, but they are all pretty small, so please do not take their number by the correctness of this: you understood and used all the APIs really well, they are just considering edge cases and small consistency improvements.\r\n   \r\n   Thanks @jorgecarleitao and no problem with the number of comments.\r\n   \r\n   I will work through these and let you know.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-19T07:23:36.677+0000",
                    "updated": "2020-12-19T07:23:36.677+0000",
                    "started": "2020-12-19T07:23:36.676+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526230",
                    "issueId": "13346880"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346880/worklog/526231",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #8966:\nURL: https://github.com/apache/arrow/pull/8966#discussion_r546205335\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/functions.rs\n##########\n@@ -118,6 +118,14 @@ pub enum BuiltinScalarFunction {\n     Length,\n     /// concat\n     Concat,\n+    /// character_length\n+    CharacterLength,\n+    /// lower\n+    Lower,\n+    /// upper\n+    Upper,\n+    /// ltrim\n\nReview comment:\n       Yes, sorry, I had actually implemented quite a few more functions (more `ltrim`, `rtrim` and `position`) but then removed them as technically `ltrim` and `rtrim` is not part of the ANSI standard but are Postgres additions (and others).\r\n   \r\n   I think the decision on SQL dialect to support is required before continuing too much further.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-19T07:25:50.871+0000",
                    "updated": "2020-12-19T07:25:50.871+0000",
                    "started": "2020-12-19T07:25:50.870+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526231",
                    "issueId": "13346880"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346880/worklog/526232",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #8966:\nURL: https://github.com/apache/arrow/pull/8966#discussion_r546205566\n\n\n\n##########\nFile path: rust/datafusion/tests/sql.rs\n##########\n@@ -1826,3 +1826,21 @@ async fn csv_between_expr_negated() -> Result<()> {\n     assert_eq!(expected, actual);\n     Ok(())\n }\n+\n+#[tokio::test]\n+async fn string_expressions() -> Result<()> {\n+    let mut ctx = ExecutionContext::new();\n+    register_aggregate_csv(&mut ctx)?;\n\nReview comment:\n       correct. removed.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-19T07:28:13.835+0000",
                    "updated": "2020-12-19T07:28:13.835+0000",
                    "started": "2020-12-19T07:28:13.834+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526232",
                    "issueId": "13346880"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346880/worklog/526234",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #8966:\nURL: https://github.com/apache/arrow/pull/8966#discussion_r546206084\n\n\n\n##########\nFile path: rust/datafusion/tests/sql.rs\n##########\n@@ -1826,3 +1826,21 @@ async fn csv_between_expr_negated() -> Result<()> {\n     assert_eq!(expected, actual);\n     Ok(())\n }\n+\n+#[tokio::test]\n+async fn string_expressions() -> Result<()> {\n+    let mut ctx = ExecutionContext::new();\n+    register_aggregate_csv(&mut ctx)?;\n+    let sql = \"SELECT\n+        char_length('jos\u00e9') AS char_length\n+        ,character_length('jos\u00e9') AS character_length\n+        ,lower('TOM') AS lower\n+        ,upper('tom') AS upper\n+        ,trim(' tom ') AS trim\n\nReview comment:\n       Yes. \r\n   \r\n   I have raised https://issues.apache.org/jira/browse/ARROW-10970 to provide the ability support SQL like:\r\n   \r\n   ```sql\r\n   SELECT char_length(NULL) AS char_length_null\r\n   ```\r\n   \r\n   So i can see if I can add that too.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-19T07:34:43.214+0000",
                    "updated": "2020-12-19T07:34:43.214+0000",
                    "started": "2020-12-19T07:34:43.214+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526234",
                    "issueId": "13346880"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346880/worklog/526316",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #8966:\nURL: https://github.com/apache/arrow/pull/8966#issuecomment-748493660\n\n\n   This looks great. Thanks @seddonm1 \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-19T16:15:06.451+0000",
                    "updated": "2020-12-19T16:15:06.451+0000",
                    "started": "2020-12-19T16:15:06.451+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526316",
                    "issueId": "13346880"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346880/worklog/526409",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #8966:\nURL: https://github.com/apache/arrow/pull/8966#discussion_r546302442\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -66,3 +71,73 @@ pub fn concatenate(args: &[ArrayRef]) -> Result<StringArray> {\n     }\n     Ok(builder.finish())\n }\n+\n+/// character_length returns number of characters in the string\n+/// character_length('jos\u00e9') = 4\n+pub fn character_length(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let num_rows = args[0].len();\n+    let string_args =\n+        &args[0]\n+            .as_any()\n+            .downcast_ref::<StringArray>()\n+            .ok_or_else(|| {\n+                DataFusionError::Internal(\n+                    \"could not cast input to StringArray\".to_string(),\n+                )\n+            })?;\n+\n+    let result = (0..num_rows)\n+        .map(|i| {\n+            if string_args.is_null(i) {\n+                // NB: Since we use the same null bitset as the input,\n+                // the output for this value will be ignored, but we\n+                // need some value in the array we are building.\n+                Ok(0)\n+            } else {\n+                Ok(string_args.value(i).chars().count() as i32)\n+            }\n+        })\n+        .collect::<Result<Vec<_>>>()?;\n+\n+    let data = ArrayData::new(\n+        DataType::Int32,\n+        num_rows,\n+        Some(string_args.null_count()),\n+        string_args.data().null_buffer().cloned(),\n+        0,\n+        vec![Buffer::from(result.to_byte_slice())],\n+        vec![],\n+    );\n+\n+    Ok(Int32Array::from(Arc::new(data)))\n+}\n+\n+macro_rules! string_unary_function {\n+    ($NAME:ident, $FUNC:ident) => {\n+        /// string function that accepts utf8 and returns utf8\n+        pub fn $NAME(args: &[ArrayRef]) -> Result<StringArray> {\n+            let string_args = &args[0]\n+                .as_any()\n+                .downcast_ref::<StringArray>()\n+                .ok_or_else(|| {\n+                    DataFusionError::Internal(\n+                        \"could not cast input to StringArray\".to_string(),\n+                    )\n+                })?;\n+\n+            let mut builder = StringBuilder::new(args.len());\n+            for index in 0..args[0].len() {\n+                if string_args.is_null(index) {\n+                    builder.append_null()?;\n+                } else {\n+                    builder.append_value(&string_args.value(index).$FUNC())?;\n+                }\n+            }\n+            Ok(builder.finish())\n\nReview comment:\n       This did work well but I have struggled to make it work with code that supports both `Utf8` and `LargeUtf8` types as the code does now. Maybe you could help here.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-20T00:44:25.533+0000",
                    "updated": "2020-12-20T00:44:25.533+0000",
                    "started": "2020-12-20T00:44:25.533+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526409",
                    "issueId": "13346880"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346880/worklog/526410",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #8966:\nURL: https://github.com/apache/arrow/pull/8966#discussion_r546302507\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/functions.rs\n##########\n@@ -280,6 +309,18 @@ fn signature(fun: &BuiltinScalarFunction) -> Signature {\n             Signature::Uniform(1, vec![DataType::Utf8, DataType::LargeUtf8])\n         }\n         BuiltinScalarFunction::Concat => Signature::Variadic(vec![DataType::Utf8]),\n+        BuiltinScalarFunction::CharacterLength => {\n+            Signature::Uniform(1, vec![DataType::Utf8, DataType::LargeUtf8])\n\nReview comment:\n       I have reworked the macros significantly to now support Utf8 and LargeUtf8 functions going forward. It would be trivial to add more functions like `ltrim` which support both types.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-20T00:45:18.484+0000",
                    "updated": "2020-12-20T00:45:18.484+0000",
                    "started": "2020-12-20T00:45:18.484+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526410",
                    "issueId": "13346880"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346880/worklog/526413",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on pull request #8966:\nURL: https://github.com/apache/arrow/pull/8966#issuecomment-748546622\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/8966?src=pr&el=h1) Report\n   > Merging [#8966](https://codecov.io/gh/apache/arrow/pull/8966?src=pr&el=desc) (8267501) into [master](https://codecov.io/gh/apache/arrow/commit/519e9da4fc1698f686525f4226295f3680a3f3db?el=desc) (519e9da) will **decrease** coverage by `0.06%`.\n   > The diff coverage is `84.48%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/8966/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/8966?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #8966      +/-   ##\n   ==========================================\n   - Coverage   83.26%   83.19%   -0.07%     \n   ==========================================\n     Files         196      199       +3     \n     Lines       48192    48718     +526     \n   ==========================================\n   + Hits        40125    40529     +404     \n   - Misses       8067     8189     +122     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/8966?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/datafusion/src/logical\\_plan/expr.rs](https://codecov.io/gh/apache/arrow/pull/8966/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9sb2dpY2FsX3BsYW4vZXhwci5ycw==) | `76.76% <\u00f8> (\u00f8)` | |\n   | [rust/datafusion/src/physical\\_plan/functions.rs](https://codecov.io/gh/apache/arrow/pull/8966/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL2Z1bmN0aW9ucy5ycw==) | `81.73% <80.00%> (-0.30%)` | :arrow_down: |\n   | [...datafusion/src/physical\\_plan/string\\_expressions.rs](https://codecov.io/gh/apache/arrow/pull/8966/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL3N0cmluZ19leHByZXNzaW9ucy5ycw==) | `85.00% <84.21%> (-0.72%)` | :arrow_down: |\n   | [rust/datafusion/src/sql/planner.rs](https://codecov.io/gh/apache/arrow/pull/8966/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9zcWwvcGxhbm5lci5ycw==) | `84.81% <100.00%> (+3.08%)` | :arrow_up: |\n   | [rust/datafusion/tests/sql.rs](https://codecov.io/gh/apache/arrow/pull/8966/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3Rlc3RzL3NxbC5ycw==) | `99.83% <100.00%> (+<0.01%)` | :arrow_up: |\n   | [rust/arrow/src/compute/kernels/arithmetic.rs](https://codecov.io/gh/apache/arrow/pull/8966/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvY29tcHV0ZS9rZXJuZWxzL2FyaXRobWV0aWMucnM=) | `89.79% <0.00%> (-9.23%)` | :arrow_down: |\n   | [rust/datafusion/src/optimizer/filter\\_push\\_down.rs](https://codecov.io/gh/apache/arrow/pull/8966/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvZmlsdGVyX3B1c2hfZG93bi5ycw==) | `97.65% <0.00%> (-1.74%)` | :arrow_down: |\n   | [rust/datafusion/src/logical\\_plan/builder.rs](https://codecov.io/gh/apache/arrow/pull/8966/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9sb2dpY2FsX3BsYW4vYnVpbGRlci5ycw==) | `90.10% <0.00%> (-1.00%)` | :arrow_down: |\n   | [rust/parquet/src/encodings/encoding.rs](https://codecov.io/gh/apache/arrow/pull/8966/diff?src=pr&el=tree#diff-cnVzdC9wYXJxdWV0L3NyYy9lbmNvZGluZ3MvZW5jb2RpbmcucnM=) | `95.24% <0.00%> (-0.20%)` | :arrow_down: |\n   | [rust/datafusion/src/physical\\_plan/planner.rs](https://codecov.io/gh/apache/arrow/pull/8966/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL3BsYW5uZXIucnM=) | `80.45% <0.00%> (-0.10%)` | :arrow_down: |\n   | ... and [17 more](https://codecov.io/gh/apache/arrow/pull/8966/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/8966?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/8966?src=pr&el=footer). Last update [5819943...8267501](https://codecov.io/gh/apache/arrow/pull/8966?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-20T00:56:55.450+0000",
                    "updated": "2020-12-20T00:56:55.450+0000",
                    "started": "2020-12-20T00:56:55.449+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526413",
                    "issueId": "13346880"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346880/worklog/526414",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #8966:\nURL: https://github.com/apache/arrow/pull/8966#discussion_r546304152\n\n\n\n##########\nFile path: rust/datafusion/tests/sql.rs\n##########\n@@ -1826,3 +1826,21 @@ async fn csv_between_expr_negated() -> Result<()> {\n     assert_eq!(expected, actual);\n     Ok(())\n }\n+\n+#[tokio::test]\n+async fn string_expressions() -> Result<()> {\n+    let mut ctx = ExecutionContext::new();\n+    register_aggregate_csv(&mut ctx)?;\n+    let sql = \"SELECT\n+        char_length('jos\u00e9') AS char_length\n+        ,character_length('jos\u00e9') AS character_length\n+        ,lower('TOM') AS lower\n+        ,upper('tom') AS upper\n+        ,trim(' tom ') AS trim\n\nReview comment:\n       @andygrove copying you in due to decision:\r\n   \r\n   I have now added the `NULL` value to both the test cases and the planner.\r\n   \r\n   This is where things get interesting. For this statement:\r\n   \r\n   ```sql\r\n   SELECT NULL\r\n   ```\r\n   \r\n   Spark implements a special `NullType` for this return type but that creates a lot of side effects for things like the Parquet writer and JDBC drivers do not support this type.\r\n   \r\n   I tested Postgres:\r\n   \r\n   ```sql\r\n   CREATE TABLE test AS\r\n   SELECT NULL;\r\n   ```\r\n   \r\n   The DDL for this table shows that column as a `text` type so that is why I have applied the default `utf8` type to `Value(Null)`.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-20T01:07:59.027+0000",
                    "updated": "2020-12-20T01:07:59.027+0000",
                    "started": "2020-12-20T01:07:59.027+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526414",
                    "issueId": "13346880"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346880/worklog/526415",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #8966:\nURL: https://github.com/apache/arrow/pull/8966#discussion_r546304202\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -66,3 +71,73 @@ pub fn concatenate(args: &[ArrayRef]) -> Result<StringArray> {\n     }\n     Ok(builder.finish())\n }\n+\n+/// character_length returns number of characters in the string\n+/// character_length('jos\u00e9') = 4\n+pub fn character_length(args: &[ArrayRef]) -> Result<Int32Array> {\n\nReview comment:\n       Agree and fixed.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-20T01:08:31.970+0000",
                    "updated": "2020-12-20T01:08:31.970+0000",
                    "started": "2020-12-20T01:08:31.969+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526415",
                    "issueId": "13346880"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346880/worklog/526416",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on pull request #8966:\nURL: https://github.com/apache/arrow/pull/8966#issuecomment-748547812\n\n\n   @jorgecarleitao Thanks for your comments (they really help me learn) and have done a major refactor. \r\n   \r\n   Please pay close attention to the comments here: https://github.com/apache/arrow/pull/8966#discussion_r546304152 as I do not want to make decisions like that on my own.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-20T01:09:34.944+0000",
                    "updated": "2020-12-20T01:09:34.944+0000",
                    "started": "2020-12-20T01:09:34.944+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526416",
                    "issueId": "13346880"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346880/worklog/526541",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8966:\nURL: https://github.com/apache/arrow/pull/8966#discussion_r546400453\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -66,3 +71,73 @@ pub fn concatenate(args: &[ArrayRef]) -> Result<StringArray> {\n     }\n     Ok(builder.finish())\n }\n+\n+/// character_length returns number of characters in the string\n+/// character_length('jos\u00e9') = 4\n+pub fn character_length(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let num_rows = args[0].len();\n+    let string_args =\n+        &args[0]\n+            .as_any()\n+            .downcast_ref::<StringArray>()\n+            .ok_or_else(|| {\n+                DataFusionError::Internal(\n+                    \"could not cast input to StringArray\".to_string(),\n+                )\n+            })?;\n+\n+    let result = (0..num_rows)\n+        .map(|i| {\n+            if string_args.is_null(i) {\n+                // NB: Since we use the same null bitset as the input,\n+                // the output for this value will be ignored, but we\n+                // need some value in the array we are building.\n+                Ok(0)\n+            } else {\n+                Ok(string_args.value(i).chars().count() as i32)\n+            }\n+        })\n+        .collect::<Result<Vec<_>>>()?;\n+\n+    let data = ArrayData::new(\n+        DataType::Int32,\n+        num_rows,\n+        Some(string_args.null_count()),\n+        string_args.data().null_buffer().cloned(),\n+        0,\n+        vec![Buffer::from(result.to_byte_slice())],\n+        vec![],\n+    );\n+\n+    Ok(Int32Array::from(Arc::new(data)))\n+}\n+\n+macro_rules! string_unary_function {\n+    ($NAME:ident, $FUNC:ident) => {\n+        /// string function that accepts utf8 and returns utf8\n+        pub fn $NAME(args: &[ArrayRef]) -> Result<StringArray> {\n+            let string_args = &args[0]\n+                .as_any()\n+                .downcast_ref::<StringArray>()\n+                .ok_or_else(|| {\n+                    DataFusionError::Internal(\n+                        \"could not cast input to StringArray\".to_string(),\n+                    )\n+                })?;\n+\n+            let mut builder = StringBuilder::new(args.len());\n+            for index in 0..args[0].len() {\n+                if string_args.is_null(index) {\n+                    builder.append_null()?;\n+                } else {\n+                    builder.append_value(&string_args.value(index).$FUNC())?;\n+                }\n+            }\n+            Ok(builder.finish())\n\nReview comment:\n       The trick is to use the generic `GenericStringArray`, whose `StringArray` and `LargeStringArray` are concrete types of. Something like\r\n   \r\n   ```rust\r\n   fn op<T: StringOffsetSizeTrait>(array: GenericStringArray<T>) -> GenericStringArray<T> {\r\n        let array = array.downcast::<GenericStringArray<T>>().unwrap();\r\n   \r\n        array.iter().map(|x| x.map(|x| x.$FUNC())).collect()\r\n   }\r\n   ```\r\n   \r\n   The FromIter and ToIterator are implemented for the generic struct and thus the compiler should be able to resolve these for both `T: i32` and `T: i64`.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-20T16:42:09.687+0000",
                    "updated": "2020-12-20T16:42:09.687+0000",
                    "started": "2020-12-20T16:42:09.687+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526541",
                    "issueId": "13346880"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346880/worklog/526604",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #8966:\nURL: https://github.com/apache/arrow/pull/8966#discussion_r546443419\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -66,3 +71,73 @@ pub fn concatenate(args: &[ArrayRef]) -> Result<StringArray> {\n     }\n     Ok(builder.finish())\n }\n+\n+/// character_length returns number of characters in the string\n+/// character_length('jos\u00e9') = 4\n+pub fn character_length(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let num_rows = args[0].len();\n+    let string_args =\n+        &args[0]\n+            .as_any()\n+            .downcast_ref::<StringArray>()\n+            .ok_or_else(|| {\n+                DataFusionError::Internal(\n+                    \"could not cast input to StringArray\".to_string(),\n+                )\n+            })?;\n+\n+    let result = (0..num_rows)\n+        .map(|i| {\n+            if string_args.is_null(i) {\n+                // NB: Since we use the same null bitset as the input,\n+                // the output for this value will be ignored, but we\n+                // need some value in the array we are building.\n+                Ok(0)\n+            } else {\n+                Ok(string_args.value(i).chars().count() as i32)\n+            }\n+        })\n+        .collect::<Result<Vec<_>>>()?;\n+\n+    let data = ArrayData::new(\n+        DataType::Int32,\n+        num_rows,\n+        Some(string_args.null_count()),\n+        string_args.data().null_buffer().cloned(),\n+        0,\n+        vec![Buffer::from(result.to_byte_slice())],\n+        vec![],\n+    );\n+\n+    Ok(Int32Array::from(Arc::new(data)))\n+}\n+\n+macro_rules! string_unary_function {\n+    ($NAME:ident, $FUNC:ident) => {\n+        /// string function that accepts utf8 and returns utf8\n+        pub fn $NAME(args: &[ArrayRef]) -> Result<StringArray> {\n+            let string_args = &args[0]\n+                .as_any()\n+                .downcast_ref::<StringArray>()\n+                .ok_or_else(|| {\n+                    DataFusionError::Internal(\n+                        \"could not cast input to StringArray\".to_string(),\n+                    )\n+                })?;\n+\n+            let mut builder = StringBuilder::new(args.len());\n+            for index in 0..args[0].len() {\n+                if string_args.is_null(index) {\n+                    builder.append_null()?;\n+                } else {\n+                    builder.append_value(&string_args.value(index).$FUNC())?;\n+                }\n+            }\n+            Ok(builder.finish())\n\nReview comment:\n       Thanks @jorgecarleitao . Your code makes a lot of sense and the macro is much cleaner however I am stuck at the next bit which is how to pass in `T`. I can do it in `functions::create_physical_expr` like below but this does not feel correct.\r\n   \r\n   ```rust\r\n   BuiltinScalarFunction::Lower => {\r\n       |args| {\r\n           match args[0].data_type() {\r\n               DataType::Utf8 => {\r\n                   Ok(Arc::new(string_expressions::lower::<i32>(args)?))\r\n               }\r\n               DataType::LargeUtf8 => {\r\n                   Ok(Arc::new(string_expressions::lower::<i64>(args)?))\r\n               }\r\n               other => Err(DataFusionError::Internal(format!(\r\n                   \"Unsupported data type {:?} for function lower\",\r\n                   other,\r\n               ))),\r\n           }\r\n       }\r\n   }\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-20T22:13:02.179+0000",
                    "updated": "2020-12-20T22:13:02.179+0000",
                    "started": "2020-12-20T22:13:02.179+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526604",
                    "issueId": "13346880"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346880/worklog/526605",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #8966:\nURL: https://github.com/apache/arrow/pull/8966#discussion_r546443419\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -66,3 +71,73 @@ pub fn concatenate(args: &[ArrayRef]) -> Result<StringArray> {\n     }\n     Ok(builder.finish())\n }\n+\n+/// character_length returns number of characters in the string\n+/// character_length('jos\u00e9') = 4\n+pub fn character_length(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let num_rows = args[0].len();\n+    let string_args =\n+        &args[0]\n+            .as_any()\n+            .downcast_ref::<StringArray>()\n+            .ok_or_else(|| {\n+                DataFusionError::Internal(\n+                    \"could not cast input to StringArray\".to_string(),\n+                )\n+            })?;\n+\n+    let result = (0..num_rows)\n+        .map(|i| {\n+            if string_args.is_null(i) {\n+                // NB: Since we use the same null bitset as the input,\n+                // the output for this value will be ignored, but we\n+                // need some value in the array we are building.\n+                Ok(0)\n+            } else {\n+                Ok(string_args.value(i).chars().count() as i32)\n+            }\n+        })\n+        .collect::<Result<Vec<_>>>()?;\n+\n+    let data = ArrayData::new(\n+        DataType::Int32,\n+        num_rows,\n+        Some(string_args.null_count()),\n+        string_args.data().null_buffer().cloned(),\n+        0,\n+        vec![Buffer::from(result.to_byte_slice())],\n+        vec![],\n+    );\n+\n+    Ok(Int32Array::from(Arc::new(data)))\n+}\n+\n+macro_rules! string_unary_function {\n+    ($NAME:ident, $FUNC:ident) => {\n+        /// string function that accepts utf8 and returns utf8\n+        pub fn $NAME(args: &[ArrayRef]) -> Result<StringArray> {\n+            let string_args = &args[0]\n+                .as_any()\n+                .downcast_ref::<StringArray>()\n+                .ok_or_else(|| {\n+                    DataFusionError::Internal(\n+                        \"could not cast input to StringArray\".to_string(),\n+                    )\n+                })?;\n+\n+            let mut builder = StringBuilder::new(args.len());\n+            for index in 0..args[0].len() {\n+                if string_args.is_null(index) {\n+                    builder.append_null()?;\n+                } else {\n+                    builder.append_value(&string_args.value(index).$FUNC())?;\n+                }\n+            }\n+            Ok(builder.finish())\n\nReview comment:\n       Thanks @jorgecarleitao . Your code makes a lot of sense and the macro is much cleaner however I am stuck at the next bit which is how to pass in `T`. I can do it in `functions::create_physical_expr` like below but this does not feel correct.\r\n   \r\n   ```rust\r\n   BuiltinScalarFunction::Lower => |args| match args[0].data_type() {\r\n       DataType::Utf8 => Ok(Arc::new(string_expressions::lower::<i32>(args)?)),\r\n       DataType::LargeUtf8 => Ok(Arc::new(string_expressions::lower::<i64>(args)?)),\r\n       other => Err(DataFusionError::Internal(format!(\r\n           \"Unsupported data type {:?} for function lower\",\r\n           other,\r\n       ))),\r\n   },\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-20T22:14:55.311+0000",
                    "updated": "2020-12-20T22:14:55.311+0000",
                    "started": "2020-12-20T22:14:55.311+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526605",
                    "issueId": "13346880"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346880/worklog/526630",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on a change in pull request #8966:\nURL: https://github.com/apache/arrow/pull/8966#discussion_r546459233\n\n\n\n##########\nFile path: rust/datafusion/src/physical_plan/string_expressions.rs\n##########\n@@ -66,3 +71,73 @@ pub fn concatenate(args: &[ArrayRef]) -> Result<StringArray> {\n     }\n     Ok(builder.finish())\n }\n+\n+/// character_length returns number of characters in the string\n+/// character_length('jos\u00e9') = 4\n+pub fn character_length(args: &[ArrayRef]) -> Result<Int32Array> {\n+    let num_rows = args[0].len();\n+    let string_args =\n+        &args[0]\n+            .as_any()\n+            .downcast_ref::<StringArray>()\n+            .ok_or_else(|| {\n+                DataFusionError::Internal(\n+                    \"could not cast input to StringArray\".to_string(),\n+                )\n+            })?;\n+\n+    let result = (0..num_rows)\n+        .map(|i| {\n+            if string_args.is_null(i) {\n+                // NB: Since we use the same null bitset as the input,\n+                // the output for this value will be ignored, but we\n+                // need some value in the array we are building.\n+                Ok(0)\n+            } else {\n+                Ok(string_args.value(i).chars().count() as i32)\n+            }\n+        })\n+        .collect::<Result<Vec<_>>>()?;\n+\n+    let data = ArrayData::new(\n+        DataType::Int32,\n+        num_rows,\n+        Some(string_args.null_count()),\n+        string_args.data().null_buffer().cloned(),\n+        0,\n+        vec![Buffer::from(result.to_byte_slice())],\n+        vec![],\n+    );\n+\n+    Ok(Int32Array::from(Arc::new(data)))\n+}\n+\n+macro_rules! string_unary_function {\n+    ($NAME:ident, $FUNC:ident) => {\n+        /// string function that accepts utf8 and returns utf8\n+        pub fn $NAME(args: &[ArrayRef]) -> Result<StringArray> {\n+            let string_args = &args[0]\n+                .as_any()\n+                .downcast_ref::<StringArray>()\n+                .ok_or_else(|| {\n+                    DataFusionError::Internal(\n+                        \"could not cast input to StringArray\".to_string(),\n+                    )\n+                })?;\n+\n+            let mut builder = StringBuilder::new(args.len());\n+            for index in 0..args[0].len() {\n+                if string_args.is_null(index) {\n+                    builder.append_null()?;\n+                } else {\n+                    builder.append_value(&string_args.value(index).$FUNC())?;\n+                }\n+            }\n+            Ok(builder.finish())\n\nReview comment:\n       Ok you can disregard this comment as it is exactly how `length` is implemented. Technically we should not expose `length` as a SQL function but we could rename the alias to be `char_length` and `character_length` based on the ANSI SQL spec: https://jakewheat.github.io/sql-overview/sql-2016-foundation-grammar.html#char-length-expression\r\n   \r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-21T00:30:38.942+0000",
                    "updated": "2020-12-21T00:30:38.942+0000",
                    "started": "2020-12-21T00:30:38.942+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526630",
                    "issueId": "13346880"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346880/worklog/526647",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on pull request #8966:\nURL: https://github.com/apache/arrow/pull/8966#issuecomment-748546622\n\n\n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/8966?src=pr&el=h1) Report\n   > Merging [#8966](https://codecov.io/gh/apache/arrow/pull/8966?src=pr&el=desc) (2f26b23) into [master](https://codecov.io/gh/apache/arrow/commit/519e9da4fc1698f686525f4226295f3680a3f3db?el=desc) (519e9da) will **decrease** coverage by `0.09%`.\n   > The diff coverage is `74.46%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/8966/graphs/tree.svg?width=650&height=150&src=pr&token=LpTCFbqVT1)](https://codecov.io/gh/apache/arrow/pull/8966?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #8966      +/-   ##\n   ==========================================\n   - Coverage   83.26%   83.16%   -0.10%     \n   ==========================================\n     Files         196      200       +4     \n     Lines       48192    48992     +800     \n   ==========================================\n   + Hits        40125    40743     +618     \n   - Misses       8067     8249     +182     \n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/8966?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [rust/datafusion/src/logical\\_plan/expr.rs](https://codecov.io/gh/apache/arrow/pull/8966/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9sb2dpY2FsX3BsYW4vZXhwci5ycw==) | `76.76% <\u00f8> (\u00f8)` | |\n   | [rust/datafusion/src/physical\\_plan/functions.rs](https://codecov.io/gh/apache/arrow/pull/8966/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL2Z1bmN0aW9ucy5ycw==) | `79.34% <65.71%> (-2.68%)` | :arrow_down: |\n   | [...datafusion/src/physical\\_plan/string\\_expressions.rs](https://codecov.io/gh/apache/arrow/pull/8966/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9waHlzaWNhbF9wbGFuL3N0cmluZ19leHByZXNzaW9ucy5ycw==) | `87.50% <100.00%> (+1.78%)` | :arrow_up: |\n   | [rust/datafusion/src/sql/planner.rs](https://codecov.io/gh/apache/arrow/pull/8966/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9zcWwvcGxhbm5lci5ycw==) | `84.81% <100.00%> (+3.08%)` | :arrow_up: |\n   | [rust/datafusion/tests/sql.rs](https://codecov.io/gh/apache/arrow/pull/8966/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3Rlc3RzL3NxbC5ycw==) | `99.83% <100.00%> (+<0.01%)` | :arrow_up: |\n   | [rust/arrow/src/compute/kernels/arithmetic.rs](https://codecov.io/gh/apache/arrow/pull/8966/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvY29tcHV0ZS9rZXJuZWxzL2FyaXRobWV0aWMucnM=) | `89.79% <0.00%> (-9.23%)` | :arrow_down: |\n   | [rust/arrow/src/compute/kernels/sort.rs](https://codecov.io/gh/apache/arrow/pull/8966/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvY29tcHV0ZS9rZXJuZWxzL3NvcnQucnM=) | `93.42% <0.00%> (-2.34%)` | :arrow_down: |\n   | [rust/datafusion/src/optimizer/filter\\_push\\_down.rs](https://codecov.io/gh/apache/arrow/pull/8966/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9vcHRpbWl6ZXIvZmlsdGVyX3B1c2hfZG93bi5ycw==) | `97.65% <0.00%> (-1.74%)` | :arrow_down: |\n   | [rust/datafusion/src/logical\\_plan/builder.rs](https://codecov.io/gh/apache/arrow/pull/8966/diff?src=pr&el=tree#diff-cnVzdC9kYXRhZnVzaW9uL3NyYy9sb2dpY2FsX3BsYW4vYnVpbGRlci5ycw==) | `90.10% <0.00%> (-1.00%)` | :arrow_down: |\n   | [rust/arrow/src/compute/util.rs](https://codecov.io/gh/apache/arrow/pull/8966/diff?src=pr&el=tree#diff-cnVzdC9hcnJvdy9zcmMvY29tcHV0ZS91dGlsLnJz) | `98.93% <0.00%> (-0.44%)` | :arrow_down: |\n   | ... and [22 more](https://codecov.io/gh/apache/arrow/pull/8966/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/8966?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/8966?src=pr&el=footer). Last update [5819943...2f26b23](https://codecov.io/gh/apache/arrow/pull/8966?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-21T01:51:11.583+0000",
                    "updated": "2020-12-21T01:51:11.583+0000",
                    "started": "2020-12-21T01:51:11.583+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526647",
                    "issueId": "13346880"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346880/worklog/526686",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "seddonm1 commented on pull request #8966:\nURL: https://github.com/apache/arrow/pull/8966#issuecomment-748786944\n\n\n   > Thanks a lot, @seddonm1 , really clean implementation.\r\n   \r\n   Thanks @jorgecarleitao and thanks for your patience \ud83d\udc4d \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-21T06:23:59.192+0000",
                    "updated": "2020-12-21T06:23:59.192+0000",
                    "started": "2020-12-21T06:23:59.192+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526686",
                    "issueId": "13346880"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 13800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@572027d4[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e49daa9[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@48483992[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@28343ea0[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@61b56879[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7a364765[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@73bb7518[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7a7394f1[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@304fdd66[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@780ab965[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@503110c9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3683d222[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 13800,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Dec 22 05:46:33 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-12-22T05:46:33.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10969/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-12-19T00:21:32.000+0000",
        "updated": "2020-12-22T05:46:34.000+0000",
        "timeoriginalestimate": null,
        "description": "There are not many ANSI SQL functions currently supported. This ticket is an umbrella for increasing the support.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 13800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust][DataFusion] Implement ANSI SQL Functions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13346880/comment/17253290",
                    "id": "17253290",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
                        "name": "jorgecarleitao",
                        "key": "jorgecarleitao",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
                        },
                        "displayName": "Jorge Leit\u00e3o",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 8966\n[https://github.com/apache/arrow/pull/8966]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
                        "name": "jorgecarleitao",
                        "key": "jorgecarleitao",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
                        },
                        "displayName": "Jorge Leit\u00e3o",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-12-22T05:46:33.790+0000",
                    "updated": "2020-12-22T05:46:33.790+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0lnt4:",
        "customfield_12314139": null
    }
}