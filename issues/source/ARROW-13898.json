{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13399332",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399332",
    "key": "ARROW-13898",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/10101",
            "id": "10101",
            "description": "Issues which have gone without any activity for an extended period of time",
            "name": "Abandoned"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
            "name": "edponce",
            "key": "edponce",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
            },
            "displayName": "Eduardo Ponce",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "name": "Closed",
            "id": "6",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
            "name": "edponce",
            "key": "edponce",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
            },
            "displayName": "Eduardo Ponce",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
            "name": "edponce",
            "key": "edponce",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
            },
            "displayName": "Eduardo Ponce",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6000,
            "total": 6000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13898/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 10,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399332/worklog/646514",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce opened a new pull request #11082:\nURL: https://github.com/apache/arrow/pull/11082\n\n\n   This PR provides a kernel executors for string binary functions (StringBinaryTransformExecBase) that always expect the first parameter to be of string type and the second parameter is generic. It supports the following shapes for the binary parameters:\r\n   * Scalar, Scalar\r\n   * Array, Scalar - scalar is broadcasted and paired with all values from array\r\n   * Array, Array - process arrays element-wise\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-03T23:12:30.122+0000",
                    "updated": "2021-09-03T23:12:30.122+0000",
                    "started": "2021-09-03T23:12:30.122+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "646514",
                    "issueId": "13399332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399332/worklog/646515",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11082:\nURL: https://github.com/apache/arrow/pull/11082#issuecomment-912857836\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-03T23:12:53.911+0000",
                    "updated": "2021-09-03T23:12:53.911+0000",
                    "started": "2021-09-03T23:12:53.911+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "646515",
                    "issueId": "13399332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399332/worklog/646921",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11082:\nURL: https://github.com/apache/arrow/pull/11082#discussion_r702862294\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -420,6 +426,205 @@ struct StringTransformExecWithState\n   }\n };\n \n+/// Kernel exec generator for binary string transforms.\n+/// The first parameter is expected to always be a string type while the second parameter\n+/// is generic. It supports executions of the form:\n+///   * Scalar, Scalar\n+///   * Array, Scalar - scalar is broadcasted and paired with all values of array\n+///   * Array, Array - arrays are processed element-wise\n+///   * Scalar, Array - not supported by default\n+// TODO(edponce): For when second parameter is an array, need to specify a corresponding\n+// iterator/visitor.\n+template <typename Type1, typename Type2, typename StringTransform>\n+struct StringBinaryTransformExecBase {\n+  using offset_type = typename Type1::offset_type;\n+  using ArrayType1 = typename TypeTraits<Type1>::ArrayType;\n+  using ArrayType2 = typename TypeTraits<Type2>::ArrayType;\n+\n+  static Status Execute(KernelContext* ctx, StringTransform* transform,\n+                        const ExecBatch& batch, Datum* out) {\n+    if (batch.num_values() != 2) {\n+      return Status::Invalid(\"Invalid arity for binary string transform\");\n+    }\n+\n+    if (batch[0].is_array()) {\n+      if (batch[1].is_array()) {\n+        return ExecArrayArray(ctx, transform, batch[0].array(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecArrayScalar(ctx, transform, batch[0].array(), batch[1].scalar(), out);\n+      }\n+    } else if (batch[0].is_scalar()) {\n+      if (batch[1].is_array()) {\n+        return ExecScalarArray(ctx, transform, batch[0].scalar(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecScalarScalar(ctx, transform, batch[0].scalar(), batch[1].scalar(),\n+                                out);\n+      }\n+    }\n+    return Status::Invalid(\"Invalid ExecBatch kind for binary string transform\");\n+  }\n+\n+ private:\n+  static Status ExecScalarScalar(KernelContext* ctx, StringTransform* transform,\n+                                 const std::shared_ptr<Scalar>& scalar1,\n+                                 const std::shared_ptr<Scalar>& scalar2, Datum* out) {\n+    const auto& input1 = checked_cast<const BaseBinaryScalar&>(*scalar1);\n+    // TODO(edponce): How to validate inputs? For some kernels, returning null is ok\n+    // (ascii_lower) but others not necessarily (concatenate)\n+    if (!input1.is_valid) {\n+      return Status::OK();\n+    }\n+\n+    auto input_ncodeunits = input1.value->size();\n+    auto input_nstrings = 1;\n+    auto output_ncodeunits_max =\n+        transform->MaxCodeunits(input_nstrings, input_ncodeunits);\n\nReview comment:\n       Weirdly, it seems the result size would only depend on the _first_ input?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-06T12:27:43.540+0000",
                    "updated": "2021-09-06T12:27:43.540+0000",
                    "started": "2021-09-06T12:27:43.540+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "646921",
                    "issueId": "13399332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399332/worklog/646922",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11082:\nURL: https://github.com/apache/arrow/pull/11082#discussion_r702862738\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -420,6 +426,205 @@ struct StringTransformExecWithState\n   }\n };\n \n+/// Kernel exec generator for binary string transforms.\n+/// The first parameter is expected to always be a string type while the second parameter\n+/// is generic. It supports executions of the form:\n+///   * Scalar, Scalar\n+///   * Array, Scalar - scalar is broadcasted and paired with all values of array\n+///   * Array, Array - arrays are processed element-wise\n+///   * Scalar, Array - not supported by default\n+// TODO(edponce): For when second parameter is an array, need to specify a corresponding\n+// iterator/visitor.\n+template <typename Type1, typename Type2, typename StringTransform>\n+struct StringBinaryTransformExecBase {\n+  using offset_type = typename Type1::offset_type;\n+  using ArrayType1 = typename TypeTraits<Type1>::ArrayType;\n+  using ArrayType2 = typename TypeTraits<Type2>::ArrayType;\n+\n+  static Status Execute(KernelContext* ctx, StringTransform* transform,\n+                        const ExecBatch& batch, Datum* out) {\n+    if (batch.num_values() != 2) {\n+      return Status::Invalid(\"Invalid arity for binary string transform\");\n+    }\n+\n+    if (batch[0].is_array()) {\n+      if (batch[1].is_array()) {\n+        return ExecArrayArray(ctx, transform, batch[0].array(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecArrayScalar(ctx, transform, batch[0].array(), batch[1].scalar(), out);\n+      }\n+    } else if (batch[0].is_scalar()) {\n+      if (batch[1].is_array()) {\n+        return ExecScalarArray(ctx, transform, batch[0].scalar(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecScalarScalar(ctx, transform, batch[0].scalar(), batch[1].scalar(),\n+                                out);\n+      }\n+    }\n+    return Status::Invalid(\"Invalid ExecBatch kind for binary string transform\");\n+  }\n+\n+ private:\n+  static Status ExecScalarScalar(KernelContext* ctx, StringTransform* transform,\n+                                 const std::shared_ptr<Scalar>& scalar1,\n+                                 const std::shared_ptr<Scalar>& scalar2, Datum* out) {\n+    const auto& input1 = checked_cast<const BaseBinaryScalar&>(*scalar1);\n+    // TODO(edponce): How to validate inputs? For some kernels, returning null is ok\n+    // (ascii_lower) but others not necessarily (concatenate)\n\nReview comment:\n       Well... if this construction is too generic, then perhaps it's not useful? How many string binary transforms will we need to implement?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-06T12:28:18.353+0000",
                    "updated": "2021-09-06T12:28:18.353+0000",
                    "started": "2021-09-06T12:28:18.353+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "646922",
                    "issueId": "13399332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399332/worklog/647141",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11082:\nURL: https://github.com/apache/arrow/pull/11082#discussion_r703078818\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -420,6 +426,205 @@ struct StringTransformExecWithState\n   }\n };\n \n+/// Kernel exec generator for binary string transforms.\n+/// The first parameter is expected to always be a string type while the second parameter\n+/// is generic. It supports executions of the form:\n+///   * Scalar, Scalar\n+///   * Array, Scalar - scalar is broadcasted and paired with all values of array\n+///   * Array, Array - arrays are processed element-wise\n+///   * Scalar, Array - not supported by default\n+// TODO(edponce): For when second parameter is an array, need to specify a corresponding\n+// iterator/visitor.\n+template <typename Type1, typename Type2, typename StringTransform>\n+struct StringBinaryTransformExecBase {\n+  using offset_type = typename Type1::offset_type;\n+  using ArrayType1 = typename TypeTraits<Type1>::ArrayType;\n+  using ArrayType2 = typename TypeTraits<Type2>::ArrayType;\n+\n+  static Status Execute(KernelContext* ctx, StringTransform* transform,\n+                        const ExecBatch& batch, Datum* out) {\n+    if (batch.num_values() != 2) {\n+      return Status::Invalid(\"Invalid arity for binary string transform\");\n+    }\n+\n+    if (batch[0].is_array()) {\n+      if (batch[1].is_array()) {\n+        return ExecArrayArray(ctx, transform, batch[0].array(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecArrayScalar(ctx, transform, batch[0].array(), batch[1].scalar(), out);\n+      }\n+    } else if (batch[0].is_scalar()) {\n+      if (batch[1].is_array()) {\n+        return ExecScalarArray(ctx, transform, batch[0].scalar(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecScalarScalar(ctx, transform, batch[0].scalar(), batch[1].scalar(),\n+                                out);\n+      }\n+    }\n+    return Status::Invalid(\"Invalid ExecBatch kind for binary string transform\");\n+  }\n+\n+ private:\n+  static Status ExecScalarScalar(KernelContext* ctx, StringTransform* transform,\n+                                 const std::shared_ptr<Scalar>& scalar1,\n+                                 const std::shared_ptr<Scalar>& scalar2, Datum* out) {\n+    const auto& input1 = checked_cast<const BaseBinaryScalar&>(*scalar1);\n+    // TODO(edponce): How to validate inputs? For some kernels, returning null is ok\n+    // (ascii_lower) but others not necessarily (concatenate)\n\nReview comment:\n       Defining \"string transforms\" as functions where the input string is operated on and the output is a string of possibly different size, these are the only string binary transforms I found:\r\n   * string repeat\r\n   * remove suffix (not implemented)\r\n   * remove prefix (not implemented)\r\n   From these, only for `string repeat` it makes sense to have `ExecScalarArray`, so you are correct in that string binary transforms are not too generalizable as numeric ones. I suggest to keep this `StringBinaryTransformExecBase` but only defining `ExecScalarScalar` and `ExecArrayArray`, so that it can be used by the 3 kernels listed above.\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-06T21:54:24.318+0000",
                    "updated": "2021-09-06T21:54:24.318+0000",
                    "started": "2021-09-06T21:54:24.318+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "647141",
                    "issueId": "13399332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399332/worklog/647146",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11082:\nURL: https://github.com/apache/arrow/pull/11082#discussion_r703092938\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -420,6 +426,205 @@ struct StringTransformExecWithState\n   }\n };\n \n+/// Kernel exec generator for binary string transforms.\n+/// The first parameter is expected to always be a string type while the second parameter\n+/// is generic. It supports executions of the form:\n+///   * Scalar, Scalar\n+///   * Array, Scalar - scalar is broadcasted and paired with all values of array\n+///   * Array, Array - arrays are processed element-wise\n+///   * Scalar, Array - not supported by default\n+// TODO(edponce): For when second parameter is an array, need to specify a corresponding\n+// iterator/visitor.\n+template <typename Type1, typename Type2, typename StringTransform>\n+struct StringBinaryTransformExecBase {\n+  using offset_type = typename Type1::offset_type;\n+  using ArrayType1 = typename TypeTraits<Type1>::ArrayType;\n+  using ArrayType2 = typename TypeTraits<Type2>::ArrayType;\n+\n+  static Status Execute(KernelContext* ctx, StringTransform* transform,\n+                        const ExecBatch& batch, Datum* out) {\n+    if (batch.num_values() != 2) {\n+      return Status::Invalid(\"Invalid arity for binary string transform\");\n+    }\n+\n+    if (batch[0].is_array()) {\n+      if (batch[1].is_array()) {\n+        return ExecArrayArray(ctx, transform, batch[0].array(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecArrayScalar(ctx, transform, batch[0].array(), batch[1].scalar(), out);\n+      }\n+    } else if (batch[0].is_scalar()) {\n+      if (batch[1].is_array()) {\n+        return ExecScalarArray(ctx, transform, batch[0].scalar(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecScalarScalar(ctx, transform, batch[0].scalar(), batch[1].scalar(),\n+                                out);\n+      }\n+    }\n+    return Status::Invalid(\"Invalid ExecBatch kind for binary string transform\");\n+  }\n+\n+ private:\n+  static Status ExecScalarScalar(KernelContext* ctx, StringTransform* transform,\n+                                 const std::shared_ptr<Scalar>& scalar1,\n+                                 const std::shared_ptr<Scalar>& scalar2, Datum* out) {\n+    const auto& input1 = checked_cast<const BaseBinaryScalar&>(*scalar1);\n+    // TODO(edponce): How to validate inputs? For some kernels, returning null is ok\n+    // (ascii_lower) but others not necessarily (concatenate)\n\nReview comment:\n       Actually, I would suggest to support string transforms using the same pattern as in [`ScalarUnary`](https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/kernels/codegen_internal.h#L573) and [`ScalarBinary`](https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/kernels/codegen_internal.h#L755) in codegen_internal.h.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-06T23:23:43.887+0000",
                    "updated": "2021-09-06T23:23:43.887+0000",
                    "started": "2021-09-06T23:23:43.887+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "647146",
                    "issueId": "13399332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399332/worklog/647147",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11082:\nURL: https://github.com/apache/arrow/pull/11082#discussion_r703093163\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -420,6 +426,205 @@ struct StringTransformExecWithState\n   }\n };\n \n+/// Kernel exec generator for binary string transforms.\n+/// The first parameter is expected to always be a string type while the second parameter\n+/// is generic. It supports executions of the form:\n+///   * Scalar, Scalar\n+///   * Array, Scalar - scalar is broadcasted and paired with all values of array\n+///   * Array, Array - arrays are processed element-wise\n+///   * Scalar, Array - not supported by default\n+// TODO(edponce): For when second parameter is an array, need to specify a corresponding\n+// iterator/visitor.\n+template <typename Type1, typename Type2, typename StringTransform>\n+struct StringBinaryTransformExecBase {\n+  using offset_type = typename Type1::offset_type;\n+  using ArrayType1 = typename TypeTraits<Type1>::ArrayType;\n+  using ArrayType2 = typename TypeTraits<Type2>::ArrayType;\n+\n+  static Status Execute(KernelContext* ctx, StringTransform* transform,\n+                        const ExecBatch& batch, Datum* out) {\n+    if (batch.num_values() != 2) {\n+      return Status::Invalid(\"Invalid arity for binary string transform\");\n+    }\n+\n+    if (batch[0].is_array()) {\n+      if (batch[1].is_array()) {\n+        return ExecArrayArray(ctx, transform, batch[0].array(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecArrayScalar(ctx, transform, batch[0].array(), batch[1].scalar(), out);\n+      }\n+    } else if (batch[0].is_scalar()) {\n+      if (batch[1].is_array()) {\n+        return ExecScalarArray(ctx, transform, batch[0].scalar(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecScalarScalar(ctx, transform, batch[0].scalar(), batch[1].scalar(),\n+                                out);\n+      }\n+    }\n+    return Status::Invalid(\"Invalid ExecBatch kind for binary string transform\");\n+  }\n+\n+ private:\n+  static Status ExecScalarScalar(KernelContext* ctx, StringTransform* transform,\n+                                 const std::shared_ptr<Scalar>& scalar1,\n+                                 const std::shared_ptr<Scalar>& scalar2, Datum* out) {\n+    const auto& input1 = checked_cast<const BaseBinaryScalar&>(*scalar1);\n+    // TODO(edponce): How to validate inputs? For some kernels, returning null is ok\n+    // (ascii_lower) but others not necessarily (concatenate)\n+    if (!input1.is_valid) {\n+      return Status::OK();\n+    }\n+\n+    auto input_ncodeunits = input1.value->size();\n+    auto input_nstrings = 1;\n+    auto output_ncodeunits_max =\n+        transform->MaxCodeunits(input_nstrings, input_ncodeunits);\n\nReview comment:\n       I included the second input for MaxCodeunits.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-06T23:25:24.142+0000",
                    "updated": "2021-09-06T23:25:24.142+0000",
                    "started": "2021-09-06T23:25:24.142+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "647147",
                    "issueId": "13399332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399332/worklog/647161",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11082:\nURL: https://github.com/apache/arrow/pull/11082#discussion_r703078818\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -420,6 +426,205 @@ struct StringTransformExecWithState\n   }\n };\n \n+/// Kernel exec generator for binary string transforms.\n+/// The first parameter is expected to always be a string type while the second parameter\n+/// is generic. It supports executions of the form:\n+///   * Scalar, Scalar\n+///   * Array, Scalar - scalar is broadcasted and paired with all values of array\n+///   * Array, Array - arrays are processed element-wise\n+///   * Scalar, Array - not supported by default\n+// TODO(edponce): For when second parameter is an array, need to specify a corresponding\n+// iterator/visitor.\n+template <typename Type1, typename Type2, typename StringTransform>\n+struct StringBinaryTransformExecBase {\n+  using offset_type = typename Type1::offset_type;\n+  using ArrayType1 = typename TypeTraits<Type1>::ArrayType;\n+  using ArrayType2 = typename TypeTraits<Type2>::ArrayType;\n+\n+  static Status Execute(KernelContext* ctx, StringTransform* transform,\n+                        const ExecBatch& batch, Datum* out) {\n+    if (batch.num_values() != 2) {\n+      return Status::Invalid(\"Invalid arity for binary string transform\");\n+    }\n+\n+    if (batch[0].is_array()) {\n+      if (batch[1].is_array()) {\n+        return ExecArrayArray(ctx, transform, batch[0].array(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecArrayScalar(ctx, transform, batch[0].array(), batch[1].scalar(), out);\n+      }\n+    } else if (batch[0].is_scalar()) {\n+      if (batch[1].is_array()) {\n+        return ExecScalarArray(ctx, transform, batch[0].scalar(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecScalarScalar(ctx, transform, batch[0].scalar(), batch[1].scalar(),\n+                                out);\n+      }\n+    }\n+    return Status::Invalid(\"Invalid ExecBatch kind for binary string transform\");\n+  }\n+\n+ private:\n+  static Status ExecScalarScalar(KernelContext* ctx, StringTransform* transform,\n+                                 const std::shared_ptr<Scalar>& scalar1,\n+                                 const std::shared_ptr<Scalar>& scalar2, Datum* out) {\n+    const auto& input1 = checked_cast<const BaseBinaryScalar&>(*scalar1);\n+    // TODO(edponce): How to validate inputs? For some kernels, returning null is ok\n+    // (ascii_lower) but others not necessarily (concatenate)\n\nReview comment:\n       Defining \"string transforms\" as functions where the input string is operated on and the output is a string of possibly different size, these are the only string binary transforms I found:\r\n   * string repeat\r\n   * remove suffix (not implemented)\r\n   * remove prefix (not implemented)\r\n   From these, only for the `remove suffix/prefix` it makes sense to have `ExecScalarArray`, so you are correct in that string binary transforms are not too generalizable as numeric ones. I suggest to keep this PR for `StringBinaryTransformExecBase` defining only `ExecScalarScalar`, `ExecArrayScalar`, and `ExecArrayArray`, so that it can be used by the 3 kernels listed above.\r\n   \n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -420,6 +426,205 @@ struct StringTransformExecWithState\n   }\n };\n \n+/// Kernel exec generator for binary string transforms.\n+/// The first parameter is expected to always be a string type while the second parameter\n+/// is generic. It supports executions of the form:\n+///   * Scalar, Scalar\n+///   * Array, Scalar - scalar is broadcasted and paired with all values of array\n+///   * Array, Array - arrays are processed element-wise\n+///   * Scalar, Array - not supported by default\n+// TODO(edponce): For when second parameter is an array, need to specify a corresponding\n+// iterator/visitor.\n+template <typename Type1, typename Type2, typename StringTransform>\n+struct StringBinaryTransformExecBase {\n+  using offset_type = typename Type1::offset_type;\n+  using ArrayType1 = typename TypeTraits<Type1>::ArrayType;\n+  using ArrayType2 = typename TypeTraits<Type2>::ArrayType;\n+\n+  static Status Execute(KernelContext* ctx, StringTransform* transform,\n+                        const ExecBatch& batch, Datum* out) {\n+    if (batch.num_values() != 2) {\n+      return Status::Invalid(\"Invalid arity for binary string transform\");\n+    }\n+\n+    if (batch[0].is_array()) {\n+      if (batch[1].is_array()) {\n+        return ExecArrayArray(ctx, transform, batch[0].array(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecArrayScalar(ctx, transform, batch[0].array(), batch[1].scalar(), out);\n+      }\n+    } else if (batch[0].is_scalar()) {\n+      if (batch[1].is_array()) {\n+        return ExecScalarArray(ctx, transform, batch[0].scalar(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecScalarScalar(ctx, transform, batch[0].scalar(), batch[1].scalar(),\n+                                out);\n+      }\n+    }\n+    return Status::Invalid(\"Invalid ExecBatch kind for binary string transform\");\n+  }\n+\n+ private:\n+  static Status ExecScalarScalar(KernelContext* ctx, StringTransform* transform,\n+                                 const std::shared_ptr<Scalar>& scalar1,\n+                                 const std::shared_ptr<Scalar>& scalar2, Datum* out) {\n+    const auto& input1 = checked_cast<const BaseBinaryScalar&>(*scalar1);\n+    // TODO(edponce): How to validate inputs? For some kernels, returning null is ok\n+    // (ascii_lower) but others not necessarily (concatenate)\n\nReview comment:\n       BTW, even though this PR is complete and passing, it is a draft because I am working on a design proposal to refactor some parts of the compute layer and this falls into that. We can do one of the following:\r\n   * Accept this PR, knowing that there is a possibility of it being modified (if proposal is accepted by community)\r\n   * Close this PR and make each string binary kernel explicitly define the `PreExec` and `Exec` methods\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-07T01:56:27.612+0000",
                    "updated": "2021-09-07T01:56:27.612+0000",
                    "started": "2021-09-07T01:56:27.612+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "647161",
                    "issueId": "13399332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399332/worklog/647246",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11082:\nURL: https://github.com/apache/arrow/pull/11082#discussion_r703323976\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -420,6 +426,205 @@ struct StringTransformExecWithState\n   }\n };\n \n+/// Kernel exec generator for binary string transforms.\n+/// The first parameter is expected to always be a string type while the second parameter\n+/// is generic. It supports executions of the form:\n+///   * Scalar, Scalar\n+///   * Array, Scalar - scalar is broadcasted and paired with all values of array\n+///   * Array, Array - arrays are processed element-wise\n+///   * Scalar, Array - not supported by default\n+// TODO(edponce): For when second parameter is an array, need to specify a corresponding\n+// iterator/visitor.\n+template <typename Type1, typename Type2, typename StringTransform>\n+struct StringBinaryTransformExecBase {\n+  using offset_type = typename Type1::offset_type;\n+  using ArrayType1 = typename TypeTraits<Type1>::ArrayType;\n+  using ArrayType2 = typename TypeTraits<Type2>::ArrayType;\n+\n+  static Status Execute(KernelContext* ctx, StringTransform* transform,\n+                        const ExecBatch& batch, Datum* out) {\n+    if (batch.num_values() != 2) {\n+      return Status::Invalid(\"Invalid arity for binary string transform\");\n+    }\n+\n+    if (batch[0].is_array()) {\n+      if (batch[1].is_array()) {\n+        return ExecArrayArray(ctx, transform, batch[0].array(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecArrayScalar(ctx, transform, batch[0].array(), batch[1].scalar(), out);\n+      }\n+    } else if (batch[0].is_scalar()) {\n+      if (batch[1].is_array()) {\n+        return ExecScalarArray(ctx, transform, batch[0].scalar(), batch[1].array(), out);\n+      } else if (batch[1].is_scalar()) {\n+        return ExecScalarScalar(ctx, transform, batch[0].scalar(), batch[1].scalar(),\n+                                out);\n+      }\n+    }\n+    return Status::Invalid(\"Invalid ExecBatch kind for binary string transform\");\n+  }\n+\n+ private:\n+  static Status ExecScalarScalar(KernelContext* ctx, StringTransform* transform,\n+                                 const std::shared_ptr<Scalar>& scalar1,\n+                                 const std::shared_ptr<Scalar>& scalar2, Datum* out) {\n+    const auto& input1 = checked_cast<const BaseBinaryScalar&>(*scalar1);\n+    // TODO(edponce): How to validate inputs? For some kernels, returning null is ok\n+    // (ascii_lower) but others not necessarily (concatenate)\n\nReview comment:\n       Well, to be honest, this is starting to be a bit difficult to follow, since you seem to be proposing three different things :-)\r\n   \r\n   I'd like to suggest a more pragmatic direction: close this PR, implement whatever is required in the \"string repeat\" PR, and we can iterate?\r\n   \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-07T09:04:33.386+0000",
                    "updated": "2021-09-07T09:04:33.386+0000",
                    "started": "2021-09-07T09:04:33.385+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "647246",
                    "issueId": "13399332"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399332/worklog/648357",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce closed pull request #11082:\nURL: https://github.com/apache/arrow/pull/11082\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-09T03:32:13.729+0000",
                    "updated": "2021-09-09T03:32:13.729+0000",
                    "started": "2021-09-09T03:32:13.728+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "648357",
                    "issueId": "13399332"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 6000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6f948969[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@28f1a0f6[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7d840c05[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5857f553[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2cee411f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1aeb0b91[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@47d2c8ed[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@20484029[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7ef00b86[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3c05204a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6dc10287[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@f6a5e1e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6000,
        "customfield_12312520": null,
        "customfield_12312521": "2021-09-03 22:06:40.0",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-09-09T09:50:13.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13898/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-09-03T22:06:40.000+0000",
        "updated": "2021-09-09T09:50:13.000+0000",
        "timeoriginalestimate": null,
        "description": "Add kernel exec generator for string binary functions (similar to StringTransformExecBase) that always expect the first parameter to be of string type and the second parameter is generic. It should also support scalar and array inputs for the following common cases:\r\n* Scalar, Scalar\r\n* Array, Scalar - scalar is broadcasted and paired with all values from array\r\n* Array, Array - process arrays element-wise\r\n\r\nThe Scalar, Array case is not necessary as it is difficult to generalize, and there are not many functions with this pattern.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Compute] Add support for string binary transforms",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [],
            "maxResults": 0,
            "total": 0,
            "startAt": 0
        },
        "customfield_12311820": "0|z0ulvc:",
        "customfield_12314139": null
    }
}