{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13485811",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485811",
    "key": "ARROW-17997",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334104",
                "id": "12334104",
                "name": "Ruby"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "aggregateprogress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17997/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 24,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485811/worklog/816015",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14381:\nURL: https://github.com/apache/arrow/pull/14381#issuecomment-1275752620\n\n   https://issues.apache.org/jira/browse/ARROW-17997\n\n\n",
                    "created": "2022-10-12T08:01:15.713+0000",
                    "updated": "2022-10-12T08:01:15.713+0000",
                    "started": "2022-10-12T08:01:15.713+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816015",
                    "issueId": "13485811"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485811/worklog/816016",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14381:\nURL: https://github.com/apache/arrow/pull/14381#issuecomment-1275752653\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-10-12T08:01:16.710+0000",
                    "updated": "2022-10-12T08:01:16.710+0000",
                    "started": "2022-10-12T08:01:16.709+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816016",
                    "issueId": "13485811"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485811/worklog/816106",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #14381:\nURL: https://github.com/apache/arrow/pull/14381#discussion_r993344849\n\n\n##########\nruby/red-arrow/lib/arrow/tensor.rb:\n##########\n@@ -15,8 +15,140 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+require_relative \"raw-tensor-converter\"\n+\n module Arrow\n   class Tensor\n+    alias_method :initialize_raw, :initialize\n+    # Creates a new {Arrow::Tensor}.\n+    #\n+    # @overload initialize(raw_tensor, data_type: nil, shape: nil, strides: nil, dimension_names: nil)\n+    #\n+    #   @param raw_tensor [::Array<Numeric>] The tensor represented by\n+    #     raw `Array` (not `Arrow::Array`) and `Numeric`s. You can\n+    #     nested `Array` for multi-dimensions array.\n\nReview Comment:\n   ```suggestion\r\n       #     raw `Array` (not `Arrow::Array`) and `Numeric`s. You can\r\n       #     pass a nested `Array` for a multi-dimensional tensor.\r\n   ```\n\n\n\n##########\nruby/red-arrow/lib/arrow/tensor.rb:\n##########\n@@ -15,8 +15,140 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+require_relative \"raw-tensor-converter\"\n+\n module Arrow\n   class Tensor\n+    alias_method :initialize_raw, :initialize\n+    # Creates a new {Arrow::Tensor}.\n+    #\n+    # @overload initialize(raw_tensor, data_type: nil, shape: nil, strides: nil, dimension_names: nil)\n+    #\n+    #   @param raw_tensor [::Array<Numeric>] The tensor represented by\n\nReview Comment:\n   ```suggestion\r\n       #   @param raw_tensor [::Array<Numeric>] The tensor represented as a\r\n   ```\n\n\n\n",
                    "created": "2022-10-12T11:39:14.088+0000",
                    "updated": "2022-10-12T11:39:14.088+0000",
                    "started": "2022-10-12T11:39:14.088+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816106",
                    "issueId": "13485811"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485811/worklog/816107",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #14381:\nURL: https://github.com/apache/arrow/pull/14381#discussion_r993345286\n\n\n##########\nruby/red-arrow/lib/arrow/tensor.rb:\n##########\n@@ -15,8 +15,140 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+require_relative \"raw-tensor-converter\"\n+\n module Arrow\n   class Tensor\n+    alias_method :initialize_raw, :initialize\n+    # Creates a new {Arrow::Tensor}.\n+    #\n+    # @overload initialize(raw_tensor, data_type: nil, shape: nil, strides: nil, dimension_names: nil)\n+    #\n+    #   @param raw_tensor [::Array<Numeric>] The tensor represented by\n+    #     raw `Array` (not `Arrow::Array`) and `Numeric`s. You can\n+    #     nested `Array` for multi-dimensions array.\n+    #\n+    #   @param data_type [Arrow::DataType, String, Symbol, ::Array<String>,\n+    #     ::Array<Symbol>, Hash, nil] The element data type of the tensor.\n+    #\n+    #     If you specify `nil`, data type is guessed from `raw_tensor`.\n+    #\n+    #     See {Arrow::DataType.resolve} how to specify data type.\n\nReview Comment:\n   ```suggestion\r\n       #     See {Arrow::DataType.resolve} for how to specify data type.\r\n   ```\n\n\n\n",
                    "created": "2022-10-12T11:39:49.578+0000",
                    "updated": "2022-10-12T11:39:49.578+0000",
                    "started": "2022-10-12T11:39:49.577+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816107",
                    "issueId": "13485811"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485811/worklog/816109",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #14381:\nURL: https://github.com/apache/arrow/pull/14381#discussion_r993347590\n\n\n##########\nruby/red-arrow/test/test-tensor.rb:\n##########\n@@ -16,6 +16,103 @@\n # under the License.\n \n class TensorTest < Test::Unit::TestCase\n+  sub_test_case(\"class methods\") do\n+    sub_test_case(\".new\") do\n+      def setup\n+        @raw_tensor = [\n+          [\n+            [1, 2, 3, 4],\n+            [5, 6, 7, 8],\n+          ],\n+          [\n+            [9, 10, 11, 12],\n+            [13, 14, 15, 16],\n+          ],\n+          [\n+            [17, 18, 19, 20],\n+            [21, 22, 23, 24],\n+          ],\n+        ]\n+        @shape = [3, 2, 4]\n+        @strides = [8, 4, 1]\n+      end\n+\n+      test(\"Array\") do\n+        tensor = Arrow::Tensor.new(@raw_tensor)\n+        assert_equal({\n+                       value_data_type: Arrow::UInt8DataType.new,\n+                       buffer: @raw_tensor.flatten.pack(\"C*\"),\n+                       shape: @shape,\n+                       strides: @strides,\n+                       dimension_names: [\"\", \"\", \"\"],\n+                     },\n+                     {\n+                       value_data_type: tensor.value_data_type,\n+                       buffer: tensor.buffer.data.to_s,\n+                       shape: tensor.shape,\n+                       strides: tensor.strides,\n+                       dimension_names: tensor.dimension_names,\n+                     })\n+      end\n+\n+      test(\"Array, data_type: Symbol\") do\n+        tensor = Arrow::Tensor.new(@raw_tensor, data_type: :int32)\n+        assert_equal({\n+                       value_data_type: Arrow::Int32DataType.new,\n+                       buffer: @raw_tensor.flatten.pack(\"l*\"),\n+                       shape: @shape,\n+                       strides: @strides.collect {|x| x * 4},\n+                       dimension_names: [\"\", \"\", \"\"],\n+                     },\n+                     {\n+                       value_data_type: tensor.value_data_type,\n+                       buffer: tensor.buffer.data.to_s,\n+                       shape: tensor.shape,\n+                       strides: tensor.strides,\n+                       dimension_names: tensor.dimension_names,\n+                     })\n+      end\n+\n+      test(\"Array, dimension_names: Array<String>\") do\n+        tensor = Arrow::Tensor.new(@raw_tensor,\n+                                   dimension_names: [\"a\", \"b\", \"c\"])\n+        assert_equal({\n+                       value_data_type: Arrow::UInt8DataType.new,\n+                       buffer: @raw_tensor.flatten.pack(\"C*\"),\n+                       shape: @shape,\n+                       strides: @strides,\n+                       dimension_names: [\"a\", \"b\", \"c\"],\n+                     },\n+                     {\n+                       value_data_type: tensor.value_data_type,\n+                       buffer: tensor.buffer.data.to_s,\n+                       shape: tensor.shape,\n+                       strides: tensor.strides,\n+                       dimension_names: tensor.dimension_names,\n+                     })\n+      end\n+\n+      test(\"Array, dimension_names: Array<Symbol>\") do\n+        tensor = Arrow::Tensor.new(@raw_tensor,\n+                                   dimension_names: [:a, :b, :c])\n+        assert_equal({\n+                       value_data_type: Arrow::UInt8DataType.new,\n+                       buffer: @raw_tensor.flatten.pack(\"C*\"),\n+                       shape: @shape,\n+                       strides: @strides,\n+                       dimension_names: [\"a\", \"b\", \"c\"],\n+                     },\n+                     {\n+                       value_data_type: tensor.value_data_type,\n+                       buffer: tensor.buffer.data.to_s,\n+                       shape: tensor.shape,\n+                       strides: tensor.strides,\n+                       dimension_names: tensor.dimension_names,\n+                     })\n+      end\n\nReview Comment:\n   I don't see a test passing a different `strides` explicitly. Can you add one? Or does it just not make sense to change the strides?\n\n\n\n",
                    "created": "2022-10-12T11:42:29.395+0000",
                    "updated": "2022-10-12T11:42:29.395+0000",
                    "started": "2022-10-12T11:42:29.394+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816109",
                    "issueId": "13485811"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485811/worklog/816110",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #14381:\nURL: https://github.com/apache/arrow/pull/14381#discussion_r993348640\n\n\n##########\nruby/red-arrow/lib/arrow/tensor.rb:\n##########\n@@ -15,8 +15,140 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+require_relative \"raw-tensor-converter\"\n+\n module Arrow\n   class Tensor\n+    alias_method :initialize_raw, :initialize\n+    # Creates a new {Arrow::Tensor}.\n+    #\n+    # @overload initialize(raw_tensor, data_type: nil, shape: nil, strides: nil, dimension_names: nil)\n+    #\n+    #   @param raw_tensor [::Array<Numeric>] The tensor represented by\n+    #     raw `Array` (not `Arrow::Array`) and `Numeric`s. You can\n+    #     nested `Array` for multi-dimensions array.\n+    #\n+    #   @param data_type [Arrow::DataType, String, Symbol, ::Array<String>,\n+    #     ::Array<Symbol>, Hash, nil] The element data type of the tensor.\n+    #\n+    #     If you specify `nil`, data type is guessed from `raw_tensor`.\n+    #\n+    #     See {Arrow::DataType.resolve} how to specify data type.\n+    #\n+    #   @param shape [::Array<Integer>, nil] The array of dimension sizes.\n+    #\n+    #     If you specify `nil`, shape is guessed from `raw_tensor`.\n+    #\n+    #   @param strides [::Array<Integer>, nil] The array of the number of\n+    #     bytes in each dimension.\n\nReview Comment:\n   Not really, these are the increments in bytes. But I'm surprised you can pass `strides` here. I would expect this method to simply always create a contiguous tensor.\n\n\n\n",
                    "created": "2022-10-12T11:43:49.551+0000",
                    "updated": "2022-10-12T11:43:49.551+0000",
                    "started": "2022-10-12T11:43:49.551+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816110",
                    "issueId": "13485811"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485811/worklog/816111",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #14381:\nURL: https://github.com/apache/arrow/pull/14381#discussion_r993348833\n\n\n##########\nruby/red-arrow/lib/arrow/tensor.rb:\n##########\n@@ -15,8 +15,140 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+require_relative \"raw-tensor-converter\"\n+\n module Arrow\n   class Tensor\n+    alias_method :initialize_raw, :initialize\n+    # Creates a new {Arrow::Tensor}.\n+    #\n+    # @overload initialize(raw_tensor, data_type: nil, shape: nil, strides: nil, dimension_names: nil)\n+    #\n+    #   @param raw_tensor [::Array<Numeric>] The tensor represented by\n+    #     raw `Array` (not `Arrow::Array`) and `Numeric`s. You can\n+    #     nested `Array` for multi-dimensions array.\n+    #\n+    #   @param data_type [Arrow::DataType, String, Symbol, ::Array<String>,\n+    #     ::Array<Symbol>, Hash, nil] The element data type of the tensor.\n+    #\n+    #     If you specify `nil`, data type is guessed from `raw_tensor`.\n+    #\n+    #     See {Arrow::DataType.resolve} how to specify data type.\n+    #\n+    #   @param shape [::Array<Integer>, nil] The array of dimension sizes.\n+    #\n+    #     If you specify `nil`, shape is guessed from `raw_tensor`.\n+    #\n+    #   @param strides [::Array<Integer>, nil] The array of the number of\n+    #     bytes in each dimension.\n+    #\n+    #     If you specify `nil` or an empty `Array`, strides are\n+    #     guessed from `raw_tensor`.\n+    #\n+    #   @param dimension_names [::Array<String>, ::Array<Symbol>, nil]\n+    #     The array of the dimension names.\n+    #\n+    #     If you specify `nil`, all dimensions doesn't have their names.\n\nReview Comment:\n   ```suggestion\r\n       #     If you specify `nil`, all dimensions have empty names.\r\n   ```\n\n\n\n",
                    "created": "2022-10-12T11:44:05.405+0000",
                    "updated": "2022-10-12T11:44:05.405+0000",
                    "started": "2022-10-12T11:44:05.405+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816111",
                    "issueId": "13485811"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485811/worklog/816112",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #14381:\nURL: https://github.com/apache/arrow/pull/14381#discussion_r993349288\n\n\n##########\nruby/red-arrow/lib/arrow/tensor.rb:\n##########\n@@ -15,8 +15,140 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+require_relative \"raw-tensor-converter\"\n+\n module Arrow\n   class Tensor\n+    alias_method :initialize_raw, :initialize\n+    # Creates a new {Arrow::Tensor}.\n+    #\n+    # @overload initialize(raw_tensor, data_type: nil, shape: nil, strides: nil, dimension_names: nil)\n+    #\n+    #   @param raw_tensor [::Array<Numeric>] The tensor represented by\n+    #     raw `Array` (not `Arrow::Array`) and `Numeric`s. You can\n+    #     nested `Array` for multi-dimensions array.\n+    #\n+    #   @param data_type [Arrow::DataType, String, Symbol, ::Array<String>,\n+    #     ::Array<Symbol>, Hash, nil] The element data type of the tensor.\n+    #\n+    #     If you specify `nil`, data type is guessed from `raw_tensor`.\n+    #\n+    #     See {Arrow::DataType.resolve} how to specify data type.\n+    #\n+    #   @param shape [::Array<Integer>, nil] The array of dimension sizes.\n+    #\n+    #     If you specify `nil`, shape is guessed from `raw_tensor`.\n+    #\n+    #   @param strides [::Array<Integer>, nil] The array of the number of\n+    #     bytes in each dimension.\n+    #\n+    #     If you specify `nil` or an empty `Array`, strides are\n+    #     guessed from `raw_tensor`.\n+    #\n+    #   @param dimension_names [::Array<String>, ::Array<Symbol>, nil]\n+    #     The array of the dimension names.\n+    #\n+    #     If you specify `nil`, all dimensions doesn't have their names.\n+    #\n+    #   @example Create a tensor from Ruby's Array\n+    #     raw_tensor = [\n+    #       [\n+    #         [1, 2, 3, 4],\n+    #         [5, 6, 7, 8],\n+    #       ],\n+    #       [\n+    #         [9, 10, 11, 12],\n+    #         [13, 14, 15, 16],\n+    #       ],\n+    #       [\n+    #         [17, 18, 19, 20],\n+    #         [21, 22, 23, 24],\n+    #       ],\n+    #     ]\n+    #     Arrow::Tensor.new(raw_tensor)\n+    #\n+    #   @since 10.0.0\n+    #\n+    # @overload initialize(data_type, data, shape, strides, dimension_names)\n+    #\n+    #   @param data_type [Arrow::DataType, String, Symbol, ::Array<String>,\n+    #     ::Array<Symbol>, Hash] The element data type of the tensor.\n+    #\n+    #     See {Arrow::DataType.resolve} how to specify data type.\n+    #\n+    #   @param data [Arrow::Buffer] The data of the tensor.\n+    #\n+    #   @param shape [::Array<Integer>] The array of dimension sizes.\n+    #\n+    #   @param strides [::Array<Integer>, nil] The array of the number of\n+    #     bytes in each dimension.\n+    #\n+    #     If you specify `nil` or an empty `Array`, strides are\n+    #     guessed from `data_type` and `data`.\n+    #\n+    #   @param dimension_names [::Array<String>, ::Array<Symbol>, nil]\n+    #     The array of the dimension names.\n+    #\n+    #     If you specify `nil`, all dimensions doesn't have their names.\n+    #\n+    #   @example Create a table from Arrow::Buffer\n+    #     raw_data = [\n+    #       1, 2,\n+    #       3, 4,\n+    #\n+    #       5, 6,\n+    #       7, 8,\n+    #\n+    #       9, 10,\n+    #       11, 12,\n+    #     ]\n+    #     data = Arrow::Buffer.new(raw_data.pack(\"c*\").freeze)\n+    #     shape = [3, 2, 2]\n+    #     strides = []\n+    #     names = [\"a\", \"b\", \"c\"]\n+    #     Arrow::Tensor.new(:int8, data, shape, strides, names)\n+    def initialize(*args,\n+                   data_type: nil,\n+                   data: nil,\n+                   shape: nil,\n+                   strides: nil,\n+                   dimension_names: nil)\n+      n_args = args.size\n+      case n_args\n+      when 1\n+        converter = RawTensorConverter.new(args[0],\n+                                           data_type: data_type,\n+                                           shape: shape,\n+                                           strides: strides,\n+                                           dimension_names: dimension_names)\n+        data_type = converter.data_type\n+        data = converter.data\n+        shape = converter.shape\n+        strides = converter.strides\n+        dimension_names = converter.dimension_names\n+      when 5\n\nReview Comment:\n   Is it common to allow this in Ruby?\r\n   \n\n\n\n",
                    "created": "2022-10-12T11:44:34.566+0000",
                    "updated": "2022-10-12T11:44:34.566+0000",
                    "started": "2022-10-12T11:44:34.566+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816112",
                    "issueId": "13485811"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485811/worklog/816380",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on code in PR #14381:\nURL: https://github.com/apache/arrow/pull/14381#discussion_r993996967\n\n\n##########\nruby/red-arrow/test/test-tensor.rb:\n##########\n@@ -16,6 +16,103 @@\n # under the License.\n \n class TensorTest < Test::Unit::TestCase\n+  sub_test_case(\"class methods\") do\n+    sub_test_case(\".new\") do\n+      def setup\n+        @raw_tensor = [\n+          [\n+            [1, 2, 3, 4],\n+            [5, 6, 7, 8],\n+          ],\n+          [\n+            [9, 10, 11, 12],\n+            [13, 14, 15, 16],\n+          ],\n+          [\n+            [17, 18, 19, 20],\n+            [21, 22, 23, 24],\n+          ],\n+        ]\n+        @shape = [3, 2, 4]\n+        @strides = [8, 4, 1]\n+      end\n+\n+      test(\"Array\") do\n+        tensor = Arrow::Tensor.new(@raw_tensor)\n+        assert_equal({\n+                       value_data_type: Arrow::UInt8DataType.new,\n+                       buffer: @raw_tensor.flatten.pack(\"C*\"),\n+                       shape: @shape,\n+                       strides: @strides,\n+                       dimension_names: [\"\", \"\", \"\"],\n+                     },\n+                     {\n+                       value_data_type: tensor.value_data_type,\n+                       buffer: tensor.buffer.data.to_s,\n+                       shape: tensor.shape,\n+                       strides: tensor.strides,\n+                       dimension_names: tensor.dimension_names,\n+                     })\n+      end\n+\n+      test(\"Array, data_type: Symbol\") do\n+        tensor = Arrow::Tensor.new(@raw_tensor, data_type: :int32)\n+        assert_equal({\n+                       value_data_type: Arrow::Int32DataType.new,\n+                       buffer: @raw_tensor.flatten.pack(\"l*\"),\n+                       shape: @shape,\n+                       strides: @strides.collect {|x| x * 4},\n+                       dimension_names: [\"\", \"\", \"\"],\n+                     },\n+                     {\n+                       value_data_type: tensor.value_data_type,\n+                       buffer: tensor.buffer.data.to_s,\n+                       shape: tensor.shape,\n+                       strides: tensor.strides,\n+                       dimension_names: tensor.dimension_names,\n+                     })\n+      end\n+\n+      test(\"Array, dimension_names: Array<String>\") do\n+        tensor = Arrow::Tensor.new(@raw_tensor,\n+                                   dimension_names: [\"a\", \"b\", \"c\"])\n+        assert_equal({\n+                       value_data_type: Arrow::UInt8DataType.new,\n+                       buffer: @raw_tensor.flatten.pack(\"C*\"),\n+                       shape: @shape,\n+                       strides: @strides,\n+                       dimension_names: [\"a\", \"b\", \"c\"],\n+                     },\n+                     {\n+                       value_data_type: tensor.value_data_type,\n+                       buffer: tensor.buffer.data.to_s,\n+                       shape: tensor.shape,\n+                       strides: tensor.strides,\n+                       dimension_names: tensor.dimension_names,\n+                     })\n+      end\n+\n+      test(\"Array, dimension_names: Array<Symbol>\") do\n+        tensor = Arrow::Tensor.new(@raw_tensor,\n+                                   dimension_names: [:a, :b, :c])\n+        assert_equal({\n+                       value_data_type: Arrow::UInt8DataType.new,\n+                       buffer: @raw_tensor.flatten.pack(\"C*\"),\n+                       shape: @shape,\n+                       strides: @strides,\n+                       dimension_names: [\"a\", \"b\", \"c\"],\n+                     },\n+                     {\n+                       value_data_type: tensor.value_data_type,\n+                       buffer: tensor.buffer.data.to_s,\n+                       shape: tensor.shape,\n+                       strides: tensor.strides,\n+                       dimension_names: tensor.dimension_names,\n+                     })\n+      end\n\nReview Comment:\n   Ah, I forgot to add it. `strides` is for passing `Arrow::Buffer` (not `Array`) as the first argument.\r\n   I'll add some tests for `Arrow::Buffer`.\n\n\n\n##########\nruby/red-arrow/lib/arrow/tensor.rb:\n##########\n@@ -15,8 +15,140 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+require_relative \"raw-tensor-converter\"\n+\n module Arrow\n   class Tensor\n+    alias_method :initialize_raw, :initialize\n+    # Creates a new {Arrow::Tensor}.\n+    #\n+    # @overload initialize(raw_tensor, data_type: nil, shape: nil, strides: nil, dimension_names: nil)\n+    #\n+    #   @param raw_tensor [::Array<Numeric>] The tensor represented by\n+    #     raw `Array` (not `Arrow::Array`) and `Numeric`s. You can\n+    #     nested `Array` for multi-dimensions array.\n+    #\n+    #   @param data_type [Arrow::DataType, String, Symbol, ::Array<String>,\n+    #     ::Array<Symbol>, Hash, nil] The element data type of the tensor.\n+    #\n+    #     If you specify `nil`, data type is guessed from `raw_tensor`.\n+    #\n+    #     See {Arrow::DataType.resolve} how to specify data type.\n+    #\n+    #   @param shape [::Array<Integer>, nil] The array of dimension sizes.\n+    #\n+    #     If you specify `nil`, shape is guessed from `raw_tensor`.\n+    #\n+    #   @param strides [::Array<Integer>, nil] The array of the number of\n+    #     bytes in each dimension.\n\nReview Comment:\n   > Not really, these are the increments in bytes.\r\n   \r\n   This is a problem of my English skill...\r\n   @mrkn Could you provide me a description about `strides` for this document?\r\n   \r\n   > But I'm surprised you can pass `strides` here. I would expect this method to simply always create a contiguous tensor.\r\n   \r\n   You're right. I added the `strides` keyword argument for a case that `Arrow::Buffer` as the `raw_tensor`. But I forgot to describe `Arrow::Buffer` in document and add tests for `Arrow::Buffer` case. I'll add them.\n\n\n\n##########\nruby/red-arrow/lib/arrow/tensor.rb:\n##########\n@@ -15,8 +15,140 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+require_relative \"raw-tensor-converter\"\n+\n module Arrow\n   class Tensor\n+    alias_method :initialize_raw, :initialize\n+    # Creates a new {Arrow::Tensor}.\n+    #\n+    # @overload initialize(raw_tensor, data_type: nil, shape: nil, strides: nil, dimension_names: nil)\n+    #\n+    #   @param raw_tensor [::Array<Numeric>] The tensor represented by\n+    #     raw `Array` (not `Arrow::Array`) and `Numeric`s. You can\n+    #     nested `Array` for multi-dimensions array.\n+    #\n+    #   @param data_type [Arrow::DataType, String, Symbol, ::Array<String>,\n+    #     ::Array<Symbol>, Hash, nil] The element data type of the tensor.\n+    #\n+    #     If you specify `nil`, data type is guessed from `raw_tensor`.\n+    #\n+    #     See {Arrow::DataType.resolve} how to specify data type.\n+    #\n+    #   @param shape [::Array<Integer>, nil] The array of dimension sizes.\n+    #\n+    #     If you specify `nil`, shape is guessed from `raw_tensor`.\n+    #\n+    #   @param strides [::Array<Integer>, nil] The array of the number of\n+    #     bytes in each dimension.\n+    #\n+    #     If you specify `nil` or an empty `Array`, strides are\n+    #     guessed from `raw_tensor`.\n+    #\n+    #   @param dimension_names [::Array<String>, ::Array<Symbol>, nil]\n+    #     The array of the dimension names.\n+    #\n+    #     If you specify `nil`, all dimensions doesn't have their names.\n+    #\n+    #   @example Create a tensor from Ruby's Array\n+    #     raw_tensor = [\n+    #       [\n+    #         [1, 2, 3, 4],\n+    #         [5, 6, 7, 8],\n+    #       ],\n+    #       [\n+    #         [9, 10, 11, 12],\n+    #         [13, 14, 15, 16],\n+    #       ],\n+    #       [\n+    #         [17, 18, 19, 20],\n+    #         [21, 22, 23, 24],\n+    #       ],\n+    #     ]\n+    #     Arrow::Tensor.new(raw_tensor)\n+    #\n+    #   @since 10.0.0\n+    #\n+    # @overload initialize(data_type, data, shape, strides, dimension_names)\n+    #\n+    #   @param data_type [Arrow::DataType, String, Symbol, ::Array<String>,\n+    #     ::Array<Symbol>, Hash] The element data type of the tensor.\n+    #\n+    #     See {Arrow::DataType.resolve} how to specify data type.\n+    #\n+    #   @param data [Arrow::Buffer] The data of the tensor.\n+    #\n+    #   @param shape [::Array<Integer>] The array of dimension sizes.\n+    #\n+    #   @param strides [::Array<Integer>, nil] The array of the number of\n+    #     bytes in each dimension.\n+    #\n+    #     If you specify `nil` or an empty `Array`, strides are\n+    #     guessed from `data_type` and `data`.\n+    #\n+    #   @param dimension_names [::Array<String>, ::Array<Symbol>, nil]\n+    #     The array of the dimension names.\n+    #\n+    #     If you specify `nil`, all dimensions doesn't have their names.\n+    #\n+    #   @example Create a table from Arrow::Buffer\n+    #     raw_data = [\n+    #       1, 2,\n+    #       3, 4,\n+    #\n+    #       5, 6,\n+    #       7, 8,\n+    #\n+    #       9, 10,\n+    #       11, 12,\n+    #     ]\n+    #     data = Arrow::Buffer.new(raw_data.pack(\"c*\").freeze)\n+    #     shape = [3, 2, 2]\n+    #     strides = []\n+    #     names = [\"a\", \"b\", \"c\"]\n+    #     Arrow::Tensor.new(:int8, data, shape, strides, names)\n+    def initialize(*args,\n+                   data_type: nil,\n+                   data: nil,\n+                   shape: nil,\n+                   strides: nil,\n+                   dimension_names: nil)\n+      n_args = args.size\n+      case n_args\n+      when 1\n+        converter = RawTensorConverter.new(args[0],\n+                                           data_type: data_type,\n+                                           shape: shape,\n+                                           strides: strides,\n+                                           dimension_names: dimension_names)\n+        data_type = converter.data_type\n+        data = converter.data\n+        shape = converter.shape\n+        strides = converter.strides\n+        dimension_names = converter.dimension_names\n+      when 5\n\nReview Comment:\n   What does the \"this\" mean? Dispatching by the number of positional arguments?\n\n\n\n",
                    "created": "2022-10-13T00:20:14.683+0000",
                    "updated": "2022-10-13T00:20:14.683+0000",
                    "started": "2022-10-13T00:20:14.683+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816380",
                    "issueId": "13485811"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485811/worklog/816465",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #14381:\nURL: https://github.com/apache/arrow/pull/14381#discussion_r994268692\n\n\n##########\nruby/red-arrow/lib/arrow/tensor.rb:\n##########\n@@ -15,8 +15,140 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+require_relative \"raw-tensor-converter\"\n+\n module Arrow\n   class Tensor\n+    alias_method :initialize_raw, :initialize\n+    # Creates a new {Arrow::Tensor}.\n+    #\n+    # @overload initialize(raw_tensor, data_type: nil, shape: nil, strides: nil, dimension_names: nil)\n+    #\n+    #   @param raw_tensor [::Array<Numeric>] The tensor represented by\n+    #     raw `Array` (not `Arrow::Array`) and `Numeric`s. You can\n+    #     nested `Array` for multi-dimensions array.\n+    #\n+    #   @param data_type [Arrow::DataType, String, Symbol, ::Array<String>,\n+    #     ::Array<Symbol>, Hash, nil] The element data type of the tensor.\n+    #\n+    #     If you specify `nil`, data type is guessed from `raw_tensor`.\n+    #\n+    #     See {Arrow::DataType.resolve} how to specify data type.\n+    #\n+    #   @param shape [::Array<Integer>, nil] The array of dimension sizes.\n+    #\n+    #     If you specify `nil`, shape is guessed from `raw_tensor`.\n+    #\n+    #   @param strides [::Array<Integer>, nil] The array of the number of\n+    #     bytes in each dimension.\n+    #\n+    #     If you specify `nil` or an empty `Array`, strides are\n+    #     guessed from `raw_tensor`.\n+    #\n+    #   @param dimension_names [::Array<String>, ::Array<Symbol>, nil]\n+    #     The array of the dimension names.\n+    #\n+    #     If you specify `nil`, all dimensions doesn't have their names.\n+    #\n+    #   @example Create a tensor from Ruby's Array\n+    #     raw_tensor = [\n+    #       [\n+    #         [1, 2, 3, 4],\n+    #         [5, 6, 7, 8],\n+    #       ],\n+    #       [\n+    #         [9, 10, 11, 12],\n+    #         [13, 14, 15, 16],\n+    #       ],\n+    #       [\n+    #         [17, 18, 19, 20],\n+    #         [21, 22, 23, 24],\n+    #       ],\n+    #     ]\n+    #     Arrow::Tensor.new(raw_tensor)\n+    #\n+    #   @since 10.0.0\n+    #\n+    # @overload initialize(data_type, data, shape, strides, dimension_names)\n+    #\n+    #   @param data_type [Arrow::DataType, String, Symbol, ::Array<String>,\n+    #     ::Array<Symbol>, Hash] The element data type of the tensor.\n+    #\n+    #     See {Arrow::DataType.resolve} how to specify data type.\n+    #\n+    #   @param data [Arrow::Buffer] The data of the tensor.\n+    #\n+    #   @param shape [::Array<Integer>] The array of dimension sizes.\n+    #\n+    #   @param strides [::Array<Integer>, nil] The array of the number of\n+    #     bytes in each dimension.\n+    #\n+    #     If you specify `nil` or an empty `Array`, strides are\n+    #     guessed from `data_type` and `data`.\n+    #\n+    #   @param dimension_names [::Array<String>, ::Array<Symbol>, nil]\n+    #     The array of the dimension names.\n+    #\n+    #     If you specify `nil`, all dimensions doesn't have their names.\n+    #\n+    #   @example Create a table from Arrow::Buffer\n+    #     raw_data = [\n+    #       1, 2,\n+    #       3, 4,\n+    #\n+    #       5, 6,\n+    #       7, 8,\n+    #\n+    #       9, 10,\n+    #       11, 12,\n+    #     ]\n+    #     data = Arrow::Buffer.new(raw_data.pack(\"c*\").freeze)\n+    #     shape = [3, 2, 2]\n+    #     strides = []\n+    #     names = [\"a\", \"b\", \"c\"]\n+    #     Arrow::Tensor.new(:int8, data, shape, strides, names)\n+    def initialize(*args,\n+                   data_type: nil,\n+                   data: nil,\n+                   shape: nil,\n+                   strides: nil,\n+                   dimension_names: nil)\n+      n_args = args.size\n+      case n_args\n+      when 1\n+        converter = RawTensorConverter.new(args[0],\n+                                           data_type: data_type,\n+                                           shape: shape,\n+                                           strides: strides,\n+                                           dimension_names: dimension_names)\n+        data_type = converter.data_type\n+        data = converter.data\n+        shape = converter.shape\n+        strides = converter.strides\n+        dimension_names = converter.dimension_names\n+      when 5\n\nReview Comment:\n   Yes :-) Is there no easier way to do this?\n\n\n\n",
                    "created": "2022-10-13T07:37:49.129+0000",
                    "updated": "2022-10-13T07:37:49.129+0000",
                    "started": "2022-10-13T07:37:49.129+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816465",
                    "issueId": "13485811"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485811/worklog/816660",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #14381:\nURL: https://github.com/apache/arrow/pull/14381#issuecomment-1277797684\n\n   For the record, the equivalent Python functions don't allow passing `strides`.\n\n\n",
                    "created": "2022-10-13T15:28:14.609+0000",
                    "updated": "2022-10-13T15:28:14.609+0000",
                    "started": "2022-10-13T15:28:14.608+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816660",
                    "issueId": "13485811"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485811/worklog/816673",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on code in PR #14381:\nURL: https://github.com/apache/arrow/pull/14381#discussion_r994838376\n\n\n##########\nruby/red-arrow/lib/arrow/tensor.rb:\n##########\n@@ -15,8 +15,140 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+require_relative \"raw-tensor-converter\"\n+\n module Arrow\n   class Tensor\n+    alias_method :initialize_raw, :initialize\n+    # Creates a new {Arrow::Tensor}.\n+    #\n+    # @overload initialize(raw_tensor, data_type: nil, shape: nil, strides: nil, dimension_names: nil)\n+    #\n+    #   @param raw_tensor [::Array<Numeric>] The tensor represented by\n+    #     raw `Array` (not `Arrow::Array`) and `Numeric`s. You can\n+    #     nested `Array` for multi-dimensions array.\n+    #\n+    #   @param data_type [Arrow::DataType, String, Symbol, ::Array<String>,\n+    #     ::Array<Symbol>, Hash, nil] The element data type of the tensor.\n+    #\n+    #     If you specify `nil`, data type is guessed from `raw_tensor`.\n+    #\n+    #     See {Arrow::DataType.resolve} how to specify data type.\n+    #\n+    #   @param shape [::Array<Integer>, nil] The array of dimension sizes.\n+    #\n+    #     If you specify `nil`, shape is guessed from `raw_tensor`.\n+    #\n+    #   @param strides [::Array<Integer>, nil] The array of the number of\n+    #     bytes in each dimension.\n\nReview Comment:\n   @kou How about this?\r\n   \r\n   ```\r\n       #   @param strides [::Array<Integer>, nil] The array of strides which\r\n       #     is the number of bytes between two adjacent elements in each\r\n       #     dimension.\r\n   ```\n\n\n\n",
                    "created": "2022-10-13T15:56:39.034+0000",
                    "updated": "2022-10-13T15:56:39.034+0000",
                    "started": "2022-10-13T15:56:39.033+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816673",
                    "issueId": "13485811"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485811/worklog/816686",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on code in PR #14381:\nURL: https://github.com/apache/arrow/pull/14381#discussion_r994854624\n\n\n##########\nruby/red-arrow/test/test-tensor.rb:\n##########\n@@ -16,6 +16,103 @@\n # under the License.\n \n class TensorTest < Test::Unit::TestCase\n+  sub_test_case(\"class methods\") do\n+    sub_test_case(\".new\") do\n+      def setup\n+        @raw_tensor = [\n+          [\n+            [1, 2, 3, 4],\n+            [5, 6, 7, 8],\n+          ],\n+          [\n+            [9, 10, 11, 12],\n+            [13, 14, 15, 16],\n+          ],\n+          [\n+            [17, 18, 19, 20],\n+            [21, 22, 23, 24],\n+          ],\n+        ]\n+        @shape = [3, 2, 4]\n+        @strides = [8, 4, 1]\n+      end\n+\n+      test(\"Array\") do\n+        tensor = Arrow::Tensor.new(@raw_tensor)\n+        assert_equal({\n+                       value_data_type: Arrow::UInt8DataType.new,\n+                       buffer: @raw_tensor.flatten.pack(\"C*\"),\n+                       shape: @shape,\n+                       strides: @strides,\n+                       dimension_names: [\"\", \"\", \"\"],\n+                     },\n+                     {\n+                       value_data_type: tensor.value_data_type,\n+                       buffer: tensor.buffer.data.to_s,\n+                       shape: tensor.shape,\n+                       strides: tensor.strides,\n+                       dimension_names: tensor.dimension_names,\n+                     })\n+      end\n+\n+      test(\"Array, data_type: Symbol\") do\n+        tensor = Arrow::Tensor.new(@raw_tensor, data_type: :int32)\n+        assert_equal({\n+                       value_data_type: Arrow::Int32DataType.new,\n+                       buffer: @raw_tensor.flatten.pack(\"l*\"),\n+                       shape: @shape,\n+                       strides: @strides.collect {|x| x * 4},\n+                       dimension_names: [\"\", \"\", \"\"],\n+                     },\n+                     {\n+                       value_data_type: tensor.value_data_type,\n+                       buffer: tensor.buffer.data.to_s,\n+                       shape: tensor.shape,\n+                       strides: tensor.strides,\n+                       dimension_names: tensor.dimension_names,\n+                     })\n+      end\n+\n+      test(\"Array, dimension_names: Array<String>\") do\n+        tensor = Arrow::Tensor.new(@raw_tensor,\n+                                   dimension_names: [\"a\", \"b\", \"c\"])\n+        assert_equal({\n+                       value_data_type: Arrow::UInt8DataType.new,\n+                       buffer: @raw_tensor.flatten.pack(\"C*\"),\n+                       shape: @shape,\n+                       strides: @strides,\n+                       dimension_names: [\"a\", \"b\", \"c\"],\n+                     },\n+                     {\n+                       value_data_type: tensor.value_data_type,\n+                       buffer: tensor.buffer.data.to_s,\n+                       shape: tensor.shape,\n+                       strides: tensor.strides,\n+                       dimension_names: tensor.dimension_names,\n+                     })\n+      end\n+\n+      test(\"Array, dimension_names: Array<Symbol>\") do\n+        tensor = Arrow::Tensor.new(@raw_tensor,\n+                                   dimension_names: [:a, :b, :c])\n+        assert_equal({\n+                       value_data_type: Arrow::UInt8DataType.new,\n+                       buffer: @raw_tensor.flatten.pack(\"C*\"),\n+                       shape: @shape,\n+                       strides: @strides,\n+                       dimension_names: [\"a\", \"b\", \"c\"],\n+                     },\n+                     {\n+                       value_data_type: tensor.value_data_type,\n+                       buffer: tensor.buffer.data.to_s,\n+                       shape: tensor.shape,\n+                       strides: tensor.strides,\n+                       dimension_names: tensor.dimension_names,\n+                     })\n+      end\n\nReview Comment:\n   @kou `strides` is mentioned not only in the case that `raw_tensor` is an `Arrow::Buffer` but also in the case that `raw_tensor` is an `Array`.  I expect I can pass `strides` also for the latter case from this description.\n\n\n\n",
                    "created": "2022-10-13T16:11:00.333+0000",
                    "updated": "2022-10-13T16:11:00.333+0000",
                    "started": "2022-10-13T16:11:00.333+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816686",
                    "issueId": "13485811"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485811/worklog/816852",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on code in PR #14381:\nURL: https://github.com/apache/arrow/pull/14381#discussion_r995289055\n\n\n##########\nruby/red-arrow/lib/arrow/tensor.rb:\n##########\n@@ -15,8 +15,140 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+require_relative \"raw-tensor-converter\"\n+\n module Arrow\n   class Tensor\n+    alias_method :initialize_raw, :initialize\n+    # Creates a new {Arrow::Tensor}.\n+    #\n+    # @overload initialize(raw_tensor, data_type: nil, shape: nil, strides: nil, dimension_names: nil)\n+    #\n+    #   @param raw_tensor [::Array<Numeric>] The tensor represented by\n+    #     raw `Array` (not `Arrow::Array`) and `Numeric`s. You can\n+    #     nested `Array` for multi-dimensions array.\n+    #\n+    #   @param data_type [Arrow::DataType, String, Symbol, ::Array<String>,\n+    #     ::Array<Symbol>, Hash, nil] The element data type of the tensor.\n+    #\n+    #     If you specify `nil`, data type is guessed from `raw_tensor`.\n+    #\n+    #     See {Arrow::DataType.resolve} how to specify data type.\n+    #\n+    #   @param shape [::Array<Integer>, nil] The array of dimension sizes.\n+    #\n+    #     If you specify `nil`, shape is guessed from `raw_tensor`.\n+    #\n+    #   @param strides [::Array<Integer>, nil] The array of the number of\n+    #     bytes in each dimension.\n+    #\n+    #     If you specify `nil` or an empty `Array`, strides are\n+    #     guessed from `raw_tensor`.\n+    #\n+    #   @param dimension_names [::Array<String>, ::Array<Symbol>, nil]\n+    #     The array of the dimension names.\n+    #\n+    #     If you specify `nil`, all dimensions doesn't have their names.\n+    #\n+    #   @example Create a tensor from Ruby's Array\n+    #     raw_tensor = [\n+    #       [\n+    #         [1, 2, 3, 4],\n+    #         [5, 6, 7, 8],\n+    #       ],\n+    #       [\n+    #         [9, 10, 11, 12],\n+    #         [13, 14, 15, 16],\n+    #       ],\n+    #       [\n+    #         [17, 18, 19, 20],\n+    #         [21, 22, 23, 24],\n+    #       ],\n+    #     ]\n+    #     Arrow::Tensor.new(raw_tensor)\n+    #\n+    #   @since 10.0.0\n+    #\n+    # @overload initialize(data_type, data, shape, strides, dimension_names)\n+    #\n+    #   @param data_type [Arrow::DataType, String, Symbol, ::Array<String>,\n+    #     ::Array<Symbol>, Hash] The element data type of the tensor.\n+    #\n+    #     See {Arrow::DataType.resolve} how to specify data type.\n+    #\n+    #   @param data [Arrow::Buffer] The data of the tensor.\n+    #\n+    #   @param shape [::Array<Integer>] The array of dimension sizes.\n+    #\n+    #   @param strides [::Array<Integer>, nil] The array of the number of\n+    #     bytes in each dimension.\n+    #\n+    #     If you specify `nil` or an empty `Array`, strides are\n+    #     guessed from `data_type` and `data`.\n+    #\n+    #   @param dimension_names [::Array<String>, ::Array<Symbol>, nil]\n+    #     The array of the dimension names.\n+    #\n+    #     If you specify `nil`, all dimensions doesn't have their names.\n+    #\n+    #   @example Create a table from Arrow::Buffer\n+    #     raw_data = [\n+    #       1, 2,\n+    #       3, 4,\n+    #\n+    #       5, 6,\n+    #       7, 8,\n+    #\n+    #       9, 10,\n+    #       11, 12,\n+    #     ]\n+    #     data = Arrow::Buffer.new(raw_data.pack(\"c*\").freeze)\n+    #     shape = [3, 2, 2]\n+    #     strides = []\n+    #     names = [\"a\", \"b\", \"c\"]\n+    #     Arrow::Tensor.new(:int8, data, shape, strides, names)\n+    def initialize(*args,\n+                   data_type: nil,\n+                   data: nil,\n+                   shape: nil,\n+                   strides: nil,\n+                   dimension_names: nil)\n+      n_args = args.size\n+      case n_args\n+      when 1\n+        converter = RawTensorConverter.new(args[0],\n+                                           data_type: data_type,\n+                                           shape: shape,\n+                                           strides: strides,\n+                                           dimension_names: dimension_names)\n+        data_type = converter.data_type\n+        data = converter.data\n+        shape = converter.shape\n+        strides = converter.strides\n+        dimension_names = converter.dimension_names\n+      when 5\n\nReview Comment:\n   There is no easier way for this in Ruby. :(\r\n   Because Ruby doesn't support method overload. If we want to define multiple signature for the same name method, we need to dispatch by arguments in the method. If the number of arguments are different for each signature, we can use it to dispatch. If the number of arguments are same, we can use `args[0].is_a?(String)`, `args[0].respond_to?(:write)` or something.\n\n\n\n",
                    "created": "2022-10-14T02:47:43.725+0000",
                    "updated": "2022-10-14T02:47:43.725+0000",
                    "started": "2022-10-14T02:47:43.725+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816852",
                    "issueId": "13485811"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485811/worklog/816854",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on PR #14381:\nURL: https://github.com/apache/arrow/pull/14381#issuecomment-1278405933\n\n   > For the record, the equivalent Python functions don't allow passing `strides`.\r\n   \r\n   Thanks for the information.\r\n   \r\n   It seems that PyArrow only accepts constructing a tensor from a NumPy array: https://arrow.apache.org/docs/python/generated/pyarrow.Tensor.html#pyarrow.Tensor.from_numpy\r\n   \r\n   For Ruby, we're already providing a constructor from raw binary data and metadata. It's based on `arrow::Tensor::Make()` in C++. So we can't remove the constructor to keep backward compatibility.\r\n   \r\n   FYI: We have an external library that converts a NumPy like multi-dimentional array in Ruby (Numo::NArray) to `Arrow::Tensor`: https://github.com/red-data-tools/red-arrow-numo-narray/\n\n\n",
                    "created": "2022-10-14T02:57:34.947+0000",
                    "updated": "2022-10-14T02:57:34.947+0000",
                    "started": "2022-10-14T02:57:34.946+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816854",
                    "issueId": "13485811"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485811/worklog/816855",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on code in PR #14381:\nURL: https://github.com/apache/arrow/pull/14381#discussion_r995293324\n\n\n##########\nruby/red-arrow/lib/arrow/tensor.rb:\n##########\n@@ -15,8 +15,140 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+require_relative \"raw-tensor-converter\"\n+\n module Arrow\n   class Tensor\n+    alias_method :initialize_raw, :initialize\n+    # Creates a new {Arrow::Tensor}.\n+    #\n+    # @overload initialize(raw_tensor, data_type: nil, shape: nil, strides: nil, dimension_names: nil)\n+    #\n+    #   @param raw_tensor [::Array<Numeric>] The tensor represented by\n+    #     raw `Array` (not `Arrow::Array`) and `Numeric`s. You can\n+    #     nested `Array` for multi-dimensions array.\n+    #\n+    #   @param data_type [Arrow::DataType, String, Symbol, ::Array<String>,\n+    #     ::Array<Symbol>, Hash, nil] The element data type of the tensor.\n+    #\n+    #     If you specify `nil`, data type is guessed from `raw_tensor`.\n+    #\n+    #     See {Arrow::DataType.resolve} how to specify data type.\n+    #\n+    #   @param shape [::Array<Integer>, nil] The array of dimension sizes.\n+    #\n+    #     If you specify `nil`, shape is guessed from `raw_tensor`.\n+    #\n+    #   @param strides [::Array<Integer>, nil] The array of the number of\n+    #     bytes in each dimension.\n\nReview Comment:\n   Thanks! I use it.\n\n\n\n",
                    "created": "2022-10-14T02:58:39.891+0000",
                    "updated": "2022-10-14T02:58:39.891+0000",
                    "started": "2022-10-14T02:58:39.891+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816855",
                    "issueId": "13485811"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485811/worklog/816863",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on PR #14381:\nURL: https://github.com/apache/arrow/pull/14381#issuecomment-1278483207\n\n   @mrkn What do you think about improved API?\n\n\n",
                    "created": "2022-10-14T04:56:30.658+0000",
                    "updated": "2022-10-14T04:56:30.658+0000",
                    "started": "2022-10-14T04:56:30.657+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816863",
                    "issueId": "13485811"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485811/worklog/816864",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on code in PR #14381:\nURL: https://github.com/apache/arrow/pull/14381#discussion_r995341876\n\n\n##########\nruby/red-arrow/lib/arrow/raw-tensor-converter.rb:\n##########\n@@ -41,12 +41,22 @@ def convert\n       case @raw_tensor\n       when Buffer\n         @data = @raw_tensor\n+      when String\n+        @data = Arrow::Buffer.new(@raw_tensor)\n\nReview Comment:\n   Is restriction by `BINARY` encoding unnecessary?\n\n\n\n##########\nruby/red-arrow/lib/arrow/raw-tensor-converter.rb:\n##########\n@@ -41,12 +41,22 @@ def convert\n       case @raw_tensor\n       when Buffer\n         @data = @raw_tensor\n+      when String\n+        @data = Arrow::Buffer.new(@raw_tensor)\n       else\n         @shape ||= guess_shape\n         build_buffer\n+        unless @strides.nil?\n+          message = \"strides: must not be specified: #{@strides.inspect}\"\n\nReview Comment:\n   How about `strides: is only accepted with a Buffer or String raw_tensor`?\n\n\n\n##########\nruby/red-arrow/test/test-tensor.rb:\n##########\n@@ -110,6 +110,131 @@ def setup\n                        dimension_names: tensor.dimension_names,\n                      })\n       end\n+\n+      test(\"Array, strides:\") do\n+        message = \"strides: must not be specified: #{@strides.inspect}\"\n+        assert_raise(ArgumentError.new(message)) do\n+          Arrow::Tensor.new(@raw_tensor, strides: @strides)\n+        end\n+      end\n+\n+      test(\"Arrow::Buffer, data_type:, shape:\") do\n+        data_type = :uint8\n+        data = Arrow::Buffer.new(@raw_tensor.flatten.pack(\"C*\").freeze)\n+        tensor = Arrow::Tensor.new(data,\n+                                   data_type: data_type,\n+                                   shape: @shape)\n+        assert_equal({\n+                       value_data_type: Arrow::UInt8DataType.new,\n+                       buffer: @raw_tensor.flatten.pack(\"C*\"),\n+                       shape: @shape,\n+                       strides: @strides,\n+                       dimension_names: [\"\", \"\", \"\"],\n+                     },\n+                     {\n+                       value_data_type: tensor.value_data_type,\n+                       buffer: tensor.buffer.data.to_s,\n+                       shape: tensor.shape,\n+                       strides: tensor.strides,\n+                       dimension_names: tensor.dimension_names,\n+                     })\n+      end\n+\n+      test(\"String, data_type:, shape:\") do\n+        data_type = :uint8\n+        data = @raw_tensor.flatten.pack(\"C*\").freeze\n+        tensor = Arrow::Tensor.new(data,\n+                                   data_type: data_type,\n+                                   shape: @shape)\n+        assert_equal({\n+                       value_data_type: Arrow::UInt8DataType.new,\n+                       buffer: @raw_tensor.flatten.pack(\"C*\"),\n+                       shape: @shape,\n+                       strides: @strides,\n+                       dimension_names: [\"\", \"\", \"\"],\n+                     },\n+                     {\n+                       value_data_type: tensor.value_data_type,\n+                       buffer: tensor.buffer.data.to_s,\n+                       shape: tensor.shape,\n+                       strides: tensor.strides,\n+                       dimension_names: tensor.dimension_names,\n+                     })\n+      end\n+\n+      test(\"String, data_type:\") do\n+        data_type = :uint8\n+        data = @raw_tensor.flatten.pack(\"C*\").freeze\n+        message = \"shape: is missing: #{data.inspect}\"\n+        assert_raise(ArgumentError.new(message)) do\n+          Arrow::Tensor.new(data, data_type: data_type)\n+        end\n+      end\n+\n+      test(\"String, shape:\") do\n+        data = @raw_tensor.flatten.pack(\"C*\").freeze\n+        message = \"data_type: is missing: #{data.inspect}\"\n+        assert_raise(ArgumentError.new(message)) do\n+          Arrow::Tensor.new(data, shape: @shape)\n+        end\n+      end\n+\n+      test(\"Symbol, Arrow::Buffer, shape:\") do\n+        data_type = :uint8\n+        data = Arrow::Buffer.new(@raw_tensor.flatten.pack(\"C*\").freeze)\n+        tensor = Arrow::Tensor.new(data_type,\n+                                   data,\n+                                   shape: @shape)\n+        assert_equal({\n+                       value_data_type: Arrow::UInt8DataType.new,\n+                       buffer: @raw_tensor.flatten.pack(\"C*\"),\n+                       shape: @shape,\n+                       strides: @strides,\n+                       dimension_names: [\"\", \"\", \"\"],\n+                     },\n+                     {\n+                       value_data_type: tensor.value_data_type,\n+                       buffer: tensor.buffer.data.to_s,\n+                       shape: tensor.shape,\n+                       strides: tensor.strides,\n+                       dimension_names: tensor.dimension_names,\n+                     })\n+      end\n+\n+      test(\"Symbol, String, shape:, strides: - !contiguous and column major\") do\n+        data_type = :uint8\n+        raw_tensor = [\n+          [1, 2, 3, 0], # 0 is padding\n+          [4, 5, 6, 0], # 0 is padding\n+        ]\n+        data = raw_tensor.flatten.pack(\"C*\").freeze\n+        shape = [3, 2]\n+        strides = [1, 4]\n\nReview Comment:\n   This looks good to me, but I think we can reuse `@raw_tensor` in this test case by the following condition.\r\n   \r\n   ```\r\n   shape = [3, 2, 3]\r\n   strides = [1, 4, 8]\r\n   ```\n\n\n\n",
                    "created": "2022-10-14T05:12:28.335+0000",
                    "updated": "2022-10-14T05:12:28.335+0000",
                    "started": "2022-10-14T05:12:28.334+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816864",
                    "issueId": "13485811"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485811/worklog/816875",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on code in PR #14381:\nURL: https://github.com/apache/arrow/pull/14381#discussion_r995383116\n\n\n##########\nruby/red-arrow/test/test-tensor.rb:\n##########\n@@ -110,6 +110,131 @@ def setup\n                        dimension_names: tensor.dimension_names,\n                      })\n       end\n+\n+      test(\"Array, strides:\") do\n+        message = \"strides: must not be specified: #{@strides.inspect}\"\n+        assert_raise(ArgumentError.new(message)) do\n+          Arrow::Tensor.new(@raw_tensor, strides: @strides)\n+        end\n+      end\n+\n+      test(\"Arrow::Buffer, data_type:, shape:\") do\n+        data_type = :uint8\n+        data = Arrow::Buffer.new(@raw_tensor.flatten.pack(\"C*\").freeze)\n+        tensor = Arrow::Tensor.new(data,\n+                                   data_type: data_type,\n+                                   shape: @shape)\n+        assert_equal({\n+                       value_data_type: Arrow::UInt8DataType.new,\n+                       buffer: @raw_tensor.flatten.pack(\"C*\"),\n+                       shape: @shape,\n+                       strides: @strides,\n+                       dimension_names: [\"\", \"\", \"\"],\n+                     },\n+                     {\n+                       value_data_type: tensor.value_data_type,\n+                       buffer: tensor.buffer.data.to_s,\n+                       shape: tensor.shape,\n+                       strides: tensor.strides,\n+                       dimension_names: tensor.dimension_names,\n+                     })\n+      end\n+\n+      test(\"String, data_type:, shape:\") do\n+        data_type = :uint8\n+        data = @raw_tensor.flatten.pack(\"C*\").freeze\n+        tensor = Arrow::Tensor.new(data,\n+                                   data_type: data_type,\n+                                   shape: @shape)\n+        assert_equal({\n+                       value_data_type: Arrow::UInt8DataType.new,\n+                       buffer: @raw_tensor.flatten.pack(\"C*\"),\n+                       shape: @shape,\n+                       strides: @strides,\n+                       dimension_names: [\"\", \"\", \"\"],\n+                     },\n+                     {\n+                       value_data_type: tensor.value_data_type,\n+                       buffer: tensor.buffer.data.to_s,\n+                       shape: tensor.shape,\n+                       strides: tensor.strides,\n+                       dimension_names: tensor.dimension_names,\n+                     })\n+      end\n+\n+      test(\"String, data_type:\") do\n+        data_type = :uint8\n+        data = @raw_tensor.flatten.pack(\"C*\").freeze\n+        message = \"shape: is missing: #{data.inspect}\"\n+        assert_raise(ArgumentError.new(message)) do\n+          Arrow::Tensor.new(data, data_type: data_type)\n+        end\n+      end\n+\n+      test(\"String, shape:\") do\n+        data = @raw_tensor.flatten.pack(\"C*\").freeze\n+        message = \"data_type: is missing: #{data.inspect}\"\n+        assert_raise(ArgumentError.new(message)) do\n+          Arrow::Tensor.new(data, shape: @shape)\n+        end\n+      end\n+\n+      test(\"Symbol, Arrow::Buffer, shape:\") do\n+        data_type = :uint8\n+        data = Arrow::Buffer.new(@raw_tensor.flatten.pack(\"C*\").freeze)\n+        tensor = Arrow::Tensor.new(data_type,\n+                                   data,\n+                                   shape: @shape)\n+        assert_equal({\n+                       value_data_type: Arrow::UInt8DataType.new,\n+                       buffer: @raw_tensor.flatten.pack(\"C*\"),\n+                       shape: @shape,\n+                       strides: @strides,\n+                       dimension_names: [\"\", \"\", \"\"],\n+                     },\n+                     {\n+                       value_data_type: tensor.value_data_type,\n+                       buffer: tensor.buffer.data.to_s,\n+                       shape: tensor.shape,\n+                       strides: tensor.strides,\n+                       dimension_names: tensor.dimension_names,\n+                     })\n+      end\n+\n+      test(\"Symbol, String, shape:, strides: - !contiguous and column major\") do\n+        data_type = :uint8\n+        raw_tensor = [\n+          [1, 2, 3, 0], # 0 is padding\n+          [4, 5, 6, 0], # 0 is padding\n+        ]\n+        data = raw_tensor.flatten.pack(\"C*\").freeze\n+        shape = [3, 2]\n+        strides = [1, 4]\n\nReview Comment:\n   I thought that non contiguous data is one of custom strides use case. So I added this case.\r\n   But column major only case is also one of custom strides use case. So I simplify this case by reusing `@raw_tensor`.\n\n\n\n##########\nruby/red-arrow/lib/arrow/raw-tensor-converter.rb:\n##########\n@@ -41,12 +41,22 @@ def convert\n       case @raw_tensor\n       when Buffer\n         @data = @raw_tensor\n+      when String\n+        @data = Arrow::Buffer.new(@raw_tensor)\n       else\n         @shape ||= guess_shape\n         build_buffer\n+        unless @strides.nil?\n+          message = \"strides: must not be specified: #{@strides.inspect}\"\n\nReview Comment:\n   OK.\n\n\n\n##########\nruby/red-arrow/lib/arrow/raw-tensor-converter.rb:\n##########\n@@ -41,12 +41,22 @@ def convert\n       case @raw_tensor\n       when Buffer\n         @data = @raw_tensor\n+      when String\n+        @data = Arrow::Buffer.new(@raw_tensor)\n\nReview Comment:\n   Added a check for it.\n\n\n\n",
                    "created": "2022-10-14T06:20:59.846+0000",
                    "updated": "2022-10-14T06:20:59.846+0000",
                    "started": "2022-10-14T06:20:59.846+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816875",
                    "issueId": "13485811"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485811/worklog/816923",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on code in PR #14381:\nURL: https://github.com/apache/arrow/pull/14381#discussion_r995535048\n\n\n##########\nruby/red-arrow/test/test-tensor.rb:\n##########\n@@ -110,6 +110,131 @@ def setup\n                        dimension_names: tensor.dimension_names,\n                      })\n       end\n+\n+      test(\"Array, strides:\") do\n+        message = \"strides: must not be specified: #{@strides.inspect}\"\n+        assert_raise(ArgumentError.new(message)) do\n+          Arrow::Tensor.new(@raw_tensor, strides: @strides)\n+        end\n+      end\n+\n+      test(\"Arrow::Buffer, data_type:, shape:\") do\n+        data_type = :uint8\n+        data = Arrow::Buffer.new(@raw_tensor.flatten.pack(\"C*\").freeze)\n+        tensor = Arrow::Tensor.new(data,\n+                                   data_type: data_type,\n+                                   shape: @shape)\n+        assert_equal({\n+                       value_data_type: Arrow::UInt8DataType.new,\n+                       buffer: @raw_tensor.flatten.pack(\"C*\"),\n+                       shape: @shape,\n+                       strides: @strides,\n+                       dimension_names: [\"\", \"\", \"\"],\n+                     },\n+                     {\n+                       value_data_type: tensor.value_data_type,\n+                       buffer: tensor.buffer.data.to_s,\n+                       shape: tensor.shape,\n+                       strides: tensor.strides,\n+                       dimension_names: tensor.dimension_names,\n+                     })\n+      end\n+\n+      test(\"String, data_type:, shape:\") do\n+        data_type = :uint8\n+        data = @raw_tensor.flatten.pack(\"C*\").freeze\n+        tensor = Arrow::Tensor.new(data,\n+                                   data_type: data_type,\n+                                   shape: @shape)\n+        assert_equal({\n+                       value_data_type: Arrow::UInt8DataType.new,\n+                       buffer: @raw_tensor.flatten.pack(\"C*\"),\n+                       shape: @shape,\n+                       strides: @strides,\n+                       dimension_names: [\"\", \"\", \"\"],\n+                     },\n+                     {\n+                       value_data_type: tensor.value_data_type,\n+                       buffer: tensor.buffer.data.to_s,\n+                       shape: tensor.shape,\n+                       strides: tensor.strides,\n+                       dimension_names: tensor.dimension_names,\n+                     })\n+      end\n+\n+      test(\"String, data_type:\") do\n+        data_type = :uint8\n+        data = @raw_tensor.flatten.pack(\"C*\").freeze\n+        message = \"shape: is missing: #{data.inspect}\"\n+        assert_raise(ArgumentError.new(message)) do\n+          Arrow::Tensor.new(data, data_type: data_type)\n+        end\n+      end\n+\n+      test(\"String, shape:\") do\n+        data = @raw_tensor.flatten.pack(\"C*\").freeze\n+        message = \"data_type: is missing: #{data.inspect}\"\n+        assert_raise(ArgumentError.new(message)) do\n+          Arrow::Tensor.new(data, shape: @shape)\n+        end\n+      end\n+\n+      test(\"Symbol, Arrow::Buffer, shape:\") do\n+        data_type = :uint8\n+        data = Arrow::Buffer.new(@raw_tensor.flatten.pack(\"C*\").freeze)\n+        tensor = Arrow::Tensor.new(data_type,\n+                                   data,\n+                                   shape: @shape)\n+        assert_equal({\n+                       value_data_type: Arrow::UInt8DataType.new,\n+                       buffer: @raw_tensor.flatten.pack(\"C*\"),\n+                       shape: @shape,\n+                       strides: @strides,\n+                       dimension_names: [\"\", \"\", \"\"],\n+                     },\n+                     {\n+                       value_data_type: tensor.value_data_type,\n+                       buffer: tensor.buffer.data.to_s,\n+                       shape: tensor.shape,\n+                       strides: tensor.strides,\n+                       dimension_names: tensor.dimension_names,\n+                     })\n+      end\n+\n+      test(\"Symbol, String, shape:, strides: - !contiguous and column major\") do\n+        data_type = :uint8\n+        raw_tensor = [\n+          [1, 2, 3, 0], # 0 is padding\n+          [4, 5, 6, 0], # 0 is padding\n+        ]\n+        data = raw_tensor.flatten.pack(\"C*\").freeze\n+        shape = [3, 2]\n+        strides = [1, 4]\n\nReview Comment:\n   @kou I meant that we can create a non-contiguous column-major tensor from `@raw_tensor` with the `shape` and `strides` I showed above.\n\n\n\n",
                    "created": "2022-10-14T09:09:41.378+0000",
                    "updated": "2022-10-14T09:09:41.378+0000",
                    "started": "2022-10-14T09:09:41.378+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816923",
                    "issueId": "13485811"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 14400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5545a78a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@38936868[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3786b801[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@14f556b1[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2d36f934[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5b3b5851[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@59ffa587[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@670120d7[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7de48a5a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7c9cac67[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@586bfdee[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@360279ac[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 14400,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Oct 14 13:03:16 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-10-14T13:03:16.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17997/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-10-12T07:24:20.000+0000",
        "updated": "2022-10-15T23:32:19.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 14400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Ruby] Add support for building Arrow::Tensor from raw nested Ruby array",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13485811/comment/17617719",
                    "id": "17617719",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "Issue resolved by pull request 14381\n[https://github.com/apache/arrow/pull/14381]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2022-10-14T13:03:16.743+0000",
                    "updated": "2022-10-14T13:03:16.743+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z19aa8:",
        "customfield_12314139": null
    }
}