{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13237265",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237265",
    "key": "ARROW-5492",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344925",
                "id": "12344925",
                "description": "",
                "name": "0.14.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-07-04"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=romainfrancois",
            "name": "romainfrancois",
            "key": "romainfrancois",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=romainfrancois&avatarId=35092",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=romainfrancois&avatarId=35092",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=romainfrancois&avatarId=35092",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=romainfrancois&avatarId=35092"
            },
            "displayName": "Romain Francois",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 13200,
            "total": 13200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 13200,
            "total": 13200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5492/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 24,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237265/worklog/263628",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #4627: ARROW-5492: [R] Add \"col_select\" argument to read_* functions to read subset of columns\nURL: https://github.com/apache/arrow/pull/4627\n \n \n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   library(tibble)\r\n   \r\n   tf <- tempfile()\r\n   write.csv(iris, tf, row.names = FALSE, quote = FALSE)\r\n   \r\n   read_csv_arrow(tf, col_select = starts_with(\"Sepal\"))\r\n   #> # A tibble: 150 x 2\r\n   #>    Sepal.Length Sepal.Width\r\n   #>           <dbl>       <dbl>\r\n   #>  1          5.1         3.5\r\n   #>  2          4.9         3  \r\n   #>  3          4.7         3.2\r\n   #>  4          4.6         3.1\r\n   #>  5          5           3.6\r\n   #>  6          5.4         3.9\r\n   #>  7          4.6         3.4\r\n   #>  8          5           3.4\r\n   #>  9          4.4         2.9\r\n   #> 10          4.9         3.1\r\n   #> # \u2026 with 140 more rows\r\n   \r\n   tf <- tempfile()\r\n   write_feather(iris, tf)\r\n   read_feather(tf, col_select = contains(\".\"))\r\n   #> # A tibble: 150 x 4\r\n   #>    Sepal.Length Sepal.Width Petal.Length Petal.Width\r\n   #>           <dbl>       <dbl>        <dbl>       <dbl>\r\n   #>  1          5.1         3.5          1.4         0.2\r\n   #>  2          4.9         3            1.4         0.2\r\n   #>  3          4.7         3.2          1.3         0.2\r\n   #>  4          4.6         3.1          1.5         0.2\r\n   #>  5          5           3.6          1.4         0.2\r\n   #>  6          5.4         3.9          1.7         0.4\r\n   #>  7          4.6         3.4          1.4         0.3\r\n   #>  8          5           3.4          1.5         0.2\r\n   #>  9          4.4         2.9          1.4         0.2\r\n   #> 10          4.9         3.1          1.5         0.1\r\n   #> # \u2026 with 140 more rows\r\n   ```\r\n   \r\n   <sup>Created on 2019-06-20 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0.9000)</sup>\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-20T09:19:10.831+0000",
                    "updated": "2019-06-20T09:19:10.831+0000",
                    "started": "2019-06-20T09:19:10.830+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "263628",
                    "issueId": "13237265"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237265/worklog/263629",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on issue #4627: ARROW-5492: [R] Add \"col_select\" argument to read_* functions to read subset of columns\nURL: https://github.com/apache/arrow/pull/4627#issuecomment-503949558\n \n \n   only `read_feather()` and `read_csv_arrow()` for now. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-20T09:20:22.624+0000",
                    "updated": "2019-06-20T09:20:22.624+0000",
                    "started": "2019-06-20T09:20:22.623+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "263629",
                    "issueId": "13237265"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237265/worklog/264458",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on issue #4627: ARROW-5492: [R] Add \"col_select\" argument to read_* functions to read subset of columns\nURL: https://github.com/apache/arrow/pull/4627#issuecomment-503949558\n \n \n   only `read_feather()` and `read_csv_arrow()` for now. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-21T09:13:38.176+0000",
                    "updated": "2019-06-21T09:13:38.176+0000",
                    "started": "2019-06-21T09:13:38.175+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "264458",
                    "issueId": "13237265"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237265/worklog/264459",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on issue #4627: ARROW-5492: [R] Add \"col_select\" argument to read_* functions to read subset of columns\nURL: https://github.com/apache/arrow/pull/4627#issuecomment-504355422\n \n \n   `read_feather()` and `read_parquet()` have direct support for `col_select=`\r\n   \r\n   `read_csv_arrow()` and `read_json_arrow()` do it after the fact, i.e. they read the full `arrow::Table` and then do a `$select(<tidy selection>)` on it. \r\n   \r\n   This just exposes enough parquet api for this, I'll get to expose more parquet classes and methods in some other PR later. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-21T09:15:43.366+0000",
                    "updated": "2019-06-21T09:15:43.366+0000",
                    "started": "2019-06-21T09:15:43.366+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "264459",
                    "issueId": "13237265"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237265/worklog/264460",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #4627: ARROW-5492: [R] Add \"col_select\" argument to read_* functions to read subset of columns\nURL: https://github.com/apache/arrow/pull/4627#discussion_r296160883\n \n \n\n ##########\n File path: r/src/parquet.cpp\n ##########\n @@ -19,44 +19,101 @@\n \n #if defined(ARROW_R_WITH_ARROW)\n \n-#ifdef ARROW_R_WITH_PARQUET\n #include <parquet/arrow/reader.h>\n #include <parquet/arrow/writer.h>\n #include <parquet/exception.h>\n-#endif\n \n // [[arrow::export]]\n-std::shared_ptr<arrow::Table> read_parquet_file(std::string filename) {\n-#ifdef ARROW_R_WITH_PARQUET\n-  std::shared_ptr<arrow::io::ReadableFile> infile;\n-  PARQUET_THROW_NOT_OK(\n-      arrow::io::ReadableFile::Open(filename, arrow::default_memory_pool(), &infile));\n+std::shared_ptr<parquet::arrow::ArrowReaderProperties>\n+parquet___arrow___ArrowReaderProperties__Make(bool use_threads) {\n+  return std::make_shared<parquet::arrow::ArrowReaderProperties>(use_threads);\n+}\n+\n+// [[arrow::export]]\n+void parquet___arrow___ArrowReaderProperties__set_use_threads(\n+    const std::shared_ptr<parquet::arrow::ArrowReaderProperties>& properties,\n+    bool use_threads) {\n+  properties->set_use_threads(use_threads);\n+}\n+\n+// [[arrow::export]]\n+bool parquet___arrow___ArrowReaderProperties__get_use_threads(\n+    const std::shared_ptr<parquet::arrow::ArrowReaderProperties>& properties,\n+    bool use_threads) {\n+  return properties->use_threads();\n+}\n \n+// [[arrow::export]]\n+bool parquet___arrow___ArrowReaderProperties__get_read_dictionary(\n+    const std::shared_ptr<parquet::arrow::ArrowReaderProperties>& properties,\n+    int column_index) {\n+  return properties->read_dictionary(column_index);\n+}\n+\n+// [[arrow::export]]\n+void parquet___arrow___ArrowReaderProperties__set_read_dictionary(\n+    const std::shared_ptr<parquet::arrow::ArrowReaderProperties>& properties,\n+    int column_index, bool read_dict) {\n+  properties->set_read_dictionary(column_index, read_dict);\n+}\n+\n+// [[arrow::export]]\n+std::unique_ptr<parquet::arrow::FileReader> parquet___arrow___FileReader__OpenFile(\n+    const std::shared_ptr<arrow::io::RandomAccessFile>& file,\n+    const std::shared_ptr<parquet::arrow::ArrowReaderProperties>& props) {\n   std::unique_ptr<parquet::arrow::FileReader> reader;\n   PARQUET_THROW_NOT_OK(\n-      parquet::arrow::OpenFile(infile, arrow::default_memory_pool(), &reader));\n+      parquet::arrow::OpenFile(file, arrow::default_memory_pool(), *props, &reader));\n+  return reader;\n+}\n+\n+// [[arrow::export]]\n+std::shared_ptr<arrow::Table> parquet___arrow___FileReader__ReadTable1(\n+    const std::unique_ptr<parquet::arrow::FileReader>& reader) {\n   std::shared_ptr<arrow::Table> table;\n   PARQUET_THROW_NOT_OK(reader->ReadTable(&table));\n-\n   return table;\n-#else\n-  Rcpp::stop(\"Support for Parquet is not available.\");\n+}\n \n+// [[arrow::export]]\n+std::shared_ptr<arrow::Table> parquet___arrow___FileReader__ReadTable2(\n+    const std::unique_ptr<parquet::arrow::FileReader>& reader,\n+    const std::vector<int>& column_indices) {\n   std::shared_ptr<arrow::Table> table;\n+  PARQUET_THROW_NOT_OK(reader->ReadTable(column_indices, &table));\n   return table;\n-#endif\n }\n \n // [[arrow::export]]\n void write_parquet_file(const std::shared_ptr<arrow::Table>& table,\n                         std::string filename) {\n-#ifdef ARROW_R_WITH_PARQUET\n   std::shared_ptr<arrow::io::OutputStream> sink;\n   PARQUET_THROW_NOT_OK(arrow::io::FileOutputStream::Open(filename, &sink));\n   PARQUET_THROW_NOT_OK(parquet::arrow::WriteTable(*table, arrow::default_memory_pool(),\n                                                   sink, table->num_rows()));\n-#else\n-  Rcpp::stop(\"Support for Parquet is not available.\");\n-#endif\n }\n+\n+// [[arrow::export]]\n+std::shared_ptr<arrow::Schema> parquet___arrow___FileReader__GetSchema2(\n+    const std::unique_ptr<parquet::arrow::FileReader>& reader,\n+    const std::vector<int>& indices) {\n+  std::shared_ptr<arrow::Schema> schema;\n+  STOP_IF_NOT_OK(reader->GetSchema(indices, &schema));\n+  return schema;\n+}\n+\n+// [[arrow::export]]\n+std::shared_ptr<arrow::Schema> parquet___arrow___FileReader__GetSchema1(\n+    const std::unique_ptr<parquet::arrow::FileReader>& reader) {\n+  // FileReader does not have this exposed\n+  // std::shared_ptr<arrow::Schema> schema;\n+  // STOP_IF_NOT_OK(reader->GetSchema(&schema));\n \n Review comment:\n   is it worth opening an issue about this, i.e. adding a `::arrow::Status GetSchema(std::shared_ptr<::arrow::Schema>* out);` method to `parquet::arrow::FileReader` ?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-21T09:21:03.675+0000",
                    "updated": "2019-06-21T09:21:03.675+0000",
                    "started": "2019-06-21T09:21:03.675+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "264460",
                    "issueId": "13237265"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237265/worklog/265546",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #4627: ARROW-5492: [R] Add \"col_select\" argument to read_* functions to read subset of columns\nURL: https://github.com/apache/arrow/pull/4627#discussion_r296575688\n \n \n\n ##########\n File path: r/src/parquet.cpp\n ##########\n @@ -19,44 +19,101 @@\n \n #if defined(ARROW_R_WITH_ARROW)\n \n-#ifdef ARROW_R_WITH_PARQUET\n #include <parquet/arrow/reader.h>\n #include <parquet/arrow/writer.h>\n #include <parquet/exception.h>\n-#endif\n \n // [[arrow::export]]\n-std::shared_ptr<arrow::Table> read_parquet_file(std::string filename) {\n-#ifdef ARROW_R_WITH_PARQUET\n-  std::shared_ptr<arrow::io::ReadableFile> infile;\n-  PARQUET_THROW_NOT_OK(\n-      arrow::io::ReadableFile::Open(filename, arrow::default_memory_pool(), &infile));\n+std::shared_ptr<parquet::arrow::ArrowReaderProperties>\n+parquet___arrow___ArrowReaderProperties__Make(bool use_threads) {\n+  return std::make_shared<parquet::arrow::ArrowReaderProperties>(use_threads);\n+}\n+\n+// [[arrow::export]]\n+void parquet___arrow___ArrowReaderProperties__set_use_threads(\n+    const std::shared_ptr<parquet::arrow::ArrowReaderProperties>& properties,\n+    bool use_threads) {\n+  properties->set_use_threads(use_threads);\n+}\n+\n+// [[arrow::export]]\n+bool parquet___arrow___ArrowReaderProperties__get_use_threads(\n+    const std::shared_ptr<parquet::arrow::ArrowReaderProperties>& properties,\n+    bool use_threads) {\n+  return properties->use_threads();\n+}\n \n+// [[arrow::export]]\n+bool parquet___arrow___ArrowReaderProperties__get_read_dictionary(\n+    const std::shared_ptr<parquet::arrow::ArrowReaderProperties>& properties,\n+    int column_index) {\n+  return properties->read_dictionary(column_index);\n+}\n+\n+// [[arrow::export]]\n+void parquet___arrow___ArrowReaderProperties__set_read_dictionary(\n+    const std::shared_ptr<parquet::arrow::ArrowReaderProperties>& properties,\n+    int column_index, bool read_dict) {\n+  properties->set_read_dictionary(column_index, read_dict);\n+}\n+\n+// [[arrow::export]]\n+std::unique_ptr<parquet::arrow::FileReader> parquet___arrow___FileReader__OpenFile(\n+    const std::shared_ptr<arrow::io::RandomAccessFile>& file,\n+    const std::shared_ptr<parquet::arrow::ArrowReaderProperties>& props) {\n   std::unique_ptr<parquet::arrow::FileReader> reader;\n   PARQUET_THROW_NOT_OK(\n-      parquet::arrow::OpenFile(infile, arrow::default_memory_pool(), &reader));\n+      parquet::arrow::OpenFile(file, arrow::default_memory_pool(), *props, &reader));\n+  return reader;\n+}\n+\n+// [[arrow::export]]\n+std::shared_ptr<arrow::Table> parquet___arrow___FileReader__ReadTable1(\n+    const std::unique_ptr<parquet::arrow::FileReader>& reader) {\n   std::shared_ptr<arrow::Table> table;\n   PARQUET_THROW_NOT_OK(reader->ReadTable(&table));\n-\n   return table;\n-#else\n-  Rcpp::stop(\"Support for Parquet is not available.\");\n+}\n \n+// [[arrow::export]]\n+std::shared_ptr<arrow::Table> parquet___arrow___FileReader__ReadTable2(\n+    const std::unique_ptr<parquet::arrow::FileReader>& reader,\n+    const std::vector<int>& column_indices) {\n   std::shared_ptr<arrow::Table> table;\n+  PARQUET_THROW_NOT_OK(reader->ReadTable(column_indices, &table));\n   return table;\n-#endif\n }\n \n // [[arrow::export]]\n void write_parquet_file(const std::shared_ptr<arrow::Table>& table,\n                         std::string filename) {\n-#ifdef ARROW_R_WITH_PARQUET\n   std::shared_ptr<arrow::io::OutputStream> sink;\n   PARQUET_THROW_NOT_OK(arrow::io::FileOutputStream::Open(filename, &sink));\n   PARQUET_THROW_NOT_OK(parquet::arrow::WriteTable(*table, arrow::default_memory_pool(),\n                                                   sink, table->num_rows()));\n-#else\n-  Rcpp::stop(\"Support for Parquet is not available.\");\n-#endif\n }\n+\n+// [[arrow::export]]\n+std::shared_ptr<arrow::Schema> parquet___arrow___FileReader__GetSchema2(\n+    const std::unique_ptr<parquet::arrow::FileReader>& reader,\n+    const std::vector<int>& indices) {\n+  std::shared_ptr<arrow::Schema> schema;\n+  STOP_IF_NOT_OK(reader->GetSchema(indices, &schema));\n+  return schema;\n+}\n+\n+// [[arrow::export]]\n+std::shared_ptr<arrow::Schema> parquet___arrow___FileReader__GetSchema1(\n+    const std::unique_ptr<parquet::arrow::FileReader>& reader) {\n+  // FileReader does not have this exposed\n+  // std::shared_ptr<arrow::Schema> schema;\n+  // STOP_IF_NOT_OK(reader->GetSchema(&schema));\n \n Review comment:\n   https://github.com/apache/arrow/pull/4668\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-24T07:01:37.591+0000",
                    "updated": "2019-06-24T07:01:37.591+0000",
                    "started": "2019-06-24T07:01:37.590+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "265546",
                    "issueId": "13237265"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237265/worklog/265711",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on issue #4627: ARROW-5492: [R] Add \"col_select\" argument to read_* functions to read subset of columns\nURL: https://github.com/apache/arrow/pull/4627#issuecomment-505010658\n \n \n   The appveyor fail is unrelated\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-24T13:30:57.151+0000",
                    "updated": "2019-06-24T13:30:57.151+0000",
                    "started": "2019-06-24T13:30:57.150+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "265711",
                    "issueId": "13237265"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237265/worklog/265842",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on issue #4627: ARROW-5492: [R] Add \"col_select\" argument to read_* functions to read subset of columns\nURL: https://github.com/apache/arrow/pull/4627#issuecomment-505098598\n \n \n   The current Appveyor failure is related: https://ci.appveyor.com/project/ApacheSoftwareFoundation/arrow/builds/25488050/job/x036oqg45dp67bo7#L3365\r\n   \r\n   Until https://issues.apache.org/jira/browse/ARROW-5683 you'll need to `skip_on_os(\"windows\")` any test that reads the parquet file included in `inst/`. See https://github.com/apache/arrow/pull/4627/files#diff-e5a0b5d08f0d85fde5678a5d99149739R23\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-24T17:11:39.469+0000",
                    "updated": "2019-06-24T17:11:39.469+0000",
                    "started": "2019-06-24T17:11:39.468+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "265842",
                    "issueId": "13237265"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237265/worklog/265913",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #4627: ARROW-5492: [R] Add \"col_select\" argument to read_* functions to read subset of columns\nURL: https://github.com/apache/arrow/pull/4627#discussion_r296845186\n \n \n\n ##########\n File path: r/configure\n ##########\n @@ -110,7 +110,7 @@ if [ $? -ne 0 ]; then\n   PKG_LIBS=\"\"\n   PKG_CFLAGS=\"\"\n else\n-  PKG_CFLAGS=\"$PKG_CFLAGS -DARROW_R_WITH_ARROW -DARROW_R_WITH_PARQUET\"\n+  PKG_CFLAGS=\"$PKG_CFLAGS -DARROW_R_WITH_ARROW\"\n \n Review comment:\n   Please also remove `-DARROW_R_WITH_PARQUET` from configure.win\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-24T18:08:18.291+0000",
                    "updated": "2019-06-24T18:08:18.291+0000",
                    "started": "2019-06-24T18:08:18.290+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "265913",
                    "issueId": "13237265"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237265/worklog/265914",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #4627: ARROW-5492: [R] Add \"col_select\" argument to read_* functions to read subset of columns\nURL: https://github.com/apache/arrow/pull/4627#discussion_r296844404\n \n \n\n ##########\n File path: r/data-raw/codegen.R\n ##########\n @@ -43,6 +43,10 @@ suppressPackageStartupMessages({\n   library(glue)\n })\n \n+if (packageVersion(\"decor\") < '0.0.0.9001') {\n+  stop(\"more recent version of `decor` needed, please install with `pak::pkg_install('romainfrancois/decor')`\")\n \n Review comment:\n   Why not \"remotes::install_github\" since everyone already has `remotes`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-24T18:08:18.378+0000",
                    "updated": "2019-06-24T18:08:18.378+0000",
                    "started": "2019-06-24T18:08:18.377+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "265914",
                    "issueId": "13237265"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237265/worklog/265915",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #4627: ARROW-5492: [R] Add \"col_select\" argument to read_* functions to read subset of columns\nURL: https://github.com/apache/arrow/pull/4627#discussion_r296846856\n \n \n\n ##########\n File path: r/R/parquet.R\n ##########\n @@ -34,9 +121,11 @@\n #' }\n #'\n #' @export\n-read_parquet <- function(file, as_tibble = TRUE, ...) {\n-  tab <- shared_ptr(`arrow::Table`, read_parquet_file(file))\n-  if (isTRUE(as_tibble)) {\n+read_parquet <- function(file, props = parquet_arrow_reader_properties(), as_tibble = TRUE, col_select = NULL, ...) {\n+  reader <- parquet_file_reader(file, props = props, ...)\n+  tab <- reader$ReadTable(!!enquo(col_select))\n \n Review comment:\n   Why does this reader have a `ReadTable` method while the others just have `Read`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-24T18:08:18.422+0000",
                    "updated": "2019-06-24T18:08:18.422+0000",
                    "started": "2019-06-24T18:08:18.421+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "265915",
                    "issueId": "13237265"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237265/worklog/265916",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #4627: ARROW-5492: [R] Add \"col_select\" argument to read_* functions to read subset of columns\nURL: https://github.com/apache/arrow/pull/4627#discussion_r296847997\n \n \n\n ##########\n File path: r/src/parquet.cpp\n ##########\n @@ -19,44 +19,101 @@\n \n #if defined(ARROW_R_WITH_ARROW)\n \n-#ifdef ARROW_R_WITH_PARQUET\n #include <parquet/arrow/reader.h>\n #include <parquet/arrow/writer.h>\n #include <parquet/exception.h>\n-#endif\n \n // [[arrow::export]]\n-std::shared_ptr<arrow::Table> read_parquet_file(std::string filename) {\n-#ifdef ARROW_R_WITH_PARQUET\n-  std::shared_ptr<arrow::io::ReadableFile> infile;\n-  PARQUET_THROW_NOT_OK(\n-      arrow::io::ReadableFile::Open(filename, arrow::default_memory_pool(), &infile));\n+std::shared_ptr<parquet::arrow::ArrowReaderProperties>\n+parquet___arrow___ArrowReaderProperties__Make(bool use_threads) {\n+  return std::make_shared<parquet::arrow::ArrowReaderProperties>(use_threads);\n+}\n+\n+// [[arrow::export]]\n+void parquet___arrow___ArrowReaderProperties__set_use_threads(\n+    const std::shared_ptr<parquet::arrow::ArrowReaderProperties>& properties,\n+    bool use_threads) {\n+  properties->set_use_threads(use_threads);\n+}\n+\n+// [[arrow::export]]\n+bool parquet___arrow___ArrowReaderProperties__get_use_threads(\n+    const std::shared_ptr<parquet::arrow::ArrowReaderProperties>& properties,\n+    bool use_threads) {\n+  return properties->use_threads();\n+}\n \n+// [[arrow::export]]\n+bool parquet___arrow___ArrowReaderProperties__get_read_dictionary(\n+    const std::shared_ptr<parquet::arrow::ArrowReaderProperties>& properties,\n+    int column_index) {\n+  return properties->read_dictionary(column_index);\n+}\n+\n+// [[arrow::export]]\n+void parquet___arrow___ArrowReaderProperties__set_read_dictionary(\n+    const std::shared_ptr<parquet::arrow::ArrowReaderProperties>& properties,\n+    int column_index, bool read_dict) {\n+  properties->set_read_dictionary(column_index, read_dict);\n+}\n+\n+// [[arrow::export]]\n+std::unique_ptr<parquet::arrow::FileReader> parquet___arrow___FileReader__OpenFile(\n+    const std::shared_ptr<arrow::io::RandomAccessFile>& file,\n+    const std::shared_ptr<parquet::arrow::ArrowReaderProperties>& props) {\n   std::unique_ptr<parquet::arrow::FileReader> reader;\n   PARQUET_THROW_NOT_OK(\n-      parquet::arrow::OpenFile(infile, arrow::default_memory_pool(), &reader));\n+      parquet::arrow::OpenFile(file, arrow::default_memory_pool(), *props, &reader));\n+  return reader;\n+}\n+\n+// [[arrow::export]]\n+std::shared_ptr<arrow::Table> parquet___arrow___FileReader__ReadTable1(\n+    const std::unique_ptr<parquet::arrow::FileReader>& reader) {\n   std::shared_ptr<arrow::Table> table;\n   PARQUET_THROW_NOT_OK(reader->ReadTable(&table));\n-\n   return table;\n-#else\n-  Rcpp::stop(\"Support for Parquet is not available.\");\n+}\n \n+// [[arrow::export]]\n+std::shared_ptr<arrow::Table> parquet___arrow___FileReader__ReadTable2(\n+    const std::unique_ptr<parquet::arrow::FileReader>& reader,\n+    const std::vector<int>& column_indices) {\n   std::shared_ptr<arrow::Table> table;\n+  PARQUET_THROW_NOT_OK(reader->ReadTable(column_indices, &table));\n   return table;\n-#endif\n }\n \n // [[arrow::export]]\n void write_parquet_file(const std::shared_ptr<arrow::Table>& table,\n                         std::string filename) {\n-#ifdef ARROW_R_WITH_PARQUET\n   std::shared_ptr<arrow::io::OutputStream> sink;\n   PARQUET_THROW_NOT_OK(arrow::io::FileOutputStream::Open(filename, &sink));\n   PARQUET_THROW_NOT_OK(parquet::arrow::WriteTable(*table, arrow::default_memory_pool(),\n                                                   sink, table->num_rows()));\n-#else\n-  Rcpp::stop(\"Support for Parquet is not available.\");\n-#endif\n }\n+\n+// [[arrow::export]]\n+std::shared_ptr<arrow::Schema> parquet___arrow___FileReader__GetSchema2(\n+    const std::unique_ptr<parquet::arrow::FileReader>& reader,\n+    const std::vector<int>& indices) {\n+  std::shared_ptr<arrow::Schema> schema;\n+  STOP_IF_NOT_OK(reader->GetSchema(indices, &schema));\n+  return schema;\n+}\n+\n+// [[arrow::export]]\n+std::shared_ptr<arrow::Schema> parquet___arrow___FileReader__GetSchema1(\n+    const std::unique_ptr<parquet::arrow::FileReader>& reader) {\n+  // FileReader does not have this exposed\n+  // std::shared_ptr<arrow::Schema> schema;\n+  // STOP_IF_NOT_OK(reader->GetSchema(&schema));\n \n Review comment:\n   This PR isn't blocked by that, right? Looks like you could clean this up if that merges first but it's not contingent.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-24T18:08:18.485+0000",
                    "updated": "2019-06-24T18:08:18.485+0000",
                    "started": "2019-06-24T18:08:18.485+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "265916",
                    "issueId": "13237265"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237265/worklog/265917",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #4627: ARROW-5492: [R] Add \"col_select\" argument to read_* functions to read subset of columns\nURL: https://github.com/apache/arrow/pull/4627#discussion_r296846396\n \n \n\n ##########\n File path: r/R/csv.R\n ##########\n @@ -172,8 +172,30 @@ csv_table_reader.default <- function(file,\n #'\n #' Use arrow::csv::TableReader from [csv_table_reader()]\n #'\n-#' @param ... Used to construct an arrow::csv::TableReader\n+#' @inheritParams csv_table_reader\n+#'\n+#' @param col_select [tidy selection specification][tidyselect::vars_select] of columns\n+#' @param as_tibble Should the [arrow::Table][arrow__Table] be converted to a data frame.\n+#'\n #' @export\n-read_csv_arrow <- function(...) {\n-  csv_table_reader(...)$Read()\n+read_csv_arrow <- function(file,\n+  read_options = csv_read_options(),\n+  parse_options = csv_parse_options(),\n+  convert_options = csv_convert_options(),\n+  col_select = NULL,\n+  as_tibble = TRUE\n+  )\n+{\n+  reader <- csv_table_reader(file,\n+    read_options = read_options,\n+    parse_options = parse_options,\n+    convert_options = convert_options)\n+\n+  tab <- reader$Read()$select(!!enquo(col_select))\n \n Review comment:\n   Since this and read_json use $Read() then $select(), it would probably make sense to always mmap (https://issues.apache.org/jira/browse/ARROW-5502). Otherwise, IIUC, the readers will read the entire file into memory in Arrow before selecting the columns, which defeats the purpose of only selecting a few columns. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-24T18:08:18.489+0000",
                    "updated": "2019-06-24T18:08:18.489+0000",
                    "started": "2019-06-24T18:08:18.489+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "265917",
                    "issueId": "13237265"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237265/worklog/265918",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #4627: ARROW-5492: [R] Add \"col_select\" argument to read_* functions to read subset of columns\nURL: https://github.com/apache/arrow/pull/4627#discussion_r296847271\n \n \n\n ##########\n File path: r/R/parquet.R\n ##########\n @@ -15,15 +15,102 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+#' @include R6.R\n+\n+`parquet::arrow::FileReader` <- R6Class(\"parquet::arrow::FileReader\",\n+  inherit = `arrow::Object`,\n+  public = list(\n+    ReadTable = function(col_select = NULL) {\n+      col_select <- enquo(col_select)\n+      if(quo_is_null(col_select)) {\n+        shared_ptr(`arrow::Table`, parquet___arrow___FileReader__ReadTable1(self))\n+      } else {\n+        all_vars <- shared_ptr(`arrow::Schema`, parquet___arrow___FileReader__GetSchema1(self))$names\n+        indices <- match(vars_select(all_vars, !!col_select), all_vars) - 1L\n+        shared_ptr(`arrow::Table`, parquet___arrow___FileReader__ReadTable2(self, indices))\n+      }\n+    },\n+    GetSchema = function(column_indices = NULL) {\n+      if (is.null(column_indices)) {\n+        shared_ptr(`arrow::Schema`, parquet___arrow___FileReader__GetSchema1(self))\n+      } else {\n+        shared_ptr(`arrow::Schema`, parquet___arrow___FileReader__GetSchema2(self, column_indices))\n+      }\n+\n+    }\n+  )\n+)\n+\n+`parquet::arrow::ArrowReaderProperties` <- R6Class(\"parquet::arrow::ArrowReaderProperties\",\n+  inherit = `arrow::Object`,\n+  public = list(\n+    read_dictionary = function(column_index) {\n+      parquet___arrow___ArrowReaderProperties__get_read_dictionary(self, column_index)\n+    },\n+    set_read_dictionary = function(column_index, read_dict) {\n+      parquet___arrow___ArrowReaderProperties__set_read_dictionary(self, column_index, read_dict)\n+    }\n+  ),\n+  active = list(\n+    use_threads = function(use_threads) {\n+      if(missing(use_threads)) {\n+        parquet___arrow___ArrowReaderProperties__get_use_threads(self)\n+      } else {\n+        parquet___arrow___ArrowReaderProperties__set_use_threads(self, use_threads)\n+      }\n+    }\n+  )\n+)\n+\n+#' Create a new ArrowReaderProperties instance\n+#'\n+#' @param use_threads use threads ?\n+#'\n+#' @export\n+parquet_arrow_reader_properties <- function(use_threads = TRUE) {\n+  shared_ptr(`parquet::arrow::ArrowReaderProperties`, parquet___arrow___ArrowReaderProperties__Make(isTRUE(use_threads)))\n+}\n+\n+#' Create a FileReader instance\n+#'\n+#' @param file file\n+#' @param props reader file properties, as created by [parquet_arrow_reader_properties()]\n \n Review comment:\n   This isn't very helpful documentation--can you elaborate, or at least point to the Arrow docs where they are enumerated?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-24T18:08:18.498+0000",
                    "updated": "2019-06-24T18:08:18.498+0000",
                    "started": "2019-06-24T18:08:18.497+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "265918",
                    "issueId": "13237265"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237265/worklog/266066",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on issue #4627: ARROW-5492: [R] Add \"col_select\" argument to read_* functions to read subset of columns\nURL: https://github.com/apache/arrow/pull/4627#issuecomment-505162251\n \n \n   https://github.com/apache/arrow/pull/4681 will fix the Appveyor failure without requiring the test to be skipped.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-24T20:14:53.919+0000",
                    "updated": "2019-06-24T20:14:53.919+0000",
                    "started": "2019-06-24T20:14:53.919+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "266066",
                    "issueId": "13237265"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237265/worklog/266289",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on issue #4627: ARROW-5492: [R] Add \"col_select\" argument to read_* functions to read subset of columns\nURL: https://github.com/apache/arrow/pull/4627#issuecomment-505252780\n \n \n   Alright, #4681 merged so the Appveyor error should be fixed on rebase/merge upstream.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-25T02:26:11.856+0000",
                    "updated": "2019-06-25T02:26:11.856+0000",
                    "started": "2019-06-25T02:26:11.855+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "266289",
                    "issueId": "13237265"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237265/worklog/266468",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #4627: ARROW-5492: [R] Add \"col_select\" argument to read_* functions to read subset of columns\nURL: https://github.com/apache/arrow/pull/4627#discussion_r297083683\n \n \n\n ##########\n File path: r/src/parquet.cpp\n ##########\n @@ -19,44 +19,101 @@\n \n #if defined(ARROW_R_WITH_ARROW)\n \n-#ifdef ARROW_R_WITH_PARQUET\n #include <parquet/arrow/reader.h>\n #include <parquet/arrow/writer.h>\n #include <parquet/exception.h>\n-#endif\n \n // [[arrow::export]]\n-std::shared_ptr<arrow::Table> read_parquet_file(std::string filename) {\n-#ifdef ARROW_R_WITH_PARQUET\n-  std::shared_ptr<arrow::io::ReadableFile> infile;\n-  PARQUET_THROW_NOT_OK(\n-      arrow::io::ReadableFile::Open(filename, arrow::default_memory_pool(), &infile));\n+std::shared_ptr<parquet::arrow::ArrowReaderProperties>\n+parquet___arrow___ArrowReaderProperties__Make(bool use_threads) {\n+  return std::make_shared<parquet::arrow::ArrowReaderProperties>(use_threads);\n+}\n+\n+// [[arrow::export]]\n+void parquet___arrow___ArrowReaderProperties__set_use_threads(\n+    const std::shared_ptr<parquet::arrow::ArrowReaderProperties>& properties,\n+    bool use_threads) {\n+  properties->set_use_threads(use_threads);\n+}\n+\n+// [[arrow::export]]\n+bool parquet___arrow___ArrowReaderProperties__get_use_threads(\n+    const std::shared_ptr<parquet::arrow::ArrowReaderProperties>& properties,\n+    bool use_threads) {\n+  return properties->use_threads();\n+}\n \n+// [[arrow::export]]\n+bool parquet___arrow___ArrowReaderProperties__get_read_dictionary(\n+    const std::shared_ptr<parquet::arrow::ArrowReaderProperties>& properties,\n+    int column_index) {\n+  return properties->read_dictionary(column_index);\n+}\n+\n+// [[arrow::export]]\n+void parquet___arrow___ArrowReaderProperties__set_read_dictionary(\n+    const std::shared_ptr<parquet::arrow::ArrowReaderProperties>& properties,\n+    int column_index, bool read_dict) {\n+  properties->set_read_dictionary(column_index, read_dict);\n+}\n+\n+// [[arrow::export]]\n+std::unique_ptr<parquet::arrow::FileReader> parquet___arrow___FileReader__OpenFile(\n+    const std::shared_ptr<arrow::io::RandomAccessFile>& file,\n+    const std::shared_ptr<parquet::arrow::ArrowReaderProperties>& props) {\n   std::unique_ptr<parquet::arrow::FileReader> reader;\n   PARQUET_THROW_NOT_OK(\n-      parquet::arrow::OpenFile(infile, arrow::default_memory_pool(), &reader));\n+      parquet::arrow::OpenFile(file, arrow::default_memory_pool(), *props, &reader));\n+  return reader;\n+}\n+\n+// [[arrow::export]]\n+std::shared_ptr<arrow::Table> parquet___arrow___FileReader__ReadTable1(\n+    const std::unique_ptr<parquet::arrow::FileReader>& reader) {\n   std::shared_ptr<arrow::Table> table;\n   PARQUET_THROW_NOT_OK(reader->ReadTable(&table));\n-\n   return table;\n-#else\n-  Rcpp::stop(\"Support for Parquet is not available.\");\n+}\n \n+// [[arrow::export]]\n+std::shared_ptr<arrow::Table> parquet___arrow___FileReader__ReadTable2(\n+    const std::unique_ptr<parquet::arrow::FileReader>& reader,\n+    const std::vector<int>& column_indices) {\n   std::shared_ptr<arrow::Table> table;\n+  PARQUET_THROW_NOT_OK(reader->ReadTable(column_indices, &table));\n   return table;\n-#endif\n }\n \n // [[arrow::export]]\n void write_parquet_file(const std::shared_ptr<arrow::Table>& table,\n                         std::string filename) {\n-#ifdef ARROW_R_WITH_PARQUET\n   std::shared_ptr<arrow::io::OutputStream> sink;\n   PARQUET_THROW_NOT_OK(arrow::io::FileOutputStream::Open(filename, &sink));\n   PARQUET_THROW_NOT_OK(parquet::arrow::WriteTable(*table, arrow::default_memory_pool(),\n                                                   sink, table->num_rows()));\n-#else\n-  Rcpp::stop(\"Support for Parquet is not available.\");\n-#endif\n }\n+\n+// [[arrow::export]]\n+std::shared_ptr<arrow::Schema> parquet___arrow___FileReader__GetSchema2(\n+    const std::unique_ptr<parquet::arrow::FileReader>& reader,\n+    const std::vector<int>& indices) {\n+  std::shared_ptr<arrow::Schema> schema;\n+  STOP_IF_NOT_OK(reader->GetSchema(indices, &schema));\n+  return schema;\n+}\n+\n+// [[arrow::export]]\n+std::shared_ptr<arrow::Schema> parquet___arrow___FileReader__GetSchema1(\n+    const std::unique_ptr<parquet::arrow::FileReader>& reader) {\n+  // FileReader does not have this exposed\n+  // std::shared_ptr<arrow::Schema> schema;\n+  // STOP_IF_NOT_OK(reader->GetSchema(&schema));\n \n Review comment:\n   It's not, I've used a workaround for now. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-25T09:07:22.726+0000",
                    "updated": "2019-06-25T09:07:22.726+0000",
                    "started": "2019-06-25T09:07:22.725+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "266468",
                    "issueId": "13237265"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237265/worklog/266470",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #4627: ARROW-5492: [R] Add \"col_select\" argument to read_* functions to read subset of columns\nURL: https://github.com/apache/arrow/pull/4627#discussion_r297084019\n \n \n\n ##########\n File path: r/data-raw/codegen.R\n ##########\n @@ -43,6 +43,10 @@ suppressPackageStartupMessages({\n   library(glue)\n })\n \n+if (packageVersion(\"decor\") < '0.0.0.9001') {\n+  stop(\"more recent version of `decor` needed, please install with `pak::pkg_install('romainfrancois/decor')`\")\n \n Review comment:\n   everyone should have `pak` it's great. But ok I'll make the change. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-25T09:08:07.341+0000",
                    "updated": "2019-06-25T09:08:07.341+0000",
                    "started": "2019-06-25T09:08:07.340+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "266470",
                    "issueId": "13237265"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237265/worklog/266472",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #4627: ARROW-5492: [R] Add \"col_select\" argument to read_* functions to read subset of columns\nURL: https://github.com/apache/arrow/pull/4627#discussion_r297087901\n \n \n\n ##########\n File path: r/R/parquet.R\n ##########\n @@ -34,9 +121,11 @@\n #' }\n #'\n #' @export\n-read_parquet <- function(file, as_tibble = TRUE, ...) {\n-  tab <- shared_ptr(`arrow::Table`, read_parquet_file(file))\n-  if (isTRUE(as_tibble)) {\n+read_parquet <- function(file, props = parquet_arrow_reader_properties(), as_tibble = TRUE, col_select = NULL, ...) {\n+  reader <- parquet_file_reader(file, props = props, ...)\n+  tab <- reader$ReadTable(!!enquo(col_select))\n \n Review comment:\n   That's the name of the method in the C++ api:\r\n   \r\n   https://github.com/apache/arrow/blob/master/cpp/src/parquet/arrow/reader.h#L217\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-25T09:17:08.523+0000",
                    "updated": "2019-06-25T09:17:08.523+0000",
                    "started": "2019-06-25T09:17:08.522+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "266472",
                    "issueId": "13237265"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237265/worklog/266474",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #4627: ARROW-5492: [R] Add \"col_select\" argument to read_* functions to read subset of columns\nURL: https://github.com/apache/arrow/pull/4627#discussion_r297088361\n \n \n\n ##########\n File path: r/R/parquet.R\n ##########\n @@ -15,15 +15,102 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+#' @include R6.R\n+\n+`parquet::arrow::FileReader` <- R6Class(\"parquet::arrow::FileReader\",\n+  inherit = `arrow::Object`,\n+  public = list(\n+    ReadTable = function(col_select = NULL) {\n+      col_select <- enquo(col_select)\n+      if(quo_is_null(col_select)) {\n+        shared_ptr(`arrow::Table`, parquet___arrow___FileReader__ReadTable1(self))\n+      } else {\n+        all_vars <- shared_ptr(`arrow::Schema`, parquet___arrow___FileReader__GetSchema1(self))$names\n+        indices <- match(vars_select(all_vars, !!col_select), all_vars) - 1L\n+        shared_ptr(`arrow::Table`, parquet___arrow___FileReader__ReadTable2(self, indices))\n+      }\n+    },\n+    GetSchema = function(column_indices = NULL) {\n+      if (is.null(column_indices)) {\n+        shared_ptr(`arrow::Schema`, parquet___arrow___FileReader__GetSchema1(self))\n+      } else {\n+        shared_ptr(`arrow::Schema`, parquet___arrow___FileReader__GetSchema2(self, column_indices))\n+      }\n+\n+    }\n+  )\n+)\n+\n+`parquet::arrow::ArrowReaderProperties` <- R6Class(\"parquet::arrow::ArrowReaderProperties\",\n+  inherit = `arrow::Object`,\n+  public = list(\n+    read_dictionary = function(column_index) {\n+      parquet___arrow___ArrowReaderProperties__get_read_dictionary(self, column_index)\n+    },\n+    set_read_dictionary = function(column_index, read_dict) {\n+      parquet___arrow___ArrowReaderProperties__set_read_dictionary(self, column_index, read_dict)\n+    }\n+  ),\n+  active = list(\n+    use_threads = function(use_threads) {\n+      if(missing(use_threads)) {\n+        parquet___arrow___ArrowReaderProperties__get_use_threads(self)\n+      } else {\n+        parquet___arrow___ArrowReaderProperties__set_use_threads(self, use_threads)\n+      }\n+    }\n+  )\n+)\n+\n+#' Create a new ArrowReaderProperties instance\n+#'\n+#' @param use_threads use threads ?\n+#'\n+#' @export\n+parquet_arrow_reader_properties <- function(use_threads = TRUE) {\n+  shared_ptr(`parquet::arrow::ArrowReaderProperties`, parquet___arrow___ArrowReaderProperties__Make(isTRUE(use_threads)))\n+}\n+\n+#' Create a FileReader instance\n+#'\n+#' @param file file\n+#' @param props reader file properties, as created by [parquet_arrow_reader_properties()]\n \n Review comment:\n   At this point, these are really to check boxes, I suppose we can do a doc sweep at some point\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-25T09:18:16.125+0000",
                    "updated": "2019-06-25T09:18:16.125+0000",
                    "started": "2019-06-25T09:18:16.124+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "266474",
                    "issueId": "13237265"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 13200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7ec69061[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5369050[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29f7fe45[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@18f24f3b[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@729809ff[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@50bc3648[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@46afffcc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4caefbb5[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7e4bd42e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4f74a3d9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@769c6464[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4dd45a51[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 13200,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jun 25 18:20:31 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-06-25T18:20:31.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5492/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-06-03T15:35:07.000+0000",
        "updated": "2019-06-25T18:20:40.000+0000",
        "timeoriginalestimate": null,
        "description": "read_feather, read_parquet, read_csv_arrow (and read_json, when it exists) should take a `col_select` argument, following the model of [vroom|http://vroom.r-lib.org/articles/vroom.html#column-selection]\u00a0(readr and base R file readers also support this feature, just much more awkwardly).\r\n\r\nCurrently, read_feather has a \"columns\" argument and none of the other readers expose it. Parquet can certainly support it; cf.\u00a0{{pyarrow.parquet.read_table.}}\r\n\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 13200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Add \"col_select\" argument to read_* functions to read subset of columns ",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237265/comment/16872591",
                    "id": "16872591",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 4627\n[https://github.com/apache/arrow/pull/4627]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-06-25T18:20:31.919+0000",
                    "updated": "2019-06-25T18:20:31.919+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z03d2g:",
        "customfield_12314139": null
    }
}