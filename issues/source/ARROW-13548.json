{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13393476",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393476",
    "key": "ARROW-13548",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "compute",
            "kernel",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12620508",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12620508",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13306872",
                    "key": "ARROW-8894",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13306872",
                    "fields": {
                        "summary": "[C++] C++ array kernels framework and execution buildout (umbrella issue)",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 34800,
            "total": 34800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 34800,
            "total": 34800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13548/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 58,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393476/worklog/639183",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm opened a new pull request #10960:\nURL: https://github.com/apache/arrow/pull/10960\n\n\n   Implements kernels to get the number of {years, months, month_day intervals, days, hours, minutes, seconds, millis, micros, nanos} between two timestamps. Everything returns either Int64 or DayTimeInterval.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-18T16:10:02.910+0000",
                    "updated": "2021-08-18T16:10:02.910+0000",
                    "started": "2021-08-18T16:10:02.909+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639183",
                    "issueId": "13393476"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393476/worklog/639184",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #10960:\nURL: https://github.com/apache/arrow/pull/10960#issuecomment-901242521\n\n\n   I think Python doesn't have bindings for the interval types - that should be fixed in a separate issue I would think.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-18T16:10:36.938+0000",
                    "updated": "2021-08-18T16:10:36.938+0000",
                    "started": "2021-08-18T16:10:36.937+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639184",
                    "issueId": "13393476"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393476/worklog/639197",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10960:\nURL: https://github.com/apache/arrow/pull/10960#issuecomment-901253210\n\n\n   https://issues.apache.org/jira/browse/ARROW-13548\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-18T16:25:21.243+0000",
                    "updated": "2021-08-18T16:25:21.243+0000",
                    "started": "2021-08-18T16:25:21.242+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639197",
                    "issueId": "13393476"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393476/worklog/639379",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #10960:\nURL: https://github.com/apache/arrow/pull/10960#issuecomment-901242521\n\n\n   I think Python doesn't have bindings for the interval types - that should be fixed in a separate issue I would think.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-18T16:50:04.676+0000",
                    "updated": "2021-08-18T16:50:04.676+0000",
                    "started": "2021-08-18T16:50:04.676+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639379",
                    "issueId": "13393476"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393476/worklog/639399",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm opened a new pull request #10960:\nURL: https://github.com/apache/arrow/pull/10960\n\n\n   Implements kernels to get the number of {years, months, month_day intervals, days, hours, minutes, seconds, millis, micros, nanos} between two timestamps. Everything returns either Int64 or DayTimeInterval.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-18T16:52:14.131+0000",
                    "updated": "2021-08-18T16:52:14.131+0000",
                    "started": "2021-08-18T16:52:14.131+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639399",
                    "issueId": "13393476"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393476/worklog/639470",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10960:\nURL: https://github.com/apache/arrow/pull/10960#issuecomment-901253210\n\n\n   https://issues.apache.org/jira/browse/ARROW-13548\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-18T17:01:24.963+0000",
                    "updated": "2021-08-18T17:01:24.963+0000",
                    "started": "2021-08-18T17:01:24.963+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "639470",
                    "issueId": "13393476"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393476/worklog/640794",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ianmcook commented on pull request #10960:\nURL: https://github.com/apache/arrow/pull/10960#issuecomment-903989440\n\n\n   Would it be straightforward to add a week variant of this that takes `DayOfWeekOptions`?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-23T18:00:18.849+0000",
                    "updated": "2021-08-23T18:00:18.849+0000",
                    "started": "2021-08-23T18:00:18.849+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "640794",
                    "issueId": "13393476"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393476/worklog/640798",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #10960:\nURL: https://github.com/apache/arrow/pull/10960#issuecomment-903995759\n\n\n   > Would it be straightforward to add a week variant of this that takes `DayOfWeekOptions`?\r\n   \r\n   It should be doable. I'll update the PR.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-08-23T18:08:06.663+0000",
                    "updated": "2021-08-23T18:08:06.663+0000",
                    "started": "2021-08-23T18:08:06.663+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "640798",
                    "issueId": "13393476"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393476/worklog/651141",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #10960:\nURL: https://github.com/apache/arrow/pull/10960#issuecomment-920095064\n\n\n   @rok can you take a look here?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-15T14:56:02.061+0000",
                    "updated": "2021-09-15T14:56:02.061+0000",
                    "started": "2021-09-15T14:56:02.061+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "651141",
                    "issueId": "13393476"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393476/worklog/651143",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #10960:\nURL: https://github.com/apache/arrow/pull/10960#issuecomment-920095510\n\n\n   I'll rebate this in a little while\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-15T14:56:30.848+0000",
                    "updated": "2021-09-15T14:56:30.848+0000",
                    "started": "2021-09-15T14:56:30.848+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "651143",
                    "issueId": "13393476"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393476/worklog/651144",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm edited a comment on pull request #10960:\nURL: https://github.com/apache/arrow/pull/10960#issuecomment-920095510\n\n\n   I'll *rebase this in a little while\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-15T14:56:34.105+0000",
                    "updated": "2021-09-15T14:56:34.105+0000",
                    "started": "2021-09-15T14:56:34.104+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "651144",
                    "issueId": "13393476"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393476/worklog/651350",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on a change in pull request #10960:\nURL: https://github.com/apache/arrow/pull/10960#discussion_r709552600\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal.cc\n##########\n@@ -830,6 +897,167 @@ struct ISOCalendar {\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// Compute boundary crossings between two timestamps\n+\n+template <typename Duration, typename Localizer>\n+struct YearsBetween {\n+  YearsBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    year_month_day from(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0)));\n+    year_month_day to(floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1)));\n+    return static_cast<T>((to.year() - from.year()).count());\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct QuartersBetween {\n+  QuartersBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  static int64_t GetQuarters(const year_month_day& ymd) {\n+    return static_cast<int64_t>(static_cast<int32_t>(ymd.year())) * 4 +\n+           (static_cast<uint32_t>(ymd.month()) - 1) / 3;\n+  }\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    year_month_day from_ymd(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0)));\n+    year_month_day to_ymd(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1)));\n+    int64_t from_quarters = GetQuarters(from_ymd);\n+    int64_t to_quarters = GetQuarters(to_ymd);\n+    return static_cast<T>(to_quarters - from_quarters);\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct MonthsBetween {\n+  MonthsBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    year_month_day from(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0)));\n+    year_month_day to(floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1)));\n+    return static_cast<T>(\n+        (year_month(to.year(), to.month()) - year_month(from.year(), from.month()))\n+            .count());\n\nReview comment:\n       ```suggestion\r\n       return static_cast<T>(\r\n           ((to.year()/to.month() - from.year()/from.month()).count());\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal.cc\n##########\n@@ -1104,6 +1375,90 @@ const FunctionDoc assume_timezone_doc{\n     {\"timestamps\"},\n     \"AssumeTimezoneOptions\"};\n \n+const FunctionDoc years_between_doc{\n+    \"Compute the number of year boundaries between two timestamps\",\n\nReview comment:\n       I don't have a better suggestion, but boundaries sounds very implementation-like.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal.cc\n##########\n@@ -830,6 +897,167 @@ struct ISOCalendar {\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// Compute boundary crossings between two timestamps\n+\n+template <typename Duration, typename Localizer>\n+struct YearsBetween {\n+  YearsBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    year_month_day from(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0)));\n+    year_month_day to(floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1)));\n+    return static_cast<T>((to.year() - from.year()).count());\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct QuartersBetween {\n+  QuartersBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  static int64_t GetQuarters(const year_month_day& ymd) {\n+    return static_cast<int64_t>(static_cast<int32_t>(ymd.year())) * 4 +\n+           (static_cast<uint32_t>(ymd.month()) - 1) / 3;\n+  }\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    year_month_day from_ymd(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0)));\n+    year_month_day to_ymd(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1)));\n+    int64_t from_quarters = GetQuarters(from_ymd);\n+    int64_t to_quarters = GetQuarters(to_ymd);\n+    return static_cast<T>(to_quarters - from_quarters);\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct MonthsBetween {\n+  MonthsBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    year_month_day from(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0)));\n+    year_month_day to(floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1)));\n+    return static_cast<T>(\n+        (year_month(to.year(), to.month()) - year_month(from.year(), from.month()))\n+            .count());\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct WeeksBetween {\n+  WeeksBetween(const DayOfWeekOptions* options, Localizer&& localizer)\n+      : week_start_(options->week_start), localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    auto from = floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0));\n+    auto to = floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1));\n+    const T days_between = static_cast<T>((to - from).count());\n+    const T whole_weeks = days_between / 7;\n+    const T days_remainder = days_between % 7;\n+    // We are counting week boundaries, so there may be one extra week\n+    if (days_remainder > 0) {\n+      const weekday from_dow(from);\n+      const weekday start_of_week(week_start_);\n+      const int64_t days = (start_of_week - from_dow).count();\n+      if (days > 0 && days <= days_remainder) {\n+        return whole_weeks + 1;\n+      }\n+    } else if (days_remainder < 0) {\n+      const weekday from_dow(to);\n+      const weekday start_of_week(week_start_);\n+      const int64_t days = (start_of_week - from_dow).count();\n+      if (days > 0 && days <= -days_remainder) {\n+        return whole_weeks - 1;\n+      }\n+    }\n+    return whole_weeks;\n+  }\n+\n+  // Monday = 1, Sunday = 7\n+  uint32_t week_start_;\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct DayTimeBetween {\n+  DayTimeBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    static_assert(std::is_same<T, DayTimeIntervalType::DayMilliseconds>::value, \"\");\n+    auto from = localizer_.template ConvertTimePoint<Duration>(arg0);\n+    auto to = localizer_.template ConvertTimePoint<Duration>(arg1);\n+    const int32_t num_days =\n+        static_cast<int32_t>((floor<days>(to) - floor<days>(from)).count());\n+    auto from_time = static_cast<int32_t>(\n+        std::chrono::duration_cast<std::chrono::milliseconds>(from - floor<days>(from))\n+            .count());\n+    auto to_time = static_cast<int32_t>(\n+        std::chrono::duration_cast<std::chrono::milliseconds>(to - floor<days>(to))\n+            .count());\n+    const int32_t num_millis = to_time - from_time;\n+    return DayTimeIntervalType::DayMilliseconds{num_days, num_millis};\n\nReview comment:\n       Is there a reason why this is only in ms?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal.cc\n##########\n@@ -192,6 +195,60 @@ struct TemporalComponentExtract\n   }\n };\n \n+Status CheckTimezones(const ExecBatch& batch) {\n+  const auto& timezone = GetInputTimezone(batch.values[0]);\n+  for (int i = 1; i < batch.num_values(); i++) {\n+    const auto& other_timezone = GetInputTimezone(batch.values[i]);\n+    if (other_timezone != timezone) {\n+      return Status::TypeError(\"Got differing time zone '\", other_timezone,\n+                               \"' for argument \", i + 1, \"; expected '\", timezone, \"'\");\n+    }\n\nReview comment:\n       Do we really care if they are in different timezones (as long as neither is timezone-naive)?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal.cc\n##########\n@@ -1104,6 +1375,90 @@ const FunctionDoc assume_timezone_doc{\n     {\"timestamps\"},\n     \"AssumeTimezoneOptions\"};\n \n+const FunctionDoc years_between_doc{\n+    \"Compute the number of year boundaries between two timestamps\",\n+    (\"Returns the number of year boundaries crossed from the first timestamp to the \"\n+     \"second.\\n\"\n+     \"Null values return null.\"),\n+    {\"start\", \"end\"}};\n+\n+const FunctionDoc quarters_between_doc{\n+    \"Compute the number of quarter start boundaries between two timestamps\",\n+    (\"Returns the number of quarter start boundaries crossed from the first timestamp \"\n+     \"to the second. The first quarter starts in January.\\n\"\n+     \"Null values return null.\"),\n+    {\"start\", \"end\"}};\n+\n+const FunctionDoc months_between_doc{\n+    \"Compute the number of month boundaries between two timestamps\",\n+    (\"Returns the number of month boundaries crossed from the first timestamp to the \"\n+     \"second.\\n\"\n+     \"Null values return null.\"),\n+    {\"start\", \"end\"}};\n+\n+const FunctionDoc weeks_between_doc{\n+    \"Compute the number of week boundaries between two timestamps\",\n+    (\"Returns the number of week boundaries crossed from the first timestamp to the \"\n+     \"second, using DayOfWeekOptions to determine which day starts the week.\\n\"\n+     \"Null values return null.\"),\n+    {\"start\", \"end\"},\n+    \"DayOfWeekOptions\"};\n+\n+const FunctionDoc day_time_between_doc{\n+    \"Compute the number of days and milliseconds between two timestamps\",\n+    (\"Returns the number of days and milliseconds from the first timestamp to the \"\n+     \"second.\\n\"\n+     \"Null values return null.\"),\n+    {\"start\", \"end\"}};\n+\n+const FunctionDoc days_between_doc{\n+    \"Compute the number of day boundaries between two timestamps\",\n+    (\"Returns the number of day boundaries crossed from the first timestamp to the \"\n+     \"second.\\n\"\n+     \"Null values return null.\"),\n+    {\"start\", \"end\"}};\n+\n+const FunctionDoc hours_between_doc{\n+    \"Compute the number of hour boundaries between two timestamps\",\n+    (\"Returns the number of hour boundaries crossed from the first timestamp to the \"\n+     \"second.\\n\"\n+     \"Null values return null.\"),\n+    {\"start\", \"end\"}};\n+\n+const FunctionDoc minutes_between_doc{\n+    \"Compute the number of minute boundaries between two timestamps\",\n+    (\"Returns the number of minute boundaries crossed from the first timestamp to the \"\n+     \"second.\\n\"\n+     \"Null values return null.\"),\n+    {\"start\", \"end\"}};\n+\n+const FunctionDoc seconds_between_doc{\n+    \"Compute the number of second boundaries between two timestamps\",\n+    (\"Returns the number of second boundaries crossed from the first timestamp to the \"\n+     \"second.\\n\"\n+     \"Null values return null.\"),\n+    {\"start\", \"end\"}};\n+\n+const FunctionDoc millis_between_doc{\n+    \"Compute the number of millisecond boundaries between two timestamps\",\n+    (\"Returns the number of millisecond boundaries crossed from the first \"\n+     \"timestamp to the second.\\n\"\n+     \"Null values return null.\"),\n+    {\"start\", \"end\"}};\n+\n+const FunctionDoc micros_between_doc{\n+    \"Compute the number of microsecond boundaries between two timestamps\",\n+    (\"Returns the number of microsecond boundaries crossed from the first \"\n+     \"timestamp to the second.\\n\"\n+     \"Null values return null.\"),\n+    {\"start\", \"end\"}};\n+\n+const FunctionDoc nanos_between_doc{\n\nReview comment:\n       ```suggestion\r\n   const FunctionDoc milliseconds_between_doc{\r\n       \"Compute the number of millisecond boundaries between two timestamps\",\r\n       (\"Returns the number of millisecond boundaries crossed from the first \"\r\n        \"timestamp to the second.\\n\"\r\n        \"Null values return null.\"),\r\n       {\"start\", \"end\"}};\r\n   \r\n   const FunctionDoc microseconds_between_doc{\r\n       \"Compute the number of microsecond boundaries between two timestamps\",\r\n       (\"Returns the number of microsecond boundaries crossed from the first \"\r\n        \"timestamp to the second.\\n\"\r\n        \"Null values return null.\"),\r\n       {\"start\", \"end\"}};\r\n   \r\n   const FunctionDoc nanoseconds_between_doc{\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal.cc\n##########\n@@ -830,6 +897,167 @@ struct ISOCalendar {\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// Compute boundary crossings between two timestamps\n+\n+template <typename Duration, typename Localizer>\n+struct YearsBetween {\n+  YearsBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    year_month_day from(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0)));\n+    year_month_day to(floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1)));\n+    return static_cast<T>((to.year() - from.year()).count());\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct QuartersBetween {\n+  QuartersBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  static int64_t GetQuarters(const year_month_day& ymd) {\n+    return static_cast<int64_t>(static_cast<int32_t>(ymd.year())) * 4 +\n+           (static_cast<uint32_t>(ymd.month()) - 1) / 3;\n+  }\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    year_month_day from_ymd(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0)));\n+    year_month_day to_ymd(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1)));\n+    int64_t from_quarters = GetQuarters(from_ymd);\n+    int64_t to_quarters = GetQuarters(to_ymd);\n+    return static_cast<T>(to_quarters - from_quarters);\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct MonthsBetween {\n+  MonthsBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    year_month_day from(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0)));\n+    year_month_day to(floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1)));\n+    return static_cast<T>(\n+        (year_month(to.year(), to.month()) - year_month(from.year(), from.month()))\n+            .count());\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct WeeksBetween {\n+  WeeksBetween(const DayOfWeekOptions* options, Localizer&& localizer)\n+      : week_start_(options->week_start), localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    auto from = floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0));\n+    auto to = floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1));\n+    const T days_between = static_cast<T>((to - from).count());\n+    const T whole_weeks = days_between / 7;\n+    const T days_remainder = days_between % 7;\n+    // We are counting week boundaries, so there may be one extra week\n+    if (days_remainder > 0) {\n+      const weekday from_dow(from);\n+      const weekday start_of_week(week_start_);\n+      const int64_t days = (start_of_week - from_dow).count();\n+      if (days > 0 && days <= days_remainder) {\n+        return whole_weeks + 1;\n+      }\n+    } else if (days_remainder < 0) {\n+      const weekday from_dow(to);\n+      const weekday start_of_week(week_start_);\n+      const int64_t days = (start_of_week - from_dow).count();\n+      if (days > 0 && days <= -days_remainder) {\n+        return whole_weeks - 1;\n+      }\n+    }\n+    return whole_weeks;\n+  }\n+\n+  // Monday = 1, Sunday = 7\n+  uint32_t week_start_;\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct DayTimeBetween {\n+  DayTimeBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    static_assert(std::is_same<T, DayTimeIntervalType::DayMilliseconds>::value, \"\");\n+    auto from = localizer_.template ConvertTimePoint<Duration>(arg0);\n+    auto to = localizer_.template ConvertTimePoint<Duration>(arg1);\n+    const int32_t num_days =\n+        static_cast<int32_t>((floor<days>(to) - floor<days>(from)).count());\n+    auto from_time = static_cast<int32_t>(\n+        std::chrono::duration_cast<std::chrono::milliseconds>(from - floor<days>(from))\n+            .count());\n+    auto to_time = static_cast<int32_t>(\n+        std::chrono::duration_cast<std::chrono::milliseconds>(to - floor<days>(to))\n+            .count());\n+    const int32_t num_millis = to_time - from_time;\n+    return DayTimeIntervalType::DayMilliseconds{num_days, num_millis};\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Unit, typename Duration, typename Localizer>\n+struct UnitsBetween {\n+  UnitsBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    auto from = floor<Unit>(localizer_.template ConvertTimePoint<Duration>(arg0));\n+    auto to = floor<Unit>(localizer_.template ConvertTimePoint<Duration>(arg1));\n+    return static_cast<T>((to - from).count());\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+using DaysBetween = UnitsBetween<days, Duration, Localizer>;\n+\n+template <typename Duration, typename Localizer>\n+using HoursBetween = UnitsBetween<std::chrono::hours, Duration, Localizer>;\n+\n+template <typename Duration, typename Localizer>\n+using MinutesBetween = UnitsBetween<std::chrono::minutes, Duration, Localizer>;\n+\n+template <typename Duration, typename Localizer>\n+using SecondsBetween = UnitsBetween<std::chrono::seconds, Duration, Localizer>;\n+\n+template <typename Duration, typename Localizer>\n+using MillisBetween = UnitsBetween<std::chrono::milliseconds, Duration, Localizer>;\n+\n+template <typename Duration, typename Localizer>\n+using MicrosBetween = UnitsBetween<std::chrono::microseconds, Duration, Localizer>;\n+\n+template <typename Duration, typename Localizer>\n+using NanosBetween = UnitsBetween<std::chrono::nanoseconds, Duration, Localizer>;\n\nReview comment:\n       ```suggestion\r\n   using NanosecondsBetween = UnitsBetween<std::chrono::nanoseconds, Duration, Localizer>;\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal.cc\n##########\n@@ -830,6 +897,167 @@ struct ISOCalendar {\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// Compute boundary crossings between two timestamps\n+\n+template <typename Duration, typename Localizer>\n+struct YearsBetween {\n+  YearsBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    year_month_day from(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0)));\n+    year_month_day to(floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1)));\n+    return static_cast<T>((to.year() - from.year()).count());\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct QuartersBetween {\n+  QuartersBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  static int64_t GetQuarters(const year_month_day& ymd) {\n+    return static_cast<int64_t>(static_cast<int32_t>(ymd.year())) * 4 +\n+           (static_cast<uint32_t>(ymd.month()) - 1) / 3;\n+  }\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    year_month_day from_ymd(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0)));\n+    year_month_day to_ymd(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1)));\n+    int64_t from_quarters = GetQuarters(from_ymd);\n+    int64_t to_quarters = GetQuarters(to_ymd);\n+    return static_cast<T>(to_quarters - from_quarters);\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct MonthsBetween {\n+  MonthsBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    year_month_day from(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0)));\n+    year_month_day to(floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1)));\n+    return static_cast<T>(\n+        (year_month(to.year(), to.month()) - year_month(from.year(), from.month()))\n+            .count());\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct WeeksBetween {\n+  WeeksBetween(const DayOfWeekOptions* options, Localizer&& localizer)\n+      : week_start_(options->week_start), localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    auto from = floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0));\n+    auto to = floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1));\n+    const T days_between = static_cast<T>((to - from).count());\n+    const T whole_weeks = days_between / 7;\n+    const T days_remainder = days_between % 7;\n+    // We are counting week boundaries, so there may be one extra week\n+    if (days_remainder > 0) {\n+      const weekday from_dow(from);\n+      const weekday start_of_week(week_start_);\n+      const int64_t days = (start_of_week - from_dow).count();\n+      if (days > 0 && days <= days_remainder) {\n+        return whole_weeks + 1;\n+      }\n+    } else if (days_remainder < 0) {\n+      const weekday from_dow(to);\n+      const weekday start_of_week(week_start_);\n+      const int64_t days = (start_of_week - from_dow).count();\n+      if (days > 0 && days <= -days_remainder) {\n+        return whole_weeks - 1;\n+      }\n+    }\n+    return whole_weeks;\n+  }\n+\n+  // Monday = 1, Sunday = 7\n+  uint32_t week_start_;\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct DayTimeBetween {\n+  DayTimeBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    static_assert(std::is_same<T, DayTimeIntervalType::DayMilliseconds>::value, \"\");\n+    auto from = localizer_.template ConvertTimePoint<Duration>(arg0);\n+    auto to = localizer_.template ConvertTimePoint<Duration>(arg1);\n+    const int32_t num_days =\n+        static_cast<int32_t>((floor<days>(to) - floor<days>(from)).count());\n+    auto from_time = static_cast<int32_t>(\n+        std::chrono::duration_cast<std::chrono::milliseconds>(from - floor<days>(from))\n+            .count());\n+    auto to_time = static_cast<int32_t>(\n+        std::chrono::duration_cast<std::chrono::milliseconds>(to - floor<days>(to))\n+            .count());\n+    const int32_t num_millis = to_time - from_time;\n+    return DayTimeIntervalType::DayMilliseconds{num_days, num_millis};\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Unit, typename Duration, typename Localizer>\n+struct UnitsBetween {\n+  UnitsBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    auto from = floor<Unit>(localizer_.template ConvertTimePoint<Duration>(arg0));\n+    auto to = floor<Unit>(localizer_.template ConvertTimePoint<Duration>(arg1));\n+    return static_cast<T>((to - from).count());\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+using DaysBetween = UnitsBetween<days, Duration, Localizer>;\n+\n+template <typename Duration, typename Localizer>\n+using HoursBetween = UnitsBetween<std::chrono::hours, Duration, Localizer>;\n+\n+template <typename Duration, typename Localizer>\n+using MinutesBetween = UnitsBetween<std::chrono::minutes, Duration, Localizer>;\n+\n+template <typename Duration, typename Localizer>\n+using SecondsBetween = UnitsBetween<std::chrono::seconds, Duration, Localizer>;\n+\n+template <typename Duration, typename Localizer>\n+using MillisBetween = UnitsBetween<std::chrono::milliseconds, Duration, Localizer>;\n+\n+template <typename Duration, typename Localizer>\n+using MicrosBetween = UnitsBetween<std::chrono::microseconds, Duration, Localizer>;\n\nReview comment:\n       ```suggestion\r\n   using MicrosecondsBetween = UnitsBetween<std::chrono::microseconds, Duration, Localizer>;\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal.cc\n##########\n@@ -830,6 +897,167 @@ struct ISOCalendar {\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// Compute boundary crossings between two timestamps\n+\n+template <typename Duration, typename Localizer>\n+struct YearsBetween {\n+  YearsBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    year_month_day from(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0)));\n+    year_month_day to(floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1)));\n+    return static_cast<T>((to.year() - from.year()).count());\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct QuartersBetween {\n+  QuartersBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  static int64_t GetQuarters(const year_month_day& ymd) {\n+    return static_cast<int64_t>(static_cast<int32_t>(ymd.year())) * 4 +\n+           (static_cast<uint32_t>(ymd.month()) - 1) / 3;\n+  }\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    year_month_day from_ymd(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0)));\n+    year_month_day to_ymd(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1)));\n+    int64_t from_quarters = GetQuarters(from_ymd);\n+    int64_t to_quarters = GetQuarters(to_ymd);\n+    return static_cast<T>(to_quarters - from_quarters);\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct MonthsBetween {\n+  MonthsBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    year_month_day from(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0)));\n+    year_month_day to(floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1)));\n+    return static_cast<T>(\n+        (year_month(to.year(), to.month()) - year_month(from.year(), from.month()))\n+            .count());\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct WeeksBetween {\n+  WeeksBetween(const DayOfWeekOptions* options, Localizer&& localizer)\n+      : week_start_(options->week_start), localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    auto from = floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0));\n+    auto to = floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1));\n+    const T days_between = static_cast<T>((to - from).count());\n+    const T whole_weeks = days_between / 7;\n+    const T days_remainder = days_between % 7;\n+    // We are counting week boundaries, so there may be one extra week\n+    if (days_remainder > 0) {\n+      const weekday from_dow(from);\n+      const weekday start_of_week(week_start_);\n+      const int64_t days = (start_of_week - from_dow).count();\n+      if (days > 0 && days <= days_remainder) {\n+        return whole_weeks + 1;\n+      }\n+    } else if (days_remainder < 0) {\n+      const weekday from_dow(to);\n+      const weekday start_of_week(week_start_);\n+      const int64_t days = (start_of_week - from_dow).count();\n+      if (days > 0 && days <= -days_remainder) {\n+        return whole_weeks - 1;\n+      }\n+    }\n+    return whole_weeks;\n+  }\n+\n+  // Monday = 1, Sunday = 7\n+  uint32_t week_start_;\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct DayTimeBetween {\n+  DayTimeBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    static_assert(std::is_same<T, DayTimeIntervalType::DayMilliseconds>::value, \"\");\n+    auto from = localizer_.template ConvertTimePoint<Duration>(arg0);\n+    auto to = localizer_.template ConvertTimePoint<Duration>(arg1);\n+    const int32_t num_days =\n+        static_cast<int32_t>((floor<days>(to) - floor<days>(from)).count());\n+    auto from_time = static_cast<int32_t>(\n+        std::chrono::duration_cast<std::chrono::milliseconds>(from - floor<days>(from))\n+            .count());\n+    auto to_time = static_cast<int32_t>(\n+        std::chrono::duration_cast<std::chrono::milliseconds>(to - floor<days>(to))\n+            .count());\n+    const int32_t num_millis = to_time - from_time;\n+    return DayTimeIntervalType::DayMilliseconds{num_days, num_millis};\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Unit, typename Duration, typename Localizer>\n+struct UnitsBetween {\n+  UnitsBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    auto from = floor<Unit>(localizer_.template ConvertTimePoint<Duration>(arg0));\n+    auto to = floor<Unit>(localizer_.template ConvertTimePoint<Duration>(arg1));\n+    return static_cast<T>((to - from).count());\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+using DaysBetween = UnitsBetween<days, Duration, Localizer>;\n+\n+template <typename Duration, typename Localizer>\n+using HoursBetween = UnitsBetween<std::chrono::hours, Duration, Localizer>;\n+\n+template <typename Duration, typename Localizer>\n+using MinutesBetween = UnitsBetween<std::chrono::minutes, Duration, Localizer>;\n+\n+template <typename Duration, typename Localizer>\n+using SecondsBetween = UnitsBetween<std::chrono::seconds, Duration, Localizer>;\n+\n+template <typename Duration, typename Localizer>\n+using MillisBetween = UnitsBetween<std::chrono::milliseconds, Duration, Localizer>;\n\nReview comment:\n       ```suggestion\r\n   using MillisecondsBetween = UnitsBetween<std::chrono::milliseconds, Duration, Localizer>;\r\n   ```\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal.cc\n##########\n@@ -1192,6 +1547,68 @@ void RegisterScalarTemporal(FunctionRegistry* registry) {\n           OutputType::Resolver(ResolveAssumeTimezoneOutput), &assume_timezone_doc,\n           nullptr, AssumeTimezoneState::Init);\n   DCHECK_OK(registry->AddFunction(std::move(assume_timezone)));\n+\n+  auto years_between =\n+      MakeTemporalBinary<YearsBetween, TemporalComponentExtractBinary, Int64Type>(\n+          \"years_between\", int64(), &years_between_doc);\n+  DCHECK_OK(registry->AddFunction(std::move(years_between)));\n+\n+  auto quarters_between =\n+      MakeTemporalBinary<QuartersBetween, TemporalComponentExtractBinary, Int64Type>(\n+          \"quarters_between\", int64(), &quarters_between_doc);\n+  DCHECK_OK(registry->AddFunction(std::move(quarters_between)));\n+\n+  auto months_between =\n+      MakeTemporalBinary<MonthsBetween, TemporalComponentExtractBinary, Int64Type>(\n+          \"months_between\", int64(), &months_between_doc);\n+  DCHECK_OK(registry->AddFunction(std::move(months_between)));\n+\n+  auto weeks_between =\n+      MakeTemporalBinary<WeeksBetween, TemporalComponentExtractDayOfWeekBinary,\n+                         Int64Type>(\"weeks_between\", int64(), &weeks_between_doc,\n+                                    &default_day_of_week_options, DayOfWeekState::Init);\n+  DCHECK_OK(registry->AddFunction(std::move(weeks_between)));\n+\n+  auto day_time_between =\n+      MakeTemporalBinary<DayTimeBetween, TemporalComponentExtractBinary,\n+                         DayTimeIntervalType>(\"day_time_between\", day_time_interval(),\n+                                              &day_time_between_doc);\n+  DCHECK_OK(registry->AddFunction(std::move(day_time_between)));\n+\n+  auto days_between =\n+      MakeTemporalBinary<DaysBetween, TemporalComponentExtractBinary, Int64Type>(\n+          \"days_between\", int64(), &days_between_doc);\n+  DCHECK_OK(registry->AddFunction(std::move(days_between)));\n+\n+  auto hours_between =\n+      MakeTemporalBinary<HoursBetween, TemporalComponentExtractBinary, Int64Type>(\n+          \"hours_between\", int64(), &hours_between_doc);\n+  DCHECK_OK(registry->AddFunction(std::move(hours_between)));\n+\n+  auto minutes_between =\n+      MakeTemporalBinary<MinutesBetween, TemporalComponentExtractBinary, Int64Type>(\n+          \"minutes_between\", int64(), &minutes_between_doc);\n+  DCHECK_OK(registry->AddFunction(std::move(minutes_between)));\n+\n+  auto seconds_between =\n+      MakeTemporalBinary<SecondsBetween, TemporalComponentExtractBinary, Int64Type>(\n+          \"seconds_between\", int64(), &seconds_between_doc);\n+  DCHECK_OK(registry->AddFunction(std::move(seconds_between)));\n+\n+  auto millis_between =\n+      MakeTemporalBinary<MillisBetween, TemporalComponentExtractBinary, Int64Type>(\n+          \"millis_between\", int64(), &millis_between_doc);\n+  DCHECK_OK(registry->AddFunction(std::move(millis_between)));\n+\n+  auto micros_between =\n+      MakeTemporalBinary<MicrosBetween, TemporalComponentExtractBinary, Int64Type>(\n+          \"micros_between\", int64(), &micros_between_doc);\n+  DCHECK_OK(registry->AddFunction(std::move(micros_between)));\n+\n+  auto nanos_between =\n+      MakeTemporalBinary<NanosBetween, TemporalComponentExtractBinary, Int64Type>(\n+          \"nanos_between\", int64(), &nanos_between_doc);\n+  DCHECK_OK(registry->AddFunction(std::move(nanos_between)));\n\nReview comment:\n       ```suggestion\r\n     auto seconds_between =\r\n         MakeTemporalBinary<SecondsBetween, TemporalComponentExtractBinary, Int64Type>(\r\n             \"seconds_between\", int64(), &seconds_between_doc);\r\n     DCHECK_OK(registry->AddFunction(std::move(seconds_between)));\r\n   \r\n     auto milliseconds_between =\r\n         MakeTemporalBinary<MillisecondsBetween, TemporalComponentExtractBinary, Int64Type>(\r\n             \"milliseconds_between\", int64(), &milliseconds_between_doc);\r\n     DCHECK_OK(registry->AddFunction(std::move(milliseconds_between)));\r\n   \r\n     auto microseconds_between =\r\n         MakeTemporalBinary<MicrosecondsBetween, TemporalComponentExtractBinary, Int64Type>(\r\n             \"microseconds_between\", int64(), &microseconds_between_doc);\r\n     DCHECK_OK(registry->AddFunction(std::move(microseconds_between)));\r\n   \r\n     auto nanoseconds_between =\r\n         MakeTemporalBinary<NanosecondsBetween, TemporalComponentExtractBinary, Int64Type>(\r\n             \"nanoseconds_between\", int64(), &nanoseconds_between_doc);\r\n     DCHECK_OK(registry->AddFunction(std::move(nanoseconds_between)));\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-15T21:30:32.325+0000",
                    "updated": "2021-09-15T21:30:32.325+0000",
                    "started": "2021-09-15T21:30:32.325+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "651350",
                    "issueId": "13393476"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393476/worklog/651356",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on a change in pull request #10960:\nURL: https://github.com/apache/arrow/pull/10960#discussion_r709590779\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal.cc\n##########\n@@ -830,6 +897,167 @@ struct ISOCalendar {\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// Compute boundary crossings between two timestamps\n+\n+template <typename Duration, typename Localizer>\n+struct YearsBetween {\n+  YearsBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    year_month_day from(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0)));\n+    year_month_day to(floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1)));\n+    return static_cast<T>((to.year() - from.year()).count());\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct QuartersBetween {\n+  QuartersBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  static int64_t GetQuarters(const year_month_day& ymd) {\n+    return static_cast<int64_t>(static_cast<int32_t>(ymd.year())) * 4 +\n+           (static_cast<uint32_t>(ymd.month()) - 1) / 3;\n+  }\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    year_month_day from_ymd(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0)));\n+    year_month_day to_ymd(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1)));\n+    int64_t from_quarters = GetQuarters(from_ymd);\n+    int64_t to_quarters = GetQuarters(to_ymd);\n+    return static_cast<T>(to_quarters - from_quarters);\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct MonthsBetween {\n+  MonthsBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    year_month_day from(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0)));\n+    year_month_day to(floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1)));\n+    return static_cast<T>(\n+        (year_month(to.year(), to.month()) - year_month(from.year(), from.month()))\n+            .count());\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct WeeksBetween {\n+  WeeksBetween(const DayOfWeekOptions* options, Localizer&& localizer)\n+      : week_start_(options->week_start), localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n\nReview comment:\n       Perhaps you could find the first week starting weekday after the starting date and then calculate the difference // 7?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-15T21:32:43.764+0000",
                    "updated": "2021-09-15T21:32:43.764+0000",
                    "started": "2021-09-15T21:32:43.764+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "651356",
                    "issueId": "13393476"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393476/worklog/651689",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10960:\nURL: https://github.com/apache/arrow/pull/10960#discussion_r710133559\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal.cc\n##########\n@@ -830,6 +897,167 @@ struct ISOCalendar {\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// Compute boundary crossings between two timestamps\n+\n+template <typename Duration, typename Localizer>\n+struct YearsBetween {\n+  YearsBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    year_month_day from(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0)));\n+    year_month_day to(floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1)));\n+    return static_cast<T>((to.year() - from.year()).count());\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct QuartersBetween {\n+  QuartersBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  static int64_t GetQuarters(const year_month_day& ymd) {\n+    return static_cast<int64_t>(static_cast<int32_t>(ymd.year())) * 4 +\n+           (static_cast<uint32_t>(ymd.month()) - 1) / 3;\n+  }\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    year_month_day from_ymd(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0)));\n+    year_month_day to_ymd(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1)));\n+    int64_t from_quarters = GetQuarters(from_ymd);\n+    int64_t to_quarters = GetQuarters(to_ymd);\n+    return static_cast<T>(to_quarters - from_quarters);\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct MonthsBetween {\n+  MonthsBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    year_month_day from(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0)));\n+    year_month_day to(floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1)));\n+    return static_cast<T>(\n+        (year_month(to.year(), to.month()) - year_month(from.year(), from.month()))\n+            .count());\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct WeeksBetween {\n+  WeeksBetween(const DayOfWeekOptions* options, Localizer&& localizer)\n+      : week_start_(options->week_start), localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    auto from = floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0));\n+    auto to = floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1));\n+    const T days_between = static_cast<T>((to - from).count());\n+    const T whole_weeks = days_between / 7;\n+    const T days_remainder = days_between % 7;\n+    // We are counting week boundaries, so there may be one extra week\n+    if (days_remainder > 0) {\n+      const weekday from_dow(from);\n+      const weekday start_of_week(week_start_);\n+      const int64_t days = (start_of_week - from_dow).count();\n+      if (days > 0 && days <= days_remainder) {\n+        return whole_weeks + 1;\n+      }\n+    } else if (days_remainder < 0) {\n+      const weekday from_dow(to);\n+      const weekday start_of_week(week_start_);\n+      const int64_t days = (start_of_week - from_dow).count();\n+      if (days > 0 && days <= -days_remainder) {\n+        return whole_weeks - 1;\n+      }\n+    }\n+    return whole_weeks;\n+  }\n+\n+  // Monday = 1, Sunday = 7\n+  uint32_t week_start_;\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct DayTimeBetween {\n+  DayTimeBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    static_assert(std::is_same<T, DayTimeIntervalType::DayMilliseconds>::value, \"\");\n+    auto from = localizer_.template ConvertTimePoint<Duration>(arg0);\n+    auto to = localizer_.template ConvertTimePoint<Duration>(arg1);\n+    const int32_t num_days =\n+        static_cast<int32_t>((floor<days>(to) - floor<days>(from)).count());\n+    auto from_time = static_cast<int32_t>(\n+        std::chrono::duration_cast<std::chrono::milliseconds>(from - floor<days>(from))\n+            .count());\n+    auto to_time = static_cast<int32_t>(\n+        std::chrono::duration_cast<std::chrono::milliseconds>(to - floor<days>(to))\n+            .count());\n+    const int32_t num_millis = to_time - from_time;\n+    return DayTimeIntervalType::DayMilliseconds{num_days, num_millis};\n\nReview comment:\n       You mean, why didn't I add kernels for MonthsBetween and MonthDayNano between? I can add those.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal.cc\n##########\n@@ -192,6 +195,60 @@ struct TemporalComponentExtract\n   }\n };\n \n+Status CheckTimezones(const ExecBatch& batch) {\n+  const auto& timezone = GetInputTimezone(batch.values[0]);\n+  for (int i = 1; i < batch.num_values(); i++) {\n+    const auto& other_timezone = GetInputTimezone(batch.values[i]);\n+    if (other_timezone != timezone) {\n+      return Status::TypeError(\"Got differing time zone '\", other_timezone,\n+                               \"' for argument \", i + 1, \"; expected '\", timezone, \"'\");\n+    }\n\nReview comment:\n       What would it mean to find the difference between two timestamps in different timezones? I suppose we could compute the difference in UTC, but then you'd get different results (as compared to working with local timestamps) if you had a DST transition in the covered time.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-16T13:45:16.030+0000",
                    "updated": "2021-09-16T13:45:16.030+0000",
                    "started": "2021-09-16T13:45:16.029+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "651689",
                    "issueId": "13393476"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393476/worklog/651715",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on a change in pull request #10960:\nURL: https://github.com/apache/arrow/pull/10960#discussion_r710161468\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal.cc\n##########\n@@ -192,6 +195,60 @@ struct TemporalComponentExtract\n   }\n };\n \n+Status CheckTimezones(const ExecBatch& batch) {\n+  const auto& timezone = GetInputTimezone(batch.values[0]);\n+  for (int i = 1; i < batch.num_values(); i++) {\n+    const auto& other_timezone = GetInputTimezone(batch.values[i]);\n+    if (other_timezone != timezone) {\n+      return Status::TypeError(\"Got differing time zone '\", other_timezone,\n+                               \"' for argument \", i + 1, \"; expected '\", timezone, \"'\");\n+    }\n\nReview comment:\n       Difference between two moments is just an interval without a timezone. And out timezone aware timestamps are unambiguous moments or am I getting something terribly wrong here? :)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-16T14:14:35.128+0000",
                    "updated": "2021-09-16T14:14:35.128+0000",
                    "started": "2021-09-16T14:14:35.127+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "651715",
                    "issueId": "13393476"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393476/worklog/651718",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on a change in pull request #10960:\nURL: https://github.com/apache/arrow/pull/10960#discussion_r710162325\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal.cc\n##########\n@@ -830,6 +897,167 @@ struct ISOCalendar {\n   }\n };\n \n+// ----------------------------------------------------------------------\n+// Compute boundary crossings between two timestamps\n+\n+template <typename Duration, typename Localizer>\n+struct YearsBetween {\n+  YearsBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    year_month_day from(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0)));\n+    year_month_day to(floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1)));\n+    return static_cast<T>((to.year() - from.year()).count());\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct QuartersBetween {\n+  QuartersBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  static int64_t GetQuarters(const year_month_day& ymd) {\n+    return static_cast<int64_t>(static_cast<int32_t>(ymd.year())) * 4 +\n+           (static_cast<uint32_t>(ymd.month()) - 1) / 3;\n+  }\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    year_month_day from_ymd(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0)));\n+    year_month_day to_ymd(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1)));\n+    int64_t from_quarters = GetQuarters(from_ymd);\n+    int64_t to_quarters = GetQuarters(to_ymd);\n+    return static_cast<T>(to_quarters - from_quarters);\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct MonthsBetween {\n+  MonthsBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    year_month_day from(\n+        floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0)));\n+    year_month_day to(floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1)));\n+    return static_cast<T>(\n+        (year_month(to.year(), to.month()) - year_month(from.year(), from.month()))\n+            .count());\n+  }\n+\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct WeeksBetween {\n+  WeeksBetween(const DayOfWeekOptions* options, Localizer&& localizer)\n+      : week_start_(options->week_start), localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    auto from = floor<days>(localizer_.template ConvertTimePoint<Duration>(arg0));\n+    auto to = floor<days>(localizer_.template ConvertTimePoint<Duration>(arg1));\n+    const T days_between = static_cast<T>((to - from).count());\n+    const T whole_weeks = days_between / 7;\n+    const T days_remainder = days_between % 7;\n+    // We are counting week boundaries, so there may be one extra week\n+    if (days_remainder > 0) {\n+      const weekday from_dow(from);\n+      const weekday start_of_week(week_start_);\n+      const int64_t days = (start_of_week - from_dow).count();\n+      if (days > 0 && days <= days_remainder) {\n+        return whole_weeks + 1;\n+      }\n+    } else if (days_remainder < 0) {\n+      const weekday from_dow(to);\n+      const weekday start_of_week(week_start_);\n+      const int64_t days = (start_of_week - from_dow).count();\n+      if (days > 0 && days <= -days_remainder) {\n+        return whole_weeks - 1;\n+      }\n+    }\n+    return whole_weeks;\n+  }\n+\n+  // Monday = 1, Sunday = 7\n+  uint32_t week_start_;\n+  Localizer localizer_;\n+};\n+\n+template <typename Duration, typename Localizer>\n+struct DayTimeBetween {\n+  DayTimeBetween(const FunctionOptions* options, Localizer&& localizer)\n+      : localizer_(std::move(localizer)) {}\n+\n+  template <typename T, typename Arg0, typename Arg1>\n+  T Call(KernelContext*, Arg0 arg0, Arg1 arg1, Status*) const {\n+    static_assert(std::is_same<T, DayTimeIntervalType::DayMilliseconds>::value, \"\");\n+    auto from = localizer_.template ConvertTimePoint<Duration>(arg0);\n+    auto to = localizer_.template ConvertTimePoint<Duration>(arg1);\n+    const int32_t num_days =\n+        static_cast<int32_t>((floor<days>(to) - floor<days>(from)).count());\n+    auto from_time = static_cast<int32_t>(\n+        std::chrono::duration_cast<std::chrono::milliseconds>(from - floor<days>(from))\n+            .count());\n+    auto to_time = static_cast<int32_t>(\n+        std::chrono::duration_cast<std::chrono::milliseconds>(to - floor<days>(to))\n+            .count());\n+    const int32_t num_millis = to_time - from_time;\n+    return DayTimeIntervalType::DayMilliseconds{num_days, num_millis};\n\nReview comment:\n       Feels like it would be good for completeness.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-16T14:15:35.912+0000",
                    "updated": "2021-09-16T14:15:35.912+0000",
                    "started": "2021-09-16T14:15:35.912+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "651718",
                    "issueId": "13393476"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393476/worklog/651719",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10960:\nURL: https://github.com/apache/arrow/pull/10960#discussion_r710162432\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal.cc\n##########\n@@ -192,6 +195,60 @@ struct TemporalComponentExtract\n   }\n };\n \n+Status CheckTimezones(const ExecBatch& batch) {\n+  const auto& timezone = GetInputTimezone(batch.values[0]);\n+  for (int i = 1; i < batch.num_values(); i++) {\n+    const auto& other_timezone = GetInputTimezone(batch.values[i]);\n+    if (other_timezone != timezone) {\n+      return Status::TypeError(\"Got differing time zone '\", other_timezone,\n+                               \"' for argument \", i + 1, \"; expected '\", timezone, \"'\");\n+    }\n\nReview comment:\n       Oh. Doh. Yes, you are right. Thanks for pointing this out :)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-16T14:15:39.180+0000",
                    "updated": "2021-09-16T14:15:39.180+0000",
                    "started": "2021-09-16T14:15:39.180+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "651719",
                    "issueId": "13393476"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393476/worklog/651722",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10960:\nURL: https://github.com/apache/arrow/pull/10960#discussion_r710163129\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal.cc\n##########\n@@ -1104,6 +1375,90 @@ const FunctionDoc assume_timezone_doc{\n     {\"timestamps\"},\n     \"AssumeTimezoneOptions\"};\n \n+const FunctionDoc years_between_doc{\n+    \"Compute the number of year boundaries between two timestamps\",\n\nReview comment:\n       How about this?\r\n   \r\n   ```\r\n   const FunctionDoc years_between_doc{\r\n       \"Compute the number of years between two timestamps\",\r\n       (\"Returns the number of year boundaries crossed from the first timestamp to the\\n\"\r\n        \"second. That is, the difference is calculated as if the timestamps were\\n\"\r\n        \"truncated to the year.\\n\"\r\n        \"Null values emit null.\"),\r\n       {\"start\", \"end\"}};\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-16T14:16:28.871+0000",
                    "updated": "2021-09-16T14:16:28.871+0000",
                    "started": "2021-09-16T14:16:28.871+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "651722",
                    "issueId": "13393476"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393476/worklog/651730",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rok commented on a change in pull request #10960:\nURL: https://github.com/apache/arrow/pull/10960#discussion_r710165983\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal.cc\n##########\n@@ -1104,6 +1375,90 @@ const FunctionDoc assume_timezone_doc{\n     {\"timestamps\"},\n     \"AssumeTimezoneOptions\"};\n \n+const FunctionDoc years_between_doc{\n+    \"Compute the number of year boundaries between two timestamps\",\n\nReview comment:\n       Better. How about using 'complete years passed/elapsed/..' instead of 'year boundaries crossed'?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-16T14:19:27.072+0000",
                    "updated": "2021-09-16T14:19:27.072+0000",
                    "started": "2021-09-16T14:19:27.072+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "651730",
                    "issueId": "13393476"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393476/worklog/651735",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10960:\nURL: https://github.com/apache/arrow/pull/10960#discussion_r710170126\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_temporal.cc\n##########\n@@ -1104,6 +1375,90 @@ const FunctionDoc assume_timezone_doc{\n     {\"timestamps\"},\n     \"AssumeTimezoneOptions\"};\n \n+const FunctionDoc years_between_doc{\n+    \"Compute the number of year boundaries between two timestamps\",\n\nReview comment:\n       I suppose the reason why I'm using 'boundaries' is because the difference between 1998-12-01 and 1999-01-1 is '1 year' here even though a complete year hasn't passed.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-16T14:23:53.056+0000",
                    "updated": "2021-09-16T14:23:53.056+0000",
                    "started": "2021-09-16T14:23:53.056+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "651735",
                    "issueId": "13393476"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 34800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5e483b26[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5cbd6da2[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@10bc7306[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@27dbccce[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5cf3806a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@449f6f29[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@37c800ff[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4e8c0774[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@e3c3e1f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3165eed6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@46dddffd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@68c4c7f5[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 34800,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Sep 29 07:50:43 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-09-29T07:50:43.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13548/watchers",
            "watchCount": 5,
            "isWatching": false
        },
        "created": "2021-08-04T12:16:07.000+0000",
        "updated": "2021-09-30T00:23:33.000+0000",
        "timeoriginalestimate": null,
        "description": "Add a kernel to compute the number of years, months, weeks, days, hours, minutes, (micro/milli/nano)seconds, or quarters between two timestamps. \r\n\r\nThis should act like SQL's DATEDIFF ([SQL Server|https://docs.microsoft.com/en-us/sql/t-sql/functions/datediff-transact-sql?view=sql-server-ver15]). Pandas doesn't have a convenient equivalent except in the case of days (pd.Timedelta.days) but it can be [calculated using Timestamp.to_period|https://stackoverflow.com/questions/54171674/calculating-the-amount-of-full-months-between-two-dates].\r\n\r\nWe have hinnant's date library vendored and this should hopefully be implementable with that.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "9h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 34800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Implement datediff kernel",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393476/comment/17393095",
                    "id": "17393095",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Is this about DATEDIFF or about EXTRACT? We already have timestamp extraction kernels.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-08-04T12:28:26.793+0000",
                    "updated": "2021-08-04T12:28:26.793+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393476/comment/17393135",
                    "id": "17393135",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Hmm, the functions are a little confusing, but this should be DATEDIFF. I saw that postgres calls it EXTRACT which can operate on an interval, but it behaves differently than what I expected; let me edit things to clarify.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-08-04T13:10:02.897+0000",
                    "updated": "2021-08-04T13:10:02.897+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393476/comment/17403354",
                    "id": "17403354",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
                        "name": "icook",
                        "key": "icook",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
                        },
                        "displayName": "Ian Cook",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Note regarding the R bindings: I don't think any existing R functions map onto the functions added here, at least not in a straightforward way. The functions added here take a start timestamp and an end timestamp, and they compute how many time unit boundaries are crossed between the two timestamps.\r\n\r\nIn base R and various R packages like clock and lubridate, when the difference between two dates is computed, the result is typically a difftime / period / duration object that stores only the amount of time that elapsed. These objects _do not_\u00a0specify when the period started/ended. The functions that return the number of years/months/days/hours/etc. in a difftime / period / duration are unary and do not work by counting how many time unit boundaries were crossed.\r\n\r\nHowever, lubridate also includes a class called\u00a0[Interval|https://lubridate.tidyverse.org/reference/Interval-class.html]\u00a0that\u00a0_does_ store when the period started:\r\n{quote}Interval is an S4 class that extends the Timespan class. An Interval object records one or more spans of time. Intervals record these timespans as a sequence of seconds that begin at a specified date. Since intervals are anchored to a precise moment of time, they can accurately be converted to Period or Duration class objects. This is because we can observe the length in seconds of each period that begins on a specific date. Contrast this to a generalized period, which may not have a consistent length in seconds (e.g. the number of seconds in a year will change if it is a leap year).\r\n{quote}\r\nHowever there are no functions in lubridate that take an Interval and return the number of\u00a0time unit boundaries that were crossed in that Interval.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
                        "name": "icook",
                        "key": "icook",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
                        },
                        "displayName": "Ian Cook",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-08-23T19:33:36.162+0000",
                    "updated": "2021-08-23T19:34:21.965+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13393476/comment/17421990",
                    "id": "17421990",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 10960\n[https://github.com/apache/arrow/pull/10960]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-09-29T07:50:43.800+0000",
                    "updated": "2021-09-29T07:50:43.800+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|z0tlqo:",
        "customfield_12314139": null
    }
}