{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13314857",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314857",
    "key": "ARROW-9318",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12598492",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12598492",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13326842",
                    "key": "ARROW-9960",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13326842",
                    "fields": {
                        "summary": "[C++][Parquet] Enable external material and rotation for encryption keys",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=thamha",
            "name": "thamha",
            "key": "thamha",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34046",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34046",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34046",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34046"
            },
            "displayName": "Tham",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=gershinsky",
            "name": "gershinsky",
            "key": "gershinsky",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=gershinsky&avatarId=45287",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=gershinsky&avatarId=45287",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=gershinsky&avatarId=45287",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=gershinsky&avatarId=45287"
            },
            "displayName": "Gidon Gershinsky",
            "active": true,
            "timeZone": "Asia/Jerusalem"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=gershinsky",
            "name": "gershinsky",
            "key": "gershinsky",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=gershinsky&avatarId=45287",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=gershinsky&avatarId=45287",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=gershinsky&avatarId=45287",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=gershinsky&avatarId=45287"
            },
            "displayName": "Gidon Gershinsky",
            "active": true,
            "timeZone": "Asia/Jerusalem"
        },
        "aggregateprogress": {
            "progress": 101400,
            "total": 101400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 101400,
            "total": 101400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9318/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 169,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314857/worklog/473537",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8023:\nURL: https://github.com/apache/arrow/pull/8023#issuecomment-678611290\n\n\n   https://issues.apache.org/jira/browse/ARROW-9318\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-22T08:05:39.639+0000",
                    "updated": "2020-08-22T08:05:39.639+0000",
                    "started": "2020-08-22T08:05:39.639+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "473537",
                    "issueId": "13314857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314857/worklog/473741",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #8023:\nURL: https://github.com/apache/arrow/pull/8023#discussion_r475337736\n\n\n\n##########\nFile path: cpp/src/parquet/encryption.h\n##########\n@@ -47,15 +47,15 @@ using ColumnPathToEncryptionPropertiesMap =\n \n class PARQUET_EXPORT DecryptionKeyRetriever {\n  public:\n-  virtual std::string GetKey(const std::string& key_metadata) const = 0;\n\nReview comment:\n       Why are you removing const?  \n\n##########\nFile path: cpp/src/parquet/file_key_material_store.h\n##########\n@@ -0,0 +1,51 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\") = 0; you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <set>\n+#include <string>\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class FileKeyMaterialStore {\n+ public:\n+  // Initializes key material store for a parquet file.\n+  virtual void Initialize(const std::string& parquet_file_path, bool temp_store) = 0;\n+\n+  virtual void AddKeyMaterial(const std::string& key_id_in_file,\n\nReview comment:\n       is it an error to repeat a key?  please add documentation.\n\n##########\nFile path: cpp/src/parquet/key_encryption_key.h\n##########\n@@ -0,0 +1,57 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <cstdint>\n+#include <vector>\n+\n+#include \"arrow/util/base64.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class KeyEncryptionKey {\n+ public:\n+  KeyEncryptionKey() = default;\n\nReview comment:\n       given the base64 encoding done in the other constructor, should this really be default?  Is it ok for all the fields to be empty?\n\n##########\nFile path: cpp/src/parquet/file_key_unwrapper.h\n##########\n@@ -0,0 +1,65 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"parquet/encryption.h\"\n+#include \"parquet/key_material.h\"\n+#include \"parquet/key_toolkit.h\"\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/kms_client_factory.h\"\n+#include \"parquet/platform.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class PARQUET_EXPORT FileKeyUnwrapper : public DecryptionKeyRetriever {\n+ public:\n+  FileKeyUnwrapper(std::shared_ptr<KmsClientFactory> kms_client_factory,\n+                   const KmsConnectionConfig& kms_connection_config,\n+                   uint64_t cache_lifetime, bool is_wrap_locally);\n+\n+  std::string GetKey(const std::string& key_metadata) override;\n+\n+ private:\n+  class KeyWithMasterID {\n\nReview comment:\n       ```suggestion\r\n     class KeyWithMasterId {\r\n   ```\r\n   The code base generally uses camel case even for acronyms.\n\n##########\nFile path: cpp/src/parquet/key_material.cc\n##########\n@@ -0,0 +1,161 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <rapidjson/document.h>\n+#include <rapidjson/stringbuffer.h>\n+#include <rapidjson/writer.h>\n+\n+#include \"parquet/exception.h\"\n+#include \"parquet/key_material.h\"\n+#include \"parquet/key_metadata.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+constexpr char KeyMaterial::KEY_MATERIAL_TYPE_FIELD[];\n+constexpr char KeyMaterial::KEY_MATERIAL_TYPE1[];\n+\n+constexpr char KeyMaterial::FOOTER_KEY_ID_IN_FILE[];\n+constexpr char KeyMaterial::COLUMN_KEY_ID_IN_FILE_PREFIX[];\n+\n+constexpr char KeyMaterial::IS_FOOTER_KEY_FIELD[];\n+constexpr char KeyMaterial::DOUBLE_WRAPPING_FIELD[];\n+constexpr char KeyMaterial::KMS_INSTANCE_ID_FIELD[];\n+constexpr char KeyMaterial::KMS_INSTANCE_URL_FIELD[];\n+constexpr char KeyMaterial::MASTER_KEY_ID_FIELD[];\n+constexpr char KeyMaterial::WRAPPED_DEK_FIELD[];\n+constexpr char KeyMaterial::KEK_ID_FIELD[];\n+constexpr char KeyMaterial::WRAPPED_KEK_FIELD[];\n+\n+KeyMaterial::KeyMaterial(bool is_footer_key, const std::string& kms_instance_id,\n+                         const std::string& kms_instance_url,\n+                         const std::string& master_key_id, bool is_double_wrapped,\n+                         const std::string& kek_id,\n+                         const std::string& encoded_wrapped_kek,\n+                         const std::string& encoded_wrapped_dek)\n+    : is_footer_key_(is_footer_key),\n+      kms_instance_id_(kms_instance_id),\n+      kms_instance_url_(kms_instance_url),\n+      master_key_id_(master_key_id),\n+      is_double_wrapped_(is_double_wrapped),\n+      kek_id_(kek_id),\n+      encoded_wrapped_kek_(encoded_wrapped_kek),\n+      encoded_wrapped_dek_(encoded_wrapped_dek) {}\n+\n+KeyMaterial KeyMaterial::Parse(const std::string& key_material_string) {\n+  rapidjson::Document document;\n+  document.Parse(key_material_string.c_str());\n\nReview comment:\n       I thought there was a document parser that takes a string pointer and a size, that is probably better to use if it is available.\n\n##########\nFile path: cpp/src/parquet/key_metadata.h\n##########\n@@ -0,0 +1,91 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <string>\n+\n+#include \"parquet/key_material.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+// Parquet encryption specification defines \"key metadata\" as an arbitrary byte array,\n+// generated by file writers for each encryption key, and passed to the low level API for\n+// storage in the file footer . The \"key metadata\" field is made available to file readers\n\nReview comment:\n       ```suggestion\r\n   // storage in the file footer. The \"key metadata\" field is made available to file readers\r\n   ```\n\n##########\nFile path: cpp/src/parquet/key_metadata.h\n##########\n@@ -0,0 +1,91 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <string>\n+\n+#include \"parquet/key_material.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+// Parquet encryption specification defines \"key metadata\" as an arbitrary byte array,\n+// generated by file writers for each encryption key, and passed to the low level API for\n+// storage in the file footer . The \"key metadata\" field is made available to file readers\n+// to enable recovery of the key. This simple interface can be utilized for implementation\n+// of any key management scheme.\n+//\n+// The keytools package (PARQUET-1373) implements one approach, of many possible, to key\n+// management and to generation of the \"key metadata\" fields. This approach, based on the\n+// \"envelope encryption\" pattern, allows to work with KMS servers. It keeps the actual\n+// material, required to recover a key, in a \"key material\" object (see the KeyMaterial\n+// class for details).\n+//\n+// KeyMetadata class writes (and reads) the \"key metadata\" field as a flat json object,\n\nReview comment:\n       ```suggestion\r\n   // KeyMetadata writes (and reads) the \"key metadata\" field as a flat json object,\r\n   ```\n\n##########\nFile path: cpp/src/parquet/file_key_material_store.h\n##########\n@@ -0,0 +1,51 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\") = 0; you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <set>\n+#include <string>\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class FileKeyMaterialStore {\n+ public:\n+  // Initializes key material store for a parquet file.\n\nReview comment:\n       For headers we use doxygen triple slash comments \"///\"\n\n##########\nFile path: cpp/src/parquet/file_key_material_store.h\n##########\n@@ -0,0 +1,51 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\") = 0; you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <set>\n+#include <string>\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class FileKeyMaterialStore {\n\nReview comment:\n       needs documentation.\n\n##########\nFile path: cpp/src/parquet/encryption_key_management_test.cc\n##########\n@@ -0,0 +1,238 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <gtest/gtest.h>\n+\n+#include <iostream>\n+#include <string>\n+\n+#include \"arrow/testing/util.h\"\n+\n+#include \"parquet/in_memory_kms.h\"\n+#include \"parquet/key_toolkit.h\"\n+#include \"parquet/properties_driven_crypto_factory.h\"\n+#include \"parquet/test_encryption_util.h\"\n+#include \"parquet/test_util.h\"\n+\n+namespace parquet {\n+\n+namespace test {\n+\n+using encryption::DecryptionConfiguration;\n+using encryption::EncryptionConfiguration;\n+using encryption::InMemoryKmsClientFactory;\n+using encryption::KeyAccessToken;\n+using encryption::KeyToolkit;\n+using encryption::KmsClient;\n+using encryption::KmsClientFactory;\n+using encryption::KmsConnectionConfig;\n+using encryption::PropertiesDrivenCryptoFactory;\n+\n+const char FOOTER_MASTER_KEY[] = \"0123456789112345\";\n+const char* const COLUMN_MASTER_KEYS[] = {\"1234567890123450\", \"1234567890123451\",\n+                                          \"1234567890123452\", \"1234567890123453\",\n+                                          \"1234567890123454\", \"1234567890123455\"};\n+const char* const COLUMN_MASTER_KEY_IDS[] = {\"kc1\", \"kc2\", \"kc3\", \"kc4\", \"kc5\", \"kc6\"};\n+const char FOOTER_MASTER_KEY_ID[] = \"kf\";\n+\n+std::map<std::string, std::string> BuildKeyMap(const char* const* column_ids,\n+                                               const char* const* column_keys,\n+                                               const char* footer_id,\n+                                               const char* footer_key) {\n+  std::map<std::string, std::string> key_map;\n+  // add column keys\n+  for (int i = 0; i < 6; i++) {\n+    key_map.insert({column_ids[i], column_keys[i]});\n+  }\n+  // add footer key\n+  key_map.insert({footer_id, footer_key});\n+\n+  return key_map;\n+}\n+\n+std::string BuildColumnKeyMapping() {\n+  std::ostringstream stream;\n+  stream << COLUMN_MASTER_KEY_IDS[0] << \":\" << DOUBLE_FIELD_NAME << \";\"\n+         << COLUMN_MASTER_KEY_IDS[1] << \":\" << FLOAT_FIELD_NAME << \";\"\n+         << COLUMN_MASTER_KEY_IDS[2] << \":\" << BOOLEAN_FIELD_NAME << \";\"\n+         << COLUMN_MASTER_KEY_IDS[3] << \":\" << INT32_FIELD_NAME << \";\"\n+         << COLUMN_MASTER_KEY_IDS[4] << \":\" << BA_FIELD_NAME << \";\"\n+         << COLUMN_MASTER_KEY_IDS[5] << \":\" << FLBA_FIELD_NAME << \";\";\n+  return stream.str();\n+}\n+\n+class TestEncrytionKeyManagement : public ::testing::Test {\n+ public:\n+  void SetUp() {\n+    key_list_ = BuildKeyMap(COLUMN_MASTER_KEY_IDS, COLUMN_MASTER_KEYS,\n+                            FOOTER_MASTER_KEY_ID, FOOTER_MASTER_KEY);\n+    column_key_mapping_ = BuildColumnKeyMapping();\n+\n+    kms_connection_config_.refreshable_key_access_token =\n+        std::make_shared<KeyAccessToken>();\n+  }\n+\n+ protected:\n+  FileEncryptor encryptor_;\n+  FileDecryptor decryptor_;\n+\n+  std::map<std::string, std::string> key_list_;\n+  std::string column_key_mapping_;\n+  KmsConnectionConfig kms_connection_config_;\n+\n+  void SetupCryptoFactory(PropertiesDrivenCryptoFactory& crypto_factory,\n+                          bool wrap_locally) {\n+    KeyToolkit::RemoveCacheEntriesForAllTokens();\n+    std::shared_ptr<KmsClientFactory> kms_client_factory =\n+        std::make_shared<InMemoryKmsClientFactory>(wrap_locally, key_list_);\n+    crypto_factory.kms_client_factory(kms_client_factory);\n+  }\n+\n+  std::string GetFileName(bool double_wrapping, bool wrap_locally, int encryption_no) {\n+    std::string file_name;\n+    file_name += double_wrapping ? \"double_wrapping\" : \"no_double_wrapping\";\n+    file_name += wrap_locally ? \"-wrap_locally\" : \"-no_wrap_locally\";\n+    switch (encryption_no) {\n+      case 0:\n+        file_name += \"-encrypt_columns_and_footer_diff_keys\";\n+        break;\n+      case 1:\n+        file_name += \"-encrypt_columns_not_footer\";\n+        break;\n+      case 2:\n+        file_name += \"-encrypt_columns_and_footer_same_keys\";\n+        break;\n+      case 3:\n+        file_name += \"-encrypt_columns_and_footer_ctr\";\n+        break;\n+      default:  // case 4:\n+        file_name += \"-no_encrypt\";\n+        break;\n+    }\n+    file_name += encryption_no == 4 ? \".parquet\" : \".parquet.encrypted\";\n+    return file_name;\n+  }\n+\n+  std::vector<std::shared_ptr<EncryptionConfiguration>> GetEncryptionConfigurations(\n+      bool double_wrapping, bool wrap_locally) {\n+    std::vector<std::shared_ptr<EncryptionConfiguration>> configs;\n+    std::vector<EncryptionConfiguration::Builder*> config_builders;\n+\n+    // encrypt some columns and footer, different keys\n+    EncryptionConfiguration::Builder builder1(FOOTER_MASTER_KEY_ID);\n+    builder1.column_keys(column_key_mapping_);\n+    config_builders.push_back(&builder1);\n+\n+    // encrypt columns, plaintext footer, different keys\n+    EncryptionConfiguration::Builder builder2(FOOTER_MASTER_KEY_ID);\n+    builder2.column_keys(column_key_mapping_)->plaintext_footer(true);\n+    config_builders.push_back(&builder2);\n+\n+    // encrypt some columns and footer, same key\n+    EncryptionConfiguration::Builder builder3(FOOTER_MASTER_KEY_ID);\n+    builder3.uniform_encryption();\n+    config_builders.push_back(&builder3);\n+\n+    // Encrypt two columns and the footer, with different keys.\n+    // Use AES_GCM_CTR_V1 algorithm.\n+    EncryptionConfiguration::Builder builder4(FOOTER_MASTER_KEY_ID);\n+    builder4.column_keys(column_key_mapping_)\n+        ->encryption_algorithm(ParquetCipher::AES_GCM_CTR_V1);\n+    config_builders.push_back(&builder4);\n+\n+    for (EncryptionConfiguration::Builder* builder : config_builders) {\n+      auto config =\n+          builder->double_wrapping(double_wrapping)->wrap_locally(wrap_locally)->build();\n+      configs.push_back(config);\n+    }\n+\n+    // non encryption\n+    configs.push_back(NULL);\n+\n+    return configs;\n+  }\n+\n+  std::shared_ptr<DecryptionConfiguration> GetDecryptionConfiguration(bool wrap_locally) {\n+    DecryptionConfiguration::Builder builder;\n+    return builder.wrap_locally(wrap_locally)->build();\n+  }\n+\n+  void WriteEncryptedParquetFiles() {\n+    for (int i = 0; i < 2; i++) {\n+      bool wrap_locally = (i == 0);\n+\n+      PropertiesDrivenCryptoFactory crypto_factory;\n+      SetupCryptoFactory(crypto_factory, wrap_locally);\n+\n+      for (int j = 0; j < 2; j++) {\n+        bool double_wrapping = (j == 0);\n+        auto encryption_configs =\n+            this->GetEncryptionConfigurations(double_wrapping, wrap_locally);\n+        for (size_t encryption_no = 0; encryption_no < encryption_configs.size();\n+             encryption_no++) {\n+          std::string file_name =\n+              GetFileName(double_wrapping, wrap_locally, encryption_no);\n+          std::cout << \"Writing file: \" << file_name << std::endl;\n+\n+          auto encryption_config = encryption_configs[encryption_no];\n+          std::shared_ptr<FileEncryptionProperties> file_encryption_properties =\n+              crypto_factory.GetFileEncryptionProperties(kms_connection_config_,\n+                                                         encryption_config);\n+\n+          std::string file = data_file(file_name.c_str());\n+          encryptor_.EncryptFile(file, file_encryption_properties);\n+        }\n+      }\n+    }\n+  }\n+\n+  void ReadEncryptedParquetFiles() {\n+    for (int i = 0; i < 2; i++) {\n+      bool wrap_locally = (i == 0);\n+\n+      PropertiesDrivenCryptoFactory crypto_factory;\n+      SetupCryptoFactory(crypto_factory, wrap_locally);\n+\n+      auto decryption_config = this->GetDecryptionConfiguration(wrap_locally);\n+      for (int j = 0; j < 2; j++) {\n+        bool double_wrapping = (j == 0);\n+        for (size_t encryption_no = 0; encryption_no < 5; encryption_no++) {\n+          std::string file_name =\n+              GetFileName(double_wrapping, wrap_locally, encryption_no);\n+          std::cout << \"Reading file: \" << file_name << std::endl;\n+\n+          std::shared_ptr<FileDecryptionProperties> file_decryption_properties =\n+              crypto_factory.GetFileDecryptionProperties(kms_connection_config_,\n+                                                         decryption_config);\n+\n+          std::string file = data_file(file_name.c_str());\n+          decryptor_.DecryptFile(file, file_decryption_properties);\n+        }\n+      }\n+    }\n+  }\n+};\n+\n+TEST_F(TestEncrytionKeyManagement, TestWriteReadEncryptedParquetFiles) {\n\nReview comment:\n       It would be better to structure this as a parameterized test or have a separate test case for each type of encryption.  If there is also a need to verify different types of files can be written together (shared state) this should be its own explicit test.\n\n##########\nFile path: cpp/src/parquet/file_key_material_store.h\n##########\n@@ -0,0 +1,51 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\") = 0; you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <set>\n+#include <string>\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class FileKeyMaterialStore {\n+ public:\n+  // Initializes key material store for a parquet file.\n+  virtual void Initialize(const std::string& parquet_file_path, bool temp_store) = 0;\n\nReview comment:\n       nit: places where `const std::string&` are used as parameters should probably  use arrow::util::string_view instead.\n\n##########\nFile path: cpp/src/parquet/file_key_material_store.h\n##########\n@@ -0,0 +1,51 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\") = 0; you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <set>\n+#include <string>\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class FileKeyMaterialStore {\n+ public:\n+  // Initializes key material store for a parquet file.\n+  virtual void Initialize(const std::string& parquet_file_path, bool temp_store) = 0;\n+\n+  virtual void AddKeyMaterial(const std::string& key_id_in_file,\n+                              const std::string& key_material) = 0;\n+\n+  // After key material was added for all keys in the given Parquet file,\n+  // save material in persistent store.\n+  virtual void SaveMaterial() = 0;\n+\n+  virtual std::string GetKeyMaterial(const std::string& key_id_in_file) = 0;\n+\n+  // return set of all key IDs in this store (for the given Parquet file)\n\nReview comment:\n       ```suggestion\r\n     /// Returns a set of all key IDs in this store (for the given Parquet file).\r\n   ```\n\n##########\nFile path: cpp/src/parquet/kms_client.h\n##########\n@@ -0,0 +1,81 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <string>\n+#include <unordered_map>\n+#include <vector>\n+\n+#include \"parquet/exception.h\"\n+#include \"parquet/platform.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class PARQUET_EXPORT KeyAccessToken {\n+ public:\n+  KeyAccessToken() = default;\n+\n+  explicit KeyAccessToken(const std::string value) : value_(value) {}\n+\n+  void Refresh(const std::string& new_value) { value_ = new_value; }\n+\n+  const std::string& value() const { return value_; }\n+\n+  void SetDefaultIfEmpty();\n+\n+ private:\n+  std::string value_;\n+};\n+\n+struct PARQUET_EXPORT KmsConnectionConfig {\n+  std::string kms_instance_id;\n+  std::string kms_instance_url;\n+  std::shared_ptr<KeyAccessToken> refreshable_key_access_token;\n+  std::unordered_map<std::string, std::string> custom_kms_conf;\n+\n+  const std::string& key_access_token() const {\n+    if (refreshable_key_access_token == NULL ||\n+        refreshable_key_access_token->value().empty()) {\n+      throw ParquetException(\"key access token is not set!\");\n+    }\n+    return refreshable_key_access_token->value();\n+  }\n+\n+  void SetDefaultIfEmpty();\n+};\n+\n+class PARQUET_EXPORT KmsClient {\n+ public:\n+  static constexpr char KMS_INSTANCE_ID_DEFAULT[] = \"DEFAULT\";\n+  static constexpr char KMS_INSTANCE_URL_DEFAULT[] = \"DEFAULT\";\n+  static constexpr char KEY_ACCESS_TOKEN_DEFAULT[] = \"DEFAULT\";\n+\n+  // Wraps a key - encrypts it with the master key, encodes the result\n+  // and potentially adds a KMS-specific metadata.\n+  virtual std::string WrapKey(const std::string& key_bytes,\n+                              const std::string& master_key_identifier) = 0;\n\nReview comment:\n       It might be useful to wrap master_key_identifier in a struct, to make it clear that is is an ID and not the actual key.\n\n##########\nFile path: cpp/src/parquet/file_key_material_store.h\n##########\n@@ -0,0 +1,51 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\") = 0; you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <set>\n+#include <string>\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class FileKeyMaterialStore {\n+ public:\n+  // Initializes key material store for a parquet file.\n+  virtual void Initialize(const std::string& parquet_file_path, bool temp_store) = 0;\n+\n+  virtual void AddKeyMaterial(const std::string& key_id_in_file,\n+                              const std::string& key_material) = 0;\n+\n+  // After key material was added for all keys in the given Parquet file,\n+  // save material in persistent store.\n+  virtual void SaveMaterial() = 0;\n+\n+  virtual std::string GetKeyMaterial(const std::string& key_id_in_file) = 0;\n+\n+  // return set of all key IDs in this store (for the given Parquet file)\n+  virtual std::set<std::string> GetKeyIdSet() = 0;\n\nReview comment:\n       do you want set or [unordered_set](https://en.cppreference.com/w/cpp/container/unordered_set)  same question where map is used.\n\n##########\nFile path: cpp/src/parquet/file_key_wrapper.h\n##########\n@@ -0,0 +1,68 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <map>\n+#include <memory>\n+#include <string>\n+\n+#include \"parquet/file_key_material_store.h\"\n+#include \"parquet/key_encryption_key.h\"\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/kms_client_factory.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class FileKeyWrapper {\n+ public:\n+  static constexpr int KEK_LENGTH = 16;\n+  static constexpr int KEK_ID_LENGTH = 16;\n+\n+  static constexpr int RND_MAX_BYTES = 32;\n+\n+  FileKeyWrapper(std::shared_ptr<KmsClientFactory> kms_client_factory,\n\nReview comment:\n       docs please.\n\n##########\nFile path: cpp/src/parquet/file_key_unwrapper.cc\n##########\n@@ -0,0 +1,107 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <iostream>\n+\n+#include \"parquet/file_key_unwrapper.h\"\n+#include \"parquet/key_metadata.h\"\n+#include \"parquet/key_toolkit.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+FileKeyUnwrapper::FileKeyUnwrapper(std::shared_ptr<KmsClientFactory> kms_client_factory,\n+                                   const KmsConnectionConfig& kms_connection_config,\n+                                   uint64_t cache_lifetime, bool is_wrap_locally)\n\nReview comment:\n       its not really clear what this value represents [duration](https://en.cppreference.com/w/cpp/chrono/duration) might be something to consider here.  \r\n   \r\n   If Duration isn't used, use int64_t and spell out the units in the variable name.\n\n##########\nFile path: cpp/src/parquet/file_key_material_store.h\n##########\n@@ -0,0 +1,51 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\") = 0; you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <set>\n+#include <string>\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class FileKeyMaterialStore {\n+ public:\n+  // Initializes key material store for a parquet file.\n+  virtual void Initialize(const std::string& parquet_file_path, bool temp_store) = 0;\n\nReview comment:\n       Also this seems to imply that the MaterialStore isn't thread-safe.  Would a better pattern to have this be a factory method that returns something a like a:\r\n   ```\r\n   FileKeyMaterialStore?\r\n   ```\n\n##########\nFile path: cpp/src/parquet/file_key_unwrapper.h\n##########\n@@ -0,0 +1,65 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"parquet/encryption.h\"\n+#include \"parquet/key_material.h\"\n+#include \"parquet/key_toolkit.h\"\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/kms_client_factory.h\"\n+#include \"parquet/platform.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class PARQUET_EXPORT FileKeyUnwrapper : public DecryptionKeyRetriever {\n+ public:\n+  FileKeyUnwrapper(std::shared_ptr<KmsClientFactory> kms_client_factory,\n\nReview comment:\n       is there a reason to use shared_ptr here?  Or would unique_ptr be more appropriate?\n\n##########\nFile path: cpp/src/parquet/file_key_unwrapper.h\n##########\n@@ -0,0 +1,65 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"parquet/encryption.h\"\n+#include \"parquet/key_material.h\"\n+#include \"parquet/key_toolkit.h\"\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/kms_client_factory.h\"\n+#include \"parquet/platform.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class PARQUET_EXPORT FileKeyUnwrapper : public DecryptionKeyRetriever {\n+ public:\n+  FileKeyUnwrapper(std::shared_ptr<KmsClientFactory> kms_client_factory,\n+                   const KmsConnectionConfig& kms_connection_config,\n+                   uint64_t cache_lifetime, bool is_wrap_locally);\n+\n+  std::string GetKey(const std::string& key_metadata) override;\n+\n+ private:\n+  class KeyWithMasterID {\n+   public:\n+    KeyWithMasterID(const std::string& key_bytes, const std::string& master_id)\n+        : key_bytes_(key_bytes), master_id_(master_id) {}\n+\n+    const std::string& data_key() const { return key_bytes_; }\n+    const std::string& master_id() const { return master_id_; }\n+\n+   private:\n+    std::string key_bytes_;\n+    std::string master_id_;\n+  };\n+\n+  KeyWithMasterID GetDEKandMasterID(const KeyMaterial& key_material);\n\nReview comment:\n       I think spelling out DEK here makes sense.  Not everyone will have these acronym on the top of there mind and a google search doesn't list it as a top result.  If the name gets too long I  think dropping andMasterId would be fine (considerer doing it anyways, since it is implied by the return type).\n\n##########\nFile path: cpp/src/parquet/file_key_unwrapper.h\n##########\n@@ -0,0 +1,65 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"parquet/encryption.h\"\n+#include \"parquet/key_material.h\"\n+#include \"parquet/key_toolkit.h\"\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/kms_client_factory.h\"\n+#include \"parquet/platform.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class PARQUET_EXPORT FileKeyUnwrapper : public DecryptionKeyRetriever {\n+ public:\n+  FileKeyUnwrapper(std::shared_ptr<KmsClientFactory> kms_client_factory,\n\nReview comment:\n       please document parameters.\n\n##########\nFile path: cpp/src/parquet/file_key_wrapper.h\n##########\n@@ -0,0 +1,68 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <map>\n+#include <memory>\n+#include <string>\n+\n+#include \"parquet/file_key_material_store.h\"\n+#include \"parquet/key_encryption_key.h\"\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/kms_client_factory.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class FileKeyWrapper {\n+ public:\n+  static constexpr int KEK_LENGTH = 16;\n\nReview comment:\n       preferred style is kKekLength.  I think it would be better to spell out KEK\n\n##########\nFile path: cpp/src/parquet/file_key_wrapper.h\n##########\n@@ -0,0 +1,68 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <map>\n+#include <memory>\n+#include <string>\n+\n+#include \"parquet/file_key_material_store.h\"\n+#include \"parquet/key_encryption_key.h\"\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/kms_client_factory.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class FileKeyWrapper {\n+ public:\n+  static constexpr int KEK_LENGTH = 16;\n+  static constexpr int KEK_ID_LENGTH = 16;\n+\n+  static constexpr int RND_MAX_BYTES = 32;\n+\n+  FileKeyWrapper(std::shared_ptr<KmsClientFactory> kms_client_factory,\n+                 const KmsConnectionConfig& kms_connection_config,\n+                 std::shared_ptr<FileKeyMaterialStore> key_material_store,\n+                 uint64_t cache_entry_lifetime, bool double_wrapping,\n+                 bool is_wrap_locally);\n+\n+  std::string GetEncryptionKeyMetadata(const std::string& data_key,\n+                                       const std::string& master_key_id,\n+                                       bool is_footer_key);\n+\n+  std::string GetEncryptionKeyMetadata(const std::string& data_key,\n+                                       const std::string& master_key_id,\n+                                       bool is_footer_key, std::string key_id_in_file);\n+\n+ private:\n+  KeyEncryptionKey CreateKeyEncryptionKey(const std::string& master_key_id);\n+\n+  // A map of MEK_ID -> KeyEncryptionKey, for the current token\n+  std::map<std::string, KeyEncryptionKey> kek_per_master_key_id_;\n\nReview comment:\n       map versus unordered map?\n\n##########\nFile path: cpp/src/parquet/file_key_unwrapper.h\n##########\n@@ -0,0 +1,65 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"parquet/encryption.h\"\n+#include \"parquet/key_material.h\"\n+#include \"parquet/key_toolkit.h\"\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/kms_client_factory.h\"\n+#include \"parquet/platform.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class PARQUET_EXPORT FileKeyUnwrapper : public DecryptionKeyRetriever {\n\nReview comment:\n       needs documentation.\n\n##########\nFile path: cpp/src/parquet/file_key_wrapper.h\n##########\n@@ -0,0 +1,68 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <map>\n+#include <memory>\n+#include <string>\n+\n+#include \"parquet/file_key_material_store.h\"\n+#include \"parquet/key_encryption_key.h\"\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/kms_client_factory.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class FileKeyWrapper {\n+ public:\n+  static constexpr int KEK_LENGTH = 16;\n+  static constexpr int KEK_ID_LENGTH = 16;\n+\n+  static constexpr int RND_MAX_BYTES = 32;\n+\n+  FileKeyWrapper(std::shared_ptr<KmsClientFactory> kms_client_factory,\n+                 const KmsConnectionConfig& kms_connection_config,\n+                 std::shared_ptr<FileKeyMaterialStore> key_material_store,\n+                 uint64_t cache_entry_lifetime, bool double_wrapping,\n+                 bool is_wrap_locally);\n+\n+  std::string GetEncryptionKeyMetadata(const std::string& data_key,\n\nReview comment:\n       doc please.  also how does this differ then the method below.\n\n##########\nFile path: cpp/src/parquet/file_key_wrapper.h\n##########\n@@ -0,0 +1,68 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <map>\n+#include <memory>\n+#include <string>\n+\n+#include \"parquet/file_key_material_store.h\"\n+#include \"parquet/key_encryption_key.h\"\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/kms_client_factory.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class FileKeyWrapper {\n+ public:\n+  static constexpr int KEK_LENGTH = 16;\n+  static constexpr int KEK_ID_LENGTH = 16;\n+\n+  static constexpr int RND_MAX_BYTES = 32;\n\nReview comment:\n       spell out RND please.\n\n##########\nFile path: cpp/src/parquet/key_material.cc\n##########\n@@ -0,0 +1,161 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <rapidjson/document.h>\n+#include <rapidjson/stringbuffer.h>\n+#include <rapidjson/writer.h>\n+\n+#include \"parquet/exception.h\"\n+#include \"parquet/key_material.h\"\n+#include \"parquet/key_metadata.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+constexpr char KeyMaterial::KEY_MATERIAL_TYPE_FIELD[];\n+constexpr char KeyMaterial::KEY_MATERIAL_TYPE1[];\n+\n+constexpr char KeyMaterial::FOOTER_KEY_ID_IN_FILE[];\n+constexpr char KeyMaterial::COLUMN_KEY_ID_IN_FILE_PREFIX[];\n+\n+constexpr char KeyMaterial::IS_FOOTER_KEY_FIELD[];\n+constexpr char KeyMaterial::DOUBLE_WRAPPING_FIELD[];\n+constexpr char KeyMaterial::KMS_INSTANCE_ID_FIELD[];\n+constexpr char KeyMaterial::KMS_INSTANCE_URL_FIELD[];\n+constexpr char KeyMaterial::MASTER_KEY_ID_FIELD[];\n+constexpr char KeyMaterial::WRAPPED_DEK_FIELD[];\n+constexpr char KeyMaterial::KEK_ID_FIELD[];\n+constexpr char KeyMaterial::WRAPPED_KEK_FIELD[];\n+\n+KeyMaterial::KeyMaterial(bool is_footer_key, const std::string& kms_instance_id,\n+                         const std::string& kms_instance_url,\n+                         const std::string& master_key_id, bool is_double_wrapped,\n+                         const std::string& kek_id,\n+                         const std::string& encoded_wrapped_kek,\n+                         const std::string& encoded_wrapped_dek)\n+    : is_footer_key_(is_footer_key),\n+      kms_instance_id_(kms_instance_id),\n+      kms_instance_url_(kms_instance_url),\n+      master_key_id_(master_key_id),\n+      is_double_wrapped_(is_double_wrapped),\n+      kek_id_(kek_id),\n+      encoded_wrapped_kek_(encoded_wrapped_kek),\n+      encoded_wrapped_dek_(encoded_wrapped_dek) {}\n+\n+KeyMaterial KeyMaterial::Parse(const std::string& key_material_string) {\n+  rapidjson::Document document;\n+  document.Parse(key_material_string.c_str());\n+\n+  if (document.HasParseError() || !document.IsObject()) {\n+    throw ParquetException(\"Failed to parse key metadata \" + key_material_string);\n+  }\n+\n+  // External key material - extract \"key material type\", and make sure it is supported\n+  std::string key_material_type = document[KEY_MATERIAL_TYPE_FIELD].GetString();\n+  if (KEY_MATERIAL_TYPE1 != key_material_type) {\n+    throw ParquetException(\"Wrong key material type: \" + key_material_type + \" vs \" +\n+                           KEY_MATERIAL_TYPE1);\n+  }\n+  // Parse other fields (common to internal and external key material)\n+  return Parse(document);\n+}\n+\n+KeyMaterial KeyMaterial::Parse(const rapidjson::Document& key_material_json) {\n+  // 2. Check if \"key material\" belongs to file footer key\n+  bool is_footer_key = key_material_json[IS_FOOTER_KEY_FIELD].GetBool();\n+  std::string kms_instance_id;\n+  std::string kms_instance_url;\n+  if (is_footer_key) {\n+    // 3.  For footer key, extract KMS Instance ID\n+    kms_instance_id = key_material_json[KMS_INSTANCE_ID_FIELD].GetString();\n\nReview comment:\n       i haven't used rapidjson much, what happens if this field doesn't exist or it is not a string type?\n\n##########\nFile path: cpp/src/parquet/file_key_unwrapper.h\n##########\n@@ -0,0 +1,65 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"parquet/encryption.h\"\n+#include \"parquet/key_material.h\"\n+#include \"parquet/key_toolkit.h\"\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/kms_client_factory.h\"\n+#include \"parquet/platform.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class PARQUET_EXPORT FileKeyUnwrapper : public DecryptionKeyRetriever {\n+ public:\n+  FileKeyUnwrapper(std::shared_ptr<KmsClientFactory> kms_client_factory,\n+                   const KmsConnectionConfig& kms_connection_config,\n+                   uint64_t cache_lifetime, bool is_wrap_locally);\n+\n+  std::string GetKey(const std::string& key_metadata) override;\n+\n+ private:\n+  class KeyWithMasterID {\n+   public:\n+    KeyWithMasterID(const std::string& key_bytes, const std::string& master_id)\n+        : key_bytes_(key_bytes), master_id_(master_id) {}\n+\n+    const std::string& data_key() const { return key_bytes_; }\n+    const std::string& master_id() const { return master_id_; }\n+\n+   private:\n+    std::string key_bytes_;\n+    std::string master_id_;\n+  };\n+\n+  KeyWithMasterID GetDEKandMasterID(const KeyMaterial& key_material);\n+  std::shared_ptr<KmsClient> GetKmsClientFromConfigOrKeyMaterial(\n+      const KeyMaterial& key_material);\n+\n+  // A map of KEK_ID -> KEK bytes, for the current token\n+  std::map<std::string, std::string> kek_per_kek_id_;\n\nReview comment:\n       unordered_map? \n\n##########\nFile path: cpp/src/parquet/file_key_unwrapper.h\n##########\n@@ -0,0 +1,65 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"parquet/encryption.h\"\n+#include \"parquet/key_material.h\"\n+#include \"parquet/key_toolkit.h\"\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/kms_client_factory.h\"\n+#include \"parquet/platform.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class PARQUET_EXPORT FileKeyUnwrapper : public DecryptionKeyRetriever {\n+ public:\n+  FileKeyUnwrapper(std::shared_ptr<KmsClientFactory> kms_client_factory,\n+                   const KmsConnectionConfig& kms_connection_config,\n+                   uint64_t cache_lifetime, bool is_wrap_locally);\n+\n+  std::string GetKey(const std::string& key_metadata) override;\n+\n+ private:\n+  class KeyWithMasterID {\n+   public:\n+    KeyWithMasterID(const std::string& key_bytes, const std::string& master_id)\n+        : key_bytes_(key_bytes), master_id_(master_id) {}\n+\n+    const std::string& data_key() const { return key_bytes_; }\n\nReview comment:\n       given this is a private class is there a reason to not use a struct and to make key_bytes and master_id constant?\n\n##########\nFile path: cpp/src/parquet/in_memory_kms.h\n##########\n@@ -0,0 +1,70 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"arrow/util/base64.h\"\n+\n+#include \"parquet/key_toolkit.h\"\n+#include \"parquet/kms_client_factory.h\"\n+#include \"parquet/platform.h\"\n+#include \"parquet/remote_kms_client.h\"\n+#include \"parquet/string_util.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+// This is a mock class, built for testing only. Don't use it as an example of KmsClient\n\nReview comment:\n       maybe name the file test_in_memory_kms?  and the class TestOnlyInmemoryKms?\n\n##########\nFile path: cpp/src/parquet/file_key_wrapper.h\n##########\n@@ -0,0 +1,68 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <map>\n+#include <memory>\n+#include <string>\n+\n+#include \"parquet/file_key_material_store.h\"\n+#include \"parquet/key_encryption_key.h\"\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/kms_client_factory.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class FileKeyWrapper {\n+ public:\n+  static constexpr int KEK_LENGTH = 16;\n+  static constexpr int KEK_ID_LENGTH = 16;\n+\n+  static constexpr int RND_MAX_BYTES = 32;\n+\n+  FileKeyWrapper(std::shared_ptr<KmsClientFactory> kms_client_factory,\n+                 const KmsConnectionConfig& kms_connection_config,\n+                 std::shared_ptr<FileKeyMaterialStore> key_material_store,\n+                 uint64_t cache_entry_lifetime, bool double_wrapping,\n+                 bool is_wrap_locally);\n+\n+  std::string GetEncryptionKeyMetadata(const std::string& data_key,\n\nReview comment:\n       it isn't clear what the contents of string is.  Should this be wrapped in a struct or have an alias name to better communicate what is returned?\n\n##########\nFile path: cpp/src/parquet/file_key_wrapper.h\n##########\n@@ -0,0 +1,68 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <map>\n+#include <memory>\n+#include <string>\n+\n+#include \"parquet/file_key_material_store.h\"\n+#include \"parquet/key_encryption_key.h\"\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/kms_client_factory.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class FileKeyWrapper {\n+ public:\n+  static constexpr int KEK_LENGTH = 16;\n+  static constexpr int KEK_ID_LENGTH = 16;\n+\n+  static constexpr int RND_MAX_BYTES = 32;\n+\n+  FileKeyWrapper(std::shared_ptr<KmsClientFactory> kms_client_factory,\n+                 const KmsConnectionConfig& kms_connection_config,\n+                 std::shared_ptr<FileKeyMaterialStore> key_material_store,\n+                 uint64_t cache_entry_lifetime, bool double_wrapping,\n+                 bool is_wrap_locally);\n+\n+  std::string GetEncryptionKeyMetadata(const std::string& data_key,\n+                                       const std::string& master_key_id,\n+                                       bool is_footer_key);\n+\n+  std::string GetEncryptionKeyMetadata(const std::string& data_key,\n+                                       const std::string& master_key_id,\n+                                       bool is_footer_key, std::string key_id_in_file);\n+\n+ private:\n+  KeyEncryptionKey CreateKeyEncryptionKey(const std::string& master_key_id);\n+\n+  // A map of MEK_ID -> KeyEncryptionKey, for the current token\n\nReview comment:\n       spell out MEK.\n\n##########\nFile path: cpp/src/parquet/key_material.cc\n##########\n@@ -0,0 +1,161 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <rapidjson/document.h>\n+#include <rapidjson/stringbuffer.h>\n+#include <rapidjson/writer.h>\n+\n+#include \"parquet/exception.h\"\n+#include \"parquet/key_material.h\"\n+#include \"parquet/key_metadata.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+constexpr char KeyMaterial::KEY_MATERIAL_TYPE_FIELD[];\n+constexpr char KeyMaterial::KEY_MATERIAL_TYPE1[];\n+\n+constexpr char KeyMaterial::FOOTER_KEY_ID_IN_FILE[];\n+constexpr char KeyMaterial::COLUMN_KEY_ID_IN_FILE_PREFIX[];\n+\n+constexpr char KeyMaterial::IS_FOOTER_KEY_FIELD[];\n+constexpr char KeyMaterial::DOUBLE_WRAPPING_FIELD[];\n+constexpr char KeyMaterial::KMS_INSTANCE_ID_FIELD[];\n+constexpr char KeyMaterial::KMS_INSTANCE_URL_FIELD[];\n+constexpr char KeyMaterial::MASTER_KEY_ID_FIELD[];\n+constexpr char KeyMaterial::WRAPPED_DEK_FIELD[];\n+constexpr char KeyMaterial::KEK_ID_FIELD[];\n+constexpr char KeyMaterial::WRAPPED_KEK_FIELD[];\n+\n+KeyMaterial::KeyMaterial(bool is_footer_key, const std::string& kms_instance_id,\n+                         const std::string& kms_instance_url,\n+                         const std::string& master_key_id, bool is_double_wrapped,\n+                         const std::string& kek_id,\n+                         const std::string& encoded_wrapped_kek,\n+                         const std::string& encoded_wrapped_dek)\n+    : is_footer_key_(is_footer_key),\n+      kms_instance_id_(kms_instance_id),\n+      kms_instance_url_(kms_instance_url),\n+      master_key_id_(master_key_id),\n+      is_double_wrapped_(is_double_wrapped),\n+      kek_id_(kek_id),\n+      encoded_wrapped_kek_(encoded_wrapped_kek),\n+      encoded_wrapped_dek_(encoded_wrapped_dek) {}\n+\n+KeyMaterial KeyMaterial::Parse(const std::string& key_material_string) {\n+  rapidjson::Document document;\n+  document.Parse(key_material_string.c_str());\n+\n+  if (document.HasParseError() || !document.IsObject()) {\n+    throw ParquetException(\"Failed to parse key metadata \" + key_material_string);\n+  }\n+\n+  // External key material - extract \"key material type\", and make sure it is supported\n+  std::string key_material_type = document[KEY_MATERIAL_TYPE_FIELD].GetString();\n+  if (KEY_MATERIAL_TYPE1 != key_material_type) {\n+    throw ParquetException(\"Wrong key material type: \" + key_material_type + \" vs \" +\n+                           KEY_MATERIAL_TYPE1);\n+  }\n+  // Parse other fields (common to internal and external key material)\n+  return Parse(document);\n+}\n+\n+KeyMaterial KeyMaterial::Parse(const rapidjson::Document& key_material_json) {\n+  // 2. Check if \"key material\" belongs to file footer key\n+  bool is_footer_key = key_material_json[IS_FOOTER_KEY_FIELD].GetBool();\n+  std::string kms_instance_id;\n+  std::string kms_instance_url;\n+  if (is_footer_key) {\n+    // 3.  For footer key, extract KMS Instance ID\n+    kms_instance_id = key_material_json[KMS_INSTANCE_ID_FIELD].GetString();\n+    // 4.  For footer key, extract KMS Instance URL\n+    kms_instance_url = key_material_json[KMS_INSTANCE_URL_FIELD].GetString();\n+  }\n+  // 5. Extract master key ID\n+  std::string master_key_id = key_material_json[MASTER_KEY_ID_FIELD].GetString();\n+  // 6. Extract wrapped DEK\n+  std::string encoded_wrapped_dek = key_material_json[WRAPPED_DEK_FIELD].GetString();\n+  std::string kek_id;\n+  std::string encoded_wrapped_kek;\n+  // 7. Check if \"key material\" was generated in double wrapping mode\n+  bool is_double_wrapped = key_material_json[DOUBLE_WRAPPING_FIELD].GetBool();\n+  if (is_double_wrapped) {\n+    // 8. In double wrapping mode, extract KEK ID\n+    kek_id = key_material_json[KEK_ID_FIELD].GetString();\n+    // 9. In double wrapping mode, extract wrapped KEK\n+    encoded_wrapped_kek = key_material_json[WRAPPED_KEK_FIELD].GetString();\n+  }\n+\n+  return KeyMaterial(is_footer_key, kms_instance_id, kms_instance_url, master_key_id,\n+                     is_double_wrapped, kek_id, encoded_wrapped_kek, encoded_wrapped_dek);\n+}\n+\n+std::string KeyMaterial::CreateSerialized(\n+    bool is_footer_key, const std::string& kms_instance_id,\n+    const std::string& kms_instance_url, const std::string& master_key_id,\n+    bool is_double_wrapped, const std::string& kek_id,\n+    const std::string& encoded_wrapped_kek, const std::string& encoded_wrapped_dek,\n+    bool is_internal_storage) {\n+  rapidjson::Document d;\n+  auto& allocator = d.GetAllocator();\n\nReview comment:\n       please spell out types.  Generally auto should only be used if the type is already available on the same line (or very close by).\n\n##########\nFile path: cpp/src/parquet/key_encryption_key.h\n##########\n@@ -0,0 +1,57 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <cstdint>\n+#include <vector>\n+\n+#include \"arrow/util/base64.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class KeyEncryptionKey {\n\nReview comment:\n       docs please.\n\n##########\nFile path: cpp/src/parquet/key_encryption_key.h\n##########\n@@ -0,0 +1,57 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <cstdint>\n+#include <vector>\n+\n+#include \"arrow/util/base64.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class KeyEncryptionKey {\n+ public:\n+  KeyEncryptionKey() = default;\n+\n+  KeyEncryptionKey(const std::string& kek_bytes, const std::string& kek_id,\n+                   const std::string& encoded_wrapped_kek)\n+      : kek_bytes_(kek_bytes),\n+        kek_id_(kek_id),\n+        encoded_wrapped_kek_(encoded_wrapped_kek) {\n+    encoded_kek_id_ = arrow::util::base64_encode(reinterpret_cast<uint8_t*>(&kek_id_[0]),\n\nReview comment:\n       kek_id_.data().\n\n##########\nFile path: cpp/src/parquet/key_material.cc\n##########\n@@ -0,0 +1,161 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <rapidjson/document.h>\n+#include <rapidjson/stringbuffer.h>\n+#include <rapidjson/writer.h>\n+\n+#include \"parquet/exception.h\"\n+#include \"parquet/key_material.h\"\n+#include \"parquet/key_metadata.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+constexpr char KeyMaterial::KEY_MATERIAL_TYPE_FIELD[];\n+constexpr char KeyMaterial::KEY_MATERIAL_TYPE1[];\n+\n+constexpr char KeyMaterial::FOOTER_KEY_ID_IN_FILE[];\n+constexpr char KeyMaterial::COLUMN_KEY_ID_IN_FILE_PREFIX[];\n+\n+constexpr char KeyMaterial::IS_FOOTER_KEY_FIELD[];\n+constexpr char KeyMaterial::DOUBLE_WRAPPING_FIELD[];\n+constexpr char KeyMaterial::KMS_INSTANCE_ID_FIELD[];\n+constexpr char KeyMaterial::KMS_INSTANCE_URL_FIELD[];\n+constexpr char KeyMaterial::MASTER_KEY_ID_FIELD[];\n+constexpr char KeyMaterial::WRAPPED_DEK_FIELD[];\n+constexpr char KeyMaterial::KEK_ID_FIELD[];\n+constexpr char KeyMaterial::WRAPPED_KEK_FIELD[];\n+\n+KeyMaterial::KeyMaterial(bool is_footer_key, const std::string& kms_instance_id,\n+                         const std::string& kms_instance_url,\n+                         const std::string& master_key_id, bool is_double_wrapped,\n+                         const std::string& kek_id,\n+                         const std::string& encoded_wrapped_kek,\n+                         const std::string& encoded_wrapped_dek)\n+    : is_footer_key_(is_footer_key),\n+      kms_instance_id_(kms_instance_id),\n+      kms_instance_url_(kms_instance_url),\n+      master_key_id_(master_key_id),\n+      is_double_wrapped_(is_double_wrapped),\n+      kek_id_(kek_id),\n+      encoded_wrapped_kek_(encoded_wrapped_kek),\n+      encoded_wrapped_dek_(encoded_wrapped_dek) {}\n+\n+KeyMaterial KeyMaterial::Parse(const std::string& key_material_string) {\n+  rapidjson::Document document;\n+  document.Parse(key_material_string.c_str());\n+\n+  if (document.HasParseError() || !document.IsObject()) {\n+    throw ParquetException(\"Failed to parse key metadata \" + key_material_string);\n+  }\n+\n+  // External key material - extract \"key material type\", and make sure it is supported\n+  std::string key_material_type = document[KEY_MATERIAL_TYPE_FIELD].GetString();\n+  if (KEY_MATERIAL_TYPE1 != key_material_type) {\n+    throw ParquetException(\"Wrong key material type: \" + key_material_type + \" vs \" +\n+                           KEY_MATERIAL_TYPE1);\n+  }\n+  // Parse other fields (common to internal and external key material)\n+  return Parse(document);\n+}\n+\n+KeyMaterial KeyMaterial::Parse(const rapidjson::Document& key_material_json) {\n+  // 2. Check if \"key material\" belongs to file footer key\n+  bool is_footer_key = key_material_json[IS_FOOTER_KEY_FIELD].GetBool();\n\nReview comment:\n       what happens if this isn't a boolean field?\n\n##########\nFile path: cpp/src/parquet/file_key_wrapper.h\n##########\n@@ -0,0 +1,68 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <map>\n+#include <memory>\n+#include <string>\n+\n+#include \"parquet/file_key_material_store.h\"\n+#include \"parquet/key_encryption_key.h\"\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/kms_client_factory.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class FileKeyWrapper {\n+ public:\n+  static constexpr int KEK_LENGTH = 16;\n+  static constexpr int KEK_ID_LENGTH = 16;\n+\n+  static constexpr int RND_MAX_BYTES = 32;\n+\n+  FileKeyWrapper(std::shared_ptr<KmsClientFactory> kms_client_factory,\n+                 const KmsConnectionConfig& kms_connection_config,\n+                 std::shared_ptr<FileKeyMaterialStore> key_material_store,\n+                 uint64_t cache_entry_lifetime, bool double_wrapping,\n+                 bool is_wrap_locally);\n+\n+  std::string GetEncryptionKeyMetadata(const std::string& data_key,\n+                                       const std::string& master_key_id,\n+                                       bool is_footer_key);\n+\n+  std::string GetEncryptionKeyMetadata(const std::string& data_key,\n+                                       const std::string& master_key_id,\n+                                       bool is_footer_key, std::string key_id_in_file);\n+\n+ private:\n+  KeyEncryptionKey CreateKeyEncryptionKey(const std::string& master_key_id);\n+\n+  // A map of MEK_ID -> KeyEncryptionKey, for the current token\n+  std::map<std::string, KeyEncryptionKey> kek_per_master_key_id_;\n+\n+  std::shared_ptr<KmsClient> kms_client_;\n\nReview comment:\n       i'd guess at least a few of these should be const?\n\n##########\nFile path: cpp/src/parquet/key_material.h\n##########\n@@ -0,0 +1,120 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <map>\n+#include <string>\n+\n+#include <rapidjson/document.h>\n+\n+namespace parquet {\n+namespace encryption {\n+\n+// KeyMaterial class represents the \"key material\", keeping the information that allows\n+// readers to recover an encryption key (see description of the KeyMetadata class). The\n+// keytools package (PARQUET-1373) implements the \"envelope encryption\" pattern, in a\n+// \"single wrapping\" or \"double wrapping\" mode. In the single wrapping mode, the key\n+// material is generated by encrypting the \"data encryption key\" (DEK) by a \"master key\".\n+// In the double wrapping mode, the key material is generated by encrypting the DEK by a\n+// \"key encryption key\" (KEK), that in turn is encrypted by a \"master key\".\n+//\n+// Key material is kept in a flat json object, with the following fields:\n+// 1. \"keyMaterialType\" - a String, with the type of  key material. In the current\n+// version, only one value is allowed - \"PKMT1\" (stands\n+//     for \"parquet key management tools, version 1\"). For external key material storage,\n+//     this field is written in both \"key metadata\" and \"key material\" jsons. For internal\n+//     key material storage, this field is written only once in the common json.\n+// 2. \"isFooterKey\" - a boolean. If true, means that the material belongs to a file footer\n+// key, and keeps additional information (such as\n+//     KMS instance ID and URL). If false, means that the material belongs to a column\n+//     key.\n+// 3. \"kmsInstanceID\" - a String, with the KMS Instance ID. Written only in footer key\n+// material.\n+// 4. \"kmsInstanceURL\" - a String, with the KMS Instance URL. Written only in footer key\n+// material.\n+// 5. \"masterKeyID\" - a String, with the ID of the master key used to generate the\n+// material.\n+// 6. \"wrappedDEK\" - a String, with the wrapped DEK (base64 encoding).\n+// 7. \"doubleWrapping\" - a boolean. If true, means that the material was generated in\n+// double wrapping mode.\n+//     If false - in single wrapping mode.\n+// 8. \"keyEncryptionKeyID\" - a String, with the ID of the KEK used to generate the\n+// material. Written only in double wrapping mode.\n+// 9. \"wrappedKEK\" - a String, with the wrapped KEK (base64 encoding). Written only in\n+// double wrapping mode.\n+class KeyMaterial {\n+ public:\n+  static constexpr char KEY_MATERIAL_TYPE_FIELD[] = \"keyMaterialType\";\n\nReview comment:\n       kKeyMaterialTypeField\n\n##########\nFile path: cpp/src/parquet/file_key_wrapper.h\n##########\n@@ -0,0 +1,68 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <map>\n+#include <memory>\n+#include <string>\n+\n+#include \"parquet/file_key_material_store.h\"\n+#include \"parquet/key_encryption_key.h\"\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/kms_client_factory.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class FileKeyWrapper {\n+ public:\n+  static constexpr int KEK_LENGTH = 16;\n+  static constexpr int KEK_ID_LENGTH = 16;\n+\n+  static constexpr int RND_MAX_BYTES = 32;\n+\n+  FileKeyWrapper(std::shared_ptr<KmsClientFactory> kms_client_factory,\n+                 const KmsConnectionConfig& kms_connection_config,\n+                 std::shared_ptr<FileKeyMaterialStore> key_material_store,\n+                 uint64_t cache_entry_lifetime, bool double_wrapping,\n+                 bool is_wrap_locally);\n+\n+  std::string GetEncryptionKeyMetadata(const std::string& data_key,\n+                                       const std::string& master_key_id,\n+                                       bool is_footer_key);\n+\n+  std::string GetEncryptionKeyMetadata(const std::string& data_key,\n+                                       const std::string& master_key_id,\n+                                       bool is_footer_key, std::string key_id_in_file);\n+\n+ private:\n+  KeyEncryptionKey CreateKeyEncryptionKey(const std::string& master_key_id);\n+\n+  // A map of MEK_ID -> KeyEncryptionKey, for the current token\n+  std::map<std::string, KeyEncryptionKey> kek_per_master_key_id_;\n+\n+  std::shared_ptr<KmsClient> kms_client_;\n+  KmsConnectionConfig kms_connection_config_;\n+  std::shared_ptr<FileKeyMaterialStore> key_material_store_;\n+  uint64_t cache_entry_lifetime_;\n+  bool double_wrapping_;\n+  uint16_t key_counter_;\n\nReview comment:\n       generally signed types are preferred even if the values can't logically be negative.  why is this limited to 65K values?\n\n##########\nFile path: cpp/src/parquet/key_toolkit.h\n##########\n@@ -0,0 +1,123 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"parquet/key_encryption_key.h\"\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/kms_client_factory.h\"\n+#include \"parquet/platform.h\"\n+#include \"parquet/two_level_cache_with_expiration.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class KeyWithMasterID {\n\nReview comment:\n       document please.  Does this need to be exported?\n\n##########\nFile path: cpp/src/parquet/key_material.cc\n##########\n@@ -0,0 +1,161 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <rapidjson/document.h>\n+#include <rapidjson/stringbuffer.h>\n+#include <rapidjson/writer.h>\n+\n+#include \"parquet/exception.h\"\n+#include \"parquet/key_material.h\"\n+#include \"parquet/key_metadata.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+constexpr char KeyMaterial::KEY_MATERIAL_TYPE_FIELD[];\n+constexpr char KeyMaterial::KEY_MATERIAL_TYPE1[];\n+\n+constexpr char KeyMaterial::FOOTER_KEY_ID_IN_FILE[];\n+constexpr char KeyMaterial::COLUMN_KEY_ID_IN_FILE_PREFIX[];\n+\n+constexpr char KeyMaterial::IS_FOOTER_KEY_FIELD[];\n+constexpr char KeyMaterial::DOUBLE_WRAPPING_FIELD[];\n+constexpr char KeyMaterial::KMS_INSTANCE_ID_FIELD[];\n+constexpr char KeyMaterial::KMS_INSTANCE_URL_FIELD[];\n+constexpr char KeyMaterial::MASTER_KEY_ID_FIELD[];\n+constexpr char KeyMaterial::WRAPPED_DEK_FIELD[];\n+constexpr char KeyMaterial::KEK_ID_FIELD[];\n+constexpr char KeyMaterial::WRAPPED_KEK_FIELD[];\n+\n+KeyMaterial::KeyMaterial(bool is_footer_key, const std::string& kms_instance_id,\n+                         const std::string& kms_instance_url,\n+                         const std::string& master_key_id, bool is_double_wrapped,\n+                         const std::string& kek_id,\n+                         const std::string& encoded_wrapped_kek,\n+                         const std::string& encoded_wrapped_dek)\n+    : is_footer_key_(is_footer_key),\n+      kms_instance_id_(kms_instance_id),\n+      kms_instance_url_(kms_instance_url),\n+      master_key_id_(master_key_id),\n+      is_double_wrapped_(is_double_wrapped),\n+      kek_id_(kek_id),\n+      encoded_wrapped_kek_(encoded_wrapped_kek),\n+      encoded_wrapped_dek_(encoded_wrapped_dek) {}\n+\n+KeyMaterial KeyMaterial::Parse(const std::string& key_material_string) {\n+  rapidjson::Document document;\n+  document.Parse(key_material_string.c_str());\n+\n+  if (document.HasParseError() || !document.IsObject()) {\n+    throw ParquetException(\"Failed to parse key metadata \" + key_material_string);\n+  }\n+\n+  // External key material - extract \"key material type\", and make sure it is supported\n+  std::string key_material_type = document[KEY_MATERIAL_TYPE_FIELD].GetString();\n+  if (KEY_MATERIAL_TYPE1 != key_material_type) {\n+    throw ParquetException(\"Wrong key material type: \" + key_material_type + \" vs \" +\n+                           KEY_MATERIAL_TYPE1);\n+  }\n+  // Parse other fields (common to internal and external key material)\n+  return Parse(document);\n+}\n+\n+KeyMaterial KeyMaterial::Parse(const rapidjson::Document& key_material_json) {\n+  // 2. Check if \"key material\" belongs to file footer key\n+  bool is_footer_key = key_material_json[IS_FOOTER_KEY_FIELD].GetBool();\n+  std::string kms_instance_id;\n+  std::string kms_instance_url;\n+  if (is_footer_key) {\n+    // 3.  For footer key, extract KMS Instance ID\n+    kms_instance_id = key_material_json[KMS_INSTANCE_ID_FIELD].GetString();\n+    // 4.  For footer key, extract KMS Instance URL\n+    kms_instance_url = key_material_json[KMS_INSTANCE_URL_FIELD].GetString();\n+  }\n+  // 5. Extract master key ID\n+  std::string master_key_id = key_material_json[MASTER_KEY_ID_FIELD].GetString();\n+  // 6. Extract wrapped DEK\n+  std::string encoded_wrapped_dek = key_material_json[WRAPPED_DEK_FIELD].GetString();\n+  std::string kek_id;\n+  std::string encoded_wrapped_kek;\n+  // 7. Check if \"key material\" was generated in double wrapping mode\n+  bool is_double_wrapped = key_material_json[DOUBLE_WRAPPING_FIELD].GetBool();\n+  if (is_double_wrapped) {\n+    // 8. In double wrapping mode, extract KEK ID\n+    kek_id = key_material_json[KEK_ID_FIELD].GetString();\n+    // 9. In double wrapping mode, extract wrapped KEK\n+    encoded_wrapped_kek = key_material_json[WRAPPED_KEK_FIELD].GetString();\n+  }\n+\n+  return KeyMaterial(is_footer_key, kms_instance_id, kms_instance_url, master_key_id,\n+                     is_double_wrapped, kek_id, encoded_wrapped_kek, encoded_wrapped_dek);\n+}\n+\n+std::string KeyMaterial::CreateSerialized(\n+    bool is_footer_key, const std::string& kms_instance_id,\n\nReview comment:\n       this seems very easy to mess up, consider creating a struct to pass through the necessary information. \n\n##########\nFile path: cpp/src/parquet/key_material.h\n##########\n@@ -0,0 +1,120 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <map>\n+#include <string>\n+\n+#include <rapidjson/document.h>\n+\n+namespace parquet {\n+namespace encryption {\n+\n+// KeyMaterial class represents the \"key material\", keeping the information that allows\n+// readers to recover an encryption key (see description of the KeyMetadata class). The\n+// keytools package (PARQUET-1373) implements the \"envelope encryption\" pattern, in a\n+// \"single wrapping\" or \"double wrapping\" mode. In the single wrapping mode, the key\n+// material is generated by encrypting the \"data encryption key\" (DEK) by a \"master key\".\n+// In the double wrapping mode, the key material is generated by encrypting the DEK by a\n+// \"key encryption key\" (KEK), that in turn is encrypted by a \"master key\".\n+//\n+// Key material is kept in a flat json object, with the following fields:\n+// 1. \"keyMaterialType\" - a String, with the type of  key material. In the current\n+// version, only one value is allowed - \"PKMT1\" (stands\n+//     for \"parquet key management tools, version 1\"). For external key material storage,\n+//     this field is written in both \"key metadata\" and \"key material\" jsons. For internal\n+//     key material storage, this field is written only once in the common json.\n+// 2. \"isFooterKey\" - a boolean. If true, means that the material belongs to a file footer\n+// key, and keeps additional information (such as\n+//     KMS instance ID and URL). If false, means that the material belongs to a column\n+//     key.\n+// 3. \"kmsInstanceID\" - a String, with the KMS Instance ID. Written only in footer key\n+// material.\n+// 4. \"kmsInstanceURL\" - a String, with the KMS Instance URL. Written only in footer key\n+// material.\n+// 5. \"masterKeyID\" - a String, with the ID of the master key used to generate the\n+// material.\n+// 6. \"wrappedDEK\" - a String, with the wrapped DEK (base64 encoding).\n+// 7. \"doubleWrapping\" - a boolean. If true, means that the material was generated in\n+// double wrapping mode.\n+//     If false - in single wrapping mode.\n+// 8. \"keyEncryptionKeyID\" - a String, with the ID of the KEK used to generate the\n+// material. Written only in double wrapping mode.\n+// 9. \"wrappedKEK\" - a String, with the wrapped KEK (base64 encoding). Written only in\n+// double wrapping mode.\n+class KeyMaterial {\n+ public:\n+  static constexpr char KEY_MATERIAL_TYPE_FIELD[] = \"keyMaterialType\";\n\nReview comment:\n       you should comment that all these fields are defined in a specification and should never be changed.\n\n##########\nFile path: cpp/src/parquet/key_material.h\n##########\n@@ -0,0 +1,120 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <map>\n+#include <string>\n+\n+#include <rapidjson/document.h>\n+\n+namespace parquet {\n+namespace encryption {\n+\n+// KeyMaterial class represents the \"key material\", keeping the information that allows\n+// readers to recover an encryption key (see description of the KeyMetadata class). The\n+// keytools package (PARQUET-1373) implements the \"envelope encryption\" pattern, in a\n+// \"single wrapping\" or \"double wrapping\" mode. In the single wrapping mode, the key\n+// material is generated by encrypting the \"data encryption key\" (DEK) by a \"master key\".\n+// In the double wrapping mode, the key material is generated by encrypting the DEK by a\n+// \"key encryption key\" (KEK), that in turn is encrypted by a \"master key\".\n+//\n+// Key material is kept in a flat json object, with the following fields:\n+// 1. \"keyMaterialType\" - a String, with the type of  key material. In the current\n+// version, only one value is allowed - \"PKMT1\" (stands\n+//     for \"parquet key management tools, version 1\"). For external key material storage,\n+//     this field is written in both \"key metadata\" and \"key material\" jsons. For internal\n+//     key material storage, this field is written only once in the common json.\n+// 2. \"isFooterKey\" - a boolean. If true, means that the material belongs to a file footer\n+// key, and keeps additional information (such as\n+//     KMS instance ID and URL). If false, means that the material belongs to a column\n+//     key.\n+// 3. \"kmsInstanceID\" - a String, with the KMS Instance ID. Written only in footer key\n+// material.\n+// 4. \"kmsInstanceURL\" - a String, with the KMS Instance URL. Written only in footer key\n+// material.\n+// 5. \"masterKeyID\" - a String, with the ID of the master key used to generate the\n+// material.\n+// 6. \"wrappedDEK\" - a String, with the wrapped DEK (base64 encoding).\n+// 7. \"doubleWrapping\" - a boolean. If true, means that the material was generated in\n+// double wrapping mode.\n+//     If false - in single wrapping mode.\n+// 8. \"keyEncryptionKeyID\" - a String, with the ID of the KEK used to generate the\n+// material. Written only in double wrapping mode.\n+// 9. \"wrappedKEK\" - a String, with the wrapped KEK (base64 encoding). Written only in\n+// double wrapping mode.\n+class KeyMaterial {\n+ public:\n+  static constexpr char KEY_MATERIAL_TYPE_FIELD[] = \"keyMaterialType\";\n+  static constexpr char KEY_MATERIAL_TYPE1[] = \"PKMT1\";\n+\n+  static constexpr char FOOTER_KEY_ID_IN_FILE[] = \"footerKey\";\n+  static constexpr char COLUMN_KEY_ID_IN_FILE_PREFIX[] = \"columnKey\";\n+\n+  static constexpr char IS_FOOTER_KEY_FIELD[] = \"isFooterKey\";\n+  static constexpr char DOUBLE_WRAPPING_FIELD[] = \"doubleWrapping\";\n+  static constexpr char KMS_INSTANCE_ID_FIELD[] = \"kmsInstanceID\";\n+  static constexpr char KMS_INSTANCE_URL_FIELD[] = \"kmsInstanceURL\";\n+  static constexpr char MASTER_KEY_ID_FIELD[] = \"masterKeyID\";\n+  static constexpr char WRAPPED_DEK_FIELD[] = \"wrappedDEK\";\n+  static constexpr char KEK_ID_FIELD[] = \"keyEncryptionKeyID\";\n+  static constexpr char WRAPPED_KEK_FIELD[] = \"wrappedKEK\";\n+\n+ public:\n+  KeyMaterial() = default;\n+\n+  static KeyMaterial Parse(const std::string& key_material_string);\n+\n+  static KeyMaterial Parse(const rapidjson::Document& key_material_json);\n+\n+  static std::string CreateSerialized(bool is_footer_key,\n\nReview comment:\n       What is the use-case for this method?  Can this method be called SerializeToJson?\n\n##########\nFile path: cpp/src/parquet/key_metadata.h\n##########\n@@ -0,0 +1,91 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <string>\n+\n+#include \"parquet/key_material.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+// Parquet encryption specification defines \"key metadata\" as an arbitrary byte array,\n+// generated by file writers for each encryption key, and passed to the low level API for\n+// storage in the file footer . The \"key metadata\" field is made available to file readers\n+// to enable recovery of the key. This simple interface can be utilized for implementation\n\nReview comment:\n       ```suggestion\r\n   // to enable recovery of the key. This  interface can be utilized for implementation\r\n   ```\n\n##########\nFile path: cpp/src/parquet/key_metadata.h\n##########\n@@ -0,0 +1,91 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <string>\n+\n+#include \"parquet/key_material.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+// Parquet encryption specification defines \"key metadata\" as an arbitrary byte array,\n+// generated by file writers for each encryption key, and passed to the low level API for\n+// storage in the file footer . The \"key metadata\" field is made available to file readers\n+// to enable recovery of the key. This simple interface can be utilized for implementation\n+// of any key management scheme.\n+//\n+// The keytools package (PARQUET-1373) implements one approach, of many possible, to key\n+// management and to generation of the \"key metadata\" fields. This approach, based on the\n+// \"envelope encryption\" pattern, allows to work with KMS servers. It keeps the actual\n+// material, required to recover a key, in a \"key material\" object (see the KeyMaterial\n+// class for details).\n\nReview comment:\n       ```suggestion\r\n   // class for details).  This class is implemented to support version 1 of the parquet key management tools specification.\r\n   ```\n\n##########\nFile path: cpp/src/parquet/key_metadata.h\n##########\n@@ -0,0 +1,91 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <string>\n+\n+#include \"parquet/key_material.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+// Parquet encryption specification defines \"key metadata\" as an arbitrary byte array,\n+// generated by file writers for each encryption key, and passed to the low level API for\n+// storage in the file footer . The \"key metadata\" field is made available to file readers\n+// to enable recovery of the key. This simple interface can be utilized for implementation\n+// of any key management scheme.\n+//\n+// The keytools package (PARQUET-1373) implements one approach, of many possible, to key\n+// management and to generation of the \"key metadata\" fields. This approach, based on the\n+// \"envelope encryption\" pattern, allows to work with KMS servers. It keeps the actual\n+// material, required to recover a key, in a \"key material\" object (see the KeyMaterial\n+// class for details).\n+//\n+// KeyMetadata class writes (and reads) the \"key metadata\" field as a flat json object,\n+// with the following fields:\n+// 1. \"keyMaterialType\" - a String, with the type of  key material. In the current\n\nReview comment:\n       reference the version directly please.\n\n##########\nFile path: cpp/src/parquet/key_metadata.h\n##########\n@@ -0,0 +1,91 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <string>\n+\n+#include \"parquet/key_material.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+// Parquet encryption specification defines \"key metadata\" as an arbitrary byte array,\n+// generated by file writers for each encryption key, and passed to the low level API for\n+// storage in the file footer . The \"key metadata\" field is made available to file readers\n+// to enable recovery of the key. This simple interface can be utilized for implementation\n+// of any key management scheme.\n+//\n+// The keytools package (PARQUET-1373) implements one approach, of many possible, to key\n+// management and to generation of the \"key metadata\" fields. This approach, based on the\n+// \"envelope encryption\" pattern, allows to work with KMS servers. It keeps the actual\n+// material, required to recover a key, in a \"key material\" object (see the KeyMaterial\n+// class for details).\n+//\n+// KeyMetadata class writes (and reads) the \"key metadata\" field as a flat json object,\n+// with the following fields:\n+// 1. \"keyMaterialType\" - a String, with the type of  key material. In the current\n+// version, only one value is allowed - \"PKMT1\" (stands\n+//     for \"parquet key management tools, version 1\")\n+// 2. \"internalStorage\" - a boolean. If true, means that \"key material\" is kept inside the\n+// \"key metadata\" field. If false, \"key material\"\n+//     is kept externally (outside Parquet files) - in this case, \"key metadata\" keeps a\n+//     reference to the external \"key material\".\n+// 3. \"keyReference\" - a String, with the reference to the external \"key material\".\n+// Written only if internalStorage is false.\n+//\n+// If internalStorage is true, \"key material\" is a part of \"key metadata\", and the json\n+// keeps additional fields, described in the KeyMaterial class.\n+class KeyMetadata {\n+ public:\n+  static constexpr char KEY_MATERIAL_INTERNAL_STORAGE_FIELD[] = \"internalStorage\";\n+  static constexpr char KEY_REFERENCE_FIELD[] = \"keyReference\";\n+\n+  static KeyMetadata Parse(const std::string& key_metadata_bytes);\n+\n+  static std::string CreateSerializedForExternalMaterial(\n+      const std::string& key_reference);\n+\n+  bool key_material_stored_internally() const { return is_internal_storage_; }\n+\n+  const KeyMaterial& key_material() const {\n+    if (!is_internal_storage_) {\n+      throw ParquetException(\"key material is stored externally.\");\n+    }\n+    return key_material_;\n+  }\n+\n+  const std::string& key_reference() const {\n+    if (is_internal_storage_) {\n+      throw ParquetException(\"key material is stored internally.\");\n+    }\n+    return key_reference_;\n+  }\n+\n+ private:\n+  explicit KeyMetadata(const KeyMaterial& key_material);\n+  explicit KeyMetadata(const std::string& key_reference);\n+\n+  bool is_internal_storage_;\n\nReview comment:\n       a better way of modelling this is with arrow::util::variant.\n\n##########\nFile path: cpp/src/parquet/key_metadata.h\n##########\n@@ -0,0 +1,91 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <string>\n+\n+#include \"parquet/key_material.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+// Parquet encryption specification defines \"key metadata\" as an arbitrary byte array,\n+// generated by file writers for each encryption key, and passed to the low level API for\n+// storage in the file footer . The \"key metadata\" field is made available to file readers\n+// to enable recovery of the key. This simple interface can be utilized for implementation\n+// of any key management scheme.\n+//\n+// The keytools package (PARQUET-1373) implements one approach, of many possible, to key\n+// management and to generation of the \"key metadata\" fields. This approach, based on the\n+// \"envelope encryption\" pattern, allows to work with KMS servers. It keeps the actual\n\nReview comment:\n       ```suggestion\r\n   // \"envelope encryption\" pattern, allows integration with KMS servers. It keeps the actual\r\n   ```\n\n##########\nFile path: cpp/src/parquet/key_metadata.h\n##########\n@@ -0,0 +1,91 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <string>\n+\n+#include \"parquet/key_material.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+// Parquet encryption specification defines \"key metadata\" as an arbitrary byte array,\n+// generated by file writers for each encryption key, and passed to the low level API for\n+// storage in the file footer . The \"key metadata\" field is made available to file readers\n+// to enable recovery of the key. This simple interface can be utilized for implementation\n+// of any key management scheme.\n+//\n+// The keytools package (PARQUET-1373) implements one approach, of many possible, to key\n+// management and to generation of the \"key metadata\" fields. This approach, based on the\n+// \"envelope encryption\" pattern, allows to work with KMS servers. It keeps the actual\n+// material, required to recover a key, in a \"key material\" object (see the KeyMaterial\n+// class for details).\n+//\n+// KeyMetadata class writes (and reads) the \"key metadata\" field as a flat json object,\n+// with the following fields:\n+// 1. \"keyMaterialType\" - a String, with the type of  key material. In the current\n+// version, only one value is allowed - \"PKMT1\" (stands\n+//     for \"parquet key management tools, version 1\")\n+// 2. \"internalStorage\" - a boolean. If true, means that \"key material\" is kept inside the\n+// \"key metadata\" field. If false, \"key material\"\n+//     is kept externally (outside Parquet files) - in this case, \"key metadata\" keeps a\n+//     reference to the external \"key material\".\n+// 3. \"keyReference\" - a String, with the reference to the external \"key material\".\n+// Written only if internalStorage is false.\n+//\n+// If internalStorage is true, \"key material\" is a part of \"key metadata\", and the json\n+// keeps additional fields, described in the KeyMaterial class.\n+class KeyMetadata {\n+ public:\n+  static constexpr char KEY_MATERIAL_INTERNAL_STORAGE_FIELD[] = \"internalStorage\";\n\nReview comment:\n       kKeyMaterialInternalStorageField.\n\n##########\nFile path: cpp/src/parquet/key_toolkit.h\n##########\n@@ -0,0 +1,123 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"parquet/key_encryption_key.h\"\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/kms_client_factory.h\"\n+#include \"parquet/platform.h\"\n+#include \"parquet/two_level_cache_with_expiration.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class KeyWithMasterID {\n+ public:\n+  KeyWithMasterID(const std::string& key_bytes, const std::string& master_id)\n+      : key_bytes_(key_bytes), master_id_(master_id) {}\n+\n+  const std::string& data_key() const { return key_bytes_; }\n+  const std::string& master_id() const { return master_id_; }\n+\n+ private:\n+  std::string key_bytes_;\n+  std::string master_id_;\n+};\n+\n+class PARQUET_EXPORT KeyToolkit {\n\nReview comment:\n       docs please.\n\n##########\nFile path: cpp/src/parquet/kms_client.h\n##########\n@@ -0,0 +1,81 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <string>\n+#include <unordered_map>\n+#include <vector>\n+\n+#include \"parquet/exception.h\"\n+#include \"parquet/platform.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class PARQUET_EXPORT KeyAccessToken {\n\nReview comment:\n       docs please.\n\n##########\nFile path: cpp/src/parquet/kms_client_factory.h\n##########\n@@ -0,0 +1,42 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/platform.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class PARQUET_EXPORT KmsClientFactory {\n+ public:\n+  explicit KmsClientFactory(bool wrap_locally) : wrap_locally_(wrap_locally) {}\n+\n+  KmsClientFactory() : KmsClientFactory(false) {}\n+\n+  virtual ~KmsClientFactory() {}\n+\n+  virtual std::shared_ptr<KmsClient> CreateKmsClient(\n\nReview comment:\n       why a shared client?\n\n##########\nFile path: cpp/src/parquet/key_toolkit.h\n##########\n@@ -0,0 +1,123 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"parquet/key_encryption_key.h\"\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/kms_client_factory.h\"\n+#include \"parquet/platform.h\"\n+#include \"parquet/two_level_cache_with_expiration.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class KeyWithMasterID {\n+ public:\n+  KeyWithMasterID(const std::string& key_bytes, const std::string& master_id)\n+      : key_bytes_(key_bytes), master_id_(master_id) {}\n+\n+  const std::string& data_key() const { return key_bytes_; }\n+  const std::string& master_id() const { return master_id_; }\n+\n+ private:\n+  std::string key_bytes_;\n\nReview comment:\n       const?\n\n##########\nFile path: cpp/src/parquet/key_toolkit.h\n##########\n@@ -0,0 +1,123 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"parquet/key_encryption_key.h\"\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/kms_client_factory.h\"\n+#include \"parquet/platform.h\"\n+#include \"parquet/two_level_cache_with_expiration.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class KeyWithMasterID {\n+ public:\n+  KeyWithMasterID(const std::string& key_bytes, const std::string& master_id)\n+      : key_bytes_(key_bytes), master_id_(master_id) {}\n+\n+  const std::string& data_key() const { return key_bytes_; }\n+  const std::string& master_id() const { return master_id_; }\n+\n+ private:\n+  std::string key_bytes_;\n+  std::string master_id_;\n+};\n+\n+class PARQUET_EXPORT KeyToolkit {\n\nReview comment:\n       The design here isn't super idiomatic as I read it for caches (which generally one might more then one per process?  Could you discuss in more detail why this was chosen.\n\n##########\nFile path: cpp/src/parquet/key_toolkit.h\n##########\n@@ -0,0 +1,123 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"parquet/key_encryption_key.h\"\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/kms_client_factory.h\"\n+#include \"parquet/platform.h\"\n+#include \"parquet/two_level_cache_with_expiration.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class KeyWithMasterID {\n+ public:\n+  KeyWithMasterID(const std::string& key_bytes, const std::string& master_id)\n+      : key_bytes_(key_bytes), master_id_(master_id) {}\n+\n+  const std::string& data_key() const { return key_bytes_; }\n+  const std::string& master_id() const { return master_id_; }\n+\n+ private:\n+  std::string key_bytes_;\n+  std::string master_id_;\n+};\n+\n+class PARQUET_EXPORT KeyToolkit {\n+ public:\n+  class KmsClientCache {\n+   public:\n+    static KmsClientCache& GetInstance() {\n+      static KmsClientCache instance;\n\nReview comment:\n       could you discuss why a singleton is used here?  Is there never a case where two caches could be useful?\n\n##########\nFile path: cpp/src/parquet/key_material.cc\n##########\n@@ -0,0 +1,161 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <rapidjson/document.h>\n+#include <rapidjson/stringbuffer.h>\n+#include <rapidjson/writer.h>\n+\n+#include \"parquet/exception.h\"\n+#include \"parquet/key_material.h\"\n+#include \"parquet/key_metadata.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+constexpr char KeyMaterial::KEY_MATERIAL_TYPE_FIELD[];\n+constexpr char KeyMaterial::KEY_MATERIAL_TYPE1[];\n+\n+constexpr char KeyMaterial::FOOTER_KEY_ID_IN_FILE[];\n+constexpr char KeyMaterial::COLUMN_KEY_ID_IN_FILE_PREFIX[];\n+\n+constexpr char KeyMaterial::IS_FOOTER_KEY_FIELD[];\n+constexpr char KeyMaterial::DOUBLE_WRAPPING_FIELD[];\n+constexpr char KeyMaterial::KMS_INSTANCE_ID_FIELD[];\n+constexpr char KeyMaterial::KMS_INSTANCE_URL_FIELD[];\n+constexpr char KeyMaterial::MASTER_KEY_ID_FIELD[];\n+constexpr char KeyMaterial::WRAPPED_DEK_FIELD[];\n+constexpr char KeyMaterial::KEK_ID_FIELD[];\n+constexpr char KeyMaterial::WRAPPED_KEK_FIELD[];\n+\n+KeyMaterial::KeyMaterial(bool is_footer_key, const std::string& kms_instance_id,\n+                         const std::string& kms_instance_url,\n+                         const std::string& master_key_id, bool is_double_wrapped,\n+                         const std::string& kek_id,\n+                         const std::string& encoded_wrapped_kek,\n+                         const std::string& encoded_wrapped_dek)\n+    : is_footer_key_(is_footer_key),\n+      kms_instance_id_(kms_instance_id),\n+      kms_instance_url_(kms_instance_url),\n+      master_key_id_(master_key_id),\n+      is_double_wrapped_(is_double_wrapped),\n+      kek_id_(kek_id),\n+      encoded_wrapped_kek_(encoded_wrapped_kek),\n+      encoded_wrapped_dek_(encoded_wrapped_dek) {}\n+\n+KeyMaterial KeyMaterial::Parse(const std::string& key_material_string) {\n+  rapidjson::Document document;\n+  document.Parse(key_material_string.c_str());\n\nReview comment:\n       Is the json allowed to be utf-8 encoded?\n\n##########\nFile path: cpp/src/parquet/key_toolkit.h\n##########\n@@ -0,0 +1,123 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"parquet/key_encryption_key.h\"\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/kms_client_factory.h\"\n+#include \"parquet/platform.h\"\n+#include \"parquet/two_level_cache_with_expiration.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class KeyWithMasterID {\n+ public:\n+  KeyWithMasterID(const std::string& key_bytes, const std::string& master_id)\n+      : key_bytes_(key_bytes), master_id_(master_id) {}\n+\n+  const std::string& data_key() const { return key_bytes_; }\n+  const std::string& master_id() const { return master_id_; }\n+\n+ private:\n+  std::string key_bytes_;\n+  std::string master_id_;\n+};\n+\n+class PARQUET_EXPORT KeyToolkit {\n+ public:\n+  class KmsClientCache {\n+   public:\n+    static KmsClientCache& GetInstance() {\n+      static KmsClientCache instance;\n+      return instance;\n+    }\n+    TwoLevelCacheWithExpiration<std::shared_ptr<KmsClient>>& cache() { return cache_; }\n+\n+   private:\n+    TwoLevelCacheWithExpiration<std::shared_ptr<KmsClient>> cache_;\n+  };\n+\n+  class KEKWriteCache {\n\nReview comment:\n       KekWriterCache, but better to spell out KEK.\n\n##########\nFile path: cpp/src/parquet/string_util.h\n##########\n@@ -0,0 +1,29 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <string>\n+#include <vector>\n+\n+namespace parquet {\n+\n+std::vector<std::string> SplitString(const std::string& v, char delim);\n\nReview comment:\n       I would recommend moving this to arrow::util::string, and take arrow::util::string_view as an input.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-24T05:32:13.671+0000",
                    "updated": "2020-08-24T05:32:13.671+0000",
                    "started": "2020-08-24T05:32:13.671+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "473741",
                    "issueId": "13314857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314857/worklog/473743",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #8023:\nURL: https://github.com/apache/arrow/pull/8023#discussion_r475351570\n\n\n\n##########\nFile path: cpp/src/parquet/test_encryption_util.h\n##########\n@@ -65,5 +66,36 @@ inline std::string data_file(const char* file) {\n   return ss.str();\n }\n \n+static constexpr char DOUBLE_FIELD_NAME[] = \"double_field\";\n+static constexpr char FLOAT_FIELD_NAME[] = \"float_field\";\n+static constexpr char BOOLEAN_FIELD_NAME[] = \"boolean_field\";\n+static constexpr char INT32_FIELD_NAME[] = \"int32_field\";\n+static constexpr char INT64_FIELD_NAME[] = \"int64_field\";\n+static constexpr char INT96_FIELD_NAME[] = \"int96_field\";\n+static constexpr char BA_FIELD_NAME[] = \"ba_field\";\n+static constexpr char FLBA_FIELD_NAME[] = \"flba_field\";\n+\n+class FileEncryptor {\n\nReview comment:\n       docs please.\n\n##########\nFile path: cpp/src/parquet/CMakeLists.txt\n##########\n@@ -363,6 +376,12 @@ if(PARQUET_REQUIRE_ENCRYPTION)\n                    encryption_write_configurations_test.cc\n                    encryption_read_configurations_test.cc\n                    encryption_properties_test.cc\n+                   test_encryption_util.cc\n+                   test_util.cc)\n+  add_parquet_test(encryption-key-management-test\n\nReview comment:\n       nit: add blank line\n\n##########\nFile path: cpp/src/parquet/encryption.h\n##########\n@@ -47,15 +47,15 @@ using ColumnPathToEncryptionPropertiesMap =\n \n class PARQUET_EXPORT DecryptionKeyRetriever {\n  public:\n-  virtual std::string GetKey(const std::string& key_metadata) const = 0;\n+  virtual std::string GetKey(const std::string& key_metadata) = 0;\n   virtual ~DecryptionKeyRetriever() {}\n };\n \n /// Simple integer key retriever\n class PARQUET_EXPORT IntegerKeyIdRetriever : public DecryptionKeyRetriever {\n  public:\n   void PutKey(uint32_t key_id, const std::string& key);\n-  std::string GetKey(const std::string& key_metadata) const;\n+  std::string GetKey(const std::string& key_metadata);\n\nReview comment:\n       why this removal?\n\n##########\nFile path: cpp/src/parquet/encryption_internal.h\n##########\n@@ -45,6 +45,9 @@ constexpr int8_t kOffsetIndex = 7;\n /// Performs AES encryption operations with GCM or CTR ciphers.\n class AesEncryptor {\n  public:\n+  /// Can serve one key length only. Possible values: 16, 24, 32 bytes.\n+  explicit AesEncryptor(ParquetCipher::type alg_id, int key_len, bool metadata);\n\nReview comment:\n       why isn't static factory sufficient?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-24T05:43:38.310+0000",
                    "updated": "2020-08-24T05:43:38.310+0000",
                    "started": "2020-08-24T05:43:38.310+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "473743",
                    "issueId": "13314857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314857/worklog/473747",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thamht4190 commented on a change in pull request #8023:\nURL: https://github.com/apache/arrow/pull/8023#discussion_r475368729\n\n\n\n##########\nFile path: cpp/src/parquet/encryption.h\n##########\n@@ -47,15 +47,15 @@ using ColumnPathToEncryptionPropertiesMap =\n \n class PARQUET_EXPORT DecryptionKeyRetriever {\n  public:\n-  virtual std::string GetKey(const std::string& key_metadata) const = 0;\n\nReview comment:\n       @emkornfield because inherited classes (i.e. `FileKeyUnwrapper` class in this pull) may need to modify its members inside this method.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-24T06:29:09.348+0000",
                    "updated": "2020-08-24T06:29:09.348+0000",
                    "started": "2020-08-24T06:29:09.347+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "473747",
                    "issueId": "13314857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314857/worklog/473748",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #8023:\nURL: https://github.com/apache/arrow/pull/8023#discussion_r475376926\n\n\n\n##########\nFile path: cpp/src/parquet/encryption.h\n##########\n@@ -47,15 +47,15 @@ using ColumnPathToEncryptionPropertiesMap =\n \n class PARQUET_EXPORT DecryptionKeyRetriever {\n  public:\n-  virtual std::string GetKey(const std::string& key_metadata) const = 0;\n\nReview comment:\n       would making those members `mutable` make sense instead?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-24T06:51:10.281+0000",
                    "updated": "2020-08-24T06:51:10.281+0000",
                    "started": "2020-08-24T06:51:10.281+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "473748",
                    "issueId": "13314857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314857/worklog/473787",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thamht4190 commented on a change in pull request #8023:\nURL: https://github.com/apache/arrow/pull/8023#discussion_r475440024\n\n\n\n##########\nFile path: cpp/src/parquet/key_toolkit.h\n##########\n@@ -0,0 +1,123 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"parquet/key_encryption_key.h\"\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/kms_client_factory.h\"\n+#include \"parquet/platform.h\"\n+#include \"parquet/two_level_cache_with_expiration.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class KeyWithMasterID {\n+ public:\n+  KeyWithMasterID(const std::string& key_bytes, const std::string& master_id)\n+      : key_bytes_(key_bytes), master_id_(master_id) {}\n+\n+  const std::string& data_key() const { return key_bytes_; }\n+  const std::string& master_id() const { return master_id_; }\n+\n+ private:\n+  std::string key_bytes_;\n+  std::string master_id_;\n+};\n+\n+class PARQUET_EXPORT KeyToolkit {\n\nReview comment:\n       I based on Java version, so maybe @ggershinsky will help to answer this question.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-24T08:54:48.605+0000",
                    "updated": "2020-08-24T08:54:48.605+0000",
                    "started": "2020-08-24T08:54:48.605+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "473787",
                    "issueId": "13314857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314857/worklog/473790",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thamht4190 commented on a change in pull request #8023:\nURL: https://github.com/apache/arrow/pull/8023#discussion_r475442393\n\n\n\n##########\nFile path: cpp/src/parquet/kms_client_factory.h\n##########\n@@ -0,0 +1,42 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/platform.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class PARQUET_EXPORT KmsClientFactory {\n+ public:\n+  explicit KmsClientFactory(bool wrap_locally) : wrap_locally_(wrap_locally) {}\n+\n+  KmsClientFactory() : KmsClientFactory(false) {}\n+\n+  virtual ~KmsClientFactory() {}\n+\n+  virtual std::shared_ptr<KmsClient> CreateKmsClient(\n\nReview comment:\n       The code accesses a KmsClient instance at many places, so I think a shared client is a must.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-24T08:58:56.528+0000",
                    "updated": "2020-08-24T08:58:56.528+0000",
                    "started": "2020-08-24T08:58:56.528+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "473790",
                    "issueId": "13314857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314857/worklog/473792",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thamht4190 commented on a change in pull request #8023:\nURL: https://github.com/apache/arrow/pull/8023#discussion_r475446337\n\n\n\n##########\nFile path: cpp/src/parquet/file_key_material_store.h\n##########\n@@ -0,0 +1,51 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\") = 0; you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <set>\n+#include <string>\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class FileKeyMaterialStore {\n+ public:\n+  // Initializes key material store for a parquet file.\n+  virtual void Initialize(const std::string& parquet_file_path, bool temp_store) = 0;\n\nReview comment:\n       For simplicity, I will remove members of this class since they are not used anywhere yet and keeps only the class name. I will add later when implementing with hadoop file system.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-24T09:04:21.707+0000",
                    "updated": "2020-08-24T09:04:21.707+0000",
                    "started": "2020-08-24T09:04:21.707+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "473792",
                    "issueId": "13314857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314857/worklog/473919",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thamht4190 commented on a change in pull request #8023:\nURL: https://github.com/apache/arrow/pull/8023#discussion_r475668043\n\n\n\n##########\nFile path: cpp/src/parquet/encryption.h\n##########\n@@ -47,15 +47,15 @@ using ColumnPathToEncryptionPropertiesMap =\n \n class PARQUET_EXPORT DecryptionKeyRetriever {\n  public:\n-  virtual std::string GetKey(const std::string& key_metadata) const = 0;\n\nReview comment:\n       Yes, I can do it. However, I don't understand why we must let it be `const` method. Can you please explain?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-24T14:49:19.861+0000",
                    "updated": "2020-08-24T14:49:19.861+0000",
                    "started": "2020-08-24T14:49:19.861+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "473919",
                    "issueId": "13314857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314857/worklog/474652",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #8023:\nURL: https://github.com/apache/arrow/pull/8023#discussion_r477025570\n\n\n\n##########\nFile path: cpp/src/parquet/encryption.h\n##########\n@@ -47,15 +47,15 @@ using ColumnPathToEncryptionPropertiesMap =\n \n class PARQUET_EXPORT DecryptionKeyRetriever {\n  public:\n-  virtual std::string GetKey(const std::string& key_metadata) const = 0;\n\nReview comment:\n       There are two reasons:\r\n   1. This is breaking API change.  Users that were relying on passing this through as a const object in places can non longer do so.\r\n   2.  Semantically, I would in most cases to have Get operations be const, even if there is caching happening underneath.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-26T04:24:41.046+0000",
                    "updated": "2020-08-26T04:24:41.046+0000",
                    "started": "2020-08-26T04:24:41.046+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "474652",
                    "issueId": "13314857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314857/worklog/474687",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thamht4190 commented on a change in pull request #8023:\nURL: https://github.com/apache/arrow/pull/8023#discussion_r477067068\n\n\n\n##########\nFile path: cpp/src/parquet/encryption_internal.h\n##########\n@@ -45,6 +45,9 @@ constexpr int8_t kOffsetIndex = 7;\n /// Performs AES encryption operations with GCM or CTR ciphers.\n class AesEncryptor {\n  public:\n+  /// Can serve one key length only. Possible values: 16, 24, 32 bytes.\n+  explicit AesEncryptor(ParquetCipher::type alg_id, int key_len, bool metadata);\n\nReview comment:\n       @emkornfield I want to create a local variable of AesEncryptor, without using smart pointers, so it will store in stack rather than in heap.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-26T06:38:19.698+0000",
                    "updated": "2020-08-26T06:38:19.698+0000",
                    "started": "2020-08-26T06:38:19.697+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "474687",
                    "issueId": "13314857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314857/worklog/476069",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thamht4190 commented on a change in pull request #8023:\nURL: https://github.com/apache/arrow/pull/8023#discussion_r479624053\n\n\n\n##########\nFile path: cpp/src/parquet/key_encryption_key.h\n##########\n@@ -0,0 +1,57 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <cstdint>\n+#include <vector>\n+\n+#include \"arrow/util/base64.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class KeyEncryptionKey {\n+ public:\n+  KeyEncryptionKey() = default;\n\nReview comment:\n       Removed.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-29T08:10:26.828+0000",
                    "updated": "2020-08-29T08:10:26.828+0000",
                    "started": "2020-08-29T08:10:26.828+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "476069",
                    "issueId": "13314857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314857/worklog/476072",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thamht4190 commented on a change in pull request #8023:\nURL: https://github.com/apache/arrow/pull/8023#discussion_r479624632\n\n\n\n##########\nFile path: cpp/src/parquet/file_key_unwrapper.h\n##########\n@@ -0,0 +1,65 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"parquet/encryption.h\"\n+#include \"parquet/key_material.h\"\n+#include \"parquet/key_toolkit.h\"\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/kms_client_factory.h\"\n+#include \"parquet/platform.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class PARQUET_EXPORT FileKeyUnwrapper : public DecryptionKeyRetriever {\n+ public:\n+  FileKeyUnwrapper(std::shared_ptr<KmsClientFactory> kms_client_factory,\n+                   const KmsConnectionConfig& kms_connection_config,\n+                   uint64_t cache_lifetime, bool is_wrap_locally);\n+\n+  std::string GetKey(const std::string& key_metadata) override;\n+\n+ private:\n+  class KeyWithMasterID {\n+   public:\n+    KeyWithMasterID(const std::string& key_bytes, const std::string& master_id)\n+        : key_bytes_(key_bytes), master_id_(master_id) {}\n+\n+    const std::string& data_key() const { return key_bytes_; }\n\nReview comment:\n       Removed it and use `KeyWithMasterId` defined in `key_toolkit.h`\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-29T08:17:47.857+0000",
                    "updated": "2020-08-29T08:17:47.857+0000",
                    "started": "2020-08-29T08:17:47.857+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "476072",
                    "issueId": "13314857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314857/worklog/476075",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thamht4190 commented on a change in pull request #8023:\nURL: https://github.com/apache/arrow/pull/8023#discussion_r479625018\n\n\n\n##########\nFile path: cpp/src/parquet/file_key_unwrapper.h\n##########\n@@ -0,0 +1,65 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include \"parquet/encryption.h\"\n+#include \"parquet/key_material.h\"\n+#include \"parquet/key_toolkit.h\"\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/kms_client_factory.h\"\n+#include \"parquet/platform.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class PARQUET_EXPORT FileKeyUnwrapper : public DecryptionKeyRetriever {\n+ public:\n+  FileKeyUnwrapper(std::shared_ptr<KmsClientFactory> kms_client_factory,\n\nReview comment:\n       `kms_client_factory` is stored here in `FileKeyUnwrapper` class and `PropertiesDrivenCryptoFactory` class. We are not sure the lifetime of these 2 classes, then I use shared_ptr. One way to use unique_ptr is only storing it at one place as a static variable in `KeyToolkit` class. But because you questioned about `KeyTookit` singleton, I'll wait until we resolve that question.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-29T08:22:37.314+0000",
                    "updated": "2020-08-29T08:22:37.314+0000",
                    "started": "2020-08-29T08:22:37.314+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "476075",
                    "issueId": "13314857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314857/worklog/476076",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thamht4190 commented on a change in pull request #8023:\nURL: https://github.com/apache/arrow/pull/8023#discussion_r479625144\n\n\n\n##########\nFile path: cpp/src/parquet/file_key_wrapper.h\n##########\n@@ -0,0 +1,68 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <map>\n+#include <memory>\n+#include <string>\n+\n+#include \"parquet/file_key_material_store.h\"\n+#include \"parquet/key_encryption_key.h\"\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/kms_client_factory.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class FileKeyWrapper {\n+ public:\n+  static constexpr int KEK_LENGTH = 16;\n+  static constexpr int KEK_ID_LENGTH = 16;\n+\n+  static constexpr int RND_MAX_BYTES = 32;\n\nReview comment:\n       This constant is unused -> removed it.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-29T08:24:20.713+0000",
                    "updated": "2020-08-29T08:24:20.713+0000",
                    "started": "2020-08-29T08:24:20.713+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "476076",
                    "issueId": "13314857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314857/worklog/476080",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thamht4190 commented on a change in pull request #8023:\nURL: https://github.com/apache/arrow/pull/8023#discussion_r479626558\n\n\n\n##########\nFile path: cpp/src/parquet/key_material.cc\n##########\n@@ -0,0 +1,161 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <rapidjson/document.h>\n+#include <rapidjson/stringbuffer.h>\n+#include <rapidjson/writer.h>\n+\n+#include \"parquet/exception.h\"\n+#include \"parquet/key_material.h\"\n+#include \"parquet/key_metadata.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+constexpr char KeyMaterial::KEY_MATERIAL_TYPE_FIELD[];\n+constexpr char KeyMaterial::KEY_MATERIAL_TYPE1[];\n+\n+constexpr char KeyMaterial::FOOTER_KEY_ID_IN_FILE[];\n+constexpr char KeyMaterial::COLUMN_KEY_ID_IN_FILE_PREFIX[];\n+\n+constexpr char KeyMaterial::IS_FOOTER_KEY_FIELD[];\n+constexpr char KeyMaterial::DOUBLE_WRAPPING_FIELD[];\n+constexpr char KeyMaterial::KMS_INSTANCE_ID_FIELD[];\n+constexpr char KeyMaterial::KMS_INSTANCE_URL_FIELD[];\n+constexpr char KeyMaterial::MASTER_KEY_ID_FIELD[];\n+constexpr char KeyMaterial::WRAPPED_DEK_FIELD[];\n+constexpr char KeyMaterial::KEK_ID_FIELD[];\n+constexpr char KeyMaterial::WRAPPED_KEK_FIELD[];\n+\n+KeyMaterial::KeyMaterial(bool is_footer_key, const std::string& kms_instance_id,\n+                         const std::string& kms_instance_url,\n+                         const std::string& master_key_id, bool is_double_wrapped,\n+                         const std::string& kek_id,\n+                         const std::string& encoded_wrapped_kek,\n+                         const std::string& encoded_wrapped_dek)\n+    : is_footer_key_(is_footer_key),\n+      kms_instance_id_(kms_instance_id),\n+      kms_instance_url_(kms_instance_url),\n+      master_key_id_(master_key_id),\n+      is_double_wrapped_(is_double_wrapped),\n+      kek_id_(kek_id),\n+      encoded_wrapped_kek_(encoded_wrapped_kek),\n+      encoded_wrapped_dek_(encoded_wrapped_dek) {}\n+\n+KeyMaterial KeyMaterial::Parse(const std::string& key_material_string) {\n+  rapidjson::Document document;\n+  document.Parse(key_material_string.c_str());\n\nReview comment:\n       > I thought there was a document parser that takes a string pointer and a size, that is probably better to use if it is available.\r\n   \r\n   I've seen something for json (under `arrow/json` folder), but they seems not fit to the usage here.\r\n   \r\n   > Is the json allowed to be utf-8 encoded?\r\n   Do you mean if rapidjson supports utf-8 encodings? If so, yes.\n\n##########\nFile path: cpp/src/parquet/key_material.cc\n##########\n@@ -0,0 +1,161 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <rapidjson/document.h>\n+#include <rapidjson/stringbuffer.h>\n+#include <rapidjson/writer.h>\n+\n+#include \"parquet/exception.h\"\n+#include \"parquet/key_material.h\"\n+#include \"parquet/key_metadata.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+constexpr char KeyMaterial::KEY_MATERIAL_TYPE_FIELD[];\n+constexpr char KeyMaterial::KEY_MATERIAL_TYPE1[];\n+\n+constexpr char KeyMaterial::FOOTER_KEY_ID_IN_FILE[];\n+constexpr char KeyMaterial::COLUMN_KEY_ID_IN_FILE_PREFIX[];\n+\n+constexpr char KeyMaterial::IS_FOOTER_KEY_FIELD[];\n+constexpr char KeyMaterial::DOUBLE_WRAPPING_FIELD[];\n+constexpr char KeyMaterial::KMS_INSTANCE_ID_FIELD[];\n+constexpr char KeyMaterial::KMS_INSTANCE_URL_FIELD[];\n+constexpr char KeyMaterial::MASTER_KEY_ID_FIELD[];\n+constexpr char KeyMaterial::WRAPPED_DEK_FIELD[];\n+constexpr char KeyMaterial::KEK_ID_FIELD[];\n+constexpr char KeyMaterial::WRAPPED_KEK_FIELD[];\n+\n+KeyMaterial::KeyMaterial(bool is_footer_key, const std::string& kms_instance_id,\n+                         const std::string& kms_instance_url,\n+                         const std::string& master_key_id, bool is_double_wrapped,\n+                         const std::string& kek_id,\n+                         const std::string& encoded_wrapped_kek,\n+                         const std::string& encoded_wrapped_dek)\n+    : is_footer_key_(is_footer_key),\n+      kms_instance_id_(kms_instance_id),\n+      kms_instance_url_(kms_instance_url),\n+      master_key_id_(master_key_id),\n+      is_double_wrapped_(is_double_wrapped),\n+      kek_id_(kek_id),\n+      encoded_wrapped_kek_(encoded_wrapped_kek),\n+      encoded_wrapped_dek_(encoded_wrapped_dek) {}\n+\n+KeyMaterial KeyMaterial::Parse(const std::string& key_material_string) {\n+  rapidjson::Document document;\n+  document.Parse(key_material_string.c_str());\n\nReview comment:\n       > I thought there was a document parser that takes a string pointer and a size, that is probably better to use if it is available.\r\n   \r\n   I've seen something for json (under `arrow/json` folder), but they seems not fit to the usage here.\r\n   \r\n   > Is the json allowed to be utf-8 encoded?\r\n   \r\n   Do you mean if rapidjson supports utf-8 encodings? If so, yes.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-29T08:41:02.699+0000",
                    "updated": "2020-08-29T08:41:02.699+0000",
                    "started": "2020-08-29T08:41:02.699+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "476080",
                    "issueId": "13314857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314857/worklog/476092",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thamht4190 commented on a change in pull request #8023:\nURL: https://github.com/apache/arrow/pull/8023#discussion_r479632794\n\n\n\n##########\nFile path: cpp/src/parquet/key_material.cc\n##########\n@@ -0,0 +1,161 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <rapidjson/document.h>\n+#include <rapidjson/stringbuffer.h>\n+#include <rapidjson/writer.h>\n+\n+#include \"parquet/exception.h\"\n+#include \"parquet/key_material.h\"\n+#include \"parquet/key_metadata.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+constexpr char KeyMaterial::KEY_MATERIAL_TYPE_FIELD[];\n+constexpr char KeyMaterial::KEY_MATERIAL_TYPE1[];\n+\n+constexpr char KeyMaterial::FOOTER_KEY_ID_IN_FILE[];\n+constexpr char KeyMaterial::COLUMN_KEY_ID_IN_FILE_PREFIX[];\n+\n+constexpr char KeyMaterial::IS_FOOTER_KEY_FIELD[];\n+constexpr char KeyMaterial::DOUBLE_WRAPPING_FIELD[];\n+constexpr char KeyMaterial::KMS_INSTANCE_ID_FIELD[];\n+constexpr char KeyMaterial::KMS_INSTANCE_URL_FIELD[];\n+constexpr char KeyMaterial::MASTER_KEY_ID_FIELD[];\n+constexpr char KeyMaterial::WRAPPED_DEK_FIELD[];\n+constexpr char KeyMaterial::KEK_ID_FIELD[];\n+constexpr char KeyMaterial::WRAPPED_KEK_FIELD[];\n+\n+KeyMaterial::KeyMaterial(bool is_footer_key, const std::string& kms_instance_id,\n+                         const std::string& kms_instance_url,\n+                         const std::string& master_key_id, bool is_double_wrapped,\n+                         const std::string& kek_id,\n+                         const std::string& encoded_wrapped_kek,\n+                         const std::string& encoded_wrapped_dek)\n+    : is_footer_key_(is_footer_key),\n+      kms_instance_id_(kms_instance_id),\n+      kms_instance_url_(kms_instance_url),\n+      master_key_id_(master_key_id),\n+      is_double_wrapped_(is_double_wrapped),\n+      kek_id_(kek_id),\n+      encoded_wrapped_kek_(encoded_wrapped_kek),\n+      encoded_wrapped_dek_(encoded_wrapped_dek) {}\n+\n+KeyMaterial KeyMaterial::Parse(const std::string& key_material_string) {\n+  rapidjson::Document document;\n+  document.Parse(key_material_string.c_str());\n+\n+  if (document.HasParseError() || !document.IsObject()) {\n+    throw ParquetException(\"Failed to parse key metadata \" + key_material_string);\n+  }\n+\n+  // External key material - extract \"key material type\", and make sure it is supported\n+  std::string key_material_type = document[KEY_MATERIAL_TYPE_FIELD].GetString();\n+  if (KEY_MATERIAL_TYPE1 != key_material_type) {\n+    throw ParquetException(\"Wrong key material type: \" + key_material_type + \" vs \" +\n+                           KEY_MATERIAL_TYPE1);\n+  }\n+  // Parse other fields (common to internal and external key material)\n+  return Parse(document);\n+}\n+\n+KeyMaterial KeyMaterial::Parse(const rapidjson::Document& key_material_json) {\n+  // 2. Check if \"key material\" belongs to file footer key\n+  bool is_footer_key = key_material_json[IS_FOOTER_KEY_FIELD].GetBool();\n\nReview comment:\n       I should add more validation before passing.\n\n##########\nFile path: cpp/src/parquet/key_material.cc\n##########\n@@ -0,0 +1,161 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <rapidjson/document.h>\n+#include <rapidjson/stringbuffer.h>\n+#include <rapidjson/writer.h>\n+\n+#include \"parquet/exception.h\"\n+#include \"parquet/key_material.h\"\n+#include \"parquet/key_metadata.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+constexpr char KeyMaterial::KEY_MATERIAL_TYPE_FIELD[];\n+constexpr char KeyMaterial::KEY_MATERIAL_TYPE1[];\n+\n+constexpr char KeyMaterial::FOOTER_KEY_ID_IN_FILE[];\n+constexpr char KeyMaterial::COLUMN_KEY_ID_IN_FILE_PREFIX[];\n+\n+constexpr char KeyMaterial::IS_FOOTER_KEY_FIELD[];\n+constexpr char KeyMaterial::DOUBLE_WRAPPING_FIELD[];\n+constexpr char KeyMaterial::KMS_INSTANCE_ID_FIELD[];\n+constexpr char KeyMaterial::KMS_INSTANCE_URL_FIELD[];\n+constexpr char KeyMaterial::MASTER_KEY_ID_FIELD[];\n+constexpr char KeyMaterial::WRAPPED_DEK_FIELD[];\n+constexpr char KeyMaterial::KEK_ID_FIELD[];\n+constexpr char KeyMaterial::WRAPPED_KEK_FIELD[];\n+\n+KeyMaterial::KeyMaterial(bool is_footer_key, const std::string& kms_instance_id,\n+                         const std::string& kms_instance_url,\n+                         const std::string& master_key_id, bool is_double_wrapped,\n+                         const std::string& kek_id,\n+                         const std::string& encoded_wrapped_kek,\n+                         const std::string& encoded_wrapped_dek)\n+    : is_footer_key_(is_footer_key),\n+      kms_instance_id_(kms_instance_id),\n+      kms_instance_url_(kms_instance_url),\n+      master_key_id_(master_key_id),\n+      is_double_wrapped_(is_double_wrapped),\n+      kek_id_(kek_id),\n+      encoded_wrapped_kek_(encoded_wrapped_kek),\n+      encoded_wrapped_dek_(encoded_wrapped_dek) {}\n+\n+KeyMaterial KeyMaterial::Parse(const std::string& key_material_string) {\n+  rapidjson::Document document;\n+  document.Parse(key_material_string.c_str());\n+\n+  if (document.HasParseError() || !document.IsObject()) {\n+    throw ParquetException(\"Failed to parse key metadata \" + key_material_string);\n+  }\n+\n+  // External key material - extract \"key material type\", and make sure it is supported\n+  std::string key_material_type = document[KEY_MATERIAL_TYPE_FIELD].GetString();\n+  if (KEY_MATERIAL_TYPE1 != key_material_type) {\n+    throw ParquetException(\"Wrong key material type: \" + key_material_type + \" vs \" +\n+                           KEY_MATERIAL_TYPE1);\n+  }\n+  // Parse other fields (common to internal and external key material)\n+  return Parse(document);\n+}\n+\n+KeyMaterial KeyMaterial::Parse(const rapidjson::Document& key_material_json) {\n+  // 2. Check if \"key material\" belongs to file footer key\n+  bool is_footer_key = key_material_json[IS_FOOTER_KEY_FIELD].GetBool();\n\nReview comment:\n       I should add more validation before parsing.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-29T09:57:32.269+0000",
                    "updated": "2020-08-29T09:57:32.269+0000",
                    "started": "2020-08-29T09:57:32.269+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "476092",
                    "issueId": "13314857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314857/worklog/476093",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thamht4190 commented on a change in pull request #8023:\nURL: https://github.com/apache/arrow/pull/8023#discussion_r479632859\n\n\n\n##########\nFile path: cpp/src/parquet/key_metadata.h\n##########\n@@ -0,0 +1,91 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <string>\n+\n+#include \"parquet/key_material.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+// Parquet encryption specification defines \"key metadata\" as an arbitrary byte array,\n+// generated by file writers for each encryption key, and passed to the low level API for\n+// storage in the file footer . The \"key metadata\" field is made available to file readers\n+// to enable recovery of the key. This simple interface can be utilized for implementation\n+// of any key management scheme.\n+//\n+// The keytools package (PARQUET-1373) implements one approach, of many possible, to key\n+// management and to generation of the \"key metadata\" fields. This approach, based on the\n+// \"envelope encryption\" pattern, allows to work with KMS servers. It keeps the actual\n+// material, required to recover a key, in a \"key material\" object (see the KeyMaterial\n+// class for details).\n+//\n+// KeyMetadata class writes (and reads) the \"key metadata\" field as a flat json object,\n+// with the following fields:\n+// 1. \"keyMaterialType\" - a String, with the type of  key material. In the current\n\nReview comment:\n       Sorry. I don't get this point. Can you explain?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-29T09:58:15.508+0000",
                    "updated": "2020-08-29T09:58:15.508+0000",
                    "started": "2020-08-29T09:58:15.508+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "476093",
                    "issueId": "13314857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314857/worklog/476096",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thamht4190 commented on a change in pull request #8023:\nURL: https://github.com/apache/arrow/pull/8023#discussion_r479633145\n\n\n\n##########\nFile path: cpp/src/parquet/kms_client.h\n##########\n@@ -0,0 +1,81 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <string>\n+#include <unordered_map>\n+#include <vector>\n+\n+#include \"parquet/exception.h\"\n+#include \"parquet/platform.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class PARQUET_EXPORT KeyAccessToken {\n+ public:\n+  KeyAccessToken() = default;\n+\n+  explicit KeyAccessToken(const std::string value) : value_(value) {}\n+\n+  void Refresh(const std::string& new_value) { value_ = new_value; }\n+\n+  const std::string& value() const { return value_; }\n+\n+  void SetDefaultIfEmpty();\n+\n+ private:\n+  std::string value_;\n+};\n+\n+struct PARQUET_EXPORT KmsConnectionConfig {\n+  std::string kms_instance_id;\n+  std::string kms_instance_url;\n+  std::shared_ptr<KeyAccessToken> refreshable_key_access_token;\n+  std::unordered_map<std::string, std::string> custom_kms_conf;\n+\n+  const std::string& key_access_token() const {\n+    if (refreshable_key_access_token == NULL ||\n+        refreshable_key_access_token->value().empty()) {\n+      throw ParquetException(\"key access token is not set!\");\n+    }\n+    return refreshable_key_access_token->value();\n+  }\n+\n+  void SetDefaultIfEmpty();\n+};\n+\n+class PARQUET_EXPORT KmsClient {\n+ public:\n+  static constexpr char KMS_INSTANCE_ID_DEFAULT[] = \"DEFAULT\";\n+  static constexpr char KMS_INSTANCE_URL_DEFAULT[] = \"DEFAULT\";\n+  static constexpr char KEY_ACCESS_TOKEN_DEFAULT[] = \"DEFAULT\";\n+\n+  // Wraps a key - encrypts it with the master key, encodes the result\n+  // and potentially adds a KMS-specific metadata.\n+  virtual std::string WrapKey(const std::string& key_bytes,\n+                              const std::string& master_key_identifier) = 0;\n\nReview comment:\n       @ggershinsky I always see `master_key_identifier` goes with a `key`, so should we pass an input param `const KeyWithMasterId& key_with_master_id` instead of 2 input string params? \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-29T10:01:42.331+0000",
                    "updated": "2020-08-29T10:01:42.331+0000",
                    "started": "2020-08-29T10:01:42.330+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "476096",
                    "issueId": "13314857"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314857/worklog/476097",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "thamht4190 commented on a change in pull request #8023:\nURL: https://github.com/apache/arrow/pull/8023#discussion_r479633600\n\n\n\n##########\nFile path: cpp/src/parquet/key_toolkit.h\n##########\n@@ -0,0 +1,123 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <cstdint>\n+#include <memory>\n+#include <string>\n+#include <vector>\n+\n+#include \"parquet/key_encryption_key.h\"\n+#include \"parquet/kms_client.h\"\n+#include \"parquet/kms_client_factory.h\"\n+#include \"parquet/platform.h\"\n+#include \"parquet/two_level_cache_with_expiration.h\"\n+\n+namespace parquet {\n+namespace encryption {\n+\n+class KeyWithMasterID {\n\nReview comment:\n       > Does this need to be exported?\r\n   \r\n   No, it's used internally in FileKeyUnwrapper.cc (implemented) and KeyToolkit.cc (will be implemented later).\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-29T10:07:06.334+0000",
                    "updated": "2020-08-29T10:07:06.334+0000",
                    "started": "2020-08-29T10:07:06.334+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "476097",
                    "issueId": "13314857"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 101400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@41f5ef6d[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4007cceb[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5e444b87[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@20dab430[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1813bc90[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@a86a467[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@76e2dec3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3ec8f1b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@61e54ca[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@39047df2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@59f0a8d7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3e8370a5[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 101400,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Mar 17 14:47:03 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-03-17T14:47:03.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9318/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2020-07-03T08:58:04.000+0000",
        "updated": "2021-07-27T08:23:10.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "28h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 101400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Parquet] Encryption key management tools",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314857/comment/17150851",
                    "id": "17150851",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=gershinsky",
                        "name": "gershinsky",
                        "key": "gershinsky",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=gershinsky&avatarId=45287",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=gershinsky&avatarId=45287",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=gershinsky&avatarId=45287",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=gershinsky&avatarId=45287"
                        },
                        "displayName": "Gidon Gershinsky",
                        "active": true,
                        "timeZone": "Asia/Jerusalem"
                    },
                    "body": "[~wesm], looks I can't assign jiras in this project. Could you assign this one to [~thamha]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=gershinsky",
                        "name": "gershinsky",
                        "key": "gershinsky",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=gershinsky&avatarId=45287",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=gershinsky&avatarId=45287",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=gershinsky&avatarId=45287",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=gershinsky&avatarId=45287"
                        },
                        "displayName": "Gidon Gershinsky",
                        "active": true,
                        "timeZone": "Asia/Jerusalem"
                    },
                    "created": "2020-07-03T09:00:47.035+0000",
                    "updated": "2020-07-03T09:00:47.035+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314857/comment/17150982",
                    "id": "17150982",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Done.  I made you both Contributors in the JIRA permissions so you can assign issues now",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-07-03T13:06:42.205+0000",
                    "updated": "2020-07-03T13:06:42.205+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13314857/comment/17303495",
                    "id": "17303495",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 8023\n[https://github.com/apache/arrow/pull/8023]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-03-17T14:47:03.362+0000",
                    "updated": "2021-03-17T14:47:03.362+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0gfio:",
        "customfield_12314139": null
    }
}