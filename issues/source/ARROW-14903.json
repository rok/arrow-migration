{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13414337",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414337",
    "key": "ARROW-14903",
    "fields": {
        "parent": {
            "id": "13414334",
            "key": "ARROW-14902",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13414334",
            "fields": {
                "summary": "[R] Update write_csv_arrow() to support all args of readr::write_csv()",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                    "description": "The issue is open and ready for the assignee to start work on it.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                    "name": "Open",
                    "id": "1",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                        "id": 2,
                        "key": "new",
                        "colorName": "blue-gray",
                        "name": "To Do"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "good-first-issue",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=johanpel",
            "name": "johanpel",
            "key": "johanpel",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Johan Peltenburg",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=dragosmg",
            "name": "dragosmg",
            "key": "dragosmg",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34061",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34061",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34061",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34061"
            },
            "displayName": "Drago\u0219 Moldovan-Gr\u00fcnfeld",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=dragosmg",
            "name": "dragosmg",
            "key": "dragosmg",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34061",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34061",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34061",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34061"
            },
            "displayName": "Drago\u0219 Moldovan-Gr\u00fcnfeld",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 18600,
            "total": 18600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 18600,
            "total": 18600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14903/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 31,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414337/worklog/689223",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "johanpel opened a new pull request #11836:\nURL: https://github.com/apache/arrow/pull/11836\n\n\n   This adds the option to configure the string that is rendered in the CSV output for null values.\r\n   If this null string has any quotes, they are escaped. I decided not to deal with the fact that the user can provide a string that cause rendered values to become ambiguous. E.g. when the user supplies `42` and an integer column has a null, it will render as `42` making it indistinguishable from the actual value of 42.\r\n   The reason is that if we were to quote a valid value or the null value, this may annoy downstream applications that perform e.g. type inference for said column. But the most major drawback is that we'd need to check every valid value for equality to the configured null value, which I think may be a price too costly to pay for users making awkward choices for their null value.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-02T12:06:45.289+0000",
                    "updated": "2021-12-02T12:06:45.289+0000",
                    "started": "2021-12-02T12:06:45.289+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "689223",
                    "issueId": "13414337"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414337/worklog/689224",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11836:\nURL: https://github.com/apache/arrow/pull/11836#issuecomment-984567491\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-02T12:07:11.965+0000",
                    "updated": "2021-12-02T12:07:11.965+0000",
                    "started": "2021-12-02T12:07:11.965+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "689224",
                    "issueId": "13414337"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414337/worklog/689271",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11836:\nURL: https://github.com/apache/arrow/pull/11836#discussion_r761082181\n\n\n\n##########\nFile path: cpp/src/arrow/csv/writer_test.cc\n##########\n@@ -69,25 +70,49 @@ std::vector<WriterTestParams> GenerateTestCases() {\n                              { \"a\": 124, \"b\\\"\": \"a\\\"\\\"b\\\"\" },\n                              { \"d\": 0 },\n                              { \"e\": 86400000 },\n-                             { \"f\": 1078016523 }])\";\n-  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +       // line 1\n-                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +     // line 2\n-                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +          // line 3\n-                                        R\"(,,,,,)\" + \"\\n\" +                    // line 4\n-                                        R\"(546,\"\",517,,,)\" + \"\\n\" +            // line 5\n-                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +       // line 6\n-                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +          // line 7\n-                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +          // line 8\n-                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\";  // line 9\n+                             { \"f\": 1078016523 },\n+                             { \"b\\\"\": \"NA\" }])\";\n+  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +        // line 1\n+                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +      // line 2\n+                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +           // line 3\n+                                        R\"(,,,,,)\" + \"\\n\" +                     // line 4\n+                                        R\"(546,\"\",517,,,)\" + \"\\n\" +             // line 5\n+                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +        // line 6\n+                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +           // line 7\n+                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +           // line 8\n+                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\" +  // line 9\n+                                        R\"(,\"NA\",,,,)\" + \"\\n\";                  // line 10\n+\n   std::string expected_header = std::string(R\"(\"a\",\"b\"\"\",\"c \",\"d\",\"e\",\"f\")\") + \"\\n\";\n \n+  auto schema_custom_na = schema({field(\"g\", uint64()), field(\"h\", utf8())});\n+\n+  auto populated_batch_custom_na = R\"([{\"g\": 42, \"h\": \"NA\"},\n+                                        {}])\";\n+\n+  std::string expected_custom_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                   R\"(NA,NA)\" + \"\\n\";                  // line 2\n+\n+  std::string expected_custom_quoted_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                          R\"(\"\"NA\"\",\"\"NA\"\")\" + \"\\n\";          // line 2\n\nReview comment:\n       Hmm, this doesn't look exactly right. I think it should be `\"\"\"NA\"\"\"`, not `\"\"NA\"\"`.\n\n##########\nFile path: cpp/src/arrow/csv/writer_test.cc\n##########\n@@ -69,25 +70,49 @@ std::vector<WriterTestParams> GenerateTestCases() {\n                              { \"a\": 124, \"b\\\"\": \"a\\\"\\\"b\\\"\" },\n                              { \"d\": 0 },\n                              { \"e\": 86400000 },\n-                             { \"f\": 1078016523 }])\";\n-  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +       // line 1\n-                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +     // line 2\n-                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +          // line 3\n-                                        R\"(,,,,,)\" + \"\\n\" +                    // line 4\n-                                        R\"(546,\"\",517,,,)\" + \"\\n\" +            // line 5\n-                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +       // line 6\n-                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +          // line 7\n-                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +          // line 8\n-                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\";  // line 9\n+                             { \"f\": 1078016523 },\n+                             { \"b\\\"\": \"NA\" }])\";\n+  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +        // line 1\n+                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +      // line 2\n+                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +           // line 3\n+                                        R\"(,,,,,)\" + \"\\n\" +                     // line 4\n+                                        R\"(546,\"\",517,,,)\" + \"\\n\" +             // line 5\n+                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +        // line 6\n+                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +           // line 7\n+                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +           // line 8\n+                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\" +  // line 9\n+                                        R\"(,\"NA\",,,,)\" + \"\\n\";                  // line 10\n+\n   std::string expected_header = std::string(R\"(\"a\",\"b\"\"\",\"c \",\"d\",\"e\",\"f\")\") + \"\\n\";\n \n+  auto schema_custom_na = schema({field(\"g\", uint64()), field(\"h\", utf8())});\n+\n+  auto populated_batch_custom_na = R\"([{\"g\": 42, \"h\": \"NA\"},\n+                                        {}])\";\n+\n+  std::string expected_custom_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                   R\"(NA,NA)\" + \"\\n\";                  // line 2\n+\n+  std::string expected_custom_quoted_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                          R\"(\"\"NA\"\",\"\"NA\"\")\" + \"\\n\";          // line 2\n\nReview comment:\n       Though it seems a bug in the escaping logic, not in this PR.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-02T13:25:26.570+0000",
                    "updated": "2021-12-02T13:25:26.570+0000",
                    "started": "2021-12-02T13:25:26.570+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "689271",
                    "issueId": "13414337"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414337/worklog/689276",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11836:\nURL: https://github.com/apache/arrow/pull/11836#discussion_r761091386\n\n\n\n##########\nFile path: cpp/src/arrow/csv/writer_test.cc\n##########\n@@ -69,25 +70,49 @@ std::vector<WriterTestParams> GenerateTestCases() {\n                              { \"a\": 124, \"b\\\"\": \"a\\\"\\\"b\\\"\" },\n                              { \"d\": 0 },\n                              { \"e\": 86400000 },\n-                             { \"f\": 1078016523 }])\";\n-  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +       // line 1\n-                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +     // line 2\n-                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +          // line 3\n-                                        R\"(,,,,,)\" + \"\\n\" +                    // line 4\n-                                        R\"(546,\"\",517,,,)\" + \"\\n\" +            // line 5\n-                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +       // line 6\n-                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +          // line 7\n-                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +          // line 8\n-                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\";  // line 9\n+                             { \"f\": 1078016523 },\n+                             { \"b\\\"\": \"NA\" }])\";\n+  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +        // line 1\n+                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +      // line 2\n+                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +           // line 3\n+                                        R\"(,,,,,)\" + \"\\n\" +                     // line 4\n+                                        R\"(546,\"\",517,,,)\" + \"\\n\" +             // line 5\n+                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +        // line 6\n+                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +           // line 7\n+                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +           // line 8\n+                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\" +  // line 9\n+                                        R\"(,\"NA\",,,,)\" + \"\\n\";                  // line 10\n+\n   std::string expected_header = std::string(R\"(\"a\",\"b\"\"\",\"c \",\"d\",\"e\",\"f\")\") + \"\\n\";\n \n+  auto schema_custom_na = schema({field(\"g\", uint64()), field(\"h\", utf8())});\n+\n+  auto populated_batch_custom_na = R\"([{\"g\": 42, \"h\": \"NA\"},\n+                                        {}])\";\n+\n+  std::string expected_custom_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                   R\"(NA,NA)\" + \"\\n\";                  // line 2\n+\n+  std::string expected_custom_quoted_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                          R\"(\"\"NA\"\",\"\"NA\"\")\" + \"\\n\";          // line 2\n\nReview comment:\n       Actually, no, the problem really seems to be in this PR, since otherwise the CSV writer works fine:\r\n   ```python\r\n   >>> tab = pa.table({'a': [0,1,2], 'b': ['foo', '\"bar\"', '\"\"baz\"\"']})\r\n   >>> bio = io.BytesIO()\r\n   >>> csv.write_csv(tab, bio)\r\n   >>> bio.getvalue()\r\n   b'\"a\",\"b\"\\n0,\"foo\"\\n1,\"\"\"bar\"\"\"\\n2,\"\"\"\"\"baz\"\"\"\"\"\\n'\r\n   >>> bio.seek(0)\r\n   0\r\n   >>> tt = csv.read_csv(bio)\r\n   >>> tt\r\n   pyarrow.Table\r\n   a: int64\r\n   b: string\r\n   ----\r\n   a: [[0,1,2]]\r\n   b: [[\"foo\",\"\"bar\"\",\"\"\"baz\"\"\"]]\r\n   >>> tab == tt\r\n   True\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-02T13:28:51.403+0000",
                    "updated": "2021-12-02T13:28:51.403+0000",
                    "started": "2021-12-02T13:28:51.403+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "689276",
                    "issueId": "13414337"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414337/worklog/689281",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11836:\nURL: https://github.com/apache/arrow/pull/11836#discussion_r761095033\n\n\n\n##########\nFile path: cpp/src/arrow/csv/writer_test.cc\n##########\n@@ -69,25 +70,49 @@ std::vector<WriterTestParams> GenerateTestCases() {\n                              { \"a\": 124, \"b\\\"\": \"a\\\"\\\"b\\\"\" },\n                              { \"d\": 0 },\n                              { \"e\": 86400000 },\n-                             { \"f\": 1078016523 }])\";\n-  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +       // line 1\n-                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +     // line 2\n-                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +          // line 3\n-                                        R\"(,,,,,)\" + \"\\n\" +                    // line 4\n-                                        R\"(546,\"\",517,,,)\" + \"\\n\" +            // line 5\n-                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +       // line 6\n-                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +          // line 7\n-                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +          // line 8\n-                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\";  // line 9\n+                             { \"f\": 1078016523 },\n+                             { \"b\\\"\": \"NA\" }])\";\n+  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +        // line 1\n+                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +      // line 2\n+                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +           // line 3\n+                                        R\"(,,,,,)\" + \"\\n\" +                     // line 4\n+                                        R\"(546,\"\",517,,,)\" + \"\\n\" +             // line 5\n+                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +        // line 6\n+                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +           // line 7\n+                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +           // line 8\n+                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\" +  // line 9\n+                                        R\"(,\"NA\",,,,)\" + \"\\n\";                  // line 10\n+\n   std::string expected_header = std::string(R\"(\"a\",\"b\"\"\",\"c \",\"d\",\"e\",\"f\")\") + \"\\n\";\n \n+  auto schema_custom_na = schema({field(\"g\", uint64()), field(\"h\", utf8())});\n+\n+  auto populated_batch_custom_na = R\"([{\"g\": 42, \"h\": \"NA\"},\n+                                        {}])\";\n+\n+  std::string expected_custom_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                   R\"(NA,NA)\" + \"\\n\";                  // line 2\n+\n+  std::string expected_custom_quoted_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                          R\"(\"\"NA\"\",\"\"NA\"\")\" + \"\\n\";          // line 2\n+\n   return std::vector<WriterTestParams>{\n-      {abc_schema, \"[]\", DefaultTestOptions(/*header=*/false), \"\"},\n-      {abc_schema, \"[]\", DefaultTestOptions(/*header=*/true), expected_header},\n-      {abc_schema, populated_batch, DefaultTestOptions(/*header=*/false),\n+      {abc_schema, \"[]\", DefaultTestOptions(/*include_header=*/false, /*null_string=*/\"\"),\n+       \"\"},\n+      {abc_schema, \"[]\", DefaultTestOptions(/*include_header=*/true, /*null_string=*/\"\"),\n+       expected_header},\n+      {abc_schema, populated_batch,\n+       DefaultTestOptions(/*include_header=*/false, /*null_string=*/\"\"),\n        expected_without_header},\n-      {abc_schema, populated_batch, DefaultTestOptions(/*header=*/true),\n-       expected_header + expected_without_header}};\n+      {abc_schema, populated_batch,\n+       DefaultTestOptions(/*include_header=*/true, /*null_string=*/\"\"),\n+       expected_header + expected_without_header},\n+      {schema_custom_na, populated_batch_custom_na,\n+       DefaultTestOptions(/*include_header=*/false, /*null_string=*/\"NA\"),\n+       expected_custom_na},\n+      {schema_custom_na, populated_batch_custom_na,\n+       DefaultTestOptions(/*include_header=*/false, /*null_string=*/R\"(\"NA\")\"),\n+       expected_custom_quoted_na}};\n\nReview comment:\n       I'm having trouble getting this one to round-trip. With double quotes (though as Antoine points out this is wrong):\r\n   \r\n   ```\r\n   >>> csv.read_csv(\"test2.csv\", convert_options=csv.ConvertOptions(strings_can_be_null=True, quoted_strings_can_be_null=False, null_values=['\"NA\"'], column_types={\"g\": pyarrow.int64()}))\r\n   Traceback (most recent call last):\r\n     File \"<stdin>\", line 1, in <module>\r\n     File \"pyarrow/_csv.pyx\", line 886, in pyarrow._csv.read_csv\r\n     File \"pyarrow/_csv.pyx\", line 895, in pyarrow._csv.read_csv\r\n     File \"pyarrow/error.pxi\", line 143, in pyarrow.lib.pyarrow_internal_check_status\r\n     File \"pyarrow/error.pxi\", line 99, in pyarrow.lib.check_status\r\n   pyarrow.lib.ArrowInvalid: In CSV column #0: CSV conversion error to int64: invalid value 'NA\"\"'\r\n   ```\r\n   \r\n   With triple quotes:\r\n   \r\n   ```\r\n   >>> csv.read_csv(\"test2.csv\", convert_options=csv.ConvertOptions(strings_can_be_null=True, quoted_strings_can_be_null=False, null_values=['\"NA\"'], column_types={\"g\": pyarrow.int64()}))\r\n   Traceback (most recent call last):\r\n     File \"<stdin>\", line 1, in <module>\r\n     File \"pyarrow/_csv.pyx\", line 886, in pyarrow._csv.read_csv\r\n     File \"pyarrow/_csv.pyx\", line 895, in pyarrow._csv.read_csv\r\n     File \"pyarrow/error.pxi\", line 143, in pyarrow.lib.pyarrow_internal_check_status\r\n     File \"pyarrow/error.pxi\", line 99, in pyarrow.lib.check_status\r\n   pyarrow.lib.ArrowInvalid: In CSV column #0: CSV conversion error to int64: invalid value '\"NA\"'\r\n   ```\r\n   \r\n   Might be an issue on the read side. I don't think it's an issue to be addressed here.\n\n##########\nFile path: cpp/src/arrow/csv/writer_test.cc\n##########\n@@ -69,25 +70,49 @@ std::vector<WriterTestParams> GenerateTestCases() {\n                              { \"a\": 124, \"b\\\"\": \"a\\\"\\\"b\\\"\" },\n                              { \"d\": 0 },\n                              { \"e\": 86400000 },\n-                             { \"f\": 1078016523 }])\";\n-  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +       // line 1\n-                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +     // line 2\n-                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +          // line 3\n-                                        R\"(,,,,,)\" + \"\\n\" +                    // line 4\n-                                        R\"(546,\"\",517,,,)\" + \"\\n\" +            // line 5\n-                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +       // line 6\n-                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +          // line 7\n-                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +          // line 8\n-                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\";  // line 9\n+                             { \"f\": 1078016523 },\n+                             { \"b\\\"\": \"NA\" }])\";\n+  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +        // line 1\n+                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +      // line 2\n+                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +           // line 3\n+                                        R\"(,,,,,)\" + \"\\n\" +                     // line 4\n+                                        R\"(546,\"\",517,,,)\" + \"\\n\" +             // line 5\n+                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +        // line 6\n+                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +           // line 7\n+                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +           // line 8\n+                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\" +  // line 9\n+                                        R\"(,\"NA\",,,,)\" + \"\\n\";                  // line 10\n+\n   std::string expected_header = std::string(R\"(\"a\",\"b\"\"\",\"c \",\"d\",\"e\",\"f\")\") + \"\\n\";\n \n+  auto schema_custom_na = schema({field(\"g\", uint64()), field(\"h\", utf8())});\n+\n+  auto populated_batch_custom_na = R\"([{\"g\": 42, \"h\": \"NA\"},\n+                                        {}])\";\n+\n+  std::string expected_custom_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                   R\"(NA,NA)\" + \"\\n\";                  // line 2\n+\n+  std::string expected_custom_quoted_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                          R\"(\"\"NA\"\",\"\"NA\"\")\" + \"\\n\";          // line 2\n+\n   return std::vector<WriterTestParams>{\n-      {abc_schema, \"[]\", DefaultTestOptions(/*header=*/false), \"\"},\n-      {abc_schema, \"[]\", DefaultTestOptions(/*header=*/true), expected_header},\n-      {abc_schema, populated_batch, DefaultTestOptions(/*header=*/false),\n+      {abc_schema, \"[]\", DefaultTestOptions(/*include_header=*/false, /*null_string=*/\"\"),\n+       \"\"},\n+      {abc_schema, \"[]\", DefaultTestOptions(/*include_header=*/true, /*null_string=*/\"\"),\n+       expected_header},\n+      {abc_schema, populated_batch,\n+       DefaultTestOptions(/*include_header=*/false, /*null_string=*/\"\"),\n        expected_without_header},\n-      {abc_schema, populated_batch, DefaultTestOptions(/*header=*/true),\n-       expected_header + expected_without_header}};\n+      {abc_schema, populated_batch,\n+       DefaultTestOptions(/*include_header=*/true, /*null_string=*/\"\"),\n+       expected_header + expected_without_header},\n+      {schema_custom_na, populated_batch_custom_na,\n+       DefaultTestOptions(/*include_header=*/false, /*null_string=*/\"NA\"),\n+       expected_custom_na},\n\nReview comment:\n       This round-trips with `csv.ConvertOptions(strings_can_be_null=True, quoted_strings_can_be_null=False)` which is to be expected.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-02T13:33:34.816+0000",
                    "updated": "2021-12-02T13:33:34.816+0000",
                    "started": "2021-12-02T13:33:34.815+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "689281",
                    "issueId": "13414337"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414337/worklog/689285",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "johanpel commented on a change in pull request #11836:\nURL: https://github.com/apache/arrow/pull/11836#discussion_r761097732\n\n\n\n##########\nFile path: cpp/src/arrow/csv/writer_test.cc\n##########\n@@ -69,25 +70,49 @@ std::vector<WriterTestParams> GenerateTestCases() {\n                              { \"a\": 124, \"b\\\"\": \"a\\\"\\\"b\\\"\" },\n                              { \"d\": 0 },\n                              { \"e\": 86400000 },\n-                             { \"f\": 1078016523 }])\";\n-  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +       // line 1\n-                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +     // line 2\n-                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +          // line 3\n-                                        R\"(,,,,,)\" + \"\\n\" +                    // line 4\n-                                        R\"(546,\"\",517,,,)\" + \"\\n\" +            // line 5\n-                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +       // line 6\n-                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +          // line 7\n-                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +          // line 8\n-                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\";  // line 9\n+                             { \"f\": 1078016523 },\n+                             { \"b\\\"\": \"NA\" }])\";\n+  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +        // line 1\n+                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +      // line 2\n+                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +           // line 3\n+                                        R\"(,,,,,)\" + \"\\n\" +                     // line 4\n+                                        R\"(546,\"\",517,,,)\" + \"\\n\" +             // line 5\n+                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +        // line 6\n+                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +           // line 7\n+                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +           // line 8\n+                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\" +  // line 9\n+                                        R\"(,\"NA\",,,,)\" + \"\\n\";                  // line 10\n+\n   std::string expected_header = std::string(R\"(\"a\",\"b\"\"\",\"c \",\"d\",\"e\",\"f\")\") + \"\\n\";\n \n+  auto schema_custom_na = schema({field(\"g\", uint64()), field(\"h\", utf8())});\n+\n+  auto populated_batch_custom_na = R\"([{\"g\": 42, \"h\": \"NA\"},\n+                                        {}])\";\n+\n+  std::string expected_custom_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                   R\"(NA,NA)\" + \"\\n\";                  // line 2\n+\n+  std::string expected_custom_quoted_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                          R\"(\"\"NA\"\",\"\"NA\"\")\" + \"\\n\";          // line 2\n\nReview comment:\n       This test case is for when a user supplies `\"NA\"` as the null value string.\r\n   The idea is that all quotes in the null value string are escaped before rendering it for null values. This way it won't be confused with a rendered valid value string \"NA\". Hope this makes sense?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-02T13:36:40.023+0000",
                    "updated": "2021-12-02T13:36:40.023+0000",
                    "started": "2021-12-02T13:36:40.023+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "689285",
                    "issueId": "13414337"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414337/worklog/689288",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "johanpel commented on a change in pull request #11836:\nURL: https://github.com/apache/arrow/pull/11836#discussion_r761097732\n\n\n\n##########\nFile path: cpp/src/arrow/csv/writer_test.cc\n##########\n@@ -69,25 +70,49 @@ std::vector<WriterTestParams> GenerateTestCases() {\n                              { \"a\": 124, \"b\\\"\": \"a\\\"\\\"b\\\"\" },\n                              { \"d\": 0 },\n                              { \"e\": 86400000 },\n-                             { \"f\": 1078016523 }])\";\n-  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +       // line 1\n-                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +     // line 2\n-                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +          // line 3\n-                                        R\"(,,,,,)\" + \"\\n\" +                    // line 4\n-                                        R\"(546,\"\",517,,,)\" + \"\\n\" +            // line 5\n-                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +       // line 6\n-                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +          // line 7\n-                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +          // line 8\n-                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\";  // line 9\n+                             { \"f\": 1078016523 },\n+                             { \"b\\\"\": \"NA\" }])\";\n+  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +        // line 1\n+                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +      // line 2\n+                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +           // line 3\n+                                        R\"(,,,,,)\" + \"\\n\" +                     // line 4\n+                                        R\"(546,\"\",517,,,)\" + \"\\n\" +             // line 5\n+                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +        // line 6\n+                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +           // line 7\n+                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +           // line 8\n+                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\" +  // line 9\n+                                        R\"(,\"NA\",,,,)\" + \"\\n\";                  // line 10\n+\n   std::string expected_header = std::string(R\"(\"a\",\"b\"\"\",\"c \",\"d\",\"e\",\"f\")\") + \"\\n\";\n \n+  auto schema_custom_na = schema({field(\"g\", uint64()), field(\"h\", utf8())});\n+\n+  auto populated_batch_custom_na = R\"([{\"g\": 42, \"h\": \"NA\"},\n+                                        {}])\";\n+\n+  std::string expected_custom_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                   R\"(NA,NA)\" + \"\\n\";                  // line 2\n+\n+  std::string expected_custom_quoted_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                          R\"(\"\"NA\"\",\"\"NA\"\")\" + \"\\n\";          // line 2\n\nReview comment:\n       This test case is for when a user supplies `\"NA\"` (including actual quotes in the value) as the null value string.\r\n   The idea is that all quotes in the null value string are escaped before rendering it for null values. This way it won't be confused with a rendered valid value string \"NA\". Hope this makes sense?\n\n##########\nFile path: cpp/src/arrow/csv/writer_test.cc\n##########\n@@ -69,25 +70,49 @@ std::vector<WriterTestParams> GenerateTestCases() {\n                              { \"a\": 124, \"b\\\"\": \"a\\\"\\\"b\\\"\" },\n                              { \"d\": 0 },\n                              { \"e\": 86400000 },\n-                             { \"f\": 1078016523 }])\";\n-  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +       // line 1\n-                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +     // line 2\n-                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +          // line 3\n-                                        R\"(,,,,,)\" + \"\\n\" +                    // line 4\n-                                        R\"(546,\"\",517,,,)\" + \"\\n\" +            // line 5\n-                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +       // line 6\n-                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +          // line 7\n-                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +          // line 8\n-                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\";  // line 9\n+                             { \"f\": 1078016523 },\n+                             { \"b\\\"\": \"NA\" }])\";\n+  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +        // line 1\n+                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +      // line 2\n+                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +           // line 3\n+                                        R\"(,,,,,)\" + \"\\n\" +                     // line 4\n+                                        R\"(546,\"\",517,,,)\" + \"\\n\" +             // line 5\n+                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +        // line 6\n+                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +           // line 7\n+                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +           // line 8\n+                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\" +  // line 9\n+                                        R\"(,\"NA\",,,,)\" + \"\\n\";                  // line 10\n+\n   std::string expected_header = std::string(R\"(\"a\",\"b\"\"\",\"c \",\"d\",\"e\",\"f\")\") + \"\\n\";\n \n+  auto schema_custom_na = schema({field(\"g\", uint64()), field(\"h\", utf8())});\n+\n+  auto populated_batch_custom_na = R\"([{\"g\": 42, \"h\": \"NA\"},\n+                                        {}])\";\n+\n+  std::string expected_custom_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                   R\"(NA,NA)\" + \"\\n\";                  // line 2\n+\n+  std::string expected_custom_quoted_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                          R\"(\"\"NA\"\",\"\"NA\"\")\" + \"\\n\";          // line 2\n\nReview comment:\n       This test case is for when a user supplies `\"NA\"` (including actual quotes) as the null value string.\r\n   The idea is that all quotes in the null value string are escaped before rendering it for null values. This way it won't be confused with a rendered valid value string \"NA\". Hope this makes sense?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-02T13:38:03.176+0000",
                    "updated": "2021-12-02T13:38:03.176+0000",
                    "started": "2021-12-02T13:38:03.176+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "689288",
                    "issueId": "13414337"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414337/worklog/689289",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11836:\nURL: https://github.com/apache/arrow/pull/11836#discussion_r761098984\n\n\n\n##########\nFile path: cpp/src/arrow/csv/writer_test.cc\n##########\n@@ -69,25 +70,49 @@ std::vector<WriterTestParams> GenerateTestCases() {\n                              { \"a\": 124, \"b\\\"\": \"a\\\"\\\"b\\\"\" },\n                              { \"d\": 0 },\n                              { \"e\": 86400000 },\n-                             { \"f\": 1078016523 }])\";\n-  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +       // line 1\n-                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +     // line 2\n-                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +          // line 3\n-                                        R\"(,,,,,)\" + \"\\n\" +                    // line 4\n-                                        R\"(546,\"\",517,,,)\" + \"\\n\" +            // line 5\n-                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +       // line 6\n-                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +          // line 7\n-                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +          // line 8\n-                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\";  // line 9\n+                             { \"f\": 1078016523 },\n+                             { \"b\\\"\": \"NA\" }])\";\n+  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +        // line 1\n+                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +      // line 2\n+                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +           // line 3\n+                                        R\"(,,,,,)\" + \"\\n\" +                     // line 4\n+                                        R\"(546,\"\",517,,,)\" + \"\\n\" +             // line 5\n+                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +        // line 6\n+                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +           // line 7\n+                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +           // line 8\n+                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\" +  // line 9\n+                                        R\"(,\"NA\",,,,)\" + \"\\n\";                  // line 10\n+\n   std::string expected_header = std::string(R\"(\"a\",\"b\"\"\",\"c \",\"d\",\"e\",\"f\")\") + \"\\n\";\n \n+  auto schema_custom_na = schema({field(\"g\", uint64()), field(\"h\", utf8())});\n+\n+  auto populated_batch_custom_na = R\"([{\"g\": 42, \"h\": \"NA\"},\n+                                        {}])\";\n+\n+  std::string expected_custom_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                   R\"(NA,NA)\" + \"\\n\";                  // line 2\n+\n+  std::string expected_custom_quoted_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                          R\"(\"\"NA\"\",\"\"NA\"\")\" + \"\\n\";          // line 2\n\nReview comment:\n       Right. What I mean is that the result here seems wrong (in `expected_custom_quoted_na`). \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-02T13:38:05.937+0000",
                    "updated": "2021-12-02T13:38:05.937+0000",
                    "started": "2021-12-02T13:38:05.937+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "689289",
                    "issueId": "13414337"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414337/worklog/689290",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11836:\nURL: https://github.com/apache/arrow/pull/11836#discussion_r761098989\n\n\n\n##########\nFile path: cpp/src/arrow/csv/writer_test.cc\n##########\n@@ -69,25 +70,49 @@ std::vector<WriterTestParams> GenerateTestCases() {\n                              { \"a\": 124, \"b\\\"\": \"a\\\"\\\"b\\\"\" },\n                              { \"d\": 0 },\n                              { \"e\": 86400000 },\n-                             { \"f\": 1078016523 }])\";\n-  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +       // line 1\n-                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +     // line 2\n-                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +          // line 3\n-                                        R\"(,,,,,)\" + \"\\n\" +                    // line 4\n-                                        R\"(546,\"\",517,,,)\" + \"\\n\" +            // line 5\n-                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +       // line 6\n-                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +          // line 7\n-                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +          // line 8\n-                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\";  // line 9\n+                             { \"f\": 1078016523 },\n+                             { \"b\\\"\": \"NA\" }])\";\n+  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +        // line 1\n+                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +      // line 2\n+                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +           // line 3\n+                                        R\"(,,,,,)\" + \"\\n\" +                     // line 4\n+                                        R\"(546,\"\",517,,,)\" + \"\\n\" +             // line 5\n+                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +        // line 6\n+                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +           // line 7\n+                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +           // line 8\n+                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\" +  // line 9\n+                                        R\"(,\"NA\",,,,)\" + \"\\n\";                  // line 10\n+\n   std::string expected_header = std::string(R\"(\"a\",\"b\"\"\",\"c \",\"d\",\"e\",\"f\")\") + \"\\n\";\n \n+  auto schema_custom_na = schema({field(\"g\", uint64()), field(\"h\", utf8())});\n+\n+  auto populated_batch_custom_na = R\"([{\"g\": 42, \"h\": \"NA\"},\n+                                        {}])\";\n+\n+  std::string expected_custom_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                   R\"(NA,NA)\" + \"\\n\";                  // line 2\n+\n+  std::string expected_custom_quoted_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                          R\"(\"\"NA\"\",\"\"NA\"\")\" + \"\\n\";          // line 2\n+\n   return std::vector<WriterTestParams>{\n-      {abc_schema, \"[]\", DefaultTestOptions(/*header=*/false), \"\"},\n-      {abc_schema, \"[]\", DefaultTestOptions(/*header=*/true), expected_header},\n-      {abc_schema, populated_batch, DefaultTestOptions(/*header=*/false),\n+      {abc_schema, \"[]\", DefaultTestOptions(/*include_header=*/false, /*null_string=*/\"\"),\n+       \"\"},\n+      {abc_schema, \"[]\", DefaultTestOptions(/*include_header=*/true, /*null_string=*/\"\"),\n+       expected_header},\n+      {abc_schema, populated_batch,\n+       DefaultTestOptions(/*include_header=*/false, /*null_string=*/\"\"),\n        expected_without_header},\n-      {abc_schema, populated_batch, DefaultTestOptions(/*header=*/true),\n-       expected_header + expected_without_header}};\n+      {abc_schema, populated_batch,\n+       DefaultTestOptions(/*include_header=*/true, /*null_string=*/\"\"),\n+       expected_header + expected_without_header},\n+      {schema_custom_na, populated_batch_custom_na,\n+       DefaultTestOptions(/*include_header=*/false, /*null_string=*/\"NA\"),\n+       expected_custom_na},\n+      {schema_custom_na, populated_batch_custom_na,\n+       DefaultTestOptions(/*include_header=*/false, /*null_string=*/R\"(\"NA\")\"),\n+       expected_custom_quoted_na}};\n\nReview comment:\n       Pandas can handle it:\r\n   \r\n   ```\r\n   >>> pd.read_csv(\"test2.csv\", dtype={\"g\": np.float64}, na_values=['\"NA\"'], keep_default_na=False)\r\n         g\r\n   0  42.0\r\n   1   NaN\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-02T13:38:08.737+0000",
                    "updated": "2021-12-02T13:38:08.737+0000",
                    "started": "2021-12-02T13:38:08.737+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "689290",
                    "issueId": "13414337"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414337/worklog/689295",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11836:\nURL: https://github.com/apache/arrow/pull/11836#discussion_r761101620\n\n\n\n##########\nFile path: cpp/src/arrow/csv/writer_test.cc\n##########\n@@ -69,25 +70,49 @@ std::vector<WriterTestParams> GenerateTestCases() {\n                              { \"a\": 124, \"b\\\"\": \"a\\\"\\\"b\\\"\" },\n                              { \"d\": 0 },\n                              { \"e\": 86400000 },\n-                             { \"f\": 1078016523 }])\";\n-  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +       // line 1\n-                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +     // line 2\n-                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +          // line 3\n-                                        R\"(,,,,,)\" + \"\\n\" +                    // line 4\n-                                        R\"(546,\"\",517,,,)\" + \"\\n\" +            // line 5\n-                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +       // line 6\n-                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +          // line 7\n-                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +          // line 8\n-                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\";  // line 9\n+                             { \"f\": 1078016523 },\n+                             { \"b\\\"\": \"NA\" }])\";\n+  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +        // line 1\n+                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +      // line 2\n+                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +           // line 3\n+                                        R\"(,,,,,)\" + \"\\n\" +                     // line 4\n+                                        R\"(546,\"\",517,,,)\" + \"\\n\" +             // line 5\n+                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +        // line 6\n+                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +           // line 7\n+                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +           // line 8\n+                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\" +  // line 9\n+                                        R\"(,\"NA\",,,,)\" + \"\\n\";                  // line 10\n+\n   std::string expected_header = std::string(R\"(\"a\",\"b\"\"\",\"c \",\"d\",\"e\",\"f\")\") + \"\\n\";\n \n+  auto schema_custom_na = schema({field(\"g\", uint64()), field(\"h\", utf8())});\n+\n+  auto populated_batch_custom_na = R\"([{\"g\": 42, \"h\": \"NA\"},\n+                                        {}])\";\n+\n+  std::string expected_custom_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                   R\"(NA,NA)\" + \"\\n\";                  // line 2\n+\n+  std::string expected_custom_quoted_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                          R\"(\"\"NA\"\",\"\"NA\"\")\" + \"\\n\";          // line 2\n\nReview comment:\n       Here's with the `csv` module from the Python standard library:\r\n   ```python\r\n   >>> import csv\r\n   >>> lines = ['NA,\"NA\",\"\"NA\"\",\"\"\"NA\"\"\"']\r\n   >>> csv.reader(lines)\r\n   <_csv.reader at 0x7fc19c548f90>\r\n   >>> list(csv.reader(lines))\r\n   [['NA', 'NA', 'NA\"\"', '\"NA\"']]\r\n   ```\r\n   \r\n   As you see, the right quoting-escaping for `\"NA\"` shuold be `\"\"\"NA\"\"\"` (three quotes).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-02T13:41:20.540+0000",
                    "updated": "2021-12-02T13:41:20.540+0000",
                    "started": "2021-12-02T13:41:20.539+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "689295",
                    "issueId": "13414337"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414337/worklog/689296",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11836:\nURL: https://github.com/apache/arrow/pull/11836#discussion_r761101620\n\n\n\n##########\nFile path: cpp/src/arrow/csv/writer_test.cc\n##########\n@@ -69,25 +70,49 @@ std::vector<WriterTestParams> GenerateTestCases() {\n                              { \"a\": 124, \"b\\\"\": \"a\\\"\\\"b\\\"\" },\n                              { \"d\": 0 },\n                              { \"e\": 86400000 },\n-                             { \"f\": 1078016523 }])\";\n-  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +       // line 1\n-                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +     // line 2\n-                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +          // line 3\n-                                        R\"(,,,,,)\" + \"\\n\" +                    // line 4\n-                                        R\"(546,\"\",517,,,)\" + \"\\n\" +            // line 5\n-                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +       // line 6\n-                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +          // line 7\n-                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +          // line 8\n-                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\";  // line 9\n+                             { \"f\": 1078016523 },\n+                             { \"b\\\"\": \"NA\" }])\";\n+  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +        // line 1\n+                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +      // line 2\n+                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +           // line 3\n+                                        R\"(,,,,,)\" + \"\\n\" +                     // line 4\n+                                        R\"(546,\"\",517,,,)\" + \"\\n\" +             // line 5\n+                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +        // line 6\n+                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +           // line 7\n+                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +           // line 8\n+                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\" +  // line 9\n+                                        R\"(,\"NA\",,,,)\" + \"\\n\";                  // line 10\n+\n   std::string expected_header = std::string(R\"(\"a\",\"b\"\"\",\"c \",\"d\",\"e\",\"f\")\") + \"\\n\";\n \n+  auto schema_custom_na = schema({field(\"g\", uint64()), field(\"h\", utf8())});\n+\n+  auto populated_batch_custom_na = R\"([{\"g\": 42, \"h\": \"NA\"},\n+                                        {}])\";\n+\n+  std::string expected_custom_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                   R\"(NA,NA)\" + \"\\n\";                  // line 2\n+\n+  std::string expected_custom_quoted_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                          R\"(\"\"NA\"\",\"\"NA\"\")\" + \"\\n\";          // line 2\n\nReview comment:\n       Here's with the `csv` module from the Python standard library:\r\n   ```python\r\n   >>> import csv\r\n   >>> lines = ['NA,\"NA\",\"\"NA\"\",\"\"\"NA\"\"\"']\r\n   >>> list(csv.reader(lines))\r\n   [['NA', 'NA', 'NA\"\"', '\"NA\"']]\r\n   ```\r\n   \r\n   As you see, the right quoting-escaping for `\"NA\"` shuold be `\"\"\"NA\"\"\"` (three quotes).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-02T13:41:33.332+0000",
                    "updated": "2021-12-02T13:41:33.332+0000",
                    "started": "2021-12-02T13:41:33.332+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "689296",
                    "issueId": "13414337"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414337/worklog/689298",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "johanpel commented on a change in pull request #11836:\nURL: https://github.com/apache/arrow/pull/11836#discussion_r761105171\n\n\n\n##########\nFile path: cpp/src/arrow/csv/writer_test.cc\n##########\n@@ -69,25 +70,49 @@ std::vector<WriterTestParams> GenerateTestCases() {\n                              { \"a\": 124, \"b\\\"\": \"a\\\"\\\"b\\\"\" },\n                              { \"d\": 0 },\n                              { \"e\": 86400000 },\n-                             { \"f\": 1078016523 }])\";\n-  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +       // line 1\n-                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +     // line 2\n-                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +          // line 3\n-                                        R\"(,,,,,)\" + \"\\n\" +                    // line 4\n-                                        R\"(546,\"\",517,,,)\" + \"\\n\" +            // line 5\n-                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +       // line 6\n-                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +          // line 7\n-                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +          // line 8\n-                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\";  // line 9\n+                             { \"f\": 1078016523 },\n+                             { \"b\\\"\": \"NA\" }])\";\n+  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +        // line 1\n+                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +      // line 2\n+                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +           // line 3\n+                                        R\"(,,,,,)\" + \"\\n\" +                     // line 4\n+                                        R\"(546,\"\",517,,,)\" + \"\\n\" +             // line 5\n+                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +        // line 6\n+                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +           // line 7\n+                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +           // line 8\n+                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\" +  // line 9\n+                                        R\"(,\"NA\",,,,)\" + \"\\n\";                  // line 10\n+\n   std::string expected_header = std::string(R\"(\"a\",\"b\"\"\",\"c \",\"d\",\"e\",\"f\")\") + \"\\n\";\n \n+  auto schema_custom_na = schema({field(\"g\", uint64()), field(\"h\", utf8())});\n+\n+  auto populated_batch_custom_na = R\"([{\"g\": 42, \"h\": \"NA\"},\n+                                        {}])\";\n+\n+  std::string expected_custom_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                   R\"(NA,NA)\" + \"\\n\";                  // line 2\n+\n+  std::string expected_custom_quoted_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                          R\"(\"\"NA\"\",\"\"NA\"\")\" + \"\\n\";          // line 2\n+\n   return std::vector<WriterTestParams>{\n-      {abc_schema, \"[]\", DefaultTestOptions(/*header=*/false), \"\"},\n-      {abc_schema, \"[]\", DefaultTestOptions(/*header=*/true), expected_header},\n-      {abc_schema, populated_batch, DefaultTestOptions(/*header=*/false),\n+      {abc_schema, \"[]\", DefaultTestOptions(/*include_header=*/false, /*null_string=*/\"\"),\n+       \"\"},\n+      {abc_schema, \"[]\", DefaultTestOptions(/*include_header=*/true, /*null_string=*/\"\"),\n+       expected_header},\n+      {abc_schema, populated_batch,\n+       DefaultTestOptions(/*include_header=*/false, /*null_string=*/\"\"),\n        expected_without_header},\n-      {abc_schema, populated_batch, DefaultTestOptions(/*header=*/true),\n-       expected_header + expected_without_header}};\n+      {abc_schema, populated_batch,\n+       DefaultTestOptions(/*include_header=*/true, /*null_string=*/\"\"),\n+       expected_header + expected_without_header},\n+      {schema_custom_na, populated_batch_custom_na,\n+       DefaultTestOptions(/*include_header=*/false, /*null_string=*/\"NA\"),\n+       expected_custom_na},\n+      {schema_custom_na, populated_batch_custom_na,\n+       DefaultTestOptions(/*include_header=*/false, /*null_string=*/R\"(\"NA\")\"),\n+       expected_custom_quoted_na}};\n\nReview comment:\n       If for some reason the user uses `\"NA\"` (including quotes, so four characters) as the null value, whatever reads it would need to understand that after removing the escapes this does not represent the string 'NA' (two chars), but would need to parse `\"NA\"` as a null.\r\n   \r\n   If we actually want to prevent users from making such a mistake we should change the CSV write option struct to have an API for the null value string that checks it for quotes and rejects it if it does.\r\n   \r\n   The point is if you specify something weird as a null value for the writer, but not for the reader, the latter will not recognize it as a null.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-02T13:45:29.145+0000",
                    "updated": "2021-12-02T13:45:29.145+0000",
                    "started": "2021-12-02T13:45:29.145+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "689298",
                    "issueId": "13414337"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414337/worklog/689301",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11836:\nURL: https://github.com/apache/arrow/pull/11836#discussion_r761106420\n\n\n\n##########\nFile path: cpp/src/arrow/csv/writer_test.cc\n##########\n@@ -69,25 +70,49 @@ std::vector<WriterTestParams> GenerateTestCases() {\n                              { \"a\": 124, \"b\\\"\": \"a\\\"\\\"b\\\"\" },\n                              { \"d\": 0 },\n                              { \"e\": 86400000 },\n-                             { \"f\": 1078016523 }])\";\n-  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +       // line 1\n-                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +     // line 2\n-                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +          // line 3\n-                                        R\"(,,,,,)\" + \"\\n\" +                    // line 4\n-                                        R\"(546,\"\",517,,,)\" + \"\\n\" +            // line 5\n-                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +       // line 6\n-                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +          // line 7\n-                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +          // line 8\n-                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\";  // line 9\n+                             { \"f\": 1078016523 },\n+                             { \"b\\\"\": \"NA\" }])\";\n+  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +        // line 1\n+                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +      // line 2\n+                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +           // line 3\n+                                        R\"(,,,,,)\" + \"\\n\" +                     // line 4\n+                                        R\"(546,\"\",517,,,)\" + \"\\n\" +             // line 5\n+                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +        // line 6\n+                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +           // line 7\n+                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +           // line 8\n+                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\" +  // line 9\n+                                        R\"(,\"NA\",,,,)\" + \"\\n\";                  // line 10\n+\n   std::string expected_header = std::string(R\"(\"a\",\"b\"\"\",\"c \",\"d\",\"e\",\"f\")\") + \"\\n\";\n \n+  auto schema_custom_na = schema({field(\"g\", uint64()), field(\"h\", utf8())});\n+\n+  auto populated_batch_custom_na = R\"([{\"g\": 42, \"h\": \"NA\"},\n+                                        {}])\";\n+\n+  std::string expected_custom_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                   R\"(NA,NA)\" + \"\\n\";                  // line 2\n+\n+  std::string expected_custom_quoted_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                          R\"(\"\"NA\"\",\"\"NA\"\")\" + \"\\n\";          // line 2\n+\n   return std::vector<WriterTestParams>{\n-      {abc_schema, \"[]\", DefaultTestOptions(/*header=*/false), \"\"},\n-      {abc_schema, \"[]\", DefaultTestOptions(/*header=*/true), expected_header},\n-      {abc_schema, populated_batch, DefaultTestOptions(/*header=*/false),\n+      {abc_schema, \"[]\", DefaultTestOptions(/*include_header=*/false, /*null_string=*/\"\"),\n+       \"\"},\n+      {abc_schema, \"[]\", DefaultTestOptions(/*include_header=*/true, /*null_string=*/\"\"),\n+       expected_header},\n+      {abc_schema, populated_batch,\n+       DefaultTestOptions(/*include_header=*/false, /*null_string=*/\"\"),\n        expected_without_header},\n-      {abc_schema, populated_batch, DefaultTestOptions(/*header=*/true),\n-       expected_header + expected_without_header}};\n+      {abc_schema, populated_batch,\n+       DefaultTestOptions(/*include_header=*/true, /*null_string=*/\"\"),\n+       expected_header + expected_without_header},\n+      {schema_custom_na, populated_batch_custom_na,\n+       DefaultTestOptions(/*include_header=*/false, /*null_string=*/\"NA\"),\n+       expected_custom_na},\n+      {schema_custom_na, populated_batch_custom_na,\n+       DefaultTestOptions(/*include_header=*/false, /*null_string=*/R\"(\"NA\")\"),\n+       expected_custom_quoted_na}};\n\nReview comment:\n       Right, I'm just pointing out that the Arrow CSV reader doesn't appear to handle this (or maybe I haven't found the right set of options).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-02T13:47:00.705+0000",
                    "updated": "2021-12-02T13:47:00.705+0000",
                    "started": "2021-12-02T13:47:00.704+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "689301",
                    "issueId": "13414337"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414337/worklog/689309",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #11836:\nURL: https://github.com/apache/arrow/pull/11836#issuecomment-984648242\n\n\n   Note we could simply disallow quotes in the null string. There's probably no use case for them.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-02T13:54:04.561+0000",
                    "updated": "2021-12-02T13:54:04.561+0000",
                    "started": "2021-12-02T13:54:04.561+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "689309",
                    "issueId": "13414337"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414337/worklog/689311",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11836:\nURL: https://github.com/apache/arrow/pull/11836#discussion_r761101620\n\n\n\n##########\nFile path: cpp/src/arrow/csv/writer_test.cc\n##########\n@@ -69,25 +70,49 @@ std::vector<WriterTestParams> GenerateTestCases() {\n                              { \"a\": 124, \"b\\\"\": \"a\\\"\\\"b\\\"\" },\n                              { \"d\": 0 },\n                              { \"e\": 86400000 },\n-                             { \"f\": 1078016523 }])\";\n-  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +       // line 1\n-                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +     // line 2\n-                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +          // line 3\n-                                        R\"(,,,,,)\" + \"\\n\" +                    // line 4\n-                                        R\"(546,\"\",517,,,)\" + \"\\n\" +            // line 5\n-                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +       // line 6\n-                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +          // line 7\n-                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +          // line 8\n-                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\";  // line 9\n+                             { \"f\": 1078016523 },\n+                             { \"b\\\"\": \"NA\" }])\";\n+  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +        // line 1\n+                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +      // line 2\n+                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +           // line 3\n+                                        R\"(,,,,,)\" + \"\\n\" +                     // line 4\n+                                        R\"(546,\"\",517,,,)\" + \"\\n\" +             // line 5\n+                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +        // line 6\n+                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +           // line 7\n+                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +           // line 8\n+                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\" +  // line 9\n+                                        R\"(,\"NA\",,,,)\" + \"\\n\";                  // line 10\n+\n   std::string expected_header = std::string(R\"(\"a\",\"b\"\"\",\"c \",\"d\",\"e\",\"f\")\") + \"\\n\";\n \n+  auto schema_custom_na = schema({field(\"g\", uint64()), field(\"h\", utf8())});\n+\n+  auto populated_batch_custom_na = R\"([{\"g\": 42, \"h\": \"NA\"},\n+                                        {}])\";\n+\n+  std::string expected_custom_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                   R\"(NA,NA)\" + \"\\n\";                  // line 2\n+\n+  std::string expected_custom_quoted_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                          R\"(\"\"NA\"\",\"\"NA\"\")\" + \"\\n\";          // line 2\n\nReview comment:\n       Here's with the `csv` module from the Python standard library:\r\n   ```python\r\n   >>> import csv\r\n   >>> lines = ['NA,\"NA\",\"\"NA\"\",\"\"\"NA\"\"\"']\r\n   >>> list(csv.reader(lines))\r\n   [['NA', 'NA', 'NA\"\"', '\"NA\"']]\r\n   ```\r\n   \r\n   As you see, the right quoting-escaping for `\"NA\"` should be `\"\"\"NA\"\"\"` (three quotes).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-02T13:54:10.973+0000",
                    "updated": "2021-12-02T13:54:10.973+0000",
                    "started": "2021-12-02T13:54:10.973+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "689311",
                    "issueId": "13414337"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414337/worklog/689313",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "johanpel commented on a change in pull request #11836:\nURL: https://github.com/apache/arrow/pull/11836#discussion_r761115810\n\n\n\n##########\nFile path: cpp/src/arrow/csv/writer_test.cc\n##########\n@@ -69,25 +70,49 @@ std::vector<WriterTestParams> GenerateTestCases() {\n                              { \"a\": 124, \"b\\\"\": \"a\\\"\\\"b\\\"\" },\n                              { \"d\": 0 },\n                              { \"e\": 86400000 },\n-                             { \"f\": 1078016523 }])\";\n-  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +       // line 1\n-                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +     // line 2\n-                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +          // line 3\n-                                        R\"(,,,,,)\" + \"\\n\" +                    // line 4\n-                                        R\"(546,\"\",517,,,)\" + \"\\n\" +            // line 5\n-                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +       // line 6\n-                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +          // line 7\n-                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +          // line 8\n-                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\";  // line 9\n+                             { \"f\": 1078016523 },\n+                             { \"b\\\"\": \"NA\" }])\";\n+  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +        // line 1\n+                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +      // line 2\n+                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +           // line 3\n+                                        R\"(,,,,,)\" + \"\\n\" +                     // line 4\n+                                        R\"(546,\"\",517,,,)\" + \"\\n\" +             // line 5\n+                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +        // line 6\n+                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +           // line 7\n+                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +           // line 8\n+                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\" +  // line 9\n+                                        R\"(,\"NA\",,,,)\" + \"\\n\";                  // line 10\n+\n   std::string expected_header = std::string(R\"(\"a\",\"b\"\"\",\"c \",\"d\",\"e\",\"f\")\") + \"\\n\";\n \n+  auto schema_custom_na = schema({field(\"g\", uint64()), field(\"h\", utf8())});\n+\n+  auto populated_batch_custom_na = R\"([{\"g\": 42, \"h\": \"NA\"},\n+                                        {}])\";\n+\n+  std::string expected_custom_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                   R\"(NA,NA)\" + \"\\n\";                  // line 2\n+\n+  std::string expected_custom_quoted_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                          R\"(\"\"NA\"\",\"\"NA\"\")\" + \"\\n\";          // line 2\n\nReview comment:\n       So the point is that if the value that represents null is `\"NA\"`, if we would render it as `\"\"\"NA\"\"\"`, this would imply this is a string (because of the outer quotes) and the string value is obtained after unescaping the inner quotes, which would be would be `\"NA\"` (:string). But is not a string, it's `\"NA\"` (:null).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-02T13:57:41.372+0000",
                    "updated": "2021-12-02T13:57:41.372+0000",
                    "started": "2021-12-02T13:57:41.372+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "689313",
                    "issueId": "13414337"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414337/worklog/689314",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "johanpel commented on pull request #11836:\nURL: https://github.com/apache/arrow/pull/11836#issuecomment-984652511\n\n\n   > Note we could simply disallow quotes in the null string. There's probably no use case for them.\r\n   \r\n   That does make everything a lot easier.\r\n   I'll update the PR with this suggestion.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-02T13:59:06.628+0000",
                    "updated": "2021-12-02T13:59:06.628+0000",
                    "started": "2021-12-02T13:59:06.628+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "689314",
                    "issueId": "13414337"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414337/worklog/689419",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11836:\nURL: https://github.com/apache/arrow/pull/11836#discussion_r761222585\n\n\n\n##########\nFile path: cpp/src/arrow/csv/writer.cc\n##########\n@@ -140,12 +142,15 @@ char* EscapeReverse(arrow::util::string_view s, char* out_end) {\n // from a cast does not require quoting or escaping.\n class UnquotedColumnPopulator : public ColumnPopulator {\n  public:\n-  explicit UnquotedColumnPopulator(MemoryPool* memory_pool, char end_char)\n-      : ColumnPopulator(memory_pool, end_char) {}\n+  explicit UnquotedColumnPopulator(MemoryPool* memory_pool, char end_char,\n+                                   std::shared_ptr<Buffer> null_string_)\n+      : ColumnPopulator(memory_pool, end_char, std::move(null_string_)) {}\n \n   Status UpdateRowLengths(int32_t* row_lengths) override {\n     for (int x = 0; x < casted_array_->length(); x++) {\n-      row_lengths[x] += casted_array_->value_length(x);\n+      row_lengths[x] += casted_array_->value_length(x) == 0\n\nReview comment:\n       Hmm. Should this instead check `casted_array_->IsNull(x)`? While I don't think any kernels would generate data like this, `value_length` may not be zero for a null string.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-02T15:49:28.677+0000",
                    "updated": "2021-12-02T15:49:28.677+0000",
                    "started": "2021-12-02T15:49:28.676+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "689419",
                    "issueId": "13414337"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414337/worklog/689506",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11836:\nURL: https://github.com/apache/arrow/pull/11836#discussion_r761305684\n\n\n\n##########\nFile path: cpp/src/arrow/csv/writer.cc\n##########\n@@ -289,11 +306,23 @@ class CSVWriterImpl : public ipc::RecordBatchWriter {\n       io::OutputStream* sink, std::shared_ptr<io::OutputStream> owned_sink,\n       std::shared_ptr<Schema> schema, const WriteOptions& options) {\n     RETURN_NOT_OK(options.Validate());\n+    // Reject null string values that contain quotes.\n+    if (CountEscapes(options.null_string) != 0) {\n+      return Status::Invalid(\"CSV null value string cannot contain quotes.\",\n+                             options.null_string);\n\nReview comment:\n       This will result in a formatted message such as `CSV null value string cannot contain quotes.ab\"c`, perhaps arrange it a bit better? Or we can simply omit the actual `null_string` value since it is a user-defined parameter anyway.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-02T17:14:25.153+0000",
                    "updated": "2021-12-02T17:14:25.153+0000",
                    "started": "2021-12-02T17:14:25.153+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "689506",
                    "issueId": "13414337"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414337/worklog/689507",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #11836:\nURL: https://github.com/apache/arrow/pull/11836#discussion_r761306739\n\n\n\n##########\nFile path: cpp/src/arrow/csv/writer_test.cc\n##########\n@@ -69,25 +70,45 @@ std::vector<WriterTestParams> GenerateTestCases() {\n                              { \"a\": 124, \"b\\\"\": \"a\\\"\\\"b\\\"\" },\n                              { \"d\": 0 },\n                              { \"e\": 86400000 },\n-                             { \"f\": 1078016523 }])\";\n-  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +       // line 1\n-                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +     // line 2\n-                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +          // line 3\n-                                        R\"(,,,,,)\" + \"\\n\" +                    // line 4\n-                                        R\"(546,\"\",517,,,)\" + \"\\n\" +            // line 5\n-                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +       // line 6\n-                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +          // line 7\n-                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +          // line 8\n-                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\";  // line 9\n+                             { \"f\": 1078016523 },\n+                             { \"b\\\"\": \"NA\" }])\";\n+  std::string expected_without_header = std::string(\"1,,-1,,,\") + \"\\n\" +        // line 1\n+                                        R\"(1,\"abc\"\"efg\",2324,,,)\" + \"\\n\" +      // line 2\n+                                        R\"(,\"abcd\",5467,,,)\" + \"\\n\" +           // line 3\n+                                        R\"(,,,,,)\" + \"\\n\" +                     // line 4\n+                                        R\"(546,\"\",517,,,)\" + \"\\n\" +             // line 5\n+                                        R\"(124,\"a\"\"\"\"b\"\"\",,,,)\" + \"\\n\" +        // line 6\n+                                        R\"(,,,1970-01-01,,)\" + \"\\n\" +           // line 7\n+                                        R\"(,,,,1970-01-02,)\" + \"\\n\" +           // line 8\n+                                        R\"(,,,,,2004-02-29 01:02:03)\" + \"\\n\" +  // line 9\n+                                        R\"(,\"NA\",,,,)\" + \"\\n\";                  // line 10\n+\n   std::string expected_header = std::string(R\"(\"a\",\"b\"\"\",\"c \",\"d\",\"e\",\"f\")\") + \"\\n\";\n \n+  auto schema_custom_na = schema({field(\"g\", uint64()), field(\"h\", utf8())});\n+\n+  auto populated_batch_custom_na = R\"([{\"g\": 42, \"h\": \"NA\"},\n+                                                  { },\n+                                                  {\"g\": 1337, \"h\": \"\\\"NA\\\"\"}])\";\n+\n+  std::string expected_custom_na = std::string(R\"(42,\"NA\")\") + \"\\n\" +  // line 1\n+                                   R\"(NA,NA)\" + \"\\n\" +                 // line 2\n+                                   R\"(1337,\"\"\"NA\"\"\")\" + \"\\n\";            // line 3\n+\n   return std::vector<WriterTestParams>{\n-      {abc_schema, \"[]\", DefaultTestOptions(/*header=*/false), \"\"},\n-      {abc_schema, \"[]\", DefaultTestOptions(/*header=*/true), expected_header},\n-      {abc_schema, populated_batch, DefaultTestOptions(/*header=*/false),\n+      {abc_schema, \"[]\", DefaultTestOptions(/*include_header=*/false, /*null_string=*/\"\"),\n+       \"\"},\n+      {abc_schema, \"[]\", DefaultTestOptions(/*include_header=*/true, /*null_string=*/\"\"),\n+       expected_header},\n+      {abc_schema, populated_batch,\n+       DefaultTestOptions(/*include_header=*/false, /*null_string=*/\"\"),\n        expected_without_header},\n-      {abc_schema, populated_batch, DefaultTestOptions(/*header=*/true),\n-       expected_header + expected_without_header}};\n+      {abc_schema, populated_batch,\n+       DefaultTestOptions(/*include_header=*/true, /*null_string=*/\"\"),\n+       expected_header + expected_without_header},\n+      {schema_custom_na, populated_batch_custom_na,\n+       DefaultTestOptions(/*include_header=*/false, /*null_string=*/\"NA\"),\n+       expected_custom_na}};\n }\n\nReview comment:\n       Also add a test that putting a quote in `null_string` returns an error? You can use e.g. `ASSERT_RAISES` for that.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-12-02T17:15:40.138+0000",
                    "updated": "2021-12-02T17:15:40.138+0000",
                    "started": "2021-12-02T17:15:40.138+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "689507",
                    "issueId": "13414337"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 18600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@721a85fa[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6e86e376[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@d859889[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5441571c[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@147d8cb0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@89daf36[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29fd2f7c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@775a74e8[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@fba7ebf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6a3b8461[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2afdc095[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@e240c16[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 18600,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Dec 03 17:59:59 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-12-03T17:59:59.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14903/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2021-11-29T15:45:56.000+0000",
        "updated": "2021-12-05T11:21:10.000+0000",
        "timeoriginalestimate": null,
        "description": "This would allow the user to control how missing values are written to a CSV file using the R {{write_csv_arrow()}} functionality.\r\n\r\n{{{}na{}}}: string used for missing values. Defaults to {{{}NA{}}}. Missing values are never quoted; strings with the same value as {{na}} will always be quoted.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 18600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Enable CSV Writer to control string to be used for missing data",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414337/comment/17451365",
                    "id": "17451365",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Today it appears we simply print nothing at all.  So you would get something like...\r\n\r\n{code}2,3,,5{code}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-11-30T21:26:51.099+0000",
                    "updated": "2021-11-30T21:26:51.099+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414337/comment/17452025",
                    "id": "17452025",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=johanpel",
                        "name": "johanpel",
                        "key": "johanpel",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Johan Peltenburg",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Getting close to a fix.\r\nThinking about this - I'd like to suggest keeping the default behavior of\u00a0 printing nothing at all for null values to prevent affecting existing user applications.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=johanpel",
                        "name": "johanpel",
                        "key": "johanpel",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
                        },
                        "displayName": "Johan Peltenburg",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-12-01T20:48:25.920+0000",
                    "updated": "2021-12-01T20:48:25.920+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414337/comment/17452140",
                    "id": "17452140",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "I agree that a blank string should be the default in the C++ code, that round-trips better.  If the R bindings want to change the default to \"NA\" then they can still do that.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-12-02T02:44:39.324+0000",
                    "updated": "2021-12-02T02:44:39.324+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414337/comment/17452287",
                    "id": "17452287",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=dragosmg",
                        "name": "dragosmg",
                        "key": "dragosmg",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34061",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34061",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34061",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34061"
                        },
                        "displayName": "Drago\u0219 Moldovan-Gr\u00fcnfeld",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Yep, sounds reasonable. Thanks.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=dragosmg",
                        "name": "dragosmg",
                        "key": "dragosmg",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34061",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34061",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34061",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34061"
                        },
                        "displayName": "Drago\u0219 Moldovan-Gr\u00fcnfeld",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-12-02T10:13:13.168+0000",
                    "updated": "2021-12-02T10:13:21.983+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13414337/comment/17453158",
                    "id": "17453158",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 11836\n[https://github.com/apache/arrow/pull/11836]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-12-03T17:59:59.179+0000",
                    "updated": "2021-12-03T17:59:59.179+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|z0x69s:",
        "customfield_12314139": null
    }
}