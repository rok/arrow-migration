{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13399063",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399063",
    "key": "ARROW-13879",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350591",
                "id": "12350591",
                "description": "",
                "name": "7.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-02-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "kernel",
            "pull-request-available",
            "types"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12623606",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12623606",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13399059",
                    "key": "ARROW-13878",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399059",
                    "fields": {
                        "summary": "[C++] Add fixed_size_binary support to compute functions",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            },
            {
                "id": "12623728",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12623728",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13403734",
                    "key": "ARROW-14151",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13403734",
                    "fields": {
                        "summary": "[C++] Mixed support for binary types in ASCII string functions",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            },
            {
                "id": "12625297",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12625297",
                "type": {
                    "id": "12310760",
                    "name": "Testing",
                    "inward": "Discovered while testing",
                    "outward": "Testing discovered",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310760"
                },
                "outwardIssue": {
                    "id": "13408549",
                    "key": "ARROW-14481",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13408549",
                    "fields": {
                        "summary": "[C++] Investigate recent regressions in some utf8 kernel benchmarks",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
            "name": "edponce",
            "key": "edponce",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
            },
            "displayName": "Eduardo Ponce",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 35400,
            "total": 35400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 35400,
            "total": 35400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13879/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 59,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399063/worklog/655162",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce opened a new pull request #11233:\nURL: https://github.com/apache/arrow/pull/11233\n\n\n   Extends variable-width binary types support for string functions:\r\n   * match_substring[_regex]\r\n   * match_like\r\n   * starts/ends_with\r\n   * extract_regex\r\n   * split_pattern[_regex]\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-25T06:25:28.381+0000",
                    "updated": "2021-09-25T06:25:28.381+0000",
                    "started": "2021-09-25T06:25:28.381+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "655162",
                    "issueId": "13399063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399063/worklog/655163",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11233:\nURL: https://github.com/apache/arrow/pull/11233#issuecomment-927019291\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-25T06:25:52.668+0000",
                    "updated": "2021-09-25T06:25:52.668+0000",
                    "started": "2021-09-25T06:25:52.668+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "655163",
                    "issueId": "13399063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399063/worklog/655332",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on pull request #11233:\nURL: https://github.com/apache/arrow/pull/11233#issuecomment-927457237\n\n\n   @lidavidm Since you are working on [ARROW-13878](https://issues.apache.org/jira/browse/ARROW-13878) which is related, please review this PR. This PR only adds variable-width binary support.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-27T02:24:50.806+0000",
                    "updated": "2021-09-27T02:24:50.806+0000",
                    "started": "2021-09-27T02:24:50.806+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "655332",
                    "issueId": "13399063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399063/worklog/655497",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11233:\nURL: https://github.com/apache/arrow/pull/11233#discussion_r716671796\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -2201,11 +2201,11 @@ void AddSplitWhitespaceAscii(FunctionRegistry* registry) {\n   auto func =\n       std::make_shared<ScalarFunction>(\"ascii_split_whitespace\", Arity::Unary(),\n                                        &ascii_split_whitespace_doc, &default_options);\n-  using t32 = SplitWhitespaceAsciiExec<StringType, ListType>;\n-  using t64 = SplitWhitespaceAsciiExec<LargeStringType, ListType>;\n-  DCHECK_OK(func->AddKernel({utf8()}, {list(utf8())}, t32::Exec, t32::State::Init));\n-  DCHECK_OK(\n-      func->AddKernel({large_utf8()}, {list(large_utf8())}, t64::Exec, t64::State::Init));\n+\n+  for (const auto& ty : StringTypes()) {\n+    auto exec = GenerateTypeAgnosticVarBinary<SplitWhitespaceAsciiExec, ListType>(ty);\n+    DCHECK_OK(func->AddKernel({ty}, {list(ty)}, exec, SplitState::Init));\n+  }\n\nReview comment:\n       Ditto - I don't think this needs to support binary values.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string_test.cc\n##########\n@@ -724,7 +724,7 @@ TYPED_TEST(TestStringKernels, IsUpperAscii) {\n                    \"[false, null, false, true, true, false, false]\");\n }\n \n-TYPED_TEST(TestStringKernels, MatchSubstring) {\n+TYPED_TEST(TestBinaryKernels, MatchSubstring) {\n\nReview comment:\n       For any test that now includes binary values, we need to test invalid UTF-8.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -2868,8 +2865,8 @@ struct ExtractRegex : public ExtractRegexBase {\n       if (input.is_valid && Match(util::string_view(*input.value))) {\n         result->value.reserve(group_count);\n         for (int i = 0; i < group_count; i++) {\n-          result->value.push_back(\n-              std::make_shared<ScalarType>(found_values[i].as_string()));\n+          result->value.push_back(std::make_shared<ScalarType>(\n+              std::make_shared<Buffer>(ToStringView(found_values[i]))));\n\nReview comment:\n       This isn't safe, the string_view constructor is non-owning. We need to allocate a buffer/string here.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -1628,12 +1627,10 @@ const FunctionDoc utf8_slice_codeunits_doc(\n void AddSlice(FunctionRegistry* registry) {\n   auto func = std::make_shared<ScalarFunction>(\"utf8_slice_codeunits\", Arity::Unary(),\n                                                &utf8_slice_codeunits_doc);\n-  using t32 = SliceCodeunits<StringType>;\n-  using t64 = SliceCodeunits<LargeStringType>;\n-  DCHECK_OK(\n-      func->AddKernel({utf8()}, utf8(), t32::Exec, SliceCodeunitsTransform::State::Init));\n-  DCHECK_OK(func->AddKernel({large_utf8()}, large_utf8(), t64::Exec,\n-                            SliceCodeunitsTransform::State::Init));\n+  for (const auto& ty : StringTypes()) {\n+    auto exec = GenerateTypeAgnosticVarBinary<SliceCodeunits>(ty);\n\nReview comment:\n       This function is named utf8_slice_codeunits, it shouldn't support binary types. \"codeunits\" doesn't make sense on a non-Unicode string and the implementation uses UTF-8 functions to count bytes; it'll give incorrect results on an arbitrary binary string.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -1132,52 +1132,51 @@ void AddMatchSubstring(FunctionRegistry* registry) {\n   {\n     auto func = std::make_shared<ScalarFunction>(\"match_substring\", Arity::Unary(),\n                                                  &match_substring_doc);\n-    auto exec_32 = MatchSubstring<StringType, PlainSubstringMatcher>::Exec;\n-    auto exec_64 = MatchSubstring<LargeStringType, PlainSubstringMatcher>::Exec;\n-    DCHECK_OK(func->AddKernel({utf8()}, boolean(), exec_32, MatchSubstringState::Init));\n-    DCHECK_OK(\n-        func->AddKernel({large_utf8()}, boolean(), exec_64, MatchSubstringState::Init));\n+    for (const auto& ty : BaseBinaryTypes()) {\n+      auto exec =\n+          GenerateTypeAgnosticVarBinaryBase<MatchSubstring, PlainSubstringMatcher>(ty);\n+      DCHECK_OK(func->AddKernel({ty}, boolean(), exec, MatchSubstringState::Init));\n+    }\n     DCHECK_OK(registry->AddFunction(std::move(func)));\n   }\n   {\n     auto func = std::make_shared<ScalarFunction>(\"starts_with\", Arity::Unary(),\n                                                  &match_substring_doc);\n-    auto exec_32 = MatchSubstring<StringType, PlainStartsWithMatcher>::Exec;\n-    auto exec_64 = MatchSubstring<LargeStringType, PlainStartsWithMatcher>::Exec;\n-    DCHECK_OK(func->AddKernel({utf8()}, boolean(), exec_32, MatchSubstringState::Init));\n-    DCHECK_OK(\n-        func->AddKernel({large_utf8()}, boolean(), exec_64, MatchSubstringState::Init));\n+    for (const auto& ty : BaseBinaryTypes()) {\n+      auto exec =\n+          GenerateTypeAgnosticVarBinaryBase<MatchSubstring, PlainStartsWithMatcher>(ty);\n+      DCHECK_OK(func->AddKernel({ty}, boolean(), exec, MatchSubstringState::Init));\n+    }\n\nReview comment:\n       I think for anything which supports an ignore_case flag, it should be disabled or ignored for the regex matcher. Note RE2 assumes input is either UTF-8 or Latin1 encoded; we should also test invalid UTF-8.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -2201,11 +2201,11 @@ void AddSplitWhitespaceAscii(FunctionRegistry* registry) {\n   auto func =\n       std::make_shared<ScalarFunction>(\"ascii_split_whitespace\", Arity::Unary(),\n                                        &ascii_split_whitespace_doc, &default_options);\n-  using t32 = SplitWhitespaceAsciiExec<StringType, ListType>;\n-  using t64 = SplitWhitespaceAsciiExec<LargeStringType, ListType>;\n-  DCHECK_OK(func->AddKernel({utf8()}, {list(utf8())}, t32::Exec, t32::State::Init));\n-  DCHECK_OK(\n-      func->AddKernel({large_utf8()}, {list(large_utf8())}, t64::Exec, t64::State::Init));\n+\n+  for (const auto& ty : StringTypes()) {\n+    auto exec = GenerateTypeAgnosticVarBinary<SplitWhitespaceAsciiExec, ListType>(ty);\n+    DCHECK_OK(func->AddKernel({ty}, {list(ty)}, exec, SplitState::Init));\n+  }\n\nReview comment:\n       (etc. for kernels below labeled ascii_ or utf8_.)\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.h\n##########\n@@ -1188,6 +1188,24 @@ ArrayKernelExec GenerateTypeAgnosticVarBinaryBase(detail::GetTypeId get_id) {\n   }\n }\n \n+// similar to GenerateTypeAgnosticPrimitive, but for variable binary and string types\n+template <template <typename...> class Generator, typename... Args>\n+ArrayKernelExec GenerateTypeAgnosticVarBinary(detail::GetTypeId get_id) {\n\nReview comment:\n       This is also essentially the same as GenerateVarBinary (we need a way to differentiate the kernels that have a Type0 argument)\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -2868,8 +2865,8 @@ struct ExtractRegex : public ExtractRegexBase {\n       if (input.is_valid && Match(util::string_view(*input.value))) {\n         result->value.reserve(group_count);\n         for (int i = 0; i < group_count; i++) {\n-          result->value.push_back(\n-              std::make_shared<ScalarType>(found_values[i].as_string()));\n+          result->value.push_back(std::make_shared<ScalarType>(\n+              std::make_shared<Buffer>(ToStringView(found_values[i]))));\n\nReview comment:\n       (I suppose it works in tests because RE2 might be returning a slice of the input?)\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -1132,52 +1132,51 @@ void AddMatchSubstring(FunctionRegistry* registry) {\n   {\n     auto func = std::make_shared<ScalarFunction>(\"match_substring\", Arity::Unary(),\n                                                  &match_substring_doc);\n-    auto exec_32 = MatchSubstring<StringType, PlainSubstringMatcher>::Exec;\n-    auto exec_64 = MatchSubstring<LargeStringType, PlainSubstringMatcher>::Exec;\n-    DCHECK_OK(func->AddKernel({utf8()}, boolean(), exec_32, MatchSubstringState::Init));\n-    DCHECK_OK(\n-        func->AddKernel({large_utf8()}, boolean(), exec_64, MatchSubstringState::Init));\n+    for (const auto& ty : BaseBinaryTypes()) {\n+      auto exec =\n+          GenerateTypeAgnosticVarBinaryBase<MatchSubstring, PlainSubstringMatcher>(ty);\n+      DCHECK_OK(func->AddKernel({ty}, boolean(), exec, MatchSubstringState::Init));\n+    }\n     DCHECK_OK(registry->AddFunction(std::move(func)));\n   }\n   {\n     auto func = std::make_shared<ScalarFunction>(\"starts_with\", Arity::Unary(),\n                                                  &match_substring_doc);\n-    auto exec_32 = MatchSubstring<StringType, PlainStartsWithMatcher>::Exec;\n-    auto exec_64 = MatchSubstring<LargeStringType, PlainStartsWithMatcher>::Exec;\n-    DCHECK_OK(func->AddKernel({utf8()}, boolean(), exec_32, MatchSubstringState::Init));\n-    DCHECK_OK(\n-        func->AddKernel({large_utf8()}, boolean(), exec_64, MatchSubstringState::Init));\n+    for (const auto& ty : BaseBinaryTypes()) {\n+      auto exec =\n+          GenerateTypeAgnosticVarBinaryBase<MatchSubstring, PlainStartsWithMatcher>(ty);\n+      DCHECK_OK(func->AddKernel({ty}, boolean(), exec, MatchSubstringState::Init));\n+    }\n\nReview comment:\n       I believe we would also need to configure RE2 to assume Latin1 instead of UTF-8 on binary data as a result.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.h\n##########\n@@ -1188,6 +1188,24 @@ ArrayKernelExec GenerateTypeAgnosticVarBinaryBase(detail::GetTypeId get_id) {\n   }\n }\n \n+// similar to GenerateTypeAgnosticPrimitive, but for variable binary and string types\n+template <template <typename...> class Generator, typename... Args>\n+ArrayKernelExec GenerateTypeAgnosticVarBinary(detail::GetTypeId get_id) {\n\nReview comment:\n       This is no longer type agnostic. \n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -3421,41 +3415,45 @@ const FunctionDoc utf8_length_doc(\"Compute UTF8 string lengths\",\n \n void AddStrptime(FunctionRegistry* registry) {\n   auto func = std::make_shared<ScalarFunction>(\"strptime\", Arity::Unary(), &strptime_doc);\n\nReview comment:\n       Hmm, strptime explicitly works on string inputs - I don't think it makes sense to try to parse timestamps from a binary string? (Unless you have odd data with binary delimiters?) \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-27T13:27:39.081+0000",
                    "updated": "2021-09-27T13:27:39.081+0000",
                    "started": "2021-09-27T13:27:39.081+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "655497",
                    "issueId": "13399063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399063/worklog/655591",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11233:\nURL: https://github.com/apache/arrow/pull/11233#discussion_r716854626\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -1628,12 +1627,10 @@ const FunctionDoc utf8_slice_codeunits_doc(\n void AddSlice(FunctionRegistry* registry) {\n   auto func = std::make_shared<ScalarFunction>(\"utf8_slice_codeunits\", Arity::Unary(),\n                                                &utf8_slice_codeunits_doc);\n-  using t32 = SliceCodeunits<StringType>;\n-  using t64 = SliceCodeunits<LargeStringType>;\n-  DCHECK_OK(\n-      func->AddKernel({utf8()}, utf8(), t32::Exec, SliceCodeunitsTransform::State::Init));\n-  DCHECK_OK(func->AddKernel({large_utf8()}, large_utf8(), t64::Exec,\n-                            SliceCodeunitsTransform::State::Init));\n+  for (const auto& ty : StringTypes()) {\n+    auto exec = GenerateTypeAgnosticVarBinary<SliceCodeunits>(ty);\n\nReview comment:\n       Only kernels for `StringTypes` are supported. Probably is the name of the GD `GenerateTypeAgnosticVarBinary` that creates confusion. `GenerateTypeAgnosticVarBinary` is not really `TypeAgnostic` but rather that output type is the same as input type.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-27T16:26:57.911+0000",
                    "updated": "2021-09-27T16:26:57.911+0000",
                    "started": "2021-09-27T16:26:57.911+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "655591",
                    "issueId": "13399063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399063/worklog/655601",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11233:\nURL: https://github.com/apache/arrow/pull/11233#discussion_r716859763\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -2868,8 +2865,8 @@ struct ExtractRegex : public ExtractRegexBase {\n       if (input.is_valid && Match(util::string_view(*input.value))) {\n         result->value.reserve(group_count);\n         for (int i = 0; i < group_count; i++) {\n-          result->value.push_back(\n-              std::make_shared<ScalarType>(found_values[i].as_string()));\n+          result->value.push_back(std::make_shared<ScalarType>(\n+              std::make_shared<Buffer>(ToStringView(found_values[i]))));\n\nReview comment:\n       Thanks for catching this.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-27T16:33:17.548+0000",
                    "updated": "2021-09-27T16:33:17.548+0000",
                    "started": "2021-09-27T16:33:17.548+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "655601",
                    "issueId": "13399063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399063/worklog/655606",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11233:\nURL: https://github.com/apache/arrow/pull/11233#discussion_r716864168\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -3421,41 +3415,45 @@ const FunctionDoc utf8_length_doc(\"Compute UTF8 string lengths\",\n \n void AddStrptime(FunctionRegistry* registry) {\n   auto func = std::make_shared<ScalarFunction>(\"strptime\", Arity::Unary(), &strptime_doc);\n\nReview comment:\n       I agree that `strptime` should only support string inputs. It only registers kernels for `StringTypes`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-27T16:39:10.006+0000",
                    "updated": "2021-09-27T16:39:10.006+0000",
                    "started": "2021-09-27T16:39:10.006+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "655606",
                    "issueId": "13399063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399063/worklog/655649",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11233:\nURL: https://github.com/apache/arrow/pull/11233#discussion_r716904798\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -1628,12 +1627,10 @@ const FunctionDoc utf8_slice_codeunits_doc(\n void AddSlice(FunctionRegistry* registry) {\n   auto func = std::make_shared<ScalarFunction>(\"utf8_slice_codeunits\", Arity::Unary(),\n                                                &utf8_slice_codeunits_doc);\n-  using t32 = SliceCodeunits<StringType>;\n-  using t64 = SliceCodeunits<LargeStringType>;\n-  DCHECK_OK(\n-      func->AddKernel({utf8()}, utf8(), t32::Exec, SliceCodeunitsTransform::State::Init));\n-  DCHECK_OK(func->AddKernel({large_utf8()}, large_utf8(), t64::Exec,\n-                            SliceCodeunitsTransform::State::Init));\n+  for (const auto& ty : StringTypes()) {\n+    auto exec = GenerateTypeAgnosticVarBinary<SliceCodeunits>(ty);\n\nReview comment:\n       Ah, I see now. In that case, I don't think the generator really buys us that much here. But since the change is made already it's not a big deal.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-27T17:35:20.892+0000",
                    "updated": "2021-09-27T17:35:20.892+0000",
                    "started": "2021-09-27T17:35:20.892+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "655649",
                    "issueId": "13399063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399063/worklog/655994",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11233:\nURL: https://github.com/apache/arrow/pull/11233#discussion_r717247336\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.h\n##########\n@@ -1188,6 +1188,24 @@ ArrayKernelExec GenerateTypeAgnosticVarBinaryBase(detail::GetTypeId get_id) {\n   }\n }\n \n+// similar to GenerateTypeAgnosticPrimitive, but for variable binary and string types\n+template <template <typename...> class Generator, typename... Args>\n+ArrayKernelExec GenerateTypeAgnosticVarBinary(detail::GetTypeId get_id) {\n\nReview comment:\n       Yes, I think we should standardize better the naming convention for all GDs (not only for binary/string types). Maybe we can revisit/resolve the naming convention in [ARROW-14134](https://issues.apache.org/jira/browse/ARROW-14134).\r\n   \r\n   The scalar binary kernel exec generators use `EqualTypes` to refer to same input types, so we should use another term of input/output type matching. I think `isomorphic` is the correct terminology to use for the non-type agnostic case.\r\n   \r\n   Another detail is the use of `Var`, I think it should be removed since `Binary` and `String` types imply variable-width. Instead the GDs for `FixedSizeBinary` should use `FixedSize` in its name. This should be resolved in naming convention PR.\r\n   \r\n   For this PR, what about using the following naming conventions for the variable-sized binary/string GDs?\r\n   **Note: That the only GD name being changed is the one added in this PR.**\r\n   * `GenerateTypeAgnosticVarBinaryBase`\r\n     * no explicit output type -> output type is binary type\r\n     * combines binary/string kernels\r\n   * GenerateVarBinaryBase\r\n     * use `Type0`\r\n     * combines binary/string kernels\r\n   * GenerateVarBinary\r\n     * use `Type0`\r\n     * independent binary/string kernels\r\n   * GenerateIsomorphicVarBinary\r\n     * no explicit output type -> output type same as input type\r\n     * independent binary/string kernels\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T05:58:51.102+0000",
                    "updated": "2021-09-28T05:58:51.102+0000",
                    "started": "2021-09-28T05:58:51.102+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "655994",
                    "issueId": "13399063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399063/worklog/656011",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11233:\nURL: https://github.com/apache/arrow/pull/11233#discussion_r717266869\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -2201,11 +2201,11 @@ void AddSplitWhitespaceAscii(FunctionRegistry* registry) {\n   auto func =\n       std::make_shared<ScalarFunction>(\"ascii_split_whitespace\", Arity::Unary(),\n                                        &ascii_split_whitespace_doc, &default_options);\n-  using t32 = SplitWhitespaceAsciiExec<StringType, ListType>;\n-  using t64 = SplitWhitespaceAsciiExec<LargeStringType, ListType>;\n-  DCHECK_OK(func->AddKernel({utf8()}, {list(utf8())}, t32::Exec, t32::State::Init));\n-  DCHECK_OK(\n-      func->AddKernel({large_utf8()}, {list(large_utf8())}, t64::Exec, t64::State::Init));\n+\n+  for (const auto& ty : StringTypes()) {\n+    auto exec = GenerateTypeAgnosticVarBinary<SplitWhitespaceAsciiExec, ListType>(ty);\n+    DCHECK_OK(func->AddKernel({ty}, {list(ty)}, exec, SplitState::Init));\n+  }\n\nReview comment:\n       Based on [Zulip discussion](https://ursalabs.zulipchat.com/#narrow/stream/180245-dev/topic/Stringlike.20kernels.20on.20binary.20data), we can support binary types for ASCII-named compute functions.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T06:38:43.407+0000",
                    "updated": "2021-09-28T06:38:43.407+0000",
                    "started": "2021-09-28T06:38:43.407+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "656011",
                    "issueId": "13399063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399063/worklog/656012",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11233:\nURL: https://github.com/apache/arrow/pull/11233#discussion_r717266869\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -2201,11 +2201,11 @@ void AddSplitWhitespaceAscii(FunctionRegistry* registry) {\n   auto func =\n       std::make_shared<ScalarFunction>(\"ascii_split_whitespace\", Arity::Unary(),\n                                        &ascii_split_whitespace_doc, &default_options);\n-  using t32 = SplitWhitespaceAsciiExec<StringType, ListType>;\n-  using t64 = SplitWhitespaceAsciiExec<LargeStringType, ListType>;\n-  DCHECK_OK(func->AddKernel({utf8()}, {list(utf8())}, t32::Exec, t32::State::Init));\n-  DCHECK_OK(\n-      func->AddKernel({large_utf8()}, {list(large_utf8())}, t64::Exec, t64::State::Init));\n+\n+  for (const auto& ty : StringTypes()) {\n+    auto exec = GenerateTypeAgnosticVarBinary<SplitWhitespaceAsciiExec, ListType>(ty);\n+    DCHECK_OK(func->AddKernel({ty}, {list(ty)}, exec, SplitState::Init));\n+  }\n\nReview comment:\n       Based on [Zulip discussion](https://ursalabs.zulipchat.com/#narrow/stream/180245-dev/topic/Stringlike.20kernels.20on.20binary.20data), we may support binary types for ASCII-named compute functions.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T06:40:30.460+0000",
                    "updated": "2021-09-28T06:40:30.460+0000",
                    "started": "2021-09-28T06:40:30.460+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "656012",
                    "issueId": "13399063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399063/worklog/656025",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11233:\nURL: https://github.com/apache/arrow/pull/11233#discussion_r717307464\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -2201,11 +2201,11 @@ void AddSplitWhitespaceAscii(FunctionRegistry* registry) {\n   auto func =\n       std::make_shared<ScalarFunction>(\"ascii_split_whitespace\", Arity::Unary(),\n                                        &ascii_split_whitespace_doc, &default_options);\n-  using t32 = SplitWhitespaceAsciiExec<StringType, ListType>;\n-  using t64 = SplitWhitespaceAsciiExec<LargeStringType, ListType>;\n-  DCHECK_OK(func->AddKernel({utf8()}, {list(utf8())}, t32::Exec, t32::State::Init));\n-  DCHECK_OK(\n-      func->AddKernel({large_utf8()}, {list(large_utf8())}, t64::Exec, t64::State::Init));\n+\n+  for (const auto& ty : StringTypes()) {\n+    auto exec = GenerateTypeAgnosticVarBinary<SplitWhitespaceAsciiExec, ListType>(ty);\n+    DCHECK_OK(func->AddKernel({ty}, {list(ty)}, exec, SplitState::Init));\n+  }\n\nReview comment:\n       Created [ARROW-14151](https://issues.apache.org/jira/browse/ARROW-14151) for the ASCII functions.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T07:39:22.939+0000",
                    "updated": "2021-09-28T07:39:22.939+0000",
                    "started": "2021-09-28T07:39:22.939+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "656025",
                    "issueId": "13399063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399063/worklog/656107",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11233:\nURL: https://github.com/apache/arrow/pull/11233#discussion_r717510691\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.h\n##########\n@@ -1188,6 +1188,24 @@ ArrayKernelExec GenerateTypeAgnosticVarBinaryBase(detail::GetTypeId get_id) {\n   }\n }\n \n+// similar to GenerateTypeAgnosticPrimitive, but for variable binary and string types\n+template <template <typename...> class Generator, typename... Args>\n+ArrayKernelExec GenerateTypeAgnosticVarBinary(detail::GetTypeId get_id) {\n\nReview comment:\n       I'd rather continue using VarBinary since Binary would imply to me all binary types, both variable and fixed width.\r\n   \r\n   Isomorphic isn't immediately obvious to me. Maybe the Type0 variants should be named Returning? Since Type0 is usually used as the return type. Also, both GenerateTypeAgnosticVarBinaryBase and GenerateVarBinaryBase are type-agnostic. That said, having both TypeAgnostic and Base is a little redundant. So maybe:\r\n   \r\n   - GenerateTypeAgnosticVarBinary\r\n   - GenerateTypeAgnosticVarBinaryReturning\r\n   - GenerateVarBinaryReturning\r\n   - GenerateVarBinary\r\n   \r\n   though this would be harder to implement in this PR, unfortunately.\r\n   \r\n   Or we could suffix the non-type0 arguments with ToType, e.g. GenerateVarBinaryToVarBinary, GenerateDecimalToDecimal - perhaps a little verbose.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T12:11:37.282+0000",
                    "updated": "2021-09-28T12:11:37.282+0000",
                    "started": "2021-09-28T12:11:37.281+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "656107",
                    "issueId": "13399063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399063/worklog/656204",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11233:\nURL: https://github.com/apache/arrow/pull/11233#discussion_r717678014\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.h\n##########\n@@ -1188,6 +1188,24 @@ ArrayKernelExec GenerateTypeAgnosticVarBinaryBase(detail::GetTypeId get_id) {\n   }\n }\n \n+// similar to GenerateTypeAgnosticPrimitive, but for variable binary and string types\n+template <template <typename...> class Generator, typename... Args>\n+ArrayKernelExec GenerateTypeAgnosticVarBinary(detail::GetTypeId get_id) {\n\nReview comment:\n       Ok, I will keep it simple for this PR and use the `Returning` variant.\r\n   \r\n   I think the using the suffix of the form `ToType` is good. Better explicit and verbose than short and confusing. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T15:07:50.991+0000",
                    "updated": "2021-09-28T15:07:50.991+0000",
                    "started": "2021-09-28T15:07:50.991+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "656204",
                    "issueId": "13399063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399063/worklog/656411",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11233:\nURL: https://github.com/apache/arrow/pull/11233#discussion_r716904798\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -1628,12 +1627,10 @@ const FunctionDoc utf8_slice_codeunits_doc(\n void AddSlice(FunctionRegistry* registry) {\n   auto func = std::make_shared<ScalarFunction>(\"utf8_slice_codeunits\", Arity::Unary(),\n                                                &utf8_slice_codeunits_doc);\n-  using t32 = SliceCodeunits<StringType>;\n-  using t64 = SliceCodeunits<LargeStringType>;\n-  DCHECK_OK(\n-      func->AddKernel({utf8()}, utf8(), t32::Exec, SliceCodeunitsTransform::State::Init));\n-  DCHECK_OK(func->AddKernel({large_utf8()}, large_utf8(), t64::Exec,\n-                            SliceCodeunitsTransform::State::Init));\n+  for (const auto& ty : StringTypes()) {\n+    auto exec = GenerateTypeAgnosticVarBinary<SliceCodeunits>(ty);\n\nReview comment:\n       Ah, I see now. In that case, I don't think the generator really buys us that much here. But since the change is made already it's not a big deal.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.h\n##########\n@@ -1188,6 +1188,24 @@ ArrayKernelExec GenerateTypeAgnosticVarBinaryBase(detail::GetTypeId get_id) {\n   }\n }\n \n+// similar to GenerateTypeAgnosticPrimitive, but for variable binary and string types\n+template <template <typename...> class Generator, typename... Args>\n+ArrayKernelExec GenerateTypeAgnosticVarBinary(detail::GetTypeId get_id) {\n\nReview comment:\n       I'd rather continue using VarBinary since Binary would imply to me all binary types, both variable and fixed width.\r\n   \r\n   Isomorphic isn't immediately obvious to me. Maybe the Type0 variants should be named Returning? Since Type0 is usually used as the return type. Also, both GenerateTypeAgnosticVarBinaryBase and GenerateVarBinaryBase are type-agnostic. That said, having both TypeAgnostic and Base is a little redundant. So maybe:\r\n   \r\n   - GenerateTypeAgnosticVarBinary\r\n   - GenerateTypeAgnosticVarBinaryReturning\r\n   - GenerateVarBinaryReturning\r\n   - GenerateVarBinary\r\n   \r\n   though this would be harder to implement in this PR, unfortunately.\r\n   \r\n   Or we could suffix the non-type0 arguments with ToType, e.g. GenerateVarBinaryToVarBinary, GenerateDecimalToDecimal - perhaps a little verbose.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T19:46:48.838+0000",
                    "updated": "2021-09-28T19:46:48.838+0000",
                    "started": "2021-09-28T19:46:48.837+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "656411",
                    "issueId": "13399063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399063/worklog/656499",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11233:\nURL: https://github.com/apache/arrow/pull/11233#discussion_r717247336\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.h\n##########\n@@ -1188,6 +1188,24 @@ ArrayKernelExec GenerateTypeAgnosticVarBinaryBase(detail::GetTypeId get_id) {\n   }\n }\n \n+// similar to GenerateTypeAgnosticPrimitive, but for variable binary and string types\n+template <template <typename...> class Generator, typename... Args>\n+ArrayKernelExec GenerateTypeAgnosticVarBinary(detail::GetTypeId get_id) {\n\nReview comment:\n       Yes, I think we should standardize better the naming convention for all GDs (not only for binary/string types). Maybe we can revisit/resolve the naming convention in [ARROW-14134](https://issues.apache.org/jira/browse/ARROW-14134).\r\n   \r\n   The scalar binary kernel exec generators use `EqualTypes` to refer to same input types, so we should use another term of input/output type matching. I think `isomorphic` is the correct terminology to use for the non-type agnostic case.\r\n   \r\n   Another detail is the use of `Var`, I think it should be removed since `Binary` and `String` types imply variable-width. Instead the GDs for `FixedSizeBinary` should use `FixedSize` in its name. This should be resolved in naming convention PR.\r\n   \r\n   For this PR, what about using the following naming conventions for the variable-sized binary/string GDs?\r\n   **Note: That the only GD name being changed is the one added in this PR.**\r\n   * `GenerateTypeAgnosticVarBinaryBase`\r\n     * no explicit output type -> output type is binary type\r\n     * combines binary/string kernels\r\n   * GenerateVarBinaryBase\r\n     * use `Type0`\r\n     * combines binary/string kernels\r\n   * GenerateVarBinary\r\n     * use `Type0`\r\n     * independent binary/string kernels\r\n   * GenerateIsomorphicVarBinary\r\n     * no explicit output type -> output type same as input type\r\n     * independent binary/string kernels\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -2201,11 +2201,11 @@ void AddSplitWhitespaceAscii(FunctionRegistry* registry) {\n   auto func =\n       std::make_shared<ScalarFunction>(\"ascii_split_whitespace\", Arity::Unary(),\n                                        &ascii_split_whitespace_doc, &default_options);\n-  using t32 = SplitWhitespaceAsciiExec<StringType, ListType>;\n-  using t64 = SplitWhitespaceAsciiExec<LargeStringType, ListType>;\n-  DCHECK_OK(func->AddKernel({utf8()}, {list(utf8())}, t32::Exec, t32::State::Init));\n-  DCHECK_OK(\n-      func->AddKernel({large_utf8()}, {list(large_utf8())}, t64::Exec, t64::State::Init));\n+\n+  for (const auto& ty : StringTypes()) {\n+    auto exec = GenerateTypeAgnosticVarBinary<SplitWhitespaceAsciiExec, ListType>(ty);\n+    DCHECK_OK(func->AddKernel({ty}, {list(ty)}, exec, SplitState::Init));\n+  }\n\nReview comment:\n       Based on [Zulip discussion](https://ursalabs.zulipchat.com/#narrow/stream/180245-dev/topic/Stringlike.20kernels.20on.20binary.20data), we can support binary types for ASCII-named compute functions.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -2201,11 +2201,11 @@ void AddSplitWhitespaceAscii(FunctionRegistry* registry) {\n   auto func =\n       std::make_shared<ScalarFunction>(\"ascii_split_whitespace\", Arity::Unary(),\n                                        &ascii_split_whitespace_doc, &default_options);\n-  using t32 = SplitWhitespaceAsciiExec<StringType, ListType>;\n-  using t64 = SplitWhitespaceAsciiExec<LargeStringType, ListType>;\n-  DCHECK_OK(func->AddKernel({utf8()}, {list(utf8())}, t32::Exec, t32::State::Init));\n-  DCHECK_OK(\n-      func->AddKernel({large_utf8()}, {list(large_utf8())}, t64::Exec, t64::State::Init));\n+\n+  for (const auto& ty : StringTypes()) {\n+    auto exec = GenerateTypeAgnosticVarBinary<SplitWhitespaceAsciiExec, ListType>(ty);\n+    DCHECK_OK(func->AddKernel({ty}, {list(ty)}, exec, SplitState::Init));\n+  }\n\nReview comment:\n       Based on [Zulip discussion](https://ursalabs.zulipchat.com/#narrow/stream/180245-dev/topic/Stringlike.20kernels.20on.20binary.20data), we may support binary types for ASCII-named compute functions.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -2201,11 +2201,11 @@ void AddSplitWhitespaceAscii(FunctionRegistry* registry) {\n   auto func =\n       std::make_shared<ScalarFunction>(\"ascii_split_whitespace\", Arity::Unary(),\n                                        &ascii_split_whitespace_doc, &default_options);\n-  using t32 = SplitWhitespaceAsciiExec<StringType, ListType>;\n-  using t64 = SplitWhitespaceAsciiExec<LargeStringType, ListType>;\n-  DCHECK_OK(func->AddKernel({utf8()}, {list(utf8())}, t32::Exec, t32::State::Init));\n-  DCHECK_OK(\n-      func->AddKernel({large_utf8()}, {list(large_utf8())}, t64::Exec, t64::State::Init));\n+\n+  for (const auto& ty : StringTypes()) {\n+    auto exec = GenerateTypeAgnosticVarBinary<SplitWhitespaceAsciiExec, ListType>(ty);\n+    DCHECK_OK(func->AddKernel({ty}, {list(ty)}, exec, SplitState::Init));\n+  }\n\nReview comment:\n       Created [ARROW-14151](https://issues.apache.org/jira/browse/ARROW-14151) for the ASCII functions.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/codegen_internal.h\n##########\n@@ -1188,6 +1188,24 @@ ArrayKernelExec GenerateTypeAgnosticVarBinaryBase(detail::GetTypeId get_id) {\n   }\n }\n \n+// similar to GenerateTypeAgnosticPrimitive, but for variable binary and string types\n+template <template <typename...> class Generator, typename... Args>\n+ArrayKernelExec GenerateTypeAgnosticVarBinary(detail::GetTypeId get_id) {\n\nReview comment:\n       Ok, I will keep it simple for this PR and use the `Returning` variant.\r\n   \r\n   I think the using the suffix of the form `ToType` is good. Better explicit and verbose than short and confusing. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-28T19:54:52.766+0000",
                    "updated": "2021-09-28T19:54:52.766+0000",
                    "started": "2021-09-28T19:54:52.766+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "656499",
                    "issueId": "13399063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399063/worklog/657492",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11233:\nURL: https://github.com/apache/arrow/pull/11233#discussion_r718817723\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string_test.cc\n##########\n@@ -724,7 +724,7 @@ TYPED_TEST(TestStringKernels, IsUpperAscii) {\n                    \"[false, null, false, true, true, false, false]\");\n }\n \n-TYPED_TEST(TestStringKernels, MatchSubstring) {\n+TYPED_TEST(TestBinaryKernels, MatchSubstring) {\n\nReview comment:\n       Ok, so I noticed that there are not binary (invalid UTF8) tests for string functions. As a starting point, I chose `binary_length` as an \"easy\" function to test,\r\n   ```c++\r\n   // These cases pass successfully\r\n   this->CheckUnary(\"binary_length\", \"[\\\"\\x84\\xf0\\x2f\\\", \\\"\\xff\\x9b\\xc3\\xbb\\\"]\", this->offset_type(), \"[3, 4]\");\r\n   ```\r\n   but the JSON parser errors out in many cases (e.g., `\\x84\\x00`, `\\x84\\x01`) with one of the following messages:\r\n   ```c++\r\n   Invalid: Expected string or null, got JSON type 6\r\n   Invalid: JSON parse error at offset 3: Invalid escape character in string.\r\n   Invalid: JSON parse error at offset 3: Missing a closing quotation mark in string.\r\n   ...\r\n   ```\r\n   I suspect that the successful cases are valid UTF-8 (need to check), but the failed tests are definitely not valid UTF-8.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-29T19:23:57.604+0000",
                    "updated": "2021-09-29T19:23:57.604+0000",
                    "started": "2021-09-29T19:23:57.603+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "657492",
                    "issueId": "13399063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399063/worklog/657493",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11233:\nURL: https://github.com/apache/arrow/pull/11233#discussion_r718817723\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string_test.cc\n##########\n@@ -724,7 +724,7 @@ TYPED_TEST(TestStringKernels, IsUpperAscii) {\n                    \"[false, null, false, true, true, false, false]\");\n }\n \n-TYPED_TEST(TestStringKernels, MatchSubstring) {\n+TYPED_TEST(TestBinaryKernels, MatchSubstring) {\n\nReview comment:\n       Ok, so I noticed that there are not binary (invalid UTF8) tests for string functions. As a starting point, I chose `binary_length` as an \"easy\" function to test,\r\n   ```c++\r\n   // These cases pass successfully\r\n   this->CheckUnary(\"binary_length\",\r\n                                \"[\\\"\\x84\\xf0\\x2f\\\", \\\"\\xff\\x9b\\xc3\\xbb\\\"]\",\r\n                                this->offset_type(), \"[3, 4]\");\r\n   ```\r\n   but the JSON parser errors out in many cases (e.g., `\\x84\\x00`, `\\x84\\x01`) with one of the following messages:\r\n   ```c++\r\n   Invalid: Expected string or null, got JSON type 6\r\n   Invalid: JSON parse error at offset 3: Invalid escape character in string.\r\n   Invalid: JSON parse error at offset 3: Missing a closing quotation mark in string.\r\n   ...\r\n   ```\r\n   I suspect that the successful cases are valid UTF-8 (need to check), but the failed tests are definitely not valid UTF-8.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-29T19:24:31.153+0000",
                    "updated": "2021-09-29T19:24:31.153+0000",
                    "started": "2021-09-29T19:24:31.153+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "657493",
                    "issueId": "13399063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399063/worklog/657498",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "edponce commented on a change in pull request #11233:\nURL: https://github.com/apache/arrow/pull/11233#discussion_r718818910\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string_test.cc\n##########\n@@ -724,7 +724,7 @@ TYPED_TEST(TestStringKernels, IsUpperAscii) {\n                    \"[false, null, false, true, true, false, false]\");\n }\n \n-TYPED_TEST(TestStringKernels, MatchSubstring) {\n+TYPED_TEST(TestBinaryKernels, MatchSubstring) {\n\nReview comment:\n       Will test using `MakeScalar` and bypassing the JSON parser.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-29T19:25:40.786+0000",
                    "updated": "2021-09-29T19:25:40.786+0000",
                    "started": "2021-09-29T19:25:40.785+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "657498",
                    "issueId": "13399063"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399063/worklog/657499",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #11233:\nURL: https://github.com/apache/arrow/pull/11233#discussion_r718819715\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string_test.cc\n##########\n@@ -724,7 +724,7 @@ TYPED_TEST(TestStringKernels, IsUpperAscii) {\n                    \"[false, null, false, true, true, false, false]\");\n }\n \n-TYPED_TEST(TestStringKernels, MatchSubstring) {\n+TYPED_TEST(TestBinaryKernels, MatchSubstring) {\n\nReview comment:\n       I suspect the issue is that JSON requires inputs to be in UTF-8 or another encoding of Unicode. See for instance RapidJSON's documentation (which is what we use): https://rapidjson.org/md_doc_encoding.html\r\n   \r\n   So for such tests, you may have to manually construct input data. (Or it seems like the validation can be turned off in RapidJSON.) A helper that takes a vector<std::string> and gives back an array might suffice.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-29T19:26:54.254+0000",
                    "updated": "2021-09-29T19:26:54.254+0000",
                    "started": "2021-09-29T19:26:54.254+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "657499",
                    "issueId": "13399063"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 35400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3bdb317c[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@616feefc[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@384817bf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@264e0644[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@54db1d99[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5a4572aa[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@22c873b2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@74e23d89[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@78d9c159[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@9f82cca[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@684c9ba4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@da7fd51[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 35400,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Oct 25 12:53:23 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-10-25T12:53:23.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13879/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2021-09-03T03:08:14.000+0000",
        "updated": "2021-10-28T19:28:31.000+0000",
        "timeoriginalestimate": null,
        "description": "The functions count_substring, count_substring_regex, find_substring, and find_substring_regex all accept binary types but the function extract_regex, match_substring, match_substring_regex, match_like, starts_with, ends_with, split_pattern, and split_pattern_regex do not.\r\n\r\nThey should either all accept binary types or none should.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "9h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 35400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Mixed support for binary types in regex functions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399063/comment/17423127",
                    "id": "17423127",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Adding \"true\" binary support to Arrow (ie. not encoded as ASCII/UTF-8) seems to be more involved than what I initially expected. Most of the kernels listed in this PR are implemented in such a way that they could in theory work with non-encoded binary data, but the fact that *std::string* and *std::string_view* are used in certain parts to hold the binary data prevents \"true\" binary support because of they are treated as [null-terminating strings|https://github.com/apache/arrow/blob/master/cpp/src/arrow/vendored/string_view.hpp#L421]. Therefore, binary data containing a NULL byte (_0x00_) will yield incorrect results.\r\n\r\nTwo possible solutions are:\r\n * to consider _BinaryTypes_ different from _StringTypes_ where the former always requires an explicit _length_ and the latter can depend on null-terminating strings\r\n * to treat strings as non-null-terminating sequence of bytes and wrap them in a string-like container that uses an explicit _size_ instead of depending on a NULL value\r\n\r\nFor this issue's PR, I am adding partial binary support to all the kernels since a null byte is not supported.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-10-01T06:46:47.456+0000",
                    "updated": "2021-10-01T06:49:22.328+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399063/comment/17423129",
                    "id": "17423129",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Python supports zeroed bytes:\r\n{code:python}\r\n>>> s = b'\\x84\\x00\\x2b'\r\n>>> len(s)\r\n3\r\n{code}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-10-01T06:48:46.824+0000",
                    "updated": "2021-10-01T06:48:46.824+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399063/comment/17423161",
                    "id": "17423161",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Not sure if this is of importance here, but the [protobuf types map both *string* and *bytes* to C++ *string*|https://developers.google.com/protocol-buffers/docs/proto3#scalar].",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-10-01T07:38:21.880+0000",
                    "updated": "2021-10-01T07:38:21.880+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399063/comment/17423456",
                    "id": "17423456",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "std::string can contain null. Some place is constructing it from a pointer instead of a pointer + length if that's the case.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-10-02T02:51:49.759+0000",
                    "updated": "2021-10-02T02:51:49.759+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399063/comment/17423460",
                    "id": "17423460",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Well, the issue is that `string_view` is used to encapsulate binary data in certain parts and [`string_view.length()` is used to get the size but it stops at the first null byte|https://github.com/apache/arrow/blob/master/cpp/src/arrow/vendored/string_view.hpp#L421], thus providing an incorrect size.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=edponce",
                        "name": "edponce",
                        "key": "edponce",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=edponce&avatarId=45496",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=edponce&avatarId=45496",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=edponce&avatarId=45496",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=edponce&avatarId=45496"
                        },
                        "displayName": "Eduardo Ponce",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-10-02T03:52:43.581+0000",
                    "updated": "2021-10-02T03:52:43.581+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399063/comment/17423516",
                    "id": "17423516",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "length() is only used again if you construct from a pointer instead of a pointer + length - so this is still an issue with usage and not with string_view.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-10-02T12:34:02.927+0000",
                    "updated": "2021-10-02T12:34:02.927+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13399063/comment/17433737",
                    "id": "17433737",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 11233\n[https://github.com/apache/arrow/pull/11233]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-10-25T12:53:23.811+0000",
                    "updated": "2021-10-25T12:53:23.811+0000"
                }
            ],
            "maxResults": 7,
            "total": 7,
            "startAt": 0
        },
        "customfield_12311820": "0|z0uk7s:",
        "customfield_12314139": null
    }
}