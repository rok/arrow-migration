{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13274455",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13274455",
    "key": "ARROW-7391",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12347769",
                "id": "12347769",
                "description": "",
                "name": "1.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-07-24"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "dataset",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12346687",
                "id": "12346687",
                "description": "",
                "name": "0.17.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-04-20"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
            "name": "bkietz",
            "key": "bkietz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
            },
            "displayName": "Ben Kietzman",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 22800,
            "total": 22800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 22800,
            "total": 22800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7391/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 38,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13274455/worklog/426726",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz opened a new pull request #7026:\nURL: https://github.com/apache/arrow/pull/7026\n\n\n   Serialization is implemented by converting Expressions to Arrays then writing a tiny IPC file. This is a ridiculous way to serialize Expressions but it should be acceptable since these classes are destined to be replaced by `arrow::engine::Expr`\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-23T20:27:31.806+0000",
                    "updated": "2020-04-23T20:27:31.806+0000",
                    "started": "2020-04-23T20:27:31.806+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "426726",
                    "issueId": "13274455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13274455/worklog/426730",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #7026:\nURL: https://github.com/apache/arrow/pull/7026#issuecomment-618651261\n\n\n   https://issues.apache.org/jira/browse/ARROW-7391\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-23T20:31:45.168+0000",
                    "updated": "2020-04-23T20:31:45.168+0000",
                    "started": "2020-04-23T20:31:45.168+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "426730",
                    "issueId": "13274455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13274455/worklog/426758",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #7026:\nURL: https://github.com/apache/arrow/pull/7026#discussion_r414153717\n\n\n\n##########\nFile path: r/src/expression.cpp\n##########\n@@ -21,99 +21,97 @@\n \n // [[arrow::export]]\n std::shared_ptr<ds::Expression> dataset___expr__field_ref(std::string name) {\n-  return std::make_shared<ds::FieldExpression>(std::move(name));\n+  return ds::field_ref(std::move(name));\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__equal(\n+std::shared_ptr<ds::Expression> dataset___expr__equal(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::equal(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__not_equal(\n+std::shared_ptr<ds::Expression> dataset___expr__not_equal(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::not_equal(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__greater(\n+std::shared_ptr<ds::Expression> dataset___expr__greater(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::greater(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__greater_equal(\n+std::shared_ptr<ds::Expression> dataset___expr__greater_equal(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::greater_equal(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__less(\n+std::shared_ptr<ds::Expression> dataset___expr__less(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::less(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__less_equal(\n+std::shared_ptr<ds::Expression> dataset___expr__less_equal(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::less_equal(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::InExpression> dataset___expr__in(\n+std::shared_ptr<ds::Expression> dataset___expr__in(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<arrow::Array>& rhs) {\n-  return std::make_shared<ds::InExpression>(lhs->In(rhs));\n+  return lhs->In(rhs).Copy();\n\nReview comment:\n       Why does this require `.Copy()`? Would it be clearer if there were `ds::in_(lhs, rhs)` like the other operators?\n\n##########\nFile path: r/src/expression.cpp\n##########\n@@ -21,99 +21,97 @@\n \n // [[arrow::export]]\n std::shared_ptr<ds::Expression> dataset___expr__field_ref(std::string name) {\n-  return std::make_shared<ds::FieldExpression>(std::move(name));\n+  return ds::field_ref(std::move(name));\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__equal(\n+std::shared_ptr<ds::Expression> dataset___expr__equal(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::equal(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__not_equal(\n+std::shared_ptr<ds::Expression> dataset___expr__not_equal(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::not_equal(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__greater(\n+std::shared_ptr<ds::Expression> dataset___expr__greater(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::greater(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__greater_equal(\n+std::shared_ptr<ds::Expression> dataset___expr__greater_equal(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::greater_equal(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__less(\n+std::shared_ptr<ds::Expression> dataset___expr__less(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::less(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__less_equal(\n+std::shared_ptr<ds::Expression> dataset___expr__less_equal(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::less_equal(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::InExpression> dataset___expr__in(\n+std::shared_ptr<ds::Expression> dataset___expr__in(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<arrow::Array>& rhs) {\n-  return std::make_shared<ds::InExpression>(lhs->In(rhs));\n+  return lhs->In(rhs).Copy();\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::AndExpression> dataset___expr__and(\n+std::shared_ptr<ds::Expression> dataset___expr__and(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::and_(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::OrExpression> dataset___expr__or(\n+std::shared_ptr<ds::Expression> dataset___expr__or(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::or_(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::NotExpression> dataset___expr__not(\n+std::shared_ptr<ds::Expression> dataset___expr__not(\n     const std::shared_ptr<ds::Expression>& lhs) {\n   return ds::not_(lhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::IsValidExpression> dataset___expr__is_valid(\n+std::shared_ptr<ds::Expression> dataset___expr__is_valid(\n     const std::shared_ptr<ds::Expression>& lhs) {\n-  return std::make_shared<ds::IsValidExpression>(lhs->IsValid());\n+  return lhs->IsValid().Copy();\n\nReview comment:\n       Likewise here\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-23T22:06:14.105+0000",
                    "updated": "2020-04-23T22:06:14.105+0000",
                    "started": "2020-04-23T22:06:14.105+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "426758",
                    "issueId": "13274455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13274455/worklog/426774",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7026:\nURL: https://github.com/apache/arrow/pull/7026#discussion_r414184803\n\n\n\n##########\nFile path: r/src/expression.cpp\n##########\n@@ -21,99 +21,97 @@\n \n // [[arrow::export]]\n std::shared_ptr<ds::Expression> dataset___expr__field_ref(std::string name) {\n-  return std::make_shared<ds::FieldExpression>(std::move(name));\n+  return ds::field_ref(std::move(name));\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__equal(\n+std::shared_ptr<ds::Expression> dataset___expr__equal(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::equal(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__not_equal(\n+std::shared_ptr<ds::Expression> dataset___expr__not_equal(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::not_equal(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__greater(\n+std::shared_ptr<ds::Expression> dataset___expr__greater(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::greater(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__greater_equal(\n+std::shared_ptr<ds::Expression> dataset___expr__greater_equal(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::greater_equal(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__less(\n+std::shared_ptr<ds::Expression> dataset___expr__less(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::less(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__less_equal(\n+std::shared_ptr<ds::Expression> dataset___expr__less_equal(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::less_equal(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::InExpression> dataset___expr__in(\n+std::shared_ptr<ds::Expression> dataset___expr__in(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<arrow::Array>& rhs) {\n-  return std::make_shared<ds::InExpression>(lhs->In(rhs));\n+  return lhs->In(rhs).Copy();\n\nReview comment:\n       `Copy()` moves the expression from the stack into a shared_ptr, replacing make_shared.\r\n   \r\n   I can add them if desired.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-23T23:14:26.033+0000",
                    "updated": "2020-04-23T23:14:26.033+0000",
                    "started": "2020-04-23T23:14:26.032+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "426774",
                    "issueId": "13274455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13274455/worklog/426776",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7026:\nURL: https://github.com/apache/arrow/pull/7026#discussion_r414184803\n\n\n\n##########\nFile path: r/src/expression.cpp\n##########\n@@ -21,99 +21,97 @@\n \n // [[arrow::export]]\n std::shared_ptr<ds::Expression> dataset___expr__field_ref(std::string name) {\n-  return std::make_shared<ds::FieldExpression>(std::move(name));\n+  return ds::field_ref(std::move(name));\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__equal(\n+std::shared_ptr<ds::Expression> dataset___expr__equal(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::equal(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__not_equal(\n+std::shared_ptr<ds::Expression> dataset___expr__not_equal(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::not_equal(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__greater(\n+std::shared_ptr<ds::Expression> dataset___expr__greater(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::greater(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__greater_equal(\n+std::shared_ptr<ds::Expression> dataset___expr__greater_equal(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::greater_equal(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__less(\n+std::shared_ptr<ds::Expression> dataset___expr__less(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::less(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__less_equal(\n+std::shared_ptr<ds::Expression> dataset___expr__less_equal(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::less_equal(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::InExpression> dataset___expr__in(\n+std::shared_ptr<ds::Expression> dataset___expr__in(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<arrow::Array>& rhs) {\n-  return std::make_shared<ds::InExpression>(lhs->In(rhs));\n+  return lhs->In(rhs).Copy();\n\nReview comment:\n       `Copy()` moves the expression from the stack into a shared_ptr, replacing make_shared.\r\n   \r\n   I can add `ds::in(...)` etc if desired.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-23T23:15:10.699+0000",
                    "updated": "2020-04-23T23:15:10.699+0000",
                    "started": "2020-04-23T23:15:10.699+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "426776",
                    "issueId": "13274455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13274455/worklog/427011",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #7026:\nURL: https://github.com/apache/arrow/pull/7026#discussion_r414680234\n\n\n\n##########\nFile path: r/src/expression.cpp\n##########\n@@ -21,99 +21,97 @@\n \n // [[arrow::export]]\n std::shared_ptr<ds::Expression> dataset___expr__field_ref(std::string name) {\n-  return std::make_shared<ds::FieldExpression>(std::move(name));\n+  return ds::field_ref(std::move(name));\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__equal(\n+std::shared_ptr<ds::Expression> dataset___expr__equal(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::equal(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__not_equal(\n+std::shared_ptr<ds::Expression> dataset___expr__not_equal(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::not_equal(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__greater(\n+std::shared_ptr<ds::Expression> dataset___expr__greater(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::greater(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__greater_equal(\n+std::shared_ptr<ds::Expression> dataset___expr__greater_equal(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::greater_equal(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__less(\n+std::shared_ptr<ds::Expression> dataset___expr__less(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::less(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::ComparisonExpression> dataset___expr__less_equal(\n+std::shared_ptr<ds::Expression> dataset___expr__less_equal(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<ds::Expression>& rhs) {\n   return ds::less_equal(lhs, rhs);\n }\n \n // [[arrow::export]]\n-std::shared_ptr<ds::InExpression> dataset___expr__in(\n+std::shared_ptr<ds::Expression> dataset___expr__in(\n     const std::shared_ptr<ds::Expression>& lhs,\n     const std::shared_ptr<arrow::Array>& rhs) {\n-  return std::make_shared<ds::InExpression>(lhs->In(rhs));\n+  return lhs->In(rhs).Copy();\n\nReview comment:\n       \ud83e\udd37 not a big deal to me\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-24T15:50:11.046+0000",
                    "updated": "2020-04-24T15:50:11.046+0000",
                    "started": "2020-04-24T15:50:11.046+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427011",
                    "issueId": "13274455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13274455/worklog/427587",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #7026:\nURL: https://github.com/apache/arrow/pull/7026#discussion_r415703472\n\n\n\n##########\nFile path: python/pyarrow/_dataset.pyx\n##########\n@@ -269,20 +454,21 @@ cdef class FileSystemDataset(Dataset):\n     cdef:\n         CFileSystemDataset* filesystem_dataset\n \n-    def __init__(self, paths_or_selector, schema=None, format=None,\n-                 filesystem=None, partitions=None, root_partition=None):\n+    def __init__(self, paths_or_selector, schema, format, filesystem,\n+                 partitions=None, Expression root_partition=_true):\n\nReview comment:\n       Can you leave this as it was? This was done on purpose to provide decent error messages (see discussion in https://github.com/apache/arrow/pull/6913, I am happy to find a better way though)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-27T10:42:20.815+0000",
                    "updated": "2020-04-27T10:42:20.815+0000",
                    "started": "2020-04-27T10:42:20.815+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427587",
                    "issueId": "13274455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13274455/worklog/427591",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #7026:\nURL: https://github.com/apache/arrow/pull/7026#issuecomment-619902102\n\n\n   Agree that exposing `ds.field` and `ds.scalar` should be sufficient on the python side.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-27T10:51:46.447+0000",
                    "updated": "2020-04-27T10:51:46.447+0000",
                    "started": "2020-04-27T10:51:46.447+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427591",
                    "issueId": "13274455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13274455/worklog/427808",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7026:\nURL: https://github.com/apache/arrow/pull/7026#discussion_r416092830\n\n\n\n##########\nFile path: python/pyarrow/_dataset.pyx\n##########\n@@ -269,20 +454,21 @@ cdef class FileSystemDataset(Dataset):\n     cdef:\n         CFileSystemDataset* filesystem_dataset\n \n-    def __init__(self, paths_or_selector, schema=None, format=None,\n-                 filesystem=None, partitions=None, root_partition=None):\n+    def __init__(self, paths_or_selector, schema, format, filesystem,\n+                 partitions=None, Expression root_partition=_true):\n\nReview comment:\n       reverted\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-27T19:35:05.243+0000",
                    "updated": "2020-04-27T19:35:05.243+0000",
                    "started": "2020-04-27T19:35:05.243+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427808",
                    "issueId": "13274455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13274455/worklog/427821",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #7026:\nURL: https://github.com/apache/arrow/pull/7026#issuecomment-620196068\n\n\n   @kszucs @jorisvandenbossche PTAL\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-27T19:47:55.997+0000",
                    "updated": "2020-04-27T19:47:55.997+0000",
                    "started": "2020-04-27T19:47:55.997+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427821",
                    "issueId": "13274455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13274455/worklog/427871",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #7026:\nURL: https://github.com/apache/arrow/pull/7026#issuecomment-620245767\n\n\n   @github-actions autotune everything\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-27T21:29:59.312+0000",
                    "updated": "2020-04-27T21:29:59.312+0000",
                    "started": "2020-04-27T21:29:59.312+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "427871",
                    "issueId": "13274455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13274455/worklog/428134",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #7026:\nURL: https://github.com/apache/arrow/pull/7026#discussion_r416567863\n\n\n\n##########\nFile path: python/pyarrow/_dataset.pyx\n##########\n@@ -41,6 +42,167 @@ def _forbid_instantiation(klass, subclasses_instead=True):\n     raise TypeError(msg)\n \n \n+cdef class Expression:\n+\n+    cdef:\n+        shared_ptr[CExpression] wrapped\n+        CExpression* expr\n+\n+    def __init__(self, Buffer buffer=None):\n+        if buffer is not None:\n+            c_buffer = pyarrow_unwrap_buffer(buffer)\n+            expr = GetResultValue(CExpression.Deserialize(deref(c_buffer)))\n+            self.init(expr)\n\nReview comment:\n       Maybe we can put this in a `Expression._deserialize` or so, to avoid putting this in the main constructor ? \r\n   (and keep this one with using `_forbid_instantiation`)\n\n##########\nFile path: python/pyarrow/_dataset.pyx\n##########\n@@ -41,6 +42,167 @@ def _forbid_instantiation(klass, subclasses_instead=True):\n     raise TypeError(msg)\n \n \n+cdef class Expression:\n+\n+    cdef:\n+        shared_ptr[CExpression] wrapped\n+        CExpression* expr\n+\n+    def __init__(self, Buffer buffer=None):\n+        if buffer is not None:\n+            c_buffer = pyarrow_unwrap_buffer(buffer)\n+            expr = GetResultValue(CExpression.Deserialize(deref(c_buffer)))\n+            self.init(expr)\n\nReview comment:\n       Another good reason is that right now calling this without `buffer` results in an expression that segfaults in certain conditions (like printing the repr)\n\n##########\nFile path: python/pyarrow/_dataset.pyx\n##########\n@@ -41,6 +42,167 @@ def _forbid_instantiation(klass, subclasses_instead=True):\n     raise TypeError(msg)\n \n \n+cdef class Expression:\n+\n+    cdef:\n+        shared_ptr[CExpression] wrapped\n+        CExpression* expr\n+\n+    def __init__(self, Buffer buffer=None):\n+        if buffer is not None:\n+            c_buffer = pyarrow_unwrap_buffer(buffer)\n+            expr = GetResultValue(CExpression.Deserialize(deref(c_buffer)))\n+            self.init(expr)\n+\n+    cdef void init(self, const shared_ptr[CExpression]& sp):\n+        self.wrapped = sp\n+        self.expr = sp.get()\n+\n+    @staticmethod\n+    cdef wrap(const shared_ptr[CExpression]& sp):\n+        self = Expression()\n+        self.init(sp)\n+        return self\n+\n+    cdef inline shared_ptr[CExpression] unwrap(self):\n+        return self.wrapped\n+\n+    def equals(self, Expression other):\n+        return self.expr.Equals(other.unwrap())\n+\n+    def __str__(self):\n+        return frombytes(self.expr.ToString())\n+\n+    def __repr__(self):\n+        return \"<pyarrow.dataset.{0} {1}>\".format(\n+            self.__class__.__name__, str(self)\n+        )\n+\n+    def __reduce__(self):\n+        buffer = pyarrow_wrap_buffer(GetResultValue(self.expr.Serialize()))\n+        return Expression, (buffer,)\n+\n+    def validate(self, Schema schema not None):\n+        \"\"\"Validate this expression for execution against a schema.\n+\n+        This will check that all reference fields are present (fields not in\n+        the schema will be replaced with null) and all subexpressions are\n+        executable. Returns the type to which this expression will evaluate.\n+\n+        Parameters\n+        ----------\n+        schema : Schema\n+            Schema to execute the expression on.\n+\n+        Returns\n+        -------\n+        type : DataType\n+        \"\"\"\n+        cdef:\n+            shared_ptr[CSchema] sp_schema\n+            CResult[shared_ptr[CDataType]] result\n+        sp_schema = pyarrow_unwrap_schema(schema)\n+        result = self.expr.Validate(deref(sp_schema))\n+        return pyarrow_wrap_data_type(GetResultValue(result))\n+\n+    def assume(self, Expression given):\n+        \"\"\"Simplify to an equivalent Expression given assumed constraints.\"\"\"\n+        return Expression.wrap(self.expr.Assume(given.unwrap()))\n+\n+    def __invert__(self):\n+        return Expression.wrap(CMakeNotExpression(self.unwrap()))\n+\n+    @staticmethod\n+    cdef shared_ptr[CExpression] _expr_or_scalar(object expr) except *:\n+        if isinstance(expr, Expression):\n+            return (<Expression> expr).unwrap()\n+        return (<Expression> Expression.scalar(expr)).unwrap()\n+\n+    @staticmethod\n+    def wtf():\n+        return Expression.wrap(Expression._expr_or_scalar([]))\n\nReview comment:\n       Leftover?\n\n##########\nFile path: python/pyarrow/_dataset.pyx\n##########\n@@ -41,6 +42,167 @@ def _forbid_instantiation(klass, subclasses_instead=True):\n     raise TypeError(msg)\n \n \n+cdef class Expression:\n+\n+    cdef:\n+        shared_ptr[CExpression] wrapped\n+        CExpression* expr\n+\n+    def __init__(self, Buffer buffer=None):\n+        if buffer is not None:\n+            c_buffer = pyarrow_unwrap_buffer(buffer)\n+            expr = GetResultValue(CExpression.Deserialize(deref(c_buffer)))\n+            self.init(expr)\n+\n+    cdef void init(self, const shared_ptr[CExpression]& sp):\n+        self.wrapped = sp\n+        self.expr = sp.get()\n+\n+    @staticmethod\n+    cdef wrap(const shared_ptr[CExpression]& sp):\n+        self = Expression()\n\nReview comment:\n       ```suggestion\r\n           cdef Expression self = Expression.__new__(Expression)\r\n   ```\r\n   \r\n   (in case the init gets forbidden)\n\n##########\nFile path: python/pyarrow/_dataset.pyx\n##########\n@@ -118,21 +280,15 @@ cdef class Dataset:\n         -------\n         fragments : iterator of Fragment\n         \"\"\"\n-        cdef:\n-            CFragmentIterator iterator\n-            shared_ptr[CFragment] fragment\n+        cdef CFragmentIterator c_fragments\n \n         if filter is None or filter.expr == nullptr:\n-            iterator = self.dataset.GetFragments()\n+            c_fragments = self.dataset.GetFragments()\n         else:\n-            iterator = self.dataset.GetFragments(filter.unwrap())\n+            c_fragments = self.dataset.GetFragments(filter.unwrap())\n \n-        while True:\n-            fragment = GetResultValue(iterator.Next())\n-            if fragment.get() == nullptr:\n-                raise StopIteration()\n-            else:\n-                yield Fragment.wrap(fragment)\n+        for maybe_fragment in c_fragments:\n\nReview comment:\n       Why \"maybe\" fragment? (all elements should be fragments, no?)\n\n##########\nFile path: python/pyarrow/_dataset.pyx\n##########\n@@ -41,6 +42,167 @@ def _forbid_instantiation(klass, subclasses_instead=True):\n     raise TypeError(msg)\n \n \n+cdef class Expression:\n+\n+    cdef:\n+        shared_ptr[CExpression] wrapped\n+        CExpression* expr\n+\n+    def __init__(self, Buffer buffer=None):\n+        if buffer is not None:\n+            c_buffer = pyarrow_unwrap_buffer(buffer)\n+            expr = GetResultValue(CExpression.Deserialize(deref(c_buffer)))\n+            self.init(expr)\n+\n+    cdef void init(self, const shared_ptr[CExpression]& sp):\n+        self.wrapped = sp\n+        self.expr = sp.get()\n+\n+    @staticmethod\n+    cdef wrap(const shared_ptr[CExpression]& sp):\n+        self = Expression()\n+        self.init(sp)\n+        return self\n+\n+    cdef inline shared_ptr[CExpression] unwrap(self):\n+        return self.wrapped\n+\n+    def equals(self, Expression other):\n+        return self.expr.Equals(other.unwrap())\n+\n+    def __str__(self):\n+        return frombytes(self.expr.ToString())\n+\n+    def __repr__(self):\n+        return \"<pyarrow.dataset.{0} {1}>\".format(\n+            self.__class__.__name__, str(self)\n+        )\n+\n+    def __reduce__(self):\n+        buffer = pyarrow_wrap_buffer(GetResultValue(self.expr.Serialize()))\n+        return Expression, (buffer,)\n+\n+    def validate(self, Schema schema not None):\n+        \"\"\"Validate this expression for execution against a schema.\n+\n+        This will check that all reference fields are present (fields not in\n+        the schema will be replaced with null) and all subexpressions are\n+        executable. Returns the type to which this expression will evaluate.\n+\n+        Parameters\n+        ----------\n+        schema : Schema\n+            Schema to execute the expression on.\n+\n+        Returns\n+        -------\n+        type : DataType\n+        \"\"\"\n+        cdef:\n+            shared_ptr[CSchema] sp_schema\n+            CResult[shared_ptr[CDataType]] result\n+        sp_schema = pyarrow_unwrap_schema(schema)\n+        result = self.expr.Validate(deref(sp_schema))\n+        return pyarrow_wrap_data_type(GetResultValue(result))\n+\n+    def assume(self, Expression given):\n+        \"\"\"Simplify to an equivalent Expression given assumed constraints.\"\"\"\n+        return Expression.wrap(self.expr.Assume(given.unwrap()))\n+\n+    def __invert__(self):\n+        return Expression.wrap(CMakeNotExpression(self.unwrap()))\n+\n+    @staticmethod\n+    cdef shared_ptr[CExpression] _expr_or_scalar(object expr) except *:\n+        if isinstance(expr, Expression):\n+            return (<Expression> expr).unwrap()\n+        return (<Expression> Expression.scalar(expr)).unwrap()\n+\n+    @staticmethod\n+    def wtf():\n+        return Expression.wrap(Expression._expr_or_scalar([]))\n+\n+    def __richcmp__(self, other, int op):\n+        cdef:\n+            shared_ptr[CExpression] c_expr\n+            shared_ptr[CExpression] c_left\n+            shared_ptr[CExpression] c_right\n+\n+        c_left = self.unwrap()\n+        c_right = Expression._expr_or_scalar(other)\n+\n+        if op == Py_EQ:\n+            c_expr = CMakeEqualExpression(move(c_left), move(c_right))\n+        elif op == Py_NE:\n+            c_expr = CMakeNotEqualExpression(move(c_left), move(c_right))\n+        elif op == Py_GT:\n+            c_expr = CMakeGreaterExpression(move(c_left), move(c_right))\n+        elif op == Py_GE:\n+            c_expr = CMakeGreaterEqualExpression(move(c_left), move(c_right))\n+        elif op == Py_LT:\n+            c_expr = CMakeLessExpression(move(c_left), move(c_right))\n+        elif op == Py_LE:\n+            c_expr = CMakeLessEqualExpression(move(c_left), move(c_right))\n+\n+        return Expression.wrap(c_expr)\n+\n+    def __and__(Expression self, other):\n+        c_other = Expression._expr_or_scalar(other)\n+        return Expression.wrap(CMakeAndExpression(self.wrapped,\n+                                                  move(c_other)))\n+\n+    def __or__(Expression self, other):\n+        c_other = Expression._expr_or_scalar(other)\n+        return Expression.wrap(CMakeOrExpression(self.wrapped,\n+                                                 move(c_other)))\n+\n+    def is_valid(self):\n+        \"\"\"Checks whether the expression is not-null (valid)\"\"\"\n+        return Expression.wrap(self.expr.IsValid().Copy())\n+\n+    def cast(self, type, bint safe=True):\n+        \"\"\"Explicitly change the expression's data type\"\"\"\n+        cdef CastOptions options\n+        options = CastOptions.safe() if safe else CastOptions.unsafe()\n+        c_type = pyarrow_unwrap_data_type(ensure_type(type))\n+        return Expression.wrap(self.expr.CastTo(c_type,\n+                                                options.unwrap()).Copy())\n+\n+    def isin(self, values):\n+        \"\"\"Checks whether the expression is contained in values\"\"\"\n+        if not isinstance(values, pa.Array):\n+            values = pa.array(values)\n+        c_values = pyarrow_unwrap_array(values)\n+        return Expression.wrap(self.expr.In(c_values).Copy())\n+\n+    @staticmethod\n+    def field(str name not None):\n+        return Expression.wrap(CMakeFieldExpression(tobytes(name)))\n+\n+    @staticmethod\n+    def scalar(value):\n\nReview comment:\n       ```suggestion\r\n       def _field(str name not None):\r\n           return Expression.wrap(CMakeFieldExpression(tobytes(name)))\r\n   \r\n       @staticmethod\r\n       def _scalar(value):\r\n   ```\r\n   \r\n   To avoid public API exposure (that we might want/need to preserve later one), I would make those private. For the end-user, there are already the `ds.field(..)` and `ds.scalar(..)` functions\n\n##########\nFile path: python/pyarrow/parquet.py\n##########\n@@ -154,27 +154,19 @@ def convert_single_predicate(col, op, val):\n                 '\"{0}\" is not a valid operator in predicates.'.format(\n                     (col, op, val)))\n \n-    or_exprs = []\n+    disjunction_members = []\n \n     for conjunction in filters:\n-        and_exprs = []\n-        for col, op, val in conjunction:\n-            and_exprs.append(convert_single_predicate(col, op, val))\n+        conjunction_members = [\n+            convert_single_predicate(col, op, val)\n+            for col, op, val in conjunction\n+        ]\n \n-        expr = and_exprs[0]\n-        if len(and_exprs) > 1:\n-            for and_expr in and_exprs[1:]:\n-                expr = ds.AndExpression(expr, and_expr)\n+        conjunction = reduce(lambda acc, one: acc & one, conjunction_members)\n\nReview comment:\n       Nice :)\r\n   \r\n   Further change could be to use `operator.and_` / `or_` instead of `lambda acc, one: acc & one`\n\n##########\nFile path: python/pyarrow/_dataset.pyx\n##########\n@@ -27,6 +27,7 @@ from pyarrow.lib cimport *\n from pyarrow.includes.libarrow_dataset cimport *\n from pyarrow.compat import frombytes, tobytes\n from pyarrow._fs cimport FileSystem, FileInfo, FileSelector\n+import functools\n\nReview comment:\n       I think this import is not used anymore in this file now?\n\n##########\nFile path: python/pyarrow/tests/test_dataset.py\n##########\n@@ -218,33 +216,21 @@ def test_filesystem_dataset(mockfs):\n \n     # validation of required arguments\n     with pytest.raises(TypeError, match=\"incorrect type\"):\n-        ds.FileSystemDataset(paths, format=file_format, filesystem=mockfs)\n+        ds.FileSystemDataset(paths, schema=None, format=file_format,\n+                             filesystem=mockfs)\n\nReview comment:\n       Can you leave those as they were as well? The goal here was to test that you get a decent error message when leaving out one of the required arguments (maybe should have added a better comment about that), which was the reason I used the manual checking in FileSystemDataset constructor instead of using actual required positional arguments.\n\n##########\nFile path: python/pyarrow/tests/test_dataset.py\n##########\n@@ -373,141 +357,70 @@ def test_partitioning():\n     assert expr.equals(expected)\n \n \n-def test_expression():\n-    a = ds.ScalarExpression(1)\n-    b = ds.ScalarExpression(1.1)\n-    c = ds.ScalarExpression(True)\n-    d = ds.ScalarExpression(\"string\")\n-    e = ds.ScalarExpression(None)\n-\n-    equal = ds.ComparisonExpression(ds.CompareOperator.Equal, a, b)\n-    greater = a > b\n-    assert equal.op == ds.CompareOperator.Equal\n-\n-    and_ = ds.AndExpression(a, b)\n-    assert and_.left_operand.equals(a)\n-    assert and_.right_operand.equals(b)\n-    assert and_.equals(ds.AndExpression(a, b))\n-    assert and_.equals(and_)\n-\n-    or_ = ds.OrExpression(a, b)\n-    not_ = ds.NotExpression(ds.OrExpression(a, b))\n-    is_valid = ds.IsValidExpression(a)\n-    cast_safe = ds.CastExpression(a, pa.int32())\n-    cast_unsafe = ds.CastExpression(a, pa.int32(), safe=False)\n-    in_ = ds.InExpression(a, pa.array([1, 2, 3]))\n-\n-    assert is_valid.operand == a\n-    assert in_.set_.equals(pa.array([1, 2, 3]))\n-    assert cast_unsafe.to == pa.int32()\n-    assert cast_unsafe.safe is False\n-    assert cast_safe.safe is True\n-\n-    condition = ds.ComparisonExpression(\n-        ds.CompareOperator.Greater,\n-        ds.FieldExpression('i64'),\n-        ds.ScalarExpression(5)\n-    )\n+def test_expression_serialization():\n+    a = ds.Expression.scalar(1)\n+    b = ds.Expression.scalar(1.1)\n+    c = ds.Expression.scalar(True)\n+    d = ds.Expression.scalar(\"string\")\n+    e = ds.Expression.scalar(None)\n\nReview comment:\n       ```suggestion\r\n       a = ds.scalar(1)\r\n       b = ds.scalar(1.1)\r\n       c = ds.scalar(True)\r\n       d = ds.scalar(\"string\")\r\n       e = ds.scalar(None)\r\n   ```\n\n##########\nFile path: python/pyarrow/tests/test_dataset.py\n##########\n@@ -198,11 +197,10 @@ def test_filesystem_dataset(mockfs):\n     file_format = ds.ParquetFileFormat()\n \n     paths = ['subdir/1/xxx/file0.parquet', 'subdir/2/yyy/file1.parquet']\n-    partitions = [ds.ScalarExpression(True), ds.ScalarExpression(True)]\n+    partitions = [ds.Expression.scalar(True), ds.Expression.scalar(True)]\n\nReview comment:\n       ```suggestion\r\n       partitions = [ds.scalar(True), ds.scalar(True)]\r\n   ```\n\n##########\nFile path: python/pyarrow/tests/test_dataset.py\n##########\n@@ -373,141 +357,70 @@ def test_partitioning():\n     assert expr.equals(expected)\n \n \n-def test_expression():\n-    a = ds.ScalarExpression(1)\n-    b = ds.ScalarExpression(1.1)\n-    c = ds.ScalarExpression(True)\n-    d = ds.ScalarExpression(\"string\")\n-    e = ds.ScalarExpression(None)\n-\n-    equal = ds.ComparisonExpression(ds.CompareOperator.Equal, a, b)\n-    greater = a > b\n-    assert equal.op == ds.CompareOperator.Equal\n-\n-    and_ = ds.AndExpression(a, b)\n-    assert and_.left_operand.equals(a)\n-    assert and_.right_operand.equals(b)\n-    assert and_.equals(ds.AndExpression(a, b))\n-    assert and_.equals(and_)\n-\n-    or_ = ds.OrExpression(a, b)\n-    not_ = ds.NotExpression(ds.OrExpression(a, b))\n-    is_valid = ds.IsValidExpression(a)\n-    cast_safe = ds.CastExpression(a, pa.int32())\n-    cast_unsafe = ds.CastExpression(a, pa.int32(), safe=False)\n-    in_ = ds.InExpression(a, pa.array([1, 2, 3]))\n-\n-    assert is_valid.operand == a\n-    assert in_.set_.equals(pa.array([1, 2, 3]))\n-    assert cast_unsafe.to == pa.int32()\n-    assert cast_unsafe.safe is False\n-    assert cast_safe.safe is True\n-\n-    condition = ds.ComparisonExpression(\n-        ds.CompareOperator.Greater,\n-        ds.FieldExpression('i64'),\n-        ds.ScalarExpression(5)\n-    )\n+def test_expression_serialization():\n+    a = ds.Expression.scalar(1)\n+    b = ds.Expression.scalar(1.1)\n+    c = ds.Expression.scalar(True)\n+    d = ds.Expression.scalar(\"string\")\n+    e = ds.Expression.scalar(None)\n+\n+    condition = ds.field('i64') > 5\n     schema = pa.schema([\n         pa.field('i64', pa.int64()),\n         pa.field('f64', pa.float64())\n     ])\n     assert condition.validate(schema) == pa.bool_()\n \n-    i64_is_5 = ds.ComparisonExpression(\n-        ds.CompareOperator.Equal,\n-        ds.FieldExpression('i64'),\n-        ds.ScalarExpression(5)\n-    )\n-    i64_is_7 = ds.ComparisonExpression(\n-        ds.CompareOperator.Equal,\n-        ds.FieldExpression('i64'),\n-        ds.ScalarExpression(7)\n-    )\n-    assert condition.assume(i64_is_5).equals(ds.ScalarExpression(False))\n-    assert condition.assume(i64_is_7).equals(ds.ScalarExpression(True))\n-    assert str(condition) == \"(i64 > 5:int64)\"\n-    assert \"(i64 > 5:int64)\" in repr(condition)\n+    assert condition.assume(ds.field('i64') == 5).equals(\n+        ds.Expression.scalar(False))\n \n-    all_exprs = [a, b, c, d, e, equal, greater, and_, or_, not_, is_valid,\n-                 cast_unsafe, cast_safe, in_, condition, i64_is_5, i64_is_7]\n+    assert condition.assume(ds.field('i64') == 7).equals(\n+        ds.Expression.scalar(True))\n\nReview comment:\n       ```suggestion\r\n           ds.scalar(True))\r\n   ```\n\n##########\nFile path: python/pyarrow/tests/test_dataset.py\n##########\n@@ -218,33 +216,21 @@ def test_filesystem_dataset(mockfs):\n \n     # validation of required arguments\n     with pytest.raises(TypeError, match=\"incorrect type\"):\n-        ds.FileSystemDataset(paths, format=file_format, filesystem=mockfs)\n+        ds.FileSystemDataset(paths, schema=None, format=file_format,\n+                             filesystem=mockfs)\n     with pytest.raises(TypeError, match=\"incorrect type\"):\n-        ds.FileSystemDataset(paths, schema=schema, filesystem=mockfs)\n+        ds.FileSystemDataset(paths, schema=schema, format=None,\n+                             filesystem=mockfs)\n     with pytest.raises(TypeError, match=\"incorrect type\"):\n-        ds.FileSystemDataset(paths, schema=schema, format=file_format)\n+        ds.FileSystemDataset(paths, schema=schema, format=file_format,\n+                             filesystem=None)\n     # validation of root_partition\n     with pytest.raises(TypeError, match=\"incorrect type\"):\n         ds.FileSystemDataset(paths, schema=schema, format=file_format,\n                              filesystem=mockfs, root_partition=1)\n \n-    root_partition = ds.ComparisonExpression(\n-        ds.CompareOperator.Equal,\n-        ds.FieldExpression('level'),\n-        ds.ScalarExpression(1337)\n-    )\n-    partitions = [\n-        ds.ComparisonExpression(\n-            ds.CompareOperator.Equal,\n-            ds.FieldExpression('part'),\n-            ds.ScalarExpression(1)\n-        ),\n-        ds.ComparisonExpression(\n-            ds.CompareOperator.Equal,\n-            ds.FieldExpression('part'),\n-            ds.ScalarExpression(2)\n-        )\n-    ]\n+    root_partition = ds.field('level') == ds.Expression.scalar(1337)\n\nReview comment:\n       ```suggestion\r\n       root_partition = ds.field('level') == ds.scalar(1337)\r\n   ```\n\n##########\nFile path: python/pyarrow/tests/test_dataset.py\n##########\n@@ -373,141 +357,70 @@ def test_partitioning():\n     assert expr.equals(expected)\n \n \n-def test_expression():\n-    a = ds.ScalarExpression(1)\n-    b = ds.ScalarExpression(1.1)\n-    c = ds.ScalarExpression(True)\n-    d = ds.ScalarExpression(\"string\")\n-    e = ds.ScalarExpression(None)\n-\n-    equal = ds.ComparisonExpression(ds.CompareOperator.Equal, a, b)\n-    greater = a > b\n-    assert equal.op == ds.CompareOperator.Equal\n-\n-    and_ = ds.AndExpression(a, b)\n-    assert and_.left_operand.equals(a)\n-    assert and_.right_operand.equals(b)\n-    assert and_.equals(ds.AndExpression(a, b))\n-    assert and_.equals(and_)\n-\n-    or_ = ds.OrExpression(a, b)\n-    not_ = ds.NotExpression(ds.OrExpression(a, b))\n-    is_valid = ds.IsValidExpression(a)\n-    cast_safe = ds.CastExpression(a, pa.int32())\n-    cast_unsafe = ds.CastExpression(a, pa.int32(), safe=False)\n-    in_ = ds.InExpression(a, pa.array([1, 2, 3]))\n-\n-    assert is_valid.operand == a\n-    assert in_.set_.equals(pa.array([1, 2, 3]))\n-    assert cast_unsafe.to == pa.int32()\n-    assert cast_unsafe.safe is False\n-    assert cast_safe.safe is True\n-\n-    condition = ds.ComparisonExpression(\n-        ds.CompareOperator.Greater,\n-        ds.FieldExpression('i64'),\n-        ds.ScalarExpression(5)\n-    )\n+def test_expression_serialization():\n+    a = ds.Expression.scalar(1)\n+    b = ds.Expression.scalar(1.1)\n+    c = ds.Expression.scalar(True)\n+    d = ds.Expression.scalar(\"string\")\n+    e = ds.Expression.scalar(None)\n+\n+    condition = ds.field('i64') > 5\n     schema = pa.schema([\n         pa.field('i64', pa.int64()),\n         pa.field('f64', pa.float64())\n     ])\n     assert condition.validate(schema) == pa.bool_()\n \n-    i64_is_5 = ds.ComparisonExpression(\n-        ds.CompareOperator.Equal,\n-        ds.FieldExpression('i64'),\n-        ds.ScalarExpression(5)\n-    )\n-    i64_is_7 = ds.ComparisonExpression(\n-        ds.CompareOperator.Equal,\n-        ds.FieldExpression('i64'),\n-        ds.ScalarExpression(7)\n-    )\n-    assert condition.assume(i64_is_5).equals(ds.ScalarExpression(False))\n-    assert condition.assume(i64_is_7).equals(ds.ScalarExpression(True))\n-    assert str(condition) == \"(i64 > 5:int64)\"\n-    assert \"(i64 > 5:int64)\" in repr(condition)\n+    assert condition.assume(ds.field('i64') == 5).equals(\n+        ds.Expression.scalar(False))\n\nReview comment:\n       ```suggestion\r\n           ds.scalar(False))\r\n   ```\n\n##########\nFile path: python/pyarrow/tests/test_dataset.py\n##########\n@@ -373,141 +357,70 @@ def test_partitioning():\n     assert expr.equals(expected)\n \n \n-def test_expression():\n-    a = ds.ScalarExpression(1)\n-    b = ds.ScalarExpression(1.1)\n-    c = ds.ScalarExpression(True)\n-    d = ds.ScalarExpression(\"string\")\n-    e = ds.ScalarExpression(None)\n-\n-    equal = ds.ComparisonExpression(ds.CompareOperator.Equal, a, b)\n-    greater = a > b\n-    assert equal.op == ds.CompareOperator.Equal\n-\n-    and_ = ds.AndExpression(a, b)\n-    assert and_.left_operand.equals(a)\n-    assert and_.right_operand.equals(b)\n-    assert and_.equals(ds.AndExpression(a, b))\n-    assert and_.equals(and_)\n-\n-    or_ = ds.OrExpression(a, b)\n-    not_ = ds.NotExpression(ds.OrExpression(a, b))\n-    is_valid = ds.IsValidExpression(a)\n-    cast_safe = ds.CastExpression(a, pa.int32())\n-    cast_unsafe = ds.CastExpression(a, pa.int32(), safe=False)\n-    in_ = ds.InExpression(a, pa.array([1, 2, 3]))\n-\n-    assert is_valid.operand == a\n-    assert in_.set_.equals(pa.array([1, 2, 3]))\n-    assert cast_unsafe.to == pa.int32()\n-    assert cast_unsafe.safe is False\n-    assert cast_safe.safe is True\n-\n-    condition = ds.ComparisonExpression(\n-        ds.CompareOperator.Greater,\n-        ds.FieldExpression('i64'),\n-        ds.ScalarExpression(5)\n-    )\n+def test_expression_serialization():\n+    a = ds.Expression.scalar(1)\n+    b = ds.Expression.scalar(1.1)\n+    c = ds.Expression.scalar(True)\n+    d = ds.Expression.scalar(\"string\")\n+    e = ds.Expression.scalar(None)\n+\n+    condition = ds.field('i64') > 5\n     schema = pa.schema([\n         pa.field('i64', pa.int64()),\n         pa.field('f64', pa.float64())\n     ])\n     assert condition.validate(schema) == pa.bool_()\n \n-    i64_is_5 = ds.ComparisonExpression(\n-        ds.CompareOperator.Equal,\n-        ds.FieldExpression('i64'),\n-        ds.ScalarExpression(5)\n-    )\n-    i64_is_7 = ds.ComparisonExpression(\n-        ds.CompareOperator.Equal,\n-        ds.FieldExpression('i64'),\n-        ds.ScalarExpression(7)\n-    )\n-    assert condition.assume(i64_is_5).equals(ds.ScalarExpression(False))\n-    assert condition.assume(i64_is_7).equals(ds.ScalarExpression(True))\n-    assert str(condition) == \"(i64 > 5:int64)\"\n-    assert \"(i64 > 5:int64)\" in repr(condition)\n+    assert condition.assume(ds.field('i64') == 5).equals(\n+        ds.Expression.scalar(False))\n \n-    all_exprs = [a, b, c, d, e, equal, greater, and_, or_, not_, is_valid,\n-                 cast_unsafe, cast_safe, in_, condition, i64_is_5, i64_is_7]\n+    assert condition.assume(ds.field('i64') == 7).equals(\n+        ds.Expression.scalar(True))\n+\n+    all_exprs = [a, b, c, d, e, a == b, a > b, a & b, a | b, ~c,\n+                 d.is_valid(), a.cast(pa.int32(), safe=False),\n+                 a.cast(pa.int32(), safe=False), a.isin([1, 2, 3]),\n+                 ds.field('i64') > 5, ds.field('i64') == 5,\n+                 ds.field('i64') == 7]\n     for expr in all_exprs:\n+        print(str(expr))\n\nReview comment:\n       leftover\n\n##########\nFile path: python/pyarrow/tests/test_dataset.py\n##########\n@@ -592,7 +505,7 @@ def test_filesystem_factory(mockfs, paths_or_selector):\n     assert isinstance(factory.inspect_schemas(), list)\n     assert isinstance(factory.finish(inspected_schema),\n                       ds.FileSystemDataset)\n-    assert factory.root_partition.equals(ds.ScalarExpression(True))\n+    assert factory.root_partition.equals(ds.Expression.scalar(True))\n\nReview comment:\n       ```suggestion\r\n       assert factory.root_partition.equals(ds.scalar(True))\r\n   ```\n\n##########\nFile path: python/pyarrow/tests/test_dataset.py\n##########\n@@ -373,141 +357,70 @@ def test_partitioning():\n     assert expr.equals(expected)\n \n \n-def test_expression():\n-    a = ds.ScalarExpression(1)\n-    b = ds.ScalarExpression(1.1)\n-    c = ds.ScalarExpression(True)\n-    d = ds.ScalarExpression(\"string\")\n-    e = ds.ScalarExpression(None)\n-\n-    equal = ds.ComparisonExpression(ds.CompareOperator.Equal, a, b)\n-    greater = a > b\n-    assert equal.op == ds.CompareOperator.Equal\n-\n-    and_ = ds.AndExpression(a, b)\n-    assert and_.left_operand.equals(a)\n-    assert and_.right_operand.equals(b)\n-    assert and_.equals(ds.AndExpression(a, b))\n-    assert and_.equals(and_)\n-\n-    or_ = ds.OrExpression(a, b)\n-    not_ = ds.NotExpression(ds.OrExpression(a, b))\n-    is_valid = ds.IsValidExpression(a)\n-    cast_safe = ds.CastExpression(a, pa.int32())\n-    cast_unsafe = ds.CastExpression(a, pa.int32(), safe=False)\n-    in_ = ds.InExpression(a, pa.array([1, 2, 3]))\n-\n-    assert is_valid.operand == a\n-    assert in_.set_.equals(pa.array([1, 2, 3]))\n-    assert cast_unsafe.to == pa.int32()\n-    assert cast_unsafe.safe is False\n-    assert cast_safe.safe is True\n-\n-    condition = ds.ComparisonExpression(\n-        ds.CompareOperator.Greater,\n-        ds.FieldExpression('i64'),\n-        ds.ScalarExpression(5)\n-    )\n+def test_expression_serialization():\n+    a = ds.Expression.scalar(1)\n+    b = ds.Expression.scalar(1.1)\n+    c = ds.Expression.scalar(True)\n+    d = ds.Expression.scalar(\"string\")\n+    e = ds.Expression.scalar(None)\n+\n+    condition = ds.field('i64') > 5\n     schema = pa.schema([\n         pa.field('i64', pa.int64()),\n         pa.field('f64', pa.float64())\n     ])\n     assert condition.validate(schema) == pa.bool_()\n \n-    i64_is_5 = ds.ComparisonExpression(\n-        ds.CompareOperator.Equal,\n-        ds.FieldExpression('i64'),\n-        ds.ScalarExpression(5)\n-    )\n-    i64_is_7 = ds.ComparisonExpression(\n-        ds.CompareOperator.Equal,\n-        ds.FieldExpression('i64'),\n-        ds.ScalarExpression(7)\n-    )\n-    assert condition.assume(i64_is_5).equals(ds.ScalarExpression(False))\n-    assert condition.assume(i64_is_7).equals(ds.ScalarExpression(True))\n-    assert str(condition) == \"(i64 > 5:int64)\"\n-    assert \"(i64 > 5:int64)\" in repr(condition)\n+    assert condition.assume(ds.field('i64') == 5).equals(\n+        ds.Expression.scalar(False))\n \n-    all_exprs = [a, b, c, d, e, equal, greater, and_, or_, not_, is_valid,\n-                 cast_unsafe, cast_safe, in_, condition, i64_is_5, i64_is_7]\n+    assert condition.assume(ds.field('i64') == 7).equals(\n+        ds.Expression.scalar(True))\n+\n+    all_exprs = [a, b, c, d, e, a == b, a > b, a & b, a | b, ~c,\n+                 d.is_valid(), a.cast(pa.int32(), safe=False),\n+                 a.cast(pa.int32(), safe=False), a.isin([1, 2, 3]),\n+                 ds.field('i64') > 5, ds.field('i64') == 5,\n+                 ds.field('i64') == 7]\n     for expr in all_exprs:\n+        print(str(expr))\n+        assert isinstance(expr, ds.Expression)\n         restored = pickle.loads(pickle.dumps(expr))\n         assert expr.equals(restored)\n \n \n-def test_expression_ergonomics():\n+def test_expression_construction():\n     zero = ds.scalar(0)\n     one = ds.scalar(1)\n     true = ds.scalar(True)\n     false = ds.scalar(False)\n     string = ds.scalar(\"string\")\n     field = ds.field(\"field\")\n \n-    assert one.equals(ds.ScalarExpression(1))\n-    assert zero.equals(ds.ScalarExpression(0))\n-    assert true.equals(ds.ScalarExpression(True))\n-    assert false.equals(ds.ScalarExpression(False))\n-    assert string.equals(ds.ScalarExpression(\"string\"))\n-    assert field.equals(ds.FieldExpression(\"field\"))\n-\n-    expected = ds.AndExpression(ds.ScalarExpression(1), ds.ScalarExpression(0))\n-    for expr in [one & zero, 1 & zero, one & 0]:\n-        assert expr.equals(expected)\n-\n-    expected = ds.OrExpression(ds.ScalarExpression(1), ds.ScalarExpression(0))\n-    for expr in [one | zero, 1 | zero, one | 0]:\n-        assert expr.equals(expected)\n-\n-    comparison_ops = [\n-        (operator.eq, ds.CompareOperator.Equal),\n-        (operator.ne, ds.CompareOperator.NotEqual),\n-        (operator.ge, ds.CompareOperator.GreaterEqual),\n-        (operator.le, ds.CompareOperator.LessEqual),\n-        (operator.lt, ds.CompareOperator.Less),\n-        (operator.gt, ds.CompareOperator.Greater),\n-    ]\n-    for op, compare_op in comparison_ops:\n-        expr = op(zero, one)\n-        expected = ds.ComparisonExpression(compare_op, zero, one)\n-        assert expr.equals(expected)\n-\n+    expr = zero | one == string\n     expr = ~true == false\n-    expected = ds.ComparisonExpression(\n-        ds.CompareOperator.Equal,\n-        ds.NotExpression(ds.ScalarExpression(True)),\n-        ds.ScalarExpression(False)\n-    )\n-    assert expr.equals(expected)\n-\n     for typ in (\"bool\", pa.bool_()):\n         expr = field.cast(typ) == true\n-        expected = ds.ComparisonExpression(\n-            ds.CompareOperator.Equal,\n-            ds.CastExpression(ds.FieldExpression(\"field\"), pa.bool_()),\n-            ds.ScalarExpression(True)\n-        )\n-        assert expr.equals(expected)\n \n     expr = field.isin([1, 2])\n-    expected = ds.InExpression(ds.FieldExpression(\"field\"), pa.array([1, 2]))\n-    assert expr.equals(expected)\n \n     with pytest.raises(TypeError):\n-        field.isin(1)\n+        expr = field.isin(1)\n \n     # operations with non-scalar values\n     with pytest.raises(TypeError):\n-        field == [1]\n+        expr = field == [1]\n \n     with pytest.raises(TypeError):\n-        field != {1}\n+        expr = field != {1}\n \n     with pytest.raises(TypeError):\n-        field & [1]\n+        expr = field & [1]\n \n     with pytest.raises(TypeError):\n-        field | [1]\n+        expr = field | [1]\n+\n+    assert expr is not None  # silence flake8\n\nReview comment:\n       if you don't assign them to `expr` in the lines above (how it was before), you shouldn't need this to silence flake8. \r\n   Or did you get another linter error when not assigning them to a variable?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-28T13:02:09.327+0000",
                    "updated": "2020-04-28T13:02:09.327+0000",
                    "started": "2020-04-28T13:02:09.327+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "428134",
                    "issueId": "13274455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13274455/worklog/428226",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7026:\nURL: https://github.com/apache/arrow/pull/7026#discussion_r416746022\n\n\n\n##########\nFile path: python/pyarrow/_dataset.pyx\n##########\n@@ -41,6 +42,167 @@ def _forbid_instantiation(klass, subclasses_instead=True):\n     raise TypeError(msg)\n \n \n+cdef class Expression:\n+\n+    cdef:\n+        shared_ptr[CExpression] wrapped\n+        CExpression* expr\n+\n+    def __init__(self, Buffer buffer=None):\n+        if buffer is not None:\n+            c_buffer = pyarrow_unwrap_buffer(buffer)\n+            expr = GetResultValue(CExpression.Deserialize(deref(c_buffer)))\n+            self.init(expr)\n+\n+    cdef void init(self, const shared_ptr[CExpression]& sp):\n+        self.wrapped = sp\n+        self.expr = sp.get()\n+\n+    @staticmethod\n+    cdef wrap(const shared_ptr[CExpression]& sp):\n+        self = Expression()\n+        self.init(sp)\n+        return self\n+\n+    cdef inline shared_ptr[CExpression] unwrap(self):\n+        return self.wrapped\n+\n+    def equals(self, Expression other):\n+        return self.expr.Equals(other.unwrap())\n+\n+    def __str__(self):\n+        return frombytes(self.expr.ToString())\n+\n+    def __repr__(self):\n+        return \"<pyarrow.dataset.{0} {1}>\".format(\n+            self.__class__.__name__, str(self)\n+        )\n+\n+    def __reduce__(self):\n+        buffer = pyarrow_wrap_buffer(GetResultValue(self.expr.Serialize()))\n+        return Expression, (buffer,)\n+\n+    def validate(self, Schema schema not None):\n+        \"\"\"Validate this expression for execution against a schema.\n+\n+        This will check that all reference fields are present (fields not in\n+        the schema will be replaced with null) and all subexpressions are\n+        executable. Returns the type to which this expression will evaluate.\n+\n+        Parameters\n+        ----------\n+        schema : Schema\n+            Schema to execute the expression on.\n+\n+        Returns\n+        -------\n+        type : DataType\n+        \"\"\"\n+        cdef:\n+            shared_ptr[CSchema] sp_schema\n+            CResult[shared_ptr[CDataType]] result\n+        sp_schema = pyarrow_unwrap_schema(schema)\n+        result = self.expr.Validate(deref(sp_schema))\n+        return pyarrow_wrap_data_type(GetResultValue(result))\n+\n+    def assume(self, Expression given):\n+        \"\"\"Simplify to an equivalent Expression given assumed constraints.\"\"\"\n+        return Expression.wrap(self.expr.Assume(given.unwrap()))\n+\n+    def __invert__(self):\n+        return Expression.wrap(CMakeNotExpression(self.unwrap()))\n+\n+    @staticmethod\n+    cdef shared_ptr[CExpression] _expr_or_scalar(object expr) except *:\n+        if isinstance(expr, Expression):\n+            return (<Expression> expr).unwrap()\n+        return (<Expression> Expression.scalar(expr)).unwrap()\n+\n+    @staticmethod\n+    def wtf():\n+        return Expression.wrap(Expression._expr_or_scalar([]))\n\nReview comment:\n       yep\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-28T16:17:45.438+0000",
                    "updated": "2020-04-28T16:17:45.438+0000",
                    "started": "2020-04-28T16:17:45.438+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "428226",
                    "issueId": "13274455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13274455/worklog/428231",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7026:\nURL: https://github.com/apache/arrow/pull/7026#discussion_r416750345\n\n\n\n##########\nFile path: python/pyarrow/_dataset.pyx\n##########\n@@ -41,6 +42,167 @@ def _forbid_instantiation(klass, subclasses_instead=True):\n     raise TypeError(msg)\n \n \n+cdef class Expression:\n+\n+    cdef:\n+        shared_ptr[CExpression] wrapped\n+        CExpression* expr\n+\n+    def __init__(self, Buffer buffer=None):\n+        if buffer is not None:\n+            c_buffer = pyarrow_unwrap_buffer(buffer)\n+            expr = GetResultValue(CExpression.Deserialize(deref(c_buffer)))\n+            self.init(expr)\n+\n+    cdef void init(self, const shared_ptr[CExpression]& sp):\n+        self.wrapped = sp\n+        self.expr = sp.get()\n+\n+    @staticmethod\n+    cdef wrap(const shared_ptr[CExpression]& sp):\n+        self = Expression()\n+        self.init(sp)\n+        return self\n+\n+    cdef inline shared_ptr[CExpression] unwrap(self):\n+        return self.wrapped\n+\n+    def equals(self, Expression other):\n+        return self.expr.Equals(other.unwrap())\n+\n+    def __str__(self):\n+        return frombytes(self.expr.ToString())\n+\n+    def __repr__(self):\n+        return \"<pyarrow.dataset.{0} {1}>\".format(\n+            self.__class__.__name__, str(self)\n+        )\n+\n+    def __reduce__(self):\n+        buffer = pyarrow_wrap_buffer(GetResultValue(self.expr.Serialize()))\n+        return Expression, (buffer,)\n+\n+    def validate(self, Schema schema not None):\n+        \"\"\"Validate this expression for execution against a schema.\n+\n+        This will check that all reference fields are present (fields not in\n+        the schema will be replaced with null) and all subexpressions are\n+        executable. Returns the type to which this expression will evaluate.\n+\n+        Parameters\n+        ----------\n+        schema : Schema\n+            Schema to execute the expression on.\n+\n+        Returns\n+        -------\n+        type : DataType\n+        \"\"\"\n+        cdef:\n+            shared_ptr[CSchema] sp_schema\n+            CResult[shared_ptr[CDataType]] result\n+        sp_schema = pyarrow_unwrap_schema(schema)\n+        result = self.expr.Validate(deref(sp_schema))\n+        return pyarrow_wrap_data_type(GetResultValue(result))\n+\n+    def assume(self, Expression given):\n+        \"\"\"Simplify to an equivalent Expression given assumed constraints.\"\"\"\n+        return Expression.wrap(self.expr.Assume(given.unwrap()))\n+\n+    def __invert__(self):\n+        return Expression.wrap(CMakeNotExpression(self.unwrap()))\n+\n+    @staticmethod\n+    cdef shared_ptr[CExpression] _expr_or_scalar(object expr) except *:\n+        if isinstance(expr, Expression):\n+            return (<Expression> expr).unwrap()\n+        return (<Expression> Expression.scalar(expr)).unwrap()\n+\n+    @staticmethod\n+    def wtf():\n+        return Expression.wrap(Expression._expr_or_scalar([]))\n+\n+    def __richcmp__(self, other, int op):\n+        cdef:\n+            shared_ptr[CExpression] c_expr\n+            shared_ptr[CExpression] c_left\n+            shared_ptr[CExpression] c_right\n+\n+        c_left = self.unwrap()\n+        c_right = Expression._expr_or_scalar(other)\n+\n+        if op == Py_EQ:\n+            c_expr = CMakeEqualExpression(move(c_left), move(c_right))\n+        elif op == Py_NE:\n+            c_expr = CMakeNotEqualExpression(move(c_left), move(c_right))\n+        elif op == Py_GT:\n+            c_expr = CMakeGreaterExpression(move(c_left), move(c_right))\n+        elif op == Py_GE:\n+            c_expr = CMakeGreaterEqualExpression(move(c_left), move(c_right))\n+        elif op == Py_LT:\n+            c_expr = CMakeLessExpression(move(c_left), move(c_right))\n+        elif op == Py_LE:\n+            c_expr = CMakeLessEqualExpression(move(c_left), move(c_right))\n+\n+        return Expression.wrap(c_expr)\n+\n+    def __and__(Expression self, other):\n+        c_other = Expression._expr_or_scalar(other)\n+        return Expression.wrap(CMakeAndExpression(self.wrapped,\n+                                                  move(c_other)))\n+\n+    def __or__(Expression self, other):\n+        c_other = Expression._expr_or_scalar(other)\n+        return Expression.wrap(CMakeOrExpression(self.wrapped,\n+                                                 move(c_other)))\n+\n+    def is_valid(self):\n+        \"\"\"Checks whether the expression is not-null (valid)\"\"\"\n+        return Expression.wrap(self.expr.IsValid().Copy())\n+\n+    def cast(self, type, bint safe=True):\n+        \"\"\"Explicitly change the expression's data type\"\"\"\n+        cdef CastOptions options\n+        options = CastOptions.safe() if safe else CastOptions.unsafe()\n+        c_type = pyarrow_unwrap_data_type(ensure_type(type))\n+        return Expression.wrap(self.expr.CastTo(c_type,\n+                                                options.unwrap()).Copy())\n+\n+    def isin(self, values):\n+        \"\"\"Checks whether the expression is contained in values\"\"\"\n+        if not isinstance(values, pa.Array):\n+            values = pa.array(values)\n+        c_values = pyarrow_unwrap_array(values)\n+        return Expression.wrap(self.expr.In(c_values).Copy())\n+\n+    @staticmethod\n+    def field(str name not None):\n+        return Expression.wrap(CMakeFieldExpression(tobytes(name)))\n+\n+    @staticmethod\n+    def scalar(value):\n\nReview comment:\n       will do\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-28T16:23:39.682+0000",
                    "updated": "2020-04-28T16:23:39.682+0000",
                    "started": "2020-04-28T16:23:39.682+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "428231",
                    "issueId": "13274455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13274455/worklog/428236",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7026:\nURL: https://github.com/apache/arrow/pull/7026#discussion_r416758776\n\n\n\n##########\nFile path: python/pyarrow/_dataset.pyx\n##########\n@@ -41,6 +42,167 @@ def _forbid_instantiation(klass, subclasses_instead=True):\n     raise TypeError(msg)\n \n \n+cdef class Expression:\n+\n+    cdef:\n+        shared_ptr[CExpression] wrapped\n+        CExpression* expr\n+\n+    def __init__(self, Buffer buffer=None):\n+        if buffer is not None:\n+            c_buffer = pyarrow_unwrap_buffer(buffer)\n+            expr = GetResultValue(CExpression.Deserialize(deref(c_buffer)))\n+            self.init(expr)\n\nReview comment:\n       This would definitely be better but it gives me an error like \r\n   ```\r\n   E           _pickle.PicklingError: Can't pickle <built-in function _deserialize>: attribute lookup _deserialize on pyarrow._dataset failed\r\n   ```\r\n   I'll permute until this works.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-28T16:35:46.272+0000",
                    "updated": "2020-04-28T16:35:46.272+0000",
                    "started": "2020-04-28T16:35:46.272+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "428236",
                    "issueId": "13274455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13274455/worklog/428238",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7026:\nURL: https://github.com/apache/arrow/pull/7026#discussion_r416760152\n\n\n\n##########\nFile path: python/pyarrow/_dataset.pyx\n##########\n@@ -118,21 +280,15 @@ cdef class Dataset:\n         -------\n         fragments : iterator of Fragment\n         \"\"\"\n-        cdef:\n-            CFragmentIterator iterator\n-            shared_ptr[CFragment] fragment\n+        cdef CFragmentIterator c_fragments\n \n         if filter is None or filter.expr == nullptr:\n-            iterator = self.dataset.GetFragments()\n+            c_fragments = self.dataset.GetFragments()\n         else:\n-            iterator = self.dataset.GetFragments(filter.unwrap())\n+            c_fragments = self.dataset.GetFragments(filter.unwrap())\n \n-        while True:\n-            fragment = GetResultValue(iterator.Next())\n-            if fragment.get() == nullptr:\n-                raise StopIteration()\n-            else:\n-                yield Fragment.wrap(fragment)\n+        for maybe_fragment in c_fragments:\n\nReview comment:\n       actually all elements are `CResult[shared_ptr[CFragment]]`\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-28T16:37:46.940+0000",
                    "updated": "2020-04-28T16:37:46.940+0000",
                    "started": "2020-04-28T16:37:46.939+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "428238",
                    "issueId": "13274455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13274455/worklog/428240",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7026:\nURL: https://github.com/apache/arrow/pull/7026#discussion_r416761581\n\n\n\n##########\nFile path: python/pyarrow/tests/test_dataset.py\n##########\n@@ -373,141 +357,70 @@ def test_partitioning():\n     assert expr.equals(expected)\n \n \n-def test_expression():\n-    a = ds.ScalarExpression(1)\n-    b = ds.ScalarExpression(1.1)\n-    c = ds.ScalarExpression(True)\n-    d = ds.ScalarExpression(\"string\")\n-    e = ds.ScalarExpression(None)\n-\n-    equal = ds.ComparisonExpression(ds.CompareOperator.Equal, a, b)\n-    greater = a > b\n-    assert equal.op == ds.CompareOperator.Equal\n-\n-    and_ = ds.AndExpression(a, b)\n-    assert and_.left_operand.equals(a)\n-    assert and_.right_operand.equals(b)\n-    assert and_.equals(ds.AndExpression(a, b))\n-    assert and_.equals(and_)\n-\n-    or_ = ds.OrExpression(a, b)\n-    not_ = ds.NotExpression(ds.OrExpression(a, b))\n-    is_valid = ds.IsValidExpression(a)\n-    cast_safe = ds.CastExpression(a, pa.int32())\n-    cast_unsafe = ds.CastExpression(a, pa.int32(), safe=False)\n-    in_ = ds.InExpression(a, pa.array([1, 2, 3]))\n-\n-    assert is_valid.operand == a\n-    assert in_.set_.equals(pa.array([1, 2, 3]))\n-    assert cast_unsafe.to == pa.int32()\n-    assert cast_unsafe.safe is False\n-    assert cast_safe.safe is True\n-\n-    condition = ds.ComparisonExpression(\n-        ds.CompareOperator.Greater,\n-        ds.FieldExpression('i64'),\n-        ds.ScalarExpression(5)\n-    )\n+def test_expression_serialization():\n+    a = ds.Expression.scalar(1)\n+    b = ds.Expression.scalar(1.1)\n+    c = ds.Expression.scalar(True)\n+    d = ds.Expression.scalar(\"string\")\n+    e = ds.Expression.scalar(None)\n+\n+    condition = ds.field('i64') > 5\n     schema = pa.schema([\n         pa.field('i64', pa.int64()),\n         pa.field('f64', pa.float64())\n     ])\n     assert condition.validate(schema) == pa.bool_()\n \n-    i64_is_5 = ds.ComparisonExpression(\n-        ds.CompareOperator.Equal,\n-        ds.FieldExpression('i64'),\n-        ds.ScalarExpression(5)\n-    )\n-    i64_is_7 = ds.ComparisonExpression(\n-        ds.CompareOperator.Equal,\n-        ds.FieldExpression('i64'),\n-        ds.ScalarExpression(7)\n-    )\n-    assert condition.assume(i64_is_5).equals(ds.ScalarExpression(False))\n-    assert condition.assume(i64_is_7).equals(ds.ScalarExpression(True))\n-    assert str(condition) == \"(i64 > 5:int64)\"\n-    assert \"(i64 > 5:int64)\" in repr(condition)\n+    assert condition.assume(ds.field('i64') == 5).equals(\n+        ds.Expression.scalar(False))\n \n-    all_exprs = [a, b, c, d, e, equal, greater, and_, or_, not_, is_valid,\n-                 cast_unsafe, cast_safe, in_, condition, i64_is_5, i64_is_7]\n+    assert condition.assume(ds.field('i64') == 7).equals(\n+        ds.Expression.scalar(True))\n+\n+    all_exprs = [a, b, c, d, e, a == b, a > b, a & b, a | b, ~c,\n+                 d.is_valid(), a.cast(pa.int32(), safe=False),\n+                 a.cast(pa.int32(), safe=False), a.isin([1, 2, 3]),\n+                 ds.field('i64') > 5, ds.field('i64') == 5,\n+                 ds.field('i64') == 7]\n     for expr in all_exprs:\n+        print(str(expr))\n+        assert isinstance(expr, ds.Expression)\n         restored = pickle.loads(pickle.dumps(expr))\n         assert expr.equals(restored)\n \n \n-def test_expression_ergonomics():\n+def test_expression_construction():\n     zero = ds.scalar(0)\n     one = ds.scalar(1)\n     true = ds.scalar(True)\n     false = ds.scalar(False)\n     string = ds.scalar(\"string\")\n     field = ds.field(\"field\")\n \n-    assert one.equals(ds.ScalarExpression(1))\n-    assert zero.equals(ds.ScalarExpression(0))\n-    assert true.equals(ds.ScalarExpression(True))\n-    assert false.equals(ds.ScalarExpression(False))\n-    assert string.equals(ds.ScalarExpression(\"string\"))\n-    assert field.equals(ds.FieldExpression(\"field\"))\n-\n-    expected = ds.AndExpression(ds.ScalarExpression(1), ds.ScalarExpression(0))\n-    for expr in [one & zero, 1 & zero, one & 0]:\n-        assert expr.equals(expected)\n-\n-    expected = ds.OrExpression(ds.ScalarExpression(1), ds.ScalarExpression(0))\n-    for expr in [one | zero, 1 | zero, one | 0]:\n-        assert expr.equals(expected)\n-\n-    comparison_ops = [\n-        (operator.eq, ds.CompareOperator.Equal),\n-        (operator.ne, ds.CompareOperator.NotEqual),\n-        (operator.ge, ds.CompareOperator.GreaterEqual),\n-        (operator.le, ds.CompareOperator.LessEqual),\n-        (operator.lt, ds.CompareOperator.Less),\n-        (operator.gt, ds.CompareOperator.Greater),\n-    ]\n-    for op, compare_op in comparison_ops:\n-        expr = op(zero, one)\n-        expected = ds.ComparisonExpression(compare_op, zero, one)\n-        assert expr.equals(expected)\n-\n+    expr = zero | one == string\n     expr = ~true == false\n-    expected = ds.ComparisonExpression(\n-        ds.CompareOperator.Equal,\n-        ds.NotExpression(ds.ScalarExpression(True)),\n-        ds.ScalarExpression(False)\n-    )\n-    assert expr.equals(expected)\n-\n     for typ in (\"bool\", pa.bool_()):\n         expr = field.cast(typ) == true\n-        expected = ds.ComparisonExpression(\n-            ds.CompareOperator.Equal,\n-            ds.CastExpression(ds.FieldExpression(\"field\"), pa.bool_()),\n-            ds.ScalarExpression(True)\n-        )\n-        assert expr.equals(expected)\n \n     expr = field.isin([1, 2])\n-    expected = ds.InExpression(ds.FieldExpression(\"field\"), pa.array([1, 2]))\n-    assert expr.equals(expected)\n \n     with pytest.raises(TypeError):\n-        field.isin(1)\n+        expr = field.isin(1)\n \n     # operations with non-scalar values\n     with pytest.raises(TypeError):\n-        field == [1]\n+        expr = field == [1]\n \n     with pytest.raises(TypeError):\n-        field != {1}\n+        expr = field != {1}\n \n     with pytest.raises(TypeError):\n-        field & [1]\n+        expr = field & [1]\n \n     with pytest.raises(TypeError):\n-        field | [1]\n+        expr = field | [1]\n+\n+    assert expr is not None  # silence flake8\n\nReview comment:\n       I didn't try that\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-28T16:39:55.893+0000",
                    "updated": "2020-04-28T16:39:55.893+0000",
                    "started": "2020-04-28T16:39:55.893+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "428240",
                    "issueId": "13274455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13274455/worklog/428241",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7026:\nURL: https://github.com/apache/arrow/pull/7026#discussion_r416761725\n\n\n\n##########\nFile path: python/pyarrow/tests/test_dataset.py\n##########\n@@ -218,33 +216,21 @@ def test_filesystem_dataset(mockfs):\n \n     # validation of required arguments\n     with pytest.raises(TypeError, match=\"incorrect type\"):\n-        ds.FileSystemDataset(paths, format=file_format, filesystem=mockfs)\n+        ds.FileSystemDataset(paths, schema=None, format=file_format,\n+                             filesystem=mockfs)\n\nReview comment:\n       will do\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-28T16:40:10.187+0000",
                    "updated": "2020-04-28T16:40:10.187+0000",
                    "started": "2020-04-28T16:40:10.187+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "428241",
                    "issueId": "13274455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13274455/worklog/428277",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #7026:\nURL: https://github.com/apache/arrow/pull/7026#discussion_r416791585\n\n\n\n##########\nFile path: python/pyarrow/tests/test_dataset.py\n##########\n@@ -373,125 +354,51 @@ def test_partitioning():\n     assert expr.equals(expected)\n \n \n-def test_expression():\n-    a = ds.ScalarExpression(1)\n-    b = ds.ScalarExpression(1.1)\n-    c = ds.ScalarExpression(True)\n-    d = ds.ScalarExpression(\"string\")\n-    e = ds.ScalarExpression(None)\n-\n-    equal = ds.ComparisonExpression(ds.CompareOperator.Equal, a, b)\n-    greater = a > b\n-    assert equal.op == ds.CompareOperator.Equal\n-\n-    and_ = ds.AndExpression(a, b)\n-    assert and_.left_operand.equals(a)\n-    assert and_.right_operand.equals(b)\n-    assert and_.equals(ds.AndExpression(a, b))\n-    assert and_.equals(and_)\n-\n-    or_ = ds.OrExpression(a, b)\n-    not_ = ds.NotExpression(ds.OrExpression(a, b))\n-    is_valid = ds.IsValidExpression(a)\n-    cast_safe = ds.CastExpression(a, pa.int32())\n-    cast_unsafe = ds.CastExpression(a, pa.int32(), safe=False)\n-    in_ = ds.InExpression(a, pa.array([1, 2, 3]))\n-\n-    assert is_valid.operand == a\n-    assert in_.set_.equals(pa.array([1, 2, 3]))\n-    assert cast_unsafe.to == pa.int32()\n-    assert cast_unsafe.safe is False\n-    assert cast_safe.safe is True\n-\n-    condition = ds.ComparisonExpression(\n-        ds.CompareOperator.Greater,\n-        ds.FieldExpression('i64'),\n-        ds.ScalarExpression(5)\n-    )\n+def test_expression_serialization():\n+    a = ds.scalar(1)\n+    b = ds.scalar(1.1)\n+    c = ds.scalar(True)\n+    d = ds.scalar(\"string\")\n+    e = ds.scalar(None)\n+\n+    condition = ds.field('i64') > 5\n     schema = pa.schema([\n         pa.field('i64', pa.int64()),\n         pa.field('f64', pa.float64())\n     ])\n     assert condition.validate(schema) == pa.bool_()\n \n-    i64_is_5 = ds.ComparisonExpression(\n-        ds.CompareOperator.Equal,\n-        ds.FieldExpression('i64'),\n-        ds.ScalarExpression(5)\n-    )\n-    i64_is_7 = ds.ComparisonExpression(\n-        ds.CompareOperator.Equal,\n-        ds.FieldExpression('i64'),\n-        ds.ScalarExpression(7)\n-    )\n-    assert condition.assume(i64_is_5).equals(ds.ScalarExpression(False))\n-    assert condition.assume(i64_is_7).equals(ds.ScalarExpression(True))\n-    assert str(condition) == \"(i64 > 5:int64)\"\n-    assert \"(i64 > 5:int64)\" in repr(condition)\n+    assert condition.assume(ds.field('i64') == 5).equals(\n+        ds.scalar(False))\n \n-    all_exprs = [a, b, c, d, e, equal, greater, and_, or_, not_, is_valid,\n-                 cast_unsafe, cast_safe, in_, condition, i64_is_5, i64_is_7]\n+    assert condition.assume(ds.field('i64') == 7).equals(\n+        ds.scalar(True))\n+\n+    all_exprs = [a, b, c, d, e, a == b, a > b, a & b, a | b, ~c,\n+                 d.is_valid(), a.cast(pa.int32(), safe=False),\n+                 a.cast(pa.int32(), safe=False), a.isin([1, 2, 3]),\n+                 ds.field('i64') > 5, ds.field('i64') == 5,\n+                 ds.field('i64') == 7]\n     for expr in all_exprs:\n+        assert isinstance(expr, ds.Expression)\n         restored = pickle.loads(pickle.dumps(expr))\n         assert expr.equals(restored)\n \n \n-def test_expression_ergonomics():\n+def test_expression_construction():\n     zero = ds.scalar(0)\n     one = ds.scalar(1)\n     true = ds.scalar(True)\n     false = ds.scalar(False)\n     string = ds.scalar(\"string\")\n     field = ds.field(\"field\")\n \n-    assert one.equals(ds.ScalarExpression(1))\n-    assert zero.equals(ds.ScalarExpression(0))\n-    assert true.equals(ds.ScalarExpression(True))\n-    assert false.equals(ds.ScalarExpression(False))\n-    assert string.equals(ds.ScalarExpression(\"string\"))\n-    assert field.equals(ds.FieldExpression(\"field\"))\n-\n-    expected = ds.AndExpression(ds.ScalarExpression(1), ds.ScalarExpression(0))\n-    for expr in [one & zero, 1 & zero, one & 0]:\n-        assert expr.equals(expected)\n-\n-    expected = ds.OrExpression(ds.ScalarExpression(1), ds.ScalarExpression(0))\n-    for expr in [one | zero, 1 | zero, one | 0]:\n-        assert expr.equals(expected)\n-\n-    comparison_ops = [\n-        (operator.eq, ds.CompareOperator.Equal),\n-        (operator.ne, ds.CompareOperator.NotEqual),\n-        (operator.ge, ds.CompareOperator.GreaterEqual),\n-        (operator.le, ds.CompareOperator.LessEqual),\n-        (operator.lt, ds.CompareOperator.Less),\n-        (operator.gt, ds.CompareOperator.Greater),\n-    ]\n-    for op, compare_op in comparison_ops:\n-        expr = op(zero, one)\n-        expected = ds.ComparisonExpression(compare_op, zero, one)\n-        assert expr.equals(expected)\n-\n-    expr = ~true == false\n-    expected = ds.ComparisonExpression(\n-        ds.CompareOperator.Equal,\n-        ds.NotExpression(ds.ScalarExpression(True)),\n-        ds.ScalarExpression(False)\n-    )\n-    assert expr.equals(expected)\n-\n+    zero | one == string\n+    ~true == false\n\nReview comment:\n       Is there an assert missing here? \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-28T17:24:56.219+0000",
                    "updated": "2020-04-28T17:24:56.219+0000",
                    "started": "2020-04-28T17:24:56.219+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "428277",
                    "issueId": "13274455"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13274455/worklog/428279",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #7026:\nURL: https://github.com/apache/arrow/pull/7026#discussion_r416795870\n\n\n\n##########\nFile path: python/pyarrow/tests/test_dataset.py\n##########\n@@ -373,125 +354,51 @@ def test_partitioning():\n     assert expr.equals(expected)\n \n \n-def test_expression():\n-    a = ds.ScalarExpression(1)\n-    b = ds.ScalarExpression(1.1)\n-    c = ds.ScalarExpression(True)\n-    d = ds.ScalarExpression(\"string\")\n-    e = ds.ScalarExpression(None)\n-\n-    equal = ds.ComparisonExpression(ds.CompareOperator.Equal, a, b)\n-    greater = a > b\n-    assert equal.op == ds.CompareOperator.Equal\n-\n-    and_ = ds.AndExpression(a, b)\n-    assert and_.left_operand.equals(a)\n-    assert and_.right_operand.equals(b)\n-    assert and_.equals(ds.AndExpression(a, b))\n-    assert and_.equals(and_)\n-\n-    or_ = ds.OrExpression(a, b)\n-    not_ = ds.NotExpression(ds.OrExpression(a, b))\n-    is_valid = ds.IsValidExpression(a)\n-    cast_safe = ds.CastExpression(a, pa.int32())\n-    cast_unsafe = ds.CastExpression(a, pa.int32(), safe=False)\n-    in_ = ds.InExpression(a, pa.array([1, 2, 3]))\n-\n-    assert is_valid.operand == a\n-    assert in_.set_.equals(pa.array([1, 2, 3]))\n-    assert cast_unsafe.to == pa.int32()\n-    assert cast_unsafe.safe is False\n-    assert cast_safe.safe is True\n-\n-    condition = ds.ComparisonExpression(\n-        ds.CompareOperator.Greater,\n-        ds.FieldExpression('i64'),\n-        ds.ScalarExpression(5)\n-    )\n+def test_expression_serialization():\n+    a = ds.scalar(1)\n+    b = ds.scalar(1.1)\n+    c = ds.scalar(True)\n+    d = ds.scalar(\"string\")\n+    e = ds.scalar(None)\n+\n+    condition = ds.field('i64') > 5\n     schema = pa.schema([\n         pa.field('i64', pa.int64()),\n         pa.field('f64', pa.float64())\n     ])\n     assert condition.validate(schema) == pa.bool_()\n \n-    i64_is_5 = ds.ComparisonExpression(\n-        ds.CompareOperator.Equal,\n-        ds.FieldExpression('i64'),\n-        ds.ScalarExpression(5)\n-    )\n-    i64_is_7 = ds.ComparisonExpression(\n-        ds.CompareOperator.Equal,\n-        ds.FieldExpression('i64'),\n-        ds.ScalarExpression(7)\n-    )\n-    assert condition.assume(i64_is_5).equals(ds.ScalarExpression(False))\n-    assert condition.assume(i64_is_7).equals(ds.ScalarExpression(True))\n-    assert str(condition) == \"(i64 > 5:int64)\"\n-    assert \"(i64 > 5:int64)\" in repr(condition)\n+    assert condition.assume(ds.field('i64') == 5).equals(\n+        ds.scalar(False))\n \n-    all_exprs = [a, b, c, d, e, equal, greater, and_, or_, not_, is_valid,\n-                 cast_unsafe, cast_safe, in_, condition, i64_is_5, i64_is_7]\n+    assert condition.assume(ds.field('i64') == 7).equals(\n+        ds.scalar(True))\n+\n+    all_exprs = [a, b, c, d, e, a == b, a > b, a & b, a | b, ~c,\n+                 d.is_valid(), a.cast(pa.int32(), safe=False),\n+                 a.cast(pa.int32(), safe=False), a.isin([1, 2, 3]),\n+                 ds.field('i64') > 5, ds.field('i64') == 5,\n+                 ds.field('i64') == 7]\n     for expr in all_exprs:\n+        assert isinstance(expr, ds.Expression)\n         restored = pickle.loads(pickle.dumps(expr))\n         assert expr.equals(restored)\n \n \n-def test_expression_ergonomics():\n+def test_expression_construction():\n     zero = ds.scalar(0)\n     one = ds.scalar(1)\n     true = ds.scalar(True)\n     false = ds.scalar(False)\n     string = ds.scalar(\"string\")\n     field = ds.field(\"field\")\n \n-    assert one.equals(ds.ScalarExpression(1))\n-    assert zero.equals(ds.ScalarExpression(0))\n-    assert true.equals(ds.ScalarExpression(True))\n-    assert false.equals(ds.ScalarExpression(False))\n-    assert string.equals(ds.ScalarExpression(\"string\"))\n-    assert field.equals(ds.FieldExpression(\"field\"))\n-\n-    expected = ds.AndExpression(ds.ScalarExpression(1), ds.ScalarExpression(0))\n-    for expr in [one & zero, 1 & zero, one & 0]:\n-        assert expr.equals(expected)\n-\n-    expected = ds.OrExpression(ds.ScalarExpression(1), ds.ScalarExpression(0))\n-    for expr in [one | zero, 1 | zero, one | 0]:\n-        assert expr.equals(expected)\n-\n-    comparison_ops = [\n-        (operator.eq, ds.CompareOperator.Equal),\n-        (operator.ne, ds.CompareOperator.NotEqual),\n-        (operator.ge, ds.CompareOperator.GreaterEqual),\n-        (operator.le, ds.CompareOperator.LessEqual),\n-        (operator.lt, ds.CompareOperator.Less),\n-        (operator.gt, ds.CompareOperator.Greater),\n-    ]\n-    for op, compare_op in comparison_ops:\n-        expr = op(zero, one)\n-        expected = ds.ComparisonExpression(compare_op, zero, one)\n-        assert expr.equals(expected)\n-\n-    expr = ~true == false\n-    expected = ds.ComparisonExpression(\n-        ds.CompareOperator.Equal,\n-        ds.NotExpression(ds.ScalarExpression(True)),\n-        ds.ScalarExpression(False)\n-    )\n-    assert expr.equals(expected)\n-\n+    zero | one == string\n+    ~true == false\n\nReview comment:\n       Since we don't have an alternative way to construct expressions anymore, to what would they be compared? I suppose we could add assertions about their string representation\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-28T17:31:33.728+0000",
                    "updated": "2020-04-28T17:31:33.728+0000",
                    "started": "2020-04-28T17:31:33.727+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "428279",
                    "issueId": "13274455"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 22800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@54383e13[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4b6bc7d6[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@54eacb72[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@41aaf34e[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@27be84f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7e5f15d4[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7c6ce036[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6aca5c76[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@372ee8f0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@31d9aa74[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2aaf9129[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@123e51e6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 22800,
        "customfield_12312520": null,
        "customfield_12312521": "Tue May 05 22:03:45 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-05-05T22:03:45.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-7391/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2019-12-13T17:19:17.000+0000",
        "updated": "2020-05-05T22:03:45.000+0000",
        "timeoriginalestimate": null,
        "description": "Several Python classes introduced by https://github.com/apache/arrow/pull/5237 are unnecessary and can be removed in favor of simple functions which produce opaque pointers, including the PartitionScheme and Expression classes. These should be removed to reduce cognitive overhead of the Python datasets API and to loosen coupling between Python and C++.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 22800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Remove unnecessary classes from the binding layer",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13274455/comment/17089699",
                    "id": "17089699",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "A complication is the current pickling serialization of Expressions. This will need to be removed in favor of native serialization",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-04-22T13:59:30.221+0000",
                    "updated": "2020-04-22T13:59:30.221+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13274455/comment/17100285",
                    "id": "17100285",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 7026\n[https://github.com/apache/arrow/pull/7026]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-05-05T22:03:45.990+0000",
                    "updated": "2020-05-05T22:03:45.990+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z09ny8:",
        "customfield_12314139": null
    }
}