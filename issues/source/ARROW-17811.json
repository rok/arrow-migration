{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13482646",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482646",
    "key": "ARROW-17811",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351550",
                "id": "12351550",
                "name": "9.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-08-03"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=ljw1001",
            "name": "ljw1001",
            "key": "ljw1001",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Larry White",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332532",
                "id": "12332532",
                "name": "Documentation"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=ljw1001",
            "name": "ljw1001",
            "key": "ljw1001",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Larry White",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=ljw1001",
            "name": "ljw1001",
            "key": "ljw1001",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Larry White",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 19800,
            "total": 19800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 19800,
            "total": 19800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17811/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 33,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482646/worklog/811346",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lwhite1 opened a new pull request, #14213:\nURL: https://github.com/apache/arrow/pull/14213\n\n   Added some overview documentation to the ValueVector tutorial page, describing how dictionary encoding works in Arrow Java . \n\n\n",
                    "created": "2022-09-22T18:35:20.346+0000",
                    "updated": "2022-09-22T18:35:20.346+0000",
                    "started": "2022-09-22T18:35:20.346+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811346",
                    "issueId": "13482646"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482646/worklog/811406",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14213:\nURL: https://github.com/apache/arrow/pull/14213#issuecomment-1255605678\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-09-22T22:08:34.673+0000",
                    "updated": "2022-09-22T22:08:34.673+0000",
                    "started": "2022-09-22T22:08:34.673+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811406",
                    "issueId": "13482646"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482646/worklog/811407",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14213:\nURL: https://github.com/apache/arrow/pull/14213#issuecomment-1255605658\n\n   https://issues.apache.org/jira/browse/ARROW-17811\n\n\n",
                    "created": "2022-09-22T22:08:37.429+0000",
                    "updated": "2022-09-22T22:08:37.429+0000",
                    "started": "2022-09-22T22:08:37.428+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811407",
                    "issueId": "13482646"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482646/worklog/811686",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #14213:\nURL: https://github.com/apache/arrow/pull/14213#discussion_r978983237\n\n\n##########\ndocs/source/java/ipc.rst:\n##########\n@@ -15,6 +15,8 @@\n .. specific language governing permissions and limitations\n .. under the License.\n \n+.. _ipc:\n\nReview Comment:\n   note that these labels are global, so best to namespace them\r\n   \r\n   that said: `:doc:` is probably preferable to `:ref:` for this kind of thing if you're just linking to the toplevel, and you don't have to add a reference\n\n\n\n##########\ndocs/source/java/vector.rst:\n##########\n@@ -268,6 +268,82 @@ For example, the code below shows how to build a :class:`ListVector` of int's us\n      }\n   }\n \n+Dictionary Encoding\n+===================\n+\n+A :class:`FieldVector` can be dictionary encoded for performance or improved memory efficiency. While this is most often done with :class:`VarCharVector`, nearly any type of vector might be encoded if there are many values, but few unique values.\n+\n+There are a few steps involved in the encoding process:\n+\n+1. Create a regular, un-encoded vector and populate it\n+2. Create a dictionary vector of the same type as the un-encoded vector. This vector must have the same values, but each unique value in the un-encoded vector need appear here only once.\n+3. Create a :class:`Dictionary`. It will contain the dictionary vector, plus a :class:`DictionaryEncoding` object that holds the encoding's metadata and settings values.\n+4. Create a :class:`DictionaryEncoder`.\n+5. Call the encode() method on the :class:`DictionaryEncoder` to produce an encoded version of the original vector.\n+6. (Optional) Call the decode() method on the encoded vector to re-create the original values.\n+\n+The encoded values will be integers. Depending on how many unique values you have, you can use either TinyIntVector, SmallIntVector, or IntVector to hold them. You specify the type when you create your :class:`DictionaryEncoding` instance. You might wonder where those integers come from: the dictionary vector is a regular vector, so the value's index position in that vector is used as its encoded value.\n\nReview Comment:\n   IIRC BigIntVector is also supported\r\n   \r\n   IIRC other implementations allow unsigned indices, but Java doesn't?\n\n\n\n##########\ndocs/source/java/vector.rst:\n##########\n@@ -268,6 +268,82 @@ For example, the code below shows how to build a :class:`ListVector` of int's us\n      }\n   }\n \n+Dictionary Encoding\n+===================\n+\n+A :class:`FieldVector` can be dictionary encoded for performance or improved memory efficiency. While this is most often done with :class:`VarCharVector`, nearly any type of vector might be encoded if there are many values, but few unique values.\n+\n+There are a few steps involved in the encoding process:\n+\n+1. Create a regular, un-encoded vector and populate it\n+2. Create a dictionary vector of the same type as the un-encoded vector. This vector must have the same values, but each unique value in the un-encoded vector need appear here only once.\n+3. Create a :class:`Dictionary`. It will contain the dictionary vector, plus a :class:`DictionaryEncoding` object that holds the encoding's metadata and settings values.\n+4. Create a :class:`DictionaryEncoder`.\n+5. Call the encode() method on the :class:`DictionaryEncoder` to produce an encoded version of the original vector.\n+6. (Optional) Call the decode() method on the encoded vector to re-create the original values.\n+\n+The encoded values will be integers. Depending on how many unique values you have, you can use either TinyIntVector, SmallIntVector, or IntVector to hold them. You specify the type when you create your :class:`DictionaryEncoding` instance. You might wonder where those integers come from: the dictionary vector is a regular vector, so the value's index position in that vector is used as its encoded value.\n+\n+Another critical attribute in :class:`DictionaryEncoding` is the id. It's important to understand how the id is used, so we cover that later in this section.\n+\n+This result will be a new vector (for example, an IntVector) that can act in place of the original vector (for example, a VarCharVector). When you write the data in arrow format, it is both the new IntVector plus the dictionary that is written: you will need the dictionary later to retrieve the original values.\n+\n+.. code-block:: Java\n+\n+    // 1. create a vector for the un-encoded data and populate it\n+    VarCharVector unencoded = new VarCharVector(\"unencoded\", allocator);\n+    // now put some data in it before continuing\n+\n+    // 2. create a vector to hold the dictionary and populate it\n+    VarCharVector dictionaryVector = new VarCharVector(\"dictionary\", allocator);\n+\n+    // 3. create a dictionary object\n+    Dictionary dictionary = new Dictionary(dictionaryVector, new DictionaryEncoding(1L, false, null));\n+\n+    // 4. create a dictionary encoder\n+    DictionaryEncoder encoder = new DictionaryEncoder.encode(dictionary, allocator);\n+\n+    // 5. encode the data\n+    IntVector encoded = (IntVector) encoder.encode(unencoded);\n+\n+    // 6. re-create an un-encoded version from the encoded vector\n+    VarCharVector decoded = (VarCharVector) encoder.decode(encoded)\n+\n+One thing we haven't discussed is how to create the dictionary vector from the original un-encoded values. That is left to the library user since a custom method will likely be more efficient than a general utility.\n+\n+Finally, you can package a number of dictionaries together, which is useful if you're working with a :class:`VectorSchemaRoot` with several dictionary-encoded vectors. This is done using an object called a :class:`DictionaryProvider`. as shown in the example below. Note that we don't put the dictionary vectors in the same :class:`VectorSchemaRoot` as the data vectors, as they will generally have fewer values.\n+\n+\n+.. code-block:: Java\n+\n+    DictionaryProvider.MapDictionaryProvider provider =\n+        new DictionaryProvider.MapDictionaryProvider();\n+\n+    provider.put(dictionary)))\n+\n+The :class:`DictionaryProvider` is simply a map of identifiers to :class:`Dictionary` objects, where each identifier is a long value. In the above code you will see it as the first argument to the :class:`DictionaryEncoding` constructor.\n+\n+This is where the :class:`DictionaryEncoding`'s 'id' attribute comes in. This value is used to connect dictionaries to instances of :class:`VectorSchemaRoot`, using a :class:`DictionaryProvider`.  Here's how that works:\n+\n+* The :class:`VectorSchemaRoot` has a :class:`Schema` object containing a list of :class:`Field` objects.\n+* The field has an attribute called 'dictionary', but it holds a :class:`DictionaryEncoding` rather than a :class:`Dictionary`\n+* As mentioned, the :class:`DictionaryProvider` holds dictionaries indexed by a long value. This value is the id from your :class:`DictionaryEncoding`.\n+* To retrieve the dictionary for a vector in a :class:`VectorSchemaRoot`, you get the field associated with the vector, get its dictionary attribute, and use that object's id to look up the correct dictionary in the provider.\n+\n+.. code-block:: Java\n+\n+    // create the encoded vector, the Dictionary and DictionaryProvider as discussed above\n+\n+    // Create a VectorSchemaRoot with one encoded vector\n+    VectorSchemaRoot vsr = new VectorSchemaRoot(List.of(encoded));\n+\n+    // now we want to decode our vector, so we retrieve its dictionary from the provider\n+    Field f = vsr.getField(encoded.getName());\n+    DictionaryEncoding encoding = f.getDictionary();\n+    Dictionary dictionary = provider.get(encoding.getId());\n+\n+As you can see, a :class:`DictionaryProvider` is handy for managing the dictionaries associated with a :class:`VectorSchemaRoot`. More importantly, it helps package the dictionaries for a :class:`VectorSchemaRoot` when it's written. The classes :class:`ArrowFileWriter` and :class:`ArrowStreamWriter` both accept an optional :class:`DictionaryProvider` argument for that purpose. You can find example code for writing dictionaries in the documentation for (:ref:`ipc`).\n\nReview Comment:\n   Worth linking to the cookbook here? (Should the cookbooks be added via intersphinx for easier linking?)\n\n\n\n##########\ndocs/source/java/vector.rst:\n##########\n@@ -268,6 +268,82 @@ For example, the code below shows how to build a :class:`ListVector` of int's us\n      }\n   }\n \n+Dictionary Encoding\n+===================\n+\n+A :class:`FieldVector` can be dictionary encoded for performance or improved memory efficiency. While this is most often done with :class:`VarCharVector`, nearly any type of vector might be encoded if there are many values, but few unique values.\n\nReview Comment:\n   Maybe briefly explain dictionary encoding, or link to the glossary entry via `:term:`?\n\n\n\n##########\ndocs/source/java/vector.rst:\n##########\n@@ -268,6 +268,82 @@ For example, the code below shows how to build a :class:`ListVector` of int's us\n      }\n   }\n \n+Dictionary Encoding\n+===================\n+\n+A :class:`FieldVector` can be dictionary encoded for performance or improved memory efficiency. While this is most often done with :class:`VarCharVector`, nearly any type of vector might be encoded if there are many values, but few unique values.\n+\n+There are a few steps involved in the encoding process:\n+\n+1. Create a regular, un-encoded vector and populate it\n+2. Create a dictionary vector of the same type as the un-encoded vector. This vector must have the same values, but each unique value in the un-encoded vector need appear here only once.\n+3. Create a :class:`Dictionary`. It will contain the dictionary vector, plus a :class:`DictionaryEncoding` object that holds the encoding's metadata and settings values.\n+4. Create a :class:`DictionaryEncoder`.\n+5. Call the encode() method on the :class:`DictionaryEncoder` to produce an encoded version of the original vector.\n+6. (Optional) Call the decode() method on the encoded vector to re-create the original values.\n+\n+The encoded values will be integers. Depending on how many unique values you have, you can use either TinyIntVector, SmallIntVector, or IntVector to hold them. You specify the type when you create your :class:`DictionaryEncoding` instance. You might wonder where those integers come from: the dictionary vector is a regular vector, so the value's index position in that vector is used as its encoded value.\n\nReview Comment:\n   Do we want to be consistent about linking classes?\r\n   \r\n   FYI: `:class:` doesn't work for Java (I think these are failing or linking to C++?). I've been meaning to build up a workaround so it does work for Java.\n\n\n\n##########\ndocs/source/java/vector.rst:\n##########\n@@ -268,6 +268,82 @@ For example, the code below shows how to build a :class:`ListVector` of int's us\n      }\n   }\n \n+Dictionary Encoding\n+===================\n+\n+A :class:`FieldVector` can be dictionary encoded for performance or improved memory efficiency. While this is most often done with :class:`VarCharVector`, nearly any type of vector might be encoded if there are many values, but few unique values.\n+\n+There are a few steps involved in the encoding process:\n+\n+1. Create a regular, un-encoded vector and populate it\n+2. Create a dictionary vector of the same type as the un-encoded vector. This vector must have the same values, but each unique value in the un-encoded vector need appear here only once.\n+3. Create a :class:`Dictionary`. It will contain the dictionary vector, plus a :class:`DictionaryEncoding` object that holds the encoding's metadata and settings values.\n+4. Create a :class:`DictionaryEncoder`.\n+5. Call the encode() method on the :class:`DictionaryEncoder` to produce an encoded version of the original vector.\n+6. (Optional) Call the decode() method on the encoded vector to re-create the original values.\n+\n+The encoded values will be integers. Depending on how many unique values you have, you can use either TinyIntVector, SmallIntVector, or IntVector to hold them. You specify the type when you create your :class:`DictionaryEncoding` instance. You might wonder where those integers come from: the dictionary vector is a regular vector, so the value's index position in that vector is used as its encoded value.\n+\n+Another critical attribute in :class:`DictionaryEncoding` is the id. It's important to understand how the id is used, so we cover that later in this section.\n+\n+This result will be a new vector (for example, an IntVector) that can act in place of the original vector (for example, a VarCharVector). When you write the data in arrow format, it is both the new IntVector plus the dictionary that is written: you will need the dictionary later to retrieve the original values.\n+\n+.. code-block:: Java\n+\n+    // 1. create a vector for the un-encoded data and populate it\n+    VarCharVector unencoded = new VarCharVector(\"unencoded\", allocator);\n+    // now put some data in it before continuing\n+\n+    // 2. create a vector to hold the dictionary and populate it\n+    VarCharVector dictionaryVector = new VarCharVector(\"dictionary\", allocator);\n+\n+    // 3. create a dictionary object\n+    Dictionary dictionary = new Dictionary(dictionaryVector, new DictionaryEncoding(1L, false, null));\n+\n+    // 4. create a dictionary encoder\n+    DictionaryEncoder encoder = new DictionaryEncoder.encode(dictionary, allocator);\n+\n+    // 5. encode the data\n+    IntVector encoded = (IntVector) encoder.encode(unencoded);\n+\n+    // 6. re-create an un-encoded version from the encoded vector\n+    VarCharVector decoded = (VarCharVector) encoder.decode(encoded)\n+\n+One thing we haven't discussed is how to create the dictionary vector from the original un-encoded values. That is left to the library user since a custom method will likely be more efficient than a general utility.\n+\n+Finally, you can package a number of dictionaries together, which is useful if you're working with a :class:`VectorSchemaRoot` with several dictionary-encoded vectors. This is done using an object called a :class:`DictionaryProvider`. as shown in the example below. Note that we don't put the dictionary vectors in the same :class:`VectorSchemaRoot` as the data vectors, as they will generally have fewer values.\n+\n+\n+.. code-block:: Java\n+\n+    DictionaryProvider.MapDictionaryProvider provider =\n+        new DictionaryProvider.MapDictionaryProvider();\n+\n+    provider.put(dictionary)))\n+\n+The :class:`DictionaryProvider` is simply a map of identifiers to :class:`Dictionary` objects, where each identifier is a long value. In the above code you will see it as the first argument to the :class:`DictionaryEncoding` constructor.\n+\n+This is where the :class:`DictionaryEncoding`'s 'id' attribute comes in. This value is used to connect dictionaries to instances of :class:`VectorSchemaRoot`, using a :class:`DictionaryProvider`.  Here's how that works:\n+\n+* The :class:`VectorSchemaRoot` has a :class:`Schema` object containing a list of :class:`Field` objects.\n+* The field has an attribute called 'dictionary', but it holds a :class:`DictionaryEncoding` rather than a :class:`Dictionary`\n+* As mentioned, the :class:`DictionaryProvider` holds dictionaries indexed by a long value. This value is the id from your :class:`DictionaryEncoding`.\n+* To retrieve the dictionary for a vector in a :class:`VectorSchemaRoot`, you get the field associated with the vector, get its dictionary attribute, and use that object's id to look up the correct dictionary in the provider.\n+\n+.. code-block:: Java\n+\n+    // create the encoded vector, the Dictionary and DictionaryProvider as discussed above\n+\n+    // Create a VectorSchemaRoot with one encoded vector\n+    VectorSchemaRoot vsr = new VectorSchemaRoot(List.of(encoded));\n+\n+    // now we want to decode our vector, so we retrieve its dictionary from the provider\n+    Field f = vsr.getField(encoded.getName());\n+    DictionaryEncoding encoding = f.getDictionary();\n+    Dictionary dictionary = provider.get(encoding.getId());\n+\n+As you can see, a :class:`DictionaryProvider` is handy for managing the dictionaries associated with a :class:`VectorSchemaRoot`. More importantly, it helps package the dictionaries for a :class:`VectorSchemaRoot` when it's written. The classes :class:`ArrowFileWriter` and :class:`ArrowStreamWriter` both accept an optional :class:`DictionaryProvider` argument for that purpose. You can find example code for writing dictionaries in the documentation for (:ref:`ipc`).\n\nReview Comment:\n   Also, the reader classes implement DictionaryProvider themselves\n\n\n\n",
                    "created": "2022-09-23T19:05:35.904+0000",
                    "updated": "2022-09-23T19:05:35.904+0000",
                    "started": "2022-09-23T19:05:35.903+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811686",
                    "issueId": "13482646"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482646/worklog/811717",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lwhite1 commented on code in PR #14213:\nURL: https://github.com/apache/arrow/pull/14213#discussion_r979048882\n\n\n##########\ndocs/source/java/vector.rst:\n##########\n@@ -268,6 +268,82 @@ For example, the code below shows how to build a :class:`ListVector` of int's us\n      }\n   }\n \n+Dictionary Encoding\n+===================\n+\n+A :class:`FieldVector` can be dictionary encoded for performance or improved memory efficiency. While this is most often done with :class:`VarCharVector`, nearly any type of vector might be encoded if there are many values, but few unique values.\n+\n+There are a few steps involved in the encoding process:\n+\n+1. Create a regular, un-encoded vector and populate it\n+2. Create a dictionary vector of the same type as the un-encoded vector. This vector must have the same values, but each unique value in the un-encoded vector need appear here only once.\n+3. Create a :class:`Dictionary`. It will contain the dictionary vector, plus a :class:`DictionaryEncoding` object that holds the encoding's metadata and settings values.\n+4. Create a :class:`DictionaryEncoder`.\n+5. Call the encode() method on the :class:`DictionaryEncoder` to produce an encoded version of the original vector.\n+6. (Optional) Call the decode() method on the encoded vector to re-create the original values.\n+\n+The encoded values will be integers. Depending on how many unique values you have, you can use either TinyIntVector, SmallIntVector, or IntVector to hold them. You specify the type when you create your :class:`DictionaryEncoding` instance. You might wonder where those integers come from: the dictionary vector is a regular vector, so the value's index position in that vector is used as its encoded value.\n\nReview Comment:\n   I think it's nominally supported, but I'm not sure we fully support more than Integer.MAXVALUE values in a single vector. \r\n   \r\n   for example, this method seems to support bigInt, but that branch of the if statement cannot execute.  \r\n   \r\n   ```\r\n     /**\r\n      * Get the indexType according to the dictionary vector valueCount.\r\n      * @param valueCount dictionary vector valueCount.\r\n      * @return index type.\r\n      */\r\n     public static ArrowType.Int getIndexType(int valueCount) {\r\n       Preconditions.checkArgument(valueCount >= 0);\r\n       if (valueCount <= Byte.MAX_VALUE) {\r\n         return new ArrowType.Int(8, true);\r\n       } else if (valueCount <= Character.MAX_VALUE) {\r\n         return new ArrowType.Int(16, true);\r\n       } else if (valueCount <= Integer.MAX_VALUE) {\r\n         return new ArrowType.Int(32, true);\r\n       } else {\r\n         return new ArrowType.Int(64, true);\r\n       }\r\n     }\r\n   ```\r\n   \n\n\n\n",
                    "created": "2022-09-23T20:39:39.610+0000",
                    "updated": "2022-09-23T20:39:39.610+0000",
                    "started": "2022-09-23T20:39:39.610+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811717",
                    "issueId": "13482646"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482646/worklog/811718",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #14213:\nURL: https://github.com/apache/arrow/pull/14213#discussion_r979049480\n\n\n##########\ndocs/source/java/vector.rst:\n##########\n@@ -268,6 +268,82 @@ For example, the code below shows how to build a :class:`ListVector` of int's us\n      }\n   }\n \n+Dictionary Encoding\n+===================\n+\n+A :class:`FieldVector` can be dictionary encoded for performance or improved memory efficiency. While this is most often done with :class:`VarCharVector`, nearly any type of vector might be encoded if there are many values, but few unique values.\n+\n+There are a few steps involved in the encoding process:\n+\n+1. Create a regular, un-encoded vector and populate it\n+2. Create a dictionary vector of the same type as the un-encoded vector. This vector must have the same values, but each unique value in the un-encoded vector need appear here only once.\n+3. Create a :class:`Dictionary`. It will contain the dictionary vector, plus a :class:`DictionaryEncoding` object that holds the encoding's metadata and settings values.\n+4. Create a :class:`DictionaryEncoder`.\n+5. Call the encode() method on the :class:`DictionaryEncoder` to produce an encoded version of the original vector.\n+6. (Optional) Call the decode() method on the encoded vector to re-create the original values.\n+\n+The encoded values will be integers. Depending on how many unique values you have, you can use either TinyIntVector, SmallIntVector, or IntVector to hold them. You specify the type when you create your :class:`DictionaryEncoding` instance. You might wonder where those integers come from: the dictionary vector is a regular vector, so the value's index position in that vector is used as its encoded value.\n\nReview Comment:\n   It could come up via IPC, or if you manually build up a vector (by directly building the indices) though?\n\n\n\n",
                    "created": "2022-09-23T20:40:34.677+0000",
                    "updated": "2022-09-23T20:40:34.677+0000",
                    "started": "2022-09-23T20:40:34.677+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811718",
                    "issueId": "13482646"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482646/worklog/811719",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #14213:\nURL: https://github.com/apache/arrow/pull/14213#discussion_r979049838\n\n\n##########\ndocs/source/java/vector.rst:\n##########\n@@ -268,6 +268,82 @@ For example, the code below shows how to build a :class:`ListVector` of int's us\n      }\n   }\n \n+Dictionary Encoding\n+===================\n+\n+A :class:`FieldVector` can be dictionary encoded for performance or improved memory efficiency. While this is most often done with :class:`VarCharVector`, nearly any type of vector might be encoded if there are many values, but few unique values.\n+\n+There are a few steps involved in the encoding process:\n+\n+1. Create a regular, un-encoded vector and populate it\n+2. Create a dictionary vector of the same type as the un-encoded vector. This vector must have the same values, but each unique value in the un-encoded vector need appear here only once.\n+3. Create a :class:`Dictionary`. It will contain the dictionary vector, plus a :class:`DictionaryEncoding` object that holds the encoding's metadata and settings values.\n+4. Create a :class:`DictionaryEncoder`.\n+5. Call the encode() method on the :class:`DictionaryEncoder` to produce an encoded version of the original vector.\n+6. (Optional) Call the decode() method on the encoded vector to re-create the original values.\n+\n+The encoded values will be integers. Depending on how many unique values you have, you can use either TinyIntVector, SmallIntVector, or IntVector to hold them. You specify the type when you create your :class:`DictionaryEncoding` instance. You might wonder where those integers come from: the dictionary vector is a regular vector, so the value's index position in that vector is used as its encoded value.\n\nReview Comment:\n   Though if we're only talking about the DictionaryEncoder here, then it's true. We may want to be more careful differentiating between what's possible in the format, and what particular APIs are capable of.\n\n\n\n",
                    "created": "2022-09-23T20:41:14.746+0000",
                    "updated": "2022-09-23T20:41:14.746+0000",
                    "started": "2022-09-23T20:41:14.746+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811719",
                    "issueId": "13482646"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482646/worklog/811720",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lwhite1 commented on code in PR #14213:\nURL: https://github.com/apache/arrow/pull/14213#discussion_r979051563\n\n\n##########\ndocs/source/java/vector.rst:\n##########\n@@ -268,6 +268,82 @@ For example, the code below shows how to build a :class:`ListVector` of int's us\n      }\n   }\n \n+Dictionary Encoding\n+===================\n+\n+A :class:`FieldVector` can be dictionary encoded for performance or improved memory efficiency. While this is most often done with :class:`VarCharVector`, nearly any type of vector might be encoded if there are many values, but few unique values.\n+\n+There are a few steps involved in the encoding process:\n+\n+1. Create a regular, un-encoded vector and populate it\n+2. Create a dictionary vector of the same type as the un-encoded vector. This vector must have the same values, but each unique value in the un-encoded vector need appear here only once.\n+3. Create a :class:`Dictionary`. It will contain the dictionary vector, plus a :class:`DictionaryEncoding` object that holds the encoding's metadata and settings values.\n+4. Create a :class:`DictionaryEncoder`.\n+5. Call the encode() method on the :class:`DictionaryEncoder` to produce an encoded version of the original vector.\n+6. (Optional) Call the decode() method on the encoded vector to re-create the original values.\n+\n+The encoded values will be integers. Depending on how many unique values you have, you can use either TinyIntVector, SmallIntVector, or IntVector to hold them. You specify the type when you create your :class:`DictionaryEncoding` instance. You might wonder where those integers come from: the dictionary vector is a regular vector, so the value's index position in that vector is used as its encoded value.\n\nReview Comment:\n   Java does not support unsigned indexes.  Unsigned vectors in Java work with signed values (except Uint2, which uses char arrays IIRC) \n\n\n\n",
                    "created": "2022-09-23T20:44:10.065+0000",
                    "updated": "2022-09-23T20:44:10.065+0000",
                    "started": "2022-09-23T20:44:10.064+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811720",
                    "issueId": "13482646"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482646/worklog/811722",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lwhite1 commented on code in PR #14213:\nURL: https://github.com/apache/arrow/pull/14213#discussion_r979052900\n\n\n##########\ndocs/source/java/ipc.rst:\n##########\n@@ -15,6 +15,8 @@\n .. specific language governing permissions and limitations\n .. under the License.\n \n+.. _ipc:\n\nReview Comment:\n   so with :doc: no label is required in the destination? \n\n\n\n",
                    "created": "2022-09-23T20:46:30.418+0000",
                    "updated": "2022-09-23T20:46:30.418+0000",
                    "started": "2022-09-23T20:46:30.418+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811722",
                    "issueId": "13482646"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482646/worklog/811723",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #14213:\nURL: https://github.com/apache/arrow/pull/14213#discussion_r979054697\n\n\n##########\ndocs/source/java/ipc.rst:\n##########\n@@ -15,6 +15,8 @@\n .. specific language governing permissions and limitations\n .. under the License.\n \n+.. _ipc:\n\nReview Comment:\n   `:doc:` references files by a path, so if you're just linking to a page and not a particular part of it, it's easier and doesn't require a label\n\n\n\n",
                    "created": "2022-09-23T20:49:25.955+0000",
                    "updated": "2022-09-23T20:49:25.955+0000",
                    "started": "2022-09-23T20:49:25.954+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811723",
                    "issueId": "13482646"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482646/worklog/811724",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lwhite1 commented on code in PR #14213:\nURL: https://github.com/apache/arrow/pull/14213#discussion_r979054721\n\n\n##########\ndocs/source/java/vector.rst:\n##########\n@@ -268,6 +268,82 @@ For example, the code below shows how to build a :class:`ListVector` of int's us\n      }\n   }\n \n+Dictionary Encoding\n+===================\n+\n+A :class:`FieldVector` can be dictionary encoded for performance or improved memory efficiency. While this is most often done with :class:`VarCharVector`, nearly any type of vector might be encoded if there are many values, but few unique values.\n+\n+There are a few steps involved in the encoding process:\n+\n+1. Create a regular, un-encoded vector and populate it\n+2. Create a dictionary vector of the same type as the un-encoded vector. This vector must have the same values, but each unique value in the un-encoded vector need appear here only once.\n+3. Create a :class:`Dictionary`. It will contain the dictionary vector, plus a :class:`DictionaryEncoding` object that holds the encoding's metadata and settings values.\n+4. Create a :class:`DictionaryEncoder`.\n+5. Call the encode() method on the :class:`DictionaryEncoder` to produce an encoded version of the original vector.\n+6. (Optional) Call the decode() method on the encoded vector to re-create the original values.\n+\n+The encoded values will be integers. Depending on how many unique values you have, you can use either TinyIntVector, SmallIntVector, or IntVector to hold them. You specify the type when you create your :class:`DictionaryEncoding` instance. You might wonder where those integers come from: the dictionary vector is a regular vector, so the value's index position in that vector is used as its encoded value.\n\nReview Comment:\n   FWIW, I had no idea it was supposed to link. I've never worked with rst before. The highlighting is nice, though. \r\n   \r\n   I can add the class markup\r\n   \n\n\n\n",
                    "created": "2022-09-23T20:49:30.607+0000",
                    "updated": "2022-09-23T20:49:30.607+0000",
                    "started": "2022-09-23T20:49:30.606+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811724",
                    "issueId": "13482646"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482646/worklog/811725",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #14213:\nURL: https://github.com/apache/arrow/pull/14213#discussion_r979055429\n\n\n##########\ndocs/source/java/vector.rst:\n##########\n@@ -268,6 +268,82 @@ For example, the code below shows how to build a :class:`ListVector` of int's us\n      }\n   }\n \n+Dictionary Encoding\n+===================\n+\n+A :class:`FieldVector` can be dictionary encoded for performance or improved memory efficiency. While this is most often done with :class:`VarCharVector`, nearly any type of vector might be encoded if there are many values, but few unique values.\n+\n+There are a few steps involved in the encoding process:\n+\n+1. Create a regular, un-encoded vector and populate it\n+2. Create a dictionary vector of the same type as the un-encoded vector. This vector must have the same values, but each unique value in the un-encoded vector need appear here only once.\n+3. Create a :class:`Dictionary`. It will contain the dictionary vector, plus a :class:`DictionaryEncoding` object that holds the encoding's metadata and settings values.\n+4. Create a :class:`DictionaryEncoder`.\n+5. Call the encode() method on the :class:`DictionaryEncoder` to produce an encoded version of the original vector.\n+6. (Optional) Call the decode() method on the encoded vector to re-create the original values.\n+\n+The encoded values will be integers. Depending on how many unique values you have, you can use either TinyIntVector, SmallIntVector, or IntVector to hold them. You specify the type when you create your :class:`DictionaryEncoding` instance. You might wonder where those integers come from: the dictionary vector is a regular vector, so the value's index position in that vector is used as its encoded value.\n\nReview Comment:\n   It's probably easiest to just use the double-backticks to put it in a monospace font, since what I'm saying is that the `:class:` markup won't actually link it properly since there's no integration between Javadoc and Sphinx\n\n\n\n##########\ndocs/source/java/vector.rst:\n##########\n@@ -268,6 +268,82 @@ For example, the code below shows how to build a :class:`ListVector` of int's us\n      }\n   }\n \n+Dictionary Encoding\n+===================\n+\n+A :class:`FieldVector` can be dictionary encoded for performance or improved memory efficiency. While this is most often done with :class:`VarCharVector`, nearly any type of vector might be encoded if there are many values, but few unique values.\n+\n+There are a few steps involved in the encoding process:\n+\n+1. Create a regular, un-encoded vector and populate it\n+2. Create a dictionary vector of the same type as the un-encoded vector. This vector must have the same values, but each unique value in the un-encoded vector need appear here only once.\n+3. Create a :class:`Dictionary`. It will contain the dictionary vector, plus a :class:`DictionaryEncoding` object that holds the encoding's metadata and settings values.\n+4. Create a :class:`DictionaryEncoder`.\n+5. Call the encode() method on the :class:`DictionaryEncoder` to produce an encoded version of the original vector.\n+6. (Optional) Call the decode() method on the encoded vector to re-create the original values.\n+\n+The encoded values will be integers. Depending on how many unique values you have, you can use either TinyIntVector, SmallIntVector, or IntVector to hold them. You specify the type when you create your :class:`DictionaryEncoding` instance. You might wonder where those integers come from: the dictionary vector is a regular vector, so the value's index position in that vector is used as its encoded value.\n\nReview Comment:\n   (You should probably have seen build warnings to this effect)\n\n\n\n",
                    "created": "2022-09-23T20:50:45.768+0000",
                    "updated": "2022-09-23T20:50:45.768+0000",
                    "started": "2022-09-23T20:50:45.768+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811725",
                    "issueId": "13482646"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482646/worklog/811726",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lwhite1 commented on code in PR #14213:\nURL: https://github.com/apache/arrow/pull/14213#discussion_r979055550\n\n\n##########\ndocs/source/java/vector.rst:\n##########\n@@ -268,6 +268,82 @@ For example, the code below shows how to build a :class:`ListVector` of int's us\n      }\n   }\n \n+Dictionary Encoding\n+===================\n+\n+A :class:`FieldVector` can be dictionary encoded for performance or improved memory efficiency. While this is most often done with :class:`VarCharVector`, nearly any type of vector might be encoded if there are many values, but few unique values.\n+\n+There are a few steps involved in the encoding process:\n+\n+1. Create a regular, un-encoded vector and populate it\n+2. Create a dictionary vector of the same type as the un-encoded vector. This vector must have the same values, but each unique value in the un-encoded vector need appear here only once.\n+3. Create a :class:`Dictionary`. It will contain the dictionary vector, plus a :class:`DictionaryEncoding` object that holds the encoding's metadata and settings values.\n+4. Create a :class:`DictionaryEncoder`.\n+5. Call the encode() method on the :class:`DictionaryEncoder` to produce an encoded version of the original vector.\n+6. (Optional) Call the decode() method on the encoded vector to re-create the original values.\n+\n+The encoded values will be integers. Depending on how many unique values you have, you can use either TinyIntVector, SmallIntVector, or IntVector to hold them. You specify the type when you create your :class:`DictionaryEncoding` instance. You might wonder where those integers come from: the dictionary vector is a regular vector, so the value's index position in that vector is used as its encoded value.\n+\n+Another critical attribute in :class:`DictionaryEncoding` is the id. It's important to understand how the id is used, so we cover that later in this section.\n+\n+This result will be a new vector (for example, an IntVector) that can act in place of the original vector (for example, a VarCharVector). When you write the data in arrow format, it is both the new IntVector plus the dictionary that is written: you will need the dictionary later to retrieve the original values.\n+\n+.. code-block:: Java\n+\n+    // 1. create a vector for the un-encoded data and populate it\n+    VarCharVector unencoded = new VarCharVector(\"unencoded\", allocator);\n+    // now put some data in it before continuing\n+\n+    // 2. create a vector to hold the dictionary and populate it\n+    VarCharVector dictionaryVector = new VarCharVector(\"dictionary\", allocator);\n+\n+    // 3. create a dictionary object\n+    Dictionary dictionary = new Dictionary(dictionaryVector, new DictionaryEncoding(1L, false, null));\n+\n+    // 4. create a dictionary encoder\n+    DictionaryEncoder encoder = new DictionaryEncoder.encode(dictionary, allocator);\n+\n+    // 5. encode the data\n+    IntVector encoded = (IntVector) encoder.encode(unencoded);\n+\n+    // 6. re-create an un-encoded version from the encoded vector\n+    VarCharVector decoded = (VarCharVector) encoder.decode(encoded)\n+\n+One thing we haven't discussed is how to create the dictionary vector from the original un-encoded values. That is left to the library user since a custom method will likely be more efficient than a general utility.\n+\n+Finally, you can package a number of dictionaries together, which is useful if you're working with a :class:`VectorSchemaRoot` with several dictionary-encoded vectors. This is done using an object called a :class:`DictionaryProvider`. as shown in the example below. Note that we don't put the dictionary vectors in the same :class:`VectorSchemaRoot` as the data vectors, as they will generally have fewer values.\n+\n+\n+.. code-block:: Java\n+\n+    DictionaryProvider.MapDictionaryProvider provider =\n+        new DictionaryProvider.MapDictionaryProvider();\n+\n+    provider.put(dictionary)))\n+\n+The :class:`DictionaryProvider` is simply a map of identifiers to :class:`Dictionary` objects, where each identifier is a long value. In the above code you will see it as the first argument to the :class:`DictionaryEncoding` constructor.\n+\n+This is where the :class:`DictionaryEncoding`'s 'id' attribute comes in. This value is used to connect dictionaries to instances of :class:`VectorSchemaRoot`, using a :class:`DictionaryProvider`.  Here's how that works:\n+\n+* The :class:`VectorSchemaRoot` has a :class:`Schema` object containing a list of :class:`Field` objects.\n+* The field has an attribute called 'dictionary', but it holds a :class:`DictionaryEncoding` rather than a :class:`Dictionary`\n+* As mentioned, the :class:`DictionaryProvider` holds dictionaries indexed by a long value. This value is the id from your :class:`DictionaryEncoding`.\n+* To retrieve the dictionary for a vector in a :class:`VectorSchemaRoot`, you get the field associated with the vector, get its dictionary attribute, and use that object's id to look up the correct dictionary in the provider.\n+\n+.. code-block:: Java\n+\n+    // create the encoded vector, the Dictionary and DictionaryProvider as discussed above\n+\n+    // Create a VectorSchemaRoot with one encoded vector\n+    VectorSchemaRoot vsr = new VectorSchemaRoot(List.of(encoded));\n+\n+    // now we want to decode our vector, so we retrieve its dictionary from the provider\n+    Field f = vsr.getField(encoded.getName());\n+    DictionaryEncoding encoding = f.getDictionary();\n+    Dictionary dictionary = provider.get(encoding.getId());\n+\n+As you can see, a :class:`DictionaryProvider` is handy for managing the dictionaries associated with a :class:`VectorSchemaRoot`. More importantly, it helps package the dictionaries for a :class:`VectorSchemaRoot` when it's written. The classes :class:`ArrowFileWriter` and :class:`ArrowStreamWriter` both accept an optional :class:`DictionaryProvider` argument for that purpose. You can find example code for writing dictionaries in the documentation for (:ref:`ipc`).\n\nReview Comment:\n   I don't think there's any information in the cookbook about dictionary encoding, although there is a GitHub issue on the subject\n\n\n\n",
                    "created": "2022-09-23T20:51:00.785+0000",
                    "updated": "2022-09-23T20:51:00.785+0000",
                    "started": "2022-09-23T20:51:00.785+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811726",
                    "issueId": "13482646"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482646/worklog/811728",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lwhite1 commented on code in PR #14213:\nURL: https://github.com/apache/arrow/pull/14213#discussion_r979056667\n\n\n##########\ndocs/source/java/vector.rst:\n##########\n@@ -268,6 +268,82 @@ For example, the code below shows how to build a :class:`ListVector` of int's us\n      }\n   }\n \n+Dictionary Encoding\n+===================\n+\n+A :class:`FieldVector` can be dictionary encoded for performance or improved memory efficiency. While this is most often done with :class:`VarCharVector`, nearly any type of vector might be encoded if there are many values, but few unique values.\n+\n+There are a few steps involved in the encoding process:\n+\n+1. Create a regular, un-encoded vector and populate it\n+2. Create a dictionary vector of the same type as the un-encoded vector. This vector must have the same values, but each unique value in the un-encoded vector need appear here only once.\n+3. Create a :class:`Dictionary`. It will contain the dictionary vector, plus a :class:`DictionaryEncoding` object that holds the encoding's metadata and settings values.\n+4. Create a :class:`DictionaryEncoder`.\n+5. Call the encode() method on the :class:`DictionaryEncoder` to produce an encoded version of the original vector.\n+6. (Optional) Call the decode() method on the encoded vector to re-create the original values.\n+\n+The encoded values will be integers. Depending on how many unique values you have, you can use either TinyIntVector, SmallIntVector, or IntVector to hold them. You specify the type when you create your :class:`DictionaryEncoding` instance. You might wonder where those integers come from: the dictionary vector is a regular vector, so the value's index position in that vector is used as its encoded value.\n+\n+Another critical attribute in :class:`DictionaryEncoding` is the id. It's important to understand how the id is used, so we cover that later in this section.\n+\n+This result will be a new vector (for example, an IntVector) that can act in place of the original vector (for example, a VarCharVector). When you write the data in arrow format, it is both the new IntVector plus the dictionary that is written: you will need the dictionary later to retrieve the original values.\n+\n+.. code-block:: Java\n+\n+    // 1. create a vector for the un-encoded data and populate it\n+    VarCharVector unencoded = new VarCharVector(\"unencoded\", allocator);\n+    // now put some data in it before continuing\n+\n+    // 2. create a vector to hold the dictionary and populate it\n+    VarCharVector dictionaryVector = new VarCharVector(\"dictionary\", allocator);\n+\n+    // 3. create a dictionary object\n+    Dictionary dictionary = new Dictionary(dictionaryVector, new DictionaryEncoding(1L, false, null));\n+\n+    // 4. create a dictionary encoder\n+    DictionaryEncoder encoder = new DictionaryEncoder.encode(dictionary, allocator);\n+\n+    // 5. encode the data\n+    IntVector encoded = (IntVector) encoder.encode(unencoded);\n+\n+    // 6. re-create an un-encoded version from the encoded vector\n+    VarCharVector decoded = (VarCharVector) encoder.decode(encoded)\n+\n+One thing we haven't discussed is how to create the dictionary vector from the original un-encoded values. That is left to the library user since a custom method will likely be more efficient than a general utility.\n+\n+Finally, you can package a number of dictionaries together, which is useful if you're working with a :class:`VectorSchemaRoot` with several dictionary-encoded vectors. This is done using an object called a :class:`DictionaryProvider`. as shown in the example below. Note that we don't put the dictionary vectors in the same :class:`VectorSchemaRoot` as the data vectors, as they will generally have fewer values.\n+\n+\n+.. code-block:: Java\n+\n+    DictionaryProvider.MapDictionaryProvider provider =\n+        new DictionaryProvider.MapDictionaryProvider();\n+\n+    provider.put(dictionary)))\n+\n+The :class:`DictionaryProvider` is simply a map of identifiers to :class:`Dictionary` objects, where each identifier is a long value. In the above code you will see it as the first argument to the :class:`DictionaryEncoding` constructor.\n+\n+This is where the :class:`DictionaryEncoding`'s 'id' attribute comes in. This value is used to connect dictionaries to instances of :class:`VectorSchemaRoot`, using a :class:`DictionaryProvider`.  Here's how that works:\n+\n+* The :class:`VectorSchemaRoot` has a :class:`Schema` object containing a list of :class:`Field` objects.\n+* The field has an attribute called 'dictionary', but it holds a :class:`DictionaryEncoding` rather than a :class:`Dictionary`\n+* As mentioned, the :class:`DictionaryProvider` holds dictionaries indexed by a long value. This value is the id from your :class:`DictionaryEncoding`.\n+* To retrieve the dictionary for a vector in a :class:`VectorSchemaRoot`, you get the field associated with the vector, get its dictionary attribute, and use that object's id to look up the correct dictionary in the provider.\n+\n+.. code-block:: Java\n+\n+    // create the encoded vector, the Dictionary and DictionaryProvider as discussed above\n+\n+    // Create a VectorSchemaRoot with one encoded vector\n+    VectorSchemaRoot vsr = new VectorSchemaRoot(List.of(encoded));\n+\n+    // now we want to decode our vector, so we retrieve its dictionary from the provider\n+    Field f = vsr.getField(encoded.getName());\n+    DictionaryEncoding encoding = f.getDictionary();\n+    Dictionary dictionary = provider.get(encoding.getId());\n+\n+As you can see, a :class:`DictionaryProvider` is handy for managing the dictionaries associated with a :class:`VectorSchemaRoot`. More importantly, it helps package the dictionaries for a :class:`VectorSchemaRoot` when it's written. The classes :class:`ArrowFileWriter` and :class:`ArrowStreamWriter` both accept an optional :class:`DictionaryProvider` argument for that purpose. You can find example code for writing dictionaries in the documentation for (:ref:`ipc`).\n\nReview Comment:\n   I'm not that familiar with the readers but I can add a statement to that effect (although it seems odd that a reader would implement provider. I thought they were related one-to-one with a vector)\n\n\n\n",
                    "created": "2022-09-23T20:52:51.165+0000",
                    "updated": "2022-09-23T20:52:51.165+0000",
                    "started": "2022-09-23T20:52:51.164+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811728",
                    "issueId": "13482646"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482646/worklog/811729",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #14213:\nURL: https://github.com/apache/arrow/pull/14213#discussion_r979057423\n\n\n##########\ndocs/source/java/vector.rst:\n##########\n@@ -268,6 +268,82 @@ For example, the code below shows how to build a :class:`ListVector` of int's us\n      }\n   }\n \n+Dictionary Encoding\n+===================\n+\n+A :class:`FieldVector` can be dictionary encoded for performance or improved memory efficiency. While this is most often done with :class:`VarCharVector`, nearly any type of vector might be encoded if there are many values, but few unique values.\n+\n+There are a few steps involved in the encoding process:\n+\n+1. Create a regular, un-encoded vector and populate it\n+2. Create a dictionary vector of the same type as the un-encoded vector. This vector must have the same values, but each unique value in the un-encoded vector need appear here only once.\n+3. Create a :class:`Dictionary`. It will contain the dictionary vector, plus a :class:`DictionaryEncoding` object that holds the encoding's metadata and settings values.\n+4. Create a :class:`DictionaryEncoder`.\n+5. Call the encode() method on the :class:`DictionaryEncoder` to produce an encoded version of the original vector.\n+6. (Optional) Call the decode() method on the encoded vector to re-create the original values.\n+\n+The encoded values will be integers. Depending on how many unique values you have, you can use either TinyIntVector, SmallIntVector, or IntVector to hold them. You specify the type when you create your :class:`DictionaryEncoding` instance. You might wonder where those integers come from: the dictionary vector is a regular vector, so the value's index position in that vector is used as its encoded value.\n+\n+Another critical attribute in :class:`DictionaryEncoding` is the id. It's important to understand how the id is used, so we cover that later in this section.\n+\n+This result will be a new vector (for example, an IntVector) that can act in place of the original vector (for example, a VarCharVector). When you write the data in arrow format, it is both the new IntVector plus the dictionary that is written: you will need the dictionary later to retrieve the original values.\n+\n+.. code-block:: Java\n+\n+    // 1. create a vector for the un-encoded data and populate it\n+    VarCharVector unencoded = new VarCharVector(\"unencoded\", allocator);\n+    // now put some data in it before continuing\n+\n+    // 2. create a vector to hold the dictionary and populate it\n+    VarCharVector dictionaryVector = new VarCharVector(\"dictionary\", allocator);\n+\n+    // 3. create a dictionary object\n+    Dictionary dictionary = new Dictionary(dictionaryVector, new DictionaryEncoding(1L, false, null));\n+\n+    // 4. create a dictionary encoder\n+    DictionaryEncoder encoder = new DictionaryEncoder.encode(dictionary, allocator);\n+\n+    // 5. encode the data\n+    IntVector encoded = (IntVector) encoder.encode(unencoded);\n+\n+    // 6. re-create an un-encoded version from the encoded vector\n+    VarCharVector decoded = (VarCharVector) encoder.decode(encoded)\n+\n+One thing we haven't discussed is how to create the dictionary vector from the original un-encoded values. That is left to the library user since a custom method will likely be more efficient than a general utility.\n+\n+Finally, you can package a number of dictionaries together, which is useful if you're working with a :class:`VectorSchemaRoot` with several dictionary-encoded vectors. This is done using an object called a :class:`DictionaryProvider`. as shown in the example below. Note that we don't put the dictionary vectors in the same :class:`VectorSchemaRoot` as the data vectors, as they will generally have fewer values.\n+\n+\n+.. code-block:: Java\n+\n+    DictionaryProvider.MapDictionaryProvider provider =\n+        new DictionaryProvider.MapDictionaryProvider();\n+\n+    provider.put(dictionary)))\n+\n+The :class:`DictionaryProvider` is simply a map of identifiers to :class:`Dictionary` objects, where each identifier is a long value. In the above code you will see it as the first argument to the :class:`DictionaryEncoding` constructor.\n+\n+This is where the :class:`DictionaryEncoding`'s 'id' attribute comes in. This value is used to connect dictionaries to instances of :class:`VectorSchemaRoot`, using a :class:`DictionaryProvider`.  Here's how that works:\n+\n+* The :class:`VectorSchemaRoot` has a :class:`Schema` object containing a list of :class:`Field` objects.\n+* The field has an attribute called 'dictionary', but it holds a :class:`DictionaryEncoding` rather than a :class:`Dictionary`\n+* As mentioned, the :class:`DictionaryProvider` holds dictionaries indexed by a long value. This value is the id from your :class:`DictionaryEncoding`.\n+* To retrieve the dictionary for a vector in a :class:`VectorSchemaRoot`, you get the field associated with the vector, get its dictionary attribute, and use that object's id to look up the correct dictionary in the provider.\n+\n+.. code-block:: Java\n+\n+    // create the encoded vector, the Dictionary and DictionaryProvider as discussed above\n+\n+    // Create a VectorSchemaRoot with one encoded vector\n+    VectorSchemaRoot vsr = new VectorSchemaRoot(List.of(encoded));\n+\n+    // now we want to decode our vector, so we retrieve its dictionary from the provider\n+    Field f = vsr.getField(encoded.getName());\n+    DictionaryEncoding encoding = f.getDictionary();\n+    Dictionary dictionary = provider.get(encoding.getId());\n+\n+As you can see, a :class:`DictionaryProvider` is handy for managing the dictionaries associated with a :class:`VectorSchemaRoot`. More importantly, it helps package the dictionaries for a :class:`VectorSchemaRoot` when it's written. The classes :class:`ArrowFileWriter` and :class:`ArrowStreamWriter` both accept an optional :class:`DictionaryProvider` argument for that purpose. You can find example code for writing dictionaries in the documentation for (:ref:`ipc`).\n\nReview Comment:\n   No, dictionaries are disconnected from vectors, and DictionaryProvider is just a lookup table from dictionary ID to dictionary. Dictionaries are stored separately from batches in the IPC format. (C Data Interface muddles this: dictionaries are attached to vectors there.)\n\n\n\n",
                    "created": "2022-09-23T20:54:11.184+0000",
                    "updated": "2022-09-23T20:54:11.184+0000",
                    "started": "2022-09-23T20:54:11.183+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811729",
                    "issueId": "13482646"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482646/worklog/811731",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lwhite1 commented on code in PR #14213:\nURL: https://github.com/apache/arrow/pull/14213#discussion_r979060456\n\n\n##########\ndocs/source/java/vector.rst:\n##########\n@@ -268,6 +268,82 @@ For example, the code below shows how to build a :class:`ListVector` of int's us\n      }\n   }\n \n+Dictionary Encoding\n+===================\n+\n+A :class:`FieldVector` can be dictionary encoded for performance or improved memory efficiency. While this is most often done with :class:`VarCharVector`, nearly any type of vector might be encoded if there are many values, but few unique values.\n\nReview Comment:\n   will do\n\n\n\n",
                    "created": "2022-09-23T20:59:31.874+0000",
                    "updated": "2022-09-23T20:59:31.874+0000",
                    "started": "2022-09-23T20:59:31.874+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811731",
                    "issueId": "13482646"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482646/worklog/811733",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lwhite1 commented on code in PR #14213:\nURL: https://github.com/apache/arrow/pull/14213#discussion_r979048882\n\n\n##########\ndocs/source/java/vector.rst:\n##########\n@@ -268,6 +268,82 @@ For example, the code below shows how to build a :class:`ListVector` of int's us\n      }\n   }\n \n+Dictionary Encoding\n+===================\n+\n+A :class:`FieldVector` can be dictionary encoded for performance or improved memory efficiency. While this is most often done with :class:`VarCharVector`, nearly any type of vector might be encoded if there are many values, but few unique values.\n+\n+There are a few steps involved in the encoding process:\n+\n+1. Create a regular, un-encoded vector and populate it\n+2. Create a dictionary vector of the same type as the un-encoded vector. This vector must have the same values, but each unique value in the un-encoded vector need appear here only once.\n+3. Create a :class:`Dictionary`. It will contain the dictionary vector, plus a :class:`DictionaryEncoding` object that holds the encoding's metadata and settings values.\n+4. Create a :class:`DictionaryEncoder`.\n+5. Call the encode() method on the :class:`DictionaryEncoder` to produce an encoded version of the original vector.\n+6. (Optional) Call the decode() method on the encoded vector to re-create the original values.\n+\n+The encoded values will be integers. Depending on how many unique values you have, you can use either TinyIntVector, SmallIntVector, or IntVector to hold them. You specify the type when you create your :class:`DictionaryEncoding` instance. You might wonder where those integers come from: the dictionary vector is a regular vector, so the value's index position in that vector is used as its encoded value.\n\nReview Comment:\n   I think it's nominally supported, but I'm not sure we fully support more than Integer.MAXVALUE values in a single vector. \r\n   \r\n   for example, this method seems to support bigInt, but that branch of the if statement cannot execute.  \r\n   \r\n   ```\r\n     /**\r\n      * Get the indexType according to the dictionary vector valueCount.\r\n      * @param valueCount dictionary vector valueCount.\r\n      * @return index type.\r\n      */\r\n     public static ArrowType.Int getIndexType(int valueCount) {\r\n       Preconditions.checkArgument(valueCount >= 0);\r\n       if (valueCount <= Byte.MAX_VALUE) {\r\n         return new ArrowType.Int(8, true);\r\n       } else if (valueCount <= Character.MAX_VALUE) {\r\n         return new ArrowType.Int(16, true);\r\n       } else if (valueCount <= Integer.MAX_VALUE) {\r\n         return new ArrowType.Int(32, true);\r\n       } else {\r\n         return new ArrowType.Int(64, true);\r\n       }\r\n     }\r\n   ```\r\n   \r\n   I will add it, though. \n\n\n\n",
                    "created": "2022-09-23T21:03:27.326+0000",
                    "updated": "2022-09-23T21:03:27.326+0000",
                    "started": "2022-09-23T21:03:27.326+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811733",
                    "issueId": "13482646"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482646/worklog/811742",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lwhite1 commented on code in PR #14213:\nURL: https://github.com/apache/arrow/pull/14213#discussion_r979080350\n\n\n##########\ndocs/source/java/vector.rst:\n##########\n@@ -268,6 +268,82 @@ For example, the code below shows how to build a :class:`ListVector` of int's us\n      }\n   }\n \n+Dictionary Encoding\n+===================\n+\n+A :class:`FieldVector` can be dictionary encoded for performance or improved memory efficiency. While this is most often done with :class:`VarCharVector`, nearly any type of vector might be encoded if there are many values, but few unique values.\n+\n+There are a few steps involved in the encoding process:\n+\n+1. Create a regular, un-encoded vector and populate it\n+2. Create a dictionary vector of the same type as the un-encoded vector. This vector must have the same values, but each unique value in the un-encoded vector need appear here only once.\n+3. Create a :class:`Dictionary`. It will contain the dictionary vector, plus a :class:`DictionaryEncoding` object that holds the encoding's metadata and settings values.\n+4. Create a :class:`DictionaryEncoder`.\n+5. Call the encode() method on the :class:`DictionaryEncoder` to produce an encoded version of the original vector.\n+6. (Optional) Call the decode() method on the encoded vector to re-create the original values.\n+\n+The encoded values will be integers. Depending on how many unique values you have, you can use either TinyIntVector, SmallIntVector, or IntVector to hold them. You specify the type when you create your :class:`DictionaryEncoding` instance. You might wonder where those integers come from: the dictionary vector is a regular vector, so the value's index position in that vector is used as its encoded value.\n+\n+Another critical attribute in :class:`DictionaryEncoding` is the id. It's important to understand how the id is used, so we cover that later in this section.\n+\n+This result will be a new vector (for example, an IntVector) that can act in place of the original vector (for example, a VarCharVector). When you write the data in arrow format, it is both the new IntVector plus the dictionary that is written: you will need the dictionary later to retrieve the original values.\n+\n+.. code-block:: Java\n+\n+    // 1. create a vector for the un-encoded data and populate it\n+    VarCharVector unencoded = new VarCharVector(\"unencoded\", allocator);\n+    // now put some data in it before continuing\n+\n+    // 2. create a vector to hold the dictionary and populate it\n+    VarCharVector dictionaryVector = new VarCharVector(\"dictionary\", allocator);\n+\n+    // 3. create a dictionary object\n+    Dictionary dictionary = new Dictionary(dictionaryVector, new DictionaryEncoding(1L, false, null));\n+\n+    // 4. create a dictionary encoder\n+    DictionaryEncoder encoder = new DictionaryEncoder.encode(dictionary, allocator);\n+\n+    // 5. encode the data\n+    IntVector encoded = (IntVector) encoder.encode(unencoded);\n+\n+    // 6. re-create an un-encoded version from the encoded vector\n+    VarCharVector decoded = (VarCharVector) encoder.decode(encoded)\n+\n+One thing we haven't discussed is how to create the dictionary vector from the original un-encoded values. That is left to the library user since a custom method will likely be more efficient than a general utility.\n+\n+Finally, you can package a number of dictionaries together, which is useful if you're working with a :class:`VectorSchemaRoot` with several dictionary-encoded vectors. This is done using an object called a :class:`DictionaryProvider`. as shown in the example below. Note that we don't put the dictionary vectors in the same :class:`VectorSchemaRoot` as the data vectors, as they will generally have fewer values.\n+\n+\n+.. code-block:: Java\n+\n+    DictionaryProvider.MapDictionaryProvider provider =\n+        new DictionaryProvider.MapDictionaryProvider();\n+\n+    provider.put(dictionary)))\n+\n+The :class:`DictionaryProvider` is simply a map of identifiers to :class:`Dictionary` objects, where each identifier is a long value. In the above code you will see it as the first argument to the :class:`DictionaryEncoding` constructor.\n+\n+This is where the :class:`DictionaryEncoding`'s 'id' attribute comes in. This value is used to connect dictionaries to instances of :class:`VectorSchemaRoot`, using a :class:`DictionaryProvider`.  Here's how that works:\n+\n+* The :class:`VectorSchemaRoot` has a :class:`Schema` object containing a list of :class:`Field` objects.\n+* The field has an attribute called 'dictionary', but it holds a :class:`DictionaryEncoding` rather than a :class:`Dictionary`\n+* As mentioned, the :class:`DictionaryProvider` holds dictionaries indexed by a long value. This value is the id from your :class:`DictionaryEncoding`.\n+* To retrieve the dictionary for a vector in a :class:`VectorSchemaRoot`, you get the field associated with the vector, get its dictionary attribute, and use that object's id to look up the correct dictionary in the provider.\n+\n+.. code-block:: Java\n+\n+    // create the encoded vector, the Dictionary and DictionaryProvider as discussed above\n+\n+    // Create a VectorSchemaRoot with one encoded vector\n+    VectorSchemaRoot vsr = new VectorSchemaRoot(List.of(encoded));\n+\n+    // now we want to decode our vector, so we retrieve its dictionary from the provider\n+    Field f = vsr.getField(encoded.getName());\n+    DictionaryEncoding encoding = f.getDictionary();\n+    Dictionary dictionary = provider.get(encoding.getId());\n+\n+As you can see, a :class:`DictionaryProvider` is handy for managing the dictionaries associated with a :class:`VectorSchemaRoot`. More importantly, it helps package the dictionaries for a :class:`VectorSchemaRoot` when it's written. The classes :class:`ArrowFileWriter` and :class:`ArrowStreamWriter` both accept an optional :class:`DictionaryProvider` argument for that purpose. You can find example code for writing dictionaries in the documentation for (:ref:`ipc`).\n\nReview Comment:\n   Sorry, I wasn't suggesting they were linked directly to vector (and I was wrong about 1-1), but I believe a vector can be encoded by at most one dictionary. So my question is, if a Reader reads one vector, why does it need a relationship to a Map of dictionaries, rather than a single dictionary. \n\n\n\n",
                    "created": "2022-09-23T21:40:07.554+0000",
                    "updated": "2022-09-23T21:40:07.554+0000",
                    "started": "2022-09-23T21:40:07.554+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811742",
                    "issueId": "13482646"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482646/worklog/811743",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lwhite1 commented on code in PR #14213:\nURL: https://github.com/apache/arrow/pull/14213#discussion_r979082182\n\n\n##########\ndocs/source/java/vector.rst:\n##########\n@@ -268,6 +268,82 @@ For example, the code below shows how to build a :class:`ListVector` of int's us\n      }\n   }\n \n+Dictionary Encoding\n+===================\n+\n+A :class:`FieldVector` can be dictionary encoded for performance or improved memory efficiency. While this is most often done with :class:`VarCharVector`, nearly any type of vector might be encoded if there are many values, but few unique values.\n+\n+There are a few steps involved in the encoding process:\n+\n+1. Create a regular, un-encoded vector and populate it\n+2. Create a dictionary vector of the same type as the un-encoded vector. This vector must have the same values, but each unique value in the un-encoded vector need appear here only once.\n+3. Create a :class:`Dictionary`. It will contain the dictionary vector, plus a :class:`DictionaryEncoding` object that holds the encoding's metadata and settings values.\n+4. Create a :class:`DictionaryEncoder`.\n+5. Call the encode() method on the :class:`DictionaryEncoder` to produce an encoded version of the original vector.\n+6. (Optional) Call the decode() method on the encoded vector to re-create the original values.\n+\n+The encoded values will be integers. Depending on how many unique values you have, you can use either TinyIntVector, SmallIntVector, or IntVector to hold them. You specify the type when you create your :class:`DictionaryEncoding` instance. You might wonder where those integers come from: the dictionary vector is a regular vector, so the value's index position in that vector is used as its encoded value.\n\nReview Comment:\n    I was following the use of :class: in the other java tutorial pages (and elsewhere in this page).   I didn't see any warnings other than ones that seem to be about broken references, eg. \r\n   \r\n   /Users/lawrencewhite/Documents/GitHub/apache/arrow/docs/source/java/vector.rst:22: WARNING: unknown document: ../format/Columnar\n\n\n\n",
                    "created": "2022-09-23T21:44:12.906+0000",
                    "updated": "2022-09-23T21:44:12.906+0000",
                    "started": "2022-09-23T21:44:12.905+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811743",
                    "issueId": "13482646"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482646/worklog/811744",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lwhite1 commented on code in PR #14213:\nURL: https://github.com/apache/arrow/pull/14213#discussion_r979080350\n\n\n##########\ndocs/source/java/vector.rst:\n##########\n@@ -268,6 +268,82 @@ For example, the code below shows how to build a :class:`ListVector` of int's us\n      }\n   }\n \n+Dictionary Encoding\n+===================\n+\n+A :class:`FieldVector` can be dictionary encoded for performance or improved memory efficiency. While this is most often done with :class:`VarCharVector`, nearly any type of vector might be encoded if there are many values, but few unique values.\n+\n+There are a few steps involved in the encoding process:\n+\n+1. Create a regular, un-encoded vector and populate it\n+2. Create a dictionary vector of the same type as the un-encoded vector. This vector must have the same values, but each unique value in the un-encoded vector need appear here only once.\n+3. Create a :class:`Dictionary`. It will contain the dictionary vector, plus a :class:`DictionaryEncoding` object that holds the encoding's metadata and settings values.\n+4. Create a :class:`DictionaryEncoder`.\n+5. Call the encode() method on the :class:`DictionaryEncoder` to produce an encoded version of the original vector.\n+6. (Optional) Call the decode() method on the encoded vector to re-create the original values.\n+\n+The encoded values will be integers. Depending on how many unique values you have, you can use either TinyIntVector, SmallIntVector, or IntVector to hold them. You specify the type when you create your :class:`DictionaryEncoding` instance. You might wonder where those integers come from: the dictionary vector is a regular vector, so the value's index position in that vector is used as its encoded value.\n+\n+Another critical attribute in :class:`DictionaryEncoding` is the id. It's important to understand how the id is used, so we cover that later in this section.\n+\n+This result will be a new vector (for example, an IntVector) that can act in place of the original vector (for example, a VarCharVector). When you write the data in arrow format, it is both the new IntVector plus the dictionary that is written: you will need the dictionary later to retrieve the original values.\n+\n+.. code-block:: Java\n+\n+    // 1. create a vector for the un-encoded data and populate it\n+    VarCharVector unencoded = new VarCharVector(\"unencoded\", allocator);\n+    // now put some data in it before continuing\n+\n+    // 2. create a vector to hold the dictionary and populate it\n+    VarCharVector dictionaryVector = new VarCharVector(\"dictionary\", allocator);\n+\n+    // 3. create a dictionary object\n+    Dictionary dictionary = new Dictionary(dictionaryVector, new DictionaryEncoding(1L, false, null));\n+\n+    // 4. create a dictionary encoder\n+    DictionaryEncoder encoder = new DictionaryEncoder.encode(dictionary, allocator);\n+\n+    // 5. encode the data\n+    IntVector encoded = (IntVector) encoder.encode(unencoded);\n+\n+    // 6. re-create an un-encoded version from the encoded vector\n+    VarCharVector decoded = (VarCharVector) encoder.decode(encoded)\n+\n+One thing we haven't discussed is how to create the dictionary vector from the original un-encoded values. That is left to the library user since a custom method will likely be more efficient than a general utility.\n+\n+Finally, you can package a number of dictionaries together, which is useful if you're working with a :class:`VectorSchemaRoot` with several dictionary-encoded vectors. This is done using an object called a :class:`DictionaryProvider`. as shown in the example below. Note that we don't put the dictionary vectors in the same :class:`VectorSchemaRoot` as the data vectors, as they will generally have fewer values.\n+\n+\n+.. code-block:: Java\n+\n+    DictionaryProvider.MapDictionaryProvider provider =\n+        new DictionaryProvider.MapDictionaryProvider();\n+\n+    provider.put(dictionary)))\n+\n+The :class:`DictionaryProvider` is simply a map of identifiers to :class:`Dictionary` objects, where each identifier is a long value. In the above code you will see it as the first argument to the :class:`DictionaryEncoding` constructor.\n+\n+This is where the :class:`DictionaryEncoding`'s 'id' attribute comes in. This value is used to connect dictionaries to instances of :class:`VectorSchemaRoot`, using a :class:`DictionaryProvider`.  Here's how that works:\n+\n+* The :class:`VectorSchemaRoot` has a :class:`Schema` object containing a list of :class:`Field` objects.\n+* The field has an attribute called 'dictionary', but it holds a :class:`DictionaryEncoding` rather than a :class:`Dictionary`\n+* As mentioned, the :class:`DictionaryProvider` holds dictionaries indexed by a long value. This value is the id from your :class:`DictionaryEncoding`.\n+* To retrieve the dictionary for a vector in a :class:`VectorSchemaRoot`, you get the field associated with the vector, get its dictionary attribute, and use that object's id to look up the correct dictionary in the provider.\n+\n+.. code-block:: Java\n+\n+    // create the encoded vector, the Dictionary and DictionaryProvider as discussed above\n+\n+    // Create a VectorSchemaRoot with one encoded vector\n+    VectorSchemaRoot vsr = new VectorSchemaRoot(List.of(encoded));\n+\n+    // now we want to decode our vector, so we retrieve its dictionary from the provider\n+    Field f = vsr.getField(encoded.getName());\n+    DictionaryEncoding encoding = f.getDictionary();\n+    Dictionary dictionary = provider.get(encoding.getId());\n+\n+As you can see, a :class:`DictionaryProvider` is handy for managing the dictionaries associated with a :class:`VectorSchemaRoot`. More importantly, it helps package the dictionaries for a :class:`VectorSchemaRoot` when it's written. The classes :class:`ArrowFileWriter` and :class:`ArrowStreamWriter` both accept an optional :class:`DictionaryProvider` argument for that purpose. You can find example code for writing dictionaries in the documentation for (:ref:`ipc`).\n\nReview Comment:\n   Sorry, I wasn't suggesting they were linked directly to vector (and I was wrong about 1-1), but I believe a vector can be encoded by at most one dictionary. So my question is, if a Reader reads one vector, why does it need a relationship to a Map of dictionaries, rather than a single dictionary. \r\n   \r\n   In any case, I guess why is not important\n\n\n\n",
                    "created": "2022-09-23T21:45:38.180+0000",
                    "updated": "2022-09-23T21:45:38.180+0000",
                    "started": "2022-09-23T21:45:38.180+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "811744",
                    "issueId": "13482646"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 19800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6890e101[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4d8f9008[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4ca61ea5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7d18d8e9[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@61ad3c48[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@498d6b99[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3522173b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@e465ee6[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6017c1a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@24721ee0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1cc4e9a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@3dc1912b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 19800,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Sep 28 18:29:25 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-09-28T18:29:25.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17811/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-09-21T20:25:51.000+0000",
        "updated": "2022-09-29T05:52:25.000+0000",
        "timeoriginalestimate": null,
        "description": "The ValueVector documentation does not include any discussion of dictionary encoding. There is example code on the IPC page https://arrow.apache.org/docs/dev/java/ipc.html, but it doesn't provide an overview.\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 19800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Doc][Java] Document how dictionary encoding works",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13482646/comment/17610684",
                    "id": "17610684",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 14213\n[https://github.com/apache/arrow/pull/14213]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-09-28T18:29:25.665+0000",
                    "updated": "2022-09-28T18:29:25.665+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z18qy8:",
        "customfield_12314139": null
    }
}