{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13478676",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478676",
    "key": "ARROW-17527",
    "fields": {
        "parent": {
            "id": "13477296",
            "key": "ARROW-17454",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13477296",
            "fields": {
                "summary": "[Go] Implement First Pass Native Go compute",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351947",
                "id": "12351947",
                "description": "",
                "name": "10.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333772",
                "id": "12333772",
                "name": "Go"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7200,
            "total": 7200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17527/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 12,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478676/worklog/803766",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13974:\nURL: https://github.com/apache/arrow/pull/13974#issuecomment-1227703412\n\n   https://issues.apache.org/jira/browse/ARROW-17527\n\n\n",
                    "created": "2022-08-25T20:02:40.262+0000",
                    "updated": "2022-08-25T20:02:40.262+0000",
                    "started": "2022-08-25T20:02:40.262+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "803766",
                    "issueId": "13478676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478676/worklog/803767",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13974:\nURL: https://github.com/apache/arrow/pull/13974#issuecomment-1227703434\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-08-25T20:02:41.103+0000",
                    "updated": "2022-08-25T20:02:41.103+0000",
                    "started": "2022-08-25T20:02:41.103+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "803767",
                    "issueId": "13478676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478676/worklog/803980",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #13974:\nURL: https://github.com/apache/arrow/pull/13974#discussion_r956151661\n\n\n##########\ngo/arrow/compute/cast_test.go:\n##########\n@@ -0,0 +1,329 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package compute_test\n+\n+import (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"strings\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/v10/arrow\"\n+\t\"github.com/apache/arrow/go/v10/arrow/array\"\n+\t\"github.com/apache/arrow/go/v10/arrow/compute\"\n+\t\"github.com/apache/arrow/go/v10/arrow/memory\"\n+\t\"github.com/apache/arrow/go/v10/arrow/scalar\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"github.com/stretchr/testify/require\"\n+\t\"github.com/stretchr/testify/suite\"\n+)\n+\n+func getScalars(inputs []compute.Datum, idx int) []scalar.Scalar {\n+\tout := make([]scalar.Scalar, len(inputs))\n+\tfor i, in := range inputs {\n+\t\tif in.Kind() == compute.KindArray {\n+\t\t\tarr := in.(*compute.ArrayDatum).MakeArray()\n+\t\t\tdefer arr.Release()\n+\t\t\tout[i], _ = scalar.GetScalar(arr, idx)\n+\t\t} else {\n+\t\t\tout[i] = in.(*compute.ScalarDatum).Value\n+\t\t}\n+\t}\n+\treturn out\n+}\n+\n+func getDatums[T any](inputs []T) []compute.Datum {\n+\tout := make([]compute.Datum, len(inputs))\n+\tfor i, in := range inputs {\n+\t\tout[i] = compute.NewDatum(in)\n+\t}\n+\treturn out\n+}\n+\n+func assertDatumsEqual(t *testing.T, expected, actual compute.Datum) {\n+\trequire.Equal(t, expected.Kind(), actual.Kind())\n+\n+\tswitch expected.Kind() {\n+\tcase compute.KindScalar:\n+\t\twant := expected.(*compute.ScalarDatum).Value\n+\t\tgot := actual.(*compute.ScalarDatum).Value\n\nReview Comment:\n   I guess we'd just eat a panic if the actual value wasn't the right Kind? Is it worth doing an explicit check or is the regular message clear enough?\n\n\n\n##########\ngo/arrow/compute/internal/kernels/cast.go:\n##########\n@@ -0,0 +1,120 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package kernels\n+\n+import (\n+\t\"github.com/apache/arrow/go/v10/arrow\"\n+\t\"github.com/apache/arrow/go/v10/arrow/array\"\n+\t\"github.com/apache/arrow/go/v10/arrow/compute/internal/exec\"\n+)\n+\n+type CastOptions struct {\n+\tToType               arrow.DataType `compute:\"to_type\"`\n+\tAllowIntOverflow     bool           `compute:\"allow_int_overflow\"`\n+\tAllowTimeTruncate    bool           `compute:\"allow_time_truncate\"`\n+\tAllowTimeOverflow    bool           `compute:\"allow_time_overflow\"`\n+\tAllowDecimalTruncate bool           `compute:\"allow_decimal_truncate\"`\n+\tAllowFloatTruncate   bool           `compute:\"allow_float_truncate\"`\n+\tAllowInvalidUtf8     bool           `compute:\"allow_invalid_utf8\"`\n+}\n+\n+func (CastOptions) TypeName() string { return \"CastOptions\" }\n+\n+// CastState is the kernel state for Cast functions, it is an alias to\n+// the CastOptions object.\n+type CastState = CastOptions\n+\n+// ZeroCopyCastExec is a kernel for performing a cast which can be executed\n+// as a zero-copy operation. It simply forwards the buffers to the output.\n+//\n+// This can be used for casting a type to itself, or for casts between\n+// equivalent representations such as Int32 and Date32.\n+func ZeroCopyCastExec(_ *exec.KernelCtx, batch *exec.ExecSpan, out *exec.ExecResult) error {\n+\tdt := out.Type\n+\t*out = batch.Values[0].Array\n+\tout.Type = dt\n+\treturn nil\n+}\n+\n+func recursiveSetSelfAlloc(arr *exec.ArraySpan) {\n+\tfor i := range arr.Buffers {\n+\t\tif len(arr.Buffers[i].Buf) > 0 {\n+\t\t\tarr.Buffers[i].SelfAlloc = true\n+\t\t\tif arr.Buffers[i].Owner != nil {\n+\t\t\t\tarr.Buffers[i].Owner.Retain()\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tfor i := range arr.Children {\n+\t\trecursiveSetSelfAlloc(&arr.Children[i])\n+\t}\n+}\n+\n+// CastFromNull is a simple kernel for constructing an array of null values\n+// for the requested data type, allowing casting of an arrow.Null typed value\n+// to any other arbitrary data type.\n+func CastFromNull(ctx *exec.KernelCtx, batch *exec.ExecSpan, out *exec.ExecResult) error {\n+\tarr := array.MakeArrayOfNull(exec.GetAllocator(ctx.Ctx), out.Type, int(batch.Len))\n+\tdefer arr.Release()\n+\n+\tout.SetMembers(arr.Data())\n+\trecursiveSetSelfAlloc(out)\n+\treturn nil\n+}\n+\n+// OutputAllNull is a simple kernel that initializes the output as an array\n+// whose output is all null by setting nulls to the length.\n+func OutputAllNull(_ *exec.KernelCtx, batch *exec.ExecSpan, out *exec.ExecResult) error {\n+\tout.Nulls = batch.Len\n+\treturn nil\n+}\n+\n+func canCastFromDict(id arrow.Type) bool {\n+\treturn arrow.IsPrimitive(id) || arrow.IsBaseBinary(id) || arrow.IsFixedSizeBinary(id)\n+}\n+\n+// GetZeroCastKernel returns a kernel for performing ZeroCast execution using\n+// the ZeroCopyCastExec kernel function.\n+func GetZeroCastKernel(inID arrow.Type, inType exec.InputType, out exec.OutputType) exec.ScalarKernel {\n+\tk := exec.NewScalarKernel([]exec.InputType{inType}, out, ZeroCopyCastExec, nil)\n+\tk.NullHandling = exec.NullComputedNoPrealloc\n+\tk.MemAlloc = exec.MemNoPrealloc\n+\treturn k\n+}\n+\n+// GetCommonCastKernels returns the list of kernels common to all types\n+// such as casting from null or from Extension types of the appropriate\n+// underlying type.\n+func GetCommonCastKernels(outID arrow.Type, outType arrow.DataType) (out []exec.ScalarKernel) {\n+\tout = make([]exec.ScalarKernel, 0, 2)\n+\n+\tkernel := exec.NewScalarKernel([]exec.InputType{exec.NewExactInput(arrow.Null)}, exec.NewOutputType(outType),\n+\t\tCastFromNull, nil)\n+\tkernel.NullHandling = exec.NullComputedNoPrealloc\n+\tkernel.MemAlloc = exec.MemNoPrealloc\n+\tout = append(out, kernel)\n+\n+\t// if canCastFromDict(outID) {\n+\t// dictionary unpacking not implemented for boolean or nested types\n+\t// TODO dict cast\n+\t// panic(fmt.Errorf(\"%w: dictionary casting\", arrow.ErrNotImplemented))\n+\t// }\n+\n+\t// Cast from extension\n+\treturn\n\nReview Comment:\n   Just remove the commented out code/comments that don't apply?\n\n\n\n##########\ngo/arrow/compute/internal/kernels/helpers.go:\n##########\n@@ -0,0 +1,119 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package kernels\n+\n+import (\n+\t\"github.com/apache/arrow/go/v10/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/v10/arrow/compute/internal/exec\"\n+\t\"github.com/apache/arrow/go/v10/internal/bitutils\"\n+)\n+\n+// ScalarUnary returns a kernel for performing a unary operation on\n+// FixedWidth types which is implemented using the passed in function\n+// which will receive a slice containing the raw input data along with\n+// a slice to populate for the output data.\n+//\n+// Note that bool is not included in exec.FixedWidthTypes since it is\n+// represented as a bitmap, not as a slice of bool.\n+func ScalarUnary[OutT, Arg0T exec.FixedWidthTypes](op func(*exec.KernelCtx, []Arg0T, []OutT) error) exec.ArrayKernelExec {\n+\treturn func(ctx *exec.KernelCtx, in *exec.ExecSpan, out *exec.ExecResult) error {\n+\t\targ0 := in.Values[0].Array\n+\t\tinData := exec.GetSpanValues[Arg0T](&arg0, 1)\n+\t\toutData := exec.GetSpanValues[OutT](out, 1)\n+\t\treturn op(ctx, inData, outData)\n+\t}\n+}\n+\n+// ScalarUnaryBoolOutput is like ScalarUnary only it is for cases of boolean\n+// output. The function should take in a slice of the input type and a slice\n+// of bytes to fill with the output boolean bitmap.\n+func ScalarUnaryBoolOutput[Arg0T exec.FixedWidthTypes](op func(*exec.KernelCtx, []Arg0T, []byte) error) exec.ArrayKernelExec {\n+\treturn func(ctx *exec.KernelCtx, in *exec.ExecSpan, out *exec.ExecResult) error {\n+\t\targ0 := in.Values[0].Array\n+\t\tinData := exec.GetSpanValues[Arg0T](&arg0, 1)\n+\t\treturn op(ctx, inData, out.Buffers[1].Buf)\n+\t}\n+}\n+\n+// ScalarUnaryNotNullBinaryArgBoolOut creates a unary kernel that accepts\n+// a binary type input (Binary [offset int32], String [offset int32],\n+// LargeBinary [offset int64], LargeString [offset int64]) and returns\n+// a boolean output which is never null.\n+//\n+// It implements the handling to iterate the offsets and values calling\n+// the provided function on each byte slice. The provided default value\n+// will be used as the output for elements of the input that are null.\n+func ScalarUnaryNotNullBinaryArgBoolOut[OffsetT int32 | int64](defVal bool, op func(*exec.KernelCtx, []byte) (bool, error)) exec.ArrayKernelExec {\n\nReview Comment:\n   just a general comment, but seeing as these are patterned after the C++ names, the C++ names aren't very consistent/don't follow a consistent convention - you may want to consider something more principled. (I think @edponce was trying to refactor them a while back, but it's a lot of work)\n\n\n\n",
                    "created": "2022-08-26T15:23:53.270+0000",
                    "updated": "2022-08-26T15:23:53.270+0000",
                    "started": "2022-08-26T15:23:53.270+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "803980",
                    "issueId": "13478676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478676/worklog/804048",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13974:\nURL: https://github.com/apache/arrow/pull/13974#discussion_r956297138\n\n\n##########\ngo/arrow/compute/cast_test.go:\n##########\n@@ -0,0 +1,329 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package compute_test\n+\n+import (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"strings\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/v10/arrow\"\n+\t\"github.com/apache/arrow/go/v10/arrow/array\"\n+\t\"github.com/apache/arrow/go/v10/arrow/compute\"\n+\t\"github.com/apache/arrow/go/v10/arrow/memory\"\n+\t\"github.com/apache/arrow/go/v10/arrow/scalar\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"github.com/stretchr/testify/require\"\n+\t\"github.com/stretchr/testify/suite\"\n+)\n+\n+func getScalars(inputs []compute.Datum, idx int) []scalar.Scalar {\n+\tout := make([]scalar.Scalar, len(inputs))\n+\tfor i, in := range inputs {\n+\t\tif in.Kind() == compute.KindArray {\n+\t\t\tarr := in.(*compute.ArrayDatum).MakeArray()\n+\t\t\tdefer arr.Release()\n+\t\t\tout[i], _ = scalar.GetScalar(arr, idx)\n+\t\t} else {\n+\t\t\tout[i] = in.(*compute.ScalarDatum).Value\n+\t\t}\n+\t}\n+\treturn out\n+}\n+\n+func getDatums[T any](inputs []T) []compute.Datum {\n+\tout := make([]compute.Datum, len(inputs))\n+\tfor i, in := range inputs {\n+\t\tout[i] = compute.NewDatum(in)\n+\t}\n+\treturn out\n+}\n+\n+func assertDatumsEqual(t *testing.T, expected, actual compute.Datum) {\n+\trequire.Equal(t, expected.Kind(), actual.Kind())\n+\n+\tswitch expected.Kind() {\n+\tcase compute.KindScalar:\n+\t\twant := expected.(*compute.ScalarDatum).Value\n+\t\tgot := actual.(*compute.ScalarDatum).Value\n\nReview Comment:\n   The regular message would be clear enough i believe. That said, if a different datum type returned `KindScalar` from the `Kind()` method, we'll have other issues and lots of other failures haha. So i think this should be fine.\n\n\n\n",
                    "created": "2022-08-26T18:09:10.464+0000",
                    "updated": "2022-08-26T18:09:10.464+0000",
                    "started": "2022-08-26T18:09:10.463+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "804048",
                    "issueId": "13478676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478676/worklog/804050",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #13974:\nURL: https://github.com/apache/arrow/pull/13974#discussion_r956297815\n\n\n##########\ngo/arrow/compute/cast_test.go:\n##########\n@@ -0,0 +1,329 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package compute_test\n+\n+import (\n+\t\"context\"\n+\t\"fmt\"\n+\t\"strings\"\n+\t\"testing\"\n+\n+\t\"github.com/apache/arrow/go/v10/arrow\"\n+\t\"github.com/apache/arrow/go/v10/arrow/array\"\n+\t\"github.com/apache/arrow/go/v10/arrow/compute\"\n+\t\"github.com/apache/arrow/go/v10/arrow/memory\"\n+\t\"github.com/apache/arrow/go/v10/arrow/scalar\"\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"github.com/stretchr/testify/require\"\n+\t\"github.com/stretchr/testify/suite\"\n+)\n+\n+func getScalars(inputs []compute.Datum, idx int) []scalar.Scalar {\n+\tout := make([]scalar.Scalar, len(inputs))\n+\tfor i, in := range inputs {\n+\t\tif in.Kind() == compute.KindArray {\n+\t\t\tarr := in.(*compute.ArrayDatum).MakeArray()\n+\t\t\tdefer arr.Release()\n+\t\t\tout[i], _ = scalar.GetScalar(arr, idx)\n+\t\t} else {\n+\t\t\tout[i] = in.(*compute.ScalarDatum).Value\n+\t\t}\n+\t}\n+\treturn out\n+}\n+\n+func getDatums[T any](inputs []T) []compute.Datum {\n+\tout := make([]compute.Datum, len(inputs))\n+\tfor i, in := range inputs {\n+\t\tout[i] = compute.NewDatum(in)\n+\t}\n+\treturn out\n+}\n+\n+func assertDatumsEqual(t *testing.T, expected, actual compute.Datum) {\n+\trequire.Equal(t, expected.Kind(), actual.Kind())\n+\n+\tswitch expected.Kind() {\n+\tcase compute.KindScalar:\n+\t\twant := expected.(*compute.ScalarDatum).Value\n+\t\tgot := actual.(*compute.ScalarDatum).Value\n\nReview Comment:\n   I missed the Equal assertion above :sweat_smile: \n\n\n\n",
                    "created": "2022-08-26T18:09:55.522+0000",
                    "updated": "2022-08-26T18:09:55.522+0000",
                    "started": "2022-08-26T18:09:55.522+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "804050",
                    "issueId": "13478676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478676/worklog/804051",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13974:\nURL: https://github.com/apache/arrow/pull/13974#discussion_r956297888\n\n\n##########\ngo/arrow/compute/internal/kernels/cast.go:\n##########\n@@ -0,0 +1,120 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package kernels\n+\n+import (\n+\t\"github.com/apache/arrow/go/v10/arrow\"\n+\t\"github.com/apache/arrow/go/v10/arrow/array\"\n+\t\"github.com/apache/arrow/go/v10/arrow/compute/internal/exec\"\n+)\n+\n+type CastOptions struct {\n+\tToType               arrow.DataType `compute:\"to_type\"`\n+\tAllowIntOverflow     bool           `compute:\"allow_int_overflow\"`\n+\tAllowTimeTruncate    bool           `compute:\"allow_time_truncate\"`\n+\tAllowTimeOverflow    bool           `compute:\"allow_time_overflow\"`\n+\tAllowDecimalTruncate bool           `compute:\"allow_decimal_truncate\"`\n+\tAllowFloatTruncate   bool           `compute:\"allow_float_truncate\"`\n+\tAllowInvalidUtf8     bool           `compute:\"allow_invalid_utf8\"`\n+}\n+\n+func (CastOptions) TypeName() string { return \"CastOptions\" }\n+\n+// CastState is the kernel state for Cast functions, it is an alias to\n+// the CastOptions object.\n+type CastState = CastOptions\n+\n+// ZeroCopyCastExec is a kernel for performing a cast which can be executed\n+// as a zero-copy operation. It simply forwards the buffers to the output.\n+//\n+// This can be used for casting a type to itself, or for casts between\n+// equivalent representations such as Int32 and Date32.\n+func ZeroCopyCastExec(_ *exec.KernelCtx, batch *exec.ExecSpan, out *exec.ExecResult) error {\n+\tdt := out.Type\n+\t*out = batch.Values[0].Array\n+\tout.Type = dt\n+\treturn nil\n+}\n+\n+func recursiveSetSelfAlloc(arr *exec.ArraySpan) {\n+\tfor i := range arr.Buffers {\n+\t\tif len(arr.Buffers[i].Buf) > 0 {\n+\t\t\tarr.Buffers[i].SelfAlloc = true\n+\t\t\tif arr.Buffers[i].Owner != nil {\n+\t\t\t\tarr.Buffers[i].Owner.Retain()\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tfor i := range arr.Children {\n+\t\trecursiveSetSelfAlloc(&arr.Children[i])\n+\t}\n+}\n+\n+// CastFromNull is a simple kernel for constructing an array of null values\n+// for the requested data type, allowing casting of an arrow.Null typed value\n+// to any other arbitrary data type.\n+func CastFromNull(ctx *exec.KernelCtx, batch *exec.ExecSpan, out *exec.ExecResult) error {\n+\tarr := array.MakeArrayOfNull(exec.GetAllocator(ctx.Ctx), out.Type, int(batch.Len))\n+\tdefer arr.Release()\n+\n+\tout.SetMembers(arr.Data())\n+\trecursiveSetSelfAlloc(out)\n+\treturn nil\n+}\n+\n+// OutputAllNull is a simple kernel that initializes the output as an array\n+// whose output is all null by setting nulls to the length.\n+func OutputAllNull(_ *exec.KernelCtx, batch *exec.ExecSpan, out *exec.ExecResult) error {\n+\tout.Nulls = batch.Len\n+\treturn nil\n+}\n+\n+func canCastFromDict(id arrow.Type) bool {\n+\treturn arrow.IsPrimitive(id) || arrow.IsBaseBinary(id) || arrow.IsFixedSizeBinary(id)\n+}\n+\n+// GetZeroCastKernel returns a kernel for performing ZeroCast execution using\n+// the ZeroCopyCastExec kernel function.\n+func GetZeroCastKernel(inID arrow.Type, inType exec.InputType, out exec.OutputType) exec.ScalarKernel {\n+\tk := exec.NewScalarKernel([]exec.InputType{inType}, out, ZeroCopyCastExec, nil)\n+\tk.NullHandling = exec.NullComputedNoPrealloc\n+\tk.MemAlloc = exec.MemNoPrealloc\n+\treturn k\n+}\n+\n+// GetCommonCastKernels returns the list of kernels common to all types\n+// such as casting from null or from Extension types of the appropriate\n+// underlying type.\n+func GetCommonCastKernels(outID arrow.Type, outType arrow.DataType) (out []exec.ScalarKernel) {\n+\tout = make([]exec.ScalarKernel, 0, 2)\n+\n+\tkernel := exec.NewScalarKernel([]exec.InputType{exec.NewExactInput(arrow.Null)}, exec.NewOutputType(outType),\n+\t\tCastFromNull, nil)\n+\tkernel.NullHandling = exec.NullComputedNoPrealloc\n+\tkernel.MemAlloc = exec.MemNoPrealloc\n+\tout = append(out, kernel)\n+\n+\t// if canCastFromDict(outID) {\n+\t// dictionary unpacking not implemented for boolean or nested types\n+\t// TODO dict cast\n+\t// panic(fmt.Errorf(\"%w: dictionary casting\", arrow.ErrNotImplemented))\n+\t// }\n+\n+\t// Cast from extension\n+\treturn\n\nReview Comment:\n   fair, I originally tried implementing it to return a not implemented error but ran into other issues so i just commented it out. I'll remove it from this PR\n\n\n\n",
                    "created": "2022-08-26T18:10:00.529+0000",
                    "updated": "2022-08-26T18:10:00.529+0000",
                    "started": "2022-08-26T18:10:00.529+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "804051",
                    "issueId": "13478676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478676/worklog/804053",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on code in PR #13974:\nURL: https://github.com/apache/arrow/pull/13974#discussion_r956300589\n\n\n##########\ngo/arrow/compute/internal/kernels/helpers.go:\n##########\n@@ -0,0 +1,119 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package kernels\n+\n+import (\n+\t\"github.com/apache/arrow/go/v10/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/v10/arrow/compute/internal/exec\"\n+\t\"github.com/apache/arrow/go/v10/internal/bitutils\"\n+)\n+\n+// ScalarUnary returns a kernel for performing a unary operation on\n+// FixedWidth types which is implemented using the passed in function\n+// which will receive a slice containing the raw input data along with\n+// a slice to populate for the output data.\n+//\n+// Note that bool is not included in exec.FixedWidthTypes since it is\n+// represented as a bitmap, not as a slice of bool.\n+func ScalarUnary[OutT, Arg0T exec.FixedWidthTypes](op func(*exec.KernelCtx, []Arg0T, []OutT) error) exec.ArrayKernelExec {\n+\treturn func(ctx *exec.KernelCtx, in *exec.ExecSpan, out *exec.ExecResult) error {\n+\t\targ0 := in.Values[0].Array\n+\t\tinData := exec.GetSpanValues[Arg0T](&arg0, 1)\n+\t\toutData := exec.GetSpanValues[OutT](out, 1)\n+\t\treturn op(ctx, inData, outData)\n+\t}\n+}\n+\n+// ScalarUnaryBoolOutput is like ScalarUnary only it is for cases of boolean\n+// output. The function should take in a slice of the input type and a slice\n+// of bytes to fill with the output boolean bitmap.\n+func ScalarUnaryBoolOutput[Arg0T exec.FixedWidthTypes](op func(*exec.KernelCtx, []Arg0T, []byte) error) exec.ArrayKernelExec {\n+\treturn func(ctx *exec.KernelCtx, in *exec.ExecSpan, out *exec.ExecResult) error {\n+\t\targ0 := in.Values[0].Array\n+\t\tinData := exec.GetSpanValues[Arg0T](&arg0, 1)\n+\t\treturn op(ctx, inData, out.Buffers[1].Buf)\n+\t}\n+}\n+\n+// ScalarUnaryNotNullBinaryArgBoolOut creates a unary kernel that accepts\n+// a binary type input (Binary [offset int32], String [offset int32],\n+// LargeBinary [offset int64], LargeString [offset int64]) and returns\n+// a boolean output which is never null.\n+//\n+// It implements the handling to iterate the offsets and values calling\n+// the provided function on each byte slice. The provided default value\n+// will be used as the output for elements of the input that are null.\n+func ScalarUnaryNotNullBinaryArgBoolOut[OffsetT int32 | int64](defVal bool, op func(*exec.KernelCtx, []byte) (bool, error)) exec.ArrayKernelExec {\n\nReview Comment:\n   I've been following a pattern with naming these so far myself. But if you have any suggestions I'd be more than happy to consider them. :smile: \r\n   \r\n   Essentially i've got `[Scalar|Vector][Arity](NotNull)((Binary|Bool)Arg)((Binary|Bool)Out)` for lack of a better representation lol.\n\n\n\n",
                    "created": "2022-08-26T18:12:51.071+0000",
                    "updated": "2022-08-26T18:12:51.071+0000",
                    "started": "2022-08-26T18:12:51.071+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "804053",
                    "issueId": "13478676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478676/worklog/804055",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #13974:\nURL: https://github.com/apache/arrow/pull/13974#discussion_r956302153\n\n\n##########\ngo/arrow/compute/internal/kernels/helpers.go:\n##########\n@@ -0,0 +1,119 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package kernels\n+\n+import (\n+\t\"github.com/apache/arrow/go/v10/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/v10/arrow/compute/internal/exec\"\n+\t\"github.com/apache/arrow/go/v10/internal/bitutils\"\n+)\n+\n+// ScalarUnary returns a kernel for performing a unary operation on\n+// FixedWidth types which is implemented using the passed in function\n+// which will receive a slice containing the raw input data along with\n+// a slice to populate for the output data.\n+//\n+// Note that bool is not included in exec.FixedWidthTypes since it is\n+// represented as a bitmap, not as a slice of bool.\n+func ScalarUnary[OutT, Arg0T exec.FixedWidthTypes](op func(*exec.KernelCtx, []Arg0T, []OutT) error) exec.ArrayKernelExec {\n+\treturn func(ctx *exec.KernelCtx, in *exec.ExecSpan, out *exec.ExecResult) error {\n+\t\targ0 := in.Values[0].Array\n+\t\tinData := exec.GetSpanValues[Arg0T](&arg0, 1)\n+\t\toutData := exec.GetSpanValues[OutT](out, 1)\n+\t\treturn op(ctx, inData, outData)\n+\t}\n+}\n+\n+// ScalarUnaryBoolOutput is like ScalarUnary only it is for cases of boolean\n+// output. The function should take in a slice of the input type and a slice\n+// of bytes to fill with the output boolean bitmap.\n+func ScalarUnaryBoolOutput[Arg0T exec.FixedWidthTypes](op func(*exec.KernelCtx, []Arg0T, []byte) error) exec.ArrayKernelExec {\n+\treturn func(ctx *exec.KernelCtx, in *exec.ExecSpan, out *exec.ExecResult) error {\n+\t\targ0 := in.Values[0].Array\n+\t\tinData := exec.GetSpanValues[Arg0T](&arg0, 1)\n+\t\treturn op(ctx, inData, out.Buffers[1].Buf)\n+\t}\n+}\n+\n+// ScalarUnaryNotNullBinaryArgBoolOut creates a unary kernel that accepts\n+// a binary type input (Binary [offset int32], String [offset int32],\n+// LargeBinary [offset int64], LargeString [offset int64]) and returns\n+// a boolean output which is never null.\n+//\n+// It implements the handling to iterate the offsets and values calling\n+// the provided function on each byte slice. The provided default value\n+// will be used as the output for elements of the input that are null.\n+func ScalarUnaryNotNullBinaryArgBoolOut[OffsetT int32 | int64](defVal bool, op func(*exec.KernelCtx, []byte) (bool, error)) exec.ArrayKernelExec {\n\nReview Comment:\n   If it makes sense to you then that sounds good!\n\n\n\n",
                    "created": "2022-08-26T18:14:31.166+0000",
                    "updated": "2022-08-26T18:14:31.166+0000",
                    "started": "2022-08-26T18:14:31.166+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "804055",
                    "issueId": "13478676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478676/worklog/804069",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on PR #13974:\nURL: https://github.com/apache/arrow/pull/13974#issuecomment-1228852385\n\n   I'll give this one more day for others to take a look, and merge it tomorrow if there's no issues.\n\n\n",
                    "created": "2022-08-26T19:43:14.214+0000",
                    "updated": "2022-08-26T19:43:14.214+0000",
                    "started": "2022-08-26T19:43:14.213+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "804069",
                    "issueId": "13478676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478676/worklog/804441",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade merged PR #13974:\nURL: https://github.com/apache/arrow/pull/13974\n\n\n",
                    "created": "2022-08-29T14:46:46.941+0000",
                    "updated": "2022-08-29T14:46:46.941+0000",
                    "started": "2022-08-29T14:46:46.941+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "804441",
                    "issueId": "13478676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478676/worklog/804484",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on PR #13974:\nURL: https://github.com/apache/arrow/pull/13974#issuecomment-1230611961\n\n   Benchmark runs are scheduled for baseline = 6f302a3070200f9404da30b6785620b2e72a968f and contender = 9d867558b50289a159b63f74f0c26af026dbe310. 9d867558b50289a159b63f74f0c26af026dbe310 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/777616069617450784653e65cc3bf598...98ab508d1f4740228e63ec29b7b5b8e1/)\n   [Failed] [test-mac-arm](https://conbench.ursa.dev/compare/runs/3617f79907674dde83e7641f09df1db4...49e9d29ee06d4acb969f97c1c1f60e3a/)\n   [Failed :arrow_down:0.27% :arrow_up:0.0%] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/10215e6e21d0429199ab75618eaf19ff...5dcdccd1220a4b7d9e1cbaab6ef4d394/)\n   [Finished :arrow_down:0.21% :arrow_up:0.07%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/76c1e00a3b494d1a903f0eb24a17bfda...fd179c080b994ec6b8ec70ba8a69b66a/)\n   Buildkite builds:\n   [Finished] [`9d867558` ec2-t3-xlarge-us-east-2](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/1379)\n   [Failed] [`9d867558` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/1395)\n   [Failed] [`9d867558` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/1377)\n   [Finished] [`9d867558` ursa-thinkcentre-m75q](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/1394)\n   [Finished] [`6f302a30` ec2-t3-xlarge-us-east-2](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/1378)\n   [Failed] [`6f302a30` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/1394)\n   [Failed] [`6f302a30` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/1376)\n   [Finished] [`6f302a30` ursa-thinkcentre-m75q](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/1393)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python, R. Runs only benchmarks with cloud = True\n   test-mac-arm: Supported benchmark langs: C++, Python, R\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n",
                    "created": "2022-08-29T17:22:52.591+0000",
                    "updated": "2022-08-29T17:22:52.591+0000",
                    "started": "2022-08-29T17:22:52.590+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "804484",
                    "issueId": "13478676"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478676/worklog/804486",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on PR #13974:\nURL: https://github.com/apache/arrow/pull/13974#issuecomment-1230612201\n\n   ['Python', 'R'] benchmarks have high level of regressions.\n   [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/10215e6e21d0429199ab75618eaf19ff...5dcdccd1220a4b7d9e1cbaab6ef4d394/)\n   \n\n\n",
                    "created": "2022-08-29T17:23:05.767+0000",
                    "updated": "2022-08-29T17:23:05.767+0000",
                    "started": "2022-08-29T17:23:05.767+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "804486",
                    "issueId": "13478676"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 7200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@70ba8ad2[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e171362[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@162c85b4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@60d60810[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@38d458b4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@298877fb[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5bfb465b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@bbd43bc[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@11b6ab87[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7b6b31e5[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7aa3794d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1be26506[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7200,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Aug 29 14:46:47 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-08-29T14:46:47.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17527/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-08-25T15:20:29.000+0000",
        "updated": "2022-08-29T17:23:05.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Go] Implement Cast to Boolean Functions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13478676/comment/17597240",
                    "id": "17597240",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
                        "name": "zeroshade",
                        "key": "zeroshade",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
                        },
                        "displayName": "Matthew Topol",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 13974\n[https://github.com/apache/arrow/pull/13974]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
                        "name": "zeroshade",
                        "key": "zeroshade",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
                        },
                        "displayName": "Matthew Topol",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-08-29T14:46:47.718+0000",
                    "updated": "2022-08-29T14:46:47.718+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z182oo:",
        "customfield_12314139": null
    }
}