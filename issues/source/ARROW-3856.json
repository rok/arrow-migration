{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13200121",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200121",
    "key": "ARROW-3856",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344316",
                "id": "12344316",
                "name": "0.11.1",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-23"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334104",
                "id": "12334104",
                "name": "Ruby"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "aggregateprogress": {
            "progress": 1800,
            "total": 1800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 1800,
            "total": 1800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3856/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 3,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200121/worklog/168846",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou opened a new pull request #3015: ARROW-3856: [Ruby] Support compressed CSV save/load\nURL: https://github.com/apache/arrow/pull/3015\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-22T16:31:24.548+0000",
                    "updated": "2018-11-22T16:31:24.548+0000",
                    "started": "2018-11-22T16:31:24.548+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "168846",
                    "issueId": "13200121"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200121/worklog/168870",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #3015: ARROW-3856: [Ruby] Support compressed CSV save/load\nURL: https://github.com/apache/arrow/pull/3015#issuecomment-441089308\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/3015?src=pr&el=h1) Report\n   > Merging [#3015](https://codecov.io/gh/apache/arrow/pull/3015?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/ac7c9ccb232a421602ab3f936ecd3ba7d2102d04?src=pr&el=desc) will **increase** coverage by `1.02%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/3015/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/3015?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #3015      +/-   ##\n   ==========================================\n   + Coverage   86.71%   87.73%   +1.02%     \n   ==========================================\n     Files         493      424      -69     \n     Lines       69891    64289    -5602     \n   ==========================================\n   - Hits        60609    56407    -4202     \n   + Misses       9186     7882    -1304     \n   + Partials       96        0      -96\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/3015?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/plasma/thirdparty/ae/ae.c](https://codecov.io/gh/apache/arrow/pull/3015/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvdGhpcmRwYXJ0eS9hZS9hZS5j) | `72.03% <0%> (-0.95%)` | :arrow_down: |\n   | [rust/src/record\\_batch.rs](https://codecov.io/gh/apache/arrow/pull/3015/diff?src=pr&el=tree#diff-cnVzdC9zcmMvcmVjb3JkX2JhdGNoLnJz) | | |\n   | [go/arrow/array/table.go](https://codecov.io/gh/apache/arrow/pull/3015/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvdGFibGUuZ28=) | | |\n   | [rust/src/array.rs](https://codecov.io/gh/apache/arrow/pull/3015/diff?src=pr&el=tree#diff-cnVzdC9zcmMvYXJyYXkucnM=) | | |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3015/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | | |\n   | [go/arrow/internal/testing/tools/bool.go](https://codecov.io/gh/apache/arrow/pull/3015/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvdGVzdGluZy90b29scy9ib29sLmdv) | | |\n   | [go/arrow/array/bufferbuilder.go](https://codecov.io/gh/apache/arrow/pull/3015/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVmZmVyYnVpbGRlci5nbw==) | | |\n   | [go/arrow/internal/bitutil/bitutil.go](https://codecov.io/gh/apache/arrow/pull/3015/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvYml0dXRpbC9iaXR1dGlsLmdv) | | |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3015/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | | |\n   | [go/arrow/array/null.go](https://codecov.io/gh/apache/arrow/pull/3015/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVsbC5nbw==) | | |\n   | ... and [60 more](https://codecov.io/gh/apache/arrow/pull/3015/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/3015?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/3015?src=pr&el=footer). Last update [ac7c9cc...b3099ca](https://codecov.io/gh/apache/arrow/pull/3015?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-22T17:20:39.908+0000",
                    "updated": "2018-11-22T17:20:39.908+0000",
                    "started": "2018-11-22T17:20:39.907+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "168870",
                    "issueId": "13200121"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200121/worklog/168937",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy closed pull request #3015: ARROW-3856: [Ruby] Support compressed CSV save/load\nURL: https://github.com/apache/arrow/pull/3015\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/ruby/red-arrow/lib/arrow/compression-type.rb b/ruby/red-arrow/lib/arrow/compression-type.rb\nnew file mode 100644\nindex 0000000000..b913e48ff2\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/compression-type.rb\n@@ -0,0 +1,37 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  class CompressionType\n+    EXTENSIONS = {}\n+    values.each do |value|\n+      case value\n+      when UNCOMPRESSED\n+      when GZIP\n+        EXTENSIONS[\"gz\"] = value\n+      else\n+        EXTENSIONS[value.nick] = value\n+      end\n+    end\n+\n+    class << self\n+      def resolve_extension(extension)\n+        EXTENSIONS[extension.to_s]\n+      end\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/csv-loader.rb b/ruby/red-arrow/lib/arrow/csv-loader.rb\nindex 3aa85bf7ff..bb1f419d82 100644\n--- a/ruby/red-arrow/lib/arrow/csv-loader.rb\n+++ b/ruby/red-arrow/lib/arrow/csv-loader.rb\n@@ -30,6 +30,7 @@ def load(path_or_data, **options)\n     def initialize(path_or_data, **options)\n       @path_or_data = path_or_data\n       @options = options\n+      @compression = @options.delete(:compression)\n     end\n \n     def load\n@@ -115,12 +116,25 @@ def reader_options\n       options\n     end\n \n+    def open_input(raw_input)\n+      if @compression\n+        codec = Codec.new(@compression)\n+        CompressedInputStream.open(codec, raw_input) do |input|\n+          yield(input)\n+        end\n+      else\n+        yield(raw_input)\n+      end\n+    end\n+\n     def load_from_path(path)\n       options = reader_options\n       if options\n         begin\n-          MemoryMappedInputStream.open(path.to_s) do |input|\n-            return CSVReader.new(input, options).read\n+          MemoryMappedInputStream.open(path.to_s) do |raw_input|\n+            open_input(raw_input) do |input|\n+              return CSVReader.new(input, options).read\n+            end\n           end\n         rescue Arrow::Error::Invalid\n         end\n@@ -136,8 +150,10 @@ def load_data(data)\n       options = reader_options\n       if options\n         begin\n-          BufferInputStream.open(Buffer.new(data)) do |input|\n-            return CSVReader.new(input, options).read\n+          BufferInputStream.open(Buffer.new(data)) do |raw_input|\n+            open_input(raw_input) do |input|\n+              return CSVReader.new(input, options).read\n+            end\n           end\n         rescue Arrow::Error::Invalid\n         end\ndiff --git a/ruby/red-arrow/lib/arrow/loader.rb b/ruby/red-arrow/lib/arrow/loader.rb\nindex e147113095..15dd025bae 100644\n--- a/ruby/red-arrow/lib/arrow/loader.rb\n+++ b/ruby/red-arrow/lib/arrow/loader.rb\n@@ -35,6 +35,7 @@ def require_libraries\n       require \"arrow/array-builder\"\n       require \"arrow/chunked-array\"\n       require \"arrow/column\"\n+      require \"arrow/compression-type\"\n       require \"arrow/csv-loader\"\n       require \"arrow/csv-read-options\"\n       require \"arrow/data-type\"\n@@ -43,8 +44,11 @@ def require_libraries\n       require \"arrow/date64-array\"\n       require \"arrow/date64-array-builder\"\n       require \"arrow/field\"\n+      require \"arrow/path-extension\"\n       require \"arrow/record\"\n       require \"arrow/record-batch\"\n+      require \"arrow/record-batch-file-reader\"\n+      require \"arrow/record-batch-stream-reader\"\n       require \"arrow/rolling-window\"\n       require \"arrow/schema\"\n       require \"arrow/slicer\"\n@@ -58,9 +62,7 @@ def require_libraries\n       require \"arrow/tensor\"\n       require \"arrow/timestamp-array\"\n       require \"arrow/timestamp-array-builder\"\n-\n-      require \"arrow/record-batch-file-reader\"\n-      require \"arrow/record-batch-stream-reader\"\n+      require \"arrow/writable\"\n     end\n \n     def load_object_info(info)\ndiff --git a/ruby/red-arrow/lib/arrow/path-extension.rb b/ruby/red-arrow/lib/arrow/path-extension.rb\nnew file mode 100644\nindex 0000000000..7d32672b7b\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/path-extension.rb\n@@ -0,0 +1,45 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  class PathExtension\n+    def initialize(path)\n+      @path = path\n+    end\n+\n+    def extract\n+      basename = ::File.basename(@path)\n+      components = basename.split(\".\")\n+      return {} if components.size == 1\n+\n+      extension = components.last.downcase\n+      if components.size > 2\n+        compression = CompressionType.resolve_extension(extension)\n+        if compression\n+          {\n+            format: components[-2].downcase,\n+            compression: compression,\n+          }\n+        else\n+          {format: extension}\n+        end\n+      else\n+        {format: extension}\n+      end\n+    end\n+  end\n+end\ndiff --git a/ruby/red-arrow/lib/arrow/table-loader.rb b/ruby/red-arrow/lib/arrow/table-loader.rb\nindex db9a1fb15b..a6ce9a1029 100644\n--- a/ruby/red-arrow/lib/arrow/table-loader.rb\n+++ b/ruby/red-arrow/lib/arrow/table-loader.rb\n@@ -24,15 +24,14 @@ def load(path, options={})\n     end\n \n     def initialize(path, options={})\n+      path = path.to_path if path.respond_to?(:to_path)\n       @path = path\n       @options = options\n+      fill_options\n     end\n \n     def load\n-      path = @path\n-      path = path.to_path if path.respond_to?(:to_path)\n-      format = @options[:format] || guess_format(path) || :arrow\n-\n+      format = @options[:format]\n       custom_load_method = \"load_as_#{format}\"\n       unless respond_to?(custom_load_method, true)\n         available_formats = []\n@@ -47,17 +46,32 @@ def load\n         message << \"]: #{format.inspect}\"\n         raise ArgumentError, message\n       end\n-      __send__(custom_load_method, path)\n+      if method(custom_load_method).arity.zero?\n+        __send__(custom_load_method)\n+      else\n+        # For backward compatibility.\n+        __send__(custom_load_method, @path)\n+      end\n     end\n \n     private\n-    def guess_format(path)\n-      extension = ::File.extname(path).gsub(/\\A\\./, \"\").downcase\n-      return nil if extension.empty?\n-\n-      return extension if respond_to?(\"load_as_#{extension}\", true)\n+    def fill_options\n+      if @options[:format] and @options.key?(:compression)\n+        return\n+      end\n \n-      nil\n+      extension = PathExtension.new(@path)\n+      info = extension.extract\n+      format = info[:format]\n+      @options = @options.dup\n+      if respond_to?(\"load_as_#{format}\", true)\n+        @options[:format] ||= format.to_sym\n+      else\n+        @options[:format] ||= :arrow\n+      end\n+      unless @options.key?(:compression)\n+        @options[:compression] = info[:compression]\n+      end\n     end\n \n     def load_raw(input, reader)\n@@ -77,7 +91,7 @@ def load_raw(input, reader)\n       table\n     end\n \n-    def load_as_arrow(path)\n+    def load_as_arrow\n       input = nil\n       reader = nil\n       error = nil\n@@ -86,7 +100,7 @@ def load_as_arrow(path)\n         RecordBatchStreamReader,\n       ]\n       reader_class_candidates.each do |reader_class_candidate|\n-        input = MemoryMappedInputStream.new(path)\n+        input = MemoryMappedInputStream.new(@path)\n         begin\n           reader = reader_class_candidate.new(input)\n         rescue Arrow::Error\n@@ -99,21 +113,21 @@ def load_as_arrow(path)\n       load_raw(input, reader)\n     end\n \n-    def load_as_batch(path)\n-      input = MemoryMappedInputStream.new(path)\n+    def load_as_batch\n+      input = MemoryMappedInputStream.new(@path)\n       reader = RecordBatchFileReader.new(input)\n       load_raw(input, reader)\n     end\n \n-    def load_as_stream(path)\n-      input = MemoryMappedInputStream.new(path)\n+    def load_as_stream\n+      input = MemoryMappedInputStream.new(@path)\n       reader = RecordBatchStreamReader.new(input)\n       load_raw(input, reader)\n     end\n \n     if Arrow.const_defined?(:ORCFileReader)\n-      def load_as_orc(path)\n-        input = MemoryMappedInputStream.new(path)\n+      def load_as_orc\n+        input = MemoryMappedInputStream.new(@path)\n         reader = ORCFileReader.new(input)\n         field_indexes = @options[:field_indexes]\n         reader.set_field_indexes(field_indexes) if field_indexes\n@@ -123,14 +137,14 @@ def load_as_orc(path)\n       end\n     end\n \n-    def load_as_csv(path)\n+    def load_as_csv\n       options = @options.dup\n       options.delete(:format)\n-      CSVLoader.load(Pathname.new(path), options)\n+      CSVLoader.load(Pathname.new(@path), options)\n     end\n \n-    def load_as_feather(path)\n-      input = MemoryMappedInputStream.new(path)\n+    def load_as_feather\n+      input = MemoryMappedInputStream.new(@path)\n       reader = FeatherFileReader.new(input)\n       table = reader.read\n       table.instance_variable_set(:@input, input)\ndiff --git a/ruby/red-arrow/lib/arrow/table-saver.rb b/ruby/red-arrow/lib/arrow/table-saver.rb\nindex bc315a3a56..99e6e49053 100644\n--- a/ruby/red-arrow/lib/arrow/table-saver.rb\n+++ b/ruby/red-arrow/lib/arrow/table-saver.rb\n@@ -25,15 +25,14 @@ def save(table, path, options={})\n \n     def initialize(table, path, options={})\n       @table = table\n+      path = path.to_path if path.respond_to?(:to_path)\n       @path = path\n       @options = options\n+      fill_options\n     end\n \n     def save\n-      path = @path\n-      path = path.to_path if path.respond_to?(:to_path)\n-      format = @options[:format] || guess_format(path) || :arrow\n-\n+      format = @options[:format]\n       custom_save_method = \"save_as_#{format}\"\n       unless respond_to?(custom_save_method, true)\n         available_formats = []\n@@ -48,41 +47,73 @@ def save\n         message << \"]: #{format.inspect}\"\n         raise ArgumentError, message\n       end\n-      __send__(custom_save_method, path)\n+      if method(custom_save_method).arity.zero?\n+        __send__(custom_save_method)\n+      else\n+        # For backward compatibility.\n+        __send__(custom_save_method, @path)\n+      end\n     end\n \n     private\n-    def guess_format(path)\n-      extension = ::File.extname(path).gsub(/\\A\\./, \"\").downcase\n-      return nil if extension.empty?\n-\n-      return extension if respond_to?(\"save_as_#{extension}\", true)\n+    def fill_options\n+      if @options[:format] and @options.key?(:compression)\n+        return\n+      end\n \n-      nil\n+      extension = PathExtension.new(@path)\n+      info = extension.extract\n+      format = info[:format]\n+      @options = @options.dup\n+      if respond_to?(\"save_as_#{format}\", true)\n+        @options[:format] ||= format.to_sym\n+      else\n+        @options[:format] ||= :arrow\n+      end\n+      unless @options.key?(:compression)\n+        @options[:compression] = info[:compression]\n+      end\n     end\n \n-    def save_raw(writer_class, path)\n-      FileOutputStream.open(path, false) do |output|\n+    def save_raw(writer_class)\n+      FileOutputStream.open(@path, false) do |output|\n         writer_class.open(output, @table.schema) do |writer|\n           writer.write_table(@table)\n         end\n       end\n     end\n \n-    def save_as_arrow(path)\n-      save_as_batch(path)\n+    def save_as_arrow\n+      save_as_batch\n+    end\n+\n+    def save_as_batch\n+      save_raw(RecordBatchFileWriter)\n     end\n \n-    def save_as_batch(path)\n-      save_raw(RecordBatchFileWriter, path)\n+    def save_as_stream\n+      save_raw(RecordBatchStreamWriter)\n     end\n \n-    def save_as_stream(path)\n-      save_raw(RecordBatchStreamWriter, path)\n+    def open_output\n+      compression = @options[:compression]\n+      if compression\n+        codec = Codec.new(compression)\n+        FileOutputStream.open(@path, false) do |raw_output|\n+          CompressedOutputStream.open(codec, raw_output) do |output|\n+            yield(output)\n+          end\n+        end\n+      else\n+        ::File.open(@path, \"w\") do |output|\n+          yield(output)\n+        end\n+      end\n     end\n \n-    def save_as_csv(path)\n-      CSV.open(path, \"w\") do |csv|\n+    def save_as_csv\n+      open_output do |output|\n+        csv = CSV.new(output)\n         names = @table.schema.fields.collect(&:name)\n         csv << names\n         @table.each_record(reuse_record: true) do |record|\n@@ -93,8 +124,8 @@ def save_as_csv(path)\n       end\n     end\n \n-    def save_as_feather(path)\n-      FileOutputStream.open(path, false) do |output|\n+    def save_as_feather\n+      FileOutputStream.open(@path, false) do |output|\n         FeatherFileWriter.open(output) do |writer|\n           writer.write(@table)\n         end\ndiff --git a/ruby/red-arrow/lib/arrow/writable.rb b/ruby/red-arrow/lib/arrow/writable.rb\nnew file mode 100644\nindex 0000000000..02be9ddfce\n--- /dev/null\n+++ b/ruby/red-arrow/lib/arrow/writable.rb\n@@ -0,0 +1,22 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  module Writable\n+    alias_method :<<, :write\n+  end\n+end\ndiff --git a/ruby/red-arrow/test/helper.rb b/ruby/red-arrow/test/helper.rb\nindex c51f8bab4c..2aa868bfa7 100644\n--- a/ruby/red-arrow/test/helper.rb\n+++ b/ruby/red-arrow/test/helper.rb\n@@ -21,6 +21,7 @@\n \n require \"pathname\"\n require \"tempfile\"\n+require \"zlib\"\n \n require \"test-unit\"\n \ndiff --git a/ruby/red-arrow/test/test-table.rb b/ruby/red-arrow/test/test-table.rb\nindex 3eaaf634cc..1576f779ce 100644\n--- a/ruby/red-arrow/test/test-table.rb\n+++ b/ruby/red-arrow/test/test-table.rb\n@@ -423,25 +423,53 @@ def setup\n                                        :schema => @table.schema))\n       end\n \n+      test(\"csv.gz\") do\n+        file = Tempfile.new([\"red-arrow\", \".csv.gz\"])\n+        @table.save(file.path)\n+        assert_equal(@table,\n+                     Arrow::Table.load(file.path,\n+                                       :format => :csv,\n+                                       :compression => :gzip,\n+                                       :schema => @table.schema))\n+      end\n+\n       sub_test_case(\"load: auto detect\") do\n-        test(\":batch\") do\n+        test(\"batch\") do\n           file = Tempfile.new([\"red-arrow\", \".arrow\"])\n           @table.save(file.path, :format => :batch)\n           assert_equal(@table, Arrow::Table.load(file.path))\n         end\n \n-        test(\":stream\") do\n+        test(\"stream\") do\n           file = Tempfile.new([\"red-arrow\", \".arrow\"])\n           @table.save(file.path, :format => :stream)\n           assert_equal(@table, Arrow::Table.load(file.path))\n         end\n \n-        test(\":csv\") do\n+        test(\"csv\") do\n           path = fixture_path(\"with-header.csv\")\n           assert_equal(<<-TABLE, Arrow::Table.load(path, skip_lines: /^#/).to_s)\n \tname\tscore\n 0\talice\t   10\n 1\tbob \t   29\n+2\tchris\t   -1\n+          TABLE\n+        end\n+\n+        test(\"csv.gz\") do\n+          file = Tempfile.new([\"red-arrow\", \".csv.gz\"])\n+          Zlib::GzipWriter.wrap(file) do |gz|\n+            gz.write(<<-CSV)\n+name,score\n+alice,10\n+bob,29\n+chris,-1\n+            CSV\n+          end\n+          assert_equal(<<-TABLE, Arrow::Table.load(file.path).to_s)\n+\tname\tscore\n+0\talice\t   10\n+1\tbob \t   29\n 2\tchris\t   -1\n           TABLE\n         end\ndiff --git a/ruby/red-parquet/lib/parquet/arrow-table-loadable.rb b/ruby/red-parquet/lib/parquet/arrow-table-loadable.rb\nindex 56585b7d06..4df527bb8d 100644\n--- a/ruby/red-parquet/lib/parquet/arrow-table-loadable.rb\n+++ b/ruby/red-parquet/lib/parquet/arrow-table-loadable.rb\n@@ -18,8 +18,8 @@\n module Parquet\n   module ArrowTableLoadable\n     private\n-    def load_as_parquet(path)\n-      reader = Parquet::ArrowFileReader.new(path)\n+    def load_as_parquet\n+      reader = Parquet::ArrowFileReader.new(@path)\n       reader.use_threads = (@options[:use_threads] != false)\n       reader.read_table\n     end\ndiff --git a/ruby/red-parquet/lib/parquet/arrow-table-savable.rb b/ruby/red-parquet/lib/parquet/arrow-table-savable.rb\nindex 56cb3f4e49..5d96d5f58e 100644\n--- a/ruby/red-parquet/lib/parquet/arrow-table-savable.rb\n+++ b/ruby/red-parquet/lib/parquet/arrow-table-savable.rb\n@@ -18,9 +18,9 @@\n module Parquet\n   module ArrowTableSavable\n     private\n-    def save_as_parquet(path)\n+    def save_as_parquet\n       chunk_size = @options[:chunk_size] || 1024 # TODO\n-      Parquet::ArrowFileWriter.open(@table.schema, path) do |writer|\n+      Parquet::ArrowFileWriter.open(@table.schema, @path) do |writer|\n         writer.write_table(@table, chunk_size)\n       end\n     end\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-22T22:32:05.605+0000",
                    "updated": "2018-11-22T22:32:05.605+0000",
                    "started": "2018-11-22T22:32:05.604+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "168937",
                    "issueId": "13200121"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 1800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@341ca14d[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@28adece4[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4ebb2efa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@9b63105[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5c66dac4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@24f6c323[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@332de5b9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@babd4c0[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@61f19f8b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@730cb74d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2fd084b8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7a885856[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 1800,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Nov 22 22:33:21 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-11-22T22:33:21.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3856/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-11-22T16:31:00.000+0000",
        "updated": "2018-11-22T22:33:21.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "0.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 1800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Ruby] Support compressed CSV save/load",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13200121/comment/16696279",
                    "id": "16696279",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 3015\n[https://github.com/apache/arrow/pull/3015]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-11-22T22:33:21.123+0000",
                    "updated": "2018-11-22T22:33:21.123+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|s00saw:",
        "customfield_12314139": null
    }
}