{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13253822",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253822",
    "key": "ARROW-6391",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12568761",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12568761",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13253820",
                    "key": "ARROW-6390",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253820",
                    "fields": {
                        "summary": "[Python][Flight] Add Python documentation / tutorial for Flight",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
            "name": "kszucs",
            "key": "kszucs",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Krisztian Szucs",
            "active": true,
            "timeZone": "Europe/Budapest"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334621",
                "id": "12334621",
                "name": "FlightRPC"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 25200,
            "total": 25200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 25200,
            "total": 25200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6391/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 46,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253822/worklog/311740",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #5374: ARROW-6391: [Python][Flight] Add built-in methods on FlightServerBase to start server and wait for it to be available\nURL: https://github.com/apache/arrow/pull/5374\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-12T21:11:32.073+0000",
                    "updated": "2019-09-12T21:11:32.073+0000",
                    "started": "2019-09-12T21:11:32.073+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "311740",
                    "issueId": "13253822"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253822/worklog/311742",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #5374: ARROW-6391: [Python][Flight] Add built-in methods on FlightServerBase to start server and wait for it to be available\nURL: https://github.com/apache/arrow/pull/5374#discussion_r323951331\n \n \n\n ##########\n File path: python/pyarrow/_flight.pyx\n ##########\n @@ -1739,3 +1751,62 @@ cdef class FlightServerBase:\n             raise ValueError(\"shutdown() on uninitialized FlightServerBase\")\n         with nogil:\n             check_flight_status(self.server.get().Shutdown())\n+\n+\n+cdef class FlightServer(FlightServerBase):\n+\n+    cdef:\n+        object _thread\n+\n+    cdef readonly:\n+        Location location\n+\n+    def __init__(self, location=None, auth_handler=None,\n+                 tls_certificates=None):\n+        if isinstance(location, six.string_types):\n+            location = Location(location)\n+        elif isinstance(location, (tuple, type(None))):\n+            if location is None:\n+                location = ('localhost', _find_free_port())\n+            host, port = location\n+            if tls_certificates:\n+                location = Location.for_grpc_tls(host, port)\n+            else:\n+                location = Location.for_grpc_tcp(host, port)\n+        elif not isinstance(location, Location):\n+            raise TypeError('`location` argument must be a string, tuple or a '\n+                            'Location instance')\n+        self.init(location, auth_handler, tls_certificates)\n+        self.location = location\n+\n+    @property\n+    def port(self):\n+        return self.server.get().port()\n+\n+    def connect(self, tls_root_certs=None, override_hostname=None):\n+        \"\"\"\n+        Connect to the Flight server\n+\n+        Parameters\n+        ----------\n+        tls_root_certs : bytes or None\n+            PEM-encoded\n+        override_hostname : str or None\n+            Override the hostname checked by TLS. Insecure, use with caution.\n+\n+        Returns\n+        -------\n+        client : FlightClient\n+        \"\"\"\n+        return FlightClient.connect(self.location,\n+                                    tls_root_certs=tls_root_certs,\n+                                    override_hostname=override_hostname)\n+\n+    def __enter__(self):\n+        self._thread = threading.Thread(target=self.run, daemon=True)\n+        self._thread.start()\n+        return self\n+\n+    def __exit__(self, exc_type, exc_value, traceback):  # add timeout\n+        self.shutdown()\n+        self._thread.join(3)\n \n Review comment:\n   Configure timeout as an __init__ argument.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-12T21:12:04.659+0000",
                    "updated": "2019-09-12T21:12:04.659+0000",
                    "started": "2019-09-12T21:12:04.659+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "311742",
                    "issueId": "13253822"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253822/worklog/311745",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #5374: ARROW-6391: [Python][Flight] Add built-in methods on FlightServerBase to start server and wait for it to be available\nURL: https://github.com/apache/arrow/pull/5374#discussion_r323951929\n \n \n\n ##########\n File path: python/pyarrow/_flight.pyx\n ##########\n @@ -1739,3 +1751,62 @@ cdef class FlightServerBase:\n             raise ValueError(\"shutdown() on uninitialized FlightServerBase\")\n         with nogil:\n             check_flight_status(self.server.get().Shutdown())\n+\n+\n+cdef class FlightServer(FlightServerBase):\n \n Review comment:\n   Extended `FlightServerBase` to keep backward compatibility. If we can break the API, then I can move the new methods to `FlightServerBase`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-12T21:13:44.931+0000",
                    "updated": "2019-09-12T21:13:44.931+0000",
                    "started": "2019-09-12T21:13:44.931+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "311745",
                    "issueId": "13253822"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253822/worklog/311746",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #5374: ARROW-6391: [Python][Flight] Add built-in methods on FlightServerBase to start server and wait for it to be available\nURL: https://github.com/apache/arrow/pull/5374#discussion_r323952042\n \n \n\n ##########\n File path: python/pyarrow/_flight.pyx\n ##########\n @@ -1739,3 +1751,62 @@ cdef class FlightServerBase:\n             raise ValueError(\"shutdown() on uninitialized FlightServerBase\")\n         with nogil:\n             check_flight_status(self.server.get().Shutdown())\n+\n+\n+cdef class FlightServer(FlightServerBase):\n+\n+    cdef:\n+        object _thread\n+\n+    cdef readonly:\n+        Location location\n+\n+    def __init__(self, location=None, auth_handler=None,\n+                 tls_certificates=None):\n+        if isinstance(location, six.string_types):\n+            location = Location(location)\n+        elif isinstance(location, (tuple, type(None))):\n+            if location is None:\n+                location = ('localhost', _find_free_port())\n+            host, port = location\n+            if tls_certificates:\n+                location = Location.for_grpc_tls(host, port)\n+            else:\n+                location = Location.for_grpc_tcp(host, port)\n+        elif not isinstance(location, Location):\n+            raise TypeError('`location` argument must be a string, tuple or a '\n+                            'Location instance')\n+        self.init(location, auth_handler, tls_certificates)\n+        self.location = location\n+\n+    @property\n+    def port(self):\n \n Review comment:\n   IMO port would be better as a property.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-12T21:14:02.466+0000",
                    "updated": "2019-09-12T21:14:02.466+0000",
                    "started": "2019-09-12T21:14:02.465+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "311746",
                    "issueId": "13253822"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253822/worklog/311747",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #5374: ARROW-6391: [Python][Flight] Add built-in methods on FlightServerBase to start server and wait for it to be available\nURL: https://github.com/apache/arrow/pull/5374#discussion_r323951331\n \n \n\n ##########\n File path: python/pyarrow/_flight.pyx\n ##########\n @@ -1739,3 +1751,62 @@ cdef class FlightServerBase:\n             raise ValueError(\"shutdown() on uninitialized FlightServerBase\")\n         with nogil:\n             check_flight_status(self.server.get().Shutdown())\n+\n+\n+cdef class FlightServer(FlightServerBase):\n+\n+    cdef:\n+        object _thread\n+\n+    cdef readonly:\n+        Location location\n+\n+    def __init__(self, location=None, auth_handler=None,\n+                 tls_certificates=None):\n+        if isinstance(location, six.string_types):\n+            location = Location(location)\n+        elif isinstance(location, (tuple, type(None))):\n+            if location is None:\n+                location = ('localhost', _find_free_port())\n+            host, port = location\n+            if tls_certificates:\n+                location = Location.for_grpc_tls(host, port)\n+            else:\n+                location = Location.for_grpc_tcp(host, port)\n+        elif not isinstance(location, Location):\n+            raise TypeError('`location` argument must be a string, tuple or a '\n+                            'Location instance')\n+        self.init(location, auth_handler, tls_certificates)\n+        self.location = location\n+\n+    @property\n+    def port(self):\n+        return self.server.get().port()\n+\n+    def connect(self, tls_root_certs=None, override_hostname=None):\n+        \"\"\"\n+        Connect to the Flight server\n+\n+        Parameters\n+        ----------\n+        tls_root_certs : bytes or None\n+            PEM-encoded\n+        override_hostname : str or None\n+            Override the hostname checked by TLS. Insecure, use with caution.\n+\n+        Returns\n+        -------\n+        client : FlightClient\n+        \"\"\"\n+        return FlightClient.connect(self.location,\n+                                    tls_root_certs=tls_root_certs,\n+                                    override_hostname=override_hostname)\n+\n+    def __enter__(self):\n+        self._thread = threading.Thread(target=self.run, daemon=True)\n+        self._thread.start()\n+        return self\n+\n+    def __exit__(self, exc_type, exc_value, traceback):  # add timeout\n+        self.shutdown()\n+        self._thread.join(3)\n \n Review comment:\n   Configure timeout as an `__init__` argument.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-12T21:14:19.636+0000",
                    "updated": "2019-09-12T21:14:19.636+0000",
                    "started": "2019-09-12T21:14:19.636+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "311747",
                    "issueId": "13253822"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253822/worklog/311750",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #5374: ARROW-6391: [Python][Flight] Add built-in methods on FlightServerBase to start server and wait for it to be available\nURL: https://github.com/apache/arrow/pull/5374#discussion_r323952613\n \n \n\n ##########\n File path: python/pyarrow/tests/test_flight.py\n ##########\n @@ -412,72 +411,23 @@ def get_token(self):\n         return self.token\n \n \n-@contextlib.contextmanager\n-def flight_server(server_base, *args, **kwargs):\n-    \"\"\"Spawn a Flight server on a free port, shutting it down when done.\"\"\"\n-    auth_handler = kwargs.pop('auth_handler', None)\n-    tls_certificates = kwargs.pop('tls_certificates', None)\n-    location = kwargs.pop('location', None)\n-    try_connect = kwargs.pop('try_connect', True)\n-    connect_args = kwargs.pop('connect_args', {})\n-\n-    if location is None:\n-        # Find a free port\n-        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n-        with contextlib.closing(sock) as sock:\n-            sock.bind(('', 0))\n-            sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n-            port = sock.getsockname()[1]\n-        ctor = flight.Location.for_grpc_tcp\n-        if tls_certificates:\n-            ctor = flight.Location.for_grpc_tls\n-        location = ctor(\"localhost\", port)\n-    else:\n-        port = None\n-\n-    ctor_kwargs = kwargs\n-    server_instance = server_base(*args, **ctor_kwargs)\n-    # The server instance needs to be initialized before shutdown()\n-    # can be called\n-    server_instance.init(location,\n-                         auth_handler=auth_handler,\n-                         tls_certificates=tls_certificates)\n-\n-    def _server_thread():\n-        server_instance.run()\n-\n-    thread = threading.Thread(target=_server_thread, daemon=True)\n-    thread.start()\n-\n-    # Wait for server to start\n-    if try_connect:\n \n Review comment:\n   @wesm How about implementing `wait until connected` feature in the `FlightClient.connect`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-12T21:15:47.581+0000",
                    "updated": "2019-09-12T21:15:47.581+0000",
                    "started": "2019-09-12T21:15:47.580+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "311750",
                    "issueId": "13253822"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253822/worklog/311752",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on issue #5374: ARROW-6391: [Python][Flight] Add built-in methods on FlightServerBase to start server and wait for it to be available\nURL: https://github.com/apache/arrow/pull/5374#issuecomment-531010289\n \n \n   @wesm is this the API what you're thinking of?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-12T21:17:09.651+0000",
                    "updated": "2019-09-12T21:17:09.651+0000",
                    "started": "2019-09-12T21:17:09.651+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "311752",
                    "issueId": "13253822"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253822/worklog/311754",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #5374: ARROW-6391: [Python][Flight] Add built-in methods on FlightServerBase to start server and wait for it to be available\nURL: https://github.com/apache/arrow/pull/5374#issuecomment-531013349\n \n \n   See the `wait_for_available` method that came from test_flight.py in \r\n   \r\n   https://github.com/wesm/vldb-2019-apache-arrow-workshop/blob/master/Demo2-Flight.ipynb\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-12T21:26:43.017+0000",
                    "updated": "2019-09-12T21:26:43.017+0000",
                    "started": "2019-09-12T21:26:43.017+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "311754",
                    "issueId": "13253822"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253822/worklog/311758",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #5374: ARROW-6391: [Python][Flight] Add built-in methods on FlightServerBase to start server and wait for it to be available\nURL: https://github.com/apache/arrow/pull/5374#issuecomment-531013556\n \n \n   @lidavidm @pitrou there are some API changes and refinements here, do you mind also taking a look?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-12T21:27:21.096+0000",
                    "updated": "2019-09-12T21:27:21.096+0000",
                    "started": "2019-09-12T21:27:21.095+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "311758",
                    "issueId": "13253822"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253822/worklog/311759",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5374: ARROW-6391: [Python][Flight] Add built-in methods on FlightServerBase to start server and wait for it to be available\nURL: https://github.com/apache/arrow/pull/5374#discussion_r323957197\n \n \n\n ##########\n File path: python/pyarrow/_flight.pyx\n ##########\n @@ -1739,3 +1751,62 @@ cdef class FlightServerBase:\n             raise ValueError(\"shutdown() on uninitialized FlightServerBase\")\n         with nogil:\n             check_flight_status(self.server.get().Shutdown())\n+\n+\n+cdef class FlightServer(FlightServerBase):\n+\n+    cdef:\n+        object _thread\n+\n+    cdef readonly:\n+        Location location\n+\n+    def __init__(self, location=None, auth_handler=None,\n+                 tls_certificates=None):\n+        if isinstance(location, six.string_types):\n+            location = Location(location)\n+        elif isinstance(location, (tuple, type(None))):\n+            if location is None:\n+                location = ('localhost', _find_free_port())\n+            host, port = location\n+            if tls_certificates:\n+                location = Location.for_grpc_tls(host, port)\n+            else:\n+                location = Location.for_grpc_tcp(host, port)\n+        elif not isinstance(location, Location):\n+            raise TypeError('`location` argument must be a string, tuple or a '\n+                            'Location instance')\n+        self.init(location, auth_handler, tls_certificates)\n+        self.location = location\n+\n+    @property\n+    def port(self):\n+        return self.server.get().port()\n+\n+    def connect(self, tls_root_certs=None, override_hostname=None):\n+        \"\"\"\n+        Connect to the Flight server\n+\n+        Parameters\n+        ----------\n+        tls_root_certs : bytes or None\n+            PEM-encoded\n+        override_hostname : str or None\n+            Override the hostname checked by TLS. Insecure, use with caution.\n+\n+        Returns\n+        -------\n+        client : FlightClient\n+        \"\"\"\n+        return FlightClient.connect(self.location,\n+                                    tls_root_certs=tls_root_certs,\n+                                    override_hostname=override_hostname)\n \n Review comment:\n   What do you think about having `pa.flight.connect`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-12T21:30:21.549+0000",
                    "updated": "2019-09-12T21:30:21.549+0000",
                    "started": "2019-09-12T21:30:21.548+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "311759",
                    "issueId": "13253822"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253822/worklog/311760",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5374: ARROW-6391: [Python][Flight] Add built-in methods on FlightServerBase to start server and wait for it to be available\nURL: https://github.com/apache/arrow/pull/5374#discussion_r323956986\n \n \n\n ##########\n File path: python/pyarrow/_flight.pyx\n ##########\n @@ -1739,3 +1751,62 @@ cdef class FlightServerBase:\n             raise ValueError(\"shutdown() on uninitialized FlightServerBase\")\n         with nogil:\n             check_flight_status(self.server.get().Shutdown())\n+\n+\n+cdef class FlightServer(FlightServerBase):\n \n Review comment:\n   I think it would be OK to break the API and just have `FlightServer` (and add a temporary alias for FlightServerBase). We don't even have documentation for this code!\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-12T21:30:22.261+0000",
                    "updated": "2019-09-12T21:30:22.261+0000",
                    "started": "2019-09-12T21:30:22.260+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "311760",
                    "issueId": "13253822"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253822/worklog/311761",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5374: ARROW-6391: [Python][Flight] Add built-in methods on FlightServerBase to start server and wait for it to be available\nURL: https://github.com/apache/arrow/pull/5374#discussion_r323957613\n \n \n\n ##########\n File path: python/pyarrow/_flight.pyx\n ##########\n @@ -1739,3 +1751,62 @@ cdef class FlightServerBase:\n             raise ValueError(\"shutdown() on uninitialized FlightServerBase\")\n         with nogil:\n             check_flight_status(self.server.get().Shutdown())\n+\n+\n+cdef class FlightServer(FlightServerBase):\n+\n+    cdef:\n+        object _thread\n+\n+    cdef readonly:\n+        Location location\n+\n+    def __init__(self, location=None, auth_handler=None,\n+                 tls_certificates=None):\n+        if isinstance(location, six.string_types):\n+            location = Location(location)\n+        elif isinstance(location, (tuple, type(None))):\n+            if location is None:\n+                location = ('localhost', _find_free_port())\n+            host, port = location\n+            if tls_certificates:\n+                location = Location.for_grpc_tls(host, port)\n+            else:\n+                location = Location.for_grpc_tcp(host, port)\n+        elif not isinstance(location, Location):\n+            raise TypeError('`location` argument must be a string, tuple or a '\n+                            'Location instance')\n+        self.init(location, auth_handler, tls_certificates)\n+        self.location = location\n+\n+    @property\n+    def port(self):\n+        return self.server.get().port()\n+\n+    def connect(self, tls_root_certs=None, override_hostname=None):\n \n Review comment:\n   Not sure about this API. Having the server and client in the same process is likely only in unit tests and demos\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-12T21:30:22.358+0000",
                    "updated": "2019-09-12T21:30:22.358+0000",
                    "started": "2019-09-12T21:30:22.358+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "311761",
                    "issueId": "13253822"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253822/worklog/311762",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5374: ARROW-6391: [Python][Flight] Add built-in methods on FlightServerBase to start server and wait for it to be available\nURL: https://github.com/apache/arrow/pull/5374#discussion_r323957083\n \n \n\n ##########\n File path: python/pyarrow/_flight.pyx\n ##########\n @@ -1739,3 +1751,62 @@ cdef class FlightServerBase:\n             raise ValueError(\"shutdown() on uninitialized FlightServerBase\")\n         with nogil:\n             check_flight_status(self.server.get().Shutdown())\n+\n+\n+cdef class FlightServer(FlightServerBase):\n+\n+    cdef:\n+        object _thread\n+\n+    cdef readonly:\n+        Location location\n+\n+    def __init__(self, location=None, auth_handler=None,\n+                 tls_certificates=None):\n+        if isinstance(location, six.string_types):\n+            location = Location(location)\n+        elif isinstance(location, (tuple, type(None))):\n+            if location is None:\n+                location = ('localhost', _find_free_port())\n+            host, port = location\n+            if tls_certificates:\n+                location = Location.for_grpc_tls(host, port)\n+            else:\n+                location = Location.for_grpc_tcp(host, port)\n+        elif not isinstance(location, Location):\n+            raise TypeError('`location` argument must be a string, tuple or a '\n+                            'Location instance')\n+        self.init(location, auth_handler, tls_certificates)\n+        self.location = location\n+\n+    @property\n+    def port(self):\n \n Review comment:\n   agreed\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-12T21:30:22.570+0000",
                    "updated": "2019-09-12T21:30:22.570+0000",
                    "started": "2019-09-12T21:30:22.570+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "311762",
                    "issueId": "13253822"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253822/worklog/311763",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5374: ARROW-6391: [Python][Flight] Add built-in methods on FlightServerBase to start server and wait for it to be available\nURL: https://github.com/apache/arrow/pull/5374#discussion_r323957352\n \n \n\n ##########\n File path: python/pyarrow/tests/test_flight.py\n ##########\n @@ -412,72 +411,23 @@ def get_token(self):\n         return self.token\n \n \n-@contextlib.contextmanager\n-def flight_server(server_base, *args, **kwargs):\n-    \"\"\"Spawn a Flight server on a free port, shutting it down when done.\"\"\"\n-    auth_handler = kwargs.pop('auth_handler', None)\n-    tls_certificates = kwargs.pop('tls_certificates', None)\n-    location = kwargs.pop('location', None)\n-    try_connect = kwargs.pop('try_connect', True)\n-    connect_args = kwargs.pop('connect_args', {})\n-\n-    if location is None:\n-        # Find a free port\n-        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n-        with contextlib.closing(sock) as sock:\n-            sock.bind(('', 0))\n-            sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n-            port = sock.getsockname()[1]\n-        ctor = flight.Location.for_grpc_tcp\n-        if tls_certificates:\n-            ctor = flight.Location.for_grpc_tls\n-        location = ctor(\"localhost\", port)\n-    else:\n-        port = None\n-\n-    ctor_kwargs = kwargs\n-    server_instance = server_base(*args, **ctor_kwargs)\n-    # The server instance needs to be initialized before shutdown()\n-    # can be called\n-    server_instance.init(location,\n-                         auth_handler=auth_handler,\n-                         tls_certificates=tls_certificates)\n-\n-    def _server_thread():\n-        server_instance.run()\n-\n-    thread = threading.Thread(target=_server_thread, daemon=True)\n-    thread.start()\n-\n-    # Wait for server to start\n-    if try_connect:\n \n Review comment:\n   Seems OK to me\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-12T21:30:23.519+0000",
                    "updated": "2019-09-12T21:30:23.519+0000",
                    "started": "2019-09-12T21:30:23.519+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "311763",
                    "issueId": "13253822"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253822/worklog/311793",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #5374: ARROW-6391: [Python][Flight] Add built-in methods on FlightServerBase to start server and wait for it to be available\nURL: https://github.com/apache/arrow/pull/5374#discussion_r323977156\n \n \n\n ##########\n File path: python/pyarrow/_flight.pyx\n ##########\n @@ -1739,3 +1751,62 @@ cdef class FlightServerBase:\n             raise ValueError(\"shutdown() on uninitialized FlightServerBase\")\n         with nogil:\n             check_flight_status(self.server.get().Shutdown())\n+\n+\n+cdef class FlightServer(FlightServerBase):\n+\n+    cdef:\n+        object _thread\n+\n+    cdef readonly:\n+        Location location\n+\n+    def __init__(self, location=None, auth_handler=None,\n+                 tls_certificates=None):\n+        if isinstance(location, six.string_types):\n+            location = Location(location)\n+        elif isinstance(location, (tuple, type(None))):\n+            if location is None:\n+                location = ('localhost', _find_free_port())\n+            host, port = location\n+            if tls_certificates:\n+                location = Location.for_grpc_tls(host, port)\n+            else:\n+                location = Location.for_grpc_tcp(host, port)\n+        elif not isinstance(location, Location):\n+            raise TypeError('`location` argument must be a string, tuple or a '\n+                            'Location instance')\n+        self.init(location, auth_handler, tls_certificates)\n+        self.location = location\n+\n+    @property\n+    def port(self):\n+        return self.server.get().port()\n+\n+    def connect(self, tls_root_certs=None, override_hostname=None):\n+        \"\"\"\n+        Connect to the Flight server\n+\n+        Parameters\n+        ----------\n+        tls_root_certs : bytes or None\n+            PEM-encoded\n+        override_hostname : str or None\n+            Override the hostname checked by TLS. Insecure, use with caution.\n+\n+        Returns\n+        -------\n+        client : FlightClient\n+        \"\"\"\n+        return FlightClient.connect(self.location,\n+                                    tls_root_certs=tls_root_certs,\n+                                    override_hostname=override_hostname)\n \n Review comment:\n   SGTM\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-12T22:36:30.378+0000",
                    "updated": "2019-09-12T22:36:30.378+0000",
                    "started": "2019-09-12T22:36:30.378+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "311793",
                    "issueId": "13253822"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253822/worklog/311831",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #5374: ARROW-6391: [Python][Flight] Add built-in methods on FlightServerBase to start server and wait for it to be available\nURL: https://github.com/apache/arrow/pull/5374#discussion_r323997633\n \n \n\n ##########\n File path: python/pyarrow/_flight.pyx\n ##########\n @@ -1624,17 +1627,25 @@ cdef class ClientAuthHandler:\n         return new PyClientAuthHandler(self, vtable)\n \n \n+def _find_free_port():\n \n Review comment:\n   This was mostly a hack from when we had `FlightServer.run` and not `init` and `run`. Now that we also have `FlightServer.port`, we can bind to port 0 and then read back the actual port.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-13T00:17:58.804+0000",
                    "updated": "2019-09-13T00:17:58.804+0000",
                    "started": "2019-09-13T00:17:58.804+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "311831",
                    "issueId": "13253822"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253822/worklog/311832",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #5374: ARROW-6391: [Python][Flight] Add built-in methods on FlightServerBase to start server and wait for it to be available\nURL: https://github.com/apache/arrow/pull/5374#discussion_r323997865\n \n \n\n ##########\n File path: python/pyarrow/_flight.pyx\n ##########\n @@ -1739,3 +1751,62 @@ cdef class FlightServerBase:\n             raise ValueError(\"shutdown() on uninitialized FlightServerBase\")\n         with nogil:\n             check_flight_status(self.server.get().Shutdown())\n+\n+\n+cdef class FlightServer(FlightServerBase):\n+\n+    cdef:\n+        object _thread\n+\n+    cdef readonly:\n+        Location location\n+\n+    def __init__(self, location=None, auth_handler=None,\n+                 tls_certificates=None):\n+        if isinstance(location, six.string_types):\n+            location = Location(location)\n+        elif isinstance(location, (tuple, type(None))):\n+            if location is None:\n+                location = ('localhost', _find_free_port())\n+            host, port = location\n+            if tls_certificates:\n+                location = Location.for_grpc_tls(host, port)\n+            else:\n+                location = Location.for_grpc_tcp(host, port)\n+        elif not isinstance(location, Location):\n+            raise TypeError('`location` argument must be a string, tuple or a '\n+                            'Location instance')\n+        self.init(location, auth_handler, tls_certificates)\n+        self.location = location\n+\n+    @property\n+    def port(self):\n+        return self.server.get().port()\n+\n+    def connect(self, tls_root_certs=None, override_hostname=None):\n \n Review comment:\n   Being able to unit test easily is important though, though I agree this is a bit overkill.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-13T00:17:58.871+0000",
                    "updated": "2019-09-13T00:17:58.871+0000",
                    "started": "2019-09-13T00:17:58.871+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "311832",
                    "issueId": "13253822"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253822/worklog/312030",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #5374: ARROW-6391: [Python][Flight] Add built-in methods on FlightServerBase to start server and wait for it to be available\nURL: https://github.com/apache/arrow/pull/5374#discussion_r324186506\n \n \n\n ##########\n File path: python/pyarrow/tests/test_flight.py\n ##########\n @@ -412,72 +425,60 @@ def get_token(self):\n         return self.token\n \n \n-@contextlib.contextmanager\n-def flight_server(server_base, *args, **kwargs):\n-    \"\"\"Spawn a Flight server on a free port, shutting it down when done.\"\"\"\n-    auth_handler = kwargs.pop('auth_handler', None)\n-    tls_certificates = kwargs.pop('tls_certificates', None)\n-    location = kwargs.pop('location', None)\n-    try_connect = kwargs.pop('try_connect', True)\n-    connect_args = kwargs.pop('connect_args', {})\n-\n-    if location is None:\n-        # Find a free port\n-        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n-        with contextlib.closing(sock) as sock:\n-            sock.bind(('', 0))\n-            sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n-            port = sock.getsockname()[1]\n-        ctor = flight.Location.for_grpc_tcp\n-        if tls_certificates:\n-            ctor = flight.Location.for_grpc_tls\n-        location = ctor(\"localhost\", port)\n-    else:\n-        port = None\n-\n-    ctor_kwargs = kwargs\n-    server_instance = server_base(*args, **ctor_kwargs)\n-    # The server instance needs to be initialized before shutdown()\n-    # can be called\n-    server_instance.init(location,\n-                         auth_handler=auth_handler,\n-                         tls_certificates=tls_certificates)\n-\n-    def _server_thread():\n-        server_instance.run()\n-\n-    thread = threading.Thread(target=_server_thread, daemon=True)\n-    thread.start()\n-\n-    # Wait for server to start\n-    if try_connect:\n-        deadline = time.time() + 5.0\n-        client = flight.FlightClient.connect(location, **connect_args)\n-        while True:\n-            try:\n-                list(client.list_flights())\n-            except Exception as e:\n-                if 'Connect Failed' in str(e):\n-                    if time.time() < deadline:\n-                        time.sleep(0.025)\n-                        continue\n-                    else:\n-                        raise\n-            break\n+def test_flight_server_instantiation():\n+    locations = [\n+        None,\n+        'grpc://localhost:0',\n+        ('localhost', _find_free_port()),\n+    ]\n+    for location in locations:\n+        server = FlightServer(location)\n+        assert isinstance(server.location, flight.Location)\n \n-    try:\n-        yield location\n-    finally:\n-        server_instance.shutdown()\n-        thread.join(3.0)\n+\n+@pytest.mark.slow\n+def test_server_shutdown_timeout():\n+    started = time.time()\n+    with SlowStoppingFlightServer():\n+        pass\n+    elapsed = time.time() - started\n+    assert elapsed >= 0.2\n+\n+    started = time.time()\n+    with pytest.raises(TimeoutError):\n+        with SlowStoppingFlightServer(shutdown_timeout=0.1):\n+            pass\n+    elapsed = time.time() - started\n+    assert 0.05 <= elapsed <= 0.2\n+\n+\n+def test_server_exit_reraises_exception():\n+    with pytest.raises(ValueError):\n+        with FlightServer():\n+            raise ValueError()\n+\n+\n+# @pytest.mark.slow\n+# def test_client_wait_for_available():\n+#     started = time.time()\n+#     with SlowStartingFlightServer() as server:\n \n Review comment:\n   When I was trying to test the timeout for `wait_for_available` I've realized that the server is started as soon `::Init()` is called. So deferring the blocking `server.run()` to a background thread doesn't make much sense, because the server already started the serving. Why was the thread preferred, because of the signal handling?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-13T13:14:16.593+0000",
                    "updated": "2019-09-13T13:14:16.593+0000",
                    "started": "2019-09-13T13:14:16.592+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "312030",
                    "issueId": "13253822"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253822/worklog/312044",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #5374: ARROW-6391: [Python][Flight] Add built-in methods on FlightServerBase to start server and wait for it to be available\nURL: https://github.com/apache/arrow/pull/5374#issuecomment-531240571\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/5374?src=pr&el=h1) Report\n   > Merging [#5374](https://codecov.io/gh/apache/arrow/pull/5374?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/8c21776022d50b02feb4f5a199b7aabb54085d7e?src=pr&el=desc) will **decrease** coverage by `3.47%`.\n   > The diff coverage is `78.33%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/5374/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/5374?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #5374      +/-   ##\n   ==========================================\n   - Coverage   69.03%   65.55%   -3.48%     \n   ==========================================\n     Files         745      497     -248     \n     Lines       87715    69017   -18698     \n     Branches     1437        0    -1437     \n   ==========================================\n   - Hits        60556    45247   -15309     \n   + Misses      26797    23770    -3027     \n   + Partials      362        0     -362\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/5374?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [python/pyarrow/flight.py](https://codecov.io/gh/apache/arrow/pull/5374/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvZmxpZ2h0LnB5) | `80% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [python/pyarrow/tests/test\\_flight.py](https://codecov.io/gh/apache/arrow/pull/5374/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9mbGlnaHQucHk=) | `69.34% <76.92%> (-2.64%)` | :arrow_down: |\n   | [python/pyarrow/\\_flight.pyx](https://codecov.io/gh/apache/arrow/pull/5374/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvX2ZsaWdodC5weXg=) | `57.35% <80.26%> (+1.98%)` | :arrow_up: |\n   | [python/pyarrow/tests/test\\_parquet.py](https://codecov.io/gh/apache/arrow/pull/5374/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvdGVzdHMvdGVzdF9wYXJxdWV0LnB5) | `96.09% <0%> (-0.06%)` | :arrow_down: |\n   | [python/pyarrow/\\_\\_init\\_\\_.py](https://codecov.io/gh/apache/arrow/pull/5374/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvX19pbml0X18ucHk=) | `71.25% <0%> (\u00f8)` | :arrow_up: |\n   | [python/pyarrow/includes/common.pxd](https://codecov.io/gh/apache/arrow/pull/5374/diff?src=pr&el=tree#diff-cHl0aG9uL3B5YXJyb3cvaW5jbHVkZXMvY29tbW9uLnB4ZA==) | `75% <0%> (\u00f8)` | :arrow_up: |\n   | [r/src/recordbatch.cpp](https://codecov.io/gh/apache/arrow/pull/5374/diff?src=pr&el=tree#diff-ci9zcmMvcmVjb3JkYmF0Y2guY3Bw) | | |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/5374/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | | |\n   | [r/R/list.R](https://codecov.io/gh/apache/arrow/pull/5374/diff?src=pr&el=tree#diff-ci9SL2xpc3QuUg==) | | |\n   | ... and [263 more](https://codecov.io/gh/apache/arrow/pull/5374/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/5374?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/5374?src=pr&el=footer). Last update [8c21776...f8282b6](https://codecov.io/gh/apache/arrow/pull/5374?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-13T13:38:49.722+0000",
                    "updated": "2019-09-13T13:38:49.722+0000",
                    "started": "2019-09-13T13:38:49.722+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "312044",
                    "issueId": "13253822"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253822/worklog/312051",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lihalite commented on pull request #5374: ARROW-6391: [Python][Flight] Add built-in methods on FlightServerBase to start server and wait for it to be available\nURL: https://github.com/apache/arrow/pull/5374#discussion_r324208642\n \n \n\n ##########\n File path: python/pyarrow/tests/test_flight.py\n ##########\n @@ -412,72 +425,60 @@ def get_token(self):\n         return self.token\n \n \n-@contextlib.contextmanager\n-def flight_server(server_base, *args, **kwargs):\n-    \"\"\"Spawn a Flight server on a free port, shutting it down when done.\"\"\"\n-    auth_handler = kwargs.pop('auth_handler', None)\n-    tls_certificates = kwargs.pop('tls_certificates', None)\n-    location = kwargs.pop('location', None)\n-    try_connect = kwargs.pop('try_connect', True)\n-    connect_args = kwargs.pop('connect_args', {})\n-\n-    if location is None:\n-        # Find a free port\n-        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n-        with contextlib.closing(sock) as sock:\n-            sock.bind(('', 0))\n-            sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n-            port = sock.getsockname()[1]\n-        ctor = flight.Location.for_grpc_tcp\n-        if tls_certificates:\n-            ctor = flight.Location.for_grpc_tls\n-        location = ctor(\"localhost\", port)\n-    else:\n-        port = None\n-\n-    ctor_kwargs = kwargs\n-    server_instance = server_base(*args, **ctor_kwargs)\n-    # The server instance needs to be initialized before shutdown()\n-    # can be called\n-    server_instance.init(location,\n-                         auth_handler=auth_handler,\n-                         tls_certificates=tls_certificates)\n-\n-    def _server_thread():\n-        server_instance.run()\n-\n-    thread = threading.Thread(target=_server_thread, daemon=True)\n-    thread.start()\n-\n-    # Wait for server to start\n-    if try_connect:\n-        deadline = time.time() + 5.0\n-        client = flight.FlightClient.connect(location, **connect_args)\n-        while True:\n-            try:\n-                list(client.list_flights())\n-            except Exception as e:\n-                if 'Connect Failed' in str(e):\n-                    if time.time() < deadline:\n-                        time.sleep(0.025)\n-                        continue\n-                    else:\n-                        raise\n-            break\n+def test_flight_server_instantiation():\n+    locations = [\n+        None,\n+        'grpc://localhost:0',\n+        ('localhost', _find_free_port()),\n+    ]\n+    for location in locations:\n+        server = FlightServer(location)\n+        assert isinstance(server.location, flight.Location)\n \n-    try:\n-        yield location\n-    finally:\n-        server_instance.shutdown()\n-        thread.join(3.0)\n+\n+@pytest.mark.slow\n+def test_server_shutdown_timeout():\n+    started = time.time()\n+    with SlowStoppingFlightServer():\n+        pass\n+    elapsed = time.time() - started\n+    assert elapsed >= 0.2\n+\n+    started = time.time()\n+    with pytest.raises(TimeoutError):\n+        with SlowStoppingFlightServer(shutdown_timeout=0.1):\n+            pass\n+    elapsed = time.time() - started\n+    assert 0.05 <= elapsed <= 0.2\n+\n+\n+def test_server_exit_reraises_exception():\n+    with pytest.raises(ValueError):\n+        with FlightServer():\n+            raise ValueError()\n+\n+\n+# @pytest.mark.slow\n+# def test_client_wait_for_available():\n+#     started = time.time()\n+#     with SlowStartingFlightServer() as server:\n \n Review comment:\n   When first written, there was only `run()` and it would start the server and block until shutdown. Now the two are separated, so maybe it doesn't make sense to call `run` in the background.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-09-13T14:03:33.584+0000",
                    "updated": "2019-09-13T14:03:33.584+0000",
                    "started": "2019-09-13T14:03:33.583+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "312051",
                    "issueId": "13253822"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 25200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5919ed31[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2c1e80ca[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@419582f1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@195542d9[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2df3c808[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@66a10128[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@bce8507[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@38be5d2d[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@bbe71ba[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@657899a4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1a61ceb1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@507cbfe5[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 25200,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Sep 17 15:56:24 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-09-17T15:56:24.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6391/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2019-08-30T05:09:51.000+0000",
        "updated": "2019-09-18T16:22:44.000+0000",
        "timeoriginalestimate": null,
        "description": "It seems like this logic could be a part of the library / made general purpose to make it more convenient to spawn servers in Python\r\n\r\nhttps://github.com/apache/arrow/blob/master/python/pyarrow/tests/test_flight.py#L414",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "7h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 25200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python][Flight] Add built-in methods on FlightServerBase to start server and wait for it to be available",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13253822/comment/16931593",
                    "id": "16931593",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Fixed by PR [https://github.com/apache/arrow/pull/5374]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-09-17T15:56:24.943+0000",
                    "updated": "2019-09-17T15:56:24.943+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z066dk:",
        "customfield_12314139": null
    }
}