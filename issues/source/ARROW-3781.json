{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13198151",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198151",
    "key": "ARROW-3781",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 4800,
            "total": 4800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3781/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 8,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198151/worklog/166480",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2976: ARROW-3781: [C++] Implement BufferedOutputStream::SetBufferSize. Allocate buffer from MemoryPool\nURL: https://github.com/apache/arrow/pull/2976#issuecomment-439097152\n \n \n   Mis-named my branch. I'll work on the BufferedReader (ARROW-3782) in a new branch\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-15T16:16:19.179+0000",
                    "updated": "2018-11-15T16:16:19.179+0000",
                    "started": "2018-11-15T16:16:19.178+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166480",
                    "issueId": "13198151"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198151/worklog/166482",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2976: ARROW-3781: [C++] Implement BufferedOutputStream::SetBufferSize. Allocate buffer from MemoryPool\nURL: https://github.com/apache/arrow/pull/2976#issuecomment-439099484\n \n \n   I don't think we should bother micro-optimizing `shared_ptr` parameter passing, except in critical routines. IO objects are heavy enough that paying the cost of a `shared_ptr` copy in a constructor call is unimportant.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-15T16:22:40.623+0000",
                    "updated": "2018-11-15T16:22:40.623+0000",
                    "started": "2018-11-15T16:22:40.622+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166482",
                    "issueId": "13198151"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198151/worklog/166488",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on issue #2976: ARROW-3781: [C++] Implement BufferedOutputStream::SetBufferSize. Allocate buffer from MemoryPool\nURL: https://github.com/apache/arrow/pull/2976#issuecomment-439101756\n \n \n   The benefit isn't performance so much as semantics, and I agree that for taking/retaining ownership of the ptr by value is more clear. It isn't very important for `shared_ptr` but it is necessary for `unique_ptr`, so if we're going to transition to the latter it'd be useful to become accustomed to a convention which works for both\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-15T16:29:06.934+0000",
                    "updated": "2018-11-15T16:29:06.934+0000",
                    "started": "2018-11-15T16:29:06.934+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166488",
                    "issueId": "13198151"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198151/worklog/166493",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz edited a comment on issue #2976: ARROW-3781: [C++] Implement BufferedOutputStream::SetBufferSize. Allocate buffer from MemoryPool\nURL: https://github.com/apache/arrow/pull/2976#issuecomment-439101756\n \n \n   The benefit isn't performance so much as semantics, and I agree that for taking/retaining ownership of the ptr by value is more clear. It isn't very important for `shared_ptr` but it is necessary for `unique_ptr`, so if we're going to transition to using the latter more frequently it'd be useful to become accustomed to a convention which works for both\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-15T16:34:43.723+0000",
                    "updated": "2018-11-15T16:34:43.723+0000",
                    "started": "2018-11-15T16:34:43.722+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166493",
                    "issueId": "13198151"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198151/worklog/166496",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2976: ARROW-3781: [C++] Implement BufferedOutputStream::SetBufferSize. Allocate buffer from MemoryPool\nURL: https://github.com/apache/arrow/pull/2976#issuecomment-439104564\n \n \n   @pitrou agreed that it isn't worth making a decision on the basis of performance\r\n   \r\n   @bkietz we use both unique_ptr and shared_ptr for object lifetime in the project, but anytime an object might become visible in a binding layer (e.g. Python, R, Ruby) it is usually necessary to use shared_ptr. For internal exclusive ownership of resources we try to use unique_ptr where we can\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-15T16:36:57.156+0000",
                    "updated": "2018-11-15T16:36:57.156+0000",
                    "started": "2018-11-15T16:36:57.156+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166496",
                    "issueId": "13198151"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198151/worklog/166758",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2976: ARROW-3781: [C++] Implement BufferedOutputStream::SetBufferSize. Allocate buffer from MemoryPool\nURL: https://github.com/apache/arrow/pull/2976#issuecomment-439271299\n \n \n   I'll submit a patch for ARROW-3782 (buffered input stream / random access file) in a separate patch, so this can be merged in the meantime\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-16T03:33:37.581+0000",
                    "updated": "2018-11-16T03:33:37.581+0000",
                    "started": "2018-11-16T03:33:37.580+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "166758",
                    "issueId": "13198151"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198151/worklog/167056",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2976: ARROW-3781: [C++] Implement BufferedOutputStream::SetBufferSize. Allocate buffer from MemoryPool\nURL: https://github.com/apache/arrow/pull/2976#issuecomment-439517828\n \n \n   +1\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-16T20:29:52.502+0000",
                    "updated": "2018-11-16T20:29:52.502+0000",
                    "started": "2018-11-16T20:29:52.501+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167056",
                    "issueId": "13198151"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198151/worklog/167058",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2976: ARROW-3781: [C++] Implement BufferedOutputStream::SetBufferSize. Allocate buffer from MemoryPool\nURL: https://github.com/apache/arrow/pull/2976\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/io/buffered.cc b/cpp/src/arrow/io/buffered.cc\nindex 47f7d02b68..2493080ee3 100644\n--- a/cpp/src/arrow/io/buffered.cc\n+++ b/cpp/src/arrow/io/buffered.cc\n@@ -16,8 +16,6 @@\n // under the License.\n \n #include \"arrow/io/buffered.h\"\n-#include \"arrow/status.h\"\n-#include \"arrow/util/logging.h\"\n \n #include <cstring>\n #include <memory>\n@@ -25,6 +23,10 @@\n #include <string>\n #include <utility>\n \n+#include \"arrow/buffer.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/logging.h\"\n+\n namespace arrow {\n namespace io {\n \n@@ -34,11 +36,10 @@ namespace io {\n class BufferedOutputStream::Impl {\n  public:\n   explicit Impl(std::shared_ptr<OutputStream> raw)\n-      : raw_(raw),\n+      : raw_(std::move(raw)),\n         is_open_(true),\n-        buffer_(std::string(BUFFER_SIZE, '\\0')),\n-        buffer_data_(const_cast<char*>(buffer_.data())),\n         buffer_pos_(0),\n+        buffer_size_(0),\n         raw_pos_(-1) {}\n \n   ~Impl() { DCHECK(Close().ok()); }\n@@ -77,15 +78,15 @@ class BufferedOutputStream::Impl {\n     if (nbytes == 0) {\n       return Status::OK();\n     }\n-    if (nbytes + buffer_pos_ >= BUFFER_SIZE) {\n+    if (nbytes + buffer_pos_ >= buffer_size_) {\n       RETURN_NOT_OK(FlushUnlocked());\n       DCHECK_EQ(buffer_pos_, 0);\n-      if (nbytes >= BUFFER_SIZE) {\n+      if (nbytes >= buffer_size_) {\n         // Direct write\n         return raw_->Write(data, nbytes);\n       }\n     }\n-    DCHECK_LE(buffer_pos_ + nbytes, BUFFER_SIZE);\n+    DCHECK_LE(buffer_pos_ + nbytes, buffer_size_);\n     std::memcpy(buffer_data_ + buffer_pos_, data, nbytes);\n     buffer_pos_ += nbytes;\n     return Status::OK();\n@@ -108,15 +109,34 @@ class BufferedOutputStream::Impl {\n \n   std::shared_ptr<OutputStream> raw() const { return raw_; }\n \n- private:\n-  // This size chosen so that memcpy() remains cheap\n-  static const int64_t BUFFER_SIZE = 4096;\n+  Status SetBufferSize(int64_t new_buffer_size) {\n+    std::lock_guard<std::mutex> guard(lock_);\n+    DCHECK_GT(new_buffer_size, 0);\n+    if (!buffer_) {\n+      RETURN_NOT_OK(AllocateResizableBuffer(new_buffer_size, &buffer_));\n+    } else {\n+      if (buffer_pos_ >= new_buffer_size) {\n+        // If the buffer is shrinking, first flush to the raw OutputStream\n+        RETURN_NOT_OK(FlushUnlocked());\n+      }\n+      RETURN_NOT_OK(buffer_->Resize(new_buffer_size));\n+    }\n+    buffer_data_ = reinterpret_cast<char*>(buffer_->mutable_data());\n+    buffer_pos_ = 0;\n+    buffer_size_ = new_buffer_size;\n+    return Status::OK();\n+  }\n+\n+  int64_t buffer_size() const { return buffer_size_; }\n \n+ private:\n   std::shared_ptr<OutputStream> raw_;\n   bool is_open_;\n-  std::string buffer_;\n+\n+  std::shared_ptr<ResizableBuffer> buffer_;\n   char* buffer_data_;\n   int64_t buffer_pos_;\n+  int64_t buffer_size_;\n   mutable int64_t raw_pos_;\n   mutable std::mutex lock_;\n };\n@@ -124,8 +144,24 @@ class BufferedOutputStream::Impl {\n BufferedOutputStream::BufferedOutputStream(std::shared_ptr<OutputStream> raw)\n     : impl_(new BufferedOutputStream::Impl(std::move(raw))) {}\n \n+Status BufferedOutputStream::Create(std::shared_ptr<OutputStream> raw,\n+                                    int64_t buffer_size,\n+                                    std::shared_ptr<BufferedOutputStream>* out) {\n+  auto result =\n+      std::shared_ptr<BufferedOutputStream>(new BufferedOutputStream(std::move(raw)));\n+  RETURN_NOT_OK(result->SetBufferSize(buffer_size));\n+  *out = std::move(result);\n+  return Status::OK();\n+}\n+\n BufferedOutputStream::~BufferedOutputStream() {}\n \n+Status BufferedOutputStream::SetBufferSize(int64_t new_buffer_size) {\n+  return impl_->SetBufferSize(new_buffer_size);\n+}\n+\n+int64_t BufferedOutputStream::buffer_size() const { return impl_->buffer_size(); }\n+\n Status BufferedOutputStream::Close() { return impl_->Close(); }\n \n bool BufferedOutputStream::closed() const { return impl_->closed(); }\ndiff --git a/cpp/src/arrow/io/buffered.h b/cpp/src/arrow/io/buffered.h\nindex 19aab89a65..e028607f48 100644\n--- a/cpp/src/arrow/io/buffered.h\n+++ b/cpp/src/arrow/io/buffered.h\n@@ -37,7 +37,21 @@ class ARROW_EXPORT BufferedOutputStream : public OutputStream {\n   ~BufferedOutputStream() override;\n \n   /// \\brief Create a buffered output stream wrapping the given output stream.\n-  explicit BufferedOutputStream(std::shared_ptr<OutputStream> raw);\n+  /// \\param[in] raw another OutputStream\n+  /// \\param[in] buffer_size the size of the temporary buffer. Allocates from\n+  /// the default memory pool\n+  /// \\param[out] out the created BufferedOutputStream\n+  /// \\return Status\n+  static Status Create(std::shared_ptr<OutputStream> raw, int64_t buffer_size,\n+                       std::shared_ptr<BufferedOutputStream>* out);\n+\n+  /// \\brief Resize internal buffer\n+  /// \\param[in] new_buffer_size the new buffer size\n+  /// \\return Status\n+  Status SetBufferSize(int64_t new_buffer_size);\n+\n+  /// \\brief Return the current size of the internal buffer\n+  int64_t buffer_size() const;\n \n   // OutputStream interface\n \n@@ -56,6 +70,8 @@ class ARROW_EXPORT BufferedOutputStream : public OutputStream {\n   std::shared_ptr<OutputStream> raw() const;\n \n  private:\n+  explicit BufferedOutputStream(std::shared_ptr<OutputStream> raw);\n+\n   class ARROW_NO_EXPORT Impl;\n   std::unique_ptr<Impl> impl_;\n };\ndiff --git a/cpp/src/arrow/io/io-buffered-test.cc b/cpp/src/arrow/io/io-buffered-test.cc\nindex 40d1b1c6d2..8146d1a728 100644\n--- a/cpp/src/arrow/io/io-buffered-test.cc\n+++ b/cpp/src/arrow/io/io-buffered-test.cc\n@@ -76,9 +76,11 @@ class FileTestFixture : public ::testing::Test {\n // ----------------------------------------------------------------------\n // File output tests\n \n+constexpr int64_t kDefaultBufferSize = 4096;\n+\n class TestBufferedOutputStream : public FileTestFixture {\n  public:\n-  void OpenBuffered(bool append = false) {\n+  void OpenBuffered(int64_t buffer_size = kDefaultBufferSize, bool append = false) {\n     stream_.reset();\n     std::shared_ptr<FileOutputStream> file;\n     ASSERT_OK(FileOutputStream::Open(path_, append, &file));\n@@ -91,7 +93,7 @@ class TestBufferedOutputStream : public FileTestFixture {\n       lseek(fd_, 0, SEEK_END);\n #endif\n     }\n-    stream_ = std::make_shared<BufferedOutputStream>(std::move(file));\n+    ASSERT_OK(BufferedOutputStream::Create(file, buffer_size, &stream_));\n   }\n \n   void WriteChunkwise(const std::string& datastr, const std::valarray<int64_t>& sizes) {\n@@ -123,7 +125,7 @@ class TestBufferedOutputStream : public FileTestFixture {\n \n  protected:\n   int fd_;\n-  std::shared_ptr<OutputStream> stream_;\n+  std::shared_ptr<BufferedOutputStream> stream_;\n };\n \n TEST_F(TestBufferedOutputStream, DestructorClosesFile) {\n@@ -217,6 +219,28 @@ TEST_F(TestBufferedOutputStream, Flush) {\n   ASSERT_OK(stream_->Close());\n }\n \n+TEST_F(TestBufferedOutputStream, SetBufferSize) {\n+  OpenBuffered(20);\n+\n+  ASSERT_EQ(20, stream_->buffer_size());\n+\n+  const std::string datastr = \"1234568790abcdefghij\";\n+  const char* data = datastr.data();\n+\n+  // Write part of the data, then shrink buffer size to make sure it gets\n+  // flushed\n+  ASSERT_OK(stream_->Write(data, 10));\n+  ASSERT_OK(stream_->SetBufferSize(10));\n+\n+  ASSERT_EQ(10, stream_->buffer_size());\n+\n+  ASSERT_OK(stream_->Write(data + 10, 10));\n+  ASSERT_OK(stream_->Flush());\n+\n+  AssertFileContents(path_, datastr);\n+  ASSERT_OK(stream_->Close());\n+}\n+\n TEST_F(TestBufferedOutputStream, Tell) {\n   OpenBuffered();\n \n@@ -229,7 +253,7 @@ TEST_F(TestBufferedOutputStream, Tell) {\n \n   ASSERT_OK(stream_->Close());\n \n-  OpenBuffered(true /* append */);\n+  OpenBuffered(kDefaultBufferSize, true /* append */);\n   AssertTell(100100);\n   WriteChunkwise(std::string(90, 'x'), {1, 1, 2, 3, 5, 8});\n   AssertTell(100190);\ndiff --git a/cpp/src/arrow/io/io-file-benchmark.cc b/cpp/src/arrow/io/io-file-benchmark.cc\nindex e5a326e277..c57fa6d605 100644\n--- a/cpp/src/arrow/io/io-file-benchmark.cc\n+++ b/cpp/src/arrow/io/io-file-benchmark.cc\n@@ -41,6 +41,8 @@ std::string GetNullFile() { return \"/dev/null\"; }\n const std::valarray<int64_t> small_sizes = {8, 24, 33, 1, 32, 192, 16, 40};\n const std::valarray<int64_t> large_sizes = {8192, 100000};\n \n+constexpr int64_t kBufferSize = 4096;\n+\n class BackgroundReader {\n   // A class that reads data in the background from a file descriptor\n \n@@ -157,11 +159,12 @@ static void BM_FileOutputStreamSmallWritesToNull(\n \n static void BM_BufferedOutputStreamSmallWritesToNull(\n     benchmark::State& state) {  // NOLINT non-const reference\n-  std::shared_ptr<io::OutputStream> stream;\n-  ABORT_NOT_OK(io::FileOutputStream::Open(GetNullFile(), &stream));\n-  stream = std::make_shared<io::BufferedOutputStream>(std::move(stream));\n+  std::shared_ptr<io::OutputStream> file;\n+  ABORT_NOT_OK(io::FileOutputStream::Open(GetNullFile(), &file));\n \n-  BenchmarkStreamingWrites(state, small_sizes, stream.get());\n+  std::shared_ptr<io::BufferedOutputStream> buffered_file;\n+  ABORT_NOT_OK(io::BufferedOutputStream::Create(file, kBufferSize, &buffered_file));\n+  BenchmarkStreamingWrites(state, small_sizes, buffered_file.get());\n }\n \n // Benchmark writing a pipe\n@@ -191,9 +194,10 @@ static void BM_BufferedOutputStreamSmallWritesToPipe(\n   std::shared_ptr<io::OutputStream> stream;\n   std::shared_ptr<BackgroundReader> reader;\n   SetupPipeWriter(&stream, &reader);\n-  stream = std::make_shared<io::BufferedOutputStream>(std::move(stream));\n \n-  BenchmarkStreamingWrites(state, small_sizes, stream.get(), reader.get());\n+  std::shared_ptr<io::BufferedOutputStream> buffered_stream;\n+  ABORT_NOT_OK(io::BufferedOutputStream::Create(stream, kBufferSize, &buffered_stream));\n+  BenchmarkStreamingWrites(state, small_sizes, buffered_stream.get(), reader.get());\n }\n \n static void BM_BufferedOutputStreamLargeWritesToPipe(\n@@ -201,9 +205,11 @@ static void BM_BufferedOutputStreamLargeWritesToPipe(\n   std::shared_ptr<io::OutputStream> stream;\n   std::shared_ptr<BackgroundReader> reader;\n   SetupPipeWriter(&stream, &reader);\n-  stream = std::make_shared<io::BufferedOutputStream>(std::move(stream));\n \n-  BenchmarkStreamingWrites(state, large_sizes, stream.get(), reader.get());\n+  std::shared_ptr<io::BufferedOutputStream> buffered_stream;\n+  ABORT_NOT_OK(io::BufferedOutputStream::Create(stream, kBufferSize, &buffered_stream));\n+\n+  BenchmarkStreamingWrites(state, large_sizes, buffered_stream.get(), reader.get());\n }\n \n // We use real time as we don't want to count CPU time spent in the\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-16T20:30:46.059+0000",
                    "updated": "2018-11-16T20:30:46.059+0000",
                    "started": "2018-11-16T20:30:46.058+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "167058",
                    "issueId": "13198151"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 4800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@85c5f79[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1c095889[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1717ebe4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@418c249f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1888b7c5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@335c1729[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1b3c826d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3b34e549[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@66df4b75[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3569edd8[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4a393ef2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@56bb9451[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 4800,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Nov 16 20:30:49 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-11-16T20:30:49.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3781/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-11-13T20:44:46.000+0000",
        "updated": "2018-11-16T20:30:49.000+0000",
        "timeoriginalestimate": null,
        "description": "This is hard-coded to 4096 right now. For higher latency file systems it may be desirable to use a larger buffer. See also ARROW-3777 about performance testing for high latency files",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 4800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Configure buffer size in arrow::io::BufferedOutputStream",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198151/comment/16685727",
                    "id": "16685727",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "I don't think it's dependent on filesystem latency. Unless the filesystem implementation is broken, writing should be asynchronous (i.e. the `Write` call returns before the OS actually flushed the buffer to disk or to the network). The point of the buffer is to avoid paying the cost of a system call (and userspace/kernel transition) for every tiny write.\r\n\r\nBut we can make the buffer size configurable regardless.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-11-13T20:48:33.424+0000",
                    "updated": "2018-11-13T20:48:33.424+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198151/comment/16685779",
                    "id": "16685779",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I'm thinking about the \"file systems\" HDFS, AWS S3, Google Cloud Storage, and Azure Blob Storage, all of which can be pretty high latency for writes",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-13T21:50:49.114+0000",
                    "updated": "2018-11-13T21:50:49.114+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198151/comment/16685784",
                    "id": "16685784",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "For cloud stores, at some point we might want to consider asynchronous flushing also, to mitigate latency when a flush triggers (so the writer thread can begin to buffer the next chunk)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-13T21:52:40.178+0000",
                    "updated": "2018-11-13T21:52:40.178+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198151/comment/16685791",
                    "id": "16685791",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Are you thinking about the `Flush` method? It's as asynchronous as `Write` is.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-11-13T21:59:41.697+0000",
                    "updated": "2018-11-13T21:59:41.697+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198151/comment/16685809",
                    "id": "16685809",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Sorry, I'm using file systems here again proverbially. TensorFlow and other projects call their integrations with other file storage systems \"file systems\", e.g.\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/platform/s3/s3_file_system.h#L25\r\n\r\nI am not sure a Write or Flush into S3 is necessarily going to be asynchronous. The implementation in TensorFlow of Flush blocks until the PutRequest is completed\r\n\r\nhttps://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/platform/s3/s3_file_system.cc#L238",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-13T22:04:56.253+0000",
                    "updated": "2018-11-13T22:04:56.253+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198151/comment/16685812",
                    "id": "16685812",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "What I mean is that if I call {{out->Flush()}} it may not be safe to continue to call {{out->Write(...)}} until the flush completes. So my proposal was to think about devising a buffered output stream where a writer thread can continue writing while a Flush is in progress. The current {{BufferedOutputStream}} holds a mutex while Flush so further writes are not possible",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-13T22:06:41.334+0000",
                    "updated": "2018-11-13T22:07:31.839+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198151/comment/16685817",
                    "id": "16685817",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "We may want to think about flushing in a separate thread, then.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-11-13T22:09:10.137+0000",
                    "updated": "2018-11-13T22:09:10.137+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198151/comment/16685945",
                    "id": "16685945",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "It would definitely require some design work. In https://github.com/apache/arrow/blob/master/cpp/src/arrow/io/buffered.cc#L104, you would need to use a buffer pool of some kind so that if Flush is holding a temporary buffer, that Write can write to a new buffer. In any case, it's out of scope for this issue. Once we have file system implementations for one or more cloud services we can use benchmarks to drive the development. In the meantime, a mock remote file system with configurable write latency could help with throughput tests",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-14T00:47:25.033+0000",
                    "updated": "2018-11-14T00:47:25.033+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13198151/comment/16689970",
                    "id": "16689970",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2976\n[https://github.com/apache/arrow/pull/2976]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-11-16T20:30:49.584+0000",
                    "updated": "2018-11-16T20:30:49.584+0000"
                }
            ],
            "maxResults": 9,
            "total": 9,
            "startAt": 0
        },
        "customfield_12311820": "0|s00g9c:",
        "customfield_12314139": null
    }
}