{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13311540",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311540",
    "key": "ARROW-9140",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12591299",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12591299",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13283990",
                    "key": "ARROW-7798",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13283990",
                    "fields": {
                        "summary": "[R] Refactor R <-> Array conversion",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=romainfrancois",
            "name": "romainfrancois",
            "key": "romainfrancois",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=romainfrancois&avatarId=35092",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=romainfrancois&avatarId=35092",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=romainfrancois&avatarId=35092",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=romainfrancois&avatarId=35092"
            },
            "displayName": "Romain Francois",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 16800,
            "total": 16800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 16800,
            "total": 16800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9140/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 28,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311540/worklog/605989",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois opened a new pull request #10445:\nURL: https://github.com/apache/arrow/pull/10445\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-03T15:10:25.333+0000",
                    "updated": "2021-06-03T15:10:25.333+0000",
                    "started": "2021-06-03T15:10:25.333+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "605989",
                    "issueId": "13311540"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311540/worklog/606505",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois opened a new pull request #10445:\nURL: https://github.com/apache/arrow/pull/10445\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-04T07:51:45.188+0000",
                    "updated": "2021-06-04T07:51:45.188+0000",
                    "started": "2021-06-04T07:51:45.188+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "606505",
                    "issueId": "13311540"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311540/worklog/608337",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10445:\nURL: https://github.com/apache/arrow/pull/10445#issuecomment-856555691\n\n\n   https://issues.apache.org/jira/browse/ARROW-9140\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-08T08:08:48.730+0000",
                    "updated": "2021-06-08T08:08:48.730+0000",
                    "started": "2021-06-08T08:08:48.730+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "608337",
                    "issueId": "13311540"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311540/worklog/608383",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #10445:\nURL: https://github.com/apache/arrow/pull/10445#issuecomment-856654860\n\n\n   An interesting side benefit from this is that we don't get altrep R vectors from slices: \r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   #> See arrow_info() for available features\r\n   \r\n   x <- 1:1e3+ 1L\r\n   v <- Array$create(x)\r\n   x1 <- v$as_vector()  \r\n   .Internal(inspect(x1))\r\n   #> @7face1b4ba18 13 INTSXP g0c0 [REF(65535)] std::shared_ptr<arrow::Array, int32, NONULL> (len=1000, ptr=0x7facdc27e998)\r\n   \r\n   x2 <- v$Slice(500)$as_vector()\r\n   .Internal(inspect(x2))\r\n   #> @7facde2bfd80 13 INTSXP g0c0 [REF(65535)] std::shared_ptr<arrow::Array, int32, NONULL> (len=500, ptr=0x7facdb0a2198)\r\n   ```\r\n   \r\n   <sup>Created on 2021-06-08 by the [reprex package](https://reprex.tidyverse.org) (v2.0.0)</sup>\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-08T10:39:29.283+0000",
                    "updated": "2021-06-08T10:39:29.283+0000",
                    "started": "2021-06-08T10:39:29.283+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "608383",
                    "issueId": "13311540"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311540/worklog/608397",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #10445:\nURL: https://github.com/apache/arrow/pull/10445#issuecomment-856674081\n\n\n   @nealrichardson I've turned off making INT64 arrays with no nulls into altrep bit64::integer64 vectors (i.e. reusing the payload of the array as the data of the underlying double array in R ...) because of the auto downcasting to int vectors when it fits: \r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   \r\n   i64 <- Array$create(bit64::as.integer64(1:10))\r\n   .Internal(inspect(as.vector(i64)))\r\n   #> @7ff0b2099c38 13 INTSXP g0c4 [REF(2)] (len=10, tl=0) 1,2,3,4,5,...\r\n   ```\r\n   \r\n   <sup>Created on 2021-06-08 by the [reprex package](https://reprex.tidyverse.org) (v2.0.0)</sup>\r\n   \r\n   I can altogether remove the int64 altrep code if needed ... ?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-08T11:14:38.917+0000",
                    "updated": "2021-06-08T11:14:38.917+0000",
                    "started": "2021-06-08T11:14:38.917+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "608397",
                    "issueId": "13311540"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311540/worklog/608505",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #10445:\nURL: https://github.com/apache/arrow/pull/10445#issuecomment-856853833\n\n\n   This is super cool. We should get some benchmarking on this. \r\n   \r\n   Tangentially related, should we have an `options(arrow.altrep)` or something to govern whether to use ALTREP? I know `vroom` has a function argument to enable or disable it (though I don't know why exactly). Might be useful to have in case there are unforeseen issues, or if nothing else it would make it easy for people to test side-by-side the performance.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-08T15:08:01.450+0000",
                    "updated": "2021-06-08T15:08:01.450+0000",
                    "started": "2021-06-08T15:08:01.449+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "608505",
                    "issueId": "13311540"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311540/worklog/608545",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #10445:\nURL: https://github.com/apache/arrow/pull/10445#issuecomment-856892875\n\n\n   Interesting, we could make that opt-in. For now it's all happening here so would be easy enough to make conditional: \r\n   \r\n   ```cpp\r\n   // [[arrow::export]]\r\n   SEXP Array__as_vector(const std::shared_ptr<arrow::Array>& array) {\r\n     auto type = array->type();\r\n   \r\n   #if defined(HAS_ALTREP)\r\n     if (array->null_count() == 0) {\r\n       switch (type->id()) {\r\n         case arrow::Type::DOUBLE:\r\n           return arrow::r::Make_array_nonull_dbl_vector(array);\r\n         case arrow::Type::INT32:\r\n           return arrow::r::Make_array_nonull_int_vector(array);\r\n           // case arrow::Type::INT64:\r\n           //   return arrow::r::Make_array_nonull_int64_vector(array);\r\n   \r\n         default:\r\n           break;\r\n       }\r\n     }\r\n   #endif\r\n   \r\n     return arrow::r::ArrayVector__as_vector(array->length(), type, {array});\r\n   }\r\n   ```\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-08T15:56:25.865+0000",
                    "updated": "2021-06-08T15:56:25.865+0000",
                    "started": "2021-06-08T15:56:25.864+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "608545",
                    "issueId": "13311540"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311540/worklog/608614",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #10445:\nURL: https://github.com/apache/arrow/pull/10445#issuecomment-856934564\n\n\n   Cool, so that would just be `if(GetBoolOption(\"arrow.altrep\", true) && array->null_count() == 0)`\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-08T16:55:51.122+0000",
                    "updated": "2021-06-08T16:55:51.122+0000",
                    "started": "2021-06-08T16:55:51.122+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "608614",
                    "issueId": "13311540"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311540/worklog/609085",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #10445:\nURL: https://github.com/apache/arrow/pull/10445#issuecomment-857603402\n\n\n   I've used `arrow.use_altrep` but I can use `arrow.altrep` all the same. \r\n   \r\n   I've put `GetBoolOption(\"arrow.altrep\", true)` after the `array->null_count() == 0` because it's cheaper to call `null_count()`. \r\n   \r\n   `GetBoolOption(\"arrow.altrep\", true)` means that this is opt-out, I'm fine with this but it might be risky. \r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-09T11:07:32.506+0000",
                    "updated": "2021-06-09T11:07:32.506+0000",
                    "started": "2021-06-09T11:07:32.506+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "609085",
                    "issueId": "13311540"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311540/worklog/609393",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #10445:\nURL: https://github.com/apache/arrow/pull/10445#issuecomment-858109294\n\n\n   > I've used `arrow.use_altrep` but I can use `arrow.altrep` all the same.\r\n   \r\n   SGTM\r\n   \r\n   > \r\n   > I've put `GetBoolOption(\"arrow.altrep\", true)` after the `array->null_count() == 0` because it's cheaper to call `null_count()`.\r\n   \r\n   That surprises me, I'd expect that checking an R boolean would be faster than counting nulls in a (potentially long) array.\r\n   \r\n   > \r\n   > `GetBoolOption(\"arrow.altrep\", true)` means that this is opt-out, I'm fine with this but it might be risky.\r\n   \r\n   I think defaulting to ALTREP on is good (particularly if/when we quantify its benefits) but leaving an escape hatch in case of error is nice.\r\n   \r\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-09T21:18:47.325+0000",
                    "updated": "2021-06-09T21:18:47.325+0000",
                    "started": "2021-06-09T21:18:47.324+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "609393",
                    "issueId": "13311540"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311540/worklog/609552",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10445:\nURL: https://github.com/apache/arrow/pull/10445#discussion_r648947602\n\n\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -0,0 +1,180 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cpp11/altrep.hpp>\n+\n+#include \"./arrow_types.h\"\n+\n+#if defined(HAS_ALTREP)\n+\n+#include <R_ext/Altrep.h>\n+#include <arrow/array.h>\n+\n+namespace arrow {\n+namespace r {\n+\n+struct array_nonull {\n+  // altrep object around an Array with no nulls\n+  // data1: an external pointer to a shared pointer to the Array\n+  // data2: not used\n+\n+  static SEXP Make(R_altrep_class_t class_t, const std::shared_ptr<Array>& array) {\n+    // we don't need the whole r6 object, just an external pointer\n+    // that retain the array\n+    cpp11::external_pointer<std::shared_ptr<Array>> xp(new std::shared_ptr<Array>(array));\n+\n+    SEXP res = R_new_altrep(class_t, xp, R_NilValue);\n+    MARK_NOT_MUTABLE(res);\n+\n+    return res;\n+  }\n+\n+  static Rboolean Inspect(SEXP x, int pre, int deep, int pvec,\n+                          void (*inspect_subtree)(SEXP, int, int, int)) {\n+    auto& array = Get(x);\n+    Rprintf(\"std::shared_ptr<arrow::Array, %s, NONULL> (len=%d, ptr=%p)\\n\",\n+            array->type()->ToString().c_str(), array->length(), array.get());\n+    return TRUE;\n+  }\n+\n+  static std::shared_ptr<Array>& Get(SEXP vec) {\n+    return *cpp11::external_pointer<std::shared_ptr<Array>>(R_altrep_data1(vec));\n+  }\n+\n+  static R_xlen_t Length(SEXP vec) { return Get(vec)->length(); }\n+\n+  static const void* Dataptr_or_null(SEXP vec) {\n+    auto& array = Get(vec);\n+\n+    int size = array->type_id() == Type::INT32 ? sizeof(int) : sizeof(double);\n+    return reinterpret_cast<const void*>(array->data()->buffers[1]->data() +\n+                                         size * array->offset());\n\nReview comment:\n       Or `array->data()->GetValues<c_type>(1)` where `using c_type = typename ArrowType::c_type`.\r\n   (`ArrowType` being the class template parameter, e.g. `Int64Type` or `DoubleType`)\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -0,0 +1,180 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cpp11/altrep.hpp>\n+\n+#include \"./arrow_types.h\"\n+\n+#if defined(HAS_ALTREP)\n+\n+#include <R_ext/Altrep.h>\n+#include <arrow/array.h>\n+\n+namespace arrow {\n+namespace r {\n+\n+struct array_nonull {\n+  // altrep object around an Array with no nulls\n+  // data1: an external pointer to a shared pointer to the Array\n+  // data2: not used\n+\n+  static SEXP Make(R_altrep_class_t class_t, const std::shared_ptr<Array>& array) {\n+    // we don't need the whole r6 object, just an external pointer\n+    // that retain the array\n+    cpp11::external_pointer<std::shared_ptr<Array>> xp(new std::shared_ptr<Array>(array));\n+\n+    SEXP res = R_new_altrep(class_t, xp, R_NilValue);\n+    MARK_NOT_MUTABLE(res);\n+\n+    return res;\n+  }\n+\n+  static Rboolean Inspect(SEXP x, int pre, int deep, int pvec,\n+                          void (*inspect_subtree)(SEXP, int, int, int)) {\n+    auto& array = Get(x);\n+    Rprintf(\"std::shared_ptr<arrow::Array, %s, NONULL> (len=%d, ptr=%p)\\n\",\n+            array->type()->ToString().c_str(), array->length(), array.get());\n+    return TRUE;\n+  }\n+\n+  static std::shared_ptr<Array>& Get(SEXP vec) {\n+    return *cpp11::external_pointer<std::shared_ptr<Array>>(R_altrep_data1(vec));\n+  }\n+\n+  static R_xlen_t Length(SEXP vec) { return Get(vec)->length(); }\n+\n+  static const void* Dataptr_or_null(SEXP vec) {\n+    auto& array = Get(vec);\n+\n+    int size = array->type_id() == Type::INT32 ? sizeof(int) : sizeof(double);\n\nReview comment:\n       Is it possible to make this a template class instead of manually switching on the type at runtime?\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -0,0 +1,180 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cpp11/altrep.hpp>\n+\n+#include \"./arrow_types.h\"\n+\n+#if defined(HAS_ALTREP)\n+\n+#include <R_ext/Altrep.h>\n+#include <arrow/array.h>\n+\n+namespace arrow {\n+namespace r {\n+\n+struct array_nonull {\n+  // altrep object around an Array with no nulls\n+  // data1: an external pointer to a shared pointer to the Array\n+  // data2: not used\n+\n+  static SEXP Make(R_altrep_class_t class_t, const std::shared_ptr<Array>& array) {\n+    // we don't need the whole r6 object, just an external pointer\n+    // that retain the array\n+    cpp11::external_pointer<std::shared_ptr<Array>> xp(new std::shared_ptr<Array>(array));\n+\n+    SEXP res = R_new_altrep(class_t, xp, R_NilValue);\n+    MARK_NOT_MUTABLE(res);\n+\n+    return res;\n+  }\n+\n+  static Rboolean Inspect(SEXP x, int pre, int deep, int pvec,\n+                          void (*inspect_subtree)(SEXP, int, int, int)) {\n+    auto& array = Get(x);\n+    Rprintf(\"std::shared_ptr<arrow::Array, %s, NONULL> (len=%d, ptr=%p)\\n\",\n+            array->type()->ToString().c_str(), array->length(), array.get());\n+    return TRUE;\n+  }\n+\n+  static std::shared_ptr<Array>& Get(SEXP vec) {\n\nReview comment:\n       Return a const reference?\n\n##########\nFile path: r/src/array_to_vector.cpp\n##########\n@@ -1275,7 +1276,22 @@ cpp11::writable::list to_dataframe_parallel(\n \n // [[arrow::export]]\n SEXP Array__as_vector(const std::shared_ptr<arrow::Array>& array) {\n-  return arrow::r::ArrayVector__as_vector(array->length(), array->type(), {array});\n+  auto type = array->type();\n+\n+#if defined(HAS_ALTREP)\n+  if (array->null_count() == 0 && arrow::r::GetBoolOption(\"arrow.use_altrep\", true)) {\n+    switch (type->id()) {\n+      case arrow::Type::DOUBLE:\n+        return arrow::r::Make_array_nonull_dbl_vector(array);\n+      case arrow::Type::INT32:\n+        return arrow::r::Make_array_nonull_int_vector(array);\n+      default:\n\nReview comment:\n       Is there a plan to support other types here?\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -0,0 +1,180 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cpp11/altrep.hpp>\n+\n+#include \"./arrow_types.h\"\n+\n+#if defined(HAS_ALTREP)\n+\n+#include <R_ext/Altrep.h>\n+#include <arrow/array.h>\n+\n+namespace arrow {\n+namespace r {\n+\n+struct array_nonull {\n+  // altrep object around an Array with no nulls\n+  // data1: an external pointer to a shared pointer to the Array\n+  // data2: not used\n+\n+  static SEXP Make(R_altrep_class_t class_t, const std::shared_ptr<Array>& array) {\n+    // we don't need the whole r6 object, just an external pointer\n+    // that retain the array\n+    cpp11::external_pointer<std::shared_ptr<Array>> xp(new std::shared_ptr<Array>(array));\n+\n+    SEXP res = R_new_altrep(class_t, xp, R_NilValue);\n+    MARK_NOT_MUTABLE(res);\n+\n+    return res;\n+  }\n+\n+  static Rboolean Inspect(SEXP x, int pre, int deep, int pvec,\n+                          void (*inspect_subtree)(SEXP, int, int, int)) {\n+    auto& array = Get(x);\n+    Rprintf(\"std::shared_ptr<arrow::Array, %s, NONULL> (len=%d, ptr=%p)\\n\",\n+            array->type()->ToString().c_str(), array->length(), array.get());\n+    return TRUE;\n+  }\n+\n+  static std::shared_ptr<Array>& Get(SEXP vec) {\n+    return *cpp11::external_pointer<std::shared_ptr<Array>>(R_altrep_data1(vec));\n+  }\n+\n+  static R_xlen_t Length(SEXP vec) { return Get(vec)->length(); }\n+\n+  static const void* Dataptr_or_null(SEXP vec) {\n+    auto& array = Get(vec);\n+\n+    int size = array->type_id() == Type::INT32 ? sizeof(int) : sizeof(double);\n+    return reinterpret_cast<const void*>(array->data()->buffers[1]->data() +\n+                                         size * array->offset());\n+  }\n+\n+  static SEXP Duplicate(SEXP vec, Rboolean) {\n+    auto& array = Get(vec);\n+    auto size = array->length();\n+\n+    bool int_array = array->type_id() == Type::INT32;\n+\n+    SEXP copy = PROTECT(Rf_allocVector(int_array ? INTSXP : REALSXP, array->length()));\n+\n+    memcpy(DATAPTR(copy), Dataptr_or_null(vec),\n+           int_array ? (size * sizeof(int)) : (size * sizeof(double)));\n+\n+    UNPROTECT(1);\n+    return copy;\n+  }\n+\n+  static void* Dataptr(SEXP vec, Rboolean writeable) {\n+    return const_cast<void*>(Dataptr_or_null(vec));\n+  }\n+\n+  // by definition, there are no NA\n+  static int No_NA(SEXP vec) { return 1; }\n+\n+  static void Init(R_altrep_class_t class_t, DllInfo* dll) {\n+    // altrep\n+    R_set_altrep_Length_method(class_t, array_nonull::Length);\n+    R_set_altrep_Inspect_method(class_t, array_nonull::Inspect);\n+    R_set_altrep_Duplicate_method(class_t, array_nonull::Duplicate);\n+\n+    // altvec\n+    R_set_altvec_Dataptr_method(class_t, array_nonull::Dataptr);\n+    R_set_altvec_Dataptr_or_null_method(class_t, array_nonull::Dataptr_or_null);\n+  }\n+};\n+\n+struct array_nonull_dbl_vector {\n+  static R_altrep_class_t class_t;\n+\n+  static void Init(DllInfo* dll) {\n+    class_t = R_make_altreal_class(\"array_nonull_dbl_vector\", \"arrow\", dll);\n+    array_nonull::Init(class_t, dll);\n+    R_set_altreal_No_NA_method(class_t, array_nonull::No_NA);\n+  }\n+};\n+\n+struct array_nonull_int_vector {\n+  static R_altrep_class_t class_t;\n+\n+  static void Init(DllInfo* dll) {\n+    class_t = R_make_altinteger_class(\"array_nonull_int_vector\", \"arrow\", dll);\n+    array_nonull::Init(class_t, dll);\n+    R_set_altinteger_No_NA_method(class_t, array_nonull::No_NA);\n+  }\n+};\n+\n+R_altrep_class_t array_nonull_int_vector::class_t;\n+R_altrep_class_t array_nonull_dbl_vector::class_t;\n+\n+void Init_Altrep_classes(DllInfo* dll) {\n+  array_nonull_dbl_vector::Init(dll);\n+  array_nonull_int_vector::Init(dll);\n+}\n+\n+SEXP Make_array_nonull_dbl_vector(const std::shared_ptr<Array>& array) {\n+  return array_nonull::Make(array_nonull_dbl_vector::class_t, array);\n+}\n+\n+SEXP Make_array_nonull_int_vector(const std::shared_ptr<Array>& array) {\n+  return array_nonull::Make(array_nonull_int_vector::class_t, array);\n+}\n+\n+}  // namespace r\n+}  // namespace arrow\n+\n+// TODO: when arrow depends on R 3.5 we can eliminate this\n\nReview comment:\n       What does this mean? Does Arrow still support R versions before 3.5? @nealrichardson \n\n##########\nFile path: r/tests/testthat/test-altrep.R\n##########\n@@ -0,0 +1,52 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+context(\"altrep\")\n+\n+skip_if(getRversion() <= \"3.5.0\")\n+\n+test_that(\"altrep vectors from int32 arrays with no nulls\", {\n+  withr::local_options(list(arrow.use_altrep = TRUE))\n+  v <- Array$create(1:1000)\n+  expect_true(is_altrep_int_nonull(as.vector(v)))\n+  expect_true(is_altrep_int_nonull(as.vector(v$Slice(1))))\n+\n+  withr::local_options(list(arrow.use_altrep = NULL))\n+  v <- Array$create(1:1000)\n\nReview comment:\n       Can you also test with an empty array?\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -0,0 +1,180 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cpp11/altrep.hpp>\n+\n+#include \"./arrow_types.h\"\n+\n+#if defined(HAS_ALTREP)\n+\n+#include <R_ext/Altrep.h>\n+#include <arrow/array.h>\n+\n+namespace arrow {\n+namespace r {\n+\n+struct array_nonull {\n+  // altrep object around an Array with no nulls\n+  // data1: an external pointer to a shared pointer to the Array\n+  // data2: not used\n+\n+  static SEXP Make(R_altrep_class_t class_t, const std::shared_ptr<Array>& array) {\n+    // we don't need the whole r6 object, just an external pointer\n+    // that retain the array\n+    cpp11::external_pointer<std::shared_ptr<Array>> xp(new std::shared_ptr<Array>(array));\n+\n+    SEXP res = R_new_altrep(class_t, xp, R_NilValue);\n+    MARK_NOT_MUTABLE(res);\n+\n+    return res;\n+  }\n+\n+  static Rboolean Inspect(SEXP x, int pre, int deep, int pvec,\n+                          void (*inspect_subtree)(SEXP, int, int, int)) {\n+    auto& array = Get(x);\n+    Rprintf(\"std::shared_ptr<arrow::Array, %s, NONULL> (len=%d, ptr=%p)\\n\",\n+            array->type()->ToString().c_str(), array->length(), array.get());\n+    return TRUE;\n+  }\n+\n+  static std::shared_ptr<Array>& Get(SEXP vec) {\n+    return *cpp11::external_pointer<std::shared_ptr<Array>>(R_altrep_data1(vec));\n+  }\n+\n+  static R_xlen_t Length(SEXP vec) { return Get(vec)->length(); }\n+\n+  static const void* Dataptr_or_null(SEXP vec) {\n+    auto& array = Get(vec);\n\nReview comment:\n       Nit, but should use `const auto&` when mutation is not intended.\n\n##########\nFile path: r/tests/testthat/test-altrep.R\n##########\n@@ -0,0 +1,52 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+context(\"altrep\")\n+\n+skip_if(getRversion() <= \"3.5.0\")\n+\n+test_that(\"altrep vectors from int32 arrays with no nulls\", {\n+  withr::local_options(list(arrow.use_altrep = TRUE))\n+  v <- Array$create(1:1000)\n+  expect_true(is_altrep_int_nonull(as.vector(v)))\n+  expect_true(is_altrep_int_nonull(as.vector(v$Slice(1))))\n+\n+  withr::local_options(list(arrow.use_altrep = NULL))\n+  v <- Array$create(1:1000)\n+  expect_true(is_altrep_int_nonull(as.vector(v)))\n+  expect_true(is_altrep_int_nonull(as.vector(v$Slice(1))))\n+\n+  withr::local_options(list(arrow.use_altrep = FALSE))\n+  expect_false(is_altrep_int_nonull(as.vector(v)))\n+  expect_false(is_altrep_int_nonull(as.vector(v$Slice(1))))\n+})\n+\n+test_that(\"altrep vectors from double arrays with no nulls\", {\n\nReview comment:\n       Can you add tests for when there are nulls?\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -0,0 +1,180 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cpp11/altrep.hpp>\n+\n+#include \"./arrow_types.h\"\n+\n+#if defined(HAS_ALTREP)\n+\n+#include <R_ext/Altrep.h>\n+#include <arrow/array.h>\n+\n+namespace arrow {\n+namespace r {\n+\n+struct array_nonull {\n\nReview comment:\n       Is there a reason for the `lower_case` naming style? Note our C++ style guide asks for `CamelCase` function and class names.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-10T08:09:32.443+0000",
                    "updated": "2021-06-10T08:09:32.443+0000",
                    "started": "2021-06-10T08:09:32.443+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "609552",
                    "issueId": "13311540"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311540/worklog/609901",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jonkeane commented on pull request #10445:\nURL: https://github.com/apache/arrow/pull/10445#issuecomment-858983224\n\n\n   Ok, I've run some benchmarks on this branch and I'm seeing a huge speed up for floats + integers with `as.vector(array)`. \ud83c\udf89 \r\n   \r\n   It might be out of scope for this PR, but chunked arrays don't see a similar speed up (which makes sense given they call `ArrayVector__as_vector` directly rather than routing through `Array__as_vector`, so they aren't being using alt rep). I can't quite tell from the cpp if `Table__to_dataframe` would _just work_ with alt rep as well if it worked with ChunkedArrays or if we would need to more to facilitate that.\r\n   \r\n   \r\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   \r\n   x <- 1:1e3+ 1L\r\n   v <- Array$create(x)\r\n   x1 <- v$as_vector()  \r\n   .Internal(inspect(x1))\r\n   #> @7f9077f5a1a8 13 INTSXP g0c0 [REF(65535)] std::shared_ptr<arrow::Array, int32, NONULL> (len=1000, ptr=0x7f90975a9a08)\r\n   \r\n   \r\n   v_chunked <- ChunkedArray$create(x)\r\n   x2 <- v_chunked$as_vector()  \r\n   .Internal(inspect(x2))\r\n   #> @7f908312c000 13 INTSXP g0c7 [REF(2)] (len=1000, tl=0) 2,3,4,5,6,...\r\n   ```\r\n   \r\n   <sup>Created on 2021-06-10 by the [reprex package](https://reprex.tidyverse.org) (v2.0.0)</sup>\r\n   \r\n   arrowbench results (using the new benchmarks in https://github.com/ursacomputing/arrowbench/pull/28): \r\n   [zero-copy-data-conversion.html.zip](https://github.com/apache/arrow/files/6633992/zero-copy-data-conversion.html.zip)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-10T19:48:19.615+0000",
                    "updated": "2021-06-10T19:48:19.615+0000",
                    "started": "2021-06-10T19:48:19.615+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "609901",
                    "issueId": "13311540"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311540/worklog/609902",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on a change in pull request #10445:\nURL: https://github.com/apache/arrow/pull/10445#discussion_r649483759\n\n\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -0,0 +1,180 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cpp11/altrep.hpp>\n+\n+#include \"./arrow_types.h\"\n+\n+#if defined(HAS_ALTREP)\n+\n+#include <R_ext/Altrep.h>\n+#include <arrow/array.h>\n+\n+namespace arrow {\n+namespace r {\n+\n+struct array_nonull {\n+  // altrep object around an Array with no nulls\n+  // data1: an external pointer to a shared pointer to the Array\n+  // data2: not used\n+\n+  static SEXP Make(R_altrep_class_t class_t, const std::shared_ptr<Array>& array) {\n+    // we don't need the whole r6 object, just an external pointer\n+    // that retain the array\n+    cpp11::external_pointer<std::shared_ptr<Array>> xp(new std::shared_ptr<Array>(array));\n+\n+    SEXP res = R_new_altrep(class_t, xp, R_NilValue);\n+    MARK_NOT_MUTABLE(res);\n+\n+    return res;\n+  }\n+\n+  static Rboolean Inspect(SEXP x, int pre, int deep, int pvec,\n+                          void (*inspect_subtree)(SEXP, int, int, int)) {\n+    auto& array = Get(x);\n+    Rprintf(\"std::shared_ptr<arrow::Array, %s, NONULL> (len=%d, ptr=%p)\\n\",\n+            array->type()->ToString().c_str(), array->length(), array.get());\n+    return TRUE;\n+  }\n+\n+  static std::shared_ptr<Array>& Get(SEXP vec) {\n+    return *cpp11::external_pointer<std::shared_ptr<Array>>(R_altrep_data1(vec));\n+  }\n+\n+  static R_xlen_t Length(SEXP vec) { return Get(vec)->length(); }\n+\n+  static const void* Dataptr_or_null(SEXP vec) {\n+    auto& array = Get(vec);\n+\n+    int size = array->type_id() == Type::INT32 ? sizeof(int) : sizeof(double);\n+    return reinterpret_cast<const void*>(array->data()->buffers[1]->data() +\n+                                         size * array->offset());\n+  }\n+\n+  static SEXP Duplicate(SEXP vec, Rboolean) {\n+    auto& array = Get(vec);\n+    auto size = array->length();\n+\n+    bool int_array = array->type_id() == Type::INT32;\n+\n+    SEXP copy = PROTECT(Rf_allocVector(int_array ? INTSXP : REALSXP, array->length()));\n+\n+    memcpy(DATAPTR(copy), Dataptr_or_null(vec),\n+           int_array ? (size * sizeof(int)) : (size * sizeof(double)));\n+\n+    UNPROTECT(1);\n+    return copy;\n+  }\n+\n+  static void* Dataptr(SEXP vec, Rboolean writeable) {\n+    return const_cast<void*>(Dataptr_or_null(vec));\n+  }\n+\n+  // by definition, there are no NA\n+  static int No_NA(SEXP vec) { return 1; }\n+\n+  static void Init(R_altrep_class_t class_t, DllInfo* dll) {\n+    // altrep\n+    R_set_altrep_Length_method(class_t, array_nonull::Length);\n+    R_set_altrep_Inspect_method(class_t, array_nonull::Inspect);\n+    R_set_altrep_Duplicate_method(class_t, array_nonull::Duplicate);\n+\n+    // altvec\n+    R_set_altvec_Dataptr_method(class_t, array_nonull::Dataptr);\n+    R_set_altvec_Dataptr_or_null_method(class_t, array_nonull::Dataptr_or_null);\n+  }\n+};\n+\n+struct array_nonull_dbl_vector {\n+  static R_altrep_class_t class_t;\n+\n+  static void Init(DllInfo* dll) {\n+    class_t = R_make_altreal_class(\"array_nonull_dbl_vector\", \"arrow\", dll);\n+    array_nonull::Init(class_t, dll);\n+    R_set_altreal_No_NA_method(class_t, array_nonull::No_NA);\n+  }\n+};\n+\n+struct array_nonull_int_vector {\n+  static R_altrep_class_t class_t;\n+\n+  static void Init(DllInfo* dll) {\n+    class_t = R_make_altinteger_class(\"array_nonull_int_vector\", \"arrow\", dll);\n+    array_nonull::Init(class_t, dll);\n+    R_set_altinteger_No_NA_method(class_t, array_nonull::No_NA);\n+  }\n+};\n+\n+R_altrep_class_t array_nonull_int_vector::class_t;\n+R_altrep_class_t array_nonull_dbl_vector::class_t;\n+\n+void Init_Altrep_classes(DllInfo* dll) {\n+  array_nonull_dbl_vector::Init(dll);\n+  array_nonull_int_vector::Init(dll);\n+}\n+\n+SEXP Make_array_nonull_dbl_vector(const std::shared_ptr<Array>& array) {\n+  return array_nonull::Make(array_nonull_dbl_vector::class_t, array);\n+}\n+\n+SEXP Make_array_nonull_int_vector(const std::shared_ptr<Array>& array) {\n+  return array_nonull::Make(array_nonull_int_vector::class_t, array);\n+}\n+\n+}  // namespace r\n+}  // namespace arrow\n+\n+// TODO: when arrow depends on R 3.5 we can eliminate this\n\nReview comment:\n       We currently support (and test, via crossbow) R versions back to 3.3. (To be clear, this is unrelated to CRAN requirements, compilers, etc., purely about the R APIs.)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-10T19:52:43.690+0000",
                    "updated": "2021-06-10T19:52:43.690+0000",
                    "started": "2021-06-10T19:52:43.690+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "609902",
                    "issueId": "13311540"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311540/worklog/611877",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10445:\nURL: https://github.com/apache/arrow/pull/10445#discussion_r654608083\n\n\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cpp11/altrep.hpp>\n+\n+#include \"./arrow_types.h\"\n+\n+#if defined(HAS_ALTREP)\n+\n+#include <R_ext/Altrep.h>\n+#include <arrow/array.h>\n+\n+namespace arrow {\n+namespace r {\n+\n+template <int sexp_type>\n+struct ArrayNoNull {\n+  using data_type = typename std::conditional<sexp_type == INTSXP, int, double>::type;\n+\n+  // altrep object around an Array with no nulls\n+  // data1: an external pointer to a shared pointer to the Array\n+  // data2: not used\n+\n+  static SEXP Make(R_altrep_class_t class_t, const std::shared_ptr<Array>& array) {\n+    // we don't need the whole r6 object, just an external pointer\n+    // that retain the array\n+    cpp11::external_pointer<std::shared_ptr<Array>> xp(new std::shared_ptr<Array>(array));\n+\n+    SEXP res = R_new_altrep(class_t, xp, R_NilValue);\n+    MARK_NOT_MUTABLE(res);\n+\n+    return res;\n+  }\n+\n+  static Rboolean Inspect(SEXP x, int pre, int deep, int pvec,\n+                          void (*inspect_subtree)(SEXP, int, int, int)) {\n+    const auto& array = Get(x);\n+    Rprintf(\"std::shared_ptr<arrow::Array, %s, NONULL> (len=%d, ptr=%p)\\n\",\n+            array->type()->ToString().c_str(), array->length(), array.get());\n+    return TRUE;\n+  }\n+\n+  static const std::shared_ptr<Array>& Get(SEXP vec) {\n+    return *cpp11::external_pointer<std::shared_ptr<Array>>(R_altrep_data1(vec));\n+  }\n+\n+  static R_xlen_t Length(SEXP vec) { return Get(vec)->length(); }\n+\n+  static const void* Dataptr_or_null(SEXP vec) {\n+    return Get(vec)->data()->template GetValues<data_type>(1);\n+  }\n+\n+  static SEXP Duplicate(SEXP vec, Rboolean) {\n+    const auto& array = Get(vec);\n+    auto size = array->length();\n+\n+    SEXP copy = PROTECT(Rf_allocVector(sexp_type, array->length()));\n+\n+    memcpy(DATAPTR(copy), Dataptr_or_null(vec), size * sizeof(data_type));\n+\n+    UNPROTECT(1);\n+    return copy;\n+  }\n+\n+  static void* Dataptr(SEXP vec, Rboolean writeable) {\n+    return const_cast<void*>(Dataptr_or_null(vec));\n+  }\n+\n+  // by definition, there are no NA\n+  static int No_NA(SEXP vec) { return 1; }\n+\n+  static void Init(R_altrep_class_t class_t, DllInfo* dll) {\n+    // altrep\n+    R_set_altrep_Length_method(class_t, ArrayNoNull::Length);\n+    R_set_altrep_Inspect_method(class_t, ArrayNoNull::Inspect);\n+    R_set_altrep_Duplicate_method(class_t, ArrayNoNull::Duplicate);\n+\n+    // altvec\n+    R_set_altvec_Dataptr_method(class_t, ArrayNoNull::Dataptr);\n+    R_set_altvec_Dataptr_or_null_method(class_t, ArrayNoNull::Dataptr_or_null);\n+  }\n+};\n+\n+struct DoubleArrayNoNull {\n+  static R_altrep_class_t class_t;\n+\n+  static void Init(DllInfo* dll) {\n+    class_t = R_make_altreal_class(\"array_nonull_dbl_vector\", \"arrow\", dll);\n+    ArrayNoNull<REALSXP>::Init(class_t, dll);\n+    R_set_altreal_No_NA_method(class_t, ArrayNoNull<REALSXP>::No_NA);\n+  }\n+\n+  static SEXP Make(const std::shared_ptr<Array>& array) {\n+    return ArrayNoNull<REALSXP>::Make(class_t, array);\n+  }\n+};\n+\n+struct Int32ArrayNoNull {\n+  static R_altrep_class_t class_t;\n+\n+  static void Init(DllInfo* dll) {\n+    class_t = R_make_altinteger_class(\"array_nonull_int_vector\", \"arrow\", dll);\n+    ArrayNoNull<INTSXP>::Init(class_t, dll);\n+    R_set_altinteger_No_NA_method(class_t, ArrayNoNull<INTSXP>::No_NA);\n+  }\n+\n+  static SEXP Make(const std::shared_ptr<Array>& array) {\n+    return ArrayNoNull<INTSXP>::Make(class_t, array);\n+  }\n+};\n+\n+R_altrep_class_t Int32ArrayNoNull::class_t;\n+R_altrep_class_t DoubleArrayNoNull::class_t;\n+\n+void Init_Altrep_classes(DllInfo* dll) {\n+  DoubleArrayNoNull::Init(dll);\n+  Int32ArrayNoNull::Init(dll);\n+}\n+\n+SEXP MakeDoubleArrayNoNull(const std::shared_ptr<Array>& array) {\n+  return DoubleArrayNoNull::Make(array);\n+}\n+\n+SEXP MakeInt32ArrayNoNull(const std::shared_ptr<Array>& array) {\n+  return Int32ArrayNoNull::Make(array);\n\nReview comment:\n       Edge case worthy of mention in a comment somewhere: IIUC this doesn't check for instances of `NA_integer_` in `array` and these will be considered null by R even though `is_altrep_int_nonull(as.vector(array))` (and we report `no_NA = 1`)\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cpp11/altrep.hpp>\n+\n+#include \"./arrow_types.h\"\n+\n+#if defined(HAS_ALTREP)\n+\n+#include <R_ext/Altrep.h>\n+#include <arrow/array.h>\n+\n+namespace arrow {\n+namespace r {\n+\n+template <int sexp_type>\n+struct ArrayNoNull {\n+  using data_type = typename std::conditional<sexp_type == INTSXP, int, double>::type;\n+\n+  // altrep object around an Array with no nulls\n+  // data1: an external pointer to a shared pointer to the Array\n+  // data2: not used\n+\n+  static SEXP Make(R_altrep_class_t class_t, const std::shared_ptr<Array>& array) {\n+    // we don't need the whole r6 object, just an external pointer\n+    // that retain the array\n+    cpp11::external_pointer<std::shared_ptr<Array>> xp(new std::shared_ptr<Array>(array));\n+\n+    SEXP res = R_new_altrep(class_t, xp, R_NilValue);\n+    MARK_NOT_MUTABLE(res);\n+\n+    return res;\n+  }\n+\n+  static Rboolean Inspect(SEXP x, int pre, int deep, int pvec,\n+                          void (*inspect_subtree)(SEXP, int, int, int)) {\n+    const auto& array = Get(x);\n+    Rprintf(\"std::shared_ptr<arrow::Array, %s, NONULL> (len=%d, ptr=%p)\\n\",\n+            array->type()->ToString().c_str(), array->length(), array.get());\n\nReview comment:\n       would it be useful to include the external pointer in this?\n\n##########\nFile path: r/src/array_to_vector.cpp\n##########\n@@ -144,6 +144,24 @@ Status IngestSome(const std::shared_ptr<arrow::Array>& array, R_xlen_t n,\n // Allocate + Ingest\n SEXP ArrayVector__as_vector(R_xlen_t n, const std::shared_ptr<DataType>& type,\n                             const ArrayVector& arrays) {\n+  // special case when there is only one array\n+#if defined(HAS_ALTREP)\n\nReview comment:\n       Nit:\r\n   ```suggestion\r\n   #if defined(HAS_ALTREP)\r\n     // special case when there is only one array\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-18T20:52:08.594+0000",
                    "updated": "2021-06-18T20:52:08.594+0000",
                    "started": "2021-06-18T20:52:08.593+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611877",
                    "issueId": "13311540"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311540/worklog/612004",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #10445:\nURL: https://github.com/apache/arrow/pull/10445#issuecomment-864213320\n\n\n   > I'm not sure why we get this: https://github.com/apache/arrow/pull/10445/checks?check_run_id=2858594249#step:8:2641\r\n   \r\n   Looks like linking the arrow binding failed. There's a [cpp11 symbol](https://github.com/r-lib/cpp11/blob/e2c1768a71a25e05629d9d862008b11fc23375e5/inst/include/cpp11/external_pointer.hpp#L15-L19) missing\r\n   https://github.com/apache/arrow/pull/10445/checks?check_run_id=2858594151#step:9:5579\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-18T21:08:23.851+0000",
                    "updated": "2021-06-18T21:08:23.851+0000",
                    "started": "2021-06-18T21:08:23.851+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612004",
                    "issueId": "13311540"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311540/worklog/612132",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois edited a comment on pull request #10445:\nURL: https://github.com/apache/arrow/pull/10445#issuecomment-863903044\n\n\n   ``` r\r\n   library(arrow, warn.conflicts = FALSE)\r\n   #> See arrow_info() for available features\r\n   \r\n   c_int <- ChunkedArray$create(1:1000)\r\n   c_dbl <- ChunkedArray$create(as.numeric(1:1000))\r\n   c_int$num_chunks\r\n   #> [1] 1\r\n   c_dbl$num_chunks\r\n   #> [1] 1\r\n   .Internal(inspect(as.vector(c_int)))\r\n   #> @7fc1314ce2a8 13 INTSXP g0c0 [REF(65535)] std::shared_ptr<arrow::Array, int32, NONULL> (len=1000, ptr=0x7fc1274a0408)\r\n   .Internal(inspect(as.vector(c_dbl)))\r\n   #> @7fc131528a90 14 REALSXP g0c0 [REF(65535)] std::shared_ptr<arrow::Array, double, NONULL> (len=1000, ptr=0x7fc12b2b5178)\r\n   ```\r\n   \r\n   <sup>Created on 2021-06-18 by the [reprex package](https://reprex.tidyverse.org) (v2.0.0.9000)</sup>\r\n   \r\n   I think I'll deal with this https://issues.apache.org/jira/browse/ARROW-13114 here as well, and then do a follow up for using RTasks (i.e. https://issues.apache.org/jira/browse/ARROW-13113). \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-18T21:23:58.735+0000",
                    "updated": "2021-06-18T21:23:58.735+0000",
                    "started": "2021-06-18T21:23:58.735+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612132",
                    "issueId": "13311540"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311540/worklog/612152",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on pull request #10445:\nURL: https://github.com/apache/arrow/pull/10445#issuecomment-863903044\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-18T21:26:43.772+0000",
                    "updated": "2021-06-18T21:26:43.772+0000",
                    "started": "2021-06-18T21:26:43.772+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612152",
                    "issueId": "13311540"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311540/worklog/612231",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz edited a comment on pull request #10445:\nURL: https://github.com/apache/arrow/pull/10445#issuecomment-864213320\n\n\n   > I'm not sure why we get this: https://github.com/apache/arrow/pull/10445/checks?check_run_id=2858594249#step:8:2641\r\n   \r\n   Looks like linking the arrow binding failed. There's a [cpp11 symbol](https://github.com/r-lib/cpp11/blob/e2c1768a71a25e05629d9d862008b11fc23375e5/inst/include/cpp11/external_pointer.hpp#L15-L19) missing\r\n   https://github.com/apache/arrow/pull/10445/checks?check_run_id=2858594151#step:9:5579\r\n   \r\n   ... which is odd because it's a template, so it ought to be inlined everywhere\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-19T00:20:35.132+0000",
                    "updated": "2021-06-19T00:20:35.132+0000",
                    "started": "2021-06-19T00:20:35.132+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612231",
                    "issueId": "13311540"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311540/worklog/612477",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on a change in pull request #10445:\nURL: https://github.com/apache/arrow/pull/10445#discussion_r655145649\n\n\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cpp11/altrep.hpp>\n+\n+#include \"./arrow_types.h\"\n+\n+#if defined(HAS_ALTREP)\n+\n+#include <R_ext/Altrep.h>\n+#include <arrow/array.h>\n+\n+namespace arrow {\n+namespace r {\n+\n+template <int sexp_type>\n+struct ArrayNoNull {\n+  using data_type = typename std::conditional<sexp_type == INTSXP, int, double>::type;\n+\n+  // altrep object around an Array with no nulls\n+  // data1: an external pointer to a shared pointer to the Array\n+  // data2: not used\n+\n+  static SEXP Make(R_altrep_class_t class_t, const std::shared_ptr<Array>& array) {\n+    // we don't need the whole r6 object, just an external pointer\n+    // that retain the array\n+    cpp11::external_pointer<std::shared_ptr<Array>> xp(new std::shared_ptr<Array>(array));\n+\n+    SEXP res = R_new_altrep(class_t, xp, R_NilValue);\n+    MARK_NOT_MUTABLE(res);\n+\n+    return res;\n+  }\n+\n+  static Rboolean Inspect(SEXP x, int pre, int deep, int pvec,\n+                          void (*inspect_subtree)(SEXP, int, int, int)) {\n+    const auto& array = Get(x);\n+    Rprintf(\"std::shared_ptr<arrow::Array, %s, NONULL> (len=%d, ptr=%p)\\n\",\n+            array->type()->ToString().c_str(), array->length(), array.get());\n\nReview comment:\n       ```r\r\n   > .Internal(inspect(as.vector(Array$create(1:10))))\r\n   @7fc930ddbbc8 13 INTSXP g0c0 [REF(65535)] arrow::Array<int32, NONULL> len=10, Array=<0x7fc92b27ad98>, xp=<0x7fc930ddbc38>)\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-21T07:42:12.310+0000",
                    "updated": "2021-06-21T07:42:12.310+0000",
                    "started": "2021-06-21T07:42:12.310+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612477",
                    "issueId": "13311540"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311540/worklog/612481",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "romainfrancois commented on a change in pull request #10445:\nURL: https://github.com/apache/arrow/pull/10445#discussion_r655148264\n\n\n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cpp11/altrep.hpp>\n+\n+#include \"./arrow_types.h\"\n+\n+#if defined(HAS_ALTREP)\n+\n+#include <R_ext/Altrep.h>\n+#include <arrow/array.h>\n+\n+namespace arrow {\n+namespace r {\n+\n+template <int sexp_type>\n+struct ArrayNoNull {\n+  using data_type = typename std::conditional<sexp_type == INTSXP, int, double>::type;\n+\n+  // altrep object around an Array with no nulls\n+  // data1: an external pointer to a shared pointer to the Array\n+  // data2: not used\n+\n+  static SEXP Make(R_altrep_class_t class_t, const std::shared_ptr<Array>& array) {\n+    // we don't need the whole r6 object, just an external pointer\n+    // that retain the array\n+    cpp11::external_pointer<std::shared_ptr<Array>> xp(new std::shared_ptr<Array>(array));\n+\n+    SEXP res = R_new_altrep(class_t, xp, R_NilValue);\n+    MARK_NOT_MUTABLE(res);\n+\n+    return res;\n+  }\n+\n+  static Rboolean Inspect(SEXP x, int pre, int deep, int pvec,\n+                          void (*inspect_subtree)(SEXP, int, int, int)) {\n+    const auto& array = Get(x);\n+    Rprintf(\"std::shared_ptr<arrow::Array, %s, NONULL> (len=%d, ptr=%p)\\n\",\n+            array->type()->ToString().c_str(), array->length(), array.get());\n\nReview comment:\n       Alternatively, we could call the `inspect_subtree()` function on the xp, and then get something like this: \r\n   \r\n   ```\r\n   > .Internal(inspect(as.vector(Array$create(1:10))))\r\n   @7feaa7212e38 13 INTSXP g0c0 [REF(65535)] arrow::Array<int32, NONULL> len=10, Array=<0x7fea9ed38948>, xp=<0x7feaa7212ea8>)\r\n     @7feaa7212ea8 22 EXTPTRSXP g0c0 [REF(4)] \r\n   ``` \n\n##########\nFile path: r/src/altrep.cpp\n##########\n@@ -0,0 +1,163 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cpp11/altrep.hpp>\n+\n+#include \"./arrow_types.h\"\n+\n+#if defined(HAS_ALTREP)\n+\n+#include <R_ext/Altrep.h>\n+#include <arrow/array.h>\n+\n+namespace arrow {\n+namespace r {\n+\n+template <int sexp_type>\n+struct ArrayNoNull {\n+  using data_type = typename std::conditional<sexp_type == INTSXP, int, double>::type;\n+\n+  // altrep object around an Array with no nulls\n+  // data1: an external pointer to a shared pointer to the Array\n+  // data2: not used\n+\n+  static SEXP Make(R_altrep_class_t class_t, const std::shared_ptr<Array>& array) {\n+    // we don't need the whole r6 object, just an external pointer\n+    // that retain the array\n+    cpp11::external_pointer<std::shared_ptr<Array>> xp(new std::shared_ptr<Array>(array));\n+\n+    SEXP res = R_new_altrep(class_t, xp, R_NilValue);\n+    MARK_NOT_MUTABLE(res);\n+\n+    return res;\n+  }\n+\n+  static Rboolean Inspect(SEXP x, int pre, int deep, int pvec,\n+                          void (*inspect_subtree)(SEXP, int, int, int)) {\n+    const auto& array = Get(x);\n+    Rprintf(\"std::shared_ptr<arrow::Array, %s, NONULL> (len=%d, ptr=%p)\\n\",\n+            array->type()->ToString().c_str(), array->length(), array.get());\n\nReview comment:\n       ```\r\n   > .Internal(inspect(as.vector(Array$create(1:10))))\r\n   @7fc930ddbbc8 13 INTSXP g0c0 [REF(65535)] arrow::Array<int32, NONULL> len=10, Array=<0x7fc92b27ad98>, xp=<0x7fc930ddbc38>)\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-21T07:46:34.092+0000",
                    "updated": "2021-06-21T07:46:34.092+0000",
                    "started": "2021-06-21T07:46:34.091+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "612481",
                    "issueId": "13311540"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 16800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@18f61841[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1ab331c0[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1a67f676[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@19d9f9cb[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@17df4fc9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7b6b914e[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5e9a0c13[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@8dbb1aa[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6597167f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@42510a62[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4c257caf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@19a6c260[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 16800,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jun 23 15:12:49 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-06-23T15:12:48.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9140/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-06-15T18:33:25.000+0000",
        "updated": "2021-06-23T15:13:08.000+0000",
        "timeoriginalestimate": null,
        "description": "In a few cases, such as {{int32}} and {{float64}}, where there are no nulls (or nulls allowed, if ARROW-8348/ARROW-3263 happen), we should be able to ingest data from Arrow to R with zero copy. But from my reading of the source, we always allocate memory, and even in the simple cases, we always [transform|https://github.com/apache/arrow/blob/efb707a5438380dcef78418668b57c3f60592a23/r/src/array_to_vector.cpp#L130] the data.\r\n\r\ncc [~romainfrancois] [~fsaintjacques]",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 16800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Zero-copy Arrow to R where possible",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311540/comment/17136114",
                    "id": "17136114",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "That's already mentioned in ARROW-7798, maybe we can slice it in sub-tasks to limit the scope.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-06-15T19:21:20.077+0000",
                    "updated": "2020-06-15T19:21:20.077+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13311540/comment/17368266",
                    "id": "17368266",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 10445\n[https://github.com/apache/arrow/pull/10445]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-06-23T15:12:49.012+0000",
                    "updated": "2021-06-23T15:12:49.012+0000"
                }
            ],
            "maxResults": 2,
            "total": 2,
            "startAt": 0
        },
        "customfield_12311820": "0|z0fv8w:",
        "customfield_12314139": null
    }
}