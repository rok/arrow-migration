{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13237172",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237172",
    "key": "ARROW-5486",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12344925",
                "id": "12344925",
                "description": "",
                "name": "0.14.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-07-04"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mrkn",
            "name": "mrkn",
            "key": "mrkn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Kenta Murata",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332430",
                "id": "12332430",
                "name": "GLib"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mrkn",
            "name": "mrkn",
            "key": "mrkn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Kenta Murata",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=mrkn",
            "name": "mrkn",
            "key": "mrkn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Kenta Murata",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 18000,
            "total": 18000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5486/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 38,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237172/worklog/252961",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on pull request #4424: ARROW-5486: WIP: [GLib] Add binding of gandiva::FunctionRegistry and related things\nURL: https://github.com/apache/arrow/pull/4424#discussion_r289724220\n \n \n\n ##########\n File path: c_glib/gandiva-glib/native-function.h\n ##########\n @@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#pragma once\n+\n+#include <arrow-glib/arrow-glib.h>\n+\n+#include <gandiva-glib/function-signature.h>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * GGandivaResultNullableType:\n+ * @GGANDIVA_RESULT_NULL_IF_NULL: This means the result validity is an intersection of\n+ *   the validity of the children.\n+ * @GGANDIVA_RESULT_NULL_NEVER: This means that the result is always valid.\n+ * @GGANDIVA_RESULT_NULL_INTERNAL: This means that the result validity depends on some\n+ *   internal logic.\n+ *\n+ * They are corresponding to `gandiva::ResultNullableType` values.\n+ */\n+typedef enum {\n+  GGANDIVA_RESULT_NULL_IF_NULL,\n+  GGANDIVA_RESULT_NULL_NEVER,\n+  GGANDIVA_RESULT_NULL_INTERNAL\n+} GGandivaResultNullableType;\n \n Review comment:\n   I made it https://issues.apache.org/jira/browse/ARROW-5486\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-03T07:55:03.186+0000",
                    "updated": "2019-06-03T07:55:03.186+0000",
                    "started": "2019-06-03T07:55:03.185+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "252961",
                    "issueId": "13237172"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237172/worklog/253017",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on issue #4424: ARROW-5486: WIP: [GLib] Add binding of gandiva::FunctionRegistry and related things\nURL: https://github.com/apache/arrow/pull/4424#issuecomment-498189315\n \n \n   @kou I've finished this pull-request. Please have a look again?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-03T09:47:38.222+0000",
                    "updated": "2019-06-03T09:47:38.222+0000",
                    "started": "2019-06-03T09:47:38.221+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "253017",
                    "issueId": "13237172"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237172/worklog/254448",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #4424: ARROW-5486: [GLib] Add binding of gandiva::FunctionRegistry and related things\nURL: https://github.com/apache/arrow/pull/4424#discussion_r290785134\n \n \n\n ##########\n File path: c_glib/gandiva-glib/function-signature.cpp\n ##########\n @@ -0,0 +1,208 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/basic-data-type.hpp>\n+\n+#include <gandiva-glib/function-signature.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: function-signature\n+ * @short_description: FunctionSignature class\n+ * @title: FunctionSignature class\n+ * @include: gandiva-glib/gandiva-glib.h\n+ *\n+ * Since: 0.14.0\n+ */\n+\n+typedef struct GGandivaFunctionSignaturePrivate_ {\n+  const gandiva::FunctionSignature *function_signature;\n+} GGandivaFunctionSignaturePrivate;\n+\n+enum {\n+  PROP_FUNCTION_SIGNATURE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaFunctionSignature,\n+                           ggandiva_function_signature,\n+                           G_TYPE_OBJECT)\n+\n+#define GGANDIVA_FUNCTION_SIGNATURE_GET_PRIVATE(obj)      \\\n+    static_cast<GGandivaFunctionSignaturePrivate *>(      \\\n+        ggandiva_function_signature_get_instance_private( \\\n+          GGANDIVA_FUNCTION_SIGNATURE(obj)))\n+\n+static void\n+ggandiva_function_signature_set_property(GObject *object,\n+                                         guint prop_id,\n+                                         const GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_FUNCTION_SIGNATURE_GET_PRIVATE(object);\n+  switch (prop_id) {\n+  case PROP_FUNCTION_SIGNATURE:\n+    priv->function_signature =\n+      static_cast<const gandiva::FunctionSignature *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_function_signature_init(GGandivaFunctionSignature *object)\n+{\n+}\n+\n+static void\n+ggandiva_function_signature_class_init(GGandivaFunctionSignatureClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_function_signature_set_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_pointer(\"function_signature\",\n \n Review comment:\n   Could you use `function-signature` instead of `function_signature`? Because our other canonical name of the property use `-`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-05T16:06:55.596+0000",
                    "updated": "2019-06-05T16:06:55.596+0000",
                    "started": "2019-06-05T16:06:55.595+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "254448",
                    "issueId": "13237172"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237172/worklog/254449",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #4424: ARROW-5486: [GLib] Add binding of gandiva::FunctionRegistry and related things\nURL: https://github.com/apache/arrow/pull/4424#discussion_r290785172\n \n \n\n ##########\n File path: c_glib/gandiva-glib/function-signature.cpp\n ##########\n @@ -0,0 +1,208 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/basic-data-type.hpp>\n+\n+#include <gandiva-glib/function-signature.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: function-signature\n+ * @short_description: FunctionSignature class\n+ * @title: FunctionSignature class\n+ * @include: gandiva-glib/gandiva-glib.h\n+ *\n+ * Since: 0.14.0\n+ */\n+\n+typedef struct GGandivaFunctionSignaturePrivate_ {\n+  const gandiva::FunctionSignature *function_signature;\n+} GGandivaFunctionSignaturePrivate;\n+\n+enum {\n+  PROP_FUNCTION_SIGNATURE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaFunctionSignature,\n+                           ggandiva_function_signature,\n+                           G_TYPE_OBJECT)\n+\n+#define GGANDIVA_FUNCTION_SIGNATURE_GET_PRIVATE(obj)      \\\n+    static_cast<GGandivaFunctionSignaturePrivate *>(      \\\n+        ggandiva_function_signature_get_instance_private( \\\n+          GGANDIVA_FUNCTION_SIGNATURE(obj)))\n+\n+static void\n+ggandiva_function_signature_set_property(GObject *object,\n+                                         guint prop_id,\n+                                         const GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_FUNCTION_SIGNATURE_GET_PRIVATE(object);\n+  switch (prop_id) {\n+  case PROP_FUNCTION_SIGNATURE:\n+    priv->function_signature =\n+      static_cast<const gandiva::FunctionSignature *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_function_signature_init(GGandivaFunctionSignature *object)\n+{\n+}\n+\n+static void\n+ggandiva_function_signature_class_init(GGandivaFunctionSignatureClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_function_signature_set_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_pointer(\"function_signature\",\n+                              \"FunctionSignature\",\n+                              \"The raw gandiva::FunctionSignature *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_FUNCTION_SIGNATURE, spec);\n+}\n+\n+/**\n+ * ggandiva_function_signature_equal:\n+ * @function_signature: A #GGandivaFunctionSignature.\n+ * @other_function_signature: A #GGandivaFunctionSignature to be compared.\n+ *\n+ * Returns: %TRUE if both of them have the same data, %FALSE otherwise.\n+ *\n+ * Since: 0.14.0\n+ */\n+gboolean\n+ggandiva_function_signature_equal(GGandivaFunctionSignature *function_signature,\n+                                  GGandivaFunctionSignature *other_function_signature)\n+{\n+  auto gandiva_function_signature =\n+    ggandiva_function_signature_get_raw(function_signature);\n+  auto other_gandiva_function_signature =\n+    ggandiva_function_signature_get_raw(other_function_signature);\n+\n+  return (*gandiva_function_signature) == (*other_gandiva_function_signature);\n+}\n+\n+/**\n+ * ggandiva_function_signature_to_string:\n+ * @function_signature: A #GGandivaFunctionSignature\n+ *\n+ * Returns: (transfer full): The string representation of the function signature.\n \n Review comment:\n   Could you add the following comment?\r\n   \r\n   ```cpp\r\n     * Returns: (transfer full): The string representation of the function signature.\r\n     *\r\n   + *   It should be freed with g_free() when no longer needed.\r\n   + *\r\n     * Since: 0.14.0\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-05T16:06:56.563+0000",
                    "updated": "2019-06-05T16:06:56.563+0000",
                    "started": "2019-06-05T16:06:56.562+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "254449",
                    "issueId": "13237172"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237172/worklog/254450",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #4424: ARROW-5486: [GLib] Add binding of gandiva::FunctionRegistry and related things\nURL: https://github.com/apache/arrow/pull/4424#discussion_r290785058\n \n \n\n ##########\n File path: c_glib/gandiva-glib/function-registry.cpp\n ##########\n @@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <gandiva/function_registry.h>\n+#include <gandiva-glib/function-registry.h>\n+\n+#include <gandiva-glib/native-function.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: function-registry\n+ * @short_description: FunctionRegistry class\n+ * @title: FunctionRegistry class\n+ * @include: gandiva-glib/gandiva-glib.h\n+ *\n+ * Since: 0.14.0\n+ */\n+\n+G_DEFINE_TYPE(GGandivaFunctionRegistry,\n+              ggandiva_function_registry,\n+              G_TYPE_OBJECT);\n+\n+static void\n+ggandiva_function_registry_init(GGandivaFunctionRegistry *object)\n+{\n+}\n+\n+static void\n+ggandiva_function_registry_class_init(GGandivaFunctionRegistryClass *klass)\n+{\n+}\n+\n+/**\n+ * ggandiva_function_registry_new:\n+ *\n+ * Returns: A newly created #GGandivaFunctionRegistry.\n+ *\n+ * Since: 0.14.0\n+ */\n+GGandivaFunctionRegistry *\n+ggandiva_function_registry_new(void)\n+{\n+  return GGANDIVA_FUNCTION_REGISTRY(g_object_new(GGANDIVA_TYPE_FUNCTION_REGISTRY, NULL));\n+}\n+\n+/**\n+ * ggandiva_function_registry_get_native_functions:\n+ * @function_registry: A #GGandivaFunctionRegistry.\n+ *\n+ * Returns: (transfer full) (element-type GGandivaNativeFunction):\n+ *   The native functions in the function registry.\n+ *\n+ * Since: 0.14.0\n+ */\n+GList *\n+ggandiva_function_registry_get_native_functions(GGandivaFunctionRegistry *function_registry)\n \n Review comment:\n   It seems to be different from the parameter name in header.\r\n   https://github.com/apache/arrow/pull/4424/files#diff-9fc9478c7fbb95c5dc71e68f5c0b303cR39\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-05T16:06:56.567+0000",
                    "updated": "2019-06-05T16:06:56.567+0000",
                    "started": "2019-06-05T16:06:56.567+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "254450",
                    "issueId": "13237172"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237172/worklog/254451",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #4424: ARROW-5486: [GLib] Add binding of gandiva::FunctionRegistry and related things\nURL: https://github.com/apache/arrow/pull/4424#discussion_r290814110\n \n \n\n ##########\n File path: c_glib/gandiva-glib/function-signature.cpp\n ##########\n @@ -0,0 +1,208 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/basic-data-type.hpp>\n+\n+#include <gandiva-glib/function-signature.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: function-signature\n+ * @short_description: FunctionSignature class\n+ * @title: FunctionSignature class\n+ * @include: gandiva-glib/gandiva-glib.h\n+ *\n+ * Since: 0.14.0\n+ */\n+\n+typedef struct GGandivaFunctionSignaturePrivate_ {\n+  const gandiva::FunctionSignature *function_signature;\n+} GGandivaFunctionSignaturePrivate;\n+\n+enum {\n+  PROP_FUNCTION_SIGNATURE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaFunctionSignature,\n+                           ggandiva_function_signature,\n+                           G_TYPE_OBJECT)\n+\n+#define GGANDIVA_FUNCTION_SIGNATURE_GET_PRIVATE(obj)      \\\n+    static_cast<GGandivaFunctionSignaturePrivate *>(      \\\n+        ggandiva_function_signature_get_instance_private( \\\n+          GGANDIVA_FUNCTION_SIGNATURE(obj)))\n+\n+static void\n+ggandiva_function_signature_set_property(GObject *object,\n+                                         guint prop_id,\n+                                         const GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_FUNCTION_SIGNATURE_GET_PRIVATE(object);\n+  switch (prop_id) {\n+  case PROP_FUNCTION_SIGNATURE:\n+    priv->function_signature =\n+      static_cast<const gandiva::FunctionSignature *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_function_signature_init(GGandivaFunctionSignature *object)\n+{\n+}\n+\n+static void\n+ggandiva_function_signature_class_init(GGandivaFunctionSignatureClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_function_signature_set_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_pointer(\"function_signature\",\n+                              \"FunctionSignature\",\n+                              \"The raw gandiva::FunctionSignature *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_FUNCTION_SIGNATURE, spec);\n+}\n+\n+/**\n+ * ggandiva_function_signature_equal:\n+ * @function_signature: A #GGandivaFunctionSignature.\n+ * @other_function_signature: A #GGandivaFunctionSignature to be compared.\n+ *\n+ * Returns: %TRUE if both of them have the same data, %FALSE otherwise.\n+ *\n+ * Since: 0.14.0\n+ */\n+gboolean\n+ggandiva_function_signature_equal(GGandivaFunctionSignature *function_signature,\n+                                  GGandivaFunctionSignature *other_function_signature)\n+{\n+  auto gandiva_function_signature =\n+    ggandiva_function_signature_get_raw(function_signature);\n+  auto other_gandiva_function_signature =\n+    ggandiva_function_signature_get_raw(other_function_signature);\n+\n+  return (*gandiva_function_signature) == (*other_gandiva_function_signature);\n+}\n+\n+/**\n+ * ggandiva_function_signature_to_string:\n+ * @function_signature: A #GGandivaFunctionSignature\n+ *\n+ * Returns: (transfer full): The string representation of the function signature.\n+ *\n+ * Since: 0.14.0\n+ */\n+gchar *\n+ggandiva_function_signature_to_string(GGandivaFunctionSignature *function_signature)\n+{\n+  const auto gandiva_function_signature =\n+    ggandiva_function_signature_get_raw(function_signature);\n+  return g_strdup(gandiva_function_signature->ToString().c_str());\n+}\n+\n+/**\n+ * ggandiva_function_signature_get_ret_type:\n+ * @function_signature: A #GGandivaFunctionSignature\n+ *\n+ * Returns: (transfer full):\n+ *   A #GArrowDataType of the return value of the function signature.\n+ *\n+ * Since: 0.14.0\n+ */\n+GArrowDataType *\n+ggandiva_function_signature_get_ret_type(GGandivaFunctionSignature *function_signature)\n+{\n+  const auto gandiva_function_signature =\n+    ggandiva_function_signature_get_raw(function_signature);\n+  auto arrow_data_type = gandiva_function_signature->ret_type();\n+  auto data_type = garrow_data_type_new_raw(&arrow_data_type);\n+  return data_type;\n+}\n+\n+/**\n+ * ggandiva_function_signature_get_base_name:\n+ * @function_signature: A #GGandivaFunctionSignature\n+ *\n+ * Returns: (transfer full): A base name of the function signature.\n+ *\n+ * Since: 0.14.0\n+ */\n+gchar *\n+ggandiva_function_signature_get_base_name(GGandivaFunctionSignature *function_signature)\n+{\n+  const auto gandiva_function_signature =\n+    ggandiva_function_signature_get_raw(function_signature);\n+  return g_strdup(gandiva_function_signature->base_name().c_str());\n+}\n+\n+/**\n+ * ggandiva_function_signature_get_param_types:\n+ * @function_signature: A #GGandivaFunctionSignature\n+ *\n+ * Returns: (transfer full) (element-type GArrowDataType):\n+ *   A list of parameter data types of the function signature.\n+ *\n+ * Since: 0.14.0\n+ */\n+GList *\n+ggandiva_function_signature_get_param_types(GGandivaFunctionSignature *function_signature)\n+{\n+  const auto gandiva_function_signature =\n+    ggandiva_function_signature_get_raw(function_signature);\n+\n+  GList *param_type_list = nullptr;\n+  auto param_types = gandiva_function_signature->param_types();\n+  for (auto i = param_types.begin(); i != param_types.end(); ++i) {\n+    auto arrow_data_type = *i;\n+    auto data_type = garrow_data_type_new_raw(&arrow_data_type);\n+    param_type_list = g_list_prepend(param_type_list, data_type);\n+  }\n+  param_type_list = g_list_reverse(param_type_list);\n+\n+  return param_type_list;\n+}\n+\n+G_END_DECLS\n+\n+GGandivaFunctionSignature *\n+ggandiva_function_signature_new_raw(const gandiva::FunctionSignature *gandiva_function_signature)\n+{\n+  auto function_signature =\n+    GGANDIVA_FUNCTION_SIGNATURE(g_object_new(GGANDIVA_TYPE_FUNCTION_SIGNATURE,\n+                                             \"function_signature\",\n \n Review comment:\n   Could you use `function-signature` instead of `function_signature`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-05T16:06:56.576+0000",
                    "updated": "2019-06-05T16:06:56.576+0000",
                    "started": "2019-06-05T16:06:56.576+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "254451",
                    "issueId": "13237172"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237172/worklog/254452",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #4424: ARROW-5486: [GLib] Add binding of gandiva::FunctionRegistry and related things\nURL: https://github.com/apache/arrow/pull/4424#discussion_r290814417\n \n \n\n ##########\n File path: c_glib/gandiva-glib/native-function.cpp\n ##########\n @@ -0,0 +1,241 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <gandiva-glib/native-function.hpp>\n+\n+#include <gandiva-glib/function-signature.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: native-function\n+ * @short_description: NativeFunction class\n+ * @title: NativeFunction class\n+ * @include: gandiva-glib/gandiva-glib.h\n+ *\n+ * Since: 0.14.0\n+ */\n+\n+typedef struct GGandivaNativeFunctionPrivate_ {\n+  const gandiva::NativeFunction *native_function;\n+} GGandivaNativeFunctionPrivate;\n+\n+enum {\n+  PROP_NATIVE_FUNCTION = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaNativeFunction,\n+                           ggandiva_native_function,\n+                           G_TYPE_OBJECT)\n+\n+#define GGANDIVA_NATIVE_FUNCTION_GET_PRIVATE(obj)      \\\n+    static_cast<GGandivaNativeFunctionPrivate *>(      \\\n+        ggandiva_native_function_get_instance_private( \\\n+          GGANDIVA_NATIVE_FUNCTION(obj)))\n+\n+static void\n+ggandiva_native_function_set_property(GObject *object,\n+                                      guint prop_id,\n+                                      const GValue *value,\n+                                      GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_NATIVE_FUNCTION_GET_PRIVATE(object);\n+  switch (prop_id) {\n+  case PROP_NATIVE_FUNCTION:\n+    priv->native_function =\n+      static_cast<const gandiva::NativeFunction *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_native_function_init(GGandivaNativeFunction *object)\n+{\n+}\n+\n+static void\n+ggandiva_native_function_class_init(GGandivaNativeFunctionClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_native_function_set_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_pointer(\"native_function\",\n+                              \"NativeFunction\",\n+                              \"The raw gandiva::NativeFunction *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_NATIVE_FUNCTION, spec);\n+}\n+\n+/**\n+ * ggandiva_native_function_get_signature:\n+ * @native_function: A #GGandivaNativeFunction.\n+ *\n+ * Returns: (transfer full): A #GGandivaFunctionSignature that represents\n+ *   the signature of the native function.\n+ *\n+ * Since: 0.14.0\n+ */\n+GGandivaFunctionSignature *\n+ggandiva_native_function_get_signature(GGandivaNativeFunction *native_function)\n+{\n+  auto priv = GGANDIVA_NATIVE_FUNCTION_GET_PRIVATE(native_function);\n+  const auto& gandiva_function_signature = priv->native_function->signature();\n+  return ggandiva_function_signature_new_raw(&gandiva_function_signature);\n+}\n+\n+/**\n+ * ggandiva_native_function_to_string:\n+ * @native_function: A #GGandivaNativeFunction.\n+ *\n+ * Returns: (transfer full):\n+ *   The string representation of the signature of the native function.\n+ *\n+ * Since: 0.14.0\n+ */\n+gchar *\n+ggandiva_native_function_to_string(GGandivaNativeFunction *native_function)\n+{\n+  auto priv = GGANDIVA_NATIVE_FUNCTION_GET_PRIVATE(native_function);\n+  auto gandiva_function_signature = priv->native_function->signature();\n+  return g_strdup(gandiva_function_signature.ToString().c_str());\n+}\n+\n+/**\n+ * ggandiva_native_function_get_result_nullable_type:\n+ * @native_function: A #GGandivaNativeFunction.\n+ *\n+ * Returns:\n+ *   A value of #GGandivaResultNullableType.\n+ *\n+ * Since: 0.14.0\n+ */\n+GGandivaResultNullableType\n+ggandiva_native_function_get_result_nullable_type(GGandivaNativeFunction *native_function)\n+{\n+  auto priv = GGANDIVA_NATIVE_FUNCTION_GET_PRIVATE(native_function);\n+  auto gandiva_result_nullable_type = priv->native_function->result_nullable_type();\n+  return ggandiva_result_nullable_type_from_raw(gandiva_result_nullable_type);\n+}\n+\n+/**\n+ * ggandiva_native_function_need_context:\n+ * @native_function: A #GGandivaNativeFunction.\n+ *\n+ * Returns:\n+ *   %TRUE if the native function needs a context for evaluation,\n+ *   %FALSE otherwise.\n+ *\n+ * Since: 0.14.0\n+ */\n+gboolean\n+ggandiva_native_function_need_context(GGandivaNativeFunction *native_function)\n+{\n+  auto priv = GGANDIVA_NATIVE_FUNCTION_GET_PRIVATE(native_function);\n+  return priv->native_function->NeedsContext();\n+}\n+\n+/**\n+ * ggandiva_native_function_need_function_holder:\n+ * @native_function: A #GGandivaNativeFunction.\n+ *\n+ * Returns:\n+ *   %TRUE if the native function needs a function holder for evaluation,\n+ *   %FALSE otherwise.\n+ *\n+ * Since: 0.14.0\n+ */\n+gboolean\n+ggandiva_native_function_need_function_holder(GGandivaNativeFunction *native_function)\n+{\n+  auto priv = GGANDIVA_NATIVE_FUNCTION_GET_PRIVATE(native_function);\n+  return priv->native_function->NeedsFunctionHolder();\n+}\n+\n+/**\n+ * ggandiva_native_function_can_return_errors:\n+ * @native_function: A #GGandivaNativeFunction.\n+ *\n+ * Returns:\n+ *   %TRUE if the native function has the possibility of returning errors,\n+ *   %FALSE otherwise.\n+ *\n+ * Since: 0.14.0\n+ */\n+gboolean\n+ggandiva_native_function_can_return_errors(GGandivaNativeFunction *native_function)\n+{\n+  auto priv = GGANDIVA_NATIVE_FUNCTION_GET_PRIVATE(native_function);\n+  return priv->native_function->CanReturnErrors();\n+}\n+\n+G_END_DECLS\n+\n+GGandivaResultNullableType\n+ggandiva_result_nullable_type_from_raw(gandiva::ResultNullableType gandiva_type)\n+{\n+  switch (gandiva_type) {\n+  case gandiva::kResultNullIfNull:\n+    return GGANDIVA_RESULT_NULL_IF_NULL;\n+  case gandiva::kResultNullNever:\n+    return GGANDIVA_RESULT_NULL_NEVER;\n+  case gandiva::kResultNullInternal:\n+    return GGANDIVA_RESULT_NULL_INTERNAL;\n+  default:\n+    return GGANDIVA_RESULT_NULL_IF_NULL;\n+  }\n+}\n+\n+gandiva::ResultNullableType\n+ggandiva_result_nullable_type_to_raw(GGandivaResultNullableType type)\n+{\n+  switch (type) {\n+  case GGANDIVA_RESULT_NULL_IF_NULL:\n+    return gandiva::kResultNullIfNull;\n+  case GGANDIVA_RESULT_NULL_NEVER:\n+    return gandiva::kResultNullNever;\n+  case GGANDIVA_RESULT_NULL_INTERNAL:\n+    return gandiva::kResultNullInternal;\n+  default:\n+    return gandiva::kResultNullIfNull;\n+  }\n+}\n+\n+GGandivaNativeFunction *\n+ggandiva_native_function_new_raw(const gandiva::NativeFunction *gandiva_native_function)\n+{\n+  auto native_function =\n+    GGANDIVA_NATIVE_FUNCTION(g_object_new(GGANDIVA_TYPE_NATIVE_FUNCTION,\n+                                          \"native_function\",\n \n Review comment:\n   Could you use `native-function` instead of `native_function`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-05T16:06:56.676+0000",
                    "updated": "2019-06-05T16:06:56.676+0000",
                    "started": "2019-06-05T16:06:56.674+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "254452",
                    "issueId": "13237172"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237172/worklog/254453",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #4424: ARROW-5486: [GLib] Add binding of gandiva::FunctionRegistry and related things\nURL: https://github.com/apache/arrow/pull/4424#discussion_r290813821\n \n \n\n ##########\n File path: c_glib/gandiva-glib/function-signature.cpp\n ##########\n @@ -0,0 +1,208 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/basic-data-type.hpp>\n+\n+#include <gandiva-glib/function-signature.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: function-signature\n+ * @short_description: FunctionSignature class\n+ * @title: FunctionSignature class\n+ * @include: gandiva-glib/gandiva-glib.h\n+ *\n+ * Since: 0.14.0\n+ */\n+\n+typedef struct GGandivaFunctionSignaturePrivate_ {\n+  const gandiva::FunctionSignature *function_signature;\n+} GGandivaFunctionSignaturePrivate;\n+\n+enum {\n+  PROP_FUNCTION_SIGNATURE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaFunctionSignature,\n+                           ggandiva_function_signature,\n+                           G_TYPE_OBJECT)\n+\n+#define GGANDIVA_FUNCTION_SIGNATURE_GET_PRIVATE(obj)      \\\n+    static_cast<GGandivaFunctionSignaturePrivate *>(      \\\n+        ggandiva_function_signature_get_instance_private( \\\n+          GGANDIVA_FUNCTION_SIGNATURE(obj)))\n+\n+static void\n+ggandiva_function_signature_set_property(GObject *object,\n+                                         guint prop_id,\n+                                         const GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_FUNCTION_SIGNATURE_GET_PRIVATE(object);\n+  switch (prop_id) {\n+  case PROP_FUNCTION_SIGNATURE:\n+    priv->function_signature =\n+      static_cast<const gandiva::FunctionSignature *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_function_signature_init(GGandivaFunctionSignature *object)\n+{\n+}\n+\n+static void\n+ggandiva_function_signature_class_init(GGandivaFunctionSignatureClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_function_signature_set_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_pointer(\"function_signature\",\n+                              \"FunctionSignature\",\n+                              \"The raw gandiva::FunctionSignature *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_FUNCTION_SIGNATURE, spec);\n+}\n+\n+/**\n+ * ggandiva_function_signature_equal:\n+ * @function_signature: A #GGandivaFunctionSignature.\n+ * @other_function_signature: A #GGandivaFunctionSignature to be compared.\n+ *\n+ * Returns: %TRUE if both of them have the same data, %FALSE otherwise.\n+ *\n+ * Since: 0.14.0\n+ */\n+gboolean\n+ggandiva_function_signature_equal(GGandivaFunctionSignature *function_signature,\n+                                  GGandivaFunctionSignature *other_function_signature)\n+{\n+  auto gandiva_function_signature =\n+    ggandiva_function_signature_get_raw(function_signature);\n+  auto other_gandiva_function_signature =\n+    ggandiva_function_signature_get_raw(other_function_signature);\n+\n+  return (*gandiva_function_signature) == (*other_gandiva_function_signature);\n+}\n+\n+/**\n+ * ggandiva_function_signature_to_string:\n+ * @function_signature: A #GGandivaFunctionSignature\n+ *\n+ * Returns: (transfer full): The string representation of the function signature.\n+ *\n+ * Since: 0.14.0\n+ */\n+gchar *\n+ggandiva_function_signature_to_string(GGandivaFunctionSignature *function_signature)\n+{\n+  const auto gandiva_function_signature =\n+    ggandiva_function_signature_get_raw(function_signature);\n+  return g_strdup(gandiva_function_signature->ToString().c_str());\n+}\n+\n+/**\n+ * ggandiva_function_signature_get_ret_type:\n+ * @function_signature: A #GGandivaFunctionSignature\n+ *\n+ * Returns: (transfer full):\n+ *   A #GArrowDataType of the return value of the function signature.\n+ *\n+ * Since: 0.14.0\n+ */\n+GArrowDataType *\n+ggandiva_function_signature_get_ret_type(GGandivaFunctionSignature *function_signature)\n+{\n+  const auto gandiva_function_signature =\n+    ggandiva_function_signature_get_raw(function_signature);\n+  auto arrow_data_type = gandiva_function_signature->ret_type();\n+  auto data_type = garrow_data_type_new_raw(&arrow_data_type);\n+  return data_type;\n+}\n+\n+/**\n+ * ggandiva_function_signature_get_base_name:\n+ * @function_signature: A #GGandivaFunctionSignature\n+ *\n+ * Returns: (transfer full): A base name of the function signature.\n \n Review comment:\n   Could you add the following comment?\r\n   \r\n   ```cpp\r\n     * Returns: (transfer full): A base name of the function signature.\r\n     *\r\n   + *   It should be freed with g_free() when no longer needed.\r\n   + *\r\n     * Since: 0.14.0\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-05T16:06:56.896+0000",
                    "updated": "2019-06-05T16:06:56.896+0000",
                    "started": "2019-06-05T16:06:56.896+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "254453",
                    "issueId": "13237172"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237172/worklog/254454",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #4424: ARROW-5486: [GLib] Add binding of gandiva::FunctionRegistry and related things\nURL: https://github.com/apache/arrow/pull/4424#discussion_r290814310\n \n \n\n ##########\n File path: c_glib/gandiva-glib/native-function.cpp\n ##########\n @@ -0,0 +1,241 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <gandiva-glib/native-function.hpp>\n+\n+#include <gandiva-glib/function-signature.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: native-function\n+ * @short_description: NativeFunction class\n+ * @title: NativeFunction class\n+ * @include: gandiva-glib/gandiva-glib.h\n+ *\n+ * Since: 0.14.0\n+ */\n+\n+typedef struct GGandivaNativeFunctionPrivate_ {\n+  const gandiva::NativeFunction *native_function;\n+} GGandivaNativeFunctionPrivate;\n+\n+enum {\n+  PROP_NATIVE_FUNCTION = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaNativeFunction,\n+                           ggandiva_native_function,\n+                           G_TYPE_OBJECT)\n+\n+#define GGANDIVA_NATIVE_FUNCTION_GET_PRIVATE(obj)      \\\n+    static_cast<GGandivaNativeFunctionPrivate *>(      \\\n+        ggandiva_native_function_get_instance_private( \\\n+          GGANDIVA_NATIVE_FUNCTION(obj)))\n+\n+static void\n+ggandiva_native_function_set_property(GObject *object,\n+                                      guint prop_id,\n+                                      const GValue *value,\n+                                      GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_NATIVE_FUNCTION_GET_PRIVATE(object);\n+  switch (prop_id) {\n+  case PROP_NATIVE_FUNCTION:\n+    priv->native_function =\n+      static_cast<const gandiva::NativeFunction *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_native_function_init(GGandivaNativeFunction *object)\n+{\n+}\n+\n+static void\n+ggandiva_native_function_class_init(GGandivaNativeFunctionClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_native_function_set_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_pointer(\"native_function\",\n+                              \"NativeFunction\",\n+                              \"The raw gandiva::NativeFunction *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_NATIVE_FUNCTION, spec);\n+}\n+\n+/**\n+ * ggandiva_native_function_get_signature:\n+ * @native_function: A #GGandivaNativeFunction.\n+ *\n+ * Returns: (transfer full): A #GGandivaFunctionSignature that represents\n+ *   the signature of the native function.\n+ *\n+ * Since: 0.14.0\n+ */\n+GGandivaFunctionSignature *\n+ggandiva_native_function_get_signature(GGandivaNativeFunction *native_function)\n+{\n+  auto priv = GGANDIVA_NATIVE_FUNCTION_GET_PRIVATE(native_function);\n+  const auto& gandiva_function_signature = priv->native_function->signature();\n+  return ggandiva_function_signature_new_raw(&gandiva_function_signature);\n+}\n+\n+/**\n+ * ggandiva_native_function_to_string:\n+ * @native_function: A #GGandivaNativeFunction.\n+ *\n+ * Returns: (transfer full):\n+ *   The string representation of the signature of the native function.\n \n Review comment:\n   Could you add the following comment?\r\n   \r\n   ```cpp\r\n     * Returns: (transfer full):\r\n     *   The string representation of the signature of the native function. \r\n   + *   It should be freed with g_free() when no longer needed.\r\n   + *\r\n     * Since: 0.14.0\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-05T16:06:56.901+0000",
                    "updated": "2019-06-05T16:06:56.901+0000",
                    "started": "2019-06-05T16:06:56.900+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "254454",
                    "issueId": "13237172"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237172/worklog/254455",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #4424: ARROW-5486: [GLib] Add binding of gandiva::FunctionRegistry and related things\nURL: https://github.com/apache/arrow/pull/4424#discussion_r290814228\n \n \n\n ##########\n File path: c_glib/gandiva-glib/native-function.cpp\n ##########\n @@ -0,0 +1,241 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <gandiva-glib/native-function.hpp>\n+\n+#include <gandiva-glib/function-signature.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: native-function\n+ * @short_description: NativeFunction class\n+ * @title: NativeFunction class\n+ * @include: gandiva-glib/gandiva-glib.h\n+ *\n+ * Since: 0.14.0\n+ */\n+\n+typedef struct GGandivaNativeFunctionPrivate_ {\n+  const gandiva::NativeFunction *native_function;\n+} GGandivaNativeFunctionPrivate;\n+\n+enum {\n+  PROP_NATIVE_FUNCTION = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaNativeFunction,\n+                           ggandiva_native_function,\n+                           G_TYPE_OBJECT)\n+\n+#define GGANDIVA_NATIVE_FUNCTION_GET_PRIVATE(obj)      \\\n+    static_cast<GGandivaNativeFunctionPrivate *>(      \\\n+        ggandiva_native_function_get_instance_private( \\\n+          GGANDIVA_NATIVE_FUNCTION(obj)))\n+\n+static void\n+ggandiva_native_function_set_property(GObject *object,\n+                                      guint prop_id,\n+                                      const GValue *value,\n+                                      GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_NATIVE_FUNCTION_GET_PRIVATE(object);\n+  switch (prop_id) {\n+  case PROP_NATIVE_FUNCTION:\n+    priv->native_function =\n+      static_cast<const gandiva::NativeFunction *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_native_function_init(GGandivaNativeFunction *object)\n+{\n+}\n+\n+static void\n+ggandiva_native_function_class_init(GGandivaNativeFunctionClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_native_function_set_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_pointer(\"native_function\",\n \n Review comment:\n   Could you use `native-function` instead of `native_function`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-05T16:06:56.904+0000",
                    "updated": "2019-06-05T16:06:56.904+0000",
                    "started": "2019-06-05T16:06:56.903+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "254455",
                    "issueId": "13237172"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237172/worklog/254456",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on pull request #4424: ARROW-5486: [GLib] Add binding of gandiva::FunctionRegistry and related things\nURL: https://github.com/apache/arrow/pull/4424#discussion_r290813612\n \n \n\n ##########\n File path: c_glib/gandiva-glib/function-registry.cpp\n ##########\n @@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <gandiva/function_registry.h>\n+#include <gandiva-glib/function-registry.h>\n+\n+#include <gandiva-glib/native-function.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: function-registry\n+ * @short_description: FunctionRegistry class\n+ * @title: FunctionRegistry class\n+ * @include: gandiva-glib/gandiva-glib.h\n+ *\n+ * Since: 0.14.0\n+ */\n+\n+G_DEFINE_TYPE(GGandivaFunctionRegistry,\n+              ggandiva_function_registry,\n+              G_TYPE_OBJECT);\n+\n+static void\n+ggandiva_function_registry_init(GGandivaFunctionRegistry *object)\n+{\n+}\n+\n+static void\n+ggandiva_function_registry_class_init(GGandivaFunctionRegistryClass *klass)\n+{\n+}\n+\n+/**\n+ * ggandiva_function_registry_new:\n+ *\n+ * Returns: A newly created #GGandivaFunctionRegistry.\n+ *\n+ * Since: 0.14.0\n+ */\n+GGandivaFunctionRegistry *\n+ggandiva_function_registry_new(void)\n+{\n+  return GGANDIVA_FUNCTION_REGISTRY(g_object_new(GGANDIVA_TYPE_FUNCTION_REGISTRY, NULL));\n+}\n+\n+/**\n+ * ggandiva_function_registry_get_native_functions:\n+ * @function_registry: A #GGandivaFunctionRegistry.\n+ *\n+ * Returns: (transfer full) (element-type GGandivaNativeFunction):\n+ *   The native functions in the function registry.\n+ *\n+ * Since: 0.14.0\n+ */\n+GList *\n+ggandiva_function_registry_get_native_functions(GGandivaFunctionRegistry *function_registry)\n+{\n+  gandiva::FunctionRegistry registry;\n \n Review comment:\n   It may be better to add `gandiva_` prefix to distinguish Gandiva C++ objects from the `GGandiva*` objects of parameter name.\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-05T16:06:57.064+0000",
                    "updated": "2019-06-05T16:06:57.064+0000",
                    "started": "2019-06-05T16:06:57.063+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "254456",
                    "issueId": "13237172"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237172/worklog/256768",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #4424: ARROW-5486: [GLib] Add binding of gandiva::FunctionRegistry and related things\nURL: https://github.com/apache/arrow/pull/4424#discussion_r291937070\n \n \n\n ##########\n File path: c_glib/gandiva-glib/Makefile.am\n ##########\n @@ -53,30 +53,84 @@ libgandiva_glib_la_LIBADD =\t\t\t\\\n \n libgandiva_glib_la_headers =\t\t\t\\\n \texpression.h\t\t\t\t\\\n+\tfunction-registry.h\t\t\t\\\n+\tfunction-signature.h\t\t\t\\\n \tgandiva-glib.h\t\t\t\t\\\n+\tnative-function.h\t\t\t\\\n \tnode.h\t\t\t\t\t\\\n \tprojector.h\n \n+libgandiva_glib_la_generated_headers =\t\t\\\n+\tenums.h\n+\n+libgandiva_glib_la_generated_sources =\t\t\\\n+\tenums.c\t\t\t\t\t\\\n+\t$(libgandiva_glib_la_generated_headers)\n+\n libgandiva_glib_la_sources =\t\t\t\\\n \texpression.cpp\t\t\t\t\\\n+\tfunction-registry.cpp\t\t\t\\\n+\tfunction-signature.cpp\t\t\t\\\n \tnode.cpp\t\t\t\t\\\n+\tnative-function.cpp\t\t\t\\\n \tprojector.cpp\t\t\t\t\\\n-\t$(libgandiva_glib_la_headers)\n+\t$(libgandiva_glib_la_headers)\t\t\\\n+\t$(libgandiva_glib_la_generated_sources)\n \n libgandiva_glib_la_cpp_headers =\t\t\\\n \texpression.hpp\t\t\t\t\\\n+\tfunction-signature.hpp\t\t\t\\\n \tgandiva-glib.hpp\t\t\t\\\n+\tnative-function.hpp\t\t\t\\\n \tnode.hpp\t\t\t\t\\\n \tprojector.hpp\n \n libgandiva_glib_la_SOURCES =\t\t\t\\\n \t$(libgandiva_glib_la_sources)\t\t\\\n \t$(libgandiva_glib_la_cpp_headers)\n \n+BUILT_SOURCES =\t\\\n \n Review comment:\n   Could you align the trailing `\\`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-10T09:59:03.695+0000",
                    "updated": "2019-06-10T09:59:03.695+0000",
                    "started": "2019-06-10T09:59:03.695+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "256768",
                    "issueId": "13237172"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237172/worklog/256769",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #4424: ARROW-5486: [GLib] Add binding of gandiva::FunctionRegistry and related things\nURL: https://github.com/apache/arrow/pull/4424#discussion_r291941421\n \n \n\n ##########\n File path: c_glib/gandiva-glib/enums.h.template\n ##########\n @@ -0,0 +1,41 @@\n+/*** BEGIN file-header ***/\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#pragma once\n+\n+#include <arrow-glib/error.h>\n \n Review comment:\n   Could you use `<glib.h>` instead?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-10T09:59:04.268+0000",
                    "updated": "2019-06-10T09:59:04.268+0000",
                    "started": "2019-06-10T09:59:04.267+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "256769",
                    "issueId": "13237172"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237172/worklog/256770",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #4424: ARROW-5486: [GLib] Add binding of gandiva::FunctionRegistry and related things\nURL: https://github.com/apache/arrow/pull/4424#discussion_r291942800\n \n \n\n ##########\n File path: c_glib/gandiva-glib/function-registry.cpp\n ##########\n @@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n \n Review comment:\n   Could you add the following?\r\n   \r\n   ```c\r\n   #ifdef HAVE_CONFIG_H\r\n   #  include <config.h>\r\n   #endif\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-10T09:59:04.277+0000",
                    "updated": "2019-06-10T09:59:04.277+0000",
                    "started": "2019-06-10T09:59:04.276+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "256770",
                    "issueId": "13237172"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237172/worklog/256771",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #4424: ARROW-5486: [GLib] Add binding of gandiva::FunctionRegistry and related things\nURL: https://github.com/apache/arrow/pull/4424#discussion_r291943959\n \n \n\n ##########\n File path: c_glib/gandiva-glib/function-registry.cpp\n ##########\n @@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <gandiva/function_registry.h>\n+#include <gandiva-glib/function-registry.h>\n+\n+#include <gandiva-glib/native-function.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: function-registry\n+ * @short_description: FunctionRegistry class\n+ * @title: FunctionRegistry class\n+ * @include: gandiva-glib/gandiva-glib.h\n+ *\n+ * Since: 0.14.0\n+ */\n+\n+G_DEFINE_TYPE(GGandivaFunctionRegistry,\n+              ggandiva_function_registry,\n+              G_TYPE_OBJECT);\n+\n+static void\n+ggandiva_function_registry_init(GGandivaFunctionRegistry *object)\n+{\n+}\n+\n+static void\n+ggandiva_function_registry_class_init(GGandivaFunctionRegistryClass *klass)\n+{\n+}\n+\n+/**\n+ * ggandiva_function_registry_new:\n+ *\n+ * Returns: A newly created #GGandivaFunctionRegistry.\n+ *\n+ * Since: 0.14.0\n+ */\n+GGandivaFunctionRegistry *\n+ggandiva_function_registry_new(void)\n+{\n+  return GGANDIVA_FUNCTION_REGISTRY(g_object_new(GGANDIVA_TYPE_FUNCTION_REGISTRY, NULL));\n+}\n+\n+/**\n+ * ggandiva_function_registry_get_native_functions:\n+ * @function_registry: A #GGandivaFunctionRegistry.\n+ *\n+ * Returns: (transfer full) (element-type GGandivaNativeFunction):\n+ *   The native functions in the function registry.\n+ *\n+ * Since: 0.14.0\n+ */\n+GList *\n+ggandiva_function_registry_get_native_functions(GGandivaFunctionRegistry *function_registry)\n+{\n+  gandiva::FunctionRegistry registry;\n+\n+  GList *native_function_list = nullptr;\n \n Review comment:\n   Could you use `native_functions` instead of `_list`?\r\n   We use `s` instead of `_list` in other places.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-10T09:59:04.571+0000",
                    "updated": "2019-06-10T09:59:04.571+0000",
                    "started": "2019-06-10T09:59:04.568+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "256771",
                    "issueId": "13237172"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237172/worklog/256772",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #4424: ARROW-5486: [GLib] Add binding of gandiva::FunctionRegistry and related things\nURL: https://github.com/apache/arrow/pull/4424#discussion_r291945009\n \n \n\n ##########\n File path: c_glib/gandiva-glib/function-signature.cpp\n ##########\n @@ -0,0 +1,208 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <arrow-glib/basic-data-type.hpp>\n+\n+#include <gandiva-glib/function-signature.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: function-signature\n+ * @short_description: FunctionSignature class\n+ * @title: FunctionSignature class\n+ * @include: gandiva-glib/gandiva-glib.h\n+ *\n+ * Since: 0.14.0\n+ */\n+\n+typedef struct GGandivaFunctionSignaturePrivate_ {\n+  const gandiva::FunctionSignature *function_signature;\n+} GGandivaFunctionSignaturePrivate;\n+\n+enum {\n+  PROP_FUNCTION_SIGNATURE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaFunctionSignature,\n+                           ggandiva_function_signature,\n+                           G_TYPE_OBJECT)\n+\n+#define GGANDIVA_FUNCTION_SIGNATURE_GET_PRIVATE(obj)      \\\n+    static_cast<GGandivaFunctionSignaturePrivate *>(      \\\n+        ggandiva_function_signature_get_instance_private( \\\n+          GGANDIVA_FUNCTION_SIGNATURE(obj)))\n+\n+static void\n+ggandiva_function_signature_set_property(GObject *object,\n+                                         guint prop_id,\n+                                         const GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_FUNCTION_SIGNATURE_GET_PRIVATE(object);\n+  switch (prop_id) {\n+  case PROP_FUNCTION_SIGNATURE:\n+    priv->function_signature =\n+      static_cast<const gandiva::FunctionSignature *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_function_signature_init(GGandivaFunctionSignature *object)\n+{\n+}\n+\n+static void\n+ggandiva_function_signature_class_init(GGandivaFunctionSignatureClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_function_signature_set_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_pointer(\"function_signature\",\n+                              \"FunctionSignature\",\n+                              \"The raw gandiva::FunctionSignature *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_FUNCTION_SIGNATURE, spec);\n+}\n+\n+/**\n+ * ggandiva_function_signature_equal:\n+ * @function_signature: A #GGandivaFunctionSignature.\n+ * @other_function_signature: A #GGandivaFunctionSignature to be compared.\n+ *\n+ * Returns: %TRUE if both of them have the same data, %FALSE otherwise.\n+ *\n+ * Since: 0.14.0\n+ */\n+gboolean\n+ggandiva_function_signature_equal(GGandivaFunctionSignature *function_signature,\n+                                  GGandivaFunctionSignature *other_function_signature)\n+{\n+  auto gandiva_function_signature =\n+    ggandiva_function_signature_get_raw(function_signature);\n+  auto other_gandiva_function_signature =\n \n Review comment:\n   Could you use `gandiva_other_`? Because we use `gandiva_` as a prefix.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-10T09:59:04.611+0000",
                    "updated": "2019-06-10T09:59:04.611+0000",
                    "started": "2019-06-10T09:59:04.611+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "256772",
                    "issueId": "13237172"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237172/worklog/256773",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #4424: ARROW-5486: [GLib] Add binding of gandiva::FunctionRegistry and related things\nURL: https://github.com/apache/arrow/pull/4424#discussion_r291943051\n \n \n\n ##########\n File path: c_glib/gandiva-glib/function-registry.cpp\n ##########\n @@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <gandiva/function_registry.h>\n+#include <gandiva-glib/function-registry.h>\n+\n+#include <gandiva-glib/native-function.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: function-registry\n+ * @short_description: FunctionRegistry class\n+ * @title: FunctionRegistry class\n+ * @include: gandiva-glib/gandiva-glib.h\n+ *\n+ * Since: 0.14.0\n+ */\n+\n+G_DEFINE_TYPE(GGandivaFunctionRegistry,\n+              ggandiva_function_registry,\n+              G_TYPE_OBJECT);\n \n Review comment:\n   Could you remove the trailing `;`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-10T09:59:04.612+0000",
                    "updated": "2019-06-10T09:59:04.612+0000",
                    "started": "2019-06-10T09:59:04.611+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "256773",
                    "issueId": "13237172"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237172/worklog/256774",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #4424: ARROW-5486: [GLib] Add binding of gandiva::FunctionRegistry and related things\nURL: https://github.com/apache/arrow/pull/4424#discussion_r291947925\n \n \n\n ##########\n File path: c_glib/gandiva-glib/native-function.h\n ##########\n @@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#pragma once\n+\n+#include <arrow-glib/arrow-glib.h>\n \n Review comment:\n   We can omit this because we include `gandiva-glib/function-signature.h`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-10T09:59:04.825+0000",
                    "updated": "2019-06-10T09:59:04.825+0000",
                    "started": "2019-06-10T09:59:04.825+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "256774",
                    "issueId": "13237172"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237172/worklog/256775",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #4424: ARROW-5486: [GLib] Add binding of gandiva::FunctionRegistry and related things\nURL: https://github.com/apache/arrow/pull/4424#discussion_r291944528\n \n \n\n ##########\n File path: c_glib/gandiva-glib/function-registry.h\n ##########\n @@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#pragma once\n+\n+#include <arrow-glib/arrow-glib.h>\n+\n+G_BEGIN_DECLS\n+\n+#define GGANDIVA_TYPE_FUNCTION_REGISTRY (ggandiva_function_registry_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GGandivaFunctionRegistry,\n+                         ggandiva_function_registry,\n+                         GGANDIVA,\n+                         FUNCTION_REGISTRY,\n+                         GObject)\n+\n+struct _GGandivaFunctionRegistryClass\n+{\n+  GObjectClass parent_class;\n+};\n+\n+GGandivaFunctionRegistry *ggandiva_function_registry_new();\n \n Review comment:\n   Could you add `void` to parameter list? `_new(void)`\r\n   This file is used from C.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-10T09:59:05.014+0000",
                    "updated": "2019-06-10T09:59:05.014+0000",
                    "started": "2019-06-10T09:59:05.013+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "256775",
                    "issueId": "13237172"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237172/worklog/256776",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #4424: ARROW-5486: [GLib] Add binding of gandiva::FunctionRegistry and related things\nURL: https://github.com/apache/arrow/pull/4424#discussion_r291943336\n \n \n\n ##########\n File path: c_glib/gandiva-glib/function-registry.cpp\n ##########\n @@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#include <gandiva/function_registry.h>\n+#include <gandiva-glib/function-registry.h>\n+\n+#include <gandiva-glib/native-function.hpp>\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: function-registry\n+ * @short_description: FunctionRegistry class\n+ * @title: FunctionRegistry class\n+ * @include: gandiva-glib/gandiva-glib.h\n+ *\n+ * Since: 0.14.0\n+ */\n+\n+G_DEFINE_TYPE(GGandivaFunctionRegistry,\n+              ggandiva_function_registry,\n+              G_TYPE_OBJECT);\n+\n+static void\n+ggandiva_function_registry_init(GGandivaFunctionRegistry *object)\n+{\n+}\n+\n+static void\n+ggandiva_function_registry_class_init(GGandivaFunctionRegistryClass *klass)\n+{\n+}\n+\n+/**\n+ * ggandiva_function_registry_new:\n+ *\n+ * Returns: A newly created #GGandivaFunctionRegistry.\n+ *\n+ * Since: 0.14.0\n+ */\n+GGandivaFunctionRegistry *\n+ggandiva_function_registry_new(void)\n+{\n+  return GGANDIVA_FUNCTION_REGISTRY(g_object_new(GGANDIVA_TYPE_FUNCTION_REGISTRY, NULL));\n+}\n+\n+/**\n+ * ggandiva_function_registry_get_native_functions:\n+ * @function_registry: A #GGandivaFunctionRegistry.\n+ *\n+ * Returns: (transfer full) (element-type GGandivaNativeFunction):\n+ *   The native functions in the function registry.\n+ *\n+ * Since: 0.14.0\n+ */\n+GList *\n+ggandiva_function_registry_get_native_functions(GGandivaFunctionRegistry *function_registry)\n+{\n+  gandiva::FunctionRegistry registry;\n+\n+  GList *native_function_list = nullptr;\n+  for (auto gandiva_native_function = registry.begin();\n+      gandiva_native_function != registry.end();\n \n Review comment:\n   One space is missing for indent.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-06-10T09:59:05.054+0000",
                    "updated": "2019-06-10T09:59:05.054+0000",
                    "started": "2019-06-10T09:59:05.041+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "256776",
                    "issueId": "13237172"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 18000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@332eb136[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1e264a70[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@75f52568[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@592c846c[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@65af0d5f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7205c1aa[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e8774e7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@13b59abf[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@e6da863[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@52393095[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@470c5679[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@78d35c45[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 18000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jun 11 23:56:08 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-06-11T23:56:08.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-5486/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-06-03T07:53:27.000+0000",
        "updated": "2019-06-11T23:56:14.000+0000",
        "timeoriginalestimate": null,
        "description": "I'd like to add a support of gandiva::FunctionRegistry and the related things in gandiva-glib.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 18000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[GLib] Add binding of gandiva::FunctionRegistry and related things",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13237172/comment/16861620",
                    "id": "16861620",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "Issue resolved by pull request 4424\n[https://github.com/apache/arrow/pull/4424]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2019-06-11T23:56:08.861+0000",
                    "updated": "2019-06-11T23:56:08.861+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z03cio:",
        "customfield_12314139": null
    }
}