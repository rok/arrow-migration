{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13417943",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417943",
    "key": "ARROW-15130",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351550",
                "id": "12351550",
                "name": "9.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-08-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332532",
                "id": "12332532",
                "name": "Documentation"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alenka",
            "name": "alenka",
            "key": "alenkaf",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Alenka Frim",
            "active": true,
            "timeZone": "Europe/Ljubljana"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=alenka",
            "name": "alenka",
            "key": "alenkaf",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34058",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34058",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34058",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34058"
            },
            "displayName": "Alenka Frim",
            "active": true,
            "timeZone": "Europe/Ljubljana"
        },
        "aggregateprogress": {
            "progress": 19200,
            "total": 19200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 19200,
            "total": 19200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15130/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 32,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417943/worklog/756047",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #12868:\nURL: https://github.com/apache/arrow/pull/12868#issuecomment-1097254848\n\n   https://issues.apache.org/jira/browse/ARROW-15130\n\n\n",
                    "created": "2022-04-12T21:46:12.462+0000",
                    "updated": "2022-04-12T21:46:12.462+0000",
                    "started": "2022-04-12T21:46:12.462+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "756047",
                    "issueId": "13417943"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417943/worklog/756048",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #12868:\nURL: https://github.com/apache/arrow/pull/12868#issuecomment-1097254863\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-04-12T21:46:14.399+0000",
                    "updated": "2022-04-12T21:46:14.399+0000",
                    "started": "2022-04-12T21:46:14.399+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "756048",
                    "issueId": "13417943"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417943/worklog/756049",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #12868:\nURL: https://github.com/apache/arrow/pull/12868#issuecomment-1097254905\n\n   This could use a lot more work but here's a start:\r\n   \r\n   <details>\r\n   <summary>Rendered</summary>\r\n   \r\n   ![image](https://user-images.githubusercontent.com/327919/163059742-b24accfc-e495-4791-969f-40f054c43c13.png)\r\n   \r\n   </details>\n\n\n",
                    "created": "2022-04-12T21:46:17.907+0000",
                    "updated": "2022-04-12T21:46:17.907+0000",
                    "started": "2022-04-12T21:46:17.907+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "756049",
                    "issueId": "13417943"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417943/worklog/756225",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "AlenkaF commented on PR #12868:\nURL: https://github.com/apache/arrow/pull/12868#issuecomment-1097676147\n\n   This is great, thank you for starting @lidavidm!\n\n\n",
                    "created": "2022-04-13T07:56:17.474+0000",
                    "updated": "2022-04-13T07:56:17.474+0000",
                    "started": "2022-04-13T07:56:17.474+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "756225",
                    "issueId": "13417943"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417943/worklog/772006",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #12868:\nURL: https://github.com/apache/arrow/pull/12868#issuecomment-1130219435\n\n   This seems to need reviving/moving forward? @amol- @jorisvandenbossche \n\n\n",
                    "created": "2022-05-18T16:15:28.316+0000",
                    "updated": "2022-05-18T16:15:28.316+0000",
                    "started": "2022-05-18T16:15:28.316+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "772006",
                    "issueId": "13417943"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417943/worklog/772010",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #12868:\nURL: https://github.com/apache/arrow/pull/12868#issuecomment-1130221688\n\n   This has been on my backlog to finish up but if there's any feedback on what's here I can fix up tihngs.\n\n\n",
                    "created": "2022-05-18T16:17:43.597+0000",
                    "updated": "2022-05-18T16:17:43.597+0000",
                    "started": "2022-05-18T16:17:43.597+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "772010",
                    "issueId": "13417943"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417943/worklog/772825",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on PR #12868:\nURL: https://github.com/apache/arrow/pull/12868#issuecomment-1132879656\n\n   This looks great to me. I'm not fully sure that it should rely on the format itself, but I can't think of a better place at the moment.\n\n\n",
                    "created": "2022-05-20T13:06:39.159+0000",
                    "updated": "2022-05-20T13:06:39.159+0000",
                    "started": "2022-05-20T13:06:39.158+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "772825",
                    "issueId": "13417943"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417943/worklog/772848",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #12868:\nURL: https://github.com/apache/arrow/pull/12868#issuecomment-1132931893\n\n   Well, we could always put it at the top level. Also ideally it would have to be referenceable by subproject docs even after the splitting. cc @jorisvandenbossche \n\n\n",
                    "created": "2022-05-20T13:57:30.008+0000",
                    "updated": "2022-05-20T13:57:30.008+0000",
                    "started": "2022-05-20T13:57:30.008+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "772848",
                    "issueId": "13417943"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417943/worklog/777492",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #12868:\nURL: https://github.com/apache/arrow/pull/12868#issuecomment-1144832137\n\n   Ping again @jorisvandenbossche for opinions.\n\n\n",
                    "created": "2022-06-02T12:56:41.443+0000",
                    "updated": "2022-06-02T12:56:41.443+0000",
                    "started": "2022-06-02T12:56:41.442+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "777492",
                    "issueId": "13417943"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417943/worklog/777496",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #12868:\nURL: https://github.com/apache/arrow/pull/12868#discussion_r887925905\n\n\n##########\ndocs/source/format/Glossary.rst:\n##########\n@@ -0,0 +1,207 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+========\n+Glossary\n+========\n+\n+.. glossary::\n+   :sorted:\n+\n+   array\n+   vector\n+       A *contiguous*, *one-dimensional* sequence of values with known\n+       length where all values have the same type.  An array consists\n+       of zero or more :term:`buffers <buffer>`, a non-negative\n+       length, and a :term:`data type`.  The buffers of an array are\n+       laid out according to the data type as defined by the columnar\n+       format.\n+\n+       Arrays are contiguous in the sense that iterating the values of\n+       an array will iterate through a single set of buffers, even\n+       though an array may consist of multiple disjoint buffers, or\n+       may consist of child arrays that themselves span multiple\n+       buffers.\n+\n+       Arrays are one-dimensional in that they are a sequence of\n+       :term:`slots <slot>` or singular values, even though for some\n+       data types (like structs or unions), a slot may represent\n+       multiple values.\n+\n+       Defined by the :doc:`./Columnar`.\n+\n+   buffer\n+       A *contiguous* region of memory with a given length.  Buffers\n+       are used to store data for arrays.\n+\n+       Buffers may be in CPU memory, memory-mapped from a file, in\n+       device (e.g. GPU) memory, etc., though not all Arrow\n+       implementations support all of these possibilities.\n+\n+   child array\n+   parent array\n+       In an array of a :term:`nested type`, the parent array\n+       corresponds to the :term:`parent type` and the child array(s)\n+       correspond to the :term:`child type(s) <child type>`.  For\n+       example, a ``List[Int32]``-type parent array has an\n+       ``Int32``-type child array.\n+\n+   child type\n+   parent type\n+       In a :term:`nested type`, the nested type is the parent type,\n+       and the child type(s) are its parameters.  For example, in\n+       ``List[Int32]``, ``List`` is the parent type and ``Int32`` is\n+       the child type.\n+\n+   chunked array\n+       A *discontiguous*, *one-dimensional* sequence of values with\n+       known length where all values have the same type.  Consists of\n+       zero or more :term:`arrays <array>`, the \"chunks\".\n+\n+       Chunked arrays are discontiguous in the sense that iterating\n+       the values of a chunked array may require iterating through\n+       different buffers for different indices.\n+\n+       Not part of the columnar format; this term is specific to\n+       certain language implementations of Arrow (primarily C++ and\n+       its bindings).\n+\n+       .. seealso:: :term:`record batch`, :term:`table`\n+\n+   complex type\n+   nested type\n+       A :term:`data type` whose structure depends on one or more\n+       other :term:`child data types <child type>`. For instance,\n+       ``List`` is a nested type that has one child.\n+\n+       Two nested types are equal if and only if their child types are\n+       also equal.\n+\n+   data type\n+   type\n+       A type that a value can take, such as ``Int8`` or\n+       ``List[Utf8]``. The type of an array determines how its values\n+       are laid out in memory according to :doc:`./Columnar`.\n+\n+       .. seealso:: :term:`logical type`, :term:`nested type`,\n+                    :term:`primitive type`\n+\n+   dictionary\n+       An array of values that accompany a :term:`dictionary-encoded\n+       <dictionary-encoding>` array.\n+\n+   dictionary-encoding\n+       An array that stores its values as indices into a\n+       :term:`dictionary` array instead of storing the values\n+       directly.\n+\n+       .. seealso:: :ref:`dictionary-encoded-layout`\n+\n+   extension type\n+       A user-defined :term:`data type` that adds additional semantics\n+       to an existing data type.  This allows implementations that do\n+       not support a particular extension type to still handle the\n+       underlying data type.\n+\n+       For example, a UUID can be represented as a 16-byte fixed-size\n+       binary type.\n+\n+       .. seealso:: :ref:`format_metadata_extension_types`\n+\n+   field\n+       A column in a :term:`record batch` or :term:`table`.  Consists\n+       of a field name, a :term:`data type`, a flag indicating whether\n+       the field is nullable or not, and optional key-value metadata.\n+\n+   IPC format\n+       A specification for how to serialize Arrow data, so it can be\n+       sent between processes/machines, or persisted on disk.\n+\n+   IPC file format\n+   file format\n+   random-access format\n+       An extension of the :term:`IPC streaming format` that can be\n+       used to serialize Arrow data to disk, then read it back with\n+       random access to individual record batches.\n+\n+   IPC message\n+   message\n+       The IPC representation of a particular in-memory structure,\n+       like a record batch or schema.\n+\n+   IPC streaming format\n+   streaming format\n+       A protocol for streaming Arrow data or for serializing data to\n+       a file, consisting of a stream of :term:`IPC messages <IPC\n+       message>`.\n+\n+   logical type\n\nReview Comment:\n   I don't think we should have an entry for logical types as that notion doesn't exist at all (neither in the format, nor in C++).\n\n\n\n",
                    "created": "2022-06-02T13:02:06.775+0000",
                    "updated": "2022-06-02T13:02:06.775+0000",
                    "started": "2022-06-02T13:02:06.775+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "777496",
                    "issueId": "13417943"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417943/worklog/777498",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #12868:\nURL: https://github.com/apache/arrow/pull/12868#discussion_r887927201\n\n\n##########\ndocs/source/format/Glossary.rst:\n##########\n@@ -0,0 +1,207 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+========\n+Glossary\n+========\n+\n+.. glossary::\n+   :sorted:\n+\n+   array\n+   vector\n+       A *contiguous*, *one-dimensional* sequence of values with known\n+       length where all values have the same type.  An array consists\n+       of zero or more :term:`buffers <buffer>`, a non-negative\n+       length, and a :term:`data type`.  The buffers of an array are\n+       laid out according to the data type as defined by the columnar\n+       format.\n+\n+       Arrays are contiguous in the sense that iterating the values of\n+       an array will iterate through a single set of buffers, even\n+       though an array may consist of multiple disjoint buffers, or\n+       may consist of child arrays that themselves span multiple\n+       buffers.\n+\n+       Arrays are one-dimensional in that they are a sequence of\n+       :term:`slots <slot>` or singular values, even though for some\n+       data types (like structs or unions), a slot may represent\n+       multiple values.\n+\n+       Defined by the :doc:`./Columnar`.\n+\n+   buffer\n+       A *contiguous* region of memory with a given length.  Buffers\n+       are used to store data for arrays.\n+\n+       Buffers may be in CPU memory, memory-mapped from a file, in\n+       device (e.g. GPU) memory, etc., though not all Arrow\n+       implementations support all of these possibilities.\n+\n+   child array\n+   parent array\n+       In an array of a :term:`nested type`, the parent array\n+       corresponds to the :term:`parent type` and the child array(s)\n+       correspond to the :term:`child type(s) <child type>`.  For\n+       example, a ``List[Int32]``-type parent array has an\n+       ``Int32``-type child array.\n+\n+   child type\n+   parent type\n+       In a :term:`nested type`, the nested type is the parent type,\n+       and the child type(s) are its parameters.  For example, in\n+       ``List[Int32]``, ``List`` is the parent type and ``Int32`` is\n+       the child type.\n+\n+   chunked array\n+       A *discontiguous*, *one-dimensional* sequence of values with\n+       known length where all values have the same type.  Consists of\n+       zero or more :term:`arrays <array>`, the \"chunks\".\n+\n+       Chunked arrays are discontiguous in the sense that iterating\n+       the values of a chunked array may require iterating through\n+       different buffers for different indices.\n+\n+       Not part of the columnar format; this term is specific to\n+       certain language implementations of Arrow (primarily C++ and\n+       its bindings).\n+\n+       .. seealso:: :term:`record batch`, :term:`table`\n+\n+   complex type\n+   nested type\n+       A :term:`data type` whose structure depends on one or more\n+       other :term:`child data types <child type>`. For instance,\n+       ``List`` is a nested type that has one child.\n+\n+       Two nested types are equal if and only if their child types are\n+       also equal.\n+\n+   data type\n+   type\n+       A type that a value can take, such as ``Int8`` or\n+       ``List[Utf8]``. The type of an array determines how its values\n+       are laid out in memory according to :doc:`./Columnar`.\n+\n+       .. seealso:: :term:`logical type`, :term:`nested type`,\n+                    :term:`primitive type`\n+\n+   dictionary\n+       An array of values that accompany a :term:`dictionary-encoded\n+       <dictionary-encoding>` array.\n+\n+   dictionary-encoding\n+       An array that stores its values as indices into a\n+       :term:`dictionary` array instead of storing the values\n+       directly.\n+\n+       .. seealso:: :ref:`dictionary-encoded-layout`\n+\n+   extension type\n+       A user-defined :term:`data type` that adds additional semantics\n+       to an existing data type.  This allows implementations that do\n+       not support a particular extension type to still handle the\n+       underlying data type.\n+\n+       For example, a UUID can be represented as a 16-byte fixed-size\n+       binary type.\n+\n+       .. seealso:: :ref:`format_metadata_extension_types`\n+\n+   field\n+       A column in a :term:`record batch` or :term:`table`.  Consists\n+       of a field name, a :term:`data type`, a flag indicating whether\n+       the field is nullable or not, and optional key-value metadata.\n+\n+   IPC format\n+       A specification for how to serialize Arrow data, so it can be\n+       sent between processes/machines, or persisted on disk.\n+\n+   IPC file format\n+   file format\n+   random-access format\n+       An extension of the :term:`IPC streaming format` that can be\n+       used to serialize Arrow data to disk, then read it back with\n+       random access to individual record batches.\n+\n+   IPC message\n+   message\n+       The IPC representation of a particular in-memory structure,\n+       like a record batch or schema.\n+\n+   IPC streaming format\n+   streaming format\n+       A protocol for streaming Arrow data or for serializing data to\n+       a file, consisting of a stream of :term:`IPC messages <IPC\n+       message>`.\n+\n+   logical type\n\nReview Comment:\n   It actually comes directly from Columnar.rst: https://arrow.apache.org/docs/format/Columnar.html#terminology\r\n   \r\n   That said I agree the distinction doesn't really exist in practice.\n\n\n\n",
                    "created": "2022-06-02T13:03:26.931+0000",
                    "updated": "2022-06-02T13:03:26.931+0000",
                    "started": "2022-06-02T13:03:26.931+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "777498",
                    "issueId": "13417943"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417943/worklog/777499",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #12868:\nURL: https://github.com/apache/arrow/pull/12868#discussion_r887927427\n\n\n##########\ndocs/source/format/Glossary.rst:\n##########\n@@ -0,0 +1,207 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+========\n+Glossary\n+========\n+\n+.. glossary::\n+   :sorted:\n+\n+   array\n+   vector\n+       A *contiguous*, *one-dimensional* sequence of values with known\n+       length where all values have the same type.  An array consists\n+       of zero or more :term:`buffers <buffer>`, a non-negative\n+       length, and a :term:`data type`.  The buffers of an array are\n+       laid out according to the data type as defined by the columnar\n+       format.\n+\n+       Arrays are contiguous in the sense that iterating the values of\n+       an array will iterate through a single set of buffers, even\n+       though an array may consist of multiple disjoint buffers, or\n+       may consist of child arrays that themselves span multiple\n+       buffers.\n+\n+       Arrays are one-dimensional in that they are a sequence of\n+       :term:`slots <slot>` or singular values, even though for some\n+       data types (like structs or unions), a slot may represent\n+       multiple values.\n+\n+       Defined by the :doc:`./Columnar`.\n+\n+   buffer\n+       A *contiguous* region of memory with a given length.  Buffers\n+       are used to store data for arrays.\n+\n+       Buffers may be in CPU memory, memory-mapped from a file, in\n+       device (e.g. GPU) memory, etc., though not all Arrow\n+       implementations support all of these possibilities.\n+\n+   child array\n+   parent array\n+       In an array of a :term:`nested type`, the parent array\n+       corresponds to the :term:`parent type` and the child array(s)\n+       correspond to the :term:`child type(s) <child type>`.  For\n+       example, a ``List[Int32]``-type parent array has an\n+       ``Int32``-type child array.\n+\n+   child type\n+   parent type\n+       In a :term:`nested type`, the nested type is the parent type,\n+       and the child type(s) are its parameters.  For example, in\n+       ``List[Int32]``, ``List`` is the parent type and ``Int32`` is\n+       the child type.\n+\n+   chunked array\n+       A *discontiguous*, *one-dimensional* sequence of values with\n+       known length where all values have the same type.  Consists of\n+       zero or more :term:`arrays <array>`, the \"chunks\".\n+\n+       Chunked arrays are discontiguous in the sense that iterating\n+       the values of a chunked array may require iterating through\n+       different buffers for different indices.\n+\n+       Not part of the columnar format; this term is specific to\n+       certain language implementations of Arrow (primarily C++ and\n+       its bindings).\n+\n+       .. seealso:: :term:`record batch`, :term:`table`\n+\n+   complex type\n+   nested type\n+       A :term:`data type` whose structure depends on one or more\n+       other :term:`child data types <child type>`. For instance,\n+       ``List`` is a nested type that has one child.\n+\n+       Two nested types are equal if and only if their child types are\n+       also equal.\n+\n+   data type\n+   type\n+       A type that a value can take, such as ``Int8`` or\n+       ``List[Utf8]``. The type of an array determines how its values\n+       are laid out in memory according to :doc:`./Columnar`.\n+\n+       .. seealso:: :term:`logical type`, :term:`nested type`,\n+                    :term:`primitive type`\n+\n+   dictionary\n+       An array of values that accompany a :term:`dictionary-encoded\n+       <dictionary-encoding>` array.\n+\n+   dictionary-encoding\n+       An array that stores its values as indices into a\n+       :term:`dictionary` array instead of storing the values\n+       directly.\n+\n+       .. seealso:: :ref:`dictionary-encoded-layout`\n+\n+   extension type\n+       A user-defined :term:`data type` that adds additional semantics\n+       to an existing data type.  This allows implementations that do\n+       not support a particular extension type to still handle the\n+       underlying data type.\n+\n+       For example, a UUID can be represented as a 16-byte fixed-size\n+       binary type.\n+\n+       .. seealso:: :ref:`format_metadata_extension_types`\n+\n+   field\n+       A column in a :term:`record batch` or :term:`table`.  Consists\n+       of a field name, a :term:`data type`, a flag indicating whether\n+       the field is nullable or not, and optional key-value metadata.\n+\n+   IPC format\n+       A specification for how to serialize Arrow data, so it can be\n+       sent between processes/machines, or persisted on disk.\n+\n+   IPC file format\n+   file format\n+   random-access format\n+       An extension of the :term:`IPC streaming format` that can be\n+       used to serialize Arrow data to disk, then read it back with\n+       random access to individual record batches.\n+\n+   IPC message\n+   message\n+       The IPC representation of a particular in-memory structure,\n+       like a record batch or schema.\n+\n+   IPC streaming format\n+   streaming format\n+       A protocol for streaming Arrow data or for serializing data to\n+       a file, consisting of a stream of :term:`IPC messages <IPC\n+       message>`.\n+\n+   logical type\n+       An application-facing semantic :term:`data type` that is\n+       implemented as some :term:`physical layout`.\n+\n+       For example, 128-bit decimals may be stored with the\n+       primitive/fixed size layout.  Strings may be stored using the\n+       variable-size binary layout.\n+\n+   physical layout\n+       A specification for how to arrange values in memory.\n+\n+       .. seealso:: :ref:`format_layout`\n+\n+   primitive type\n+       A data type that does not have any child types.\n+\n+       .. seealso:: :term:`data type`\n+\n+   record batch\n+       **In the :ref:`IPC format <format-ipc>`**: the primitive unit\n+       of data.  A record batch consists of an ordered list of\n+       :term:`buffers <buffer>` corresponding to a :term:`schema`.\n+\n+       **In some implementations** (primarily C++ and its bindings): a\n\nReview Comment:\n   Are there implementations where record batches don't exist?\n\n\n\n",
                    "created": "2022-06-02T13:03:41.936+0000",
                    "updated": "2022-06-02T13:03:41.936+0000",
                    "started": "2022-06-02T13:03:41.936+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "777499",
                    "issueId": "13417943"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417943/worklog/777500",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #12868:\nURL: https://github.com/apache/arrow/pull/12868#discussion_r887928358\n\n\n##########\ndocs/source/format/Glossary.rst:\n##########\n@@ -0,0 +1,207 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+========\n+Glossary\n+========\n+\n+.. glossary::\n+   :sorted:\n+\n+   array\n+   vector\n+       A *contiguous*, *one-dimensional* sequence of values with known\n+       length where all values have the same type.  An array consists\n+       of zero or more :term:`buffers <buffer>`, a non-negative\n+       length, and a :term:`data type`.  The buffers of an array are\n+       laid out according to the data type as defined by the columnar\n+       format.\n+\n+       Arrays are contiguous in the sense that iterating the values of\n+       an array will iterate through a single set of buffers, even\n+       though an array may consist of multiple disjoint buffers, or\n+       may consist of child arrays that themselves span multiple\n+       buffers.\n+\n+       Arrays are one-dimensional in that they are a sequence of\n+       :term:`slots <slot>` or singular values, even though for some\n+       data types (like structs or unions), a slot may represent\n+       multiple values.\n+\n+       Defined by the :doc:`./Columnar`.\n+\n+   buffer\n+       A *contiguous* region of memory with a given length.  Buffers\n+       are used to store data for arrays.\n+\n+       Buffers may be in CPU memory, memory-mapped from a file, in\n+       device (e.g. GPU) memory, etc., though not all Arrow\n+       implementations support all of these possibilities.\n+\n+   child array\n+   parent array\n+       In an array of a :term:`nested type`, the parent array\n+       corresponds to the :term:`parent type` and the child array(s)\n+       correspond to the :term:`child type(s) <child type>`.  For\n+       example, a ``List[Int32]``-type parent array has an\n+       ``Int32``-type child array.\n+\n+   child type\n+   parent type\n+       In a :term:`nested type`, the nested type is the parent type,\n+       and the child type(s) are its parameters.  For example, in\n+       ``List[Int32]``, ``List`` is the parent type and ``Int32`` is\n+       the child type.\n+\n+   chunked array\n+       A *discontiguous*, *one-dimensional* sequence of values with\n+       known length where all values have the same type.  Consists of\n+       zero or more :term:`arrays <array>`, the \"chunks\".\n+\n+       Chunked arrays are discontiguous in the sense that iterating\n+       the values of a chunked array may require iterating through\n+       different buffers for different indices.\n+\n+       Not part of the columnar format; this term is specific to\n+       certain language implementations of Arrow (primarily C++ and\n+       its bindings).\n+\n+       .. seealso:: :term:`record batch`, :term:`table`\n+\n+   complex type\n+   nested type\n+       A :term:`data type` whose structure depends on one or more\n+       other :term:`child data types <child type>`. For instance,\n+       ``List`` is a nested type that has one child.\n+\n+       Two nested types are equal if and only if their child types are\n+       also equal.\n+\n+   data type\n+   type\n+       A type that a value can take, such as ``Int8`` or\n+       ``List[Utf8]``. The type of an array determines how its values\n+       are laid out in memory according to :doc:`./Columnar`.\n+\n+       .. seealso:: :term:`logical type`, :term:`nested type`,\n+                    :term:`primitive type`\n+\n+   dictionary\n+       An array of values that accompany a :term:`dictionary-encoded\n+       <dictionary-encoding>` array.\n+\n+   dictionary-encoding\n+       An array that stores its values as indices into a\n+       :term:`dictionary` array instead of storing the values\n+       directly.\n+\n+       .. seealso:: :ref:`dictionary-encoded-layout`\n+\n+   extension type\n+       A user-defined :term:`data type` that adds additional semantics\n+       to an existing data type.  This allows implementations that do\n+       not support a particular extension type to still handle the\n+       underlying data type.\n+\n+       For example, a UUID can be represented as a 16-byte fixed-size\n+       binary type.\n+\n+       .. seealso:: :ref:`format_metadata_extension_types`\n+\n+   field\n+       A column in a :term:`record batch` or :term:`table`.  Consists\n+       of a field name, a :term:`data type`, a flag indicating whether\n+       the field is nullable or not, and optional key-value metadata.\n+\n+   IPC format\n+       A specification for how to serialize Arrow data, so it can be\n+       sent between processes/machines, or persisted on disk.\n+\n+   IPC file format\n+   file format\n+   random-access format\n+       An extension of the :term:`IPC streaming format` that can be\n+       used to serialize Arrow data to disk, then read it back with\n+       random access to individual record batches.\n+\n+   IPC message\n+   message\n+       The IPC representation of a particular in-memory structure,\n+       like a record batch or schema.\n+\n+   IPC streaming format\n+   streaming format\n+       A protocol for streaming Arrow data or for serializing data to\n+       a file, consisting of a stream of :term:`IPC messages <IPC\n+       message>`.\n+\n+   logical type\n\nReview Comment:\n   Yes, but it doesn't exist in the actual spec (unlike e.g. Parquet which does have logical types in its spec). This is a common source of confusion.\n\n\n\n",
                    "created": "2022-06-02T13:04:42.066+0000",
                    "updated": "2022-06-02T13:04:42.066+0000",
                    "started": "2022-06-02T13:04:42.066+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "777500",
                    "issueId": "13417943"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417943/worklog/777501",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #12868:\nURL: https://github.com/apache/arrow/pull/12868#discussion_r887928680\n\n\n##########\ndocs/source/format/Glossary.rst:\n##########\n@@ -0,0 +1,207 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+========\n+Glossary\n+========\n+\n+.. glossary::\n+   :sorted:\n+\n+   array\n+   vector\n+       A *contiguous*, *one-dimensional* sequence of values with known\n+       length where all values have the same type.  An array consists\n+       of zero or more :term:`buffers <buffer>`, a non-negative\n+       length, and a :term:`data type`.  The buffers of an array are\n+       laid out according to the data type as defined by the columnar\n+       format.\n+\n+       Arrays are contiguous in the sense that iterating the values of\n+       an array will iterate through a single set of buffers, even\n+       though an array may consist of multiple disjoint buffers, or\n+       may consist of child arrays that themselves span multiple\n+       buffers.\n+\n+       Arrays are one-dimensional in that they are a sequence of\n+       :term:`slots <slot>` or singular values, even though for some\n+       data types (like structs or unions), a slot may represent\n+       multiple values.\n+\n+       Defined by the :doc:`./Columnar`.\n+\n+   buffer\n+       A *contiguous* region of memory with a given length.  Buffers\n+       are used to store data for arrays.\n+\n+       Buffers may be in CPU memory, memory-mapped from a file, in\n+       device (e.g. GPU) memory, etc., though not all Arrow\n+       implementations support all of these possibilities.\n+\n+   child array\n+   parent array\n+       In an array of a :term:`nested type`, the parent array\n+       corresponds to the :term:`parent type` and the child array(s)\n+       correspond to the :term:`child type(s) <child type>`.  For\n+       example, a ``List[Int32]``-type parent array has an\n+       ``Int32``-type child array.\n+\n+   child type\n+   parent type\n+       In a :term:`nested type`, the nested type is the parent type,\n+       and the child type(s) are its parameters.  For example, in\n+       ``List[Int32]``, ``List`` is the parent type and ``Int32`` is\n+       the child type.\n+\n+   chunked array\n+       A *discontiguous*, *one-dimensional* sequence of values with\n+       known length where all values have the same type.  Consists of\n+       zero or more :term:`arrays <array>`, the \"chunks\".\n+\n+       Chunked arrays are discontiguous in the sense that iterating\n+       the values of a chunked array may require iterating through\n+       different buffers for different indices.\n+\n+       Not part of the columnar format; this term is specific to\n+       certain language implementations of Arrow (primarily C++ and\n+       its bindings).\n+\n+       .. seealso:: :term:`record batch`, :term:`table`\n+\n+   complex type\n+   nested type\n+       A :term:`data type` whose structure depends on one or more\n+       other :term:`child data types <child type>`. For instance,\n+       ``List`` is a nested type that has one child.\n+\n+       Two nested types are equal if and only if their child types are\n+       also equal.\n+\n+   data type\n+   type\n+       A type that a value can take, such as ``Int8`` or\n+       ``List[Utf8]``. The type of an array determines how its values\n+       are laid out in memory according to :doc:`./Columnar`.\n+\n+       .. seealso:: :term:`logical type`, :term:`nested type`,\n+                    :term:`primitive type`\n+\n+   dictionary\n+       An array of values that accompany a :term:`dictionary-encoded\n+       <dictionary-encoding>` array.\n+\n+   dictionary-encoding\n+       An array that stores its values as indices into a\n+       :term:`dictionary` array instead of storing the values\n+       directly.\n+\n+       .. seealso:: :ref:`dictionary-encoded-layout`\n+\n+   extension type\n+       A user-defined :term:`data type` that adds additional semantics\n+       to an existing data type.  This allows implementations that do\n+       not support a particular extension type to still handle the\n+       underlying data type.\n+\n+       For example, a UUID can be represented as a 16-byte fixed-size\n+       binary type.\n+\n+       .. seealso:: :ref:`format_metadata_extension_types`\n+\n+   field\n+       A column in a :term:`record batch` or :term:`table`.  Consists\n+       of a field name, a :term:`data type`, a flag indicating whether\n+       the field is nullable or not, and optional key-value metadata.\n+\n+   IPC format\n+       A specification for how to serialize Arrow data, so it can be\n+       sent between processes/machines, or persisted on disk.\n+\n+   IPC file format\n+   file format\n+   random-access format\n+       An extension of the :term:`IPC streaming format` that can be\n+       used to serialize Arrow data to disk, then read it back with\n+       random access to individual record batches.\n+\n+   IPC message\n+   message\n+       The IPC representation of a particular in-memory structure,\n+       like a record batch or schema.\n+\n+   IPC streaming format\n+   streaming format\n+       A protocol for streaming Arrow data or for serializing data to\n+       a file, consisting of a stream of :term:`IPC messages <IPC\n+       message>`.\n+\n+   logical type\n+       An application-facing semantic :term:`data type` that is\n+       implemented as some :term:`physical layout`.\n+\n+       For example, 128-bit decimals may be stored with the\n+       primitive/fixed size layout.  Strings may be stored using the\n+       variable-size binary layout.\n+\n+   physical layout\n+       A specification for how to arrange values in memory.\n+\n+       .. seealso:: :ref:`format_layout`\n+\n+   primitive type\n+       A data type that does not have any child types.\n+\n+       .. seealso:: :term:`data type`\n+\n+   record batch\n+       **In the :ref:`IPC format <format-ipc>`**: the primitive unit\n+       of data.  A record batch consists of an ordered list of\n+       :term:`buffers <buffer>` corresponding to a :term:`schema`.\n+\n+       **In some implementations** (primarily C++ and its bindings): a\n\nReview Comment:\n   Java's ArrowRecordBatch represents the IPC structure (a list of buffers) and not the conceptual structure (a list of columns); you can't index it or do anything other than load/unload it from a VectorSchemaRoot (which is more like a \"record batch\" except mutable).\n\n\n\n",
                    "created": "2022-06-02T13:05:02.102+0000",
                    "updated": "2022-06-02T13:05:02.102+0000",
                    "started": "2022-06-02T13:05:02.102+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "777501",
                    "issueId": "13417943"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417943/worklog/777502",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #12868:\nURL: https://github.com/apache/arrow/pull/12868#discussion_r887929329\n\n\n##########\ndocs/source/format/Glossary.rst:\n##########\n@@ -0,0 +1,207 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+========\n+Glossary\n+========\n+\n+.. glossary::\n+   :sorted:\n+\n+   array\n+   vector\n+       A *contiguous*, *one-dimensional* sequence of values with known\n+       length where all values have the same type.  An array consists\n+       of zero or more :term:`buffers <buffer>`, a non-negative\n+       length, and a :term:`data type`.  The buffers of an array are\n+       laid out according to the data type as defined by the columnar\n+       format.\n+\n+       Arrays are contiguous in the sense that iterating the values of\n+       an array will iterate through a single set of buffers, even\n+       though an array may consist of multiple disjoint buffers, or\n+       may consist of child arrays that themselves span multiple\n+       buffers.\n+\n+       Arrays are one-dimensional in that they are a sequence of\n+       :term:`slots <slot>` or singular values, even though for some\n+       data types (like structs or unions), a slot may represent\n+       multiple values.\n+\n+       Defined by the :doc:`./Columnar`.\n+\n+   buffer\n+       A *contiguous* region of memory with a given length.  Buffers\n+       are used to store data for arrays.\n+\n+       Buffers may be in CPU memory, memory-mapped from a file, in\n+       device (e.g. GPU) memory, etc., though not all Arrow\n+       implementations support all of these possibilities.\n+\n+   child array\n+   parent array\n+       In an array of a :term:`nested type`, the parent array\n+       corresponds to the :term:`parent type` and the child array(s)\n+       correspond to the :term:`child type(s) <child type>`.  For\n+       example, a ``List[Int32]``-type parent array has an\n+       ``Int32``-type child array.\n+\n+   child type\n+   parent type\n+       In a :term:`nested type`, the nested type is the parent type,\n+       and the child type(s) are its parameters.  For example, in\n+       ``List[Int32]``, ``List`` is the parent type and ``Int32`` is\n+       the child type.\n+\n+   chunked array\n+       A *discontiguous*, *one-dimensional* sequence of values with\n+       known length where all values have the same type.  Consists of\n+       zero or more :term:`arrays <array>`, the \"chunks\".\n+\n+       Chunked arrays are discontiguous in the sense that iterating\n+       the values of a chunked array may require iterating through\n+       different buffers for different indices.\n+\n+       Not part of the columnar format; this term is specific to\n+       certain language implementations of Arrow (primarily C++ and\n+       its bindings).\n+\n+       .. seealso:: :term:`record batch`, :term:`table`\n+\n+   complex type\n+   nested type\n+       A :term:`data type` whose structure depends on one or more\n+       other :term:`child data types <child type>`. For instance,\n+       ``List`` is a nested type that has one child.\n+\n+       Two nested types are equal if and only if their child types are\n+       also equal.\n+\n+   data type\n+   type\n+       A type that a value can take, such as ``Int8`` or\n+       ``List[Utf8]``. The type of an array determines how its values\n+       are laid out in memory according to :doc:`./Columnar`.\n+\n+       .. seealso:: :term:`logical type`, :term:`nested type`,\n+                    :term:`primitive type`\n+\n+   dictionary\n+       An array of values that accompany a :term:`dictionary-encoded\n+       <dictionary-encoding>` array.\n+\n+   dictionary-encoding\n+       An array that stores its values as indices into a\n+       :term:`dictionary` array instead of storing the values\n+       directly.\n+\n+       .. seealso:: :ref:`dictionary-encoded-layout`\n+\n+   extension type\n+       A user-defined :term:`data type` that adds additional semantics\n+       to an existing data type.  This allows implementations that do\n+       not support a particular extension type to still handle the\n+       underlying data type.\n+\n+       For example, a UUID can be represented as a 16-byte fixed-size\n+       binary type.\n+\n+       .. seealso:: :ref:`format_metadata_extension_types`\n+\n+   field\n+       A column in a :term:`record batch` or :term:`table`.  Consists\n+       of a field name, a :term:`data type`, a flag indicating whether\n+       the field is nullable or not, and optional key-value metadata.\n+\n+   IPC format\n+       A specification for how to serialize Arrow data, so it can be\n+       sent between processes/machines, or persisted on disk.\n+\n+   IPC file format\n+   file format\n+   random-access format\n+       An extension of the :term:`IPC streaming format` that can be\n+       used to serialize Arrow data to disk, then read it back with\n+       random access to individual record batches.\n+\n+   IPC message\n+   message\n+       The IPC representation of a particular in-memory structure,\n+       like a record batch or schema.\n+\n+   IPC streaming format\n+   streaming format\n+       A protocol for streaming Arrow data or for serializing data to\n+       a file, consisting of a stream of :term:`IPC messages <IPC\n+       message>`.\n+\n+   logical type\n\nReview Comment:\n   But we need to use _some_ term to distinguish, unless we would say something like that \"other types with the same physical memory layout\" can be found in schema.fbs \n\n\n\n",
                    "created": "2022-06-02T13:05:42.285+0000",
                    "updated": "2022-06-02T13:05:42.285+0000",
                    "started": "2022-06-02T13:05:42.285+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "777502",
                    "issueId": "13417943"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417943/worklog/777511",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #12868:\nURL: https://github.com/apache/arrow/pull/12868#discussion_r887942467\n\n\n##########\ndocs/source/format/Glossary.rst:\n##########\n@@ -0,0 +1,207 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+========\n+Glossary\n+========\n+\n+.. glossary::\n+   :sorted:\n+\n+   array\n+   vector\n+       A *contiguous*, *one-dimensional* sequence of values with known\n+       length where all values have the same type.  An array consists\n+       of zero or more :term:`buffers <buffer>`, a non-negative\n+       length, and a :term:`data type`.  The buffers of an array are\n+       laid out according to the data type as defined by the columnar\n+       format.\n+\n+       Arrays are contiguous in the sense that iterating the values of\n+       an array will iterate through a single set of buffers, even\n+       though an array may consist of multiple disjoint buffers, or\n+       may consist of child arrays that themselves span multiple\n+       buffers.\n+\n+       Arrays are one-dimensional in that they are a sequence of\n+       :term:`slots <slot>` or singular values, even though for some\n+       data types (like structs or unions), a slot may represent\n+       multiple values.\n+\n+       Defined by the :doc:`./Columnar`.\n+\n+   buffer\n+       A *contiguous* region of memory with a given length.  Buffers\n+       are used to store data for arrays.\n+\n+       Buffers may be in CPU memory, memory-mapped from a file, in\n+       device (e.g. GPU) memory, etc., though not all Arrow\n+       implementations support all of these possibilities.\n+\n+   child array\n+   parent array\n+       In an array of a :term:`nested type`, the parent array\n+       corresponds to the :term:`parent type` and the child array(s)\n+       correspond to the :term:`child type(s) <child type>`.  For\n+       example, a ``List[Int32]``-type parent array has an\n+       ``Int32``-type child array.\n+\n+   child type\n+   parent type\n+       In a :term:`nested type`, the nested type is the parent type,\n+       and the child type(s) are its parameters.  For example, in\n+       ``List[Int32]``, ``List`` is the parent type and ``Int32`` is\n+       the child type.\n+\n+   chunked array\n+       A *discontiguous*, *one-dimensional* sequence of values with\n+       known length where all values have the same type.  Consists of\n+       zero or more :term:`arrays <array>`, the \"chunks\".\n+\n+       Chunked arrays are discontiguous in the sense that iterating\n+       the values of a chunked array may require iterating through\n+       different buffers for different indices.\n+\n+       Not part of the columnar format; this term is specific to\n+       certain language implementations of Arrow (primarily C++ and\n+       its bindings).\n+\n+       .. seealso:: :term:`record batch`, :term:`table`\n+\n+   complex type\n+   nested type\n+       A :term:`data type` whose structure depends on one or more\n+       other :term:`child data types <child type>`. For instance,\n+       ``List`` is a nested type that has one child.\n+\n+       Two nested types are equal if and only if their child types are\n+       also equal.\n+\n+   data type\n+   type\n+       A type that a value can take, such as ``Int8`` or\n+       ``List[Utf8]``. The type of an array determines how its values\n+       are laid out in memory according to :doc:`./Columnar`.\n+\n+       .. seealso:: :term:`logical type`, :term:`nested type`,\n+                    :term:`primitive type`\n+\n+   dictionary\n+       An array of values that accompany a :term:`dictionary-encoded\n+       <dictionary-encoding>` array.\n+\n+   dictionary-encoding\n+       An array that stores its values as indices into a\n+       :term:`dictionary` array instead of storing the values\n+       directly.\n+\n+       .. seealso:: :ref:`dictionary-encoded-layout`\n+\n+   extension type\n+       A user-defined :term:`data type` that adds additional semantics\n+       to an existing data type.  This allows implementations that do\n+       not support a particular extension type to still handle the\n+       underlying data type.\n+\n+       For example, a UUID can be represented as a 16-byte fixed-size\n+       binary type.\n+\n+       .. seealso:: :ref:`format_metadata_extension_types`\n+\n+   field\n+       A column in a :term:`record batch` or :term:`table`.  Consists\n+       of a field name, a :term:`data type`, a flag indicating whether\n+       the field is nullable or not, and optional key-value metadata.\n+\n+   IPC format\n+       A specification for how to serialize Arrow data, so it can be\n+       sent between processes/machines, or persisted on disk.\n+\n+   IPC file format\n+   file format\n+   random-access format\n+       An extension of the :term:`IPC streaming format` that can be\n+       used to serialize Arrow data to disk, then read it back with\n+       random access to individual record batches.\n+\n+   IPC message\n+   message\n+       The IPC representation of a particular in-memory structure,\n+       like a record batch or schema.\n+\n+   IPC streaming format\n+   streaming format\n+       A protocol for streaming Arrow data or for serializing data to\n+       a file, consisting of a stream of :term:`IPC messages <IPC\n+       message>`.\n+\n+   logical type\n\nReview Comment:\n   There is nothing to distinguish. All data types exist at the same level.\n\n\n\n",
                    "created": "2022-06-02T13:18:49.009+0000",
                    "updated": "2022-06-02T13:18:49.009+0000",
                    "started": "2022-06-02T13:18:49.008+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "777511",
                    "issueId": "13417943"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417943/worklog/777512",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on PR #12868:\nURL: https://github.com/apache/arrow/pull/12868#issuecomment-1144855982\n\n   This is a really great start of a glossary! \r\n   I think either putting it in the format directory as just top-level would work fine (both those would end up in the main arrow sphinx project after splitting, so that's fine). Currently the only other top-level page (except for the main index.rst) is the \"Status\" page.\n\n\n",
                    "created": "2022-06-02T13:19:17.877+0000",
                    "updated": "2022-06-02T13:19:17.877+0000",
                    "started": "2022-06-02T13:19:17.877+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "777512",
                    "issueId": "13417943"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417943/worklog/777516",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #12868:\nURL: https://github.com/apache/arrow/pull/12868#discussion_r887946175\n\n\n##########\ndocs/source/format/Glossary.rst:\n##########\n@@ -0,0 +1,207 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+========\n+Glossary\n+========\n+\n+.. glossary::\n+   :sorted:\n+\n+   array\n+   vector\n+       A *contiguous*, *one-dimensional* sequence of values with known\n+       length where all values have the same type.  An array consists\n+       of zero or more :term:`buffers <buffer>`, a non-negative\n+       length, and a :term:`data type`.  The buffers of an array are\n+       laid out according to the data type as defined by the columnar\n+       format.\n+\n+       Arrays are contiguous in the sense that iterating the values of\n+       an array will iterate through a single set of buffers, even\n+       though an array may consist of multiple disjoint buffers, or\n+       may consist of child arrays that themselves span multiple\n+       buffers.\n+\n+       Arrays are one-dimensional in that they are a sequence of\n+       :term:`slots <slot>` or singular values, even though for some\n+       data types (like structs or unions), a slot may represent\n+       multiple values.\n+\n+       Defined by the :doc:`./Columnar`.\n+\n+   buffer\n+       A *contiguous* region of memory with a given length.  Buffers\n+       are used to store data for arrays.\n+\n+       Buffers may be in CPU memory, memory-mapped from a file, in\n+       device (e.g. GPU) memory, etc., though not all Arrow\n+       implementations support all of these possibilities.\n+\n+   child array\n+   parent array\n+       In an array of a :term:`nested type`, the parent array\n+       corresponds to the :term:`parent type` and the child array(s)\n+       correspond to the :term:`child type(s) <child type>`.  For\n+       example, a ``List[Int32]``-type parent array has an\n+       ``Int32``-type child array.\n+\n+   child type\n+   parent type\n+       In a :term:`nested type`, the nested type is the parent type,\n+       and the child type(s) are its parameters.  For example, in\n+       ``List[Int32]``, ``List`` is the parent type and ``Int32`` is\n+       the child type.\n+\n+   chunked array\n+       A *discontiguous*, *one-dimensional* sequence of values with\n+       known length where all values have the same type.  Consists of\n+       zero or more :term:`arrays <array>`, the \"chunks\".\n+\n+       Chunked arrays are discontiguous in the sense that iterating\n+       the values of a chunked array may require iterating through\n+       different buffers for different indices.\n+\n+       Not part of the columnar format; this term is specific to\n+       certain language implementations of Arrow (primarily C++ and\n+       its bindings).\n+\n+       .. seealso:: :term:`record batch`, :term:`table`\n+\n+   complex type\n+   nested type\n+       A :term:`data type` whose structure depends on one or more\n+       other :term:`child data types <child type>`. For instance,\n+       ``List`` is a nested type that has one child.\n+\n+       Two nested types are equal if and only if their child types are\n+       also equal.\n+\n+   data type\n+   type\n+       A type that a value can take, such as ``Int8`` or\n+       ``List[Utf8]``. The type of an array determines how its values\n+       are laid out in memory according to :doc:`./Columnar`.\n+\n+       .. seealso:: :term:`logical type`, :term:`nested type`,\n+                    :term:`primitive type`\n+\n+   dictionary\n+       An array of values that accompany a :term:`dictionary-encoded\n+       <dictionary-encoding>` array.\n+\n+   dictionary-encoding\n+       An array that stores its values as indices into a\n+       :term:`dictionary` array instead of storing the values\n+       directly.\n+\n+       .. seealso:: :ref:`dictionary-encoded-layout`\n+\n+   extension type\n+       A user-defined :term:`data type` that adds additional semantics\n+       to an existing data type.  This allows implementations that do\n+       not support a particular extension type to still handle the\n+       underlying data type.\n+\n+       For example, a UUID can be represented as a 16-byte fixed-size\n+       binary type.\n+\n+       .. seealso:: :ref:`format_metadata_extension_types`\n+\n+   field\n+       A column in a :term:`record batch` or :term:`table`.  Consists\n+       of a field name, a :term:`data type`, a flag indicating whether\n+       the field is nullable or not, and optional key-value metadata.\n+\n+   IPC format\n+       A specification for how to serialize Arrow data, so it can be\n+       sent between processes/machines, or persisted on disk.\n+\n+   IPC file format\n+   file format\n+   random-access format\n+       An extension of the :term:`IPC streaming format` that can be\n+       used to serialize Arrow data to disk, then read it back with\n+       random access to individual record batches.\n+\n+   IPC message\n+   message\n+       The IPC representation of a particular in-memory structure,\n+       like a record batch or schema.\n+\n+   IPC streaming format\n+   streaming format\n+       A protocol for streaming Arrow data or for serializing data to\n+       a file, consisting of a stream of :term:`IPC messages <IPC\n+       message>`.\n+\n+   logical type\n+       An application-facing semantic :term:`data type` that is\n+       implemented as some :term:`physical layout`.\n+\n+       For example, 128-bit decimals may be stored with the\n+       primitive/fixed size layout.  Strings may be stored using the\n+       variable-size binary layout.\n+\n+   physical layout\n+       A specification for how to arrange values in memory.\n+\n+       .. seealso:: :ref:`format_layout`\n+\n+   primitive type\n+       A data type that does not have any child types.\n+\n+       .. seealso:: :term:`data type`\n+\n+   record batch\n+       **In the :ref:`IPC format <format-ipc>`**: the primitive unit\n+       of data.  A record batch consists of an ordered list of\n+       :term:`buffers <buffer>` corresponding to a :term:`schema`.\n+\n+       **In some implementations** (primarily C++ and its bindings): a\n\nReview Comment:\n   \r\n   \r\n   Hmm, I see, thanks.\r\n   \n\n\n\n",
                    "created": "2022-06-02T13:22:34.417+0000",
                    "updated": "2022-06-02T13:22:34.417+0000",
                    "started": "2022-06-02T13:22:34.417+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "777516",
                    "issueId": "13417943"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417943/worklog/777535",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #12868:\nURL: https://github.com/apache/arrow/pull/12868#discussion_r887949270\n\n\n##########\ndocs/source/format/Glossary.rst:\n##########\n@@ -0,0 +1,207 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+========\n+Glossary\n+========\n+\n+.. glossary::\n+   :sorted:\n+\n+   array\n+   vector\n+       A *contiguous*, *one-dimensional* sequence of values with known\n+       length where all values have the same type.  An array consists\n+       of zero or more :term:`buffers <buffer>`, a non-negative\n+       length, and a :term:`data type`.  The buffers of an array are\n+       laid out according to the data type as defined by the columnar\n+       format.\n+\n+       Arrays are contiguous in the sense that iterating the values of\n+       an array will iterate through a single set of buffers, even\n+       though an array may consist of multiple disjoint buffers, or\n+       may consist of child arrays that themselves span multiple\n+       buffers.\n+\n+       Arrays are one-dimensional in that they are a sequence of\n+       :term:`slots <slot>` or singular values, even though for some\n+       data types (like structs or unions), a slot may represent\n+       multiple values.\n+\n+       Defined by the :doc:`./Columnar`.\n+\n+   buffer\n+       A *contiguous* region of memory with a given length.  Buffers\n+       are used to store data for arrays.\n+\n+       Buffers may be in CPU memory, memory-mapped from a file, in\n+       device (e.g. GPU) memory, etc., though not all Arrow\n+       implementations support all of these possibilities.\n+\n+   child array\n+   parent array\n+       In an array of a :term:`nested type`, the parent array\n+       corresponds to the :term:`parent type` and the child array(s)\n+       correspond to the :term:`child type(s) <child type>`.  For\n+       example, a ``List[Int32]``-type parent array has an\n+       ``Int32``-type child array.\n+\n+   child type\n+   parent type\n+       In a :term:`nested type`, the nested type is the parent type,\n+       and the child type(s) are its parameters.  For example, in\n+       ``List[Int32]``, ``List`` is the parent type and ``Int32`` is\n+       the child type.\n+\n+   chunked array\n+       A *discontiguous*, *one-dimensional* sequence of values with\n+       known length where all values have the same type.  Consists of\n+       zero or more :term:`arrays <array>`, the \"chunks\".\n+\n+       Chunked arrays are discontiguous in the sense that iterating\n+       the values of a chunked array may require iterating through\n+       different buffers for different indices.\n+\n+       Not part of the columnar format; this term is specific to\n+       certain language implementations of Arrow (primarily C++ and\n+       its bindings).\n+\n+       .. seealso:: :term:`record batch`, :term:`table`\n+\n+   complex type\n+   nested type\n+       A :term:`data type` whose structure depends on one or more\n+       other :term:`child data types <child type>`. For instance,\n+       ``List`` is a nested type that has one child.\n+\n+       Two nested types are equal if and only if their child types are\n+       also equal.\n+\n+   data type\n+   type\n+       A type that a value can take, such as ``Int8`` or\n+       ``List[Utf8]``. The type of an array determines how its values\n+       are laid out in memory according to :doc:`./Columnar`.\n+\n+       .. seealso:: :term:`logical type`, :term:`nested type`,\n+                    :term:`primitive type`\n+\n+   dictionary\n+       An array of values that accompany a :term:`dictionary-encoded\n+       <dictionary-encoding>` array.\n+\n+   dictionary-encoding\n+       An array that stores its values as indices into a\n+       :term:`dictionary` array instead of storing the values\n+       directly.\n+\n+       .. seealso:: :ref:`dictionary-encoded-layout`\n+\n+   extension type\n+       A user-defined :term:`data type` that adds additional semantics\n+       to an existing data type.  This allows implementations that do\n+       not support a particular extension type to still handle the\n+       underlying data type.\n\nReview Comment:\n   Do we want to use the term \"storage type\" for this underlying type?\n\n\n\n##########\ndocs/source/format/Glossary.rst:\n##########\n@@ -0,0 +1,207 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+========\n+Glossary\n+========\n+\n+.. glossary::\n+   :sorted:\n+\n+   array\n+   vector\n+       A *contiguous*, *one-dimensional* sequence of values with known\n+       length where all values have the same type.  An array consists\n+       of zero or more :term:`buffers <buffer>`, a non-negative\n+       length, and a :term:`data type`.  The buffers of an array are\n+       laid out according to the data type as defined by the columnar\n+       format.\n+\n+       Arrays are contiguous in the sense that iterating the values of\n+       an array will iterate through a single set of buffers, even\n+       though an array may consist of multiple disjoint buffers, or\n+       may consist of child arrays that themselves span multiple\n+       buffers.\n+\n+       Arrays are one-dimensional in that they are a sequence of\n+       :term:`slots <slot>` or singular values, even though for some\n+       data types (like structs or unions), a slot may represent\n+       multiple values.\n+\n+       Defined by the :doc:`./Columnar`.\n+\n+   buffer\n+       A *contiguous* region of memory with a given length.  Buffers\n+       are used to store data for arrays.\n+\n+       Buffers may be in CPU memory, memory-mapped from a file, in\n+       device (e.g. GPU) memory, etc., though not all Arrow\n+       implementations support all of these possibilities.\n+\n+   child array\n+   parent array\n+       In an array of a :term:`nested type`, the parent array\n+       corresponds to the :term:`parent type` and the child array(s)\n+       correspond to the :term:`child type(s) <child type>`.  For\n+       example, a ``List[Int32]``-type parent array has an\n+       ``Int32``-type child array.\n+\n+   child type\n+   parent type\n+       In a :term:`nested type`, the nested type is the parent type,\n+       and the child type(s) are its parameters.  For example, in\n+       ``List[Int32]``, ``List`` is the parent type and ``Int32`` is\n+       the child type.\n+\n+   chunked array\n+       A *discontiguous*, *one-dimensional* sequence of values with\n+       known length where all values have the same type.  Consists of\n+       zero or more :term:`arrays <array>`, the \"chunks\".\n+\n+       Chunked arrays are discontiguous in the sense that iterating\n+       the values of a chunked array may require iterating through\n+       different buffers for different indices.\n+\n+       Not part of the columnar format; this term is specific to\n+       certain language implementations of Arrow (primarily C++ and\n+       its bindings).\n+\n+       .. seealso:: :term:`record batch`, :term:`table`\n+\n+   complex type\n+   nested type\n+       A :term:`data type` whose structure depends on one or more\n+       other :term:`child data types <child type>`. For instance,\n+       ``List`` is a nested type that has one child.\n+\n+       Two nested types are equal if and only if their child types are\n+       also equal.\n+\n+   data type\n+   type\n+       A type that a value can take, such as ``Int8`` or\n+       ``List[Utf8]``. The type of an array determines how its values\n+       are laid out in memory according to :doc:`./Columnar`.\n+\n+       .. seealso:: :term:`logical type`, :term:`nested type`,\n+                    :term:`primitive type`\n+\n+   dictionary\n+       An array of values that accompany a :term:`dictionary-encoded\n+       <dictionary-encoding>` array.\n+\n+   dictionary-encoding\n+       An array that stores its values as indices into a\n+       :term:`dictionary` array instead of storing the values\n+       directly.\n+\n+       .. seealso:: :ref:`dictionary-encoded-layout`\n+\n+   extension type\n+       A user-defined :term:`data type` that adds additional semantics\n+       to an existing data type.  This allows implementations that do\n+       not support a particular extension type to still handle the\n+       underlying data type.\n+\n+       For example, a UUID can be represented as a 16-byte fixed-size\n+       binary type.\n+\n+       .. seealso:: :ref:`format_metadata_extension_types`\n+\n+   field\n+       A column in a :term:`record batch` or :term:`table`.  Consists\n\nReview Comment:\n   Or also in a ``:term:`schema` `` ? \r\n   \"column in a record batch\" could also be interpreted as the actual column (i.e. the data, so an array / chunked array)\n\n\n\n##########\ndocs/source/format/Glossary.rst:\n##########\n@@ -0,0 +1,207 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+========\n+Glossary\n+========\n+\n+.. glossary::\n+   :sorted:\n+\n+   array\n+   vector\n+       A *contiguous*, *one-dimensional* sequence of values with known\n+       length where all values have the same type.  An array consists\n+       of zero or more :term:`buffers <buffer>`, a non-negative\n+       length, and a :term:`data type`.  The buffers of an array are\n+       laid out according to the data type as defined by the columnar\n+       format.\n+\n+       Arrays are contiguous in the sense that iterating the values of\n+       an array will iterate through a single set of buffers, even\n+       though an array may consist of multiple disjoint buffers, or\n+       may consist of child arrays that themselves span multiple\n+       buffers.\n+\n+       Arrays are one-dimensional in that they are a sequence of\n+       :term:`slots <slot>` or singular values, even though for some\n+       data types (like structs or unions), a slot may represent\n+       multiple values.\n+\n+       Defined by the :doc:`./Columnar`.\n+\n+   buffer\n+       A *contiguous* region of memory with a given length.  Buffers\n+       are used to store data for arrays.\n+\n+       Buffers may be in CPU memory, memory-mapped from a file, in\n+       device (e.g. GPU) memory, etc., though not all Arrow\n+       implementations support all of these possibilities.\n+\n+   child array\n+   parent array\n+       In an array of a :term:`nested type`, the parent array\n+       corresponds to the :term:`parent type` and the child array(s)\n+       correspond to the :term:`child type(s) <child type>`.  For\n+       example, a ``List[Int32]``-type parent array has an\n+       ``Int32``-type child array.\n+\n+   child type\n+   parent type\n+       In a :term:`nested type`, the nested type is the parent type,\n+       and the child type(s) are its parameters.  For example, in\n+       ``List[Int32]``, ``List`` is the parent type and ``Int32`` is\n+       the child type.\n+\n+   chunked array\n+       A *discontiguous*, *one-dimensional* sequence of values with\n+       known length where all values have the same type.  Consists of\n+       zero or more :term:`arrays <array>`, the \"chunks\".\n+\n+       Chunked arrays are discontiguous in the sense that iterating\n+       the values of a chunked array may require iterating through\n+       different buffers for different indices.\n+\n+       Not part of the columnar format; this term is specific to\n+       certain language implementations of Arrow (primarily C++ and\n+       its bindings).\n+\n+       .. seealso:: :term:`record batch`, :term:`table`\n+\n+   complex type\n+   nested type\n+       A :term:`data type` whose structure depends on one or more\n+       other :term:`child data types <child type>`. For instance,\n+       ``List`` is a nested type that has one child.\n+\n+       Two nested types are equal if and only if their child types are\n+       also equal.\n+\n+   data type\n+   type\n+       A type that a value can take, such as ``Int8`` or\n+       ``List[Utf8]``. The type of an array determines how its values\n+       are laid out in memory according to :doc:`./Columnar`.\n+\n+       .. seealso:: :term:`logical type`, :term:`nested type`,\n+                    :term:`primitive type`\n+\n+   dictionary\n+       An array of values that accompany a :term:`dictionary-encoded\n+       <dictionary-encoding>` array.\n+\n+   dictionary-encoding\n+       An array that stores its values as indices into a\n+       :term:`dictionary` array instead of storing the values\n+       directly.\n+\n+       .. seealso:: :ref:`dictionary-encoded-layout`\n+\n+   extension type\n+       A user-defined :term:`data type` that adds additional semantics\n+       to an existing data type.  This allows implementations that do\n+       not support a particular extension type to still handle the\n+       underlying data type.\n+\n+       For example, a UUID can be represented as a 16-byte fixed-size\n+       binary type.\n+\n+       .. seealso:: :ref:`format_metadata_extension_types`\n+\n+   field\n+       A column in a :term:`record batch` or :term:`table`.  Consists\n+       of a field name, a :term:`data type`, a flag indicating whether\n+       the field is nullable or not, and optional key-value metadata.\n+\n+   IPC format\n+       A specification for how to serialize Arrow data, so it can be\n+       sent between processes/machines, or persisted on disk.\n+\n+   IPC file format\n+   file format\n+   random-access format\n+       An extension of the :term:`IPC streaming format` that can be\n+       used to serialize Arrow data to disk, then read it back with\n+       random access to individual record batches.\n+\n+   IPC message\n+   message\n+       The IPC representation of a particular in-memory structure,\n+       like a record batch or schema.\n+\n+   IPC streaming format\n+   streaming format\n+       A protocol for streaming Arrow data or for serializing data to\n+       a file, consisting of a stream of :term:`IPC messages <IPC\n+       message>`.\n+\n+   logical type\n+       An application-facing semantic :term:`data type` that is\n+       implemented as some :term:`physical layout`.\n+\n+       For example, 128-bit decimals may be stored with the\n+       primitive/fixed size layout.  Strings may be stored using the\n+       variable-size binary layout.\n+\n+   physical layout\n+       A specification for how to arrange values in memory.\n+\n+       .. seealso:: :ref:`format_layout`\n+\n+   primitive type\n+       A data type that does not have any child types.\n+\n+       .. seealso:: :term:`data type`\n+\n+   record batch\n+       **In the :ref:`IPC format <format-ipc>`**: the primitive unit\n+       of data.  A record batch consists of an ordered list of\n+       :term:`buffers <buffer>` corresponding to a :term:`schema`.\n\nReview Comment:\n   Logically you might rather think of it as an \"ordered list of arrays\"? \n\n\n\n##########\ndocs/source/format/Glossary.rst:\n##########\n@@ -0,0 +1,207 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+========\n+Glossary\n+========\n+\n+.. glossary::\n+   :sorted:\n+\n+   array\n+   vector\n+       A *contiguous*, *one-dimensional* sequence of values with known\n+       length where all values have the same type.  An array consists\n+       of zero or more :term:`buffers <buffer>`, a non-negative\n+       length, and a :term:`data type`.  The buffers of an array are\n+       laid out according to the data type as defined by the columnar\n+       format.\n+\n+       Arrays are contiguous in the sense that iterating the values of\n+       an array will iterate through a single set of buffers, even\n+       though an array may consist of multiple disjoint buffers, or\n+       may consist of child arrays that themselves span multiple\n+       buffers.\n+\n+       Arrays are one-dimensional in that they are a sequence of\n+       :term:`slots <slot>` or singular values, even though for some\n+       data types (like structs or unions), a slot may represent\n+       multiple values.\n+\n+       Defined by the :doc:`./Columnar`.\n+\n+   buffer\n+       A *contiguous* region of memory with a given length.  Buffers\n+       are used to store data for arrays.\n+\n+       Buffers may be in CPU memory, memory-mapped from a file, in\n+       device (e.g. GPU) memory, etc., though not all Arrow\n+       implementations support all of these possibilities.\n+\n+   child array\n+   parent array\n+       In an array of a :term:`nested type`, the parent array\n+       corresponds to the :term:`parent type` and the child array(s)\n+       correspond to the :term:`child type(s) <child type>`.  For\n+       example, a ``List[Int32]``-type parent array has an\n+       ``Int32``-type child array.\n+\n+   child type\n+   parent type\n+       In a :term:`nested type`, the nested type is the parent type,\n+       and the child type(s) are its parameters.  For example, in\n+       ``List[Int32]``, ``List`` is the parent type and ``Int32`` is\n+       the child type.\n+\n+   chunked array\n+       A *discontiguous*, *one-dimensional* sequence of values with\n+       known length where all values have the same type.  Consists of\n+       zero or more :term:`arrays <array>`, the \"chunks\".\n+\n+       Chunked arrays are discontiguous in the sense that iterating\n+       the values of a chunked array may require iterating through\n+       different buffers for different indices.\n+\n+       Not part of the columnar format; this term is specific to\n+       certain language implementations of Arrow (primarily C++ and\n+       its bindings).\n+\n+       .. seealso:: :term:`record batch`, :term:`table`\n+\n+   complex type\n+   nested type\n+       A :term:`data type` whose structure depends on one or more\n+       other :term:`child data types <child type>`. For instance,\n+       ``List`` is a nested type that has one child.\n+\n+       Two nested types are equal if and only if their child types are\n+       also equal.\n+\n+   data type\n+   type\n+       A type that a value can take, such as ``Int8`` or\n+       ``List[Utf8]``. The type of an array determines how its values\n+       are laid out in memory according to :doc:`./Columnar`.\n+\n+       .. seealso:: :term:`logical type`, :term:`nested type`,\n+                    :term:`primitive type`\n+\n+   dictionary\n+       An array of values that accompany a :term:`dictionary-encoded\n+       <dictionary-encoding>` array.\n+\n+   dictionary-encoding\n+       An array that stores its values as indices into a\n+       :term:`dictionary` array instead of storing the values\n+       directly.\n+\n+       .. seealso:: :ref:`dictionary-encoded-layout`\n+\n+   extension type\n+       A user-defined :term:`data type` that adds additional semantics\n+       to an existing data type.  This allows implementations that do\n+       not support a particular extension type to still handle the\n+       underlying data type.\n+\n+       For example, a UUID can be represented as a 16-byte fixed-size\n+       binary type.\n+\n+       .. seealso:: :ref:`format_metadata_extension_types`\n+\n+   field\n+       A column in a :term:`record batch` or :term:`table`.  Consists\n+       of a field name, a :term:`data type`, a flag indicating whether\n+       the field is nullable or not, and optional key-value metadata.\n+\n+   IPC format\n+       A specification for how to serialize Arrow data, so it can be\n+       sent between processes/machines, or persisted on disk.\n\nReview Comment:\n   although \"IPC format\" is maybe more generic as the file and streaming format, as those two are specific to record batches? (and IPC format also includes the other message types)\n\n\n\n##########\ndocs/source/format/Glossary.rst:\n##########\n@@ -0,0 +1,207 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+========\n+Glossary\n+========\n+\n+.. glossary::\n+   :sorted:\n+\n+   array\n+   vector\n+       A *contiguous*, *one-dimensional* sequence of values with known\n+       length where all values have the same type.  An array consists\n+       of zero or more :term:`buffers <buffer>`, a non-negative\n+       length, and a :term:`data type`.  The buffers of an array are\n+       laid out according to the data type as defined by the columnar\n+       format.\n+\n+       Arrays are contiguous in the sense that iterating the values of\n+       an array will iterate through a single set of buffers, even\n+       though an array may consist of multiple disjoint buffers, or\n+       may consist of child arrays that themselves span multiple\n+       buffers.\n+\n+       Arrays are one-dimensional in that they are a sequence of\n+       :term:`slots <slot>` or singular values, even though for some\n+       data types (like structs or unions), a slot may represent\n+       multiple values.\n+\n+       Defined by the :doc:`./Columnar`.\n+\n+   buffer\n+       A *contiguous* region of memory with a given length.  Buffers\n+       are used to store data for arrays.\n+\n+       Buffers may be in CPU memory, memory-mapped from a file, in\n+       device (e.g. GPU) memory, etc., though not all Arrow\n+       implementations support all of these possibilities.\n+\n+   child array\n+   parent array\n+       In an array of a :term:`nested type`, the parent array\n+       corresponds to the :term:`parent type` and the child array(s)\n+       correspond to the :term:`child type(s) <child type>`.  For\n+       example, a ``List[Int32]``-type parent array has an\n+       ``Int32``-type child array.\n+\n+   child type\n+   parent type\n+       In a :term:`nested type`, the nested type is the parent type,\n+       and the child type(s) are its parameters.  For example, in\n+       ``List[Int32]``, ``List`` is the parent type and ``Int32`` is\n+       the child type.\n+\n+   chunked array\n+       A *discontiguous*, *one-dimensional* sequence of values with\n+       known length where all values have the same type.  Consists of\n+       zero or more :term:`arrays <array>`, the \"chunks\".\n+\n+       Chunked arrays are discontiguous in the sense that iterating\n+       the values of a chunked array may require iterating through\n+       different buffers for different indices.\n+\n+       Not part of the columnar format; this term is specific to\n+       certain language implementations of Arrow (primarily C++ and\n+       its bindings).\n+\n+       .. seealso:: :term:`record batch`, :term:`table`\n+\n+   complex type\n+   nested type\n+       A :term:`data type` whose structure depends on one or more\n+       other :term:`child data types <child type>`. For instance,\n+       ``List`` is a nested type that has one child.\n+\n+       Two nested types are equal if and only if their child types are\n+       also equal.\n+\n+   data type\n+   type\n+       A type that a value can take, such as ``Int8`` or\n+       ``List[Utf8]``. The type of an array determines how its values\n+       are laid out in memory according to :doc:`./Columnar`.\n+\n+       .. seealso:: :term:`logical type`, :term:`nested type`,\n+                    :term:`primitive type`\n+\n+   dictionary\n+       An array of values that accompany a :term:`dictionary-encoded\n+       <dictionary-encoding>` array.\n+\n+   dictionary-encoding\n+       An array that stores its values as indices into a\n+       :term:`dictionary` array instead of storing the values\n+       directly.\n+\n+       .. seealso:: :ref:`dictionary-encoded-layout`\n+\n+   extension type\n+       A user-defined :term:`data type` that adds additional semantics\n+       to an existing data type.  This allows implementations that do\n+       not support a particular extension type to still handle the\n+       underlying data type.\n+\n+       For example, a UUID can be represented as a 16-byte fixed-size\n+       binary type.\n+\n+       .. seealso:: :ref:`format_metadata_extension_types`\n+\n+   field\n+       A column in a :term:`record batch` or :term:`table`.  Consists\n+       of a field name, a :term:`data type`, a flag indicating whether\n+       the field is nullable or not, and optional key-value metadata.\n+\n+   IPC format\n+       A specification for how to serialize Arrow data, so it can be\n+       sent between processes/machines, or persisted on disk.\n\nReview Comment:\n   Mention here that there are two variants (file and streaming format)? Or add a seealso to those two entries?\n\n\n\n",
                    "created": "2022-06-02T13:33:46.012+0000",
                    "updated": "2022-06-02T13:33:46.012+0000",
                    "started": "2022-06-02T13:33:46.012+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "777535",
                    "issueId": "13417943"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417943/worklog/777543",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #12868:\nURL: https://github.com/apache/arrow/pull/12868#discussion_r887960525\n\n\n##########\ndocs/source/format/Glossary.rst:\n##########\n@@ -0,0 +1,207 @@\n+.. Licensed to the Apache Software Foundation (ASF) under one\n+.. or more contributor license agreements.  See the NOTICE file\n+.. distributed with this work for additional information\n+.. regarding copyright ownership.  The ASF licenses this file\n+.. to you under the Apache License, Version 2.0 (the\n+.. \"License\"); you may not use this file except in compliance\n+.. with the License.  You may obtain a copy of the License at\n+\n+..   http://www.apache.org/licenses/LICENSE-2.0\n+\n+.. Unless required by applicable law or agreed to in writing,\n+.. software distributed under the License is distributed on an\n+.. \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+.. KIND, either express or implied.  See the License for the\n+.. specific language governing permissions and limitations\n+.. under the License.\n+\n+========\n+Glossary\n+========\n+\n+.. glossary::\n+   :sorted:\n+\n+   array\n+   vector\n+       A *contiguous*, *one-dimensional* sequence of values with known\n+       length where all values have the same type.  An array consists\n+       of zero or more :term:`buffers <buffer>`, a non-negative\n+       length, and a :term:`data type`.  The buffers of an array are\n+       laid out according to the data type as defined by the columnar\n+       format.\n+\n+       Arrays are contiguous in the sense that iterating the values of\n+       an array will iterate through a single set of buffers, even\n+       though an array may consist of multiple disjoint buffers, or\n+       may consist of child arrays that themselves span multiple\n+       buffers.\n+\n+       Arrays are one-dimensional in that they are a sequence of\n+       :term:`slots <slot>` or singular values, even though for some\n+       data types (like structs or unions), a slot may represent\n+       multiple values.\n+\n+       Defined by the :doc:`./Columnar`.\n+\n+   buffer\n+       A *contiguous* region of memory with a given length.  Buffers\n+       are used to store data for arrays.\n+\n+       Buffers may be in CPU memory, memory-mapped from a file, in\n+       device (e.g. GPU) memory, etc., though not all Arrow\n+       implementations support all of these possibilities.\n+\n+   child array\n+   parent array\n+       In an array of a :term:`nested type`, the parent array\n+       corresponds to the :term:`parent type` and the child array(s)\n+       correspond to the :term:`child type(s) <child type>`.  For\n+       example, a ``List[Int32]``-type parent array has an\n+       ``Int32``-type child array.\n+\n+   child type\n+   parent type\n+       In a :term:`nested type`, the nested type is the parent type,\n+       and the child type(s) are its parameters.  For example, in\n+       ``List[Int32]``, ``List`` is the parent type and ``Int32`` is\n+       the child type.\n+\n+   chunked array\n+       A *discontiguous*, *one-dimensional* sequence of values with\n+       known length where all values have the same type.  Consists of\n+       zero or more :term:`arrays <array>`, the \"chunks\".\n+\n+       Chunked arrays are discontiguous in the sense that iterating\n+       the values of a chunked array may require iterating through\n+       different buffers for different indices.\n+\n+       Not part of the columnar format; this term is specific to\n+       certain language implementations of Arrow (primarily C++ and\n+       its bindings).\n+\n+       .. seealso:: :term:`record batch`, :term:`table`\n+\n+   complex type\n+   nested type\n+       A :term:`data type` whose structure depends on one or more\n+       other :term:`child data types <child type>`. For instance,\n+       ``List`` is a nested type that has one child.\n+\n+       Two nested types are equal if and only if their child types are\n+       also equal.\n+\n+   data type\n+   type\n+       A type that a value can take, such as ``Int8`` or\n+       ``List[Utf8]``. The type of an array determines how its values\n+       are laid out in memory according to :doc:`./Columnar`.\n+\n+       .. seealso:: :term:`logical type`, :term:`nested type`,\n+                    :term:`primitive type`\n+\n+   dictionary\n+       An array of values that accompany a :term:`dictionary-encoded\n+       <dictionary-encoding>` array.\n+\n+   dictionary-encoding\n+       An array that stores its values as indices into a\n+       :term:`dictionary` array instead of storing the values\n+       directly.\n+\n+       .. seealso:: :ref:`dictionary-encoded-layout`\n+\n+   extension type\n+       A user-defined :term:`data type` that adds additional semantics\n+       to an existing data type.  This allows implementations that do\n+       not support a particular extension type to still handle the\n+       underlying data type.\n+\n+       For example, a UUID can be represented as a 16-byte fixed-size\n+       binary type.\n+\n+       .. seealso:: :ref:`format_metadata_extension_types`\n+\n+   field\n+       A column in a :term:`record batch` or :term:`table`.  Consists\n+       of a field name, a :term:`data type`, a flag indicating whether\n+       the field is nullable or not, and optional key-value metadata.\n+\n+   IPC format\n+       A specification for how to serialize Arrow data, so it can be\n+       sent between processes/machines, or persisted on disk.\n+\n+   IPC file format\n+   file format\n+   random-access format\n+       An extension of the :term:`IPC streaming format` that can be\n+       used to serialize Arrow data to disk, then read it back with\n+       random access to individual record batches.\n+\n+   IPC message\n+   message\n+       The IPC representation of a particular in-memory structure,\n+       like a record batch or schema.\n+\n+   IPC streaming format\n+   streaming format\n+       A protocol for streaming Arrow data or for serializing data to\n+       a file, consisting of a stream of :term:`IPC messages <IPC\n+       message>`.\n+\n+   logical type\n\nReview Comment:\n   There is something to distinguish at the _documentation_ level. Some types are listed in https://arrow.apache.org/docs/dev/format/Columnar.html#physical-memory-layout, others are referred to Schema.fbs. So that doesn't necessarily need to use the term \"logical\", but we need some phrasing about this in the documentation.\n\n\n\n",
                    "created": "2022-06-02T13:36:06.210+0000",
                    "updated": "2022-06-02T13:36:06.210+0000",
                    "started": "2022-06-02T13:36:06.209+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "777543",
                    "issueId": "13417943"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 19200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@70272e69[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6ff4dfd3[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@18f10675[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@51b258ff[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@280a8711[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@18241a41[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@8f6759e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4bc0a1df[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@370e95b9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@fc0670b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3421a9e8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7aa138ea[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 19200,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Jun 30 12:48:44 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-06-30T12:48:44.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15130/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2021-12-16T10:11:48.000+0000",
        "updated": "2022-06-30T12:50:58.000+0000",
        "timeoriginalestimate": null,
        "description": "Add Annotation Glossary for Apache Arrow project.\r\n\r\nExample from the scikit-learn project: https://scikit-learn.org/stable/glossary.html",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 19200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Doc] Start Glossary of common terms",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417943/comment/17507017",
                    "id": "17507017",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "A stack overflow answer from David with some useful content: https://stackoverflow.com/questions/71428738/is-it-possible-to-append-rows-to-an-existing-arrow-pyarrow-table",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2022-03-15T16:05:54.350+0000",
                    "updated": "2022-03-15T16:05:54.350+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417943/comment/17521301",
                    "id": "17521301",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I started working on this incidentally (I didn't notice this ticket until just now) - I'll see if I can get it posted somewhere",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-04-12T19:12:03.133+0000",
                    "updated": "2022-04-12T19:12:03.133+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13417943/comment/17561028",
                    "id": "17561028",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 12868\n[https://github.com/apache/arrow/pull/12868]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-06-30T12:48:44.974+0000",
                    "updated": "2022-06-30T12:48:44.974+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0xs08:",
        "customfield_12314139": null
    }
}