{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13443162",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13443162",
    "key": "ARROW-16469",
    "fields": {
        "parent": {
            "id": "13441112",
            "key": "ARROW-16279",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13441112",
            "fields": {
                "summary": "[Python] Support Expressions in Table.filter",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351550",
                "id": "12351550",
                "name": "9.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-08-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
            "name": "amol-",
            "key": "amol-",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
            },
            "displayName": "Alessandro Molina",
            "active": true,
            "timeZone": "Europe/Rome"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
            "name": "amol-",
            "key": "amol-",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
            },
            "displayName": "Alessandro Molina",
            "active": true,
            "timeZone": "Europe/Rome"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=amol-",
            "name": "amol-",
            "key": "amol-",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=amol-&avatarId=46461",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=amol-&avatarId=46461",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=amol-&avatarId=46461",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=amol-&avatarId=46461"
            },
            "displayName": "Alessandro Molina",
            "active": true,
            "timeZone": "Europe/Rome"
        },
        "aggregateprogress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 9000,
            "total": 9000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16469/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 15,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13443162/worklog/770287",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13155:\nURL: https://github.com/apache/arrow/pull/13155#issuecomment-1126256297\n\n   https://issues.apache.org/jira/browse/ARROW-16469\n\n\n",
                    "created": "2022-05-13T16:52:46.720+0000",
                    "updated": "2022-05-13T16:52:46.720+0000",
                    "started": "2022-05-13T16:52:46.720+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "770287",
                    "issueId": "13443162"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13443162/worklog/771481",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #13155:\nURL: https://github.com/apache/arrow/pull/13155#discussion_r875076518\n\n\n##########\npython/pyarrow/_dataset.pyx:\n##########\n@@ -405,6 +405,27 @@ cdef class Dataset(_Weakrefable):\n                                               use_threads=use_threads, coalesce_keys=coalesce_keys,\n                                               output_type=InMemoryDataset)\n \n+    def filter(self, expr):\n+        \"\"\"\n+        Select rows from the Dataset.\n+\n+        The Dataset can be filtered based on a boolean :class:`Expression` filter.\n+\n+        Parameters\n+        ----------\n+        expr : Expression\n+            The boolean :class:`Expression` to filter the table with.\n+\n+        Returns\n+        -------\n+        filtered : InMemoryDataset\n+            An InMemoryDataset of the same schema, with only the rows selected\n+            by applied filtering\n+\n+        \"\"\"\n+        return _pc()._exec_plan._filter_table(self, expr,\n\nReview Comment:\n   I think for the `Dataset` method, we should rather add this filter to the Scanner (for which there is already functionality, i.e. see this as a different way to express `dataset.scanner/to_table/..(filter=...)`)? \r\n   That would avoid actually materializing the full table? (before putting it again in an InMemoryDataset)\n\n\n\n##########\npython/pyarrow/table.pxi:\n##########\n@@ -2882,24 +2882,27 @@ cdef class Table(_PandasConvertible):\n \n         return pyarrow_wrap_table(result)\n \n-    def filter(self, mask, object null_selection_behavior=\"drop\"):\n+    def filter(self, mask_or_expr, object null_selection_behavior=\"drop\"):\n         \"\"\"\n         Select rows from the table.\n \n-        See :func:`pyarrow.compute.filter` for full usage.\n+        The Table can be filtered based on a mask, which will be passed to\n+        :func:`pyarrow.compute.filter` to perform the filtering, or it can\n+        be filtered through a boolean :class:`.Expression`\n \n         Parameters\n         ----------\n-        mask : Array or array-like\n-            The boolean mask to filter the table with.\n+        mask_or_expr : Array or array-like or .Expression\n+            The boolean mask or the :class:`.Expression` to filter the table with.\n         null_selection_behavior\n-            How nulls in the mask should be handled.\n+            How nulls in the mask should be handled, does nothing if\n+            an :class:`.Expression` is used.\n\nReview Comment:\n   This is not possible to pass through to the filter node?\n\n\n\n##########\npython/pyarrow/table.pxi:\n##########\n@@ -2882,24 +2882,27 @@ cdef class Table(_PandasConvertible):\n \n         return pyarrow_wrap_table(result)\n \n-    def filter(self, mask, object null_selection_behavior=\"drop\"):\n+    def filter(self, mask_or_expr, object null_selection_behavior=\"drop\"):\n         \"\"\"\n         Select rows from the table.\n \n-        See :func:`pyarrow.compute.filter` for full usage.\n+        The Table can be filtered based on a mask, which will be passed to\n+        :func:`pyarrow.compute.filter` to perform the filtering, or it can\n+        be filtered through a boolean :class:`.Expression`\n \n         Parameters\n         ----------\n-        mask : Array or array-like\n-            The boolean mask to filter the table with.\n+        mask_or_expr : Array or array-like or .Expression\n\nReview Comment:\n   Strictly speaking renaming the keyword can break code. We could also leave it as `mask`, and only update the documentation (the expression still _represents_ a mask anyway, so I would say it is not a wrong name)\n\n\n\n",
                    "created": "2022-05-17T17:23:06.407+0000",
                    "updated": "2022-05-17T17:23:06.407+0000",
                    "started": "2022-05-17T17:23:06.406+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "771481",
                    "issueId": "13443162"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13443162/worklog/772339",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on code in PR #13155:\nURL: https://github.com/apache/arrow/pull/13155#discussion_r876827822\n\n\n##########\npython/pyarrow/_dataset.pyx:\n##########\n@@ -405,6 +405,27 @@ cdef class Dataset(_Weakrefable):\n                                               use_threads=use_threads, coalesce_keys=coalesce_keys,\n                                               output_type=InMemoryDataset)\n \n+    def filter(self, expr):\n+        \"\"\"\n+        Select rows from the Dataset.\n+\n+        The Dataset can be filtered based on a boolean :class:`Expression` filter.\n+\n+        Parameters\n+        ----------\n+        expr : Expression\n+            The boolean :class:`Expression` to filter the table with.\n+\n+        Returns\n+        -------\n+        filtered : InMemoryDataset\n+            An InMemoryDataset of the same schema, with only the rows selected\n+            by applied filtering\n+\n+        \"\"\"\n+        return _pc()._exec_plan._filter_table(self, expr,\n\nReview Comment:\n   Good catch, I was thinking toward chaining of `join`,`group_by`,`filter`\u00a0and thus had `InMemoryDataset` in mind as the input, but you are right, if the input is a on-disk dataset, using a scanner would be much more effective.\n\n\n\n",
                    "created": "2022-05-19T09:24:22.990+0000",
                    "updated": "2022-05-19T09:24:22.990+0000",
                    "started": "2022-05-19T09:24:22.990+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "772339",
                    "issueId": "13443162"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13443162/worklog/772341",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on code in PR #13155:\nURL: https://github.com/apache/arrow/pull/13155#discussion_r876829216\n\n\n##########\npython/pyarrow/table.pxi:\n##########\n@@ -2882,24 +2882,27 @@ cdef class Table(_PandasConvertible):\n \n         return pyarrow_wrap_table(result)\n \n-    def filter(self, mask, object null_selection_behavior=\"drop\"):\n+    def filter(self, mask_or_expr, object null_selection_behavior=\"drop\"):\n         \"\"\"\n         Select rows from the table.\n \n-        See :func:`pyarrow.compute.filter` for full usage.\n+        The Table can be filtered based on a mask, which will be passed to\n+        :func:`pyarrow.compute.filter` to perform the filtering, or it can\n+        be filtered through a boolean :class:`.Expression`\n \n         Parameters\n         ----------\n-        mask : Array or array-like\n-            The boolean mask to filter the table with.\n+        mask_or_expr : Array or array-like or .Expression\n\nReview Comment:\n   true, I'll rename it back to `mask`\n\n\n\n",
                    "created": "2022-05-19T09:25:48.054+0000",
                    "updated": "2022-05-19T09:25:48.054+0000",
                    "started": "2022-05-19T09:25:48.054+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "772341",
                    "issueId": "13443162"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13443162/worklog/772343",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on code in PR #13155:\nURL: https://github.com/apache/arrow/pull/13155#discussion_r876833687\n\n\n##########\npython/pyarrow/table.pxi:\n##########\n@@ -2882,24 +2882,27 @@ cdef class Table(_PandasConvertible):\n \n         return pyarrow_wrap_table(result)\n \n-    def filter(self, mask, object null_selection_behavior=\"drop\"):\n+    def filter(self, mask_or_expr, object null_selection_behavior=\"drop\"):\n         \"\"\"\n         Select rows from the table.\n \n-        See :func:`pyarrow.compute.filter` for full usage.\n+        The Table can be filtered based on a mask, which will be passed to\n+        :func:`pyarrow.compute.filter` to perform the filtering, or it can\n+        be filtered through a boolean :class:`.Expression`\n \n         Parameters\n         ----------\n-        mask : Array or array-like\n-            The boolean mask to filter the table with.\n+        mask_or_expr : Array or array-like or .Expression\n+            The boolean mask or the :class:`.Expression` to filter the table with.\n         null_selection_behavior\n-            How nulls in the mask should be handled.\n+            How nulls in the mask should be handled, does nothing if\n+            an :class:`.Expression` is used.\n\nReview Comment:\n   Not in any way that I can see, the filter node has a pretty straightforward constructor: \r\n   `explicit FilterNodeOptions(Expression filter_expression, bool async_mode = true)`, it only accepts an expression.\r\n   \r\n   I think that if you care about special handling nulls, you probably want to build an expression that evaluates as you wish for nulls\n\n\n\n",
                    "created": "2022-05-19T09:29:43.221+0000",
                    "updated": "2022-05-19T09:29:43.221+0000",
                    "started": "2022-05-19T09:29:43.220+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "772343",
                    "issueId": "13443162"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13443162/worklog/772352",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on code in PR #13155:\nURL: https://github.com/apache/arrow/pull/13155#discussion_r876856035\n\n\n##########\npython/pyarrow/_dataset.pyx:\n##########\n@@ -405,6 +405,27 @@ cdef class Dataset(_Weakrefable):\n                                               use_threads=use_threads, coalesce_keys=coalesce_keys,\n                                               output_type=InMemoryDataset)\n \n+    def filter(self, expr):\n+        \"\"\"\n+        Select rows from the Dataset.\n+\n+        The Dataset can be filtered based on a boolean :class:`Expression` filter.\n+\n+        Parameters\n+        ----------\n+        expr : Expression\n+            The boolean :class:`Expression` to filter the table with.\n+\n+        Returns\n+        -------\n+        filtered : InMemoryDataset\n+            An InMemoryDataset of the same schema, with only the rows selected\n+            by applied filtering\n+\n+        \"\"\"\n+        return _pc()._exec_plan._filter_table(self, expr,\n\nReview Comment:\n   Actually, I double checked this and apart from reusing Scanner, the end result would still be materialised into a table. \r\n   As you would have to do\r\n   ```\r\n   InMemoryDataset(dataset.scanner(filter=X).to_batches())\r\n   ```\r\n   The `InMemoryDataset` constructor will consume all the batches to create a `Table`, thus doing the same exact thing that `_filter_table`\u00a0does.\r\n   \r\n   So not sure there would be any benefit using `Scanner` instead of `_filter_table`.\r\n   \r\n   It would probably make sense to add a way to build back a `Dataset` from a `Scanner`, so that we can push evaluation further away in time and chain multiple operations on the dataset.\n\n\n\n",
                    "created": "2022-05-19T09:52:19.509+0000",
                    "updated": "2022-05-19T09:52:19.509+0000",
                    "started": "2022-05-19T09:52:19.508+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "772352",
                    "issueId": "13443162"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13443162/worklog/772434",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #13155:\nURL: https://github.com/apache/arrow/pull/13155#discussion_r877024037\n\n\n##########\npython/pyarrow/table.pxi:\n##########\n@@ -2882,24 +2882,27 @@ cdef class Table(_PandasConvertible):\n \n         return pyarrow_wrap_table(result)\n \n-    def filter(self, mask, object null_selection_behavior=\"drop\"):\n+    def filter(self, mask_or_expr, object null_selection_behavior=\"drop\"):\n         \"\"\"\n         Select rows from the table.\n \n-        See :func:`pyarrow.compute.filter` for full usage.\n+        The Table can be filtered based on a mask, which will be passed to\n+        :func:`pyarrow.compute.filter` to perform the filtering, or it can\n+        be filtered through a boolean :class:`.Expression`\n \n         Parameters\n         ----------\n-        mask : Array or array-like\n-            The boolean mask to filter the table with.\n+        mask_or_expr : Array or array-like or .Expression\n+            The boolean mask or the :class:`.Expression` to filter the table with.\n         null_selection_behavior\n-            How nulls in the mask should be handled.\n+            How nulls in the mask should be handled, does nothing if\n+            an :class:`.Expression` is used.\n\nReview Comment:\n   > I think that if you care about special handling nulls, you probably want to build an expression that evaluates as you wish for nulls\r\n   \r\n   I don't think is possible to get the \"emit null\" behaviour by changing the expression (for dropping/keeping, you can explicitly fill the null with False/True, but for preserving the row as null, that's only possible through this option). I suppose that is a good reason this is an option of the filter kernel and not eg comparison kernels. \r\n   \r\n   Anyway, this is not that important given that the \"drop\" behaviour is the default for both (and is the typical behaviour you want, I think), but this might be something to open a JIRA for to add `FilterOptions` to the `FilterNodeOptions` (cc @westonpace would that make sense?)\n\n\n\n",
                    "created": "2022-05-19T12:59:15.715+0000",
                    "updated": "2022-05-19T12:59:15.715+0000",
                    "started": "2022-05-19T12:59:15.715+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "772434",
                    "issueId": "13443162"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13443162/worklog/772435",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on code in PR #13155:\nURL: https://github.com/apache/arrow/pull/13155#discussion_r877025336\n\n\n##########\npython/pyarrow/_dataset.pyx:\n##########\n@@ -405,6 +405,27 @@ cdef class Dataset(_Weakrefable):\n                                               use_threads=use_threads, coalesce_keys=coalesce_keys,\n                                               output_type=InMemoryDataset)\n \n+    def filter(self, expr):\n+        \"\"\"\n+        Select rows from the Dataset.\n+\n+        The Dataset can be filtered based on a boolean :class:`Expression` filter.\n+\n+        Parameters\n+        ----------\n+        expr : Expression\n+            The boolean :class:`Expression` to filter the table with.\n+\n+        Returns\n+        -------\n+        filtered : InMemoryDataset\n+            An InMemoryDataset of the same schema, with only the rows selected\n+            by applied filtering\n+\n+        \"\"\"\n+        return _pc()._exec_plan._filter_table(self, expr,\n\nReview Comment:\n   Removed the `Dataset.filter`\u00a0method for now and delegated it to https://issues.apache.org/jira/browse/ARROW-16616\n\n\n\n",
                    "created": "2022-05-19T13:00:35.822+0000",
                    "updated": "2022-05-19T13:00:35.822+0000",
                    "started": "2022-05-19T13:00:35.821+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "772435",
                    "issueId": "13443162"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13443162/worklog/772438",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on code in PR #13155:\nURL: https://github.com/apache/arrow/pull/13155#discussion_r877035105\n\n\n##########\npython/pyarrow/table.pxi:\n##########\n@@ -2882,24 +2882,27 @@ cdef class Table(_PandasConvertible):\n \n         return pyarrow_wrap_table(result)\n \n-    def filter(self, mask, object null_selection_behavior=\"drop\"):\n+    def filter(self, mask_or_expr, object null_selection_behavior=\"drop\"):\n         \"\"\"\n         Select rows from the table.\n \n-        See :func:`pyarrow.compute.filter` for full usage.\n+        The Table can be filtered based on a mask, which will be passed to\n+        :func:`pyarrow.compute.filter` to perform the filtering, or it can\n+        be filtered through a boolean :class:`.Expression`\n \n         Parameters\n         ----------\n-        mask : Array or array-like\n-            The boolean mask to filter the table with.\n+        mask_or_expr : Array or array-like or .Expression\n+            The boolean mask or the :class:`.Expression` to filter the table with.\n         null_selection_behavior\n-            How nulls in the mask should be handled.\n+            How nulls in the mask should be handled, does nothing if\n+            an :class:`.Expression` is used.\n\nReview Comment:\n   Uhm, not sure I follow, why you can't use an expression?\r\n   Given\r\n   ```\r\n   >>> pa.table({\"rows\": [1, 2, 3, None, 5, 6]})\r\n   pyarrow.Table\r\n   rows: int64\r\n   ----\r\n   rows: [[1,2,3,null,5,6]]\r\n   ```\r\n   \r\n   If I want to drop the nulls, I do\r\n   ```\r\n   >>> t.filter(pc.field(\"rows\") < 5)\r\n   pyarrow.Table\r\n   rows: int64\r\n   ----\r\n   rows: [[1,2,3]]\r\n   ```\r\n   \r\n   If instead I want to keep the nulls, I do\r\n   ```\r\n   >>> t.filter((pc.field(\"rows\") < 5) | (pc.field(\"rows\").is_null()))\r\n   pyarrow.Table\r\n   rows: int64\r\n   ----\r\n   rows: [[1,2,3,null]]\r\n   ```\n\n\n\n",
                    "created": "2022-05-19T13:10:01.523+0000",
                    "updated": "2022-05-19T13:10:01.523+0000",
                    "started": "2022-05-19T13:10:01.522+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "772438",
                    "issueId": "13443162"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13443162/worklog/772440",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #13155:\nURL: https://github.com/apache/arrow/pull/13155#discussion_r877037671\n\n\n##########\npython/pyarrow/table.pxi:\n##########\n@@ -2882,24 +2882,27 @@ cdef class Table(_PandasConvertible):\n \n         return pyarrow_wrap_table(result)\n \n-    def filter(self, mask, object null_selection_behavior=\"drop\"):\n+    def filter(self, mask_or_expr, object null_selection_behavior=\"drop\"):\n         \"\"\"\n         Select rows from the table.\n \n-        See :func:`pyarrow.compute.filter` for full usage.\n+        The Table can be filtered based on a mask, which will be passed to\n+        :func:`pyarrow.compute.filter` to perform the filtering, or it can\n+        be filtered through a boolean :class:`.Expression`\n \n         Parameters\n         ----------\n-        mask : Array or array-like\n-            The boolean mask to filter the table with.\n+        mask_or_expr : Array or array-like or .Expression\n+            The boolean mask or the :class:`.Expression` to filter the table with.\n         null_selection_behavior\n-            How nulls in the mask should be handled.\n+            How nulls in the mask should be handled, does nothing if\n+            an :class:`.Expression` is used.\n\nReview Comment:\n   The option is about introducing nulls in the output data where the mask is null, not about preserving nulls from the input data. So for preserving nulls in the input, you can change your expression. But for introducing nulls, I don't think that is possible.\n\n\n\n",
                    "created": "2022-05-19T13:12:26.652+0000",
                    "updated": "2022-05-19T13:12:26.652+0000",
                    "started": "2022-05-19T13:12:26.652+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "772440",
                    "issueId": "13443162"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13443162/worklog/772441",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on code in PR #13155:\nURL: https://github.com/apache/arrow/pull/13155#discussion_r877035105\n\n\n##########\npython/pyarrow/table.pxi:\n##########\n@@ -2882,24 +2882,27 @@ cdef class Table(_PandasConvertible):\n \n         return pyarrow_wrap_table(result)\n \n-    def filter(self, mask, object null_selection_behavior=\"drop\"):\n+    def filter(self, mask_or_expr, object null_selection_behavior=\"drop\"):\n         \"\"\"\n         Select rows from the table.\n \n-        See :func:`pyarrow.compute.filter` for full usage.\n+        The Table can be filtered based on a mask, which will be passed to\n+        :func:`pyarrow.compute.filter` to perform the filtering, or it can\n+        be filtered through a boolean :class:`.Expression`\n \n         Parameters\n         ----------\n-        mask : Array or array-like\n-            The boolean mask to filter the table with.\n+        mask_or_expr : Array or array-like or .Expression\n+            The boolean mask or the :class:`.Expression` to filter the table with.\n         null_selection_behavior\n-            How nulls in the mask should be handled.\n+            How nulls in the mask should be handled, does nothing if\n+            an :class:`.Expression` is used.\n\nReview Comment:\n   Uhm, not sure I follow, why you can't use an expression?\r\n   Given\r\n   ```\r\n   >>> pa.table({\"rows\": [1, 2, 3, None, 5, 6]})\r\n   pyarrow.Table\r\n   rows: int64\r\n   ----\r\n   rows: [[1,2,3,null,5,6]]\r\n   ```\r\n   \r\n   If I want to drop the nulls, I do\r\n   ```\r\n   >>> t.filter(pc.field(\"rows\") < 5)\r\n   pyarrow.Table\r\n   rows: int64\r\n   ----\r\n   rows: [[1,2,3]]\r\n   ```\r\n   \r\n   If instead I want to keep the nulls, I do\r\n   ```\r\n   >>> t.filter((pc.field(\"rows\") < 5) | (pc.field(\"rows\").is_null()))\r\n   pyarrow.Table\r\n   rows: int64\r\n   ----\r\n   rows: [[1,2,3,null]]\r\n   ```\r\n   \r\n   Regarding the \"nulls\" in the selection mask itself, I don't think \"filter\" support anything different from a boolean Expression, so the option doesn't make much sense in that context.\n\n\n\n",
                    "created": "2022-05-19T13:14:31.847+0000",
                    "updated": "2022-05-19T13:14:31.847+0000",
                    "started": "2022-05-19T13:14:31.846+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "772441",
                    "issueId": "13443162"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13443162/worklog/772442",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #13155:\nURL: https://github.com/apache/arrow/pull/13155#discussion_r877040772\n\n\n##########\npython/pyarrow/table.pxi:\n##########\n@@ -2882,24 +2882,27 @@ cdef class Table(_PandasConvertible):\n \n         return pyarrow_wrap_table(result)\n \n-    def filter(self, mask, object null_selection_behavior=\"drop\"):\n+    def filter(self, mask_or_expr, object null_selection_behavior=\"drop\"):\n         \"\"\"\n         Select rows from the table.\n \n-        See :func:`pyarrow.compute.filter` for full usage.\n+        The Table can be filtered based on a mask, which will be passed to\n+        :func:`pyarrow.compute.filter` to perform the filtering, or it can\n+        be filtered through a boolean :class:`.Expression`\n \n         Parameters\n         ----------\n-        mask : Array or array-like\n-            The boolean mask to filter the table with.\n+        mask_or_expr : Array or array-like or .Expression\n+            The boolean mask or the :class:`.Expression` to filter the table with.\n         null_selection_behavior\n-            How nulls in the mask should be handled.\n+            How nulls in the mask should be handled, does nothing if\n+            an :class:`.Expression` is used.\n\nReview Comment:\n   Using your example table:\r\n   \r\n   ```\r\n   In [29]: t.filter(pa.array([True, None, True, False, False, False]))\r\n   Out[29]: \r\n   pyarrow.Table\r\n   rows: int64\r\n   ----\r\n   rows: [[1,3]]\r\n   ```\r\n   \r\n   vs\r\n   \r\n   ```\r\n   In [33]: t.filter(pa.array([True, None, True, False, False, False]), null_selection_behavior=\"emit_null\")\r\n   Out[33]: \r\n   pyarrow.Table\r\n   rows: int64\r\n   ----\r\n   rows: [[1,null,3]]\r\n   ```\r\n   \r\n   The null is in a place where the original data had a \"2\"\n\n\n\n",
                    "created": "2022-05-19T13:15:11.822+0000",
                    "updated": "2022-05-19T13:15:11.822+0000",
                    "started": "2022-05-19T13:15:11.821+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "772442",
                    "issueId": "13443162"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13443162/worklog/772443",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amol- commented on code in PR #13155:\nURL: https://github.com/apache/arrow/pull/13155#discussion_r877035105\n\n\n##########\npython/pyarrow/table.pxi:\n##########\n@@ -2882,24 +2882,27 @@ cdef class Table(_PandasConvertible):\n \n         return pyarrow_wrap_table(result)\n \n-    def filter(self, mask, object null_selection_behavior=\"drop\"):\n+    def filter(self, mask_or_expr, object null_selection_behavior=\"drop\"):\n         \"\"\"\n         Select rows from the table.\n \n-        See :func:`pyarrow.compute.filter` for full usage.\n+        The Table can be filtered based on a mask, which will be passed to\n+        :func:`pyarrow.compute.filter` to perform the filtering, or it can\n+        be filtered through a boolean :class:`.Expression`\n \n         Parameters\n         ----------\n-        mask : Array or array-like\n-            The boolean mask to filter the table with.\n+        mask_or_expr : Array or array-like or .Expression\n+            The boolean mask or the :class:`.Expression` to filter the table with.\n         null_selection_behavior\n-            How nulls in the mask should be handled.\n+            How nulls in the mask should be handled, does nothing if\n+            an :class:`.Expression` is used.\n\nReview Comment:\n   Uhm, not sure I follow, why you can't use an expression?\r\n   Given\r\n   ```\r\n   >>> pa.table({\"rows\": [1, 2, 3, None, 5, 6]})\r\n   pyarrow.Table\r\n   rows: int64\r\n   ----\r\n   rows: [[1,2,3,null,5,6]]\r\n   ```\r\n   \r\n   If I want to drop the nulls, I do\r\n   ```\r\n   >>> t.filter(pc.field(\"rows\") < 5)\r\n   pyarrow.Table\r\n   rows: int64\r\n   ----\r\n   rows: [[1,2,3]]\r\n   ```\r\n   \r\n   If instead I want to keep the nulls, I do\r\n   ```\r\n   >>> t.filter((pc.field(\"rows\") < 5) | (pc.field(\"rows\").is_null()))\r\n   pyarrow.Table\r\n   rows: int64\r\n   ----\r\n   rows: [[1,2,3,null]]\r\n   ```\r\n   \r\n   Regarding the \"nulls\" in the selection mask itself, I don't think FilterNode supports anything different from a boolean Expression, so the option doesn't make much sense in that context.\n\n\n\n",
                    "created": "2022-05-19T13:19:47.298+0000",
                    "updated": "2022-05-19T13:19:47.298+0000",
                    "started": "2022-05-19T13:19:47.298+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "772443",
                    "issueId": "13443162"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13443162/worklog/772517",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche closed pull request #13155: ARROW-16469: [Python] Table.filter accepts a boolean expression in addition to boolean array\nURL: https://github.com/apache/arrow/pull/13155\n\n\n",
                    "created": "2022-05-19T16:08:21.798+0000",
                    "updated": "2022-05-19T16:08:21.798+0000",
                    "started": "2022-05-19T16:08:21.798+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "772517",
                    "issueId": "13443162"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13443162/worklog/772790",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on PR #13155:\nURL: https://github.com/apache/arrow/pull/13155#issuecomment-1132800556\n\n   Benchmark runs are scheduled for baseline = 1483b82be75c20ac7071754505e1ac157d5cf4ec and contender = 71737eae6b4d7d341f928838fe403c5fdaaefa76. 71737eae6b4d7d341f928838fe403c5fdaaefa76 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/c35b4963efdb412db5e2d28945c03bf6...aa8b6e9b78a348a19ced25203138e8a3/)\n   [Failed :arrow_down:0.74% :arrow_up:0.0%] [test-mac-arm](https://conbench.ursa.dev/compare/runs/5b3d83786e34476782b30cdc916fca16...cb16ef0469b743939747222bbc1c72fa/)\n   [Failed :arrow_down:0.0% :arrow_up:0.0%] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/84991439a05f45c9b21889d3d99ec1b7...25de8e5c61524fdda601431f268282f0/)\n   [Finished :arrow_down:0.28% :arrow_up:0.0%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/a4d24c9ce71e46d2baee12983b9b8024...c3aa3cdaffd64d73b961f62263f293d1/)\n   Buildkite builds:\n   [Finished] [`71737eae` ec2-t3-xlarge-us-east-2](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/801)\n   [Failed] [`71737eae` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/798)\n   [Failed] [`71737eae` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/788)\n   [Finished] [`71737eae` ursa-thinkcentre-m75q](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/804)\n   [Finished] [`1483b82b` ec2-t3-xlarge-us-east-2](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/800)\n   [Failed] [`1483b82b` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/797)\n   [Failed] [`1483b82b` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/787)\n   [Finished] [`1483b82b` ursa-thinkcentre-m75q](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/803)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python, R. Runs only benchmarks with cloud = True\n   test-mac-arm: Supported benchmark langs: C++, Python, R\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n",
                    "created": "2022-05-20T11:41:09.000+0000",
                    "updated": "2022-05-20T11:41:09.000+0000",
                    "started": "2022-05-20T11:41:09.000+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "772790",
                    "issueId": "13443162"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 9000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2e160875[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@42264b14[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6c17eb81[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1c1963fc[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@58c7a63f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4a098940[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@19112863[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4e40ae3e[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2b530f97[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2d16d034[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3dd4a7c5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@76aecf1f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 9000,
        "customfield_12312520": null,
        "customfield_12312521": "Thu May 19 16:08:22 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-05-19T16:08:22.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16469/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-05-04T16:36:28.000+0000",
        "updated": "2022-05-20T11:41:09.000+0000",
        "timeoriginalestimate": null,
        "description": "If {{Table.filter}} receives an expression, it should invoke {{{}_exec_plan.filter_table{}}}.\r\n\r\nAlso extend the docstring to reflect this change.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 9000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Extend Table.filter to accept Expressions",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13443162/comment/17539638",
                    "id": "17539638",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "Issue resolved by pull request 13155\n[https://github.com/apache/arrow/pull/13155]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2022-05-19T16:08:22.225+0000",
                    "updated": "2022-05-19T16:08:22.225+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z1223k:",
        "customfield_12314139": null
    }
}