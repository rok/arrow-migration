{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13204402",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13204402",
    "key": "ARROW-4026",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 1800,
            "total": 1800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 1800,
            "total": 1800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4026/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 3,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13204402/worklog/176164",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm opened a new pull request #3204: ARROW-4026: [C++] Add *-all, *-tests, *-benchmarks modular CMake targets. Use in Travis CI\nURL: https://github.com/apache/arrow/pull/3204\n \n \n   This provides much more granular control over what targets are built. Before this patch `ninja arrow` would build all libraries, tests, and benchmarks if `ARROW_BUILD_TESTS=ON`. If you wanted to build the tests for a dependent target of the Arrow libraries, like Parquet or Plasma, you were forced to build the Arrow core unit tests. \r\n   \r\n   Now you can do\r\n   \r\n   ```\r\n   ninja parquet-tests\r\n   ```\r\n   \r\n   And it will only build the Arrow and Parquet libraries, and the tests labeled with \"parquet-tests\". \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-17T18:09:38.556+0000",
                    "updated": "2018-12-17T18:09:38.556+0000",
                    "started": "2018-12-17T18:09:38.556+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176164",
                    "issueId": "13204402"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13204402/worklog/176247",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #3204: ARROW-4026: [C++] Add *-all, *-tests, *-benchmarks modular CMake targets. Use in Travis CI\nURL: https://github.com/apache/arrow/pull/3204#issuecomment-448003722\n \n \n   +1. I am merging so that I can focus on getting ARROW-3803 working cleanly. If you want anything changed or improved, please leave comments and I will make a follow up patch\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-17T21:23:13.669+0000",
                    "updated": "2018-12-17T21:23:13.669+0000",
                    "started": "2018-12-17T21:23:13.668+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176247",
                    "issueId": "13204402"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13204402/worklog/176251",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #3204: ARROW-4026: [C++] Add *-all, *-tests, *-benchmarks modular CMake targets. Use in Travis CI\nURL: https://github.com/apache/arrow/pull/3204\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/.travis.yml b/.travis.yml\nindex d22a4e7df0..bf0261b3fa 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -112,9 +112,7 @@ matrix:\n     - ARROW_TRAVIS_GANDIVA_JAVA=1\n     - ARROW_TRAVIS_GANDIVA_TESTS=1\n     - ARROW_TRAVIS_OPTIONAL_INSTALL=1\n-    - ARROW_CPP_BUILD_TARGETS=\"gandiva\"\n-    # TODO(wesm): Remove this after ARROW-4026\n-    - ARROW_TRAVIS_CPP_TEST_INCLUDE_LABELS=\"gandiva\"\n+    - ARROW_CPP_BUILD_TARGETS=\"gandiva-all\"\n     - ARROW_TRAVIS_USE_TOOLCHAIN=1\n     # ARROW-3979 temporarily disabled.\n     - ARROW_TRAVIS_VALGRIND=0\n@@ -164,9 +162,7 @@ matrix:\n     - ARROW_TRAVIS_GANDIVA_JAVA=1\n     - ARROW_TRAVIS_GANDIVA_TESTS=1\n     - ARROW_TRAVIS_OPTIONAL_INSTALL=1\n-    - ARROW_CPP_BUILD_TARGETS=\"gandiva\"\n-    # TODO(wesm): Remove this after ARROW-4026\n-    - ARROW_TRAVIS_CPP_TEST_INCLUDE_LABELS=\"gandiva\"\n+    - ARROW_CPP_BUILD_TARGETS=\"gandiva-all\"\n     - ARROW_TRAVIS_USE_TOOLCHAIN=1\n     - ARROW_BUILD_WARNING_LEVEL=CHECKIN\n     before_script:\ndiff --git a/ci/travis_before_script_cpp.sh b/ci/travis_before_script_cpp.sh\nindex 6cb7d6074f..aa5b2a6ab0 100755\n--- a/ci/travis_before_script_cpp.sh\n+++ b/ci/travis_before_script_cpp.sh\n@@ -42,7 +42,6 @@ fi\n \n CMAKE_COMMON_FLAGS=\"\\\n -DCMAKE_INSTALL_PREFIX=$ARROW_CPP_INSTALL \\\n--DARROW_TEST_INCLUDE_LABELS=$ARROW_TRAVIS_CPP_TEST_INCLUDE_LABELS \\\n -DARROW_NO_DEPRECATED_API=ON \\\n -DARROW_EXTRA_ERROR_CONTEXT=ON\"\n CMAKE_LINUX_FLAGS=\"\"\n@@ -102,9 +101,6 @@ if [ $ARROW_TRAVIS_GANDIVA == \"1\" ]; then\n   if [ $ARROW_TRAVIS_GANDIVA_JAVA == \"1\" ]; then\n       CMAKE_COMMON_FLAGS=\"$CMAKE_COMMON_FLAGS -DARROW_GANDIVA_JAVA=ON\"\n   fi\n-  if [ $ARROW_TRAVIS_GANDIVA_TESTS == \"1\" ]; then\n-    CMAKE_COMMON_FLAGS=\"$CMAKE_COMMON_FLAGS -DARROW_BUILD_TESTS=ON\"\n-  fi\n fi\n \n if [ $ARROW_TRAVIS_VALGRIND == \"1\" ]; then\ndiff --git a/ci/travis_script_gandiva_cpp.sh b/ci/travis_script_gandiva_cpp.sh\nindex f3c379393f..bc4a7a9a8f 100755\n--- a/ci/travis_script_gandiva_cpp.sh\n+++ b/ci/travis_script_gandiva_cpp.sh\n@@ -23,7 +23,7 @@ source $TRAVIS_BUILD_DIR/ci/travis_env_common.sh\n \n pushd $CPP_BUILD_DIR\n \n-PATH=$ARROW_BUILD_TYPE:$PATH ctest -j2 --output-on-failure -L gandiva\n+PATH=$ARROW_BUILD_TYPE:$PATH ctest -j2 --output-on-failure -L gandiva-tests\n \n popd\n \ndiff --git a/ci/travis_script_python.sh b/ci/travis_script_python.sh\nindex b8385c3834..20ec57efc3 100755\n--- a/ci/travis_script_python.sh\n+++ b/ci/travis_script_python.sh\n@@ -87,21 +87,20 @@ rm -rf *\n # XXX Can we simply reuse CMAKE_COMMON_FLAGS from travis_before_script_cpp.sh?\n CMAKE_COMMON_FLAGS=\"-DARROW_EXTRA_ERROR_CONTEXT=ON\"\n \n-PYTHON_CPP_BUILD_TARGETS=\"arrow_python plasma\"\n+PYTHON_CPP_BUILD_TARGETS=\"arrow_python-all plasma\"\n \n if [ $ARROW_TRAVIS_COVERAGE == \"1\" ]; then\n   CMAKE_COMMON_FLAGS=\"$CMAKE_COMMON_FLAGS -DARROW_GENERATE_COVERAGE=ON\"\n fi\n \n if [ $ARROW_TRAVIS_PYTHON_GANDIVA == \"1\" ]; then\n-  CMAKE_COMMON_FLAGS=\"$CMAKE_COMMON_FLAGS -DARROW_GANDIVA=ON -DARROW_GANDIVA_BUILD_TESTS=OFF\"\n+  CMAKE_COMMON_FLAGS=\"$CMAKE_COMMON_FLAGS -DARROW_GANDIVA=ON\"\n   PYTHON_CPP_BUILD_TARGETS=\"$PYTHON_CPP_BUILD_TARGETS gandiva\"\n fi\n \n cmake -GNinja \\\n       $CMAKE_COMMON_FLAGS \\\n       -DARROW_BUILD_TESTS=ON \\\n-      -DARROW_TEST_INCLUDE_LABELS=python \\\n       -DARROW_BUILD_UTILITIES=OFF \\\n       -DARROW_OPTIONAL_INSTALL=ON \\\n       -DARROW_PLASMA=on \\\ndiff --git a/cpp/CMakeLists.txt b/cpp/CMakeLists.txt\nindex f563199c62..60cbe85d10 100644\n--- a/cpp/CMakeLists.txt\n+++ b/cpp/CMakeLists.txt\n@@ -333,10 +333,6 @@ Always OFF if building binaries\"\n   #----------------------------------------------------------------------\n   # Advanced developer options\n \n-  set(ARROW_TEST_INCLUDE_LABELS \"\" CACHE STRING\n-    \"Only build unit tests having the indicated label or labels. \\\n-Pass multiple labels by dividing with semicolons\")\n-\n   option(ARROW_EXTRA_ERROR_CONTEXT\n     \"Compile with extra error context (line numbers, code)\"\n     OFF)\n@@ -466,10 +462,18 @@ endif()\n \n if(NOT ARROW_BUILD_TESTS)\n   set(NO_TESTS 1)\n+else()\n+  add_custom_target(all-tests)\n+  add_custom_target(unittest ctest -L unittest)\n+  add_dependencies(unittest all-tests)\n endif()\n \n if(NOT ARROW_BUILD_BENCHMARKS)\n   set(NO_BENCHMARKS 1)\n+else()\n+  add_custom_target(all-benchmarks)\n+  add_custom_target(benchmark ctest -L benchmark)\n+  add_dependencies(benchmark all-benchmarks)\n endif()\n \n if(NOT ARROW_BUILD_EXAMPLES)\n@@ -516,8 +520,6 @@ include(SetupCxxFlags)\n # Dependencies\n ############################################################\n \n-add_custom_target(arrow_dependencies)\n-\n include(BuildUtils)\n enable_testing()\n \n@@ -712,6 +714,9 @@ if (ARROW_USE_GLOG)\n   add_definitions(\"-DARROW_USE_GLOG\")\n endif()\n \n+add_custom_target(arrow_dependencies)\n+add_dependencies(arrow_dependencies toolchain)\n+\n if (ARROW_STATIC_LINK_LIBS)\n   add_dependencies(arrow_dependencies ${ARROW_STATIC_LINK_LIBS})\n endif()\ndiff --git a/cpp/README.md b/cpp/README.md\nindex a94c4be4f2..5940db1f44 100644\n--- a/cpp/README.md\n+++ b/cpp/README.md\n@@ -105,14 +105,18 @@ export LC_ALL=\"en_US.UTF-8\"\n ## Modular Build Targets\n \n Since there are several major parts of the C++ project, we have provided\n-modular CMake targets for building each component along with its dependencies,\n-unit tests, and benchmarks (if enabled):\n+modular CMake targets for building each library component, group of unit tests\n+and benchmarks, and their dependencies:\n \n * `make arrow` for Arrow core libraries\n * `make parquet` for Parquet libraries\n * `make gandiva` for Gandiva (LLVM expression compiler) libraries\n * `make plasma` for Plasma libraries, server\n \n+To build the unit tests or benchmarks, add `-tests` or `-benchmarks` to the\n+target name. So `make arrow-tests` will build the Arrow core unit tests. Using\n+the `-all` target, e.g. `parquet-all`, will build everything.\n+\n If you wish to only build and install one or more project subcomponents, we\n have provided the CMake option `ARROW_OPTIONAL_INSTALL` to only install targets\n that have been built. For example, if you only wish to build the Parquet\ndiff --git a/cpp/cmake_modules/BuildUtils.cmake b/cpp/cmake_modules/BuildUtils.cmake\nindex 812d0c39e7..7c1db679bf 100644\n--- a/cpp/cmake_modules/BuildUtils.cmake\n+++ b/cpp/cmake_modules/BuildUtils.cmake\n@@ -308,6 +308,9 @@ endfunction()\n # \\arg PREFIX a string to append to the name of the benchmark executable. For\n # example, if you have src/arrow/foo/bar-benchmark.cc, then PREFIX \"foo\" will\n # create test executable foo-bar-benchmark\n+# \\arg LABELS the benchmark label or labels to assign the unit tests to. By\n+# default, benchmarks will go in the \"benchmark\" group. Custom targets for the\n+# group names must exist\n function(ADD_BENCHMARK REL_BENCHMARK_NAME)\n   set(options)\n   set(one_value_args)\n@@ -343,20 +346,22 @@ function(ADD_BENCHMARK REL_BENCHMARK_NAME)\n     set(NO_COLOR \"\")\n   endif()\n \n+  # Add test as dependency of relevant label targets\n+  add_dependencies(all-benchmarks ${BENCHMARK_NAME})\n+  foreach (TARGET ${ARG_LABELS})\n+    add_dependencies(${TARGET} ${BENCHMARK_NAME})\n+  endforeach()\n+\n   if (ARG_DEPENDENCIES)\n     add_dependencies(${BENCHMARK_NAME} ${ARG_DEPENDENCIES})\n   endif()\n \n   if (ARG_LABELS)\n-    set(ARG_LABELS \"${ARG_LABELS}\")\n+    set(ARG_LABELS \"benchmark;${ARG_LABELS}\")\n   else()\n     set(ARG_LABELS benchmark)\n   endif()\n \n-  foreach (TEST_LABEL ${ARG_LABELS})\n-    add_dependencies(${TEST_LABEL} ${BENCHMARK_NAME})\n-  endforeach()\n-\n   add_test(${BENCHMARK_NAME}\n     ${BUILD_SUPPORT_DIR}/run-test.sh ${CMAKE_BINARY_DIR} benchmark ${BENCHMARK_PATH} ${NO_COLOR})\n   set_property(TEST ${BENCHMARK_NAME}\n@@ -389,7 +394,7 @@ endfunction()\n # \\arg LABELS the unit test label or labels to assign the unit tests\n # to. By default, unit tests will go in the \"unittest\" group, but if we have\n # multiple unit tests in some subgroup, you can assign a test to multiple\n-# groups using the syntax unittest;GROUP2;GROUP3. Custom targets for the group\n+# groups use the syntax unittest;GROUP2;GROUP3. Custom targets for the group\n # names must exist\n function(ADD_TEST_CASE REL_TEST_NAME)\n   set(options NO_VALGRIND ENABLED)\n@@ -401,18 +406,6 @@ function(ADD_TEST_CASE REL_TEST_NAME)\n     message(SEND_ERROR \"Error: unrecognized arguments: ${ARG_UNPARSED_ARGUMENTS}\")\n   endif()\n \n-  if (NOT \"${ARROW_TEST_INCLUDE_LABELS}\" STREQUAL \"\")\n-    set(_SKIP_TEST TRUE)\n-    foreach (_INCLUDED_LABEL ${ARROW_TEST_INCLUDE_LABELS})\n-      if (\"${ARG_LABELS}\" MATCHES \"${_INCLUDED_LABEL}\")\n-        set(_SKIP_TEST FALSE)\n-      endif()\n-    endforeach()\n-    if (_SKIP_TEST)\n-      return()\n-    endif()\n-  endif()\n-\n   if (NO_TESTS AND NOT ARG_ENABLED)\n     return()\n   endif()\n@@ -422,12 +415,6 @@ function(ADD_TEST_CASE REL_TEST_NAME)\n     set(TEST_NAME \"${ARG_PREFIX}-${TEST_NAME}\")\n   endif()\n \n-  if (ARG_LABELS)\n-    set(ARG_LABELS \"${ARG_LABELS}\")\n-  else()\n-    set(ARG_LABELS unittest)\n-  endif()\n-\n   if (ARG_SOURCES)\n     set(SOURCES ${ARG_SOURCES})\n   else()\n@@ -458,10 +445,6 @@ function(ADD_TEST_CASE REL_TEST_NAME)\n     add_dependencies(${TEST_NAME} ${ARG_EXTRA_DEPENDENCIES})\n   endif()\n \n-  foreach (TEST_LABEL ${ARG_LABELS})\n-    add_dependencies(${TEST_LABEL} ${TEST_NAME})\n-  endforeach()\n-\n   if (ARROW_TEST_MEMCHECK AND NOT ARG_NO_VALGRIND)\n     SET_PROPERTY(TARGET ${TEST_NAME}\n       APPEND_STRING PROPERTY\n@@ -477,6 +460,18 @@ function(ADD_TEST_CASE REL_TEST_NAME)\n       ${BUILD_SUPPORT_DIR}/run-test.sh ${CMAKE_BINARY_DIR} test ${TEST_PATH})\n   endif()\n \n+  # Add test as dependency of relevant targets\n+  add_dependencies(all-tests ${TEST_NAME})\n+  foreach (TARGET ${ARG_LABELS})\n+    add_dependencies(${TARGET} ${TEST_NAME})\n+  endforeach()\n+\n+  if (ARG_LABELS)\n+    set(ARG_LABELS \"unittest;${ARG_LABELS}\")\n+  else()\n+    set(ARG_LABELS unittest)\n+  endif()\n+\n   set_property(TEST ${TEST_NAME}\n     APPEND PROPERTY\n     LABELS ${ARG_LABELS})\n@@ -537,7 +532,6 @@ function(ADD_ARROW_EXAMPLE REL_EXAMPLE_NAME)\n     add_dependencies(${EXAMPLE_NAME} ${ARG_DEPENDENCIES})\n   endif()\n \n-\n   add_test(${EXAMPLE_NAME} ${EXAMPLE_PATH})\n   set_tests_properties(${EXAMPLE_NAME} PROPERTIES LABELS \"example\")\n endfunction()\ndiff --git a/cpp/cmake_modules/ThirdpartyToolchain.cmake b/cpp/cmake_modules/ThirdpartyToolchain.cmake\nindex c007b1c225..d493de75a5 100644\n--- a/cpp/cmake_modules/ThirdpartyToolchain.cmake\n+++ b/cpp/cmake_modules/ThirdpartyToolchain.cmake\n@@ -15,6 +15,8 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+add_custom_target(toolchain)\n+\n # ----------------------------------------------------------------------\n # Toolchain linkage options\n \n@@ -401,7 +403,7 @@ if (ARROW_BOOST_VENDORED)\n     ${EP_LOG_OPTIONS})\n   set(Boost_INCLUDE_DIR \"${BOOST_PREFIX}\")\n   set(Boost_INCLUDE_DIRS \"${BOOST_INCLUDE_DIR}\")\n-  add_dependencies(arrow_dependencies boost_ep)\n+  add_dependencies(toolchain boost_ep)\n else()\n   if (MSVC)\n     # disable autolinking in boost\n@@ -506,15 +508,14 @@ if(\"${DOUBLE_CONVERSION_HOME}\" STREQUAL \"\")\n     CMAKE_ARGS ${DOUBLE_CONVERSION_CMAKE_ARGS}\n     BUILD_BYPRODUCTS \"${DOUBLE_CONVERSION_STATIC_LIB}\")\n   set(DOUBLE_CONVERSION_VENDORED 1)\n+  add_dependencies(toolchain double-conversion_ep)\n else()\n   find_package(double-conversion REQUIRED\n     PATHS \"${DOUBLE_CONVERSION_HOME}\")\n   set(DOUBLE_CONVERSION_VENDORED 0)\n endif()\n \n-if (DOUBLE_CONVERSION_VENDORED)\n-  add_dependencies(arrow_dependencies double-conversion_ep)\n-else()\n+if (NOT DOUBLE_CONVERSION_VENDORED)\n   get_property(DOUBLE_CONVERSION_STATIC_LIB TARGET double-conversion::double-conversion\n     PROPERTY LOCATION)\n   get_property(DOUBLE_CONVERSION_INCLUDE_DIR TARGET double-conversion::double-conversion\n@@ -532,9 +533,6 @@ message(STATUS \"double-conversion static library: ${DOUBLE_CONVERSION_STATIC_LIB\n # ----------------------------------------------------------------------\n # Google gtest & gflags\n \n-add_custom_target(unittest ctest -L unittest)\n-add_custom_target(benchmark ctest -L benchmark)\n-\n if(ARROW_BUILD_TESTS OR ARROW_GANDIVA_BUILD_TESTS\n    OR ARROW_BUILD_BENCHMARKS)\n   if(\"${GTEST_HOME}\" STREQUAL \"\")\n@@ -699,6 +697,7 @@ if (ARROW_IPC)\n     ExternalProject_Get_Property(rapidjson_ep SOURCE_DIR)\n     set(RAPIDJSON_INCLUDE_DIR \"${SOURCE_DIR}/include\")\n     set(RAPIDJSON_VENDORED 1)\n+    add_dependencies(toolchain rapidjson_ep)\n   else()\n     set(RAPIDJSON_INCLUDE_DIR \"${RAPIDJSON_HOME}/include\")\n     set(RAPIDJSON_VENDORED 0)\n@@ -706,10 +705,6 @@ if (ARROW_IPC)\n   message(STATUS \"RapidJSON include dir: ${RAPIDJSON_INCLUDE_DIR}\")\n   include_directories(SYSTEM ${RAPIDJSON_INCLUDE_DIR})\n \n-  if(RAPIDJSON_VENDORED)\n-    add_dependencies(arrow_dependencies rapidjson_ep)\n-  endif()\n-\n   ## Flatbuffers\n   if(\"${FLATBUFFERS_HOME}\" STREQUAL \"\")\n     set(FLATBUFFERS_PREFIX \"${CMAKE_CURRENT_BINARY_DIR}/flatbuffers_ep-prefix/src/flatbuffers_ep-install\")\n@@ -733,15 +728,12 @@ if (ARROW_IPC)\n     set(FLATBUFFERS_INCLUDE_DIR \"${FLATBUFFERS_PREFIX}/include\")\n     set(FLATBUFFERS_COMPILER \"${FLATBUFFERS_PREFIX}/bin/flatc\")\n     set(FLATBUFFERS_VENDORED 1)\n+    add_dependencies(toolchain flatbuffers_ep)\n   else()\n     find_package(Flatbuffers REQUIRED)\n     set(FLATBUFFERS_VENDORED 0)\n   endif()\n \n-  if(FLATBUFFERS_VENDORED)\n-    add_dependencies(arrow_dependencies flatbuffers_ep)\n-  endif()\n-\n   message(STATUS \"Flatbuffers include dir: ${FLATBUFFERS_INCLUDE_DIR}\")\n   message(STATUS \"Flatbuffers compiler: ${FLATBUFFERS_COMPILER}\")\n   include_directories(SYSTEM ${FLATBUFFERS_INCLUDE_DIR})\n@@ -1155,6 +1147,7 @@ if (ARROW_GANDIVA)\n       CMAKE_ARGS ${RE2_CMAKE_ARGS}\n       BUILD_BYPRODUCTS \"${RE2_STATIC_LIB}\")\n     set (RE2_VENDORED 1)\n+    add_dependencies(toolchain re2_ep)\n   else ()\n     find_package (RE2 REQUIRED)\n     set (RE2_VENDORED 0)\n@@ -1171,10 +1164,6 @@ if (ARROW_GANDIVA)\n       STATIC_LIB ${RE2_STATIC_LIB})\n     set(RE2_LIBRARY re2_static)\n   endif()\n-\n-  if (RE2_VENDORED)\n-    add_dependencies (arrow_dependencies re2_ep)\n-  endif ()\n endif ()\n \n \n@@ -1317,6 +1306,8 @@ if (ARROW_ORC)\n       CMAKE_ARGS ${ORC_CMAKE_ARGS}\n       ${EP_LOG_OPTIONS})\n \n+    add_dependencies(toolchain orc_ep)\n+\n     set(ORC_VENDORED 1)\n     add_dependencies(orc_ep ${ZLIB_LIBRARY})\n     if (LZ4_VENDORED)\n@@ -1342,7 +1333,6 @@ if (ARROW_ORC)\n   if (ORC_VENDORED)\n     add_dependencies(orc_static orc_ep)\n   endif()\n-\n endif()\n \n # ----------------------------------------------------------------------\ndiff --git a/cpp/src/arrow/CMakeLists.txt b/cpp/src/arrow/CMakeLists.txt\nindex 9291addca0..8dd2ac082d 100644\n--- a/cpp/src/arrow/CMakeLists.txt\n+++ b/cpp/src/arrow/CMakeLists.txt\n@@ -15,13 +15,17 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+add_custom_target(arrow-all)\n add_custom_target(arrow)\n+add_custom_target(arrow-benchmarks)\n+add_custom_target(arrow-tests)\n+add_dependencies(arrow-all arrow arrow-tests arrow-benchmarks)\n \n # Adding unit tests part of the \"arrow\" portion of the test suite\n function(ADD_ARROW_TEST REL_TEST_NAME)\n   set(options)\n   set(one_value_args PREFIX)\n-  set(multi_value_args)\n+  set(multi_value_args LABELS)\n   cmake_parse_arguments(ARG \"${options}\" \"${one_value_args}\" \"${multi_value_args}\" ${ARGN})\n \n   if (ARG_PREFIX)\n@@ -29,9 +33,16 @@ function(ADD_ARROW_TEST REL_TEST_NAME)\n   else()\n     set(PREFIX \"arrow\")\n   endif()\n+\n+  if (ARG_LABELS)\n+    set(LABELS ${ARG_LABELS})\n+  else()\n+    set(LABELS \"arrow-tests\")\n+  endif()\n+\n   ADD_TEST_CASE(${REL_TEST_NAME}\n     PREFIX ${PREFIX}\n-    LABELS \"unittest;arrow\"\n+    LABELS ${LABELS}\n     ${ARG_UNPARSED_ARGUMENTS})\n endfunction()\n \n@@ -47,7 +58,7 @@ function(ADD_ARROW_BENCHMARK REL_TEST_NAME)\n   endif()\n   ADD_BENCHMARK(${REL_TEST_NAME}\n     PREFIX ${PREFIX}\n-    LABELS \"benchmark;arrow\"\n+    LABELS \"arrow-benchmarks\"\n     ${ARG_UNPARSED_ARGUMENTS})\n endfunction()\n \n@@ -215,6 +226,8 @@ ADD_ARROW_LIB(arrow\n   SHARED_PRIVATE_LINK_LIBS ${ARROW_SHARED_PRIVATE_LINK_LIBS}\n   STATIC_LINK_LIBS ${ARROW_STATIC_LINK_LIBS})\n \n+add_dependencies(arrow ${ARROW_LIBRARIES})\n+\n if (ARROW_BUILD_STATIC AND WIN32)\n   target_compile_definitions(arrow_static PUBLIC ARROW_STATIC)\n endif()\ndiff --git a/cpp/src/arrow/dbi/hiveserver2/CMakeLists.txt b/cpp/src/arrow/dbi/hiveserver2/CMakeLists.txt\nindex 9fd7f924d3..d2640a66b2 100644\n--- a/cpp/src/arrow/dbi/hiveserver2/CMakeLists.txt\n+++ b/cpp/src/arrow/dbi/hiveserver2/CMakeLists.txt\n@@ -16,6 +16,7 @@\n # under the License.\n \n add_custom_target(arrow_hiveserver2)\n+add_custom_target(arrow_hiveserver2-tests)\n \n # Headers: top level\n ARROW_INSTALL_ALL_HEADERS(\"arrow/dbi/hiveserver2\")\n@@ -103,9 +104,9 @@ set(ARROW_HIVESERVER2_TEST_LINK_LIBS\n   thriftstatic)\n \n if (ARROW_BUILD_TESTS)\n-  ADD_ARROW_TEST(hiveserver2-test\n+  ADD_TEST_CASE(hiveserver2-test\n     STATIC_LINK_LIBS \"${ARROW_HIVESERVER2_TEST_LINK_LIBS}\"\n-    LABELS \"arrow_hiveserver2\"\n+    LABELS \"arrow_hiveserver2-tests\"\n   )\n   if (TARGET arrow-hiveserver2-test)\n     set_property(TARGET arrow-hiveserver2-test\ndiff --git a/cpp/src/arrow/flight/CMakeLists.txt b/cpp/src/arrow/flight/CMakeLists.txt\nindex aa56269a89..2feaee1160 100644\n--- a/cpp/src/arrow/flight/CMakeLists.txt\n+++ b/cpp/src/arrow/flight/CMakeLists.txt\n@@ -75,7 +75,6 @@ set(ARROW_FLIGHT_SRCS\n \n ADD_ARROW_LIB(arrow_flight\n   SOURCES ${ARROW_FLIGHT_SRCS}\n-  DEPENDENCIES arrow_dependencies\n   SHARED_LINK_LIBS arrow_shared ${ARROW_FLIGHT_STATIC_LINK_LIBS}\n   STATIC_LINK_LIBS arrow_static ${ARROW_FLIGHT_STATIC_LINK_LIBS})\n \ndiff --git a/cpp/src/arrow/gpu/CMakeLists.txt b/cpp/src/arrow/gpu/CMakeLists.txt\nindex 8b69c654bb..2fcdf23e42 100644\n--- a/cpp/src/arrow/gpu/CMakeLists.txt\n+++ b/cpp/src/arrow/gpu/CMakeLists.txt\n@@ -19,6 +19,12 @@\n # arrow_cuda\n #######################################\n \n+add_custom_target(arrow_cuda-all)\n+add_custom_target(arrow_cuda)\n+add_custom_target(arrow_cuda-benchmarks)\n+add_custom_target(arrow_cuda-tests)\n+add_dependencies(arrow_cuda-all arrow_cuda arrow_cuda-tests arrow_cuda-benchmarks)\n+\n if (DEFINED ENV{CUDA_HOME})\n   set(CUDA_TOOLKIT_ROOT_DIR \"$ENV{CUDA_HOME}\")\n endif()\n@@ -49,6 +55,8 @@ ADD_ARROW_LIB(arrow_cuda\n   STATIC_LINK_LIBS ${ARROW_CUDA_SHARED_LINK_LIBS}\n )\n \n+add_dependencies(arrow_cuda ${ARROW_CUDA_LIBRARIES})\n+\n foreach(LIB_TARGET ${ARROW_CUDA_LIBRARIES})\n   target_compile_definitions(${LIB_TARGET}\n     PRIVATE ARROW_EXPORTING)\n@@ -77,9 +85,10 @@ if (ARROW_BUILD_TESTS)\n endif()\n \n if (ARROW_BUILD_BENCHMARKS)\n-  cuda_add_executable(cuda-benchmark cuda-benchmark.cc)\n-  target_link_libraries(cuda-benchmark\n+  cuda_add_executable(arrow-cuda-benchmark cuda-benchmark.cc)\n+  target_link_libraries(arrow-cuda-benchmark\n     arrow_cuda_shared\n     gtest_static\n     ${ARROW_BENCHMARK_LINK_LIBS})\n+  add_dependencies(arrow_cuda-benchmarks arrow-cuda-benchmark)\n endif()\ndiff --git a/cpp/src/arrow/ipc/CMakeLists.txt b/cpp/src/arrow/ipc/CMakeLists.txt\nindex c44f7b9fe1..422e72e2ed 100644\n--- a/cpp/src/arrow/ipc/CMakeLists.txt\n+++ b/cpp/src/arrow/ipc/CMakeLists.txt\n@@ -17,7 +17,7 @@\n \n # Targets required for protocol integration testing\n add_custom_target(integration)\n-add_dependencies(arrow integration)\n+add_dependencies(arrow-tests integration)\n \n #######################################\n # Messaging and interprocess communication\ndiff --git a/cpp/src/arrow/python/CMakeLists.txt b/cpp/src/arrow/python/CMakeLists.txt\nindex 98c105ae62..cccbf09d4f 100644\n--- a/cpp/src/arrow/python/CMakeLists.txt\n+++ b/cpp/src/arrow/python/CMakeLists.txt\n@@ -22,7 +22,10 @@\n find_package(PythonLibsNew REQUIRED)\n find_package(NumPy REQUIRED)\n \n+add_custom_target(arrow_python-all)\n add_custom_target(arrow_python)\n+add_custom_target(arrow_python-tests)\n+add_dependencies(arrow_python-all arrow_python arrow_python-tests)\n \n set(ARROW_PYTHON_SRCS\n   arrow_to_pandas.cc\n@@ -130,6 +133,6 @@ if (ARROW_BUILD_TESTS)\n     STATIC_LINK_LIBS \"${ARROW_PYTHON_TEST_LINK_LIBS}\"\n     EXTRA_LINK_LIBS ${PYTHON_LIBRARIES}\n     EXTRA_INCLUDES \"${ARROW_PYTHON_INCLUDES}\"\n-    LABELS \"arrow_python\"\n+    LABELS \"arrow_python-tests\"\n     NO_VALGRIND)\n endif()\ndiff --git a/cpp/src/gandiva/CMakeLists.txt b/cpp/src/gandiva/CMakeLists.txt\nindex da0d3bba69..8052db5e85 100644\n--- a/cpp/src/gandiva/CMakeLists.txt\n+++ b/cpp/src/gandiva/CMakeLists.txt\n@@ -15,12 +15,15 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-project(gandiva)\n-\n-find_package(LLVM)\n-\n # For \"make gandiva\" to build everything Gandiva-related\n+add_custom_target(gandiva-all)\n add_custom_target(gandiva)\n+add_custom_target(gandiva-tests)\n+add_custom_target(gandiva-benchmarks)\n+\n+add_dependencies(gandiva-all gandiva gandiva-tests gandiva-benchmarks)\n+\n+find_package(LLVM)\n \n # Set the path where the byte-code files will be installed.\n set(GANDIVA_BC_INSTALL_DIR\n@@ -80,7 +83,7 @@ endif()\n ADD_ARROW_LIB(gandiva\n   SOURCES ${SRC_FILES}\n   OUTPUTS GANDIVA_LIBRARIES\n-  DEPENDENCIES arrow_dependencies precompiled\n+  DEPENDENCIES precompiled\n   EXTRA_INCLUDES\n   $<TARGET_PROPERTY:LLVM::LLVM_INTERFACE,INTERFACE_INCLUDE_DIRECTORIES>\n   SHARED_LINK_LIBS arrow_shared\n@@ -120,7 +123,7 @@ function(ADD_GANDIVA_TEST REL_TEST_NAME)\n   set(TEST_ARGUMENTS\n     ENABLED\n     PREFIX \"gandiva\"\n-    LABELS \"unittest;gandiva\"\n+    LABELS \"gandiva-tests\"\n     ${ARG_UNPARSED_ARGUMENTS})\n \n   # and uses less disk space, but in some cases we need to force static\ndiff --git a/cpp/src/gandiva/jni/CMakeLists.txt b/cpp/src/gandiva/jni/CMakeLists.txt\nindex ab04f536b4..a07d3903a7 100644\n--- a/cpp/src/gandiva/jni/CMakeLists.txt\n+++ b/cpp/src/gandiva/jni/CMakeLists.txt\n@@ -15,8 +15,6 @@\n # specific language governing permissions and limitations\n # under the License.\n \n-project(gandiva_jni)\n-\n if(CMAKE_VERSION VERSION_LESS 3.11)\n   message(FATAL_ERROR \"Building the Gandiva JNI bindings requires CMake version >= 3.11\")\n endif()\ndiff --git a/cpp/src/gandiva/precompiled/CMakeLists.txt b/cpp/src/gandiva/precompiled/CMakeLists.txt\nindex 0792fd6421..2af49084bf 100644\n--- a/cpp/src/gandiva/precompiled/CMakeLists.txt\n+++ b/cpp/src/gandiva/precompiled/CMakeLists.txt\n@@ -58,7 +58,7 @@ function(add_precompiled_unit_test REL_TEST_NAME)\n   set(TEST_NAME \"gandiva-precompiled-${TEST_NAME}\")\n \n   add_executable(${TEST_NAME} ${REL_TEST_NAME} ${ARGN})\n-  add_dependencies(gandiva ${TEST_NAME})\n+  add_dependencies(gandiva-tests ${TEST_NAME})\n   target_include_directories(${TEST_NAME} PRIVATE ${CMAKE_SOURCE_DIR}/src)\n   target_link_libraries(${TEST_NAME}\n     PRIVATE ${ARROW_TEST_LINK_LIBS} ${RE2_LIBRARY}\ndiff --git a/cpp/src/parquet/CMakeLists.txt b/cpp/src/parquet/CMakeLists.txt\nindex 995c39adb7..4eb8f68a2b 100644\n--- a/cpp/src/parquet/CMakeLists.txt\n+++ b/cpp/src/parquet/CMakeLists.txt\n@@ -15,6 +15,12 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+add_custom_target(parquet-all)\n+add_custom_target(parquet)\n+add_custom_target(parquet-benchmarks)\n+add_custom_target(parquet-tests)\n+add_dependencies(parquet-all parquet parquet-tests parquet-benchmarks)\n+\n file(READ \"${CMAKE_CURRENT_SOURCE_DIR}/.parquetcppversion\" PARQUET_VERSION)\n string(REPLACE \"\\n\" \"\" PARQUET_VERSION \"${PARQUET_VERSION}\")\n string(REGEX MATCH \"^([0-9]+\\.[0-9]+\\.[0-9]+(\\.[0-9]+)?)\" VERSION ${PARQUET_VERSION})\n@@ -22,9 +28,6 @@ if(NOT VERSION)\n   message(FATAL_ERROR \"invalid .parquetcppversion\")\n endif()\n \n-# For \"make parquet\" to build everything Parquet-related\n-add_custom_target(parquet)\n-\n function(ADD_PARQUET_TEST REL_TEST_NAME)\n   set(options USE_STATIC_LINKING)\n   set(one_value_args)\n@@ -34,19 +37,21 @@ function(ADD_PARQUET_TEST REL_TEST_NAME)\n     message(SEND_ERROR \"Error: unrecognized arguments: ${ARG_UNPARSED_ARGUMENTS}\")\n   endif()\n \n+  set(TEST_ARGUMENTS\n+    PREFIX \"parquet\"\n+    LABELS \"parquet-tests\")\n+\n   # By default we prefer shared linking with libparquet, as it's faster\n   # and uses less disk space, but in some cases we need to force static\n   # linking (see rationale below).\n   if (ARG_USE_STATIC_LINKING)\n     ADD_TEST_CASE(${REL_TEST_NAME}\n       STATIC_LINK_LIBS ${PARQUET_STATIC_TEST_LINK_LIBS}\n-      PREFIX \"parquet\"\n-      LABELS \"unittest;parquet\")\n+      ${TEST_ARGUMENTS})\n   else()\n     ADD_TEST_CASE(${REL_TEST_NAME}\n       STATIC_LINK_LIBS ${PARQUET_SHARED_TEST_LINK_LIBS}\n-      PREFIX \"parquet\"\n-      LABELS \"unittest;parquet\")\n+      ${TEST_ARGUMENTS})\n   endif()\n endfunction()\n \n@@ -217,6 +222,8 @@ ADD_ARROW_LIB(parquet\n   STATIC_LINK_LIBS ${PARQUET_STATIC_LINK_LIBS}\n )\n \n+add_dependencies(parquet ${PARQUET_LIBRARIES})\n+\n # Thrift requires these definitions for some types that we use\n foreach(LIB_TARGET ${PARQUET_LIBRARIES})\n   target_compile_definitions(${LIB_TARGET}\n@@ -232,8 +239,6 @@ foreach(LIB_TARGET ${PARQUET_LIBRARIES})\n   endif()\n endforeach()\n \n-add_dependencies(parquet ${PARQUET_LIBRARIES})\n-\n add_subdirectory(api)\n add_subdirectory(arrow)\n add_subdirectory(util)\n@@ -271,7 +276,9 @@ ADD_PARQUET_TEST(schema-test USE_STATIC_LINKING)\n \n ADD_ARROW_BENCHMARK(column-io-benchmark\n   PREFIX \"parquet\"\n+  LABELS \"parquet-benchmarks\"\n   EXTRA_LINK_LIBS ${PARQUET_BENCHMARK_LINK_LIBRARIES})\n ADD_ARROW_BENCHMARK(encoding-benchmark\n   PREFIX \"parquet\"\n+  LABELS \"parquet-benchmarks\"\n   EXTRA_LINK_LIBS ${PARQUET_BENCHMARK_LINK_LIBRARIES})\ndiff --git a/cpp/src/parquet/arrow/CMakeLists.txt b/cpp/src/parquet/arrow/CMakeLists.txt\nindex 89afc39a23..f4e4f7e0b9 100644\n--- a/cpp/src/parquet/arrow/CMakeLists.txt\n+++ b/cpp/src/parquet/arrow/CMakeLists.txt\n@@ -20,9 +20,7 @@ ADD_PARQUET_TEST(arrow-reader-writer-test)\n \n ADD_BENCHMARK(reader-writer-benchmark\n   PREFIX \"parquet-arrow\"\n+  LABELS \"parquet-benchmarks\"\n   EXTRA_LINK_LIBS ${PARQUET_BENCHMARK_LINK_LIBRARIES})\n-if (TARGET parquet-arrow-reader-writer-benchmark)\n-  add_dependencies(parquet parquet-arrow-reader-writer-benchmark)\n-endif()\n \n ARROW_INSTALL_ALL_HEADERS(\"parquet/arrow\")\ndiff --git a/cpp/src/plasma/CMakeLists.txt b/cpp/src/plasma/CMakeLists.txt\nindex 83c201d0f4..d9c7dcaede 100644\n--- a/cpp/src/plasma/CMakeLists.txt\n+++ b/cpp/src/plasma/CMakeLists.txt\n@@ -15,7 +15,11 @@\n # specific language governing permissions and limitations\n # under the License.\n \n+add_custom_target(plasma-all)\n add_custom_target(plasma)\n+add_custom_target(plasma-benchmarks)\n+add_custom_target(plasma-tests)\n+add_dependencies(plasma-all plasma plasma-tests plasma-benchmarks)\n \n # For the moment, Plasma is versioned like Arrow\n project(plasma VERSION \"${ARROW_BASE_VERSION}\")\n@@ -199,7 +203,7 @@ function(ADD_PLASMA_TEST REL_TEST_NAME)\n   cmake_parse_arguments(ARG \"${options}\" \"${one_value_args}\" \"${multi_value_args}\" ${ARGN})\n   ADD_TEST_CASE(${REL_TEST_NAME}\n     PREFIX \"plasma\"\n-    LABELS \"unittest;plasma\"\n+    LABELS \"plasma-tests\"\n     ${ARG_UNPARSED_ARGUMENTS})\n endfunction()\n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-17T21:23:58.190+0000",
                    "updated": "2018-12-17T21:23:58.190+0000",
                    "started": "2018-12-17T21:23:58.189+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "176251",
                    "issueId": "13204402"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 1800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4df752cc[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@32846579[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@31c0fa7f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@20feee93[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@78e5cb37[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@bcaf119[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3d6fe11d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6a320a55[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3cd8c857[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@60c6b4ec[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2263d6e0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@58f9005b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 1800,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Dec 17 21:23:48 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-12-17T21:23:48.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4026/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-12-14T04:06:18.000+0000",
        "updated": "2018-12-17T21:23:58.000+0000",
        "timeoriginalestimate": null,
        "description": "Because some tests depend on libraries from another component (e.g. \"gandiva\" relies on \"arrow\"), if we build \"gandiva\" and {{ARROW_BUILD_TESTS=ON}} then we must also built the tests attached to the \"arrow\" target. This can be hacked around using the {{ARROW_TEST_INCLUDE_LABELS}} option, but the best thing would probably be to create separate modular targets for the unit tests:\r\n\r\n* \"arrow-tests\" depends on \"arrow\"\r\n* \"parquet-tests\" depends on \"parquet\", \"arrow\"\r\n* \"gandiva-test\" depends on \"gandiva\", \"arrow\"",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "0.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 1800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Use separate modular $COMPONENT-test targets for unit tests",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13204402/comment/16723380",
                    "id": "16723380",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 3204\n[https://github.com/apache/arrow/pull/3204]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-12-17T21:23:48.154+0000",
                    "updated": "2018-12-17T21:23:48.154+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|s01iiw:",
        "customfield_12314139": null
    }
}