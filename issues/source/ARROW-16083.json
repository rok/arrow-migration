{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13436918",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436918",
    "key": "ARROW-16083",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351550",
                "id": "12351550",
                "name": "9.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-08-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icexelloss",
            "name": "icexelloss",
            "key": "icexelloss",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Li Jin",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icexelloss",
            "name": "icexelloss",
            "key": "icexelloss",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Li Jin",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=icexelloss",
            "name": "icexelloss",
            "key": "icexelloss",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Li Jin",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 55200,
            "total": 55200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 55200,
            "total": 55200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16083/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 92,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436918/worklog/763876",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss opened a new pull request, #13028:\nURL: https://github.com/apache/arrow/pull/13028\n\n   ## Overview\r\n   \r\n   This is a work in progress implementation of the AsofJoin node in Arrow C++ compute. The code needs quite a bit of clean up but I have worked on this long enough that I think I benefit from some inputs/comments from Arrow maintainers about the high levels. \r\n   \r\n   All Credit to @stmrtn (Steven Martin) who is the original author of the code.\r\n   \r\n   ## Implementation\r\n   There are quite a bit of code and here is how it works at the high level:\r\n   \r\n   Classes:\r\n   * `InputState`: A class that handles queuing for input batches and purging unneeded batches. There are one input state per input table.\r\n   * `MemoStore`: A class that responsible for advancing row index and getting the latest row for each key for each key given a timestamp. (Latest timestamp that is <= the given timestamp) \r\n   * `CompositeReferenceTable`: A class that is responsible for storing temporary output rows and produces RecordBatches from those rows. \r\n   \r\n   Algorithm:\r\n   * The node takes one left side table and n right side tables, and produces a joined table\r\n   * It is currently assumed that each input table will call `InputReceived` with time-ordered batches. `InputReceived` will queue the batches inside `InputState` (it doesn't do any work). There is a separate process thread that wakes up when there is new inputs and attempts to produces a output batch. If the current data is not enough to produce the output batch (i.e., we have not received all the potential right side rows that could be a match for the current left batch), it will wait for new inputs.\r\n   * The process thread works as follows:\r\n     1. Advance left row index for the current batch. Then advance right tables to get the latest right row (i.e., latest right row with timestamp <= left row timestamp)\r\n     2. Once advances are done, it will continue to check to produce the output row for the current left row\r\n     3. Go to 1 until left batches are processed \r\n     4. Output batch for the current left batch\r\n     5. Purge batches that are no longer needed\r\n     6. Wait until enough batches are received to process the next left batch\r\n   \r\n   Entry point for the algorithm is `process()`\r\n   \r\n   ## TODO\r\n   - [ ] More Tests\r\n   - [ ] Decide if we can replace `CompositeReferenceTable` with sth that already exits (perhaps `RowEncoder`?)\r\n   - [ ] Handle more datatypes (both key and value)\r\n   - [ ] Handle multiple keys\r\n   - [ ] Life cycle management for the process thread (or whether or not we should have it)\r\n   - [ ] Lint & Code Style\r\n   \n\n\n",
                    "created": "2022-04-28T20:46:36.889+0000",
                    "updated": "2022-04-28T20:46:36.889+0000",
                    "started": "2022-04-28T20:46:36.889+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "763876",
                    "issueId": "13436918"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436918/worklog/763877",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13028:\nURL: https://github.com/apache/arrow/pull/13028#issuecomment-1112639836\n\n   <!--\n     Licensed to the Apache Software Foundation (ASF) under one\n     or more contributor license agreements.  See the NOTICE file\n     distributed with this work for additional information\n     regarding copyright ownership.  The ASF licenses this file\n     to you under the Apache License, Version 2.0 (the\n     \"License\"); you may not use this file except in compliance\n     with the License.  You may obtain a copy of the License at\n   \n       http://www.apache.org/licenses/LICENSE-2.0\n   \n     Unless required by applicable law or agreed to in writing,\n     software distributed under the License is distributed on an\n     \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n     KIND, either express or implied.  See the License for the\n     specific language governing permissions and limitations\n     under the License.\n   -->\n   \n   Thanks for opening a pull request!\n   \n   If this is not a [minor PR](https://github.com/apache/arrow/blob/master/CONTRIBUTING.md#Minor-Fixes). Could you open an issue for this pull request on JIRA? https://issues.apache.org/jira/browse/ARROW\n   \n   Opening JIRAs ahead of time contributes to the [Openness](http://theapacheway.com/open/#:~:text=Openness%20allows%20new%20users%20the,must%20happen%20in%20the%20open.) of the Apache Arrow project.\n   \n   Then could you also rename pull request title in the following format?\n   \n       ARROW-${JIRA_ID}: [${COMPONENT}] ${SUMMARY}\n   \n   or\n   \n       MINOR: [${COMPONENT}] ${SUMMARY}\n   \n   See also:\n   \n     * [Other pull requests](https://github.com/apache/arrow/pulls/)\n     * [Contribution Guidelines - How to contribute patches](https://arrow.apache.org/docs/developers/contributing.html#how-to-contribute-patches)\n   \n\n\n",
                    "created": "2022-04-28T20:46:56.890+0000",
                    "updated": "2022-04-28T20:46:56.890+0000",
                    "started": "2022-04-28T20:46:56.889+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "763877",
                    "issueId": "13436918"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436918/worklog/763878",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on code in PR #13028:\nURL: https://github.com/apache/arrow/pull/13028#discussion_r861298143\n\n\n##########\ncpp/src/arrow/compute/exec/asof_join.cc:\n##########\n@@ -0,0 +1,59 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/exec/asof_join.h\"\n+#include <iostream>\n+\n+#include <arrow/api.h>\n+#include <arrow/dataset/api.h>\n+#include <arrow/dataset/plan.h>\n+#include <arrow/filesystem/api.h>\n+#include <arrow/io/api.h>\n+//#include <arrow/io/util_internal.h>\n+#include <arrow/compute/api.h>\n+#include <arrow/compute/exec/exec_plan.h>\n+#include <arrow/compute/exec/options.h>\n+#include <arrow/ipc/reader.h>\n+#include <arrow/ipc/writer.h>\n+#include <arrow/util/async_generator.h>\n+#include <arrow/util/checked_cast.h>\n+#include <arrow/util/counting_semaphore.h>  // so we don't need to require C++20\n+#include <arrow/util/optional.h>\n+#include <arrow/util/thread_pool.h>\n+#include <algorithm>\n+#include <atomic>\n+#include <future>\n+#include <mutex>\n+#include <optional>\n+#include <thread>\n+\n+#include <omp.h>\n+\n+#include \"concurrent_bounded_queue.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+class AsofJoinBasicImpl : public AsofJoinImpl {};\n\nReview Comment:\n   This is not really used right now\n\n\n\n",
                    "created": "2022-04-28T20:47:29.097+0000",
                    "updated": "2022-04-28T20:47:29.097+0000",
                    "started": "2022-04-28T20:47:29.094+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "763878",
                    "issueId": "13436918"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436918/worklog/763880",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13028:\nURL: https://github.com/apache/arrow/pull/13028#issuecomment-1112641009\n\n   https://issues.apache.org/jira/browse/ARROW-16083\n\n\n",
                    "created": "2022-04-28T20:48:27.604+0000",
                    "updated": "2022-04-28T20:48:27.604+0000",
                    "started": "2022-04-28T20:48:27.603+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "763880",
                    "issueId": "13436918"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436918/worklog/763881",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13028:\nURL: https://github.com/apache/arrow/pull/13028#issuecomment-1112641033\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-04-28T20:48:29.552+0000",
                    "updated": "2022-04-28T20:48:29.552+0000",
                    "started": "2022-04-28T20:48:29.552+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "763881",
                    "issueId": "13436918"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436918/worklog/763885",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on PR #13028:\nURL: https://github.com/apache/arrow/pull/13028#issuecomment-1112643404\n\n   @westonpace Not sure if you are the best person to review this. I think I got the basics working but I felt it's also a bit messy. So I am looking for any feedback that can help improve it. Especially the around 1. ergonomic around managing thread/execution model and 2. reusing existing utils/classes for certain things. The algorithm itself is not complicated IMO so it's more like \"how  do I do it in the Arrow way\".\n\n\n",
                    "created": "2022-04-28T20:51:32.385+0000",
                    "updated": "2022-04-28T20:51:32.385+0000",
                    "started": "2022-04-28T20:51:32.385+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "763885",
                    "issueId": "13436918"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436918/worklog/763886",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on code in PR #13028:\nURL: https://github.com/apache/arrow/pull/13028#discussion_r861302203\n\n\n##########\ncpp/src/arrow/compute/exec/asof_join_node.cc:\n##########\n@@ -0,0 +1,870 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <iostream>\n+#include <unordered_set>\n+\n+#include \"arrow/compute/exec/asof_join.h\"\n+#include \"arrow/compute/exec/exec_plan.h\"\n+#include \"arrow/compute/exec/options.h\"\n+#include \"arrow/compute/exec/schema_util.h\"\n+#include \"arrow/compute/exec/util.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/future.h\"\n+#include \"arrow/util/make_unique.h\"\n+#include \"arrow/util/thread_pool.h\"\n+\n+#include <arrow/api.h>\n+#include <arrow/dataset/api.h>\n+#include <arrow/dataset/plan.h>\n+#include <arrow/filesystem/api.h>\n+#include <arrow/io/api.h>\n+//#include <arrow/io/util_internal.h>\n+#include <arrow/compute/api.h>\n+#include <arrow/compute/exec/exec_plan.h>\n+#include <arrow/compute/exec/options.h>\n+#include <arrow/ipc/reader.h>\n+#include <arrow/ipc/writer.h>\n+#include <arrow/util/async_generator.h>\n+#include <arrow/util/checked_cast.h>\n+#include <arrow/util/counting_semaphore.h>  // so we don't need to require C++20\n+#include <arrow/util/optional.h>\n+#include <arrow/util/thread_pool.h>\n+#include <algorithm>\n+#include <atomic>\n+#include <future>\n+#include <mutex>\n+#include <optional>\n+#include <thread>\n+\n+#include <omp.h>\n+\n+#include \"concurrent_bounded_queue.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+struct MemoStore {\n+  // Stores last known values for all the keys\n+\n+  struct Entry {\n+    // Timestamp associated with the entry\n+    int64_t _time;\n+\n+    // Batch associated with the entry (perf is probably OK for this; batches change\n+    // rarely)\n+    std::shared_ptr<arrow::RecordBatch> _batch;\n+\n+    // Row associated with the entry\n+    row_index_t _row;\n+  };\n+\n+  std::unordered_map<KeyType, Entry> _entries;\n+\n+  void store(const std::shared_ptr<RecordBatch>& batch, row_index_t row, int64_t time,\n+             KeyType key) {\n+    auto& e = _entries[key];\n+    // that we can do this assignment optionally, is why we\n+    // can get array with using shared_ptr above (the batch\n+    // shouldn't change that often)\n+    if (e._batch != batch) e._batch = batch;\n+    e._row = row;\n+    e._time = time;\n+  }\n+\n+  util::optional<const Entry*> get_entry_for_key(KeyType key) const {\n+    auto e = _entries.find(key);\n+    if (_entries.end() == e) return util::nullopt;\n+    return util::optional<const Entry*>(&e->second);\n+  }\n+\n+  void remove_entries_with_lesser_time(int64_t ts) {\n+    size_t dbg_size0 = _entries.size();\n+    for (auto e = _entries.begin(); e != _entries.end();)\n+      if (e->second._time < ts)\n+        e = _entries.erase(e);\n+      else\n+        ++e;\n+    size_t dbg_size1 = _entries.size();\n+    if (dbg_size1 < dbg_size0) {\n+      // cerr << \"Removed \" << dbg_size0-dbg_size1 << \" memo entries.\\n\";\n+    }\n+  }\n+};\n+\n+class InputState {\n+  // InputState correponds to an input\n+  // Input record batches are queued up in InputState until processed and\n+  // turned into output record batches.\n+  \n+ public:\n+  InputState(const std::shared_ptr<arrow::Schema>& schema,\n+             const std::string& time_col_name, const std::string& key_col_name,\n+             util::optional<KeyType> wildcard_key)\n+      : _queue(QUEUE_CAPACITY),\n+        _wildcard_key(wildcard_key),\n+        _schema(schema),\n+        _time_col_index(\n+            schema->GetFieldIndex(time_col_name)),  // TODO: handle missing field name\n+        _key_col_index(\n+            schema->GetFieldIndex(key_col_name))  // TODO: handle missing field name\n+  {                                               /*nothing else*/\n+  }\n+\n+  size_t init_src_to_dst_mapping(size_t dst_offset, bool skip_time_and_key_fields) {\n+    src_to_dst.resize(_schema->num_fields());\n+    for (int i = 0; i < _schema->num_fields(); ++i)\n+      if (!(skip_time_and_key_fields && is_time_or_key_column(i)))\n+        src_to_dst[i] = dst_offset++;\n+    return dst_offset;\n+  }\n+\n+  const util::optional<col_index_t>& map_src_to_dst(col_index_t src) const {\n+    return src_to_dst[src];\n+  }\n+\n+  bool is_time_or_key_column(col_index_t i) const {\n+    assert(i < _schema->num_fields());\n+    return (i == _time_col_index) || (i == _key_col_index);\n+  }\n+\n+  // Gets the latest row index,  assuming the queue isn't empty\n+  row_index_t get_latest_row() const { return _latest_ref_row; }\n+\n+  bool empty() const {\n+    if (_latest_ref_row > 0)\n+      return false;  // cannot be empty if ref row is >0 ",
                    "created": "2022-04-28T20:53:44.293+0000",
                    "updated": "2022-04-28T20:53:44.293+0000",
                    "started": "2022-04-28T20:53:44.292+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "763886",
                    "issueId": "13436918"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436918/worklog/763909",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "stmrtn commented on PR #13028:\nURL: https://github.com/apache/arrow/pull/13028#issuecomment-1112683812\n\n   Some context: The original implementation of this was a research proof of concept that I was experimenting with.  I'd expect it to be significantly revised or re-written for a production version.  There are parts of the code and some complexity that aren't necessary for the version posted here, and I'd expect changes to make it consistent with other arrow ExecNodes.\n\n\n",
                    "created": "2022-04-28T21:47:50.135+0000",
                    "updated": "2022-04-28T21:47:50.135+0000",
                    "started": "2022-04-28T21:47:50.134+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "763909",
                    "issueId": "13436918"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436918/worklog/763913",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on PR #13028:\nURL: https://github.com/apache/arrow/pull/13028#issuecomment-1112696020\n\n   Thank you for the contribution.  Yes, there would need to be some significant style changes but it would be a welcome addition.\r\n   \r\n   I'll try and give it a more detailed look tomorrow and play around with it.  At a glance a few thoughts:\r\n   \r\n    * We don't want to use any blocking queues, they will need to be resizable.  The execution engine follows a thread-per-core model so any blocking thread is wasted resources (and a potential deadlock).  Instead, when the queue \"limit\" is surpassed, we should call PauseProducing on the inputs until the queue is sufficiently drained.\r\n    * What happens if the key column(s) have very many values?  I didn't trace all the paths but I think that means the memo store could get quite large and become a memory pressure concern.  Maybe it is only a concern for malicious inputs and we can just reject the query as invalid.  Long term we could probably investigate just storing the row and not the batch, or, if even that is too large, spilling the memo table to disk.  I don't think any of this is something we need to solve now, just random thoughts.\r\n    * We have some utilities for working with row-major data that we had to come up with for the hash-join.  I don't recall if these are in the current implementation, the [proposed implementation](https://github.com/apache/arrow/pull/12326), or both.  However, I bet we can find some overlap here to share utilities.  I'll try and figure out some suggestions after a detailed look.\r\n    * What approach are you thinking wrt sequencing as discussed on the mailing list?\r\n    * Have you given much thought to what an as-of join looks like in Substrait (for example, the current `keys` option won't work I don't think because it is name based (if I understand the meaning) and not index based)\r\n    * Happy to give some thoughts on threading.  My gut instinct is that threading the join itself won't be critically important for most hardware but I could easily be very wrong on this.\n\n\n",
                    "created": "2022-04-28T22:04:59.734+0000",
                    "updated": "2022-04-28T22:04:59.734+0000",
                    "started": "2022-04-28T22:04:59.734+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "763913",
                    "issueId": "13436918"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436918/worklog/764253",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on PR #13028:\nURL: https://github.com/apache/arrow/pull/13028#issuecomment-1113351284\n\n   Thanks @westonpace \r\n   \r\n   > We don't want to use any blocking queues, they will need to be resizable. The execution engine follows a thread-per-core model so any blocking thread is wasted resources (and a potential deadlock). Instead, when the queue \"limit\" is surpassed, we should call PauseProducing on the inputs until the queue is sufficiently drained.\r\n   \r\n   I see. I will try to change this.\r\n   \r\n   > What happens if the key column(s) have very many values? I didn't trace all the paths but I think that means the memo store could get quite large and become a memory pressure concern. Maybe it is only a concern for malicious inputs and we can just reject the query as invalid. Long term we could probably investigate just storing the row and not the batch, or, if even that is too large, spilling the memo table to disk. I don't think any of this is something we need to solve now, just random thoughts.\r\n   \r\n   Hmm..not sure if I follow what u mean... Memo store just stores row/index into the batch (it only keeps the latest row for each batch for each key). Even if there are many keys they might just point to the same batch, so it should be a pretty light weight data structure (a couple of pointers per key). Maybe you are concerning many key values pointing to different batches?\r\n   \r\n   >We have some utilities for working with row-major data that we had to come up with for the hash-join. I don't recall if these are in the current implementation, the https://github.com/apache/arrow/pull/12326, or both. However, I bet we can find some overlap here to share utilities. I'll try and figure out some suggestions after a detailed look.\r\n   \r\n   Cool thanks. I was sure if I should reuse `RowEncoder` or not.\r\n   \r\n   > What approach are you thinking wrt sequencing as discussed on the mailing list?\r\n   \r\n   I haven't put too much thought into it and want to leave it out of the scope of this PR. (Seems like adding foundation logic for ordered data could be a separate PR).  At the high level, I think upstream provides batch index and downstream node reorder them and split out to desk is a reasonable approach, just not sure if there is other solution that is simpler.\r\n   \r\n   > Have you given much thought to what an as-of join looks like in Substrait (for example, the current keys option won't work I don't think because it is name based (if I understand the meaning) and not index based)\r\n   \r\n   Yes - @rtpsw did some POC on Substrait + Asof Join and managed to get it to work. We did change to index based from name based in the substrait plan IIRC.\r\n   \r\n   > Happy to give some thoughts on threading. My gut instinct is that threading the join itself won't be critically important for most hardware but I could easily be very wrong on this.\r\n   \r\n   Cool thanks. \r\n    \n\n\n",
                    "created": "2022-04-29T14:03:45.596+0000",
                    "updated": "2022-04-29T14:03:45.596+0000",
                    "started": "2022-04-29T14:03:45.596+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "764253",
                    "issueId": "13436918"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436918/worklog/764604",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on PR #13028:\nURL: https://github.com/apache/arrow/pull/13028#issuecomment-1113910387\n\n   Ok, managed to look at it a bit more today.\r\n   \r\n   Your sidecar processing thread is probably fine for a first approach.  Eventually we will probably want to get rid of it with something that looks like:\r\n   \r\n   ```\r\n   InputRecieved(...) {\r\n     // Called for every input\r\n     StoreBatch();\r\n     // Only called sometimes\r\n     if (HaveEnoughToProcess()) {\r\n       Process();\r\n     }\r\n   }\r\n   ```\r\n   \r\n   The main advantage of the above approach is just to avoid scheduling conflicts / context switches that we would have by introducing another busy thread.\r\n   \r\n   Yes, I misunderstood and my concern about running out of memory was not valid.\r\n   \r\n   The `MemoStore` approach seems sound but I bet we could come up with something more efficient later.  Just thinking out loud I would think something like...\r\n   \r\n   ```\r\n    * When a batch arrives immediately compute a column of hashes based on the key columns (this happens as part of InputReceived before any storage or processing.  Doing it in InputReceived will be important when we get to micro batches because you will want to compute the hashes while the data is still in the CPU cache).  Store the column of hashes with the batch.\r\n    * In processing, take your LHS time column and for each RHS table do something like...\r\n   \r\n   MaterializeAsOf(reference_times, rhs_hashes, rhs_times rhs_columns) {\r\n     vector<row_idx_t> rhs_row_indices = Magic(reference_times, rhs_hashes, rhs_times);\r\n     rhs_columns = []\r\n     for (rhs_column in rhs_columns) {\r\n       rhs_columns.append(Take(rhs_column, rhs_row_indices));\r\n     }\r\n     return rhs_columns;\r\n   }\r\n   ```\r\n   \r\n   I'd have to think a bit more on how `Magic` works (and I think it would require an unordered_map) but if you didn't have a key column it would look something like...\r\n   \r\n   ```\r\n   Magic([1, 5, 10], [2, 4, 6, 8, 10]) -> [-1, 1, 4] // I.e. index of latest_rhs_time for each reference_time\r\n   ```\r\n   \r\n   Then `Take` would just be normal take.  But maybe you also have something like...\r\n   \r\n   ```\r\n   Magic([1, 2, 3, 4, 5, 6, 7, 8], [2, 4, 6]) -> [-1, 0, 0, 1, 1, 2, 2, 2]\r\n   ```\r\n   \r\n   I guess `Take` is just a normal `Take` there too.  That would save you from having to write the materialize logic yourself.  This also keeps things \"column-based\" which will allow for better utilization of SIMD.  Others will probably have much smarter opinions too :smile: so we can always play with performance later.\r\n   \r\n   I could be way off base here too.  I'll leave it to you on how you want to proceed next.  If you want to do more optimization and benchmarking you can.  If you want to get something that works going first then I think we can focus on getting this cleaned up and migrated over to the Arrow style (see https://arrow.apache.org/docs/developers/cpp/development.html#code-style-linting-and-ci ).  We will also want some more tests.  I think my personal preference would be to get something in that is clean with a lot of tests first.  Then get some benchmarks in place.  Then we can play around with performance.\n\n\n",
                    "created": "2022-04-30T04:06:25.849+0000",
                    "updated": "2022-04-30T04:06:25.849+0000",
                    "started": "2022-04-30T04:06:25.848+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "764604",
                    "issueId": "13436918"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436918/worklog/764976",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on PR #13028:\nURL: https://github.com/apache/arrow/pull/13028#issuecomment-1114968543\n\n   Thanks @westonpace I will work on this more Today. Yeah I'd like to get something working and cleaned up first with some baseline performance.\n\n\n",
                    "created": "2022-05-02T14:36:08.886+0000",
                    "updated": "2022-05-02T14:36:08.886+0000",
                    "started": "2022-05-02T14:36:08.885+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "764976",
                    "issueId": "13436918"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436918/worklog/765653",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on PR #13028:\nURL: https://github.com/apache/arrow/pull/13028#issuecomment-1116459280\n\n   @westonpace I am trying to extend the implementation to support multiple keys and key types and wonder if you can give some pointers.\r\n   \r\n   Basically I think I would create a \"mapper\" that maps an input \"row\" to the \"key\" and use that as the the hash map key for the given row. This mapper would \r\n   * take the column name/index that are key during initialization\r\n   * maps a batch + row index -> key\r\n   * I am not sure what the type of the \"key\" is but looking at hash join it seems to use just \"string\" as the key type (using RowEncoder::encoded_row)\r\n   \r\n   I also take a look at aggregation for other options but didn't find anything obvious. \r\n   \r\n   Did such a \"mapper\" class already exist in Arrow compute that I can use for this purpose?\n\n\n",
                    "created": "2022-05-03T19:04:37.727+0000",
                    "updated": "2022-05-03T19:04:37.727+0000",
                    "started": "2022-05-03T19:04:37.726+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "765653",
                    "issueId": "13436918"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436918/worklog/765674",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on PR #13028:\nURL: https://github.com/apache/arrow/pull/13028#issuecomment-1116491133\n\n   `arrow::compute::internal::KeyEncoder` converts an array of values into an array of bytes, such that each value is represented by one or more contiguous bytes.  For example, a standard Arrow boolean array is represented by two non-contiguous \"bit buffers\" of length/8 bytes.  KeyEncoder represents each boolean value with two contiguous bytes, one for validity and one for the value.\r\n   \r\n   `arrow::compute::internal::RowEncoder` combines the representation from multiple `arrow::compute::internal::KeyEncoder` instances into a a `std::string` for the row.  This `std::string` is just a small byte buffer and shouldn't be treated as a \"string\" in any way.  The bytes are the bytes from each key encoder for that row.\r\n   \r\n   So if you have three key columns then the string will be the bytes for the first column followed by the bytes for the second column followed by the bytes for the third column.  This string can indeed be used as the key for a hash map.\r\n   \r\n   This approach works ok, but is not the most performant.  A newer version is being integrated which uses `arrow::compute::Hashing64::HashMultiColumn` to calculate an array of 8 bytes hashes.  There is no intermediate string that is created.\r\n   \r\n   All of this should not be confused with `arrow::compute::KeyEncoder` which is a different class entirely that is worried about converting from a columnar format to a row-based format.  This is important in hash-join because the output batches are built from random-access into the hash table.  It should not be important for as-of join because the output batches are still built from sequential (though possibly skipping) access to the input tables.\n\n\n",
                    "created": "2022-05-03T19:40:09.322+0000",
                    "updated": "2022-05-03T19:40:09.322+0000",
                    "started": "2022-05-03T19:40:09.322+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "765674",
                    "issueId": "13436918"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436918/worklog/765690",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on PR #13028:\nURL: https://github.com/apache/arrow/pull/13028#issuecomment-1116567264\n\n   Thanks @westonpace that's super helpful. I will take a look at those classes. Sounds like it's probably worthwhile to take a look at \r\n   `arrow::compute::Hashing64::HashMultiColumn` if that's what we are moving to for hash join.\n\n\n",
                    "created": "2022-05-03T20:29:04.632+0000",
                    "updated": "2022-05-03T20:29:04.632+0000",
                    "started": "2022-05-03T20:29:04.631+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "765690",
                    "issueId": "13436918"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436918/worklog/767359",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on PR #13028:\nURL: https://github.com/apache/arrow/pull/13028#issuecomment-1119876133\n\n   I took a stab at using `arrow::compute::Hashing64::HashMultiColumn` but it seems lot of what I need is added in this PR:\r\n   https://github.com/apache/arrow/pull/12326\r\n   \r\n   I will probably wait until that is merged use the utility functions added by that PR, e.g.\r\n   \r\n   `Hashing32::HashBatch`\n\n\n",
                    "created": "2022-05-06T18:24:31.807+0000",
                    "updated": "2022-05-06T18:24:31.807+0000",
                    "started": "2022-05-06T18:24:31.806+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "767359",
                    "issueId": "13436918"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436918/worklog/767385",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on PR #13028:\nURL: https://github.com/apache/arrow/pull/13028#issuecomment-1119944070\n\n   @westonpace reading back your comments - I wonder if you can explain a bit more \"thread-per-core\" model here?\r\n   \r\n   >The execution engine follows a thread-per-core model so any blocking thread is wasted resources (and a potential deadlock)\r\n   The term seems to be used in different context so want to make sure I understand it correctly\n\n\n",
                    "created": "2022-05-06T19:23:06.620+0000",
                    "updated": "2022-05-06T19:23:06.620+0000",
                    "started": "2022-05-06T19:23:06.619+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "767385",
                    "issueId": "13436918"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436918/worklog/767461",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on PR #13028:\nURL: https://github.com/apache/arrow/pull/13028#issuecomment-1120077381\n\n   Sure.  \"Thread per core\" is probably a bit of a misnomer too, but I haven't found a nicer term yet.  The default thread pool size is std::hardware_concurrency which is the maximum number of concurrent threads the hardware supports.  So we do not over-allocate threads.\r\n   \r\n   When dealing with I/O you normally want to make sure the system is doing useful work while the I/O is happening.  One possible solution is the synchronous approach where you create a pool with a lot of threads, more than your CPU can handle.  When I/O is encountered you simply block synchronously on the I/O and let the OS schedule a different thread onto the hardware.\r\n   \r\n   We don't do that today.  Instead we take an asynchronous approach.  To implement this we actually have two thread pools.  The I/O thread pool is sized based on how many concurrent I/O requests make sense (e.g. not very many for HDD and a lot for S3). It is expected these threads are usually in a waiting state.\r\n   \r\n   The second thread pool (the one that, by default, drives the execution engine) is the CPU thread pool.  This thread pool (again, by default) has a fixed size based on the processor hardware.  It's very important not to block a CPU thread because that usually means you are under utilizing the hardware.\n\n\n",
                    "created": "2022-05-06T23:38:24.150+0000",
                    "updated": "2022-05-06T23:38:24.150+0000",
                    "started": "2022-05-06T23:38:24.149+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "767461",
                    "issueId": "13436918"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436918/worklog/767463",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on PR #13028:\nURL: https://github.com/apache/arrow/pull/13028#issuecomment-1120079201\n\n   The second thing you will often see mentioned is the \"morsel / batch\" model.  When reading data in you often want to read it in largish blocks of data (counter-intuitively, these large blocks are referred to as \"morsels\").  This can lead to an execution engine that is roughly:\r\n   \r\n   ```\r\n   parallel for morsel in data_source:\r\n     for operator in pipeline:\r\n       morsel = operator(morsel)\r\n     send_to_sink(morsel)\r\n   ```\r\n   \r\n   However, since each operator is often going over the same data, and morsels are often bigger than CPU caches, this can be inefficient.  Instead the ideal approach is:\r\n   \r\n   ```\r\n   for morsel in data_source:\r\n     parallel for l2_batch in morsel:\r\n       for operator in operators:\r\n         l2_batch = operator(l2_batch)\r\n       send_to_sink(l2_batch)\r\n   ```\r\n   \r\n   This is the model we are trying to work towards in the current execution engine (the hash join is pretty close, the projection and filter nodes still have some work to do before they can handle small batches).\n\n\n",
                    "created": "2022-05-06T23:45:22.972+0000",
                    "updated": "2022-05-06T23:45:22.972+0000",
                    "started": "2022-05-06T23:45:22.971+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "767463",
                    "issueId": "13436918"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436918/worklog/768538",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on PR #13028:\nURL: https://github.com/apache/arrow/pull/13028#issuecomment-1122497030\n\n   Thanks for the explanation!\n\n\n",
                    "created": "2022-05-10T14:48:10.077+0000",
                    "updated": "2022-05-10T14:48:10.077+0000",
                    "started": "2022-05-10T14:48:10.077+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "768538",
                    "issueId": "13436918"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 55200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@bb53ee8[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5897ef8f[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7ddc2aea[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@1a504949[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3cd62089[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@339b2cd[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1fae533a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7ac5b87[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@a73f193[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@449295ca[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@294839e1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4cdd2f2c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 55200,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Jun 24 17:36:34 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-06-24T17:36:34.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16083/watchers",
            "watchCount": 6,
            "isWatching": false
        },
        "created": "2022-03-31T14:29:39.000+0000",
        "updated": "2022-06-24T17:36:34.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "15h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 55200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Implement AsofJoin execution node",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436918/comment/17515366",
                    "id": "17515366",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icexelloss",
                        "name": "icexelloss",
                        "key": "icexelloss",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Li Jin",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Created this Jira because I started to work on implementing Asof Join execution node.\r\n\r\nFor background, asof join is a particular useful join operation in time series data analysis, it assumes that data arrives in sorted time order and performs join with inexact timestamp matches.\r\n\r\nSee [https://pandas.pydata.org/pandas-docs/version/0.25.0/reference/api/pandas.merge_asof.html] for details.\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icexelloss",
                        "name": "icexelloss",
                        "key": "icexelloss",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Li Jin",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2022-03-31T14:31:57.579+0000",
                    "updated": "2022-03-31T14:31:57.579+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436918/comment/17519542",
                    "id": "17519542",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=assignUser",
                        "name": "assignUser",
                        "key": "JIRAUSER287549",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34052",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34052",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34052",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34052"
                        },
                        "displayName": "Jacob Wujciak-Jens",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "As you have started working on this I have assigned this to you [~icexelloss] :)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=assignUser",
                        "name": "assignUser",
                        "key": "JIRAUSER287549",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34052",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34052",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34052",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34052"
                        },
                        "displayName": "Jacob Wujciak-Jens",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2022-04-08T12:21:00.684+0000",
                    "updated": "2022-04-08T12:21:00.684+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13436918/comment/17558617",
                    "id": "17558617",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 13028\n[https://github.com/apache/arrow/pull/13028]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-06-24T17:36:34.060+0000",
                    "updated": "2022-06-24T17:36:34.060+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z110ko:",
        "customfield_12314139": null
    }
}