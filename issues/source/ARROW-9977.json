{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13327126",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327126",
    "key": "ARROW-9977",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
            "name": "jorgecarleitao",
            "key": "jorgecarleitao",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
            },
            "displayName": "Jorge Leit\u00e3o",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 19800,
            "total": 19800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 19800,
            "total": 19800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9977/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 33,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327126/worklog/482180",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao opened a new pull request #8171:\nURL: https://github.com/apache/arrow/pull/8171\n\n\n   Like the title says, another helper.\r\n   \r\n   Note that, contrarily to horizontal operations, that we can represent as `f(&ArrayRef) -> ArrayRef`, in vertical operations like `min`, and `sum` we do not have a dynamically-typed `struct` to return, and thus need to have a function signature for each type. :(\r\n   \r\n   I wonder if we could have in Rust a dynamically struct for single values, like DataFusion has `ScalarValue`.\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T17:10:29.076+0000",
                    "updated": "2020-09-11T17:10:29.076+0000",
                    "started": "2020-09-11T17:10:29.076+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482180",
                    "issueId": "13327126"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327126/worklog/482186",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8171:\nURL: https://github.com/apache/arrow/pull/8171#issuecomment-691218089\n\n\n   https://issues.apache.org/jira/browse/ARROW-9977\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T17:22:10.906+0000",
                    "updated": "2020-09-11T17:22:10.906+0000",
                    "started": "2020-09-11T17:22:10.906+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482186",
                    "issueId": "13327126"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327126/worklog/482202",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #8171:\nURL: https://github.com/apache/arrow/pull/8171#issuecomment-691231822\n\n\n   There's a lot of value in creating StructValue in arrow, like cpp has. One of the potential benefits would be showing the compute kennels to either take an array or scalar\r\n   \r\n   I've tried doing this previously, but threw away the work as I couldn't get it quite right.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-11T17:52:45.778+0000",
                    "updated": "2020-09-11T17:52:45.778+0000",
                    "started": "2020-09-11T17:52:45.778+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482202",
                    "issueId": "13327126"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327126/worklog/482414",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #8171:\nURL: https://github.com/apache/arrow/pull/8171#issuecomment-691402590\n\n\n   @nevi-me , to understand, the goal would we a scalar that we could safely convert `Vec<Scalar>` from and to an array? What is the issue with\r\n   \r\n   ```\r\n   enum ScalarValue {\r\n       Int32(Option<i32>)\r\n       ...\r\n   }\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T04:10:14.537+0000",
                    "updated": "2020-09-12T04:10:14.537+0000",
                    "started": "2020-09-12T04:10:14.537+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482414",
                    "issueId": "13327126"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327126/worklog/482510",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #8171:\nURL: https://github.com/apache/arrow/pull/8171#issuecomment-691512675\n\n\n   I think that @nevi-me 's suggestion addresses something that I've been trying to solve as well. Our kernels operate on arrays, so calling `a + b` is fine when both are arrays, but if we're evaluating `a + 1` against a batch of 1000 rows then we have to create an array of 1000 literal ones to pass to the kernel.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T16:26:25.249+0000",
                    "updated": "2020-09-12T16:26:25.249+0000",
                    "started": "2020-09-12T16:26:25.249+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482510",
                    "issueId": "13327126"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327126/worklog/482511",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #8171:\nURL: https://github.com/apache/arrow/pull/8171#discussion_r487425717\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -19,9 +19,42 @@\n \n use std::ops::Add;\n \n-use crate::array::{Array, PrimitiveArray};\n+use crate::array::{Array, LargeStringArray, PrimitiveArray, StringArray};\n use crate::datatypes::ArrowNumericType;\n \n+/// Helper macro to perform min/max of strings\n+macro_rules! min_max_string_helper {\n+    ($array:expr, $cmp:tt) => {{\n+        let null_count = $array.null_count();\n+\n+        if null_count == $array.len() {\n+            return None\n+        }\n+        let mut n = \"\";\n+        let mut has_value = false;\n+        let data = $array.data();\n+\n+        if null_count == 0 {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || (&n $cmp &item) {\n+                    has_value = true;\n+                    n = item;\n+                }\n+            }\n+        } else {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || data.is_valid(i) && (&n $cmp &item) {\n\nReview comment:\n       Is this correct? `&&` has higher precedence than `||` so I am reading this as `if !has_value || (data.is_valid(i) && (&n $cmp &item))` and since `!has_value` is true on the first iteration of the loop, it will always set `has_value = true` ?\r\n   \r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T16:29:38.440+0000",
                    "updated": "2020-09-12T16:29:38.440+0000",
                    "started": "2020-09-12T16:29:38.439+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482511",
                    "issueId": "13327126"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327126/worklog/482512",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #8171:\nURL: https://github.com/apache/arrow/pull/8171#discussion_r487425813\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -149,4 +202,18 @@ mod tests {\n         assert_eq!(5, min(&a).unwrap());\n         assert_eq!(9, max(&a).unwrap());\n     }\n+\n+    #[test]\n+    fn test_string_min_max_with_nulls() {\n+        let a = StringArray::from(vec![Some(\"b\"), None, None, Some(\"a\"), Some(\"c\")]);\n+        assert_eq!(\"a\", min_string(&a).unwrap());\n+        assert_eq!(\"c\", max_string(&a).unwrap());\n+    }\n+\n+    #[test]\n+    fn test_string_min_max_all_nulls() {\n\nReview comment:\n       Could you add an additional test with an array with one or more `None` at the start, followed by one or more `Some` to see if I am correct about my earlier comment?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T16:30:51.555+0000",
                    "updated": "2020-09-12T16:30:51.555+0000",
                    "started": "2020-09-12T16:30:51.555+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482512",
                    "issueId": "13327126"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327126/worklog/482526",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8171:\nURL: https://github.com/apache/arrow/pull/8171#discussion_r487430955\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -19,9 +19,42 @@\n \n use std::ops::Add;\n \n-use crate::array::{Array, PrimitiveArray};\n+use crate::array::{Array, LargeStringArray, PrimitiveArray, StringArray};\n use crate::datatypes::ArrowNumericType;\n \n+/// Helper macro to perform min/max of strings\n+macro_rules! min_max_string_helper {\n+    ($array:expr, $cmp:tt) => {{\n+        let null_count = $array.null_count();\n+\n+        if null_count == $array.len() {\n+            return None\n+        }\n+        let mut n = \"\";\n+        let mut has_value = false;\n+        let data = $array.data();\n+\n+        if null_count == 0 {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || (&n $cmp &item) {\n+                    has_value = true;\n+                    n = item;\n+                }\n+            }\n+        } else {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || data.is_valid(i) && (&n $cmp &item) {\n\nReview comment:\n       You are right. Amazing catch \ud83d\udcaf\ud83d\udcaf.  I pushed a fix to it. This was also the case for primitive types, and so I also added a test and fix to them.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T17:31:18.586+0000",
                    "updated": "2020-09-12T17:31:18.586+0000",
                    "started": "2020-09-12T17:31:18.586+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482526",
                    "issueId": "13327126"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327126/worklog/482610",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao opened a new pull request #8171:\nURL: https://github.com/apache/arrow/pull/8171\n\n\n   Like the title says, another helper.\r\n   \r\n   Note that, contrarily to horizontal operations, that we can represent as `f(&ArrayRef) -> ArrayRef`, in vertical operations like `min`, and `sum` we do not have a dynamically-typed `struct` to return, and thus need to have a function signature for each type. :(\r\n   \r\n   I wonder if we could have in Rust a dynamically struct for single values, like DataFusion has `ScalarValue`.\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T20:06:11.148+0000",
                    "updated": "2020-09-12T20:06:11.148+0000",
                    "started": "2020-09-12T20:06:11.148+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482610",
                    "issueId": "13327126"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327126/worklog/482659",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #8171:\nURL: https://github.com/apache/arrow/pull/8171#issuecomment-691402590\n\n\n   @nevi-me , to understand, the goal would we a scalar that we could safely convert `Vec<Scalar>` from and to an array? What is the issue with\r\n   \r\n   ```\r\n   enum ScalarValue {\r\n       Int32(Option<i32>)\r\n       ...\r\n   }\r\n   ```\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T20:10:31.854+0000",
                    "updated": "2020-09-12T20:10:31.854+0000",
                    "started": "2020-09-12T20:10:31.854+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482659",
                    "issueId": "13327126"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327126/worklog/482677",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8171:\nURL: https://github.com/apache/arrow/pull/8171#issuecomment-691218089\n\n\n   https://issues.apache.org/jira/browse/ARROW-9977\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T20:11:50.896+0000",
                    "updated": "2020-09-12T20:11:50.896+0000",
                    "started": "2020-09-12T20:11:50.896+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482677",
                    "issueId": "13327126"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327126/worklog/482689",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #8171:\nURL: https://github.com/apache/arrow/pull/8171#issuecomment-691512675\n\n\n   I think that @nevi-me 's suggestion addresses something that I've been trying to solve as well. Our kernels operate on arrays, so calling `a + b` is fine when both are arrays, but if we're evaluating `a + 1` against a batch of 1000 rows then we have to create an array of 1000 literal ones to pass to the kernel.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T20:12:36.893+0000",
                    "updated": "2020-09-12T20:12:36.893+0000",
                    "started": "2020-09-12T20:12:36.893+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482689",
                    "issueId": "13327126"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327126/worklog/482787",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #8171:\nURL: https://github.com/apache/arrow/pull/8171#discussion_r487425717\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -19,9 +19,42 @@\n \n use std::ops::Add;\n \n-use crate::array::{Array, PrimitiveArray};\n+use crate::array::{Array, LargeStringArray, PrimitiveArray, StringArray};\n use crate::datatypes::ArrowNumericType;\n \n+/// Helper macro to perform min/max of strings\n+macro_rules! min_max_string_helper {\n+    ($array:expr, $cmp:tt) => {{\n+        let null_count = $array.null_count();\n+\n+        if null_count == $array.len() {\n+            return None\n+        }\n+        let mut n = \"\";\n+        let mut has_value = false;\n+        let data = $array.data();\n+\n+        if null_count == 0 {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || (&n $cmp &item) {\n+                    has_value = true;\n+                    n = item;\n+                }\n+            }\n+        } else {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || data.is_valid(i) && (&n $cmp &item) {\n\nReview comment:\n       Is this correct? `&&` has higher precedence than `||` so I am reading this as `if !has_value || (data.is_valid(i) && (&n $cmp &item))` and since `!has_value` is true on the first iteration of the loop, it will always set `has_value = true` ?\r\n   \r\n   \n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -149,4 +202,18 @@ mod tests {\n         assert_eq!(5, min(&a).unwrap());\n         assert_eq!(9, max(&a).unwrap());\n     }\n+\n+    #[test]\n+    fn test_string_min_max_with_nulls() {\n+        let a = StringArray::from(vec![Some(\"b\"), None, None, Some(\"a\"), Some(\"c\")]);\n+        assert_eq!(\"a\", min_string(&a).unwrap());\n+        assert_eq!(\"c\", max_string(&a).unwrap());\n+    }\n+\n+    #[test]\n+    fn test_string_min_max_all_nulls() {\n\nReview comment:\n       Could you add an additional test with an array with one or more `None` at the start, followed by one or more `Some` to see if I am correct about my earlier comment?\n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -19,9 +19,42 @@\n \n use std::ops::Add;\n \n-use crate::array::{Array, PrimitiveArray};\n+use crate::array::{Array, LargeStringArray, PrimitiveArray, StringArray};\n use crate::datatypes::ArrowNumericType;\n \n+/// Helper macro to perform min/max of strings\n+macro_rules! min_max_string_helper {\n+    ($array:expr, $cmp:tt) => {{\n+        let null_count = $array.null_count();\n+\n+        if null_count == $array.len() {\n+            return None\n+        }\n+        let mut n = \"\";\n+        let mut has_value = false;\n+        let data = $array.data();\n+\n+        if null_count == 0 {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || (&n $cmp &item) {\n+                    has_value = true;\n+                    n = item;\n+                }\n+            }\n+        } else {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || data.is_valid(i) && (&n $cmp &item) {\n\nReview comment:\n       Is this correct? `&&` has higher precedence than `||` so I am reading this as `if !has_value || (data.is_valid(i) && (&n $cmp &item))` and since `!has_value` is true on the first iteration of the loop, it will always set `has_value = true` ?\r\n   \r\n   \n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -149,4 +202,18 @@ mod tests {\n         assert_eq!(5, min(&a).unwrap());\n         assert_eq!(9, max(&a).unwrap());\n     }\n+\n+    #[test]\n+    fn test_string_min_max_with_nulls() {\n+        let a = StringArray::from(vec![Some(\"b\"), None, None, Some(\"a\"), Some(\"c\")]);\n+        assert_eq!(\"a\", min_string(&a).unwrap());\n+        assert_eq!(\"c\", max_string(&a).unwrap());\n+    }\n+\n+    #[test]\n+    fn test_string_min_max_all_nulls() {\n\nReview comment:\n       Could you add an additional test with an array with one or more `None` at the start, followed by one or more `Some` to see if I am correct about my earlier comment?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T20:22:00.655+0000",
                    "updated": "2020-09-12T20:22:00.655+0000",
                    "started": "2020-09-12T20:22:00.655+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482787",
                    "issueId": "13327126"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327126/worklog/482977",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on a change in pull request #8171:\nURL: https://github.com/apache/arrow/pull/8171#discussion_r487430955\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -19,9 +19,42 @@\n \n use std::ops::Add;\n \n-use crate::array::{Array, PrimitiveArray};\n+use crate::array::{Array, LargeStringArray, PrimitiveArray, StringArray};\n use crate::datatypes::ArrowNumericType;\n \n+/// Helper macro to perform min/max of strings\n+macro_rules! min_max_string_helper {\n+    ($array:expr, $cmp:tt) => {{\n+        let null_count = $array.null_count();\n+\n+        if null_count == $array.len() {\n+            return None\n+        }\n+        let mut n = \"\";\n+        let mut has_value = false;\n+        let data = $array.data();\n+\n+        if null_count == 0 {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || (&n $cmp &item) {\n+                    has_value = true;\n+                    n = item;\n+                }\n+            }\n+        } else {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || data.is_valid(i) && (&n $cmp &item) {\n\nReview comment:\n       You are right. Amazing catch \ud83d\udcaf\ud83d\udcaf.  I pushed a fix to it. This was also the case for primitive types, and so I also added a test and fix to them.\n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -19,9 +19,42 @@\n \n use std::ops::Add;\n \n-use crate::array::{Array, PrimitiveArray};\n+use crate::array::{Array, LargeStringArray, PrimitiveArray, StringArray};\n use crate::datatypes::ArrowNumericType;\n \n+/// Helper macro to perform min/max of strings\n+macro_rules! min_max_string_helper {\n+    ($array:expr, $cmp:tt) => {{\n+        let null_count = $array.null_count();\n+\n+        if null_count == $array.len() {\n+            return None\n+        }\n+        let mut n = \"\";\n+        let mut has_value = false;\n+        let data = $array.data();\n+\n+        if null_count == 0 {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || (&n $cmp &item) {\n+                    has_value = true;\n+                    n = item;\n+                }\n+            }\n+        } else {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || data.is_valid(i) && (&n $cmp &item) {\n\nReview comment:\n       You are right. Amazing catch \ud83d\udcaf\ud83d\udcaf.  I pushed a fix to it. This was also the case for primitive types, and so I also added a test and fix to them.\n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -19,9 +19,42 @@\n \n use std::ops::Add;\n \n-use crate::array::{Array, PrimitiveArray};\n+use crate::array::{Array, LargeStringArray, PrimitiveArray, StringArray};\n use crate::datatypes::ArrowNumericType;\n \n+/// Helper macro to perform min/max of strings\n+macro_rules! min_max_string_helper {\n+    ($array:expr, $cmp:tt) => {{\n+        let null_count = $array.null_count();\n+\n+        if null_count == $array.len() {\n+            return None\n+        }\n+        let mut n = \"\";\n+        let mut has_value = false;\n+        let data = $array.data();\n+\n+        if null_count == 0 {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || (&n $cmp &item) {\n+                    has_value = true;\n+                    n = item;\n+                }\n+            }\n+        } else {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || data.is_valid(i) && (&n $cmp &item) {\n\nReview comment:\n       You are right. Amazing catch \ud83d\udcaf\ud83d\udcaf.  I pushed a fix to it. This was also the case for primitive types, and so I also added a test and fix to them.\n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -19,9 +19,42 @@\n \n use std::ops::Add;\n \n-use crate::array::{Array, PrimitiveArray};\n+use crate::array::{Array, LargeStringArray, PrimitiveArray, StringArray};\n use crate::datatypes::ArrowNumericType;\n \n+/// Helper macro to perform min/max of strings\n+macro_rules! min_max_string_helper {\n+    ($array:expr, $cmp:tt) => {{\n+        let null_count = $array.null_count();\n+\n+        if null_count == $array.len() {\n+            return None\n+        }\n+        let mut n = \"\";\n+        let mut has_value = false;\n+        let data = $array.data();\n+\n+        if null_count == 0 {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || (&n $cmp &item) {\n+                    has_value = true;\n+                    n = item;\n+                }\n+            }\n+        } else {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || data.is_valid(i) && (&n $cmp &item) {\n\nReview comment:\n       You are right. Amazing catch \ud83d\udcaf\ud83d\udcaf.  I pushed a fix to it. This was also the case for primitive types, and so I also added a test and fix to them.\n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -19,9 +19,42 @@\n \n use std::ops::Add;\n \n-use crate::array::{Array, PrimitiveArray};\n+use crate::array::{Array, LargeStringArray, PrimitiveArray, StringArray};\n use crate::datatypes::ArrowNumericType;\n \n+/// Helper macro to perform min/max of strings\n+macro_rules! min_max_string_helper {\n+    ($array:expr, $cmp:tt) => {{\n+        let null_count = $array.null_count();\n+\n+        if null_count == $array.len() {\n+            return None\n+        }\n+        let mut n = \"\";\n+        let mut has_value = false;\n+        let data = $array.data();\n+\n+        if null_count == 0 {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || (&n $cmp &item) {\n+                    has_value = true;\n+                    n = item;\n+                }\n+            }\n+        } else {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || data.is_valid(i) && (&n $cmp &item) {\n\nReview comment:\n       You are right. Amazing catch \ud83d\udcaf\ud83d\udcaf.  I pushed a fix to it. This was also the case for primitive types, and so I also added a test and fix to them.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T20:41:17.322+0000",
                    "updated": "2020-09-12T20:41:17.322+0000",
                    "started": "2020-09-12T20:41:17.322+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482977",
                    "issueId": "13327126"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327126/worklog/482987",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #8171:\nURL: https://github.com/apache/arrow/pull/8171#issuecomment-691231822\n\n\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T20:43:23.903+0000",
                    "updated": "2020-09-12T20:43:23.903+0000",
                    "started": "2020-09-12T20:43:23.902+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "482987",
                    "issueId": "13327126"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327126/worklog/483070",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao opened a new pull request #8171:\nURL: https://github.com/apache/arrow/pull/8171\n\n\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T20:52:21.041+0000",
                    "updated": "2020-09-12T20:52:21.041+0000",
                    "started": "2020-09-12T20:52:21.041+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "483070",
                    "issueId": "13327126"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327126/worklog/483170",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #8171:\nURL: https://github.com/apache/arrow/pull/8171#issuecomment-691402590\n\n\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T21:26:34.622+0000",
                    "updated": "2020-09-12T21:26:34.622+0000",
                    "started": "2020-09-12T21:26:34.622+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "483170",
                    "issueId": "13327126"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327126/worklog/483195",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #8171:\nURL: https://github.com/apache/arrow/pull/8171#discussion_r487425717\n\n\n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -19,9 +19,42 @@\n \n use std::ops::Add;\n \n-use crate::array::{Array, PrimitiveArray};\n+use crate::array::{Array, LargeStringArray, PrimitiveArray, StringArray};\n use crate::datatypes::ArrowNumericType;\n \n+/// Helper macro to perform min/max of strings\n+macro_rules! min_max_string_helper {\n+    ($array:expr, $cmp:tt) => {{\n+        let null_count = $array.null_count();\n+\n+        if null_count == $array.len() {\n+            return None\n+        }\n+        let mut n = \"\";\n+        let mut has_value = false;\n+        let data = $array.data();\n+\n+        if null_count == 0 {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || (&n $cmp &item) {\n+                    has_value = true;\n+                    n = item;\n+                }\n+            }\n+        } else {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || data.is_valid(i) && (&n $cmp &item) {\n\nReview comment:\n       Is this correct? `&&` has higher precedence than `||` so I am reading this as `if !has_value || (data.is_valid(i) && (&n $cmp &item))` and since `!has_value` is true on the first iteration of the loop, it will always set `has_value = true` ?\r\n   \r\n   \n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -149,4 +202,18 @@ mod tests {\n         assert_eq!(5, min(&a).unwrap());\n         assert_eq!(9, max(&a).unwrap());\n     }\n+\n+    #[test]\n+    fn test_string_min_max_with_nulls() {\n+        let a = StringArray::from(vec![Some(\"b\"), None, None, Some(\"a\"), Some(\"c\")]);\n+        assert_eq!(\"a\", min_string(&a).unwrap());\n+        assert_eq!(\"c\", max_string(&a).unwrap());\n+    }\n+\n+    #[test]\n+    fn test_string_min_max_all_nulls() {\n\nReview comment:\n       Could you add an additional test with an array with one or more `None` at the start, followed by one or more `Some` to see if I am correct about my earlier comment?\n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -19,9 +19,42 @@\n \n use std::ops::Add;\n \n-use crate::array::{Array, PrimitiveArray};\n+use crate::array::{Array, LargeStringArray, PrimitiveArray, StringArray};\n use crate::datatypes::ArrowNumericType;\n \n+/// Helper macro to perform min/max of strings\n+macro_rules! min_max_string_helper {\n+    ($array:expr, $cmp:tt) => {{\n+        let null_count = $array.null_count();\n+\n+        if null_count == $array.len() {\n+            return None\n+        }\n+        let mut n = \"\";\n+        let mut has_value = false;\n+        let data = $array.data();\n+\n+        if null_count == 0 {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || (&n $cmp &item) {\n+                    has_value = true;\n+                    n = item;\n+                }\n+            }\n+        } else {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || data.is_valid(i) && (&n $cmp &item) {\n\nReview comment:\n       Is this correct? `&&` has higher precedence than `||` so I am reading this as `if !has_value || (data.is_valid(i) && (&n $cmp &item))` and since `!has_value` is true on the first iteration of the loop, it will always set `has_value = true` ?\r\n   \r\n   \n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -149,4 +202,18 @@ mod tests {\n         assert_eq!(5, min(&a).unwrap());\n         assert_eq!(9, max(&a).unwrap());\n     }\n+\n+    #[test]\n+    fn test_string_min_max_with_nulls() {\n+        let a = StringArray::from(vec![Some(\"b\"), None, None, Some(\"a\"), Some(\"c\")]);\n+        assert_eq!(\"a\", min_string(&a).unwrap());\n+        assert_eq!(\"c\", max_string(&a).unwrap());\n+    }\n+\n+    #[test]\n+    fn test_string_min_max_all_nulls() {\n\nReview comment:\n       Could you add an additional test with an array with one or more `None` at the start, followed by one or more `Some` to see if I am correct about my earlier comment?\n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -19,9 +19,42 @@\n \n use std::ops::Add;\n \n-use crate::array::{Array, PrimitiveArray};\n+use crate::array::{Array, LargeStringArray, PrimitiveArray, StringArray};\n use crate::datatypes::ArrowNumericType;\n \n+/// Helper macro to perform min/max of strings\n+macro_rules! min_max_string_helper {\n+    ($array:expr, $cmp:tt) => {{\n+        let null_count = $array.null_count();\n+\n+        if null_count == $array.len() {\n+            return None\n+        }\n+        let mut n = \"\";\n+        let mut has_value = false;\n+        let data = $array.data();\n+\n+        if null_count == 0 {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || (&n $cmp &item) {\n+                    has_value = true;\n+                    n = item;\n+                }\n+            }\n+        } else {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || data.is_valid(i) && (&n $cmp &item) {\n\nReview comment:\n       Is this correct? `&&` has higher precedence than `||` so I am reading this as `if !has_value || (data.is_valid(i) && (&n $cmp &item))` and since `!has_value` is true on the first iteration of the loop, it will always set `has_value = true` ?\r\n   \r\n   \n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -149,4 +202,18 @@ mod tests {\n         assert_eq!(5, min(&a).unwrap());\n         assert_eq!(9, max(&a).unwrap());\n     }\n+\n+    #[test]\n+    fn test_string_min_max_with_nulls() {\n+        let a = StringArray::from(vec![Some(\"b\"), None, None, Some(\"a\"), Some(\"c\")]);\n+        assert_eq!(\"a\", min_string(&a).unwrap());\n+        assert_eq!(\"c\", max_string(&a).unwrap());\n+    }\n+\n+    #[test]\n+    fn test_string_min_max_all_nulls() {\n\nReview comment:\n       Could you add an additional test with an array with one or more `None` at the start, followed by one or more `Some` to see if I am correct about my earlier comment?\n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -19,9 +19,42 @@\n \n use std::ops::Add;\n \n-use crate::array::{Array, PrimitiveArray};\n+use crate::array::{Array, LargeStringArray, PrimitiveArray, StringArray};\n use crate::datatypes::ArrowNumericType;\n \n+/// Helper macro to perform min/max of strings\n+macro_rules! min_max_string_helper {\n+    ($array:expr, $cmp:tt) => {{\n+        let null_count = $array.null_count();\n+\n+        if null_count == $array.len() {\n+            return None\n+        }\n+        let mut n = \"\";\n+        let mut has_value = false;\n+        let data = $array.data();\n+\n+        if null_count == 0 {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || (&n $cmp &item) {\n+                    has_value = true;\n+                    n = item;\n+                }\n+            }\n+        } else {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || data.is_valid(i) && (&n $cmp &item) {\n\nReview comment:\n       Is this correct? `&&` has higher precedence than `||` so I am reading this as `if !has_value || (data.is_valid(i) && (&n $cmp &item))` and since `!has_value` is true on the first iteration of the loop, it will always set `has_value = true` ?\r\n   \r\n   \n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -149,4 +202,18 @@ mod tests {\n         assert_eq!(5, min(&a).unwrap());\n         assert_eq!(9, max(&a).unwrap());\n     }\n+\n+    #[test]\n+    fn test_string_min_max_with_nulls() {\n+        let a = StringArray::from(vec![Some(\"b\"), None, None, Some(\"a\"), Some(\"c\")]);\n+        assert_eq!(\"a\", min_string(&a).unwrap());\n+        assert_eq!(\"c\", max_string(&a).unwrap());\n+    }\n+\n+    #[test]\n+    fn test_string_min_max_all_nulls() {\n\nReview comment:\n       Could you add an additional test with an array with one or more `None` at the start, followed by one or more `Some` to see if I am correct about my earlier comment?\n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -19,9 +19,42 @@\n \n use std::ops::Add;\n \n-use crate::array::{Array, PrimitiveArray};\n+use crate::array::{Array, LargeStringArray, PrimitiveArray, StringArray};\n use crate::datatypes::ArrowNumericType;\n \n+/// Helper macro to perform min/max of strings\n+macro_rules! min_max_string_helper {\n+    ($array:expr, $cmp:tt) => {{\n+        let null_count = $array.null_count();\n+\n+        if null_count == $array.len() {\n+            return None\n+        }\n+        let mut n = \"\";\n+        let mut has_value = false;\n+        let data = $array.data();\n+\n+        if null_count == 0 {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || (&n $cmp &item) {\n+                    has_value = true;\n+                    n = item;\n+                }\n+            }\n+        } else {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || data.is_valid(i) && (&n $cmp &item) {\n\nReview comment:\n       Is this correct? `&&` has higher precedence than `||` so I am reading this as `if !has_value || (data.is_valid(i) && (&n $cmp &item))` and since `!has_value` is true on the first iteration of the loop, it will always set `has_value = true` ?\r\n   \r\n   \n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -149,4 +202,18 @@ mod tests {\n         assert_eq!(5, min(&a).unwrap());\n         assert_eq!(9, max(&a).unwrap());\n     }\n+\n+    #[test]\n+    fn test_string_min_max_with_nulls() {\n+        let a = StringArray::from(vec![Some(\"b\"), None, None, Some(\"a\"), Some(\"c\")]);\n+        assert_eq!(\"a\", min_string(&a).unwrap());\n+        assert_eq!(\"c\", max_string(&a).unwrap());\n+    }\n+\n+    #[test]\n+    fn test_string_min_max_all_nulls() {\n\nReview comment:\n       Could you add an additional test with an array with one or more `None` at the start, followed by one or more `Some` to see if I am correct about my earlier comment?\n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -19,9 +19,42 @@\n \n use std::ops::Add;\n \n-use crate::array::{Array, PrimitiveArray};\n+use crate::array::{Array, LargeStringArray, PrimitiveArray, StringArray};\n use crate::datatypes::ArrowNumericType;\n \n+/// Helper macro to perform min/max of strings\n+macro_rules! min_max_string_helper {\n+    ($array:expr, $cmp:tt) => {{\n+        let null_count = $array.null_count();\n+\n+        if null_count == $array.len() {\n+            return None\n+        }\n+        let mut n = \"\";\n+        let mut has_value = false;\n+        let data = $array.data();\n+\n+        if null_count == 0 {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || (&n $cmp &item) {\n+                    has_value = true;\n+                    n = item;\n+                }\n+            }\n+        } else {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || data.is_valid(i) && (&n $cmp &item) {\n\nReview comment:\n       Is this correct? `&&` has higher precedence than `||` so I am reading this as `if !has_value || (data.is_valid(i) && (&n $cmp &item))` and since `!has_value` is true on the first iteration of the loop, it will always set `has_value = true` ?\r\n   \r\n   \n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -149,4 +202,18 @@ mod tests {\n         assert_eq!(5, min(&a).unwrap());\n         assert_eq!(9, max(&a).unwrap());\n     }\n+\n+    #[test]\n+    fn test_string_min_max_with_nulls() {\n+        let a = StringArray::from(vec![Some(\"b\"), None, None, Some(\"a\"), Some(\"c\")]);\n+        assert_eq!(\"a\", min_string(&a).unwrap());\n+        assert_eq!(\"c\", max_string(&a).unwrap());\n+    }\n+\n+    #[test]\n+    fn test_string_min_max_all_nulls() {\n\nReview comment:\n       Could you add an additional test with an array with one or more `None` at the start, followed by one or more `Some` to see if I am correct about my earlier comment?\n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -19,9 +19,42 @@\n \n use std::ops::Add;\n \n-use crate::array::{Array, PrimitiveArray};\n+use crate::array::{Array, LargeStringArray, PrimitiveArray, StringArray};\n use crate::datatypes::ArrowNumericType;\n \n+/// Helper macro to perform min/max of strings\n+macro_rules! min_max_string_helper {\n+    ($array:expr, $cmp:tt) => {{\n+        let null_count = $array.null_count();\n+\n+        if null_count == $array.len() {\n+            return None\n+        }\n+        let mut n = \"\";\n+        let mut has_value = false;\n+        let data = $array.data();\n+\n+        if null_count == 0 {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || (&n $cmp &item) {\n+                    has_value = true;\n+                    n = item;\n+                }\n+            }\n+        } else {\n+            for i in 0..data.len() {\n+                let item = $array.value(i);\n+                if !has_value || data.is_valid(i) && (&n $cmp &item) {\n\nReview comment:\n       Is this correct? `&&` has higher precedence than `||` so I am reading this as `if !has_value || (data.is_valid(i) && (&n $cmp &item))` and since `!has_value` is true on the first iteration of the loop, it will always set `has_value = true` ?\r\n   \r\n   \n\n##########\nFile path: rust/arrow/src/compute/kernels/aggregate.rs\n##########\n@@ -149,4 +202,18 @@ mod tests {\n         assert_eq!(5, min(&a).unwrap());\n         assert_eq!(9, max(&a).unwrap());\n     }\n+\n+    #[test]\n+    fn test_string_min_max_with_nulls() {\n+        let a = StringArray::from(vec![Some(\"b\"), None, None, Some(\"a\"), Some(\"c\")]);\n+        assert_eq!(\"a\", min_string(&a).unwrap());\n+        assert_eq!(\"c\", max_string(&a).unwrap());\n+    }\n+\n+    #[test]\n+    fn test_string_min_max_all_nulls() {\n\nReview comment:\n       Could you add an additional test with an array with one or more `None` at the start, followed by one or more `Some` to see if I am correct about my earlier comment?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T21:31:39.487+0000",
                    "updated": "2020-09-12T21:31:39.487+0000",
                    "started": "2020-09-12T21:31:39.487+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "483195",
                    "issueId": "13327126"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327126/worklog/483383",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao opened a new pull request #8171:\nURL: https://github.com/apache/arrow/pull/8171\n\n\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T21:51:19.464+0000",
                    "updated": "2020-09-12T21:51:19.464+0000",
                    "started": "2020-09-12T21:51:19.464+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "483383",
                    "issueId": "13327126"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327126/worklog/483497",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8171:\nURL: https://github.com/apache/arrow/pull/8171#issuecomment-691218089\n\n\n   https://issues.apache.org/jira/browse/ARROW-9977\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-12T22:00:36.632+0000",
                    "updated": "2020-09-12T22:00:36.632+0000",
                    "started": "2020-09-12T22:00:36.632+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "483497",
                    "issueId": "13327126"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 19800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2e7d381d[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2fafdeb5[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@103738f2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@413c0637[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f6d95b0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@52e3d464[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7b3a9662[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5a163a8c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5955f46b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@15d94bd1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a7f568e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@51d6d917[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 19800,
        "customfield_12312520": null,
        "customfield_12312521": "Sun Sep 20 17:21:10 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-09-20T17:21:10.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9977/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-09-11T17:05:09.000+0000",
        "updated": "2020-09-22T03:21:19.000+0000",
        "timeoriginalestimate": null,
        "description": "Strings are ordered and thus we can apply min/max as other types.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 19800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Add min/max for [Large]String",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327126/comment/17197974",
                    "id": "17197974",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Issue resolved by pull request 8171\n[https://github.com/apache/arrow/pull/8171]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-09-17T21:25:56.941+0000",
                    "updated": "2020-09-17T21:25:56.941+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327126/comment/17198029",
                    "id": "17198029",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Re-opening this because I had to revert the PR due to conflicts",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-09-18T00:14:18.735+0000",
                    "updated": "2020-09-18T00:14:18.735+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13327126/comment/17199061",
                    "id": "17199061",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
                        "name": "jorgecarleitao",
                        "key": "jorgecarleitao",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
                        },
                        "displayName": "Jorge Leit\u00e3o",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Closed via #8172",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorgecarleitao",
                        "name": "jorgecarleitao",
                        "key": "jorgecarleitao",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=jorgecarleitao&avatarId=43827",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=jorgecarleitao&avatarId=43827",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=jorgecarleitao&avatarId=43827",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=jorgecarleitao&avatarId=43827"
                        },
                        "displayName": "Jorge Leit\u00e3o",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-09-20T17:21:10.953+0000",
                    "updated": "2020-09-20T17:21:10.953+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0ij00:",
        "customfield_12314139": null
    }
}