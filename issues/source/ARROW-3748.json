{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13197559",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197559",
    "key": "ARROW-3748",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332430",
                "id": "12332430",
                "name": "GLib"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "aggregateprogress": {
            "progress": 1800,
            "total": 1800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 1800,
            "total": 1800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3748/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 3,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197559/worklog/164654",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou opened a new pull request #2934: ARROW-3748: [GLib] Add GArrowCSVReader\nURL: https://github.com/apache/arrow/pull/2934\n \n \n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-10T05:35:52.650+0000",
                    "updated": "2018-11-10T05:35:52.650+0000",
                    "started": "2018-11-10T05:35:52.649+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164654",
                    "issueId": "13197559"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197559/worklog/164655",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on issue #2934: ARROW-3748: [GLib] Add GArrowCSVReader\nURL: https://github.com/apache/arrow/pull/2934#issuecomment-437560169\n \n \n   @shiro615 Can you review this?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-10T05:36:05.379+0000",
                    "updated": "2018-11-10T05:36:05.379+0000",
                    "started": "2018-11-10T05:36:05.378+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164655",
                    "issueId": "13197559"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13197559/worklog/164729",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 closed pull request #2934: ARROW-3748: [GLib] Add GArrowCSVReader\nURL: https://github.com/apache/arrow/pull/2934\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/c_glib/arrow-glib/reader.cpp b/c_glib/arrow-glib/reader.cpp\nindex 296b911a6e..5253a45dbb 100644\n--- a/c_glib/arrow-glib/reader.cpp\n+++ b/c_glib/arrow-glib/reader.cpp\n@@ -51,6 +51,9 @@ G_BEGIN_DECLS\n  *\n  * #GArrowFeatherFileReader is a class for reading columns in Feather\n  * file format from input.\n+ *\n+ * #GArrowCSVReader is a class for reading table in CSV format from\n+ * input.\n  */\n \n typedef struct GArrowRecordBatchReaderPrivate_ {\n@@ -888,6 +891,541 @@ garrow_feather_file_reader_read_names(GArrowFeatherFileReader *reader,\n   }\n }\n \n+\n+typedef struct GArrowCSVReadOptionsPrivate_ {\n+  arrow::MemoryPool *pool;\n+  arrow::csv::ReadOptions read_options;\n+  arrow::csv::ParseOptions parse_options;\n+  arrow::csv::ConvertOptions convert_options;\n+} GArrowCSVReadOptionsPrivate;\n+\n+enum {\n+  PROP_POOL = 1,\n+  PROP_USE_THREADS,\n+  PROP_BLOCK_SIZE,\n+  PROP_DELIMITER,\n+  PROP_IS_QUOTED,\n+  PROP_QUOTE_CHARACTER,\n+  PROP_IS_DOUBLE_QUOTED,\n+  PROP_IS_ESCAPED,\n+  PROP_ESCAPE_CHARACTER,\n+  PROP_ALLOW_NEWLINES_IN_VALUES,\n+  PROP_IGNORE_EMPTY_LINES,\n+  PROP_N_HEADER_ROWS,\n+  PROP_CHECK_UTF8\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowCSVReadOptions,\n+                           garrow_csv_read_options,\n+                           G_TYPE_OBJECT)\n+\n+#define GARROW_CSV_READ_OPTIONS_GET_PRIVATE(object) \\\n+  static_cast<GArrowCSVReadOptionsPrivate *>(       \\\n+    garrow_csv_read_options_get_instance_private(   \\\n+      GARROW_CSV_READ_OPTIONS(object)))\n+\n+static void\n+garrow_csv_read_options_set_property(GObject *object,\n+                                     guint prop_id,\n+                                     const GValue *value,\n+                                     GParamSpec *pspec)\n+{\n+  auto priv = GARROW_CSV_READ_OPTIONS_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_POOL:\n+    priv->pool = static_cast<arrow::MemoryPool *>(g_value_get_pointer(value));\n+    break;\n+  case PROP_USE_THREADS:\n+    priv->read_options.use_threads = g_value_get_boolean(value);\n+    break;\n+  case PROP_BLOCK_SIZE:\n+    priv->read_options.block_size = g_value_get_int(value);\n+    break;\n+  case PROP_DELIMITER:\n+    priv->parse_options.delimiter = g_value_get_schar(value);\n+    break;\n+  case PROP_IS_QUOTED:\n+    priv->parse_options.quoting = g_value_get_boolean(value);\n+    break;\n+  case PROP_QUOTE_CHARACTER:\n+    priv->parse_options.quote_char = g_value_get_schar(value);\n+    break;\n+  case PROP_IS_DOUBLE_QUOTED:\n+    priv->parse_options.double_quote = g_value_get_boolean(value);\n+    break;\n+  case PROP_IS_ESCAPED:\n+    priv->parse_options.escaping = g_value_get_boolean(value);\n+    break;\n+  case PROP_ESCAPE_CHARACTER:\n+    priv->parse_options.escape_char = g_value_get_schar(value);\n+    break;\n+  case PROP_ALLOW_NEWLINES_IN_VALUES:\n+    priv->parse_options.newlines_in_values = g_value_get_boolean(value);\n+    break;\n+  case PROP_IGNORE_EMPTY_LINES:\n+    priv->parse_options.ignore_empty_lines = g_value_get_boolean(value);\n+    break;\n+  case PROP_N_HEADER_ROWS:\n+    priv->parse_options.header_rows = g_value_get_uint(value);\n+    break;\n+  case PROP_CHECK_UTF8:\n+    priv->convert_options.check_utf8 = g_value_get_boolean(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_csv_read_options_get_property(GObject *object,\n+                                     guint prop_id,\n+                                     GValue *value,\n+                                     GParamSpec *pspec)\n+{\n+  auto priv = GARROW_CSV_READ_OPTIONS_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_USE_THREADS:\n+    g_value_set_boolean(value, priv->read_options.use_threads);\n+    break;\n+  case PROP_BLOCK_SIZE:\n+    g_value_set_int(value, priv->read_options.block_size);\n+    break;\n+  case PROP_DELIMITER:\n+    g_value_set_schar(value, priv->parse_options.delimiter);\n+    break;\n+  case PROP_IS_QUOTED:\n+    g_value_set_boolean(value, priv->parse_options.quoting);\n+    break;\n+  case PROP_QUOTE_CHARACTER:\n+    g_value_set_schar(value, priv->parse_options.quote_char);\n+    break;\n+  case PROP_IS_DOUBLE_QUOTED:\n+    g_value_set_boolean(value, priv->parse_options.double_quote);\n+    break;\n+  case PROP_IS_ESCAPED:\n+    g_value_set_boolean(value, priv->parse_options.escaping);\n+    break;\n+  case PROP_ESCAPE_CHARACTER:\n+    g_value_set_schar(value, priv->parse_options.escape_char);\n+    break;\n+  case PROP_ALLOW_NEWLINES_IN_VALUES:\n+    g_value_set_boolean(value, priv->parse_options.newlines_in_values);\n+    break;\n+  case PROP_IGNORE_EMPTY_LINES:\n+    g_value_set_boolean(value, priv->parse_options.ignore_empty_lines);\n+    break;\n+  case PROP_N_HEADER_ROWS:\n+    g_value_set_uint(value, priv->parse_options.header_rows);\n+    break;\n+  case PROP_CHECK_UTF8:\n+    g_value_set_boolean(value, priv->convert_options.check_utf8);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_csv_read_options_init(GArrowCSVReadOptions *object)\n+{\n+  auto priv = GARROW_CSV_READ_OPTIONS_GET_PRIVATE(object);\n+  priv->pool = arrow::default_memory_pool();\n+  priv->read_options = arrow::csv::ReadOptions::Defaults();\n+  priv->parse_options = arrow::csv::ParseOptions::Defaults();\n+  priv->convert_options = arrow::csv::ConvertOptions::Defaults();\n+}\n+\n+static void\n+garrow_csv_read_options_class_init(GArrowCSVReadOptionsClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = garrow_csv_read_options_set_property;\n+  gobject_class->get_property = garrow_csv_read_options_get_property;\n+\n+  spec = g_param_spec_pointer(\"pool\",\n+                              \"Pool\",\n+                              \"The raw arrow::MemoryPool *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_POOL, spec);\n+\n+  auto read_options = arrow::csv::ReadOptions::Defaults();\n+\n+  /**\n+   * GArrowCSVReadOptions:use-threads:\n+   *\n+   * Whether to use the global CPU thread pool.\n+   *\n+   * Since: 0.12.0\n+   */\n+  spec = g_param_spec_boolean(\"use-threads\",\n+                              \"Use threads\",\n+                              \"Whether to use the global CPU thread pool\",\n+                              read_options.use_threads,\n+                              static_cast<GParamFlags>(G_PARAM_READWRITE));\n+  g_object_class_install_property(gobject_class, PROP_USE_THREADS, spec);\n+\n+  /**\n+   * GArrowCSVReadOptions:block-size:\n+   *\n+   * Block size we request from the IO layer; also determines the size\n+   * of chunks when #GArrowCSVReadOptions:use-threads is %TRUE.\n+   *\n+   * Since: 0.12.0\n+   */\n+  spec = g_param_spec_int(\"block-size\",\n+                          \"Block size\",\n+                          \"Block size we request from the IO layer; \"\n+                          \"also determines the size of chunks \"\n+                          \"when ::use-threads is %TRUE\",\n+                          0,\n+                          G_MAXINT,\n+                          read_options.block_size,\n+                          static_cast<GParamFlags>(G_PARAM_READWRITE));\n+  g_object_class_install_property(gobject_class, PROP_BLOCK_SIZE, spec);\n+\n+\n+  auto parse_options = arrow::csv::ParseOptions::Defaults();\n+\n+  /**\n+   * GArrowCSVReadOptions:delimiter:\n+   *\n+   * Field delimiter character.\n+   *\n+   * Since: 0.12.0\n+   */\n+  spec = g_param_spec_char(\"delimiter\",\n+                           \"Delimiter\",\n+                           \"Field delimiter character\",\n+                           0,\n+                           G_MAXINT8,\n+                           parse_options.delimiter,\n+                           static_cast<GParamFlags>(G_PARAM_READWRITE));\n+  g_object_class_install_property(gobject_class, PROP_DELIMITER, spec);\n+\n+  /**\n+   * GArrowCSVReadOptions:is-quoted:\n+   *\n+   * Whether quoting is used.\n+   *\n+   * Since: 0.12.0\n+   */\n+  spec = g_param_spec_boolean(\"is-quoted\",\n+                              \"Is quoted\",\n+                              \"Whether quoting is used\",\n+                              parse_options.quoting,\n+                              static_cast<GParamFlags>(G_PARAM_READWRITE));\n+  g_object_class_install_property(gobject_class, PROP_IS_QUOTED, spec);\n+\n+  /**\n+   * GArrowCSVReadOptions:quote-character:\n+   *\n+   * Quoting character. This is used only when\n+   * #GArrowCSVReadOptions:is-quoted is %TRUE.\n+   *\n+   * Since: 0.12.0\n+   */\n+  spec = g_param_spec_char(\"quote-character\",\n+                           \"Quote character\",\n+                           \"Quoting character\",\n+                           0,\n+                           G_MAXINT8,\n+                           parse_options.quote_char,\n+                           static_cast<GParamFlags>(G_PARAM_READWRITE));\n+  g_object_class_install_property(gobject_class, PROP_QUOTE_CHARACTER, spec);\n+\n+  /**\n+   * GArrowCSVReadOptions:is-double-quoted:\n+   *\n+   * Whether a quote inside a value is double quoted.\n+   *\n+   * Since: 0.12.0\n+   */\n+  spec = g_param_spec_boolean(\"is-double-quoted\",\n+                              \"Is double quoted\",\n+                              \"Whether a quote inside a value is double quoted\",\n+                              parse_options.double_quote,\n+                              static_cast<GParamFlags>(G_PARAM_READWRITE));\n+  g_object_class_install_property(gobject_class, PROP_IS_DOUBLE_QUOTED, spec);\n+\n+  /**\n+   * GArrowCSVReadOptions:is-escaped:\n+   *\n+   * Whether escaping is used.\n+   *\n+   * Since: 0.12.0\n+   */\n+  spec = g_param_spec_boolean(\"is-escaped\",\n+                              \"Is escaped\",\n+                              \"Whether escaping is used\",\n+                              parse_options.escaping,\n+                              static_cast<GParamFlags>(G_PARAM_READWRITE));\n+  g_object_class_install_property(gobject_class, PROP_IS_ESCAPED, spec);\n+\n+  /**\n+   * GArrowCSVReadOptions:escape-character:\n+   *\n+   * Escaping character. This is used only when\n+   * #GArrowCSVReadOptions:is-escaped is %TRUE.\n+   *\n+   * Since: 0.12.0\n+   */\n+  spec = g_param_spec_char(\"escape-character\",\n+                           \"Escape character\",\n+                           \"Escaping character\",\n+                           0,\n+                           G_MAXINT8,\n+                           parse_options.escape_char,\n+                           static_cast<GParamFlags>(G_PARAM_READWRITE));\n+  g_object_class_install_property(gobject_class, PROP_ESCAPE_CHARACTER, spec);\n+\n+  /**\n+   * GArrowCSVReadOptions:allow-newlines-in-values:\n+   *\n+   * Whether values are allowed to contain CR (0x0d) and LF (0x0a) characters.\n+   *\n+   * Since: 0.12.0\n+   */\n+  spec = g_param_spec_boolean(\"allow-newlines-in-values\",\n+                              \"Allow newlines in values\",\n+                              \"Whether values are allowed to contain \"\n+                              \"CR (0x0d) and LF (0x0a) characters.\",\n+                              parse_options.newlines_in_values,\n+                              static_cast<GParamFlags>(G_PARAM_READWRITE));\n+  g_object_class_install_property(gobject_class,\n+                                  PROP_ALLOW_NEWLINES_IN_VALUES,\n+                                  spec);\n+\n+  /**\n+   * GArrowCSVReadOptions:ignore-empty-lines:\n+   *\n+   * Whether empty lines are ignored. If %FALSE, an empty line\n+   * represents a simple empty value (assuming a one-column CSV file).\n+   *\n+   * Since: 0.12.0\n+   */\n+  spec = g_param_spec_boolean(\"ignore-empty-lines\",\n+                              \"Ignore empty lines\",\n+                              \"Whether empty lines are ignored. \"\n+                              \"If %FALSE, an empty line represents \"\n+                              \"a simple empty value \"\n+                              \"(assuming a one-column CSV file).\",\n+                              parse_options.ignore_empty_lines,\n+                              static_cast<GParamFlags>(G_PARAM_READWRITE));\n+  g_object_class_install_property(gobject_class,\n+                                  PROP_IGNORE_EMPTY_LINES,\n+                                  spec);\n+\n+  /**\n+   * GArrowCSVReadOptions:n-header-rows:\n+   *\n+   * The number of header rows to skip (including the first row\n+   * containing column names)\n+   *\n+   * Since: 0.12.0\n+   */\n+  spec = g_param_spec_uint(\"n-header-rows\",\n+                           \"N header rows\",\n+                           \"The number of header rows to skip \"\n+                           \"(including the first row containing column names\",\n+                           0,\n+                           G_MAXUINT,\n+                           parse_options.header_rows,\n+                           static_cast<GParamFlags>(G_PARAM_READWRITE));\n+  g_object_class_install_property(gobject_class,\n+                                  PROP_N_HEADER_ROWS,\n+                                  spec);\n+\n+  auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+  /**\n+   * GArrowCSVReadOptions:check-utf8:\n+   *\n+   * Whether to check UTF8 validity of string columns.\n+   *\n+   * Since: 0.12.0\n+   */\n+  spec = g_param_spec_boolean(\"check-utf8\",\n+                              \"Check UTF8\",\n+                              \"Whether to check UTF8 validity of string columns\",\n+                              convert_options.check_utf8,\n+                              static_cast<GParamFlags>(G_PARAM_READWRITE));\n+  g_object_class_install_property(gobject_class, PROP_CHECK_UTF8, spec);\n+}\n+\n+/**\n+ * garrow_csv_read_options_new:\n+ *\n+ * Returns: A newly created #GArrowCSVReadOptions.\n+ *\n+ * Since: 0.12.0\n+ */\n+GArrowCSVReadOptions *\n+garrow_csv_read_options_new(void)\n+{\n+  auto csv_read_options = g_object_new(GARROW_TYPE_CSV_READ_OPTIONS,\n+                                       \"pool\", arrow::default_memory_pool(),\n+                                       NULL);\n+  return GARROW_CSV_READ_OPTIONS(csv_read_options);\n+}\n+\n+\n+typedef struct GArrowCSVReaderPrivate_ {\n+  std::shared_ptr<arrow::csv::TableReader> reader;\n+} GArrowCSVReaderPrivate;\n+\n+enum {\n+  PROP_CSV_TABLE_READER = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowCSVReader,\n+                           garrow_csv_reader,\n+                           G_TYPE_OBJECT)\n+\n+#define GARROW_CSV_READER_GET_PRIVATE(object)   \\\n+  static_cast<GArrowCSVReaderPrivate *>(        \\\n+    garrow_csv_reader_get_instance_private(     \\\n+      GARROW_CSV_READER(object)))\n+\n+static void\n+garrow_csv_reader_dispose(GObject *object)\n+{\n+  auto priv = GARROW_CSV_READER_GET_PRIVATE(object);\n+\n+  priv->reader = nullptr;\n+\n+  G_OBJECT_CLASS(garrow_csv_reader_parent_class)->dispose(object);\n+}\n+\n+static void\n+garrow_csv_reader_set_property(GObject *object,\n+                               guint prop_id,\n+                               const GValue *value,\n+                               GParamSpec *pspec)\n+{\n+  auto priv = GARROW_CSV_READER_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_CSV_TABLE_READER:\n+    priv->reader =\n+      *static_cast<std::shared_ptr<arrow::csv::TableReader> *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_csv_reader_get_property(GObject *object,\n+                               guint prop_id,\n+                               GValue *value,\n+                               GParamSpec *pspec)\n+{\n+  switch (prop_id) {\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_csv_reader_init(GArrowCSVReader *object)\n+{\n+}\n+\n+static void\n+garrow_csv_reader_class_init(GArrowCSVReaderClass *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->dispose      = garrow_csv_reader_dispose;\n+  gobject_class->set_property = garrow_csv_reader_set_property;\n+  gobject_class->get_property = garrow_csv_reader_get_property;\n+\n+  spec = g_param_spec_pointer(\"csv-table-reader\",\n+                              \"CSV table reader\",\n+                              \"The raw std::shared<arrow::csv::TableReader> *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_CSV_TABLE_READER, spec);\n+}\n+\n+/**\n+ * garrow_csv_reader_new:\n+ * @input: The input to be read.\n+ * @options: (nullable): A #GArrowCSVReadOptions.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: (nullable): A newly created #GArrowCSVReader or %NULL on error.\n+ *\n+ * Since: 0.12.0\n+ */\n+GArrowCSVReader *\n+garrow_csv_reader_new(GArrowInputStream *input,\n+                      GArrowCSVReadOptions *options,\n+                      GError **error)\n+{\n+  auto arrow_input = garrow_input_stream_get_raw(input);\n+  arrow::Status status;\n+  std::shared_ptr<arrow::csv::TableReader> arrow_reader;\n+  if (options) {\n+    auto options_priv = GARROW_CSV_READ_OPTIONS_GET_PRIVATE(options);\n+    status = arrow::csv::TableReader::Make(options_priv->pool,\n+                                           arrow_input,\n+                                           options_priv->read_options,\n+                                           options_priv->parse_options,\n+                                           options_priv->convert_options,\n+                                           &arrow_reader);\n+  } else {\n+    status =\n+      arrow::csv::TableReader::Make(arrow::default_memory_pool(),\n+                                    arrow_input,\n+                                    arrow::csv::ReadOptions::Defaults(),\n+                                    arrow::csv::ParseOptions::Defaults(),\n+                                    arrow::csv::ConvertOptions::Defaults(),\n+                                    &arrow_reader);\n+  }\n+\n+  if (garrow_error_check(error, status, \"[csv-reader][new]\")) {\n+    return garrow_csv_reader_new_raw(&arrow_reader);\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+/**\n+ * garrow_csv_reader_read:\n+ * @reader: A #GArrowCSVReader.\n+ * @error: (nullable): Return location for a #GError or %NULL.\n+ *\n+ * Returns: (nullable) (transfer full): A read #GArrowTable or %NULL on error.\n+ *\n+ * Since: 0.12.0\n+ */\n+GArrowTable *\n+garrow_csv_reader_read(GArrowCSVReader *reader,\n+                       GError **error)\n+{\n+  auto arrow_reader = garrow_csv_reader_get_raw(reader);\n+  std::shared_ptr<arrow::Table> arrow_table;\n+  auto status = arrow_reader->Read(&arrow_table);\n+  if (garrow_error_check(error, status, \"[csv-reader][read]\")) {\n+    return garrow_table_new_raw(&arrow_table);\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n G_END_DECLS\n \n GArrowRecordBatchReader *\n@@ -903,9 +1441,7 @@ garrow_record_batch_reader_new_raw(std::shared_ptr<arrow::ipc::RecordBatchReader\n std::shared_ptr<arrow::ipc::RecordBatchReader>\n garrow_record_batch_reader_get_raw(GArrowRecordBatchReader *reader)\n {\n-  GArrowRecordBatchReaderPrivate *priv;\n-\n-  priv = GARROW_RECORD_BATCH_READER_GET_PRIVATE(reader);\n+  auto priv = GARROW_RECORD_BATCH_READER_GET_PRIVATE(reader);\n   return priv->record_batch_reader;\n }\n \n@@ -944,9 +1480,7 @@ garrow_record_batch_file_reader_new_raw(std::shared_ptr<arrow::ipc::RecordBatchF\n std::shared_ptr<arrow::ipc::RecordBatchFileReader>\n garrow_record_batch_file_reader_get_raw(GArrowRecordBatchFileReader *reader)\n {\n-  GArrowRecordBatchFileReaderPrivate *priv;\n-\n-  priv = GARROW_RECORD_BATCH_FILE_READER_GET_PRIVATE(reader);\n+  auto priv = GARROW_RECORD_BATCH_FILE_READER_GET_PRIVATE(reader);\n   return priv->record_batch_file_reader;\n }\n \n@@ -964,8 +1498,22 @@ garrow_feather_file_reader_new_raw(arrow::ipc::feather::TableReader *arrow_reade\n arrow::ipc::feather::TableReader *\n garrow_feather_file_reader_get_raw(GArrowFeatherFileReader *reader)\n {\n-  GArrowFeatherFileReaderPrivate *priv;\n-\n-  priv = GARROW_FEATHER_FILE_READER_GET_PRIVATE(reader);\n+  auto priv = GARROW_FEATHER_FILE_READER_GET_PRIVATE(reader);\n   return priv->feather_table_reader;\n }\n+\n+GArrowCSVReader *\n+garrow_csv_reader_new_raw(std::shared_ptr<arrow::csv::TableReader> *arrow_reader)\n+{\n+  auto reader = GARROW_CSV_READER(g_object_new(GARROW_TYPE_CSV_READER,\n+                                               \"csv-table-reader\", arrow_reader,\n+                                               NULL));\n+  return reader;\n+}\n+\n+std::shared_ptr<arrow::csv::TableReader>\n+garrow_csv_reader_get_raw(GArrowCSVReader *reader)\n+{\n+  auto priv = GARROW_CSV_READER_GET_PRIVATE(reader);\n+  return priv->reader;\n+}\ndiff --git a/c_glib/arrow-glib/reader.h b/c_glib/arrow-glib/reader.h\nindex b043ec1c40..d1a3947a4c 100644\n--- a/c_glib/arrow-glib/reader.h\n+++ b/c_glib/arrow-glib/reader.h\n@@ -243,4 +243,35 @@ garrow_feather_file_reader_read_names(GArrowFeatherFileReader *reader,\n                                       guint n_names,\n                                       GError **error);\n \n+#define GARROW_TYPE_CSV_READ_OPTIONS (garrow_csv_read_options_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowCSVReadOptions,\n+                         garrow_csv_read_options,\n+                         GARROW,\n+                         CSV_READ_OPTIONS,\n+                         GObject)\n+struct _GArrowCSVReadOptionsClass\n+{\n+  GObjectClass parent_class;\n+};\n+\n+GArrowCSVReadOptions *garrow_csv_read_options_new(void);\n+\n+#define GARROW_TYPE_CSV_READER (garrow_csv_reader_get_type())\n+G_DECLARE_DERIVABLE_TYPE(GArrowCSVReader,\n+                         garrow_csv_reader,\n+                         GARROW,\n+                         CSV_READER,\n+                         GObject)\n+struct _GArrowCSVReaderClass\n+{\n+  GObjectClass parent_class;\n+};\n+\n+GArrowCSVReader *garrow_csv_reader_new(GArrowInputStream *input,\n+                                       GArrowCSVReadOptions *options,\n+                                       GError **error);\n+GArrowTable *garrow_csv_reader_read(GArrowCSVReader *reader,\n+                                    GError **error);\n+\n+\n G_END_DECLS\ndiff --git a/c_glib/arrow-glib/reader.hpp b/c_glib/arrow-glib/reader.hpp\nindex 3e1135e137..4f85e49073 100644\n--- a/c_glib/arrow-glib/reader.hpp\n+++ b/c_glib/arrow-glib/reader.hpp\n@@ -20,6 +20,7 @@\n #pragma once\n \n #include <arrow/api.h>\n+#include <arrow/csv/api.h>\n #include <arrow/ipc/api.h>\n #include <arrow/ipc/feather.h>\n \n@@ -37,3 +38,8 @@ std::shared_ptr<arrow::ipc::RecordBatchFileReader> garrow_record_batch_file_read\n \n GArrowFeatherFileReader *garrow_feather_file_reader_new_raw(arrow::ipc::feather::TableReader *arrow_reader);\n arrow::ipc::feather::TableReader *garrow_feather_file_reader_get_raw(GArrowFeatherFileReader *reader);\n+\n+GArrowCSVReader *\n+garrow_csv_reader_new_raw(std::shared_ptr<arrow::csv::TableReader> *arrow_reader);\n+std::shared_ptr<arrow::csv::TableReader>\n+garrow_csv_reader_get_raw(GArrowCSVReader *reader);\ndiff --git a/c_glib/doc/arrow-glib/arrow-glib-docs.xml b/c_glib/doc/arrow-glib/arrow-glib-docs.xml\nindex 462f42e0ac..948a321a17 100644\n--- a/c_glib/doc/arrow-glib/arrow-glib-docs.xml\n+++ b/c_glib/doc/arrow-glib/arrow-glib-docs.xml\n@@ -159,6 +159,10 @@\n     <title>Index of deprecated API</title>\n     <xi:include href=\"xml/api-index-deprecated.xml\"><xi:fallback /></xi:include>\n   </index>\n+  <index id=\"api-index-0-12-0\" role=\"0.12.0\">\n+    <title>Index of new symbols in 0.12.0</title>\n+    <xi:include href=\"xml/api-index-0.12.0.xml\"><xi:fallback /></xi:include>\n+  </index>\n   <index id=\"api-index-0-11-0\" role=\"0.11.0\">\n     <title>Index of new symbols in 0.11.0</title>\n     <xi:include href=\"xml/api-index-0.11.0.xml\"><xi:fallback /></xi:include>\ndiff --git a/c_glib/test/test-csv-reader.rb b/c_glib/test/test-csv-reader.rb\nnew file mode 100644\nindex 0000000000..12897a8697\n--- /dev/null\n+++ b/c_glib/test/test-csv-reader.rb\n@@ -0,0 +1,59 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+class TestCSVReader < Test::Unit::TestCase\n+  include Helper::Buildable\n+  include Helper::Omittable\n+\n+  sub_test_case(\"#read\") do\n+    def open_input(csv)\n+      buffer = Arrow::Buffer.new(csv)\n+      Arrow::BufferInputStream.new(buffer)\n+    end\n+\n+    def test_default\n+      require_gi(1, 42, 0)\n+      table = Arrow::CSVReader.new(open_input(<<-CSV))\n+message,count\n+\"Start\",2\n+\"Shutdown\",9\n+      CSV\n+      columns = {\n+        \"message\" => build_string_array([\"Start\", \"Shutdown\"]),\n+        \"count\" => build_int64_array([2, 9]),\n+      }\n+      assert_equal(build_table(columns),\n+                   table.read)\n+    end\n+\n+    def test_options\n+      options = Arrow::CSVReadOptions.new\n+      options.quoted = false\n+      table = Arrow::CSVReader.new(open_input(<<-CSV), options)\n+message,count\n+\"Start\",2\n+\"Shutdown\",9\n+      CSV\n+      columns = {\n+        \"message\" => build_string_array([\"\\\"Start\\\"\", \"\\\"Shutdown\\\"\"]),\n+        \"count\" => build_int64_array([2, 9]),\n+      }\n+      assert_equal(build_table(columns),\n+                   table.read)\n+    end\n+  end\n+end\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-11-11T02:20:57.584+0000",
                    "updated": "2018-11-11T02:20:57.584+0000",
                    "started": "2018-11-11T02:20:57.583+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "164729",
                    "issueId": "13197559"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 1800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@467769e9[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3b9cc5ac[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4aeb9e67[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@17079333[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@cade39d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4f4a8713[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@59c4203b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@72f1be3b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@11231af3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@aca65db[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@72775941[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@d083152[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 1800,
        "customfield_12312520": null,
        "customfield_12312521": "2018-11-10 05:33:38.0",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-11-11T02:23:29.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3748/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-11-10T05:33:38.000+0000",
        "updated": "2018-11-11T02:23:29.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "0.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 1800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[GLib] Add GArrowCSVReader",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [],
            "maxResults": 0,
            "total": 0,
            "startAt": 0
        },
        "customfield_12311820": "0|s00cmg:",
        "customfield_12314139": null
    }
}