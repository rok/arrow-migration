{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13340747",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340747",
    "key": "ARROW-10604",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
            "name": "kou",
            "key": "kou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
            },
            "displayName": "Kouhei Sutou",
            "active": true,
            "timeZone": "Asia/Tokyo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334104",
                "id": "12334104",
                "name": "Ruby"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
            "name": "emkornfield",
            "key": "emkornfield",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield",
            "name": "emkornfield",
            "key": "emkornfield",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Micah Kornfield",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10604/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 14,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340747/worklog/524190",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou opened a new pull request #8919:\nURL: https://github.com/apache/arrow/pull/8919\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-15T00:44:08.345+0000",
                    "updated": "2020-12-15T00:44:08.345+0000",
                    "started": "2020-12-15T00:44:08.345+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524190",
                    "issueId": "13340747"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340747/worklog/524192",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #8919:\nURL: https://github.com/apache/arrow/pull/8919#issuecomment-744908239\n\n\n   @emkornfield I noticed that `Decimal256` doesn't provide the following APIs that are provided for `Decimal128`. Is it intended?\r\n   \r\n   * `explicit operator int64_t()`\r\n   * `operator+()`\r\n   * `operator-()`\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-15T00:47:07.504+0000",
                    "updated": "2020-12-15T00:47:07.504+0000",
                    "started": "2020-12-15T00:47:07.503+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524192",
                    "issueId": "13340747"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340747/worklog/524199",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8919:\nURL: https://github.com/apache/arrow/pull/8919#issuecomment-744954897\n\n\n   https://issues.apache.org/jira/browse/ARROW-10604\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-15T01:21:02.611+0000",
                    "updated": "2020-12-15T01:21:02.611+0000",
                    "started": "2020-12-15T01:21:02.610+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524199",
                    "issueId": "13340747"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340747/worklog/524233",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #8919:\nURL: https://github.com/apache/arrow/pull/8919#issuecomment-745041381\n\n\n   @kou I'm still working on adding some of these. If these are ones that ruby requires I'll work on those next. (operator+ should be done in https://github.com/apache/arrow/pull/8897 and operator- will be trivial to add as well.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-15T04:17:44.577+0000",
                    "updated": "2020-12-15T04:17:44.577+0000",
                    "started": "2020-12-15T04:17:44.577+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524233",
                    "issueId": "13340747"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340747/worklog/524240",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #8919:\nURL: https://github.com/apache/arrow/pull/8919#issuecomment-745048696\n\n\n   @emkornfield Thanks for sharing the current status! They're not required so far. I'll add support for them to Ruby when you're done.\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-15T04:44:01.539+0000",
                    "updated": "2020-12-15T04:44:01.539+0000",
                    "started": "2020-12-15T04:44:01.539+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524240",
                    "issueId": "13340747"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340747/worklog/524443",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on a change in pull request #8919:\nURL: https://github.com/apache/arrow/pull/8919#discussion_r543067083\n\n\n\n##########\nFile path: c_glib/arrow-glib/basic-data-type.cpp\n##########\n@@ -92,9 +92,11 @@ G_BEGIN_DECLS\n  * #GArrowTime64DataType is a class for the number of microseconds or\n  * nanoseconds since midnight in 64-bit signed integer data type.\n  *\n- * #GArrowDecimalDataType is a base class for decimal data type.\n+ * #GArrowDecimalDataType is a base class for decimal data types.\n  *\n  * #GArrowDecimal128DataType is a class for 128-bit decimal data type.\n+ *\n+ * #GArrowDecimal256DataType is a class for 256-bit decimal data type.\n\nReview comment:\n       I guess it is better to put \"the\" before \"256-bit decimal data type\" and other data types.\n\n##########\nFile path: ruby/red-arrow/lib/arrow/decimal256.rb\n##########\n@@ -0,0 +1,42 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  class Decimal256\n+    alias_method :to_s_raw, :to_s\n+\n+    # @overload to_s\n+    #\n+    #   @return [String]\n+    #     The string representation of the decimal.\n+    #\n+    # @overload to_s(scale)\n+    #\n+    #   @param scale [Integer] The scale of the decimal.\n+    #   @return [String]\n+    #      The string representation of the decimal including the scale.\n+    #\n+    # @since 3.0.0\n+    def to_s(scale=nil)\n+      if scale\n+        to_string_scale(scale)\n+      else\n+        to_s_raw\n+      end\n+    end\n+  end\n+end\n\nReview comment:\n       I guess `Arrow::Decimal256#abs` is destructive.  Should we rename it to `Arrow::Decimal256#abs!`?\n\n##########\nFile path: ruby/red-arrow/lib/arrow/array-builder.rb\n##########\n@@ -115,6 +115,17 @@ def detect_builder_info(value, builder_info)\n             builder: Date32ArrayBuilder.new,\n             detected: true,\n           }\n+        when BigDecimal\n+          if value.precs[0] > Arrow::Decimal128DataType::MAX_PRECISION\n\nReview comment:\n       Unfortunately, `value.prec[0]` does not mean the number of digits that `value` has.\r\n   It just means the number of digits can be contained in the internal buffer of `value`.\r\n   \r\n   Now we should calculate the number of digits of a BigDecimal from the result of `value.to_s(\"F\")`.\r\n   \r\n   I will fix this issue in bigdecimal.\n\n##########\nFile path: c_glib/arrow-glib/decimal.cpp\n##########\n@@ -0,0 +1,1026 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#ifdef HAVE_CONFIG_H\n+#  include <config.h>\n+#endif\n+\n+#include <arrow-glib/decimal.hpp>\n+#include <arrow-glib/error.hpp>\n+\n+template <typename Decimal>\n+struct DecimalConverter {\n+};\n+\n+template <>\n+struct DecimalConverter<arrow::Decimal128> {\n+  using ArrowType = arrow::Decimal128;\n+  using GArrowType = GArrowDecimal128;\n+\n+  GArrowType *\n+  new_raw(std::shared_ptr<ArrowType> *arrow_decimal128)\n+  {\n+    return garrow_decimal128_new_raw(arrow_decimal128);\n+  }\n+\n+  std::shared_ptr<ArrowType>\n+  get_raw(GArrowType *decimal128)\n+  {\n+    return garrow_decimal128_get_raw(decimal128);\n+  }\n+};\n+\n+template <>\n+struct DecimalConverter<arrow::Decimal256> {\n+  using ArrowType = arrow::Decimal256;\n+  using GArrowType = GArrowDecimal256;\n+\n+  GArrowType *\n+  new_raw(std::shared_ptr<ArrowType> *arrow_decimal256) {\n+    return garrow_decimal256_new_raw(arrow_decimal256);\n+  }\n+\n+  std::shared_ptr<ArrowType>\n+  get_raw(GArrowType *decimal256) {\n+    return garrow_decimal256_get_raw(decimal256);\n+  }\n+};\n+\n+template <typename Decimal>\n+typename DecimalConverter<Decimal>::GArrowType *\n+garrow_decimal_new_string(const gchar *data)\n+{\n+  auto arrow_decimal = std::make_shared<Decimal>(data);\n+  DecimalConverter<Decimal> converter;\n+  return converter.new_raw(&arrow_decimal);\n+}\n+\n+template <typename Decimal>\n+typename DecimalConverter<Decimal>::GArrowType *\n+garrow_decimal_new_integer(const gint64 data)\n+{\n+  auto arrow_decimal = std::make_shared<Decimal>(data);\n+  DecimalConverter<Decimal> converter;\n+  return converter.new_raw(&arrow_decimal);\n+}\n+\n+template <typename Decimal>\n+gboolean\n+garrow_decimal_equal(typename DecimalConverter<Decimal>::GArrowType *decimal,\n+                     typename DecimalConverter<Decimal>::GArrowType *other_decimal)\n+{\n+  DecimalConverter<Decimal> converter;\n+  const auto arrow_decimal = converter.get_raw(decimal);\n+  const auto arrow_other_decimal = converter.get_raw(other_decimal);\n+  return *arrow_decimal == *arrow_other_decimal;\n+}\n+\n+template <typename Decimal>\n+gboolean\n+garrow_decimal_not_equal(typename DecimalConverter<Decimal>::GArrowType *decimal,\n+                         typename DecimalConverter<Decimal>::GArrowType *other_decimal)\n+{\n+  DecimalConverter<Decimal> converter;\n+  const auto arrow_decimal = converter.get_raw(decimal);\n+  const auto arrow_other_decimal = converter.get_raw(other_decimal);\n+  return *arrow_decimal != *arrow_other_decimal;\n+}\n+\n+template <typename Decimal>\n+gboolean\n+garrow_decimal_less_than(typename DecimalConverter<Decimal>::GArrowType *decimal,\n+                         typename DecimalConverter<Decimal>::GArrowType *other_decimal)\n+{\n+  DecimalConverter<Decimal> converter;\n+  const auto arrow_decimal = converter.get_raw(decimal);\n+  const auto arrow_other_decimal = converter.get_raw(other_decimal);\n+  return *arrow_decimal < *arrow_other_decimal;\n+}\n+\n+template <typename Decimal>\n+gboolean\n+garrow_decimal_less_than_or_equal(typename DecimalConverter<Decimal>::GArrowType *decimal,\n+                                  typename DecimalConverter<Decimal>::GArrowType *other_decimal)\n+{\n+  DecimalConverter<Decimal> converter;\n+  const auto arrow_decimal = converter.get_raw(decimal);\n+  const auto arrow_other_decimal = converter.get_raw(other_decimal);\n+  return *arrow_decimal <= *arrow_other_decimal;\n+}\n+\n+template <typename Decimal>\n+gboolean\n+garrow_decimal_greater_than(typename DecimalConverter<Decimal>::GArrowType *decimal,\n+                            typename DecimalConverter<Decimal>::GArrowType *other_decimal)\n+{\n+  DecimalConverter<Decimal> converter;\n+  const auto arrow_decimal = converter.get_raw(decimal);\n+  const auto arrow_other_decimal = converter.get_raw(other_decimal);\n+  return *arrow_decimal > *arrow_other_decimal;\n+}\n+\n+template <typename Decimal>\n+gboolean\n+garrow_decimal_greater_than_or_equal(typename DecimalConverter<Decimal>::GArrowType *decimal,\n+                                     typename DecimalConverter<Decimal>::GArrowType *other_decimal)\n+{\n+  DecimalConverter<Decimal> converter;\n+  const auto arrow_decimal = converter.get_raw(decimal);\n+  const auto arrow_other_decimal = converter.get_raw(other_decimal);\n+  return *arrow_decimal >= *arrow_other_decimal;\n+}\n+\n+template <typename Decimal>\n+gchar *\n+garrow_decimal_to_string_scale(typename DecimalConverter<Decimal>::GArrowType *decimal,\n+                               gint32 scale)\n+{\n+  DecimalConverter<Decimal> converter;\n+  const auto arrow_decimal = converter.get_raw(decimal);\n+  return g_strdup(arrow_decimal->ToString(scale).c_str());\n+}\n+\n+template <typename Decimal>\n+gchar *\n+garrow_decimal_to_string(typename DecimalConverter<Decimal>::GArrowType *decimal)\n+{\n+  DecimalConverter<Decimal> converter;\n+  const auto arrow_decimal = converter.get_raw(decimal);\n+  return g_strdup(arrow_decimal->ToIntegerString().c_str());\n+}\n+\n+template <typename Decimal>\n+void\n+garrow_decimal_abs(typename DecimalConverter<Decimal>::GArrowType *decimal)\n+{\n+  DecimalConverter<Decimal> converter;\n+  auto arrow_decimal = converter.get_raw(decimal);\n+  arrow_decimal->Abs();\n+}\n+\n+template <typename Decimal>\n+void\n+garrow_decimal_negate(typename DecimalConverter<Decimal>::GArrowType *decimal)\n+{\n+  DecimalConverter<Decimal> converter;\n+  auto arrow_decimal = converter.get_raw(decimal);\n+  arrow_decimal->Negate();\n+}\n+\n+template <typename Decimal>\n+typename DecimalConverter<Decimal>::GArrowType *\n+garrow_decimal_plus(typename DecimalConverter<Decimal>::GArrowType *left,\n+                    typename DecimalConverter<Decimal>::GArrowType *right)\n+{\n+  DecimalConverter<Decimal> converter;\n+  auto arrow_left = converter.get_raw(left);\n+  auto arrow_right = converter.get_raw(right);\n+  auto arrow_decimal = std::make_shared<Decimal>(*arrow_left + *arrow_right);\n+  return converter.new_raw(&arrow_decimal);\n+}\n+\n+template <typename Decimal>\n+typename DecimalConverter<Decimal>::GArrowType *\n+garrow_decimal_minus(typename DecimalConverter<Decimal>::GArrowType *left,\n+                     typename DecimalConverter<Decimal>::GArrowType *right)\n+{\n+  DecimalConverter<Decimal> converter;\n+  auto arrow_left = converter.get_raw(left);\n+  auto arrow_right = converter.get_raw(right);\n+  auto arrow_decimal = std::make_shared<Decimal>(*arrow_left - *arrow_right);\n+  return converter.new_raw(&arrow_decimal);\n+}\n+\n+template <typename Decimal>\n+typename DecimalConverter<Decimal>::GArrowType *\n+garrow_decimal_multiply(typename DecimalConverter<Decimal>::GArrowType *left,\n+                        typename DecimalConverter<Decimal>::GArrowType *right)\n+{\n+  DecimalConverter<Decimal> converter;\n+  auto arrow_left = converter.get_raw(left);\n+  auto arrow_right = converter.get_raw(right);\n+  auto arrow_decimal = std::make_shared<Decimal>(*arrow_left * *arrow_right);\n+  return converter.new_raw(&arrow_decimal);\n+}\n+\n+template <typename Decimal>\n+typename DecimalConverter<Decimal>::GArrowType *\n+garrow_decimal_divide(typename DecimalConverter<Decimal>::GArrowType *left,\n+                      typename DecimalConverter<Decimal>::GArrowType *right,\n+                      typename DecimalConverter<Decimal>::GArrowType **remainder,\n+                      GError **error,\n+                      const gchar *tag)\n+{\n+  DecimalConverter<Decimal> converter;\n+  auto arrow_left = converter.get_raw(left);\n+  auto arrow_right = converter.get_raw(right);\n+  auto arrow_result = arrow_left->Divide(*arrow_right);\n+  if (garrow::check(error, arrow_result, tag)) {\n+    Decimal arrow_quotient_raw;\n+    Decimal arrow_remainder_raw;\n+    std::tie(arrow_quotient_raw, arrow_remainder_raw) = *arrow_result;\n+    if (remainder) {\n+      auto arrow_remainder = std::make_shared<Decimal>(arrow_remainder_raw);\n+      *remainder = converter.new_raw(&arrow_remainder);\n+    }\n+    auto arrow_quotient = std::make_shared<Decimal>(arrow_quotient_raw);\n+    return converter.new_raw(&arrow_quotient);\n+  } else {\n+    if (remainder) {\n+      *remainder = NULL;\n+    }\n+    return NULL;\n+  }\n+}\n+\n+template <typename Decimal>\n+typename DecimalConverter<Decimal>::GArrowType *\n+garrow_decimal_rescale(typename DecimalConverter<Decimal>::GArrowType *decimal,\n+                       gint32 original_scale,\n+                       gint32 new_scale,\n+                       GError **error,\n+                       const gchar *tag)\n+{\n+  DecimalConverter<Decimal> converter;\n+  auto arrow_decimal = converter.get_raw(decimal);\n+  auto arrow_result = arrow_decimal->Rescale(original_scale, new_scale);\n+  if (garrow::check(error, arrow_result, tag)) {\n+    auto arrow_rescaled_decimal = std::make_shared<Decimal>(*arrow_result);\n+    return converter.new_raw(&arrow_rescaled_decimal);\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: decimal\n+ * @section_id: decimal\n+ * @title: 128-bit and 256-bit decimal classes\n+ * @include: arrow-glib/arrow-glib.h\n+ *\n+ * #GArrowDecimal128 is a 128-bit decimal class.\n+ *\n+ * #GArrowDecimal256 is a 256-bit decimal class.\n+ *\n+ * Since: 0.10.0\n+ */\n+\n+typedef struct GArrowDecimal128Private_ {\n+  std::shared_ptr<arrow::Decimal128> decimal128;\n+} GArrowDecimal128Private;\n+\n+enum {\n+  PROP_DECIMAL128 = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowDecimal128,\n+                           garrow_decimal128,\n+                           G_TYPE_OBJECT)\n+\n+#define GARROW_DECIMAL128_GET_PRIVATE(obj)         \\\n+  static_cast<GArrowDecimal128Private *>(          \\\n+     garrow_decimal128_get_instance_private(       \\\n+       GARROW_DECIMAL128(obj)))\n+\n+static void\n+garrow_decimal128_finalize(GObject *object)\n+{\n+  auto priv = GARROW_DECIMAL128_GET_PRIVATE(object);\n+\n+  priv->decimal128.~shared_ptr();\n+\n+  G_OBJECT_CLASS(garrow_decimal128_parent_class)->finalize(object);\n+}\n+\n+static void\n+garrow_decimal128_set_property(GObject *object,\n+                               guint prop_id,\n+                               const GValue *value,\n+                               GParamSpec *pspec)\n+{\n+  auto priv = GARROW_DECIMAL128_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_DECIMAL128:\n+    priv->decimal128 =\n+      *static_cast<std::shared_ptr<arrow::Decimal128> *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_decimal128_init(GArrowDecimal128 *object)\n+{\n+  auto priv = GARROW_DECIMAL128_GET_PRIVATE(object);\n+  new(&priv->decimal128) std::shared_ptr<arrow::Decimal128>;\n+}\n+\n+static void\n+garrow_decimal128_class_init(GArrowDecimal128Class *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = garrow_decimal128_finalize;\n+  gobject_class->set_property = garrow_decimal128_set_property;\n+\n+  spec = g_param_spec_pointer(\"decimal128\",\n+                              \"Decimal128\",\n+                              \"The raw std::shared<arrow::Decimal128> *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_DECIMAL128, spec);\n+}\n+\n+/**\n+ * garrow_decimal128_new_string:\n+ * @data: The data of the decimal.\n+ *\n+ * Returns: A newly created #GArrowDecimal128.\n+ *\n+ * Since: 0.10.0\n+ */\n+GArrowDecimal128 *\n+garrow_decimal128_new_string(const gchar *data)\n+{\n+  return garrow_decimal_new_string<arrow::Decimal128>(data);\n+}\n+\n+/**\n+ * garrow_decimal128_new_integer:\n+ * @data: The data of the decimal.\n+ *\n+ * Returns: A newly created #GArrowDecimal128.\n+ *\n+ * Since: 0.10.0\n+ */\n+GArrowDecimal128 *\n+garrow_decimal128_new_integer(const gint64 data)\n+{\n+  return garrow_decimal_new_integer<arrow::Decimal128>(data);\n+}\n+\n+/**\n+ * garrow_decimal128_equal:\n+ * @decimal: A #GArrowDecimal128.\n+ * @other_decimal: A #GArrowDecimal128 to be compared.\n+ *\n+ * Returns: %TRUE if the decimal is equal to the other decimal, %FALSE\n+ *   otherwise.\n+ *\n+ * Since: 0.12.0\n+ */\n+gboolean\n+garrow_decimal128_equal(GArrowDecimal128 *decimal,\n+                        GArrowDecimal128 *other_decimal)\n+{\n+  return garrow_decimal_equal<arrow::Decimal128>(decimal, other_decimal);\n+}\n+\n+/**\n+ * garrow_decimal128_not_equal:\n+ * @decimal: A #GArrowDecimal128.\n+ * @other_decimal: A #GArrowDecimal128 to be compared.\n+ *\n+ * Returns: %TRUE if the decimal isn't equal to the other decimal,\n+ *   %FALSE otherwise.\n+ *\n+ * Since: 0.12.0\n+ */\n+gboolean\n+garrow_decimal128_not_equal(GArrowDecimal128 *decimal,\n+                            GArrowDecimal128 *other_decimal)\n+{\n+  return garrow_decimal_not_equal<arrow::Decimal128>(decimal, other_decimal);\n+}\n+\n+/**\n+ * garrow_decimal128_less_than:\n+ * @decimal: A #GArrowDecimal128.\n+ * @other_decimal: A #GArrowDecimal128 to be compared.\n+ *\n+ * Returns: %TRUE if the decimal is less than the other decimal,\n+ *   %FALSE otherwise.\n+ *\n+ * Since: 0.12.0\n+ */\n+gboolean\n+garrow_decimal128_less_than(GArrowDecimal128 *decimal,\n+                            GArrowDecimal128 *other_decimal)\n+{\n+  return garrow_decimal_less_than<arrow::Decimal128>(decimal, other_decimal);\n+}\n+\n+/**\n+ * garrow_decimal128_less_than_or_equal:\n+ * @decimal: A #GArrowDecimal128.\n+ * @other_decimal: A #GArrowDecimal128 to be compared.\n+ *\n+ * Returns: %TRUE if the decimal is less than the other decimal\n+ *   or equal to the other decimal, %FALSE otherwise.\n+ *\n+ * Since: 0.12.0\n+ */\n+gboolean\n+garrow_decimal128_less_than_or_equal(GArrowDecimal128 *decimal,\n+                                     GArrowDecimal128 *other_decimal)\n+{\n+  return garrow_decimal_less_than_or_equal<arrow::Decimal128>(decimal, other_decimal);\n+}\n+\n+/**\n+ * garrow_decimal128_greater_than:\n+ * @decimal: A #GArrowDecimal128.\n+ * @other_decimal: A #GArrowDecimal128 to be compared.\n+ *\n+ * Returns: %TRUE if the decimal is greater than the other decimal,\n+ *   %FALSE otherwise.\n+ *\n+ * Since: 0.12.0\n+ */\n+gboolean\n+garrow_decimal128_greater_than(GArrowDecimal128 *decimal,\n+                               GArrowDecimal128 *other_decimal)\n+{\n+  return garrow_decimal_greater_than<arrow::Decimal128>(decimal, other_decimal);\n+}\n+\n+/**\n+ * garrow_decimal128_greater_than_or_equal:\n+ * @decimal: A #GArrowDecimal128.\n+ * @other_decimal: A #GArrowDecimal128 to be compared.\n+ *\n+ * Returns: %TRUE if the decimal is greater than the other decimal\n+ *   or equal to the other decimal, %FALSE otherwise.\n+ *\n+ * Since: 0.12.0\n+ */\n+gboolean\n+garrow_decimal128_greater_than_or_equal(GArrowDecimal128 *decimal,\n+                                        GArrowDecimal128 *other_decimal)\n+{\n+  return garrow_decimal_greater_than_or_equal<arrow::Decimal128>(decimal, other_decimal);\n+}\n+\n+/**\n+ * garrow_decimal128_to_string_scale:\n+ * @decimal: A #GArrowDecimal128.\n+ * @scale: The scale of the decimal.\n+ *\n+ * Returns: The string representation of the decimal.\n+ *\n+ *   It should be freed with g_free() when no longer needed.\n+ *\n+ * Since: 0.10.0\n+ */\n+gchar *\n+garrow_decimal128_to_string_scale(GArrowDecimal128 *decimal, gint32 scale)\n+{\n+  return garrow_decimal_to_string_scale<arrow::Decimal128>(decimal, scale);\n+}\n+\n+/**\n+ * garrow_decimal128_to_string:\n+ * @decimal: A #GArrowDecimal128.\n+ *\n+ * Returns: The string representation of the decimal.\n+ *\n+ *   It should be freed with g_free() when no longer needed.\n+ *\n+ * Since: 0.10.0\n+ */\n+gchar *\n+garrow_decimal128_to_string(GArrowDecimal128 *decimal)\n+{\n+  return garrow_decimal_to_string<arrow::Decimal128>(decimal);\n+}\n+\n+/**\n+ * garrow_decimal128_abs:\n+ * @decimal: A #GArrowDecimal128.\n+ *\n+ * Computes the absolute value of the @decimal destructively.\n+ *\n+ * Since: 0.10.0\n+ */\n+void\n+garrow_decimal128_abs(GArrowDecimal128 *decimal)\n+{\n+  garrow_decimal_abs<arrow::Decimal128>(decimal);\n+}\n+\n+/**\n+ * garrow_decimal128_negate:\n+ * @decimal: A #GArrowDecimal128.\n+ *\n+ * Negate the current value of the @decimal destructively.\n+ *\n+ * Since: 0.10.0\n+ */\n+void\n+garrow_decimal128_negate(GArrowDecimal128 *decimal)\n+{\n+  garrow_decimal_negate<arrow::Decimal128>(decimal);\n+}\n+\n+/**\n+ * garrow_decimal128_to_integer:\n+ * @decimal: A #GArrowDecimal128.\n+ *\n+ * Returns: The 64-bit integer representation of the decimal.\n+ *\n+ * Since: 0.10.0\n+ */\n+gint64\n+garrow_decimal128_to_integer(GArrowDecimal128 *decimal)\n+{\n+  auto arrow_decimal = garrow_decimal128_get_raw(decimal);\n+  return static_cast<int64_t>(*arrow_decimal);\n\nReview comment:\n       `gint64` instead of `int64_t`?\n\n##########\nFile path: ruby/red-arrow/lib/arrow/decimal256.rb\n##########\n@@ -0,0 +1,42 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  class Decimal256\n+    alias_method :to_s_raw, :to_s\n+\n+    # @overload to_s\n+    #\n+    #   @return [String]\n+    #     The string representation of the decimal.\n+    #\n+    # @overload to_s(scale)\n+    #\n+    #   @param scale [Integer] The scale of the decimal.\n+    #   @return [String]\n+    #      The string representation of the decimal including the scale.\n+    #\n+    # @since 3.0.0\n+    def to_s(scale=nil)\n+      if scale\n+        to_string_scale(scale)\n+      else\n+        to_s_raw\n+      end\n+    end\n+  end\n+end\n\nReview comment:\n       Same for `Arrow::Decimal256#negate`.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-15T14:09:50.979+0000",
                    "updated": "2020-12-15T14:09:50.979+0000",
                    "started": "2020-12-15T14:09:50.979+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "524443",
                    "issueId": "13340747"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340747/worklog/526111",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on a change in pull request #8919:\nURL: https://github.com/apache/arrow/pull/8919#discussion_r546043171\n\n\n\n##########\nFile path: ruby/red-arrow/lib/arrow/array-builder.rb\n##########\n@@ -115,6 +115,17 @@ def detect_builder_info(value, builder_info)\n             builder: Date32ArrayBuilder.new,\n             detected: true,\n           }\n+        when BigDecimal\n+          if value.precs[0] > Arrow::Decimal128DataType::MAX_PRECISION\n\nReview comment:\n       We should add tests of converting from/to `BigDecimal(\"1e30\")` and `BigDecimal(\"1e70\")`. `precs` of them are both `[9, 18]`, but they should be converted to `Decimal128` and `Decimal256`, respectively.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T19:20:31.088+0000",
                    "updated": "2020-12-18T19:20:31.088+0000",
                    "started": "2020-12-18T19:20:31.088+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526111",
                    "issueId": "13340747"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340747/worklog/526156",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #8919:\nURL: https://github.com/apache/arrow/pull/8919#discussion_r546108184\n\n\n\n##########\nFile path: c_glib/arrow-glib/basic-data-type.cpp\n##########\n@@ -92,9 +92,11 @@ G_BEGIN_DECLS\n  * #GArrowTime64DataType is a class for the number of microseconds or\n  * nanoseconds since midnight in 64-bit signed integer data type.\n  *\n- * #GArrowDecimalDataType is a base class for decimal data type.\n+ * #GArrowDecimalDataType is a base class for decimal data types.\n  *\n  * #GArrowDecimal128DataType is a class for 128-bit decimal data type.\n+ *\n+ * #GArrowDecimal256DataType is a class for 256-bit decimal data type.\n\nReview comment:\n       Done.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T21:52:53.303+0000",
                    "updated": "2020-12-18T21:52:53.303+0000",
                    "started": "2020-12-18T21:52:53.302+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526156",
                    "issueId": "13340747"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340747/worklog/526157",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #8919:\nURL: https://github.com/apache/arrow/pull/8919#discussion_r546108649\n\n\n\n##########\nFile path: c_glib/arrow-glib/decimal.cpp\n##########\n@@ -0,0 +1,1026 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+#ifdef HAVE_CONFIG_H\n+#  include <config.h>\n+#endif\n+\n+#include <arrow-glib/decimal.hpp>\n+#include <arrow-glib/error.hpp>\n+\n+template <typename Decimal>\n+struct DecimalConverter {\n+};\n+\n+template <>\n+struct DecimalConverter<arrow::Decimal128> {\n+  using ArrowType = arrow::Decimal128;\n+  using GArrowType = GArrowDecimal128;\n+\n+  GArrowType *\n+  new_raw(std::shared_ptr<ArrowType> *arrow_decimal128)\n+  {\n+    return garrow_decimal128_new_raw(arrow_decimal128);\n+  }\n+\n+  std::shared_ptr<ArrowType>\n+  get_raw(GArrowType *decimal128)\n+  {\n+    return garrow_decimal128_get_raw(decimal128);\n+  }\n+};\n+\n+template <>\n+struct DecimalConverter<arrow::Decimal256> {\n+  using ArrowType = arrow::Decimal256;\n+  using GArrowType = GArrowDecimal256;\n+\n+  GArrowType *\n+  new_raw(std::shared_ptr<ArrowType> *arrow_decimal256) {\n+    return garrow_decimal256_new_raw(arrow_decimal256);\n+  }\n+\n+  std::shared_ptr<ArrowType>\n+  get_raw(GArrowType *decimal256) {\n+    return garrow_decimal256_get_raw(decimal256);\n+  }\n+};\n+\n+template <typename Decimal>\n+typename DecimalConverter<Decimal>::GArrowType *\n+garrow_decimal_new_string(const gchar *data)\n+{\n+  auto arrow_decimal = std::make_shared<Decimal>(data);\n+  DecimalConverter<Decimal> converter;\n+  return converter.new_raw(&arrow_decimal);\n+}\n+\n+template <typename Decimal>\n+typename DecimalConverter<Decimal>::GArrowType *\n+garrow_decimal_new_integer(const gint64 data)\n+{\n+  auto arrow_decimal = std::make_shared<Decimal>(data);\n+  DecimalConverter<Decimal> converter;\n+  return converter.new_raw(&arrow_decimal);\n+}\n+\n+template <typename Decimal>\n+gboolean\n+garrow_decimal_equal(typename DecimalConverter<Decimal>::GArrowType *decimal,\n+                     typename DecimalConverter<Decimal>::GArrowType *other_decimal)\n+{\n+  DecimalConverter<Decimal> converter;\n+  const auto arrow_decimal = converter.get_raw(decimal);\n+  const auto arrow_other_decimal = converter.get_raw(other_decimal);\n+  return *arrow_decimal == *arrow_other_decimal;\n+}\n+\n+template <typename Decimal>\n+gboolean\n+garrow_decimal_not_equal(typename DecimalConverter<Decimal>::GArrowType *decimal,\n+                         typename DecimalConverter<Decimal>::GArrowType *other_decimal)\n+{\n+  DecimalConverter<Decimal> converter;\n+  const auto arrow_decimal = converter.get_raw(decimal);\n+  const auto arrow_other_decimal = converter.get_raw(other_decimal);\n+  return *arrow_decimal != *arrow_other_decimal;\n+}\n+\n+template <typename Decimal>\n+gboolean\n+garrow_decimal_less_than(typename DecimalConverter<Decimal>::GArrowType *decimal,\n+                         typename DecimalConverter<Decimal>::GArrowType *other_decimal)\n+{\n+  DecimalConverter<Decimal> converter;\n+  const auto arrow_decimal = converter.get_raw(decimal);\n+  const auto arrow_other_decimal = converter.get_raw(other_decimal);\n+  return *arrow_decimal < *arrow_other_decimal;\n+}\n+\n+template <typename Decimal>\n+gboolean\n+garrow_decimal_less_than_or_equal(typename DecimalConverter<Decimal>::GArrowType *decimal,\n+                                  typename DecimalConverter<Decimal>::GArrowType *other_decimal)\n+{\n+  DecimalConverter<Decimal> converter;\n+  const auto arrow_decimal = converter.get_raw(decimal);\n+  const auto arrow_other_decimal = converter.get_raw(other_decimal);\n+  return *arrow_decimal <= *arrow_other_decimal;\n+}\n+\n+template <typename Decimal>\n+gboolean\n+garrow_decimal_greater_than(typename DecimalConverter<Decimal>::GArrowType *decimal,\n+                            typename DecimalConverter<Decimal>::GArrowType *other_decimal)\n+{\n+  DecimalConverter<Decimal> converter;\n+  const auto arrow_decimal = converter.get_raw(decimal);\n+  const auto arrow_other_decimal = converter.get_raw(other_decimal);\n+  return *arrow_decimal > *arrow_other_decimal;\n+}\n+\n+template <typename Decimal>\n+gboolean\n+garrow_decimal_greater_than_or_equal(typename DecimalConverter<Decimal>::GArrowType *decimal,\n+                                     typename DecimalConverter<Decimal>::GArrowType *other_decimal)\n+{\n+  DecimalConverter<Decimal> converter;\n+  const auto arrow_decimal = converter.get_raw(decimal);\n+  const auto arrow_other_decimal = converter.get_raw(other_decimal);\n+  return *arrow_decimal >= *arrow_other_decimal;\n+}\n+\n+template <typename Decimal>\n+gchar *\n+garrow_decimal_to_string_scale(typename DecimalConverter<Decimal>::GArrowType *decimal,\n+                               gint32 scale)\n+{\n+  DecimalConverter<Decimal> converter;\n+  const auto arrow_decimal = converter.get_raw(decimal);\n+  return g_strdup(arrow_decimal->ToString(scale).c_str());\n+}\n+\n+template <typename Decimal>\n+gchar *\n+garrow_decimal_to_string(typename DecimalConverter<Decimal>::GArrowType *decimal)\n+{\n+  DecimalConverter<Decimal> converter;\n+  const auto arrow_decimal = converter.get_raw(decimal);\n+  return g_strdup(arrow_decimal->ToIntegerString().c_str());\n+}\n+\n+template <typename Decimal>\n+void\n+garrow_decimal_abs(typename DecimalConverter<Decimal>::GArrowType *decimal)\n+{\n+  DecimalConverter<Decimal> converter;\n+  auto arrow_decimal = converter.get_raw(decimal);\n+  arrow_decimal->Abs();\n+}\n+\n+template <typename Decimal>\n+void\n+garrow_decimal_negate(typename DecimalConverter<Decimal>::GArrowType *decimal)\n+{\n+  DecimalConverter<Decimal> converter;\n+  auto arrow_decimal = converter.get_raw(decimal);\n+  arrow_decimal->Negate();\n+}\n+\n+template <typename Decimal>\n+typename DecimalConverter<Decimal>::GArrowType *\n+garrow_decimal_plus(typename DecimalConverter<Decimal>::GArrowType *left,\n+                    typename DecimalConverter<Decimal>::GArrowType *right)\n+{\n+  DecimalConverter<Decimal> converter;\n+  auto arrow_left = converter.get_raw(left);\n+  auto arrow_right = converter.get_raw(right);\n+  auto arrow_decimal = std::make_shared<Decimal>(*arrow_left + *arrow_right);\n+  return converter.new_raw(&arrow_decimal);\n+}\n+\n+template <typename Decimal>\n+typename DecimalConverter<Decimal>::GArrowType *\n+garrow_decimal_minus(typename DecimalConverter<Decimal>::GArrowType *left,\n+                     typename DecimalConverter<Decimal>::GArrowType *right)\n+{\n+  DecimalConverter<Decimal> converter;\n+  auto arrow_left = converter.get_raw(left);\n+  auto arrow_right = converter.get_raw(right);\n+  auto arrow_decimal = std::make_shared<Decimal>(*arrow_left - *arrow_right);\n+  return converter.new_raw(&arrow_decimal);\n+}\n+\n+template <typename Decimal>\n+typename DecimalConverter<Decimal>::GArrowType *\n+garrow_decimal_multiply(typename DecimalConverter<Decimal>::GArrowType *left,\n+                        typename DecimalConverter<Decimal>::GArrowType *right)\n+{\n+  DecimalConverter<Decimal> converter;\n+  auto arrow_left = converter.get_raw(left);\n+  auto arrow_right = converter.get_raw(right);\n+  auto arrow_decimal = std::make_shared<Decimal>(*arrow_left * *arrow_right);\n+  return converter.new_raw(&arrow_decimal);\n+}\n+\n+template <typename Decimal>\n+typename DecimalConverter<Decimal>::GArrowType *\n+garrow_decimal_divide(typename DecimalConverter<Decimal>::GArrowType *left,\n+                      typename DecimalConverter<Decimal>::GArrowType *right,\n+                      typename DecimalConverter<Decimal>::GArrowType **remainder,\n+                      GError **error,\n+                      const gchar *tag)\n+{\n+  DecimalConverter<Decimal> converter;\n+  auto arrow_left = converter.get_raw(left);\n+  auto arrow_right = converter.get_raw(right);\n+  auto arrow_result = arrow_left->Divide(*arrow_right);\n+  if (garrow::check(error, arrow_result, tag)) {\n+    Decimal arrow_quotient_raw;\n+    Decimal arrow_remainder_raw;\n+    std::tie(arrow_quotient_raw, arrow_remainder_raw) = *arrow_result;\n+    if (remainder) {\n+      auto arrow_remainder = std::make_shared<Decimal>(arrow_remainder_raw);\n+      *remainder = converter.new_raw(&arrow_remainder);\n+    }\n+    auto arrow_quotient = std::make_shared<Decimal>(arrow_quotient_raw);\n+    return converter.new_raw(&arrow_quotient);\n+  } else {\n+    if (remainder) {\n+      *remainder = NULL;\n+    }\n+    return NULL;\n+  }\n+}\n+\n+template <typename Decimal>\n+typename DecimalConverter<Decimal>::GArrowType *\n+garrow_decimal_rescale(typename DecimalConverter<Decimal>::GArrowType *decimal,\n+                       gint32 original_scale,\n+                       gint32 new_scale,\n+                       GError **error,\n+                       const gchar *tag)\n+{\n+  DecimalConverter<Decimal> converter;\n+  auto arrow_decimal = converter.get_raw(decimal);\n+  auto arrow_result = arrow_decimal->Rescale(original_scale, new_scale);\n+  if (garrow::check(error, arrow_result, tag)) {\n+    auto arrow_rescaled_decimal = std::make_shared<Decimal>(*arrow_result);\n+    return converter.new_raw(&arrow_rescaled_decimal);\n+  } else {\n+    return NULL;\n+  }\n+}\n+\n+\n+G_BEGIN_DECLS\n+\n+/**\n+ * SECTION: decimal\n+ * @section_id: decimal\n+ * @title: 128-bit and 256-bit decimal classes\n+ * @include: arrow-glib/arrow-glib.h\n+ *\n+ * #GArrowDecimal128 is a 128-bit decimal class.\n+ *\n+ * #GArrowDecimal256 is a 256-bit decimal class.\n+ *\n+ * Since: 0.10.0\n+ */\n+\n+typedef struct GArrowDecimal128Private_ {\n+  std::shared_ptr<arrow::Decimal128> decimal128;\n+} GArrowDecimal128Private;\n+\n+enum {\n+  PROP_DECIMAL128 = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GArrowDecimal128,\n+                           garrow_decimal128,\n+                           G_TYPE_OBJECT)\n+\n+#define GARROW_DECIMAL128_GET_PRIVATE(obj)         \\\n+  static_cast<GArrowDecimal128Private *>(          \\\n+     garrow_decimal128_get_instance_private(       \\\n+       GARROW_DECIMAL128(obj)))\n+\n+static void\n+garrow_decimal128_finalize(GObject *object)\n+{\n+  auto priv = GARROW_DECIMAL128_GET_PRIVATE(object);\n+\n+  priv->decimal128.~shared_ptr();\n+\n+  G_OBJECT_CLASS(garrow_decimal128_parent_class)->finalize(object);\n+}\n+\n+static void\n+garrow_decimal128_set_property(GObject *object,\n+                               guint prop_id,\n+                               const GValue *value,\n+                               GParamSpec *pspec)\n+{\n+  auto priv = GARROW_DECIMAL128_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_DECIMAL128:\n+    priv->decimal128 =\n+      *static_cast<std::shared_ptr<arrow::Decimal128> *>(g_value_get_pointer(value));\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+garrow_decimal128_init(GArrowDecimal128 *object)\n+{\n+  auto priv = GARROW_DECIMAL128_GET_PRIVATE(object);\n+  new(&priv->decimal128) std::shared_ptr<arrow::Decimal128>;\n+}\n+\n+static void\n+garrow_decimal128_class_init(GArrowDecimal128Class *klass)\n+{\n+  GParamSpec *spec;\n+\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = garrow_decimal128_finalize;\n+  gobject_class->set_property = garrow_decimal128_set_property;\n+\n+  spec = g_param_spec_pointer(\"decimal128\",\n+                              \"Decimal128\",\n+                              \"The raw std::shared<arrow::Decimal128> *\",\n+                              static_cast<GParamFlags>(G_PARAM_WRITABLE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_DECIMAL128, spec);\n+}\n+\n+/**\n+ * garrow_decimal128_new_string:\n+ * @data: The data of the decimal.\n+ *\n+ * Returns: A newly created #GArrowDecimal128.\n+ *\n+ * Since: 0.10.0\n+ */\n+GArrowDecimal128 *\n+garrow_decimal128_new_string(const gchar *data)\n+{\n+  return garrow_decimal_new_string<arrow::Decimal128>(data);\n+}\n+\n+/**\n+ * garrow_decimal128_new_integer:\n+ * @data: The data of the decimal.\n+ *\n+ * Returns: A newly created #GArrowDecimal128.\n+ *\n+ * Since: 0.10.0\n+ */\n+GArrowDecimal128 *\n+garrow_decimal128_new_integer(const gint64 data)\n+{\n+  return garrow_decimal_new_integer<arrow::Decimal128>(data);\n+}\n+\n+/**\n+ * garrow_decimal128_equal:\n+ * @decimal: A #GArrowDecimal128.\n+ * @other_decimal: A #GArrowDecimal128 to be compared.\n+ *\n+ * Returns: %TRUE if the decimal is equal to the other decimal, %FALSE\n+ *   otherwise.\n+ *\n+ * Since: 0.12.0\n+ */\n+gboolean\n+garrow_decimal128_equal(GArrowDecimal128 *decimal,\n+                        GArrowDecimal128 *other_decimal)\n+{\n+  return garrow_decimal_equal<arrow::Decimal128>(decimal, other_decimal);\n+}\n+\n+/**\n+ * garrow_decimal128_not_equal:\n+ * @decimal: A #GArrowDecimal128.\n+ * @other_decimal: A #GArrowDecimal128 to be compared.\n+ *\n+ * Returns: %TRUE if the decimal isn't equal to the other decimal,\n+ *   %FALSE otherwise.\n+ *\n+ * Since: 0.12.0\n+ */\n+gboolean\n+garrow_decimal128_not_equal(GArrowDecimal128 *decimal,\n+                            GArrowDecimal128 *other_decimal)\n+{\n+  return garrow_decimal_not_equal<arrow::Decimal128>(decimal, other_decimal);\n+}\n+\n+/**\n+ * garrow_decimal128_less_than:\n+ * @decimal: A #GArrowDecimal128.\n+ * @other_decimal: A #GArrowDecimal128 to be compared.\n+ *\n+ * Returns: %TRUE if the decimal is less than the other decimal,\n+ *   %FALSE otherwise.\n+ *\n+ * Since: 0.12.0\n+ */\n+gboolean\n+garrow_decimal128_less_than(GArrowDecimal128 *decimal,\n+                            GArrowDecimal128 *other_decimal)\n+{\n+  return garrow_decimal_less_than<arrow::Decimal128>(decimal, other_decimal);\n+}\n+\n+/**\n+ * garrow_decimal128_less_than_or_equal:\n+ * @decimal: A #GArrowDecimal128.\n+ * @other_decimal: A #GArrowDecimal128 to be compared.\n+ *\n+ * Returns: %TRUE if the decimal is less than the other decimal\n+ *   or equal to the other decimal, %FALSE otherwise.\n+ *\n+ * Since: 0.12.0\n+ */\n+gboolean\n+garrow_decimal128_less_than_or_equal(GArrowDecimal128 *decimal,\n+                                     GArrowDecimal128 *other_decimal)\n+{\n+  return garrow_decimal_less_than_or_equal<arrow::Decimal128>(decimal, other_decimal);\n+}\n+\n+/**\n+ * garrow_decimal128_greater_than:\n+ * @decimal: A #GArrowDecimal128.\n+ * @other_decimal: A #GArrowDecimal128 to be compared.\n+ *\n+ * Returns: %TRUE if the decimal is greater than the other decimal,\n+ *   %FALSE otherwise.\n+ *\n+ * Since: 0.12.0\n+ */\n+gboolean\n+garrow_decimal128_greater_than(GArrowDecimal128 *decimal,\n+                               GArrowDecimal128 *other_decimal)\n+{\n+  return garrow_decimal_greater_than<arrow::Decimal128>(decimal, other_decimal);\n+}\n+\n+/**\n+ * garrow_decimal128_greater_than_or_equal:\n+ * @decimal: A #GArrowDecimal128.\n+ * @other_decimal: A #GArrowDecimal128 to be compared.\n+ *\n+ * Returns: %TRUE if the decimal is greater than the other decimal\n+ *   or equal to the other decimal, %FALSE otherwise.\n+ *\n+ * Since: 0.12.0\n+ */\n+gboolean\n+garrow_decimal128_greater_than_or_equal(GArrowDecimal128 *decimal,\n+                                        GArrowDecimal128 *other_decimal)\n+{\n+  return garrow_decimal_greater_than_or_equal<arrow::Decimal128>(decimal, other_decimal);\n+}\n+\n+/**\n+ * garrow_decimal128_to_string_scale:\n+ * @decimal: A #GArrowDecimal128.\n+ * @scale: The scale of the decimal.\n+ *\n+ * Returns: The string representation of the decimal.\n+ *\n+ *   It should be freed with g_free() when no longer needed.\n+ *\n+ * Since: 0.10.0\n+ */\n+gchar *\n+garrow_decimal128_to_string_scale(GArrowDecimal128 *decimal, gint32 scale)\n+{\n+  return garrow_decimal_to_string_scale<arrow::Decimal128>(decimal, scale);\n+}\n+\n+/**\n+ * garrow_decimal128_to_string:\n+ * @decimal: A #GArrowDecimal128.\n+ *\n+ * Returns: The string representation of the decimal.\n+ *\n+ *   It should be freed with g_free() when no longer needed.\n+ *\n+ * Since: 0.10.0\n+ */\n+gchar *\n+garrow_decimal128_to_string(GArrowDecimal128 *decimal)\n+{\n+  return garrow_decimal_to_string<arrow::Decimal128>(decimal);\n+}\n+\n+/**\n+ * garrow_decimal128_abs:\n+ * @decimal: A #GArrowDecimal128.\n+ *\n+ * Computes the absolute value of the @decimal destructively.\n+ *\n+ * Since: 0.10.0\n+ */\n+void\n+garrow_decimal128_abs(GArrowDecimal128 *decimal)\n+{\n+  garrow_decimal_abs<arrow::Decimal128>(decimal);\n+}\n+\n+/**\n+ * garrow_decimal128_negate:\n+ * @decimal: A #GArrowDecimal128.\n+ *\n+ * Negate the current value of the @decimal destructively.\n+ *\n+ * Since: 0.10.0\n+ */\n+void\n+garrow_decimal128_negate(GArrowDecimal128 *decimal)\n+{\n+  garrow_decimal_negate<arrow::Decimal128>(decimal);\n+}\n+\n+/**\n+ * garrow_decimal128_to_integer:\n+ * @decimal: A #GArrowDecimal128.\n+ *\n+ * Returns: The 64-bit integer representation of the decimal.\n+ *\n+ * Since: 0.10.0\n+ */\n+gint64\n+garrow_decimal128_to_integer(GArrowDecimal128 *decimal)\n+{\n+  auto arrow_decimal = garrow_decimal128_get_raw(decimal);\n+  return static_cast<int64_t>(*arrow_decimal);\n\nReview comment:\n       We should use `int64_t` here because `arrow::Decimal128` provides `operator int64_t()`.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T21:54:09.204+0000",
                    "updated": "2020-12-18T21:54:09.204+0000",
                    "started": "2020-12-18T21:54:09.204+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526157",
                    "issueId": "13340747"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340747/worklog/526159",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #8919:\nURL: https://github.com/apache/arrow/pull/8919#discussion_r546109583\n\n\n\n##########\nFile path: ruby/red-arrow/lib/arrow/array-builder.rb\n##########\n@@ -115,6 +115,17 @@ def detect_builder_info(value, builder_info)\n             builder: Date32ArrayBuilder.new,\n             detected: true,\n           }\n+        when BigDecimal\n+          if value.precs[0] > Arrow::Decimal128DataType::MAX_PRECISION\n\nReview comment:\n       Done.\n\n##########\nFile path: ruby/red-arrow/lib/arrow/decimal256.rb\n##########\n@@ -0,0 +1,42 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+module Arrow\n+  class Decimal256\n+    alias_method :to_s_raw, :to_s\n+\n+    # @overload to_s\n+    #\n+    #   @return [String]\n+    #     The string representation of the decimal.\n+    #\n+    # @overload to_s(scale)\n+    #\n+    #   @param scale [Integer] The scale of the decimal.\n+    #   @return [String]\n+    #      The string representation of the decimal including the scale.\n+    #\n+    # @since 3.0.0\n+    def to_s(scale=nil)\n+      if scale\n+        to_string_scale(scale)\n+      else\n+        to_s_raw\n+      end\n+    end\n+  end\n+end\n\nReview comment:\n       Done.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-18T21:56:47.804+0000",
                    "updated": "2020-12-18T21:56:47.804+0000",
                    "started": "2020-12-18T21:56:47.804+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526159",
                    "issueId": "13340747"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340747/worklog/526299",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "mrkn commented on pull request #8919:\nURL: https://github.com/apache/arrow/pull/8919#issuecomment-748489044\n\n\n   @kou I released bigdecimal 2.0.3 and 3.0.0. Both versions support `BigDecimal#precision`.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-19T15:33:58.315+0000",
                    "updated": "2020-12-19T15:33:58.315+0000",
                    "started": "2020-12-19T15:33:58.315+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526299",
                    "issueId": "13340747"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340747/worklog/526381",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #8919:\nURL: https://github.com/apache/arrow/pull/8919#issuecomment-748526618\n\n\n   Thanks.\r\n   I've changed to use bigdecimal 2.0.3 or later.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-19T21:19:42.747+0000",
                    "updated": "2020-12-19T21:19:42.747+0000",
                    "started": "2020-12-19T21:19:42.747+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526381",
                    "issueId": "13340747"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340747/worklog/526638",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #8919:\nURL: https://github.com/apache/arrow/pull/8919#issuecomment-748703282\n\n\n   +1\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-21T00:57:57.151+0000",
                    "updated": "2020-12-21T00:57:57.151+0000",
                    "started": "2020-12-21T00:57:57.151+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526638",
                    "issueId": "13340747"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340747/worklog/526640",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou closed pull request #8919:\nURL: https://github.com/apache/arrow/pull/8919\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-21T00:58:32.314+0000",
                    "updated": "2020-12-21T00:58:32.314+0000",
                    "started": "2020-12-21T00:58:32.314+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "526640",
                    "issueId": "13340747"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 8400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6767ed78[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@49dabe7[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@53ca879f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3ae1cc92[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@432d3250[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3d7076f3[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a01e8bd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@eb03633[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@24a53a07[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1a5c078e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f2d5078[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@20a3ea00[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 8400,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Dec 21 00:58:24 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-12-21T00:58:24.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10604/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-11-16T04:14:14.000+0000",
        "updated": "2020-12-21T00:58:33.000+0000",
        "timeoriginalestimate": null,
        "description": "The C++ implementation now support it.\u00a0 We need to ensure Ruby/Gobject bindings do as well.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 8400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Ruby] Support Decimal256 type",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13340747/comment/17252553",
                    "id": "17252553",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "Issue resolved by pull request 8919\n[https://github.com/apache/arrow/pull/8919]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2020-12-21T00:58:24.769+0000",
                    "updated": "2020-12-21T00:58:24.769+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0km0w:",
        "customfield_12314139": null
    }
}