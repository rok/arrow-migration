{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13398600",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398600",
    "key": "ARROW-13827",
    "fields": {
        "fixVersions": [],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/3",
            "id": "3",
            "description": "The problem is a duplicate of an existing issue.",
            "name": "Duplicate"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12625900",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12625900",
                "type": {
                    "id": "12310000",
                    "name": "Duplicate",
                    "inward": "is duplicated by",
                    "outward": "duplicates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"
                },
                "inwardIssue": {
                    "id": "13407753",
                    "key": "ARROW-14413",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13407753",
                    "fields": {
                        "summary": "[C++][Gandiva] Implement levenshtein function",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
                            "name": "Minor",
                            "id": "4"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jpedroantunes",
            "name": "jpedroantunes",
            "key": "jpedroantunes",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34060",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34060",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34060",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34060"
            },
            "displayName": "Jo\u00e3o Pedro Antunes Ferreira",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
            "name": "Closed",
            "id": "6",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334626",
                "id": "12334626",
                "name": "C++ - Gandiva"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jpedroantunes",
            "name": "jpedroantunes",
            "key": "jpedroantunes",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34060",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34060",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34060",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34060"
            },
            "displayName": "Jo\u00e3o Pedro Antunes Ferreira",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jpedroantunes",
            "name": "jpedroantunes",
            "key": "jpedroantunes",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34060",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34060",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34060",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34060"
            },
            "displayName": "Jo\u00e3o Pedro Antunes Ferreira",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 10800,
            "total": 10800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13827/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 18,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398600/worklog/644800",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11051:\nURL: https://github.com/apache/arrow/pull/11051#issuecomment-910022466\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-01T07:38:20.438+0000",
                    "updated": "2021-09-01T07:38:20.438+0000",
                    "started": "2021-09-01T07:38:20.438+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "644800",
                    "issueId": "13398600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398600/worklog/645106",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #11051:\nURL: https://github.com/apache/arrow/pull/11051#issuecomment-910022466\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-09-01T09:37:11.096+0000",
                    "updated": "2021-09-01T09:37:11.096+0000",
                    "started": "2021-09-01T09:37:11.096+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "645106",
                    "issueId": "13398600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398600/worklog/673060",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rkavanap commented on a change in pull request #11051:\nURL: https://github.com/apache/arrow/pull/11051#discussion_r740843680\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n\nReview comment:\n       shouldn't message be String length must be greater than or equal to zero\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n\nReview comment:\n       Isn't better to handle the special case where length of one of the strings (or both) is zero with if statements here (to avoid allocations for these special cases).\r\n                 if (in1_len == 0) return in2_len;\r\n                 if (in2_len == 0) return in1_len;\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n+    gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+    return 0;\n+  }\n+  for (int i = 0; i <= in1_len; i++) {\n+    if ((dist[i] = (int*)malloc(len_dist_2 * sizeof(int*))) == NULL) {\n+      gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+      return 0;\n+    }\n+  }\n+  for (int32_t i = 0; i <= in1_len; i++) dist[i][0] = i;\n+  for (int32_t j = 1; j <= in2_len; j++) dist[0][j] = j;\n+\n+  for (int32_t j = 0; j < in2_len; j++) {\n+    for (int32_t i = 0; i < in1_len; i++) {\n+      if (in1[i] == in2[j]) {\n+        dist[i + 1][j + 1] = dist[i][j];\n\nReview comment:\n       shouldn't this also be min(dist[i][j], 1 + dist[i][j + 1], 1 + dist[i + 1][j]), when in1[i] = in2[j]?\r\n   and when in1[i] != in2[j]  it is a min (1 + dist[i][j], 1 + dist[i][j + 1], 1 + dist[i + 1][j]) as properly coded from 1676..1680... \r\n   \r\n   Atleast In Java it is coded that way.. \r\n   \r\n   \r\n   \r\n   \n\n##########\nFile path: cpp/src/gandiva/tests/projector_test.cc\n##########\n@@ -818,6 +818,41 @@ TEST_F(TestProjector, TestConcat) {\n   EXPECT_ARROW_ARRAY_EQUALS(exp_concat, outputs.at(0));\n }\n \n+TEST_F(TestProjector, TestLevenshtein) {\n+  // schema for input fields\n+  auto f0 = field(\"f0\", arrow::utf8());\n+  auto f1 = field(\"f1\", arrow::utf8());\n+  auto schema = arrow::schema({f0, f1});\n+\n+  // output fields\n+  auto field_lev = field(\"levenshtein\", arrow::int32());\n+\n+  // Build expression\n+  auto lev_expr = TreeExprBuilder::MakeExpression(\"levenshtein\", {f0, f1}, field_lev);\n+\n+  std::shared_ptr<Projector> projector;\n+  auto status = Projector::Make(schema, {lev_expr}, TestConfiguration(), &projector);\n+  EXPECT_TRUE(status.ok()) << status.message();\n+\n+  // Create a row-batch with some sample data\n+  int num_records = 4;\n+  auto array0 = MakeArrowArrayUtf8({\"cat\", \"task\", \"\", \"a\"}, {true, true, true, true});\n+  auto array1 = MakeArrowArrayUtf8({\"coat\", \"test\", \"a\", \"\"}, {true, true, true, true});\n\nReview comment:\n       maybe some fields with validity bit false as well (i.e null fields)?\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n\nReview comment:\n       Isn't it faster to do a single malloc for the entire 2d array in one go as length of both strings is known in advance? e.g dist = malloc((len_dist_1 + 1) * sizeof(int *) + len_dist_1 * len_dist_2 * sizeof(int)) and use a loop to adjust dist[i];\r\n   int *p = (int *) dist + len_dist_1;\r\n   for (i = 0; i < len_dist_1; i++) dist[i] = p + len_dist_2 * i; \r\n   \r\n    that will reduce small allocations in the inner loop and also allow a single free.\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops_test.cc\n##########\n@@ -912,6 +912,35 @@ TEST(TestStringOps, TestReverse) {\n   ctx.Reset();\n }\n \n+TEST(TestStringOps, TestLevenshtein) {\n+  gandiva::ExecutionContext ctx;\n+  uint64_t ctx_ptr = reinterpret_cast<gdv_int64>(&ctx);\n+\n+  EXPECT_EQ(levenshtein_utf8_utf8(ctx_ptr, \"kitten\", 6, \"sitting\", 7), 3);\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  EXPECT_EQ(levenshtein_utf8_utf8(ctx_ptr, \"book\", 4, \"back\", 4), 2);\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  EXPECT_EQ(levenshtein_utf8_utf8(ctx_ptr, \"\", 0, \"a\", 1), 1);\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  EXPECT_EQ(levenshtein_utf8_utf8(ctx_ptr, \"test\", 4, \"task\", 4), 2);\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  EXPECT_EQ(levenshtein_utf8_utf8(ctx_ptr, \"cat\", 3, \"coat\", 4), 1);\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  EXPECT_EQ(levenshtein_utf8_utf8(ctx_ptr, \"coat\", 4, \"coat\", 4), 0);\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  EXPECT_EQ(levenshtein_utf8_utf8(ctx_ptr, \"book\", -5, \"back\", 4), 0);\n\nReview comment:\n       test case for \"book\" to \"bo\" or \"boo\". and \"b\" to \"book\"?\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n+    gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+    return 0;\n+  }\n+  for (int i = 0; i <= in1_len; i++) {\n+    if ((dist[i] = (int*)malloc(len_dist_2 * sizeof(int*))) == NULL) {\n\nReview comment:\n       if we are doing it this way, shouldn't this be a sizeof(int) and not sizeof(int *) as dist[i] is a int pointer but dist[i][j] is an int.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T10:19:06.620+0000",
                    "updated": "2021-11-02T10:19:06.620+0000",
                    "started": "2021-11-02T10:19:06.620+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673060",
                    "issueId": "13398600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398600/worklog/673062",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rkavanap commented on a change in pull request #11051:\nURL: https://github.com/apache/arrow/pull/11051#discussion_r740852458\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n\nReview comment:\n       Isn't it faster to do a single malloc for the entire 2d array in one go as length of both strings is known in advance? e.g dist = malloc((len_dist_1 + 1) * sizeof(int *) + len_dist_1 * len_dist_2 * sizeof(int)) and use a loop to adjust dist[i];\r\n   int *p = (int *) dist + len_dist_1;\r\n   for (i = 0; i < len_dist_1; i++) dist[i] = p + len_dist_2 * i; \r\n   (warning: pointer calculation may not be correct and needs testing..this is just to convey the idea).\r\n   \r\n    that will reduce small allocations in the inner loop and also allow a single free.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T10:22:42.904+0000",
                    "updated": "2021-11-02T10:22:42.904+0000",
                    "started": "2021-11-02T10:22:42.903+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673062",
                    "issueId": "13398600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398600/worklog/673126",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rkavanap commented on a change in pull request #11051:\nURL: https://github.com/apache/arrow/pull/11051#discussion_r741003310\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n\nReview comment:\n       I feel there is a more space efficient algorithm than this as we are only interested in the edit distance and is not interested in reconstructing the edited input..Atleast the Java version uses this space efficient algorithm.\r\n   \r\n   Is there any reason why we have to use this algorithm and not the one used by Java? \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T12:23:22.118+0000",
                    "updated": "2021-11-02T12:23:22.118+0000",
                    "started": "2021-11-02T12:23:22.117+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673126",
                    "issueId": "13398600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398600/worklog/673423",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rkavanap commented on a change in pull request #11051:\nURL: https://github.com/apache/arrow/pull/11051#discussion_r740843680\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n\nReview comment:\n       shouldn't message be String length must be greater than or equal to zero\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n\nReview comment:\n       Isn't better to handle the special case where length of one of the strings (or both) is zero with if statements here (to avoid allocations for these special cases).\r\n                 if (in1_len == 0) return in2_len;\r\n                 if (in2_len == 0) return in1_len;\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n+    gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+    return 0;\n+  }\n+  for (int i = 0; i <= in1_len; i++) {\n+    if ((dist[i] = (int*)malloc(len_dist_2 * sizeof(int*))) == NULL) {\n+      gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+      return 0;\n+    }\n+  }\n+  for (int32_t i = 0; i <= in1_len; i++) dist[i][0] = i;\n+  for (int32_t j = 1; j <= in2_len; j++) dist[0][j] = j;\n+\n+  for (int32_t j = 0; j < in2_len; j++) {\n+    for (int32_t i = 0; i < in1_len; i++) {\n+      if (in1[i] == in2[j]) {\n+        dist[i + 1][j + 1] = dist[i][j];\n\nReview comment:\n       shouldn't this also be min(dist[i][j], 1 + dist[i][j + 1], 1 + dist[i + 1][j]), when in1[i] = in2[j]?\r\n   and when in1[i] != in2[j]  it is a min (1 + dist[i][j], 1 + dist[i][j + 1], 1 + dist[i + 1][j]) as properly coded from 1676..1680... \r\n   \r\n   Atleast In Java it is coded that way.. \r\n   \r\n   \r\n   \r\n   \n\n##########\nFile path: cpp/src/gandiva/tests/projector_test.cc\n##########\n@@ -818,6 +818,41 @@ TEST_F(TestProjector, TestConcat) {\n   EXPECT_ARROW_ARRAY_EQUALS(exp_concat, outputs.at(0));\n }\n \n+TEST_F(TestProjector, TestLevenshtein) {\n+  // schema for input fields\n+  auto f0 = field(\"f0\", arrow::utf8());\n+  auto f1 = field(\"f1\", arrow::utf8());\n+  auto schema = arrow::schema({f0, f1});\n+\n+  // output fields\n+  auto field_lev = field(\"levenshtein\", arrow::int32());\n+\n+  // Build expression\n+  auto lev_expr = TreeExprBuilder::MakeExpression(\"levenshtein\", {f0, f1}, field_lev);\n+\n+  std::shared_ptr<Projector> projector;\n+  auto status = Projector::Make(schema, {lev_expr}, TestConfiguration(), &projector);\n+  EXPECT_TRUE(status.ok()) << status.message();\n+\n+  // Create a row-batch with some sample data\n+  int num_records = 4;\n+  auto array0 = MakeArrowArrayUtf8({\"cat\", \"task\", \"\", \"a\"}, {true, true, true, true});\n+  auto array1 = MakeArrowArrayUtf8({\"coat\", \"test\", \"a\", \"\"}, {true, true, true, true});\n\nReview comment:\n       maybe some fields with validity bit false as well (i.e null fields)?\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n\nReview comment:\n       Isn't it faster to do a single malloc for the entire 2d array in one go as length of both strings is known in advance? e.g dist = malloc((len_dist_1 + 1) * sizeof(int *) + len_dist_1 * len_dist_2 * sizeof(int)) and use a loop to adjust dist[i];\r\n   int *p = (int *) dist + len_dist_1;\r\n   for (i = 0; i < len_dist_1; i++) dist[i] = p + len_dist_2 * i; \r\n   \r\n    that will reduce small allocations in the inner loop and also allow a single free.\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops_test.cc\n##########\n@@ -912,6 +912,35 @@ TEST(TestStringOps, TestReverse) {\n   ctx.Reset();\n }\n \n+TEST(TestStringOps, TestLevenshtein) {\n+  gandiva::ExecutionContext ctx;\n+  uint64_t ctx_ptr = reinterpret_cast<gdv_int64>(&ctx);\n+\n+  EXPECT_EQ(levenshtein_utf8_utf8(ctx_ptr, \"kitten\", 6, \"sitting\", 7), 3);\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  EXPECT_EQ(levenshtein_utf8_utf8(ctx_ptr, \"book\", 4, \"back\", 4), 2);\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  EXPECT_EQ(levenshtein_utf8_utf8(ctx_ptr, \"\", 0, \"a\", 1), 1);\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  EXPECT_EQ(levenshtein_utf8_utf8(ctx_ptr, \"test\", 4, \"task\", 4), 2);\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  EXPECT_EQ(levenshtein_utf8_utf8(ctx_ptr, \"cat\", 3, \"coat\", 4), 1);\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  EXPECT_EQ(levenshtein_utf8_utf8(ctx_ptr, \"coat\", 4, \"coat\", 4), 0);\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  EXPECT_EQ(levenshtein_utf8_utf8(ctx_ptr, \"book\", -5, \"back\", 4), 0);\n\nReview comment:\n       test case for \"book\" to \"bo\" or \"boo\". and \"b\" to \"book\"?\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n+    gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+    return 0;\n+  }\n+  for (int i = 0; i <= in1_len; i++) {\n+    if ((dist[i] = (int*)malloc(len_dist_2 * sizeof(int*))) == NULL) {\n\nReview comment:\n       if we are doing it this way, shouldn't this be a sizeof(int) and not sizeof(int *) as dist[i] is a int pointer but dist[i][j] is an int.\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n\nReview comment:\n       Isn't it faster to do a single malloc for the entire 2d array in one go as length of both strings is known in advance? e.g dist = malloc((len_dist_1 + 1) * sizeof(int *) + len_dist_1 * len_dist_2 * sizeof(int)) and use a loop to adjust dist[i];\r\n   int *p = (int *) dist + len_dist_1;\r\n   for (i = 0; i < len_dist_1; i++) dist[i] = p + len_dist_2 * i; \r\n   (warning: pointer calculation may not be correct and needs testing..this is just to convey the idea).\r\n   \r\n    that will reduce small allocations in the inner loop and also allow a single free.\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n\nReview comment:\n       I feel there is a more space efficient algorithm than this as we are only interested in the edit distance and is not interested in reconstructing the edited input..Atleast the Java version uses this space efficient algorithm.\r\n   \r\n   Is there any reason why we have to use this algorithm and not the one used by Java? \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T17:55:59.215+0000",
                    "updated": "2021-11-02T17:55:59.215+0000",
                    "started": "2021-11-02T17:55:59.214+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673423",
                    "issueId": "13398600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398600/worklog/673982",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rkavanap commented on a change in pull request #11051:\nURL: https://github.com/apache/arrow/pull/11051#discussion_r740843680\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n\nReview comment:\n       shouldn't message be String length must be greater than or equal to zero\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n\nReview comment:\n       Isn't better to handle the special case where length of one of the strings (or both) is zero with if statements here (to avoid allocations for these special cases).\r\n                 if (in1_len == 0) return in2_len;\r\n                 if (in2_len == 0) return in1_len;\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n+    gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+    return 0;\n+  }\n+  for (int i = 0; i <= in1_len; i++) {\n+    if ((dist[i] = (int*)malloc(len_dist_2 * sizeof(int*))) == NULL) {\n+      gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+      return 0;\n+    }\n+  }\n+  for (int32_t i = 0; i <= in1_len; i++) dist[i][0] = i;\n+  for (int32_t j = 1; j <= in2_len; j++) dist[0][j] = j;\n+\n+  for (int32_t j = 0; j < in2_len; j++) {\n+    for (int32_t i = 0; i < in1_len; i++) {\n+      if (in1[i] == in2[j]) {\n+        dist[i + 1][j + 1] = dist[i][j];\n\nReview comment:\n       shouldn't this also be min(dist[i][j], 1 + dist[i][j + 1], 1 + dist[i + 1][j]), when in1[i] = in2[j]?\r\n   and when in1[i] != in2[j]  it is a min (1 + dist[i][j], 1 + dist[i][j + 1], 1 + dist[i + 1][j]) as properly coded from 1676..1680... \r\n   \r\n   Atleast In Java it is coded that way.. \r\n   \r\n   \r\n   \r\n   \n\n##########\nFile path: cpp/src/gandiva/tests/projector_test.cc\n##########\n@@ -818,6 +818,41 @@ TEST_F(TestProjector, TestConcat) {\n   EXPECT_ARROW_ARRAY_EQUALS(exp_concat, outputs.at(0));\n }\n \n+TEST_F(TestProjector, TestLevenshtein) {\n+  // schema for input fields\n+  auto f0 = field(\"f0\", arrow::utf8());\n+  auto f1 = field(\"f1\", arrow::utf8());\n+  auto schema = arrow::schema({f0, f1});\n+\n+  // output fields\n+  auto field_lev = field(\"levenshtein\", arrow::int32());\n+\n+  // Build expression\n+  auto lev_expr = TreeExprBuilder::MakeExpression(\"levenshtein\", {f0, f1}, field_lev);\n+\n+  std::shared_ptr<Projector> projector;\n+  auto status = Projector::Make(schema, {lev_expr}, TestConfiguration(), &projector);\n+  EXPECT_TRUE(status.ok()) << status.message();\n+\n+  // Create a row-batch with some sample data\n+  int num_records = 4;\n+  auto array0 = MakeArrowArrayUtf8({\"cat\", \"task\", \"\", \"a\"}, {true, true, true, true});\n+  auto array1 = MakeArrowArrayUtf8({\"coat\", \"test\", \"a\", \"\"}, {true, true, true, true});\n\nReview comment:\n       maybe some fields with validity bit false as well (i.e null fields)?\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n\nReview comment:\n       Isn't it faster to do a single malloc for the entire 2d array in one go as length of both strings is known in advance? e.g dist = malloc((len_dist_1 + 1) * sizeof(int *) + len_dist_1 * len_dist_2 * sizeof(int)) and use a loop to adjust dist[i];\r\n   int *p = (int *) dist + len_dist_1;\r\n   for (i = 0; i < len_dist_1; i++) dist[i] = p + len_dist_2 * i; \r\n   \r\n    that will reduce small allocations in the inner loop and also allow a single free.\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops_test.cc\n##########\n@@ -912,6 +912,35 @@ TEST(TestStringOps, TestReverse) {\n   ctx.Reset();\n }\n \n+TEST(TestStringOps, TestLevenshtein) {\n+  gandiva::ExecutionContext ctx;\n+  uint64_t ctx_ptr = reinterpret_cast<gdv_int64>(&ctx);\n+\n+  EXPECT_EQ(levenshtein_utf8_utf8(ctx_ptr, \"kitten\", 6, \"sitting\", 7), 3);\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  EXPECT_EQ(levenshtein_utf8_utf8(ctx_ptr, \"book\", 4, \"back\", 4), 2);\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  EXPECT_EQ(levenshtein_utf8_utf8(ctx_ptr, \"\", 0, \"a\", 1), 1);\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  EXPECT_EQ(levenshtein_utf8_utf8(ctx_ptr, \"test\", 4, \"task\", 4), 2);\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  EXPECT_EQ(levenshtein_utf8_utf8(ctx_ptr, \"cat\", 3, \"coat\", 4), 1);\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  EXPECT_EQ(levenshtein_utf8_utf8(ctx_ptr, \"coat\", 4, \"coat\", 4), 0);\n+  EXPECT_FALSE(ctx.has_error());\n+\n+  EXPECT_EQ(levenshtein_utf8_utf8(ctx_ptr, \"book\", -5, \"back\", 4), 0);\n\nReview comment:\n       test case for \"book\" to \"bo\" or \"boo\". and \"b\" to \"book\"?\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n+    gdv_fn_context_set_error_msg(context, \"Insufficient space to allocate buffer\");\n+    return 0;\n+  }\n+  for (int i = 0; i <= in1_len; i++) {\n+    if ((dist[i] = (int*)malloc(len_dist_2 * sizeof(int*))) == NULL) {\n\nReview comment:\n       if we are doing it this way, shouldn't this be a sizeof(int) and not sizeof(int *) as dist[i] is a int pointer but dist[i][j] is an int.\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n+                                const char* in2, int32_t in2_len) {\n+  if (in1_len < 0 || in2_len < 0) {\n+    gdv_fn_context_set_error_msg(context, \"String length must be greater than 0\");\n+    return 0;\n+  }\n+  int32_t a, b, c, aux;\n+  int32_t len_dist_1 = in1_len + 1;\n+  int32_t len_dist_2 = in2_len + 1;\n+  // dist[i][j] represents the Levenstein distance between the strings\n+  int** dist;\n+  if ((dist = (int**)malloc((len_dist_1 + 1) * sizeof(int*))) == NULL) {\n\nReview comment:\n       Isn't it faster to do a single malloc for the entire 2d array in one go as length of both strings is known in advance? e.g dist = malloc((len_dist_1 + 1) * sizeof(int *) + len_dist_1 * len_dist_2 * sizeof(int)) and use a loop to adjust dist[i];\r\n   int *p = (int *) dist + len_dist_1;\r\n   for (i = 0; i < len_dist_1; i++) dist[i] = p + len_dist_2 * i; \r\n   (warning: pointer calculation may not be correct and needs testing..this is just to convey the idea).\r\n   \r\n    that will reduce small allocations in the inner loop and also allow a single free.\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n\nReview comment:\n       I feel there is a more space efficient algorithm than this as we are only interested in the edit distance and is not interested in reconstructing the edited input..Atleast the Java version uses this space efficient algorithm.\r\n   \r\n   Is there any reason why we have to use this algorithm and not the one used by Java? \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-02T21:27:22.570+0000",
                    "updated": "2021-11-02T21:27:22.570+0000",
                    "started": "2021-11-02T21:27:22.570+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "673982",
                    "issueId": "13398600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398600/worklog/674386",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rkavanap commented on a change in pull request #11051:\nURL: https://github.com/apache/arrow/pull/11051#discussion_r741622617\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n\nReview comment:\n       Infact I feel more strongly now that we should use a memory efficient algorithm. What if the column width is 65K? we will need 4GB to run this alorithm. In fact Java version uses an algorithm that uses only 2n space where n is the smallest of the 2 strings.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-03T05:05:42.822+0000",
                    "updated": "2021-11-03T05:05:42.822+0000",
                    "started": "2021-11-03T05:05:42.822+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "674386",
                    "issueId": "13398600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398600/worklog/674387",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rkavanap commented on a change in pull request #11051:\nURL: https://github.com/apache/arrow/pull/11051#discussion_r741622617\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n\nReview comment:\n       Infact I feel more strongly now that we should use a memory efficient algorithm. What if the column width of the 2 columns is 65K? If my math is correct, we will need 4GB to run this algorithm. In fact Java version uses an algorithm that uses only 2n space where n is the smallest of the 2 strings.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-03T05:07:29.072+0000",
                    "updated": "2021-11-03T05:07:29.072+0000",
                    "started": "2021-11-03T05:07:29.072+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "674387",
                    "issueId": "13398600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398600/worklog/674420",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on pull request #11051:\nURL: https://github.com/apache/arrow/pull/11051#issuecomment-958707989\n\n\n   How is this different from https://github.com/apache/arrow/pull/11522?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-03T07:28:45.569+0000",
                    "updated": "2021-11-03T07:28:45.569+0000",
                    "started": "2021-11-03T07:28:45.569+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "674420",
                    "issueId": "13398600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398600/worklog/674559",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rkavanap commented on a change in pull request #11051:\nURL: https://github.com/apache/arrow/pull/11051#discussion_r741859849\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n\nReview comment:\n       https://github.com/apache/commons-lang/blob/18a82dc4ae9c1095216b6cb288b3c5567ffd179b/src/main/java/org/apache/commons/lang3/StringUtils.java#L2336 has an implementation of levenshtein that use less memory.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-03T11:48:57.889+0000",
                    "updated": "2021-11-03T11:48:57.889+0000",
                    "started": "2021-11-03T11:48:57.889+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "674559",
                    "issueId": "13398600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398600/worklog/675125",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on pull request #11051:\nURL: https://github.com/apache/arrow/pull/11051#issuecomment-958707989\n\n\n   How is this different from https://github.com/apache/arrow/pull/11522?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-04T00:14:26.814+0000",
                    "updated": "2021-11-04T00:14:26.814+0000",
                    "started": "2021-11-04T00:14:26.813+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "675125",
                    "issueId": "13398600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398600/worklog/675146",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rkavanap commented on a change in pull request #11051:\nURL: https://github.com/apache/arrow/pull/11051#discussion_r741622617\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n\nReview comment:\n       Infact I feel more strongly now that we should use a memory efficient algorithm. What if the column width is 65K? we will need 4GB to run this alorithm. In fact Java version uses an algorithm that uses only 2n space where n is the smallest of the 2 strings.\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n\nReview comment:\n       Infact I feel more strongly now that we should use a memory efficient algorithm. What if the column width of the 2 columns is 65K? If my math is correct, we will need 4GB to run this algorithm. In fact Java version uses an algorithm that uses only 2n space where n is the smallest of the 2 strings.\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n\nReview comment:\n       https://github.com/apache/commons-lang/blob/18a82dc4ae9c1095216b6cb288b3c5567ffd179b/src/main/java/org/apache/commons/lang3/StringUtils.java#L2336 has an implementation of levenshtein that use less memory.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-04T00:16:44.575+0000",
                    "updated": "2021-11-04T00:16:44.575+0000",
                    "started": "2021-11-04T00:16:44.575+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "675146",
                    "issueId": "13398600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398600/worklog/675633",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on pull request #11051:\nURL: https://github.com/apache/arrow/pull/11051#issuecomment-958707989\n\n\n   How is this different from https://github.com/apache/arrow/pull/11522?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-04T01:11:03.841+0000",
                    "updated": "2021-11-04T01:11:03.841+0000",
                    "started": "2021-11-04T01:11:03.841+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "675633",
                    "issueId": "13398600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398600/worklog/675654",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rkavanap commented on a change in pull request #11051:\nURL: https://github.com/apache/arrow/pull/11051#discussion_r741622617\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n\nReview comment:\n       Infact I feel more strongly now that we should use a memory efficient algorithm. What if the column width is 65K? we will need 4GB to run this alorithm. In fact Java version uses an algorithm that uses only 2n space where n is the smallest of the 2 strings.\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n\nReview comment:\n       Infact I feel more strongly now that we should use a memory efficient algorithm. What if the column width of the 2 columns is 65K? If my math is correct, we will need 4GB to run this algorithm. In fact Java version uses an algorithm that uses only 2n space where n is the smallest of the 2 strings.\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n\nReview comment:\n       https://github.com/apache/commons-lang/blob/18a82dc4ae9c1095216b6cb288b3c5567ffd179b/src/main/java/org/apache/commons/lang3/StringUtils.java#L2336 has an implementation of levenshtein that use less memory.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-04T01:13:18.551+0000",
                    "updated": "2021-11-04T01:13:18.551+0000",
                    "started": "2021-11-04T01:13:18.550+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "675654",
                    "issueId": "13398600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398600/worklog/675867",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "rkavanap commented on a change in pull request #11051:\nURL: https://github.com/apache/arrow/pull/11051#discussion_r741622617\n\n\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n\nReview comment:\n       Infact I feel more strongly now that we should use a memory efficient algorithm. What if the column width is 65K? we will need 4GB to run this alorithm. In fact Java version uses an algorithm that uses only 2n space where n is the smallest of the 2 strings.\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n\nReview comment:\n       Infact I feel more strongly now that we should use a memory efficient algorithm. What if the column width of the 2 columns is 65K? If my math is correct, we will need 4GB to run this algorithm. In fact Java version uses an algorithm that uses only 2n space where n is the smallest of the 2 strings.\n\n##########\nFile path: cpp/src/gandiva/precompiled/string_ops.cc\n##########\n@@ -1642,6 +1642,55 @@ const char* convert_toUTF8(int64_t context, const char* value, int32_t value_len\n   return value;\n }\n \n+// Calculate the levenshtein distance between two string values\n+FORCE_INLINE\n+gdv_int32 levenshtein_utf8_utf8(int64_t context, const char* in1, int32_t in1_len,\n\nReview comment:\n       https://github.com/apache/commons-lang/blob/18a82dc4ae9c1095216b6cb288b3c5567ffd179b/src/main/java/org/apache/commons/lang3/StringUtils.java#L2336 has an implementation of levenshtein that use less memory.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-04T01:36:28.856+0000",
                    "updated": "2021-11-04T01:36:28.856+0000",
                    "started": "2021-11-04T01:36:28.856+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "675867",
                    "issueId": "13398600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398600/worklog/676039",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vvellanki commented on pull request #11051:\nURL: https://github.com/apache/arrow/pull/11051#issuecomment-958707989\n\n\n   How is this different from https://github.com/apache/arrow/pull/11522?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-04T01:53:23.988+0000",
                    "updated": "2021-11-04T01:53:23.988+0000",
                    "started": "2021-11-04T01:53:23.988+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "676039",
                    "issueId": "13398600"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13398600/worklog/677010",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jpedroantunes closed pull request #11051:\nURL: https://github.com/apache/arrow/pull/11051\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-11-05T12:20:45.508+0000",
                    "updated": "2021-11-05T12:20:45.508+0000",
                    "started": "2021-11-05T12:20:45.508+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "677010",
                    "issueId": "13398600"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
            "id": "3",
            "description": "A task that needs to be done.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
            "name": "Task",
            "subtask": false,
            "avatarId": 21148
        },
        "timespent": 10800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@21e74117[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1c7efaa2[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4384965f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@28c4cf67[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@15ed0be0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@499c5701[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e4d1603[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@20fc5b5a[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5d33e6ae[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@763c9656[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@30876b9c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7263c05d[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 10800,
        "customfield_12312520": null,
        "customfield_12312521": "2021-09-01 07:37:12.0",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-11-05T12:59:35.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-13827/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2021-09-01T07:37:12.000+0000",
        "updated": "2021-11-05T12:59:35.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 10800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][Gandiva] Implement LEVENSHTEIN Hive function on Gandiva",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [],
            "maxResults": 0,
            "total": 0,
            "startAt": 0
        },
        "customfield_12311820": "0|z0uhcw:",
        "customfield_12314139": null
    }
}