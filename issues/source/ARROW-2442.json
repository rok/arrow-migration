{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13151378",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13151378",
    "key": "ARROW-2442",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "beginner",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341707",
                "id": "12341707",
                "description": "",
                "name": "0.9.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-03-19"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2442/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@60e2a50c[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@48a395b9[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7b2c0251[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2ff64ed0[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a0fe722[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2c68cd65[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@37cd6c33[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2ad024d4[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f23f05b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5ca1b3f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@593a5341[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@72e73a36[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Apr 18 11:00:38 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-04-18T11:00:38.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2442/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-04-10T13:28:55.000+0000",
        "updated": "2018-04-18T11:00:45.000+0000",
        "timeoriginalestimate": null,
        "description": "See discussion in [https://github.com/apache/arrow/pull/1852#discussion_r179919627]\r\n\r\nThere are various {{Append()}} overloads in Builder and subclasses, some of which append one value, some of which append multiple values at once.\r\n\r\nThe API might be clearer and less error-prone if multiple-append variants were named differently, for example {{AppendValues()}}. Especially with the pointer-taking variants, it's probably easy to call the wrong overload by mistake.\r\n\r\nThe existing methods would have to go through a deprecation cycle.",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Disambiguate Builder::Append overloads",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13151378/comment/16439823",
                    "id": "16439823",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou opened a new pull request #1900: ARROW-2442: [C++] Disambiguate builder Append() overloads\nURL: https://github.com/apache/arrow/pull/1900\n \n \n   Vector-style Append() methods are renamed AppendValues().\r\n   The original methods are marked deprecated.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-16T18:24:45.346+0000",
                    "updated": "2018-04-16T18:24:45.346+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13151378/comment/16439826",
                    "id": "16439826",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1900: ARROW-2442: [C++] Disambiguate builder Append() overloads\nURL: https://github.com/apache/arrow/pull/1900#issuecomment-381702739\n \n \n   Is it worth adding deprecation pragmas so that users of those functions get a compiler warning?\r\n   \r\n   See https://stackoverflow.com/questions/295120/c-mark-as-deprecated\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-16T18:25:42.385+0000",
                    "updated": "2018-04-16T18:25:42.385+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13151378/comment/16440719",
                    "id": "16440719",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1900: ARROW-2442: [C++] Disambiguate builder Append() overloads\nURL: https://github.com/apache/arrow/pull/1900#issuecomment-381702739\n \n \n   Is it worth adding deprecation pragmas so that users of those functions get a compiler warning?\r\n   \r\n   See https://stackoverflow.com/questions/295120/c-mark-as-deprecated\r\n   \r\n   Answer: we already have such a macro in `util/variant.h`, we can just reuse it.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-17T10:25:43.953+0000",
                    "updated": "2018-04-17T10:25:43.953+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13151378/comment/16442285",
                    "id": "16442285",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy closed pull request #1900: ARROW-2442: [C++] Disambiguate builder Append() overloads\nURL: https://github.com/apache/arrow/pull/1900\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/adapters/orc/adapter.cc b/cpp/src/arrow/adapters/orc/adapter.cc\nindex f253808e34..527b9e986a 100644\n--- a/cpp/src/arrow/adapters/orc/adapter.cc\n+++ b/cpp/src/arrow/adapters/orc/adapter.cc\n@@ -435,7 +435,7 @@ class ORCFileReader::Impl {\n     if (batch->hasNulls) {\n       valid_bytes = reinterpret_cast<const uint8_t*>(batch->notNull.data()) + offset;\n     }\n-    RETURN_NOT_OK(builder->Append(length, valid_bytes));\n+    RETURN_NOT_OK(builder->AppendValues(length, valid_bytes));\n \n     for (int i = 0; i < builder->num_fields(); i++) {\n       RETURN_NOT_OK(AppendBatch(type->getSubtype(i), batch->fields[i], offset, length,\n@@ -482,7 +482,7 @@ class ORCFileReader::Impl {\n       int64_t start = batch->offsets[i];\n       int64_t list_length = batch->offsets[i + 1] - start;\n       if (list_length && (!has_nulls || batch->notNull[i])) {\n-        RETURN_NOT_OK(struct_builder->Append(list_length, nullptr));\n+        RETURN_NOT_OK(struct_builder->AppendValues(list_length, nullptr));\n         RETURN_NOT_OK(AppendBatch(keytype, keys, start, list_length,\n                                   struct_builder->field_builder(0)));\n         RETURN_NOT_OK(AppendBatch(valtype, vals, start, list_length,\n@@ -506,7 +506,7 @@ class ORCFileReader::Impl {\n       valid_bytes = reinterpret_cast<const uint8_t*>(batch->notNull.data()) + offset;\n     }\n     const elem_type* source = batch->data.data() + offset;\n-    RETURN_NOT_OK(builder->Append(source, length, valid_bytes));\n+    RETURN_NOT_OK(builder->AppendValues(source, length, valid_bytes));\n     return Status::OK();\n   }\n \ndiff --git a/cpp/src/arrow/array-test.cc b/cpp/src/arrow/array-test.cc\nindex 2ae9f48db4..60ed2915c9 100644\n--- a/cpp/src/arrow/array-test.cc\n+++ b/cpp/src/arrow/array-test.cc\n@@ -592,7 +592,7 @@ TYPED_TEST(TestPrimitiveBuilder, TestAppendScalar) {\n   this->Check(this->builder_nn_, false);\n }\n \n-TYPED_TEST(TestPrimitiveBuilder, TestAppendVector) {\n+TYPED_TEST(TestPrimitiveBuilder, TestAppendValues) {\n   DECL_T();\n \n   int64_t size = 10000;\n@@ -604,8 +604,8 @@ TYPED_TEST(TestPrimitiveBuilder, TestAppendVector) {\n   // first slug\n   int64_t K = 1000;\n \n-  ASSERT_OK(this->builder_->Append(draws.data(), K, valid_bytes.data()));\n-  ASSERT_OK(this->builder_nn_->Append(draws.data(), K));\n+  ASSERT_OK(this->builder_->AppendValues(draws.data(), K, valid_bytes.data()));\n+  ASSERT_OK(this->builder_nn_->AppendValues(draws.data(), K));\n \n   ASSERT_EQ(1000, this->builder_->length());\n   ASSERT_EQ(1024, this->builder_->capacity());\n@@ -614,8 +614,9 @@ TYPED_TEST(TestPrimitiveBuilder, TestAppendVector) {\n   ASSERT_EQ(1024, this->builder_nn_->capacity());\n \n   // Append the next 9000\n-  ASSERT_OK(this->builder_->Append(draws.data() + K, size - K, valid_bytes.data() + K));\n-  ASSERT_OK(this->builder_nn_->Append(draws.data() + K, size - K));\n+  ASSERT_OK(\n+      this->builder_->AppendValues(draws.data() + K, size - K, valid_bytes.data() + K));\n+  ASSERT_OK(this->builder_nn_->AppendValues(draws.data() + K, size - K));\n \n   ASSERT_EQ(size, this->builder_->length());\n   ASSERT_EQ(BitUtil::NextPower2(size), this->builder_->capacity());\n@@ -624,7 +625,7 @@ TYPED_TEST(TestPrimitiveBuilder, TestAppendVector) {\n   this->Check(this->builder_nn_, false);\n }\n \n-TYPED_TEST(TestPrimitiveBuilder, TestAppendVectorStdBool) {\n+TYPED_TEST(TestPrimitiveBuilder, TestAppendValuesStdBool) {\n   // ARROW-1383\n   DECL_T();\n \n@@ -641,8 +642,8 @@ TYPED_TEST(TestPrimitiveBuilder, TestAppendVectorStdBool) {\n   for (int64_t i = 0; i < K; ++i) {\n     is_valid.push_back(this->valid_bytes_[i] != 0);\n   }\n-  ASSERT_OK(this->builder_->Append(draws.data(), K, is_valid));\n-  ASSERT_OK(this->builder_nn_->Append(draws.data(), K));\n+  ASSERT_OK(this->builder_->AppendValues(draws.data(), K, is_valid));\n+  ASSERT_OK(this->builder_nn_->AppendValues(draws.data(), K));\n \n   ASSERT_EQ(1000, this->builder_->length());\n   ASSERT_EQ(1024, this->builder_->capacity());\n@@ -657,8 +658,8 @@ TYPED_TEST(TestPrimitiveBuilder, TestAppendVectorStdBool) {\n     is_valid.push_back(this->valid_bytes_[i] != 0);\n   }\n \n-  ASSERT_OK(this->builder_->Append(partial_draws, is_valid));\n-  ASSERT_OK(this->builder_nn_->Append(partial_draws));\n+  ASSERT_OK(this->builder_->AppendValues(partial_draws, is_valid));\n+  ASSERT_OK(this->builder_nn_->AppendValues(partial_draws));\n \n   ASSERT_EQ(size, this->builder_->length());\n   ASSERT_EQ(BitUtil::NextPower2(size), this->builder_->capacity());\n@@ -724,8 +725,8 @@ TEST(TestBooleanBuilder, TestStdBoolVectorAppend) {\n       chunk_values.push_back(values[i]);\n       chunk_is_valid.push_back(is_valid[i]);\n     }\n-    ASSERT_OK(builder.Append(chunk_values, chunk_is_valid));\n-    ASSERT_OK(builder_nn.Append(chunk_values));\n+    ASSERT_OK(builder.AppendValues(chunk_values, chunk_is_valid));\n+    ASSERT_OK(builder_nn.AppendValues(chunk_values));\n   }\n \n   std::shared_ptr<Array> result, result_nn;\n@@ -997,7 +998,7 @@ TEST_F(TestStringBuilder, TestAppendVector) {\n   int reps = 1000;\n \n   for (int j = 0; j < reps; ++j) {\n-    ASSERT_OK(builder_->Append(strings, valid_bytes.data()));\n+    ASSERT_OK(builder_->AppendValues(strings, valid_bytes.data()));\n   }\n   Done();\n \n@@ -1030,7 +1031,7 @@ TEST_F(TestStringBuilder, TestAppendCStringsWithValidBytes) {\n   int reps = 1000;\n \n   for (int j = 0; j < reps; ++j) {\n-    ASSERT_OK(builder_->Append(strings, N, valid_bytes.data()));\n+    ASSERT_OK(builder_->AppendValues(strings, N, valid_bytes.data()));\n   }\n   Done();\n \n@@ -1063,7 +1064,7 @@ TEST_F(TestStringBuilder, TestAppendCStringsWithoutValidBytes) {\n   int reps = 1000;\n \n   for (int j = 0; j < reps; ++j) {\n-    ASSERT_OK(builder_->Append(strings, N));\n+    ASSERT_OK(builder_->AppendValues(strings, N));\n   }\n   Done();\n \n@@ -1427,8 +1428,9 @@ TEST_F(TestFWBinaryArray, Builder) {\n \n   const uint8_t* raw_is_valid = is_valid.data();\n \n-  ASSERT_OK(builder_->Append(raw_data, 50, raw_is_valid));\n-  ASSERT_OK(builder_->Append(raw_data + 50 * byte_width, length - 50, raw_is_valid + 50));\n+  ASSERT_OK(builder_->AppendValues(raw_data, 50, raw_is_valid));\n+  ASSERT_OK(\n+      builder_->AppendValues(raw_data + 50 * byte_width, length - 50, raw_is_valid + 50));\n   ASSERT_OK(builder_->Finish(&result));\n   CheckResult(*result);\n \n@@ -1659,10 +1661,10 @@ TEST_F(TestAdaptiveIntBuilder, TestInt64) {\n   ASSERT_TRUE(expected_->Equals(result_));\n }\n \n-TEST_F(TestAdaptiveIntBuilder, TestAppendVector) {\n+TEST_F(TestAdaptiveIntBuilder, TestAppendValues) {\n   std::vector<int64_t> expected_values(\n       {0, static_cast<int64_t>(std::numeric_limits<int32_t>::max()) + 1});\n-  ASSERT_OK(builder_->Append(expected_values.data(), expected_values.size()));\n+  ASSERT_OK(builder_->AppendValues(expected_values.data(), expected_values.size()));\n   Done();\n \n   ArrayFromVector<Int64Type, int64_t>(expected_values, &expected_);\n@@ -1754,10 +1756,10 @@ TEST_F(TestAdaptiveUIntBuilder, TestUInt64) {\n   ASSERT_TRUE(expected_->Equals(result_));\n }\n \n-TEST_F(TestAdaptiveUIntBuilder, TestAppendVector) {\n+TEST_F(TestAdaptiveUIntBuilder, TestAppendValues) {\n   std::vector<uint64_t> expected_values(\n       {0, static_cast<uint64_t>(std::numeric_limits<uint32_t>::max()) + 1});\n-  ASSERT_OK(builder_->Append(expected_values.data(), expected_values.size()));\n+  ASSERT_OK(builder_->AppendValues(expected_values.data(), expected_values.size()));\n   Done();\n \n   ArrayFromVector<UInt64Type, uint64_t>(expected_values, &expected_);\n@@ -2395,7 +2397,7 @@ TEST(TestDecimalDictionaryBuilder, Basic) {\n   auto dtype = arrow::dictionary(int8(), decimal_array);\n \n   Int8Builder int_builder;\n-  ASSERT_OK(int_builder.Append({0, 0, 1, 0}));\n+  ASSERT_OK(int_builder.AppendValues({0, 0, 1, 0}));\n   std::shared_ptr<Array> int_array;\n   ASSERT_OK(int_builder.Finish(&int_array));\n \n@@ -2497,17 +2499,17 @@ TEST_F(TestListArray, Equality) {\n   vector<int32_t> unequal_values = {1, 2, 2, 2, 3, 4, 5};\n \n   // setup two equal arrays\n-  ASSERT_OK(builder_->Append(equal_offsets.data(), equal_offsets.size()));\n-  ASSERT_OK(vb->Append(equal_values.data(), equal_values.size()));\n+  ASSERT_OK(builder_->AppendValues(equal_offsets.data(), equal_offsets.size()));\n+  ASSERT_OK(vb->AppendValues(equal_values.data(), equal_values.size()));\n \n   ASSERT_OK(builder_->Finish(&array));\n-  ASSERT_OK(builder_->Append(equal_offsets.data(), equal_offsets.size()));\n-  ASSERT_OK(vb->Append(equal_values.data(), equal_values.size()));\n+  ASSERT_OK(builder_->AppendValues(equal_offsets.data(), equal_offsets.size()));\n+  ASSERT_OK(vb->AppendValues(equal_values.data(), equal_values.size()));\n \n   ASSERT_OK(builder_->Finish(&equal_array));\n   // now an unequal one\n-  ASSERT_OK(builder_->Append(unequal_offsets.data(), unequal_offsets.size()));\n-  ASSERT_OK(vb->Append(unequal_values.data(), unequal_values.size()));\n+  ASSERT_OK(builder_->AppendValues(unequal_offsets.data(), unequal_offsets.size()));\n+  ASSERT_OK(vb->AppendValues(unequal_values.data(), unequal_values.size()));\n \n   ASSERT_OK(builder_->Finish(&unequal_array));\n \n@@ -2678,7 +2680,7 @@ TEST_F(TestListArray, BulkAppend) {\n   Int32Builder* vb = static_cast<Int32Builder*>(builder_->value_builder());\n   ASSERT_OK(vb->Reserve(values.size()));\n \n-  ASSERT_OK(builder_->Append(offsets.data(), offsets.size(), is_valid.data()));\n+  ASSERT_OK(builder_->AppendValues(offsets.data(), offsets.size(), is_valid.data()));\n   for (int32_t value : values) {\n     ASSERT_OK(vb->Append(value));\n   }\n@@ -2696,8 +2698,8 @@ TEST_F(TestListArray, BulkAppendInvalid) {\n   Int32Builder* vb = static_cast<Int32Builder*>(builder_->value_builder());\n   ASSERT_OK(vb->Reserve(values.size()));\n \n-  ASSERT_OK(builder_->Append(offsets.data(), offsets.size(), is_valid.data()));\n-  ASSERT_OK(builder_->Append(offsets.data(), offsets.size(), is_valid.data()));\n+  ASSERT_OK(builder_->AppendValues(offsets.data(), offsets.size(), is_valid.data()));\n+  ASSERT_OK(builder_->AppendValues(offsets.data(), offsets.size(), is_valid.data()));\n   for (int32_t value : values) {\n     ASSERT_OK(vb->Append(value));\n   }\n@@ -3029,10 +3031,10 @@ TEST_F(TestStructBuilder, BulkAppend) {\n   ASSERT_OK(char_vb->Resize(list_values.size()));\n   ASSERT_OK(int_vb->Resize(int_values.size()));\n \n-  ASSERT_OK(builder_->Append(struct_is_valid.size(), struct_is_valid.data()));\n+  ASSERT_OK(builder_->AppendValues(struct_is_valid.size(), struct_is_valid.data()));\n \n-  ASSERT_OK(\n-      list_vb->Append(list_offsets.data(), list_offsets.size(), list_is_valid.data()));\n+  ASSERT_OK(list_vb->AppendValues(list_offsets.data(), list_offsets.size(),\n+                                  list_is_valid.data()));\n   for (int8_t value : list_values) {\n     char_vb->UnsafeAppend(value);\n   }\n@@ -3061,10 +3063,10 @@ TEST_F(TestStructBuilder, BulkAppendInvalid) {\n   ASSERT_OK(char_vb->Reserve(list_values.size()));\n   ASSERT_OK(int_vb->Reserve(int_values.size()));\n \n-  ASSERT_OK(builder_->Append(struct_is_valid.size(), struct_is_valid.data()));\n+  ASSERT_OK(builder_->AppendValues(struct_is_valid.size(), struct_is_valid.data()));\n \n-  ASSERT_OK(\n-      list_vb->Append(list_offsets.data(), list_offsets.size(), list_is_valid.data()));\n+  ASSERT_OK(list_vb->AppendValues(list_offsets.data(), list_offsets.size(),\n+                                  list_is_valid.data()));\n   for (int8_t value : list_values) {\n     char_vb->UnsafeAppend(value);\n   }\n@@ -3103,9 +3105,9 @@ TEST_F(TestStructBuilder, TestEquality) {\n   ASSERT_OK(int_vb->Reserve(int_values.size()));\n \n   // setup two equal arrays, one of which takes an unequal bitmap\n-  ASSERT_OK(builder_->Append(struct_is_valid.size(), struct_is_valid.data()));\n-  ASSERT_OK(\n-      list_vb->Append(list_offsets.data(), list_offsets.size(), list_is_valid.data()));\n+  ASSERT_OK(builder_->AppendValues(struct_is_valid.size(), struct_is_valid.data()));\n+  ASSERT_OK(list_vb->AppendValues(list_offsets.data(), list_offsets.size(),\n+                                  list_is_valid.data()));\n   for (int8_t value : list_values) {\n     char_vb->UnsafeAppend(value);\n   }\n@@ -3119,9 +3121,9 @@ TEST_F(TestStructBuilder, TestEquality) {\n   ASSERT_OK(char_vb->Resize(list_values.size()));\n   ASSERT_OK(int_vb->Resize(int_values.size()));\n \n-  ASSERT_OK(builder_->Append(struct_is_valid.size(), struct_is_valid.data()));\n-  ASSERT_OK(\n-      list_vb->Append(list_offsets.data(), list_offsets.size(), list_is_valid.data()));\n+  ASSERT_OK(builder_->AppendValues(struct_is_valid.size(), struct_is_valid.data()));\n+  ASSERT_OK(list_vb->AppendValues(list_offsets.data(), list_offsets.size(),\n+                                  list_is_valid.data()));\n   for (int8_t value : list_values) {\n     char_vb->UnsafeAppend(value);\n   }\n@@ -3136,10 +3138,10 @@ TEST_F(TestStructBuilder, TestEquality) {\n   ASSERT_OK(int_vb->Resize(int_values.size()));\n \n   // setup an unequal one with the unequal bitmap\n-  ASSERT_OK(\n-      builder_->Append(unequal_struct_is_valid.size(), unequal_struct_is_valid.data()));\n-  ASSERT_OK(\n-      list_vb->Append(list_offsets.data(), list_offsets.size(), list_is_valid.data()));\n+  ASSERT_OK(builder_->AppendValues(unequal_struct_is_valid.size(),\n+                                   unequal_struct_is_valid.data()));\n+  ASSERT_OK(list_vb->AppendValues(list_offsets.data(), list_offsets.size(),\n+                                  list_is_valid.data()));\n   for (int8_t value : list_values) {\n     char_vb->UnsafeAppend(value);\n   }\n@@ -3154,9 +3156,10 @@ TEST_F(TestStructBuilder, TestEquality) {\n   ASSERT_OK(int_vb->Resize(int_values.size()));\n \n   // setup an unequal one with unequal offsets\n-  ASSERT_OK(builder_->Append(struct_is_valid.size(), struct_is_valid.data()));\n-  ASSERT_OK(list_vb->Append(unequal_list_offsets.data(), unequal_list_offsets.size(),\n-                            unequal_list_is_valid.data()));\n+  ASSERT_OK(builder_->AppendValues(struct_is_valid.size(), struct_is_valid.data()));\n+  ASSERT_OK(list_vb->AppendValues(unequal_list_offsets.data(),\n+                                  unequal_list_offsets.size(),\n+                                  unequal_list_is_valid.data()));\n   for (int8_t value : list_values) {\n     char_vb->UnsafeAppend(value);\n   }\n@@ -3171,9 +3174,9 @@ TEST_F(TestStructBuilder, TestEquality) {\n   ASSERT_OK(int_vb->Resize(int_values.size()));\n \n   // setup anunequal one with unequal values\n-  ASSERT_OK(builder_->Append(struct_is_valid.size(), struct_is_valid.data()));\n-  ASSERT_OK(\n-      list_vb->Append(list_offsets.data(), list_offsets.size(), list_is_valid.data()));\n+  ASSERT_OK(builder_->AppendValues(struct_is_valid.size(), struct_is_valid.data()));\n+  ASSERT_OK(list_vb->AppendValues(list_offsets.data(), list_offsets.size(),\n+                                  list_is_valid.data()));\n   for (int8_t value : unequal_list_values) {\n     char_vb->UnsafeAppend(value);\n   }\n@@ -3230,9 +3233,9 @@ TEST_F(TestStructBuilder, TestSlice) {\n   ASSERT_OK(char_vb->Reserve(list_values.size()));\n   ASSERT_OK(int_vb->Reserve(int_values.size()));\n \n-  ASSERT_OK(builder_->Append(struct_is_valid.size(), struct_is_valid.data()));\n-  ASSERT_OK(\n-      list_vb->Append(list_offsets.data(), list_offsets.size(), list_is_valid.data()));\n+  ASSERT_OK(builder_->AppendValues(struct_is_valid.size(), struct_is_valid.data()));\n+  ASSERT_OK(list_vb->AppendValues(list_offsets.data(), list_offsets.size(),\n+                                  list_is_valid.data()));\n   for (int8_t value : list_values) {\n     char_vb->UnsafeAppend(value);\n   }\ndiff --git a/cpp/src/arrow/builder-benchmark.cc b/cpp/src/arrow/builder-benchmark.cc\nindex 9ad1295773..12b3eac147 100644\n--- a/cpp/src/arrow/builder-benchmark.cc\n+++ b/cpp/src/arrow/builder-benchmark.cc\n@@ -33,7 +33,7 @@ static void BM_BuildPrimitiveArrayNoNulls(\n     Int64Builder builder;\n     for (int i = 0; i < kFinalSize; i++) {\n       // Build up an array of 512 MiB in size\n-      ABORT_NOT_OK(builder.Append(data.data(), data.size(), nullptr));\n+      ABORT_NOT_OK(builder.AppendValues(data.data(), data.size(), nullptr));\n     }\n     std::shared_ptr<Array> out;\n     ABORT_NOT_OK(builder.Finish(&out));\n@@ -69,7 +69,7 @@ static void BM_BuildAdaptiveIntNoNulls(\n     AdaptiveIntBuilder builder;\n     for (int64_t i = 0; i < size; i += chunk_size) {\n       // Build up an array of 512 MiB in size\n-      ABORT_NOT_OK(builder.Append(data.data() + i, chunk_size, nullptr));\n+      ABORT_NOT_OK(builder.AppendValues(data.data() + i, chunk_size, nullptr));\n     }\n     std::shared_ptr<Array> out;\n     ABORT_NOT_OK(builder.Finish(&out));\n@@ -107,7 +107,7 @@ static void BM_BuildAdaptiveUIntNoNulls(\n     AdaptiveUIntBuilder builder;\n     for (int64_t i = 0; i < size; i += chunk_size) {\n       // Build up an array of 512 MiB in size\n-      ABORT_NOT_OK(builder.Append(data.data() + i, chunk_size, nullptr));\n+      ABORT_NOT_OK(builder.AppendValues(data.data() + i, chunk_size, nullptr));\n     }\n     std::shared_ptr<Array> out;\n     ABORT_NOT_OK(builder.Finish(&out));\ndiff --git a/cpp/src/arrow/builder.cc b/cpp/src/arrow/builder.cc\nindex 78c42f4fca..ece191f3e7 100644\n--- a/cpp/src/arrow/builder.cc\n+++ b/cpp/src/arrow/builder.cc\n@@ -265,8 +265,8 @@ Status PrimitiveBuilder<T>::Resize(int64_t capacity) {\n }\n \n template <typename T>\n-Status PrimitiveBuilder<T>::Append(const value_type* values, int64_t length,\n-                                   const uint8_t* valid_bytes) {\n+Status PrimitiveBuilder<T>::AppendValues(const value_type* values, int64_t length,\n+                                         const uint8_t* valid_bytes) {\n   RETURN_NOT_OK(Reserve(length));\n \n   if (length > 0) {\n@@ -282,7 +282,13 @@ Status PrimitiveBuilder<T>::Append(const value_type* values, int64_t length,\n \n template <typename T>\n Status PrimitiveBuilder<T>::Append(const value_type* values, int64_t length,\n-                                   const std::vector<bool>& is_valid) {\n+                                   const uint8_t* valid_bytes) {\n+  return AppendValues(values, length, valid_bytes);\n+}\n+\n+template <typename T>\n+Status PrimitiveBuilder<T>::AppendValues(const value_type* values, int64_t length,\n+                                         const std::vector<bool>& is_valid) {\n   RETURN_NOT_OK(Reserve(length));\n   DCHECK_EQ(length, static_cast<int64_t>(is_valid.size()));\n \n@@ -297,15 +303,32 @@ Status PrimitiveBuilder<T>::Append(const value_type* values, int64_t length,\n   return Status::OK();\n }\n \n+template <typename T>\n+Status PrimitiveBuilder<T>::Append(const value_type* values, int64_t length,\n+                                   const std::vector<bool>& is_valid) {\n+  return AppendValues(values, length, is_valid);\n+}\n+\n+template <typename T>\n+Status PrimitiveBuilder<T>::AppendValues(const std::vector<value_type>& values,\n+                                         const std::vector<bool>& is_valid) {\n+  return AppendValues(values.data(), static_cast<int64_t>(values.size()), is_valid);\n+}\n+\n template <typename T>\n Status PrimitiveBuilder<T>::Append(const std::vector<value_type>& values,\n                                    const std::vector<bool>& is_valid) {\n-  return Append(values.data(), static_cast<int64_t>(values.size()), is_valid);\n+  return AppendValues(values, is_valid);\n+}\n+\n+template <typename T>\n+Status PrimitiveBuilder<T>::AppendValues(const std::vector<value_type>& values) {\n+  return AppendValues(values.data(), static_cast<int64_t>(values.size()));\n }\n \n template <typename T>\n Status PrimitiveBuilder<T>::Append(const std::vector<value_type>& values) {\n-  return Append(values.data(), static_cast<int64_t>(values.size()));\n+  return AppendValues(values);\n }\n \n template <typename T>\n@@ -411,8 +434,8 @@ Status AdaptiveIntBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n   return Status::OK();\n }\n \n-Status AdaptiveIntBuilder::Append(const int64_t* values, int64_t length,\n-                                  const uint8_t* valid_bytes) {\n+Status AdaptiveIntBuilder::AppendValues(const int64_t* values, int64_t length,\n+                                        const uint8_t* valid_bytes) {\n   RETURN_NOT_OK(Reserve(length));\n \n   if (length > 0) {\n@@ -468,6 +491,11 @@ Status AdaptiveIntBuilder::Append(const int64_t* values, int64_t length,\n   return Status::OK();\n }\n \n+Status AdaptiveIntBuilder::Append(const int64_t* values, int64_t length,\n+                                  const uint8_t* valid_bytes) {\n+  return AppendValues(values, length, valid_bytes);\n+}\n+\n template <typename new_type, typename old_type>\n typename std::enable_if<sizeof(old_type) >= sizeof(new_type), Status>::type\n AdaptiveIntBuilder::ExpandIntSizeInternal() {\n@@ -567,8 +595,8 @@ Status AdaptiveUIntBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n   return Status::OK();\n }\n \n-Status AdaptiveUIntBuilder::Append(const uint64_t* values, int64_t length,\n-                                   const uint8_t* valid_bytes) {\n+Status AdaptiveUIntBuilder::AppendValues(const uint64_t* values, int64_t length,\n+                                         const uint8_t* valid_bytes) {\n   RETURN_NOT_OK(Reserve(length));\n \n   if (length > 0) {\n@@ -624,6 +652,11 @@ Status AdaptiveUIntBuilder::Append(const uint64_t* values, int64_t length,\n   return Status::OK();\n }\n \n+Status AdaptiveUIntBuilder::Append(const uint64_t* values, int64_t length,\n+                                   const uint8_t* valid_bytes) {\n+  return AppendValues(values, length, valid_bytes);\n+}\n+\n template <typename new_type, typename old_type>\n typename std::enable_if<sizeof(old_type) >= sizeof(new_type), Status>::type\n AdaptiveUIntBuilder::ExpandIntSizeInternal() {\n@@ -744,8 +777,8 @@ Status BooleanBuilder::FinishInternal(std::shared_ptr<ArrayData>* out) {\n   return Status::OK();\n }\n \n-Status BooleanBuilder::Append(const uint8_t* values, int64_t length,\n-                              const uint8_t* valid_bytes) {\n+Status BooleanBuilder::AppendValues(const uint8_t* values, int64_t length,\n+                                    const uint8_t* valid_bytes) {\n   RETURN_NOT_OK(Reserve(length));\n \n   for (int64_t i = 0; i < length; ++i) {\n@@ -758,7 +791,12 @@ Status BooleanBuilder::Append(const uint8_t* values, int64_t length,\n }\n \n Status BooleanBuilder::Append(const uint8_t* values, int64_t length,\n-                              const std::vector<bool>& is_valid) {\n+                              const uint8_t* valid_bytes) {\n+  return AppendValues(values, length, valid_bytes);\n+}\n+\n+Status BooleanBuilder::AppendValues(const uint8_t* values, int64_t length,\n+                                    const std::vector<bool>& is_valid) {\n   RETURN_NOT_OK(Reserve(length));\n   DCHECK_EQ(length, static_cast<int64_t>(is_valid.size()));\n \n@@ -771,17 +809,31 @@ Status BooleanBuilder::Append(const uint8_t* values, int64_t length,\n   return Status::OK();\n }\n \n+Status BooleanBuilder::Append(const uint8_t* values, int64_t length,\n+                              const std::vector<bool>& is_valid) {\n+  return AppendValues(values, length, is_valid);\n+}\n+\n+Status BooleanBuilder::AppendValues(const std::vector<uint8_t>& values,\n+                                    const std::vector<bool>& is_valid) {\n+  return AppendValues(values.data(), static_cast<int64_t>(values.size()), is_valid);\n+}\n+\n Status BooleanBuilder::Append(const std::vector<uint8_t>& values,\n                               const std::vector<bool>& is_valid) {\n-  return Append(values.data(), static_cast<int64_t>(values.size()), is_valid);\n+  return AppendValues(values, is_valid);\n+}\n+\n+Status BooleanBuilder::AppendValues(const std::vector<uint8_t>& values) {\n+  return AppendValues(values.data(), static_cast<int64_t>(values.size()));\n }\n \n Status BooleanBuilder::Append(const std::vector<uint8_t>& values) {\n-  return Append(values.data(), static_cast<int64_t>(values.size()));\n+  return AppendValues(values);\n }\n \n-Status BooleanBuilder::Append(const std::vector<bool>& values,\n-                              const std::vector<bool>& is_valid) {\n+Status BooleanBuilder::AppendValues(const std::vector<bool>& values,\n+                                    const std::vector<bool>& is_valid) {\n   const int64_t length = static_cast<int64_t>(values.size());\n   RETURN_NOT_OK(Reserve(length));\n   DCHECK_EQ(length, static_cast<int64_t>(is_valid.size()));\n@@ -795,7 +847,12 @@ Status BooleanBuilder::Append(const std::vector<bool>& values,\n   return Status::OK();\n }\n \n-Status BooleanBuilder::Append(const std::vector<bool>& values) {\n+Status BooleanBuilder::Append(const std::vector<bool>& values,\n+                              const std::vector<bool>& is_valid) {\n+  return AppendValues(values, is_valid);\n+}\n+\n+Status BooleanBuilder::AppendValues(const std::vector<bool>& values) {\n   const int64_t length = static_cast<int64_t>(values.size());\n   RETURN_NOT_OK(Reserve(length));\n \n@@ -807,6 +864,10 @@ Status BooleanBuilder::Append(const std::vector<bool>& values) {\n   return Status::OK();\n }\n \n+Status BooleanBuilder::Append(const std::vector<bool>& values) {\n+  return AppendValues(values);\n+}\n+\n // ----------------------------------------------------------------------\n // DictionaryBuilder\n \n@@ -995,7 +1056,7 @@ typename DictionaryBuilder<T>::Scalar DictionaryBuilder<T>::GetDictionaryValue(\n template <typename T>\n Status DictionaryBuilder<T>::FinishInternal(std::shared_ptr<ArrayData>* out) {\n   entry_id_offset_ += dict_builder_.length();\n-  RETURN_NOT_OK(overflow_dict_builder_.Append(\n+  RETURN_NOT_OK(overflow_dict_builder_.AppendValues(\n       reinterpret_cast<const DictionaryBuilder<T>::Scalar*>(dict_builder_.data()->data()),\n       dict_builder_.length(), nullptr));\n \n@@ -1226,14 +1287,19 @@ ListBuilder::ListBuilder(MemoryPool* pool, std::unique_ptr<ArrayBuilder> value_b\n       offsets_builder_(pool),\n       value_builder_(std::move(value_builder)) {}\n \n-Status ListBuilder::Append(const int32_t* offsets, int64_t length,\n-                           const uint8_t* valid_bytes) {\n+Status ListBuilder::AppendValues(const int32_t* offsets, int64_t length,\n+                                 const uint8_t* valid_bytes) {\n   RETURN_NOT_OK(Reserve(length));\n   UnsafeAppendToBitmap(valid_bytes, length);\n   offsets_builder_.UnsafeAppend(offsets, length);\n   return Status::OK();\n }\n \n+Status ListBuilder::Append(const int32_t* offsets, int64_t length,\n+                           const uint8_t* valid_bytes) {\n+  return AppendValues(offsets, length, valid_bytes);\n+}\n+\n Status ListBuilder::AppendNextOffset() {\n   int64_t num_values = value_builder_->length();\n   if (ARROW_PREDICT_FALSE(num_values > kListMaximumElements)) {\n@@ -1385,8 +1451,8 @@ const uint8_t* BinaryBuilder::GetValue(int64_t i, int32_t* out_length) const {\n \n StringBuilder::StringBuilder(MemoryPool* pool) : BinaryBuilder(utf8(), pool) {}\n \n-Status StringBuilder::Append(const std::vector<std::string>& values,\n-                             const uint8_t* valid_bytes) {\n+Status StringBuilder::AppendValues(const std::vector<std::string>& values,\n+                                   const uint8_t* valid_bytes) {\n   std::size_t total_length = std::accumulate(\n       values.begin(), values.end(), 0ULL,\n       [](uint64_t sum, const std::string& str) { return sum + str.size(); });\n@@ -1413,8 +1479,13 @@ Status StringBuilder::Append(const std::vector<std::string>& values,\n   return Status::OK();\n }\n \n-Status StringBuilder::Append(const char** values, int64_t length,\n+Status StringBuilder::Append(const std::vector<std::string>& values,\n                              const uint8_t* valid_bytes) {\n+  return AppendValues(values, valid_bytes);\n+}\n+\n+Status StringBuilder::AppendValues(const char** values, int64_t length,\n+                                   const uint8_t* valid_bytes) {\n   std::size_t total_length = 0;\n   std::vector<std::size_t> value_lengths(length);\n   bool have_null_value = false;\n@@ -1471,6 +1542,11 @@ Status StringBuilder::Append(const char** values, int64_t length,\n   return Status::OK();\n }\n \n+Status StringBuilder::Append(const char** values, int64_t length,\n+                             const uint8_t* valid_bytes) {\n+  return AppendValues(values, length, valid_bytes);\n+}\n+\n // ----------------------------------------------------------------------\n // Fixed width binary\n \n@@ -1480,13 +1556,18 @@ FixedSizeBinaryBuilder::FixedSizeBinaryBuilder(const std::shared_ptr<DataType>&\n       byte_width_(static_cast<const FixedSizeBinaryType&>(*type).byte_width()),\n       byte_builder_(pool) {}\n \n-Status FixedSizeBinaryBuilder::Append(const uint8_t* data, int64_t length,\n-                                      const uint8_t* valid_bytes) {\n+Status FixedSizeBinaryBuilder::AppendValues(const uint8_t* data, int64_t length,\n+                                            const uint8_t* valid_bytes) {\n   RETURN_NOT_OK(Reserve(length));\n   UnsafeAppendToBitmap(valid_bytes, length);\n   return byte_builder_.Append(data, length * byte_width_);\n }\n \n+Status FixedSizeBinaryBuilder::Append(const uint8_t* data, int64_t length,\n+                                      const uint8_t* valid_bytes) {\n+  return AppendValues(data, length, valid_bytes);\n+}\n+\n Status FixedSizeBinaryBuilder::Append(const std::string& value) {\n   return Append(reinterpret_cast<const uint8_t*>(value.c_str()));\n }\ndiff --git a/cpp/src/arrow/builder.h b/cpp/src/arrow/builder.h\nindex 54ce1dfecc..e6de390209 100644\n--- a/cpp/src/arrow/builder.h\n+++ b/cpp/src/arrow/builder.h\n@@ -217,6 +217,10 @@ class ARROW_EXPORT PrimitiveBuilder : public ArrayBuilder {\n   /// \\param[in] valid_bytes an optional sequence of bytes where non-zero\n   /// indicates a valid (non-null) value\n   /// \\return Status\n+  Status AppendValues(const value_type* values, int64_t length,\n+                      const uint8_t* valid_bytes = NULLPTR);\n+  /// \\deprecated Use AppendValues instead.\n+  ARROW_DEPRECATED(\"Use AppendValues instead\")\n   Status Append(const value_type* values, int64_t length,\n                 const uint8_t* valid_bytes = NULLPTR);\n \n@@ -226,6 +230,10 @@ class ARROW_EXPORT PrimitiveBuilder : public ArrayBuilder {\n   /// \\param[in] is_valid an std::vector<bool> indicating valid (1) or null\n   /// (0). Equal in length to values\n   /// \\return Status\n+  Status AppendValues(const value_type* values, int64_t length,\n+                      const std::vector<bool>& is_valid);\n+  /// \\deprecated Use AppendValues instead.\n+  ARROW_DEPRECATED(\"Use AppendValues instead\")\n   Status Append(const value_type* values, int64_t length,\n                 const std::vector<bool>& is_valid);\n \n@@ -234,11 +242,18 @@ class ARROW_EXPORT PrimitiveBuilder : public ArrayBuilder {\n   /// \\param[in] is_valid an std::vector<bool> indicating valid (1) or null\n   /// (0). Equal in length to values\n   /// \\return Status\n+  Status AppendValues(const std::vector<value_type>& values,\n+                      const std::vector<bool>& is_valid);\n+  /// \\deprecated Use AppendValues instead.\n+  ARROW_DEPRECATED(\"Use AppendValues instead\")\n   Status Append(const std::vector<value_type>& values, const std::vector<bool>& is_valid);\n \n   /// \\brief Append a sequence of elements in one shot\n   /// \\param[in] values a std::vector of values\n   /// \\return Status\n+  Status AppendValues(const std::vector<value_type>& values);\n+  /// \\deprecated Use AppendValues instead.\n+  ARROW_DEPRECATED(\"Use AppendValues instead\")\n   Status Append(const std::vector<value_type>& values);\n \n   Status FinishInternal(std::shared_ptr<ArrayData>* out) override;\n@@ -267,6 +282,7 @@ class ARROW_EXPORT NumericBuilder : public PrimitiveBuilder<T> {\n       : PrimitiveBuilder<T1>(TypeTraits<T1>::type_singleton(), pool) {}\n \n   using PrimitiveBuilder<T>::Append;\n+  using PrimitiveBuilder<T>::AppendValues;\n   using PrimitiveBuilder<T>::Init;\n   using PrimitiveBuilder<T>::Resize;\n   using PrimitiveBuilder<T>::Reserve;\n@@ -433,6 +449,10 @@ class ARROW_EXPORT AdaptiveUIntBuilder : public internal::AdaptiveIntBuilderBase\n   /// \\param[in] valid_bytes an optional sequence of bytes where non-zero\n   /// indicates a valid (non-null) value\n   /// \\return Status\n+  Status AppendValues(const uint64_t* values, int64_t length,\n+                      const uint8_t* valid_bytes = NULLPTR);\n+  /// \\deprecated Use AppendValues instead.\n+  ARROW_DEPRECATED(\"Use AppendValues instead\")\n   Status Append(const uint64_t* values, int64_t length,\n                 const uint8_t* valid_bytes = NULLPTR);\n \n@@ -495,6 +515,10 @@ class ARROW_EXPORT AdaptiveIntBuilder : public internal::AdaptiveIntBuilderBase\n   /// \\param[in] valid_bytes an optional sequence of bytes where non-zero\n   /// indicates a valid (non-null) value\n   /// \\return Status\n+  Status AppendValues(const int64_t* values, int64_t length,\n+                      const uint8_t* valid_bytes = NULLPTR);\n+  /// \\deprecated Use AppendValues instead.\n+  ARROW_DEPRECATED(\"Use AppendValues instead\")\n   Status Append(const int64_t* values, int64_t length,\n                 const uint8_t* valid_bytes = NULLPTR);\n \n@@ -560,6 +584,10 @@ class ARROW_EXPORT BooleanBuilder : public ArrayBuilder {\n   /// \\param[in] valid_bytes an optional sequence of bytes where non-zero\n   /// indicates a valid (non-null) value\n   /// \\return Status\n+  Status AppendValues(const uint8_t* values, int64_t length,\n+                      const uint8_t* valid_bytes = NULLPTR);\n+  /// \\deprecated Use AppendValues instead.\n+  ARROW_DEPRECATED(\"Use AppendValues instead\")\n   Status Append(const uint8_t* values, int64_t length,\n                 const uint8_t* valid_bytes = NULLPTR);\n \n@@ -569,6 +597,10 @@ class ARROW_EXPORT BooleanBuilder : public ArrayBuilder {\n   /// \\param[in] is_valid an std::vector<bool> indicating valid (1) or null\n   /// (0). Equal in length to values\n   /// \\return Status\n+  Status AppendValues(const uint8_t* values, int64_t length,\n+                      const std::vector<bool>& is_valid);\n+  /// \\deprecated Use AppendValues instead.\n+  ARROW_DEPRECATED(\"Use AppendValues instead\")\n   Status Append(const uint8_t* values, int64_t length, const std::vector<bool>& is_valid);\n \n   /// \\brief Append a sequence of elements in one shot\n@@ -576,11 +608,18 @@ class ARROW_EXPORT BooleanBuilder : public ArrayBuilder {\n   /// \\param[in] is_valid an std::vector<bool> indicating valid (1) or null\n   /// (0). Equal in length to values\n   /// \\return Status\n+  Status AppendValues(const std::vector<uint8_t>& values,\n+                      const std::vector<bool>& is_valid);\n+  /// \\deprecated Use AppendValues instead.\n+  ARROW_DEPRECATED(\"Use AppendValues instead\")\n   Status Append(const std::vector<uint8_t>& values, const std::vector<bool>& is_valid);\n \n   /// \\brief Append a sequence of elements in one shot\n   /// \\param[in] values a std::vector of bytes\n   /// \\return Status\n+  Status AppendValues(const std::vector<uint8_t>& values);\n+  /// \\deprecated Use AppendValues instead.\n+  ARROW_DEPRECATED(\"Use AppendValues instead\")\n   Status Append(const std::vector<uint8_t>& values);\n \n   /// \\brief Append a sequence of elements in one shot\n@@ -588,11 +627,17 @@ class ARROW_EXPORT BooleanBuilder : public ArrayBuilder {\n   /// \\param[in] is_valid an std::vector<bool> indicating valid (1) or null\n   /// (0). Equal in length to values\n   /// \\return Status\n+  Status AppendValues(const std::vector<bool>& values, const std::vector<bool>& is_valid);\n+  /// \\deprecated Use AppendValues instead.\n+  ARROW_DEPRECATED(\"Use AppendValues instead\")\n   Status Append(const std::vector<bool>& values, const std::vector<bool>& is_valid);\n \n   /// \\brief Append a sequence of elements in one shot\n   /// \\param[in] values an std::vector<bool> indicating true (1) or false\n   /// \\return Status\n+  Status AppendValues(const std::vector<bool>& values);\n+  /// \\deprecated Use AppendValues instead.\n+  ARROW_DEPRECATED(\"Use AppendValues instead\")\n   Status Append(const std::vector<bool>& values);\n \n   Status FinishInternal(std::shared_ptr<ArrayData>* out) override;\n@@ -638,6 +683,10 @@ class ARROW_EXPORT ListBuilder : public ArrayBuilder {\n   ///\n   /// If passed, valid_bytes is of equal length to values, and any zero byte\n   /// will be considered as a null for that slot\n+  Status AppendValues(const int32_t* offsets, int64_t length,\n+                      const uint8_t* valid_bytes = NULLPTR);\n+  /// \\deprecated Use AppendValues instead.\n+  ARROW_DEPRECATED(\"Use AppendValues instead\")\n   Status Append(const int32_t* offsets, int64_t length,\n                 const uint8_t* valid_bytes = NULLPTR);\n \n@@ -718,6 +767,16 @@ class ARROW_EXPORT StringBuilder : public BinaryBuilder {\n \n   using BinaryBuilder::Append;\n \n+  /// \\brief Append a sequence of strings in one shot.\n+  ///\n+  /// \\param[in] values a vector of strings\n+  /// \\param[in] valid_bytes an optional sequence of bytes where non-zero\n+  /// indicates a valid (non-null) value\n+  /// \\return Status\n+  Status AppendValues(const std::vector<std::string>& values,\n+                      const uint8_t* valid_bytes = NULLPTR);\n+  /// \\deprecated Use AppendValues instead.\n+  ARROW_DEPRECATED(\"Use AppendValues instead\")\n   Status Append(const std::vector<std::string>& values,\n                 const uint8_t* valid_bytes = NULLPTR);\n \n@@ -730,6 +789,10 @@ class ARROW_EXPORT StringBuilder : public BinaryBuilder {\n   /// \\param[in] valid_bytes an optional sequence of bytes where non-zero\n   /// indicates a valid (non-null) value\n   /// \\return Status\n+  Status AppendValues(const char** values, int64_t length,\n+                      const uint8_t* valid_bytes = NULLPTR);\n+  /// \\deprecated Use AppendValues instead.\n+  ARROW_DEPRECATED(\"Use AppendValues instead\")\n   Status Append(const char** values, int64_t length,\n                 const uint8_t* valid_bytes = NULLPTR);\n };\n@@ -758,6 +821,10 @@ class ARROW_EXPORT FixedSizeBinaryBuilder : public ArrayBuilder {\n     return byte_builder_.Append(value);\n   }\n \n+  Status AppendValues(const uint8_t* data, int64_t length,\n+                      const uint8_t* valid_bytes = NULLPTR);\n+  /// \\deprecated Use AppendValues instead.\n+  ARROW_DEPRECATED(\"Use AppendValues instead\")\n   Status Append(const uint8_t* data, int64_t length,\n                 const uint8_t* valid_bytes = NULLPTR);\n   Status Append(const std::string& value);\n@@ -786,6 +853,7 @@ class ARROW_EXPORT Decimal128Builder : public FixedSizeBinaryBuilder {\n                              MemoryPool* pool ARROW_MEMORY_POOL_DEFAULT);\n \n   using FixedSizeBinaryBuilder::Append;\n+  using FixedSizeBinaryBuilder::AppendValues;\n \n   Status Append(const Decimal128& val);\n \n@@ -813,11 +881,16 @@ class ARROW_EXPORT StructBuilder : public ArrayBuilder {\n   /// will be considered as a null for that field, but users must using app-\n   /// end methods or advance methods of the child builders' independently to\n   /// insert data.\n-  Status Append(int64_t length, const uint8_t* valid_bytes) {\n+  Status AppendValues(int64_t length, const uint8_t* valid_bytes) {\n     RETURN_NOT_OK(Reserve(length));\n     UnsafeAppendToBitmap(valid_bytes, length);\n     return Status::OK();\n   }\n+  /// \\deprecated Use AppendValues instead.\n+  ARROW_DEPRECATED(\"Use AppendValues instead\")\n+  Status Append(int64_t length, const uint8_t* valid_bytes) {\n+    return AppendValues(length, valid_bytes);\n+  }\n \n   /// Append an element to the Struct. All child-builders' Append method must\n   /// be called independently to maintain data-structure consistency.\ndiff --git a/cpp/src/arrow/ipc/test-common.h b/cpp/src/arrow/ipc/test-common.h\nindex fb7792e0fd..c914be6035 100644\n--- a/cpp/src/arrow/ipc/test-common.h\n+++ b/cpp/src/arrow/ipc/test-common.h\n@@ -103,11 +103,12 @@ Status MakeRandomInt32Array(int64_t length, bool include_nulls, MemoryPool* pool\n   if (include_nulls) {\n     std::shared_ptr<PoolBuffer> valid_bytes;\n     RETURN_NOT_OK(test::MakeRandomBytePoolBuffer(length, pool, &valid_bytes));\n-    RETURN_NOT_OK(builder.Append(reinterpret_cast<const int32_t*>(data->data()), length,\n-                                 valid_bytes->data()));\n+    RETURN_NOT_OK(builder.AppendValues(reinterpret_cast<const int32_t*>(data->data()),\n+                                       length, valid_bytes->data()));\n     return builder.Finish(out);\n   }\n-  RETURN_NOT_OK(builder.Append(reinterpret_cast<const int32_t*>(data->data()), length));\n+  RETURN_NOT_OK(\n+      builder.AppendValues(reinterpret_cast<const int32_t*>(data->data()), length));\n   return builder.Finish(out);\n }\n \ndiff --git a/cpp/src/arrow/python/python_to_arrow.cc b/cpp/src/arrow/python/python_to_arrow.cc\nindex 998fa8a8c3..279ce1f275 100644\n--- a/cpp/src/arrow/python/python_to_arrow.cc\n+++ b/cpp/src/arrow/python/python_to_arrow.cc\n@@ -223,7 +223,7 @@ class SequenceBuilder {\n       DCHECK(data->length() == offsets.back());\n       std::shared_ptr<Array> offset_array;\n       Int32Builder builder(::arrow::int32(), pool_);\n-      RETURN_NOT_OK(builder.Append(offsets.data(), offsets.size()));\n+      RETURN_NOT_OK(builder.AppendValues(offsets.data(), offsets.size()));\n       RETURN_NOT_OK(builder.Finish(&offset_array));\n       std::shared_ptr<Array> list_array;\n       RETURN_NOT_OK(ListArray::FromArrays(*offset_array, *data, pool_, &list_array));\ndiff --git a/cpp/src/arrow/util/macros.h b/cpp/src/arrow/util/macros.h\nindex d900256005..1d18882083 100644\n--- a/cpp/src/arrow/util/macros.h\n+++ b/cpp/src/arrow/util/macros.h\n@@ -73,6 +73,23 @@\n \n // ----------------------------------------------------------------------\n \n+// clang-format off\n+// [[deprecated]] is only available in C++14, use this for the time being\n+// This macro takes an optional deprecation message\n+#if __cplusplus <= 201103L\n+# ifdef __GNUC__\n+#  define ARROW_DEPRECATED(...) __attribute__((deprecated(__VA_ARGS__)))\n+# elif defined(_MSC_VER)\n+#  define ARROW_DEPRECATED(...) __declspec(deprecated(__VA_ARGS__))\n+# else\n+#  define ARROW_DEPRECATED(...)\n+# endif\n+#else\n+#  define ARROW_DEPRECATED(...) [[deprecated(__VA_ARGS__)]]\n+#endif\n+\n+// ----------------------------------------------------------------------\n+\n // macros to disable padding\n // these macros are portable across different compilers and platforms\n //[https://github.com/google/flatbuffers/blob/master/include/flatbuffers/flatbuffers.h#L1355]\ndiff --git a/cpp/src/arrow/util/variant.h b/cpp/src/arrow/util/variant.h\nindex 9bfc52cb1c..33dedb6658 100644\n--- a/cpp/src/arrow/util/variant.h\n+++ b/cpp/src/arrow/util/variant.h\n@@ -39,23 +39,10 @@\n #include <functional>\n #include <limits>\n \n+#include <arrow/util/macros.h>\n #include <arrow/util/variant/recursive_wrapper.h>\n #include <arrow/util/variant/variant_visitor.h>\n \n-// clang-format off\n-// [[deprecated]] is only available in C++14, use this for the time being\n-#if __cplusplus <= 201103L\n-# ifdef __GNUC__\n-#  define ARROW_VARIANT_DEPRECATED __attribute__((deprecated))\n-# elif defined(_MSC_VER)\n-#  define ARROW_VARIANT_DEPRECATED __declspec(deprecated)\n-# else\n-#  define ARROW_VARIANT_DEPRECATED\n-# endif\n-#else\n-#  define ARROW_VARIANT_DEPRECATED [[deprecated]]\n-#endif\n-\n \n #ifdef _MSC_VER\n // https://msdn.microsoft.com/en-us/library/bw1hbe6y.aspx\n@@ -867,7 +854,8 @@ class variant\n \n     // This function is deprecated because it returns an internal index field.\n     // Use which() instead.\n-    ARROW_VARIANT_DEPRECATED VARIANT_INLINE type_index_t get_type_index() const\n+    ARROW_DEPRECATED(\"Use which() instead\")\n+    VARIANT_INLINE type_index_t get_type_index() const\n     {\n         return type_index;\n     }\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-18T11:00:33.128+0000",
                    "updated": "2018-04-18T11:00:33.128+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13151378/comment/16442286",
                    "id": "16442286",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 1900\n[https://github.com/apache/arrow/pull/1900]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-04-18T11:00:38.346+0000",
                    "updated": "2018-04-18T11:00:38.346+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|i3sdc7:",
        "customfield_12314139": null
    }
}