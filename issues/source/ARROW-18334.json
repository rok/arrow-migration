{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13502755",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13502755",
    "key": "ARROW-18334",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "name": "Open",
            "id": "1",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                "id": 2,
                "key": "new",
                "colorName": "blue-gray",
                "name": "To Do"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 7800,
            "total": 7800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-18334/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 13,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13502755/worklog/826540",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz opened a new pull request, #14659:\nURL: https://github.com/apache/arrow/pull/14659\n\n   This ensures that kernels in every bound expression definitely correspond to the argument types after the arguments have been reordered. Note: if the operation is in fact not commutative (for example if we added a string concatenating kernel to add_checked) then Canonicalize will break expressions using that kernel.\n\n\n",
                    "created": "2022-11-16T14:49:49.574+0000",
                    "updated": "2022-11-16T14:49:49.574+0000",
                    "started": "2022-11-16T14:49:49.574+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "826540",
                    "issueId": "13502755"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13502755/worklog/826541",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14659:\nURL: https://github.com/apache/arrow/pull/14659#issuecomment-1317141939\n\n   https://issues.apache.org/jira/browse/ARROW-18334\n\n\n",
                    "created": "2022-11-16T14:50:11.456+0000",
                    "updated": "2022-11-16T14:50:11.456+0000",
                    "started": "2022-11-16T14:50:11.456+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "826541",
                    "issueId": "13502755"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13502755/worklog/826542",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14659:\nURL: https://github.com/apache/arrow/pull/14659#issuecomment-1317141990\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-11-16T14:50:13.266+0000",
                    "updated": "2022-11-16T14:50:13.266+0000",
                    "started": "2022-11-16T14:50:13.266+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "826542",
                    "issueId": "13502755"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13502755/worklog/826564",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on PR #14659:\nURL: https://github.com/apache/arrow/pull/14659#issuecomment-1317267075\n\n   I checked this against my rudimentary printf debugging in #14635 to confirm that it fixes things from the R end...all was good!\n\n\n",
                    "created": "2022-11-16T16:09:49.798+0000",
                    "updated": "2022-11-16T16:09:49.798+0000",
                    "started": "2022-11-16T16:09:49.798+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "826564",
                    "issueId": "13502755"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13502755/worklog/826574",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #14659:\nURL: https://github.com/apache/arrow/pull/14659#discussion_r1024116017\n\n\n##########\ncpp/src/arrow/compute/exec/expression_test.cc:\n##########\n@@ -69,6 +69,54 @@ Expression true_unless_null(Expression argument) {\n   return call(\"true_unless_null\", {std::move(argument)});\n }\n \n+Expression add(Expression l, Expression r) {\n+  return call(\"add\", {std::move(l), std::move(r)});\n+}\n+\n+Expression timestamp_literal(std::string repr, TimeUnit::type unit) {\n+  return literal(*MakeScalar(std::move(repr))->CastTo(timestamp(TimeUnit::NANO)));\n+}\n+\n+struct duration_literal {\n\nReview Comment:\n   This seems useful too\n\n\n\n##########\ncpp/src/arrow/compute/exec/expression_test.cc:\n##########\n@@ -69,6 +69,54 @@ Expression true_unless_null(Expression argument) {\n   return call(\"true_unless_null\", {std::move(argument)});\n }\n \n+Expression add(Expression l, Expression r) {\n+  return call(\"add\", {std::move(l), std::move(r)});\n+}\n+\n+Expression timestamp_literal(std::string repr, TimeUnit::type unit) {\n+  return literal(*MakeScalar(std::move(repr))->CastTo(timestamp(TimeUnit::NANO)));\n+}\n\nReview Comment:\n   This seems generally useful beyond unit tests\n\n\n\n##########\ncpp/src/arrow/compute/exec/expression_test.cc:\n##########\n@@ -258,10 +292,11 @@ TEST(Expression, ToString) {\n   EXPECT_EQ(literal(std::make_shared<BinaryScalar>(Buffer::FromString(\"az\"))).ToString(),\n             \"\\\"617A\\\"\");\n \n-  auto ts = *MakeScalar(\"1990-10-23 10:23:33\")->CastTo(timestamp(TimeUnit::NANO));\n-  EXPECT_EQ(literal(ts).ToString(), \"1990-10-23 10:23:33.000000000\");\n+  using namespace arrow_literals;\n\nReview Comment:\n   This is an unexpected place to find the `using` statement.  Why not pull it outside the test case?\n\n\n\n##########\ncpp/src/arrow/compute/exec/expression_test.cc:\n##########\n@@ -69,6 +70,39 @@ Expression true_unless_null(Expression argument) {\n   return call(\"true_unless_null\", {std::move(argument)});\n }\n \n+Expression add(Expression l, Expression r) {\n+  return call(\"add\", {std::move(l), std::move(r)});\n+}\n+\n+namespace arrow_literals {\n+\n+using namespace std::chrono_literals;\n+\n+inline auto operator\"\"_ts(const char* c, size_t s) {\n+  return [s = StringScalar(std::string{c, s})](TimeUnit::type unit) {\n+    return literal(*s.CastTo(timestamp(unit)));\n+  };\n+}\n+\n+}  // namespace arrow_literals\n+\n+template <typename Rep, typename Period>\n+Expression literal(std::chrono::duration<Rep, Period> d) {\n+  int64_t int_value = d.count();\n+  TimeUnit::type unit;\n+  if constexpr (std::is_same_v<Period, std::nano>) {\n+    unit = TimeUnit::NANO;\n+  } else if constexpr (std::is_same_v<Period, std::micro>) {\n+    unit = TimeUnit::MICRO;\n+  } else if constexpr (std::is_same_v<Period, std::milli>) {\n+    unit = TimeUnit::MILLI;\n+  } else {\n+    unit = TimeUnit::SECOND;\n+    int_value = std::chrono::duration_cast<std::chrono::seconds>(d).count();\n+  }\n+  return literal(*MakeScalar(int_value)->CastTo(duration(unit)));\n+}\n\nReview Comment:\n   nit: This seems generally useful (note, I thought that on the earlier version before the literals route too) to be something hidden in a test case.  Maybe a follow-up PR to add tests and expose the functionality at some point (though it's probably just one in a sea of QoL features we could offer C++ users).\n\n\n\n##########\ncpp/src/arrow/compute/exec/expression_test.cc:\n##########\n@@ -1098,6 +1122,12 @@ TEST(Expression, CanonicalizeAnd) {\n \n   // catches and_kleene even when it's a subexpression\n   ExpectCanonicalizesTo(is_valid(and_(b, true_)), is_valid(and_(true_, b)));\n+\n+  auto ts = field_ref(\"ts_ns\");\n+  using namespace arrow_literals;\n+  ExpectCanonicalizesTo(add(ts, literal(5min)), add(literal(5min), ts));\n+  ExpectCanonicalizesTo(add(add(ts, literal(5min)), add(literal(5min), literal(5min))),\n+                        add(add(add(literal(5min), literal(5min)), literal(5min)), ts));\n\nReview Comment:\n   Wouldn't `add(literal(5min), literal(5min))` simplify to `add(literal(10min)` since all the args are literals?\n\n\n\n##########\ncpp/src/arrow/compute/exec/expression.cc:\n##########\n@@ -856,6 +870,27 @@ bool IsBinaryAssociativeCommutative(const Expression::Call& call) {\n   return it != binary_associative_commutative.end();\n }\n \n+Result<Expression> HandleInconsistentTypes(Expression::Call call,\n+                                           compute::ExecContext* exec_context) {\n+  // ARROW-18334: due to reordering of arguments, the call may have\n+  // inconsistent argument types. For example, the call's kernel may\n+  // correspond to `timestamp + duration` but the arguments happen to\n+  // be `duration, timestamp`. The addition itself is still commutative,\n+  // but the mismatch in declared argument types is potentially problematic\n+  // if we ever start using the Expression::Call::kernel field more than\n+  // we do currently. Check and rebind if necessary.\n+  //\n+  // The more correct fix for this problem is to ensure that all kernels of\n+  // functions which are commutative be commutative as well, which would\n+  // obviate rebinding like this. In the context of ARROW-18334, this\n+  // would require rewriting KernelSignature so that a single kernel can\n+  // handle both `timestamp + duration` and `duration + timestamp`.\n+  if (call.kernel->signature->MatchesInputs(GetTypes(call.arguments))) {\n\nReview Comment:\n   Potentially naive question: are we guaranteed to be bound at this point (e.g. is `call.kernel` guaranteed to exist)?\n\n\n\n##########\ncpp/src/arrow/compute/exec/expression.cc:\n##########\n@@ -634,6 +634,20 @@ std::optional<Out> FoldLeft(It begin, It end, const BinOp& bin_op) {\n   return folded;\n }\n \n+template <typename BinOp, typename It,\n+          typename Value = typename std::iterator_traits<It>::value_type,\n+          typename Out = decltype(std::declval<BinOp>()(std::declval<Value>(),\n+                                                        std::declval<Value>()))>\n+std::optional<Out> MaybeFoldLeft(It begin, It end, const BinOp& bin_op) {\n\nReview Comment:\n   Nit: Is this the same thing as `std::accumulate`?  Could we maybe use `MaybeAccumulate` or, in a brief comment, reference `std::accumulate` for new readers who might not be familiar with the term \"folding\" (I often think of this as \"reduce\" but I just looked it up and it seems there is a `std::reduce` but it doesn't guarantee **left**-folding and thus can run in parallel)\n\n\n\n##########\ncpp/src/arrow/compute/exec/expression_test.cc:\n##########\n@@ -69,6 +70,39 @@ Expression true_unless_null(Expression argument) {\n   return call(\"true_unless_null\", {std::move(argument)});\n }\n \n+Expression add(Expression l, Expression r) {\n+  return call(\"add\", {std::move(l), std::move(r)});\n+}\n+\n+namespace arrow_literals {\n+\n+using namespace std::chrono_literals;\n+\n+inline auto operator\"\"_ts(const char* c, size_t s) {\n+  return [s = StringScalar(std::string{c, s})](TimeUnit::type unit) {\n+    return literal(*s.CastTo(timestamp(unit)));\n+  };\n+}\n+\n+}  // namespace arrow_literals\n+\n+template <typename Rep, typename Period>\n+Expression literal(std::chrono::duration<Rep, Period> d) {\n+  int64_t int_value = d.count();\n+  TimeUnit::type unit;\n+  if constexpr (std::is_same_v<Period, std::nano>) {\n+    unit = TimeUnit::NANO;\n+  } else if constexpr (std::is_same_v<Period, std::micro>) {\n+    unit = TimeUnit::MICRO;\n+  } else if constexpr (std::is_same_v<Period, std::milli>) {\n+    unit = TimeUnit::MILLI;\n+  } else {\n+    unit = TimeUnit::SECOND;\n+    int_value = std::chrono::duration_cast<std::chrono::seconds>(d).count();\n\nReview Comment:\n   So we grab the largest possible resolution and then rely on casting later?  Seems reasonable but just asking for clarification.\n\n\n\n",
                    "created": "2022-11-16T16:48:48.337+0000",
                    "updated": "2022-11-16T16:48:48.337+0000",
                    "started": "2022-11-16T16:48:48.337+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "826574",
                    "issueId": "13502755"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13502755/worklog/826575",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on PR #14659:\nURL: https://github.com/apache/arrow/pull/14659#issuecomment-1317332511\n\n   Ah, looks like some new lint fun if we want to use a literals namespace.\n\n\n",
                    "created": "2022-11-16T16:49:12.484+0000",
                    "updated": "2022-11-16T16:49:12.484+0000",
                    "started": "2022-11-16T16:49:12.484+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "826575",
                    "issueId": "13502755"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13502755/worklog/826577",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on code in PR #14659:\nURL: https://github.com/apache/arrow/pull/14659#discussion_r1024279433\n\n\n##########\ncpp/src/arrow/compute/exec/expression_test.cc:\n##########\n@@ -1098,6 +1122,12 @@ TEST(Expression, CanonicalizeAnd) {\n \n   // catches and_kleene even when it's a subexpression\n   ExpectCanonicalizesTo(is_valid(and_(b, true_)), is_valid(and_(true_, b)));\n+\n+  auto ts = field_ref(\"ts_ns\");\n+  using namespace arrow_literals;\n+  ExpectCanonicalizesTo(add(ts, literal(5min)), add(literal(5min), ts));\n+  ExpectCanonicalizesTo(add(add(ts, literal(5min)), add(literal(5min), literal(5min))),\n+                        add(add(add(literal(5min), literal(5min)), literal(5min)), ts));\n\nReview Comment:\n   This is only checking the canonicalization pass, which (among other things) flattens and refolds chains with literals first. This sets up an easy situation for constant folding to do what you describe and eagerly evaluate constant calls. The distinct passes are an implementation detail of the main entry point `SimplifyWithGuarantee`, which might need to run cheap passes like constant folding multiple times if more expensive passes like guarantee substitution happen to yield a constant call.\n\n\n\n",
                    "created": "2022-11-16T17:08:39.696+0000",
                    "updated": "2022-11-16T17:08:39.696+0000",
                    "started": "2022-11-16T17:08:39.696+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "826577",
                    "issueId": "13502755"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13502755/worklog/826578",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on code in PR #14659:\nURL: https://github.com/apache/arrow/pull/14659#discussion_r1024285760\n\n\n##########\ncpp/src/arrow/compute/exec/expression_test.cc:\n##########\n@@ -258,10 +292,11 @@ TEST(Expression, ToString) {\n   EXPECT_EQ(literal(std::make_shared<BinaryScalar>(Buffer::FromString(\"az\"))).ToString(),\n             \"\\\"617A\\\"\");\n \n-  auto ts = *MakeScalar(\"1990-10-23 10:23:33\")->CastTo(timestamp(TimeUnit::NANO));\n-  EXPECT_EQ(literal(ts).ToString(), \"1990-10-23 10:23:33.000000000\");\n+  using namespace arrow_literals;\n\nReview Comment:\n   I was trying to keep the scope of the literals contained. As it is, not even this was contained enough for lint https://github.com/apache/arrow/actions/runs/3481185552/jobs/5821942926#step:5:903\n\n\n\n",
                    "created": "2022-11-16T17:14:20.149+0000",
                    "updated": "2022-11-16T17:14:20.149+0000",
                    "started": "2022-11-16T17:14:20.149+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "826578",
                    "issueId": "13502755"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13502755/worklog/826579",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on code in PR #14659:\nURL: https://github.com/apache/arrow/pull/14659#discussion_r1024287516\n\n\n##########\ncpp/src/arrow/compute/exec/expression_test.cc:\n##########\n@@ -69,6 +70,39 @@ Expression true_unless_null(Expression argument) {\n   return call(\"true_unless_null\", {std::move(argument)});\n }\n \n+Expression add(Expression l, Expression r) {\n+  return call(\"add\", {std::move(l), std::move(r)});\n+}\n+\n+namespace arrow_literals {\n+\n+using namespace std::chrono_literals;\n+\n+inline auto operator\"\"_ts(const char* c, size_t s) {\n+  return [s = StringScalar(std::string{c, s})](TimeUnit::type unit) {\n+    return literal(*s.CastTo(timestamp(unit)));\n+  };\n+}\n+\n+}  // namespace arrow_literals\n+\n+template <typename Rep, typename Period>\n+Expression literal(std::chrono::duration<Rep, Period> d) {\n+  int64_t int_value = d.count();\n+  TimeUnit::type unit;\n+  if constexpr (std::is_same_v<Period, std::nano>) {\n+    unit = TimeUnit::NANO;\n+  } else if constexpr (std::is_same_v<Period, std::micro>) {\n+    unit = TimeUnit::MICRO;\n+  } else if constexpr (std::is_same_v<Period, std::milli>) {\n+    unit = TimeUnit::MILLI;\n+  } else {\n+    unit = TimeUnit::SECOND;\n+    int_value = std::chrono::duration_cast<std::chrono::seconds>(d).count();\n+  }\n+  return literal(*MakeScalar(int_value)->CastTo(duration(unit)));\n+}\n\nReview Comment:\n   The logical public place to include it would be as a constructor for `Datum`, but that'd incur `#include <chrono>` for everything which uses Datum. Maybe that's an acceptable cost, WDYT @pitrou ?\n\n\n\n",
                    "created": "2022-11-16T17:16:05.332+0000",
                    "updated": "2022-11-16T17:16:05.332+0000",
                    "started": "2022-11-16T17:16:05.332+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "826579",
                    "issueId": "13502755"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13502755/worklog/826581",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on code in PR #14659:\nURL: https://github.com/apache/arrow/pull/14659#discussion_r1024293201\n\n\n##########\ncpp/src/arrow/compute/exec/expression.cc:\n##########\n@@ -856,6 +870,27 @@ bool IsBinaryAssociativeCommutative(const Expression::Call& call) {\n   return it != binary_associative_commutative.end();\n }\n \n+Result<Expression> HandleInconsistentTypes(Expression::Call call,\n+                                           compute::ExecContext* exec_context) {\n+  // ARROW-18334: due to reordering of arguments, the call may have\n+  // inconsistent argument types. For example, the call's kernel may\n+  // correspond to `timestamp + duration` but the arguments happen to\n+  // be `duration, timestamp`. The addition itself is still commutative,\n+  // but the mismatch in declared argument types is potentially problematic\n+  // if we ever start using the Expression::Call::kernel field more than\n+  // we do currently. Check and rebind if necessary.\n+  //\n+  // The more correct fix for this problem is to ensure that all kernels of\n+  // functions which are commutative be commutative as well, which would\n+  // obviate rebinding like this. In the context of ARROW-18334, this\n+  // would require rewriting KernelSignature so that a single kernel can\n+  // handle both `timestamp + duration` and `duration + timestamp`.\n+  if (call.kernel->signature->MatchesInputs(GetTypes(call.arguments))) {\n\nReview Comment:\n   Well, that was my intent and the doc for each of these passes states that the argument should be bound... but I guess we're not specifically checking. I'll add a check to Canonicalize and FoldConstants\n\n\n\n",
                    "created": "2022-11-16T17:21:40.795+0000",
                    "updated": "2022-11-16T17:21:40.795+0000",
                    "started": "2022-11-16T17:21:40.795+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "826581",
                    "issueId": "13502755"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13502755/worklog/826583",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on code in PR #14659:\nURL: https://github.com/apache/arrow/pull/14659#discussion_r1024296532\n\n\n##########\ncpp/src/arrow/compute/exec/expression_test.cc:\n##########\n@@ -69,6 +70,39 @@ Expression true_unless_null(Expression argument) {\n   return call(\"true_unless_null\", {std::move(argument)});\n }\n \n+Expression add(Expression l, Expression r) {\n+  return call(\"add\", {std::move(l), std::move(r)});\n+}\n+\n+namespace arrow_literals {\n+\n+using namespace std::chrono_literals;\n+\n+inline auto operator\"\"_ts(const char* c, size_t s) {\n+  return [s = StringScalar(std::string{c, s})](TimeUnit::type unit) {\n+    return literal(*s.CastTo(timestamp(unit)));\n+  };\n+}\n+\n+}  // namespace arrow_literals\n+\n+template <typename Rep, typename Period>\n+Expression literal(std::chrono::duration<Rep, Period> d) {\n+  int64_t int_value = d.count();\n+  TimeUnit::type unit;\n+  if constexpr (std::is_same_v<Period, std::nano>) {\n+    unit = TimeUnit::NANO;\n+  } else if constexpr (std::is_same_v<Period, std::micro>) {\n+    unit = TimeUnit::MICRO;\n+  } else if constexpr (std::is_same_v<Period, std::milli>) {\n+    unit = TimeUnit::MILLI;\n+  } else {\n+    unit = TimeUnit::SECOND;\n+    int_value = std::chrono::duration_cast<std::chrono::seconds>(d).count();\n\nReview Comment:\n   I'll add a comment. If the argument is `std::chrono::nanoseconds`, then use TimeUnit::NANO. If the argument is `std::chrono::microseconds`, ... If the argument is none of `std::chrono::{nanoseconds, microseconds, milliseconds}` then use seconds\n\n\n\n",
                    "created": "2022-11-16T17:24:36.138+0000",
                    "updated": "2022-11-16T17:24:36.138+0000",
                    "started": "2022-11-16T17:24:36.138+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "826583",
                    "issueId": "13502755"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13502755/worklog/826604",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on code in PR #14659:\nURL: https://github.com/apache/arrow/pull/14659#discussion_r1024391590\n\n\n##########\ncpp/src/arrow/compute/exec/expression.cc:\n##########\n@@ -634,6 +634,20 @@ std::optional<Out> FoldLeft(It begin, It end, const BinOp& bin_op) {\n   return folded;\n }\n \n+template <typename BinOp, typename It,\n+          typename Value = typename std::iterator_traits<It>::value_type,\n+          typename Out = decltype(std::declval<BinOp>()(std::declval<Value>(),\n+                                                        std::declval<Value>()))>\n+std::optional<Out> MaybeFoldLeft(It begin, It end, const BinOp& bin_op) {\n\nReview Comment:\n   It is the same as std::accumulate. I'll just remove these helpers; they don't add much\n\n\n\n",
                    "created": "2022-11-16T18:53:40.069+0000",
                    "updated": "2022-11-16T18:53:40.069+0000",
                    "started": "2022-11-16T18:53:40.069+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "826604",
                    "issueId": "13502755"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13502755/worklog/826607",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on PR #14659:\nURL: https://github.com/apache/arrow/pull/14659#issuecomment-1317537694\n\n   Well, that's hilarious fun. The linter will not allow `using namespace`, while the compiler misidentifies [using individual operators as a declaration](https://github.com/apache/arrow/actions/runs/3482249863/jobs/5824360020#step:11:1285)\n\n\n",
                    "created": "2022-11-16T19:11:27.262+0000",
                    "updated": "2022-11-16T19:11:27.262+0000",
                    "started": "2022-11-16T19:11:27.260+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "826607",
                    "issueId": "13502755"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 7800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7d424ead[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@178bf137[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4b2a7286[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3e0209d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3b7aeb17[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@c03dd14[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@14253050[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@16c31e81[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7a0d6d1d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6874e435[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@55eefedb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5bd7d5f1[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 7800,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Nov 16 13:31:42 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-18334/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2022-11-15T21:24:23.000+0000",
        "updated": "2022-11-16T19:11:27.000+0000",
        "timeoriginalestimate": null,
        "description": "The expression simplification currently has a small set of functions which it knows are commutative (IsBinaryAssociativeCommutative).  \"add\" (and \"add_checked\" are in this list.  This should be ok for add(timestamp,duration) since this boils down to add(int64,int64) which is commutative.  However, the way the kernels are currently implemented, we are getting the incorrect output type.\r\n\r\nConcretely, we have kernels:\r\n\r\n{noformat}\r\nadd_checked<Timestamp,Duration>() -> types[0]\r\nadd_checked<Duration,Timestamp>() -> types[1]\r\n{noformat}\r\n\r\nA call is made with expression {{field_ref(\"x\") + duration_literal}}.  This call is bound to {{add_checked<Timestamp, Duration>}}.  However, the expression is then simplified to {{duration_literal + field_ref(\"x\")}}.  Oddly enough, the math in this case is correct, since it is just addition, but the output type is not.  It assigns an output type of duration instead of timestamp.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 7800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "add function for timestamp/duration is not commutative",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13502755/comment/17634552",
                    "id": "17634552",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "I had an offline discussion with [~bkietz] on this issue:\r\n\r\n * Canonicalize will only reorder types if it thinks the functions is commutative\r\n * There is a small list of functions which are considered commutative (and add_checked is one of them)\r\n * So we shouldn't need to re-bind\r\n\r\nOne way to solve this problem is to create a custom output resolver for the add(duration, timestamp) kernels which grabs the first timestamp type and uses it as the output.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-11-15T22:32:31.878+0000",
                    "updated": "2022-11-15T22:32:31.878+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13502755/comment/17634553",
                    "id": "17634553",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Example output type resolver (from [~bkietz]):\r\n\r\n{noformat}\r\nResult<TypeHolder> FirstTimestampType(KernelContext*, const std::vector<TypeHolder>& types) {\r\n  for (const auto& type : types) {\r\n    if (type.id() == Type::TIMESTAMP) return type;\r\n  }\r\n  return Status::Invalid(\"no timestamp type found\");\r\n}\r\n{noformat}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-11-15T22:36:02.556+0000",
                    "updated": "2022-11-15T22:36:02.556+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13502755/comment/17634840",
                    "id": "17634840",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "body": "Just adding the link to ARROW-18243...this may result in a sanitizer error for anybody using this operation because the {{RecordBatchReader}} output schema is different than the schema for each record batch. Because the sanitizers run on CRAN, this will affect an R package release (i.e., needs to be fixed or we need to skip more tests on CRAN).",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "created": "2022-11-16T13:31:42.025+0000",
                    "updated": "2022-11-16T13:31:42.025+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z1c6nk:",
        "customfield_12314139": null
    }
}