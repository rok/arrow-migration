{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13483536",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13483536",
    "key": "ARROW-17867",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12352360",
                "id": "12352360",
                "description": "",
                "name": "11.0.0",
                "archived": false,
                "released": false
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334621",
                "id": "12334621",
                "name": "FlightRPC"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 11400,
            "total": 11400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 11400,
            "total": 11400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17867/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 19,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13483536/worklog/812958",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm opened a new pull request, #14266:\nURL: https://github.com/apache/arrow/pull/14266\n\n   This allows us to send multiple parameters and have them all executed, instead of having to do multiple round trips per row - this technically existed in the API but the sample server didn't implement it properly\r\n   \r\n   Also contains misc cleanups on the API, and removes client_test.cc since the mocks are brittle\n\n\n",
                    "created": "2022-09-28T14:54:33.631+0000",
                    "updated": "2022-09-28T14:54:33.631+0000",
                    "started": "2022-09-28T14:54:33.631+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "812958",
                    "issueId": "13483536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13483536/worklog/812959",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #14266:\nURL: https://github.com/apache/arrow/pull/14266#issuecomment-1261036746\n\n   Split from #14082\n\n\n",
                    "created": "2022-09-28T14:54:45.552+0000",
                    "updated": "2022-09-28T14:54:45.552+0000",
                    "started": "2022-09-28T14:54:45.552+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "812959",
                    "issueId": "13483536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13483536/worklog/813064",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14266:\nURL: https://github.com/apache/arrow/pull/14266#issuecomment-1261212978\n\n   https://issues.apache.org/jira/browse/ARROW-17867\n\n\n",
                    "created": "2022-09-28T17:11:25.688+0000",
                    "updated": "2022-09-28T17:11:25.688+0000",
                    "started": "2022-09-28T17:11:25.687+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "813064",
                    "issueId": "13483536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13483536/worklog/813065",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14266:\nURL: https://github.com/apache/arrow/pull/14266#issuecomment-1261213010\n\n   :warning: Ticket **has no components in JIRA**, make sure you assign one.\n\n\n",
                    "created": "2022-09-28T17:11:27.181+0000",
                    "updated": "2022-09-28T17:11:27.181+0000",
                    "started": "2022-09-28T17:11:27.181+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "813065",
                    "issueId": "13483536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13483536/worklog/813066",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14266:\nURL: https://github.com/apache/arrow/pull/14266#issuecomment-1261213031\n\n   :warning: Ticket **has not been started in JIRA**, please click 'Start Progress'.\n\n\n",
                    "created": "2022-09-28T17:11:28.135+0000",
                    "updated": "2022-09-28T17:11:28.135+0000",
                    "started": "2022-09-28T17:11:28.134+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "813066",
                    "issueId": "13483536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13483536/worklog/820072",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #14266:\nURL: https://github.com/apache/arrow/pull/14266#issuecomment-1290642347\n\n   @jduo or @pitrou, would one of you be able to review this sometime?\n\n\n",
                    "created": "2022-10-25T14:24:48.585+0000",
                    "updated": "2022-10-25T14:24:48.585+0000",
                    "started": "2022-10-25T14:24:48.585+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "820072",
                    "issueId": "13483536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13483536/worklog/820558",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #14266:\nURL: https://github.com/apache/arrow/pull/14266#discussion_r1005675232\n\n\n##########\ncpp/src/arrow/flight/sql/client.h:\n##########\n@@ -392,17 +392,18 @@ class ARROW_FLIGHT_SQL_EXPORT PreparedStatement {\n \n   /// \\brief Retrieve the parameter schema from the query.\n   /// \\return The parameter schema from the query.\n-  std::shared_ptr<Schema> parameter_schema() const;\n+  [[nodiscard]] const std::shared_ptr<Schema>& parameter_schema() const;\n\nReview Comment:\n   Is the `nodiscard` meant to protect against some incorrect usage here?\n\n\n\n##########\ncpp/src/arrow/flight/sql/client.cc:\n##########\n@@ -574,26 +584,21 @@ arrow::Result<int64_t> PreparedStatement::ExecuteUpdate(\n   command.set_prepared_statement_handle(handle_);\n   ARROW_ASSIGN_OR_RAISE(FlightDescriptor descriptor,\n                         GetFlightDescriptorForCommand(command));\n-  std::unique_ptr<FlightStreamWriter> writer;\n-  std::unique_ptr<FlightMetadataReader> reader;\n-\n-  if (parameter_binding_ && parameter_binding_->num_rows() > 0) {\n-    ARROW_RETURN_NOT_OK(client_->DoPut(options, descriptor, parameter_binding_->schema(),\n-                                       &writer, &reader));\n-    ARROW_RETURN_NOT_OK(writer->WriteRecordBatch(*parameter_binding_));\n+  std::shared_ptr<Buffer> metadata;\n+  if (parameter_binding_) {\n+    ARROW_ASSIGN_OR_RAISE(metadata, BindParameters(client_->impl_.get(), options,\n+                                                   descriptor, parameter_binding_.get()));\n   } else {\n     const std::shared_ptr<Schema> schema = arrow::schema({});\n-    ARROW_RETURN_NOT_OK(client_->DoPut(options, descriptor, schema, &writer, &reader));\n-    const ArrayVector columns;\n-    const auto& record_batch = arrow::RecordBatch::Make(schema, 0, columns);\n-    ARROW_RETURN_NOT_OK(writer->WriteRecordBatch(*record_batch));\n+    auto record_batch = arrow::RecordBatch::Make(schema, 0, ArrayVector{});\n+    ARROW_ASSIGN_OR_RAISE(auto params,\n+                          RecordBatchReader::Make({std::move(record_batch)}));\n\nReview Comment:\n   Is it part of the spec that we have to send a single 0-row batch here?\n\n\n\n##########\ncpp/src/arrow/flight/sql/example/sqlite_server.cc:\n##########\n@@ -346,18 +331,17 @@ class SQLiteFlightSqlServer::Impl {\n \n   arrow::Result<std::unique_ptr<FlightDataStream>> DoGetCatalogs(\n       const ServerCallContext& context) {\n-    // As SQLite doesn't support catalogs, this will return an empty record batch.\n-\n+    // https://www.sqlite.org/cli.html\n+    // > The \".databases\" command shows a list of all databases open\n+    // > in the current connection. There will always be at least\n+    // > 2. The first one is \"main\", the original database opened.\n\nReview Comment:\n   This comment is a bit confusing, because we return a single row (\"main\") here.\n\n\n\n##########\ncpp/src/arrow/flight/sql/example/sqlite_server.cc:\n##########\n@@ -77,50 +84,25 @@ std::string PrepareQueryForGetTables(const GetTables& command) {\n   return table_query.str();\n }\n \n-Status SetParametersOnSQLiteStatement(sqlite3_stmt* stmt, FlightMessageReader* reader) {\n+template <typename Callback>\n+Status SetParametersOnSQLiteStatement(SqliteStatement* statement,\n+                                      FlightMessageReader* reader, Callback callback) {\n+  sqlite3_stmt* stmt = statement->GetSqlite3Stmt();\n   while (true) {\n     ARROW_ASSIGN_OR_RAISE(FlightStreamChunk chunk, reader->Next());\n-    std::shared_ptr<RecordBatch>& record_batch = chunk.data;\n-    if (record_batch == nullptr) break;\n+    if (chunk.data == nullptr) break;\n \n-    const int64_t num_rows = record_batch->num_rows();\n-    const int& num_columns = record_batch->num_columns();\n+    const int64_t num_rows = chunk.data->num_rows();\n+    if (num_rows == 0) continue;\n \n+    ARROW_RETURN_NOT_OK(statement->SetParameters({std::move(chunk.data)}));\n     for (int i = 0; i < num_rows; ++i) {\n-      for (int c = 0; c < num_columns; ++c) {\n-        const std::shared_ptr<Array>& column = record_batch->column(c);\n-        ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> scalar, column->GetScalar(i));\n-\n-        auto& holder = static_cast<DenseUnionScalar&>(*scalar).value;\n-\n-        switch (holder->type->id()) {\n-          case Type::INT64: {\n-            int64_t value = static_cast<Int64Scalar&>(*holder).value;\n-            sqlite3_bind_int64(stmt, c + 1, value);\n-            break;\n-          }\n-          case Type::FLOAT: {\n-            double value = static_cast<FloatScalar&>(*holder).value;\n-            sqlite3_bind_double(stmt, c + 1, value);\n-            break;\n-          }\n-          case Type::STRING: {\n-            std::shared_ptr<Buffer> buffer = static_cast<StringScalar&>(*holder).value;\n-            sqlite3_bind_text(stmt, c + 1, reinterpret_cast<const char*>(buffer->data()),\n-                              static_cast<int>(buffer->size()), SQLITE_TRANSIENT);\n-            break;\n-          }\n-          case Type::BINARY: {\n-            std::shared_ptr<Buffer> buffer = static_cast<BinaryScalar&>(*holder).value;\n-            sqlite3_bind_blob(stmt, c + 1, buffer->data(),\n-                              static_cast<int>(buffer->size()), SQLITE_TRANSIENT);\n-            break;\n-          }\n-          default:\n-            return Status::Invalid(\"Received unsupported data type: \",\n-                                   holder->type->ToString());\n-        }\n+      if (sqlite3_clear_bindings(stmt) != SQLITE_OK) {\n+        return Status::Invalid(\"Failed to reset bindings on row \", i, \": \",\n+                               sqlite3_errmsg(statement->db()));\n       }\n+      ARROW_RETURN_NOT_OK(statement->Bind(/*batch_index=*/0, i));\n+      ARROW_RETURN_NOT_OK(callback());\n\nReview Comment:\n   Hmm, why call the callback for each row?\n\n\n\n##########\ncpp/src/arrow/flight/sql/example/sqlite_statement.cc:\n##########\n@@ -160,10 +166,85 @@ arrow::Result<int> SqliteStatement::Reset() {\n sqlite3_stmt* SqliteStatement::GetSqlite3Stmt() const { return stmt_; }\n \n arrow::Result<int64_t> SqliteStatement::ExecuteUpdate() {\n-  ARROW_RETURN_NOT_OK(Step());\n+  while (true) {\n+    ARROW_ASSIGN_OR_RAISE(int rc, Step());\n+    if (rc == SQLITE_DONE) break;\n+  }\n   return sqlite3_changes(db_);\n }\n \n+Status SqliteStatement::SetParameters(\n+    std::vector<std::shared_ptr<arrow::RecordBatch>> parameters) {\n+  const int num_params = sqlite3_bind_parameter_count(stmt_);\n+  for (const auto& batch : parameters) {\n+    if (batch->num_columns() != num_params) {\n+      return Status::Invalid(\"Expected \", num_params, \" parameters, but got \",\n+                             batch->num_columns());\n+    }\n+  }\n+  parameters_ = std::move(parameters);\n+  auto end = std::remove_if(\n+      parameters_.begin(), parameters_.end(),\n+      [](const std::shared_ptr<RecordBatch>& batch) { return batch->num_rows() == 0; });\n+  parameters_.erase(end, parameters_.end());\n+  return Status::OK();\n+}\n+\n+Status SqliteStatement::Bind(size_t batch_index, int64_t row_index) {\n+  if (batch_index >= parameters_.size()) {\n+    return Status::Invalid(\"Cannot bind to batch \", batch_index);\n\nReview Comment:\n   `IndexError` perhaps?\n\n\n\n##########\ncpp/src/arrow/flight/sql/example/sqlite_statement.cc:\n##########\n@@ -160,10 +166,85 @@ arrow::Result<int> SqliteStatement::Reset() {\n sqlite3_stmt* SqliteStatement::GetSqlite3Stmt() const { return stmt_; }\n \n arrow::Result<int64_t> SqliteStatement::ExecuteUpdate() {\n-  ARROW_RETURN_NOT_OK(Step());\n+  while (true) {\n+    ARROW_ASSIGN_OR_RAISE(int rc, Step());\n+    if (rc == SQLITE_DONE) break;\n+  }\n   return sqlite3_changes(db_);\n }\n \n+Status SqliteStatement::SetParameters(\n+    std::vector<std::shared_ptr<arrow::RecordBatch>> parameters) {\n+  const int num_params = sqlite3_bind_parameter_count(stmt_);\n+  for (const auto& batch : parameters) {\n+    if (batch->num_columns() != num_params) {\n+      return Status::Invalid(\"Expected \", num_params, \" parameters, but got \",\n+                             batch->num_columns());\n+    }\n+  }\n+  parameters_ = std::move(parameters);\n+  auto end = std::remove_if(\n+      parameters_.begin(), parameters_.end(),\n+      [](const std::shared_ptr<RecordBatch>& batch) { return batch->num_rows() == 0; });\n+  parameters_.erase(end, parameters_.end());\n+  return Status::OK();\n+}\n+\n+Status SqliteStatement::Bind(size_t batch_index, int64_t row_index) {\n+  if (batch_index >= parameters_.size()) {\n+    return Status::Invalid(\"Cannot bind to batch \", batch_index);\n+  }\n+  const RecordBatch& batch = *parameters_[batch_index];\n+  if (row_index < 0 || row_index >= batch.num_rows()) {\n+    return Status::Invalid(\"Cannot bind to row \", row_index, \" in batch \", batch_index);\n\nReview Comment:\n   Same here.\n\n\n\n##########\ncpp/src/arrow/flight/sql/server_test.cc:\n##########\n@@ -502,51 +489,53 @@ TEST_F(TestFlightSqlServer, TestCommandPreparedStatementQueryWithParameterBindin\n       auto prepared_statement,\n       sql_client->Prepare({}, \"SELECT * FROM intTable WHERE keyName LIKE ?\"));\n \n-  auto parameter_schema = prepared_statement->parameter_schema();\n-\n+  const std::shared_ptr<Schema>& parameter_schema =\n+      prepared_statement->parameter_schema();\n   const std::shared_ptr<Schema>& expected_parameter_schema =\n       arrow::schema({arrow::field(\"parameter_1\", example::GetUnknownColumnDataType())});\n+  ASSERT_NO_FATAL_FAILURE(AssertSchemaEqual(expected_parameter_schema, parameter_schema));\n \n-  AssertSchemaEqual(expected_parameter_schema, parameter_schema);\n-\n-  std::shared_ptr<Array> type_ids = ArrayFromJSON(int8(), R\"([0])\");\n-  std::shared_ptr<Array> offsets = ArrayFromJSON(int32(), R\"([0])\");\n-  std::shared_ptr<Array> string_array = ArrayFromJSON(utf8(), R\"([\"%one\"])\");\n-  std::shared_ptr<Array> bytes_array = ArrayFromJSON(binary(), R\"([])\");\n-  std::shared_ptr<Array> bigint_array = ArrayFromJSON(int64(), R\"([])\");\n-  std::shared_ptr<Array> double_array = ArrayFromJSON(float64(), R\"([])\");\n-\n-  ASSERT_OK_AND_ASSIGN(\n-      auto parameter_1_array,\n-      DenseUnionArray::Make(*type_ids, *offsets,\n-                            {string_array, bytes_array, bigint_array, double_array},\n-                            {\"string\", \"bytes\", \"bigint\", \"double\"}, {0, 1, 2, 3}));\n-\n-  const std::shared_ptr<RecordBatch>& record_batch =\n-      RecordBatch::Make(parameter_schema, 1, {parameter_1_array});\n-\n-  ASSERT_OK(prepared_statement->SetParameters(record_batch));\n+  auto record_batch = RecordBatchFromJSON(parameter_schema, R\"([ [[0, \"%one\"]] ])\");\n+  ASSERT_OK(prepared_statement->SetParameters(std::move(record_batch)));\n \n   ASSERT_OK_AND_ASSIGN(auto flight_info, prepared_statement->Execute());\n-\n   ASSERT_OK_AND_ASSIGN(auto stream,\n                        sql_client->DoGet({}, flight_info->endpoints()[0].ticket));\n-\n   ASSERT_OK_AND_ASSIGN(auto table, stream->ToTable());\n \n   const std::shared_ptr<Schema>& expected_schema =\n       arrow::schema({arrow::field(\"id\", int64()), arrow::field(\"keyName\", utf8()),\n                      arrow::field(\"value\", int64()), arrow::field(\"foreignId\", int64())});\n \n-  const auto id_array = ArrayFromJSON(int64(), R\"([1, 3])\");\n-  const auto keyname_array = ArrayFromJSON(utf8(), R\"([\"one\", \"negative one\"])\");\n-  const auto value_array = ArrayFromJSON(int64(), R\"([1, -1])\");\n-  const auto foreignId_array = ArrayFromJSON(int64(), R\"([1, 1])\");\n-\n-  const std::shared_ptr<Table>& expected_table = Table::Make(\n-      expected_schema, {id_array, keyname_array, value_array, foreignId_array});\n-\n-  AssertTablesEqual(*expected_table, *table);\n+  auto expected_table = TableFromJSON(expected_schema, {R\"([\n+      [1, \"one\", 1, 1],\n+      [3, \"negative one\", -1, 1]\n+  ])\"});\n+  ASSERT_NO_FATAL_FAILURE(AssertTablesEqual(*expected_table, *table, /*verbose=*/true));\n+\n+  // Set multiple parameters at once\n+  record_batch =\n+      RecordBatchFromJSON(parameter_schema, R\"([ [[0, \"%one\"]], [[0, \"%zero\"]] ])\");\n+  ASSERT_OK(prepared_statement->SetParameters(std::move(record_batch)));\n+  ASSERT_OK_AND_ASSIGN(flight_info, prepared_statement->Execute());\n+  ASSERT_OK_AND_ASSIGN(stream, sql_client->DoGet({}, flight_info->endpoints()[0].ticket));\n+  ASSERT_OK_AND_ASSIGN(table, stream->ToTable());\n+  expected_table = TableFromJSON(expected_schema, {R\"([\n+      [1, \"one\", 1, 1],\n+      [3, \"negative one\", -1, 1],\n+      [2, \"zero\", 0, 1]\n\nReview Comment:\n   For the record, are there any tests emitting/receiving nulls?\n\n\n\n##########\ncpp/src/arrow/flight/sql/example/sqlite_server.cc:\n##########\n@@ -77,50 +84,25 @@ std::string PrepareQueryForGetTables(const GetTables& command) {\n   return table_query.str();\n }\n \n-Status SetParametersOnSQLiteStatement(sqlite3_stmt* stmt, FlightMessageReader* reader) {\n+template <typename Callback>\n+Status SetParametersOnSQLiteStatement(SqliteStatement* statement,\n+                                      FlightMessageReader* reader, Callback callback) {\n+  sqlite3_stmt* stmt = statement->GetSqlite3Stmt();\n   while (true) {\n     ARROW_ASSIGN_OR_RAISE(FlightStreamChunk chunk, reader->Next());\n-    std::shared_ptr<RecordBatch>& record_batch = chunk.data;\n-    if (record_batch == nullptr) break;\n+    if (chunk.data == nullptr) break;\n \n-    const int64_t num_rows = record_batch->num_rows();\n-    const int& num_columns = record_batch->num_columns();\n+    const int64_t num_rows = chunk.data->num_rows();\n+    if (num_rows == 0) continue;\n \n+    ARROW_RETURN_NOT_OK(statement->SetParameters({std::move(chunk.data)}));\n     for (int i = 0; i < num_rows; ++i) {\n-      for (int c = 0; c < num_columns; ++c) {\n-        const std::shared_ptr<Array>& column = record_batch->column(c);\n-        ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> scalar, column->GetScalar(i));\n-\n-        auto& holder = static_cast<DenseUnionScalar&>(*scalar).value;\n-\n-        switch (holder->type->id()) {\n-          case Type::INT64: {\n-            int64_t value = static_cast<Int64Scalar&>(*holder).value;\n-            sqlite3_bind_int64(stmt, c + 1, value);\n-            break;\n-          }\n-          case Type::FLOAT: {\n-            double value = static_cast<FloatScalar&>(*holder).value;\n-            sqlite3_bind_double(stmt, c + 1, value);\n-            break;\n-          }\n-          case Type::STRING: {\n-            std::shared_ptr<Buffer> buffer = static_cast<StringScalar&>(*holder).value;\n-            sqlite3_bind_text(stmt, c + 1, reinterpret_cast<const char*>(buffer->data()),\n-                              static_cast<int>(buffer->size()), SQLITE_TRANSIENT);\n-            break;\n-          }\n-          case Type::BINARY: {\n-            std::shared_ptr<Buffer> buffer = static_cast<BinaryScalar&>(*holder).value;\n-            sqlite3_bind_blob(stmt, c + 1, buffer->data(),\n-                              static_cast<int>(buffer->size()), SQLITE_TRANSIENT);\n-            break;\n-          }\n-          default:\n-            return Status::Invalid(\"Received unsupported data type: \",\n-                                   holder->type->ToString());\n-        }\n+      if (sqlite3_clear_bindings(stmt) != SQLITE_OK) {\n+        return Status::Invalid(\"Failed to reset bindings on row \", i, \": \",\n+                               sqlite3_errmsg(statement->db()));\n       }\n+      ARROW_RETURN_NOT_OK(statement->Bind(/*batch_index=*/0, i));\n\nReview Comment:\n   Is `/*batch_index=*/0` expected here?\n\n\n\n##########\ncpp/src/arrow/flight/sql/example/sqlite_statement.cc:\n##########\n@@ -160,10 +166,85 @@ arrow::Result<int> SqliteStatement::Reset() {\n sqlite3_stmt* SqliteStatement::GetSqlite3Stmt() const { return stmt_; }\n \n arrow::Result<int64_t> SqliteStatement::ExecuteUpdate() {\n-  ARROW_RETURN_NOT_OK(Step());\n+  while (true) {\n+    ARROW_ASSIGN_OR_RAISE(int rc, Step());\n+    if (rc == SQLITE_DONE) break;\n+  }\n   return sqlite3_changes(db_);\n }\n \n+Status SqliteStatement::SetParameters(\n+    std::vector<std::shared_ptr<arrow::RecordBatch>> parameters) {\n+  const int num_params = sqlite3_bind_parameter_count(stmt_);\n+  for (const auto& batch : parameters) {\n+    if (batch->num_columns() != num_params) {\n+      return Status::Invalid(\"Expected \", num_params, \" parameters, but got \",\n+                             batch->num_columns());\n+    }\n+  }\n+  parameters_ = std::move(parameters);\n+  auto end = std::remove_if(\n+      parameters_.begin(), parameters_.end(),\n+      [](const std::shared_ptr<RecordBatch>& batch) { return batch->num_rows() == 0; });\n+  parameters_.erase(end, parameters_.end());\n+  return Status::OK();\n+}\n+\n+Status SqliteStatement::Bind(size_t batch_index, int64_t row_index) {\n+  if (batch_index >= parameters_.size()) {\n+    return Status::Invalid(\"Cannot bind to batch \", batch_index);\n+  }\n+  const RecordBatch& batch = *parameters_[batch_index];\n+  if (row_index < 0 || row_index >= batch.num_rows()) {\n+    return Status::Invalid(\"Cannot bind to row \", row_index, \" in batch \", batch_index);\n+  }\n+\n+  if (sqlite3_clear_bindings(stmt_) != SQLITE_OK) {\n+    return Status::Invalid(\"Failed to reset bindings: \", sqlite3_errmsg(db_));\n+  }\n+  for (int c = 0; c < batch.num_columns(); ++c) {\n+    const std::shared_ptr<Array>& column = batch.column(c);\n+    ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> scalar, column->GetScalar(row_index));\n\nReview Comment:\n   Instead of using `GetScalar` and then switch on type, wouldn't it be more efficient to first switch on type and then access the concrete array directly?\n\n\n\n##########\ncpp/src/arrow/flight/sql/example/sqlite_statement.h:\n##########\n@@ -62,15 +62,25 @@ class SqliteStatement {\n \n   /// \\brief Returns the underlying sqlite3_stmt.\n   /// \\return A sqlite statement.\n-  sqlite3_stmt* GetSqlite3Stmt() const;\n+  [[nodiscard]] sqlite3_stmt* GetSqlite3Stmt() const;\n\nReview Comment:\n   Not sure why `nodiscard` is added on these?\n\n\n\n##########\ncpp/src/arrow/flight/sql/example/sqlite_statement.cc:\n##########\n@@ -160,10 +166,85 @@ arrow::Result<int> SqliteStatement::Reset() {\n sqlite3_stmt* SqliteStatement::GetSqlite3Stmt() const { return stmt_; }\n \n arrow::Result<int64_t> SqliteStatement::ExecuteUpdate() {\n-  ARROW_RETURN_NOT_OK(Step());\n+  while (true) {\n+    ARROW_ASSIGN_OR_RAISE(int rc, Step());\n+    if (rc == SQLITE_DONE) break;\n+  }\n   return sqlite3_changes(db_);\n }\n \n+Status SqliteStatement::SetParameters(\n+    std::vector<std::shared_ptr<arrow::RecordBatch>> parameters) {\n+  const int num_params = sqlite3_bind_parameter_count(stmt_);\n+  for (const auto& batch : parameters) {\n+    if (batch->num_columns() != num_params) {\n+      return Status::Invalid(\"Expected \", num_params, \" parameters, but got \",\n+                             batch->num_columns());\n+    }\n+  }\n+  parameters_ = std::move(parameters);\n+  auto end = std::remove_if(\n+      parameters_.begin(), parameters_.end(),\n+      [](const std::shared_ptr<RecordBatch>& batch) { return batch->num_rows() == 0; });\n+  parameters_.erase(end, parameters_.end());\n+  return Status::OK();\n+}\n+\n+Status SqliteStatement::Bind(size_t batch_index, int64_t row_index) {\n+  if (batch_index >= parameters_.size()) {\n+    return Status::Invalid(\"Cannot bind to batch \", batch_index);\n+  }\n+  const RecordBatch& batch = *parameters_[batch_index];\n+  if (row_index < 0 || row_index >= batch.num_rows()) {\n+    return Status::Invalid(\"Cannot bind to row \", row_index, \" in batch \", batch_index);\n+  }\n+\n+  if (sqlite3_clear_bindings(stmt_) != SQLITE_OK) {\n+    return Status::Invalid(\"Failed to reset bindings: \", sqlite3_errmsg(db_));\n+  }\n+  for (int c = 0; c < batch.num_columns(); ++c) {\n+    const std::shared_ptr<Array>& column = batch.column(c);\n+    ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> scalar, column->GetScalar(row_index));\n+    if (scalar->type->id() == Type::DENSE_UNION) {\n+      scalar = checked_cast<DenseUnionScalar&>(*scalar).value;\n+    }\n+\n+    int rc = 0;\n+    if (!scalar->is_valid) {\n+      rc = sqlite3_bind_null(stmt_, c + 1);\n+      continue;\n+    } else {\n+      switch (scalar->type->id()) {\n+        case Type::INT64: {\n+          int64_t value = checked_cast<const Int64Scalar&>(*scalar).value;\n+          rc = sqlite3_bind_int64(stmt_, c + 1, value);\n+          break;\n+        }\n+        case Type::FLOAT: {\n+          float value = checked_cast<const FloatScalar&>(*scalar).value;\n+          rc = sqlite3_bind_double(stmt_, c + 1, value);\n+          break;\n+        }\n+        case Type::STRING: {\n+          const std::shared_ptr<Buffer>& buffer =\n+              checked_cast<const StringScalar&>(*scalar).value;\n+          rc = sqlite3_bind_text(stmt_, c + 1,\n+                                 reinterpret_cast<const char*>(buffer->data()),\n+                                 static_cast<int>(buffer->size()), SQLITE_TRANSIENT);\n+          break;\n+        }\n+        default:\n+          return Status::Invalid(\"Received unsupported data type: \", *scalar->type);\n\nReview Comment:\n   `TypeError`?\n\n\n\n",
                    "created": "2022-10-26T15:16:22.144+0000",
                    "updated": "2022-10-26T15:16:22.144+0000",
                    "started": "2022-10-26T15:16:22.143+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "820558",
                    "issueId": "13483536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13483536/worklog/820574",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #14266:\nURL: https://github.com/apache/arrow/pull/14266#discussion_r1005845228\n\n\n##########\ncpp/src/arrow/flight/sql/server_test.cc:\n##########\n@@ -502,51 +489,53 @@ TEST_F(TestFlightSqlServer, TestCommandPreparedStatementQueryWithParameterBindin\n       auto prepared_statement,\n       sql_client->Prepare({}, \"SELECT * FROM intTable WHERE keyName LIKE ?\"));\n \n-  auto parameter_schema = prepared_statement->parameter_schema();\n-\n+  const std::shared_ptr<Schema>& parameter_schema =\n+      prepared_statement->parameter_schema();\n   const std::shared_ptr<Schema>& expected_parameter_schema =\n       arrow::schema({arrow::field(\"parameter_1\", example::GetUnknownColumnDataType())});\n+  ASSERT_NO_FATAL_FAILURE(AssertSchemaEqual(expected_parameter_schema, parameter_schema));\n \n-  AssertSchemaEqual(expected_parameter_schema, parameter_schema);\n-\n-  std::shared_ptr<Array> type_ids = ArrayFromJSON(int8(), R\"([0])\");\n-  std::shared_ptr<Array> offsets = ArrayFromJSON(int32(), R\"([0])\");\n-  std::shared_ptr<Array> string_array = ArrayFromJSON(utf8(), R\"([\"%one\"])\");\n-  std::shared_ptr<Array> bytes_array = ArrayFromJSON(binary(), R\"([])\");\n-  std::shared_ptr<Array> bigint_array = ArrayFromJSON(int64(), R\"([])\");\n-  std::shared_ptr<Array> double_array = ArrayFromJSON(float64(), R\"([])\");\n-\n-  ASSERT_OK_AND_ASSIGN(\n-      auto parameter_1_array,\n-      DenseUnionArray::Make(*type_ids, *offsets,\n-                            {string_array, bytes_array, bigint_array, double_array},\n-                            {\"string\", \"bytes\", \"bigint\", \"double\"}, {0, 1, 2, 3}));\n-\n-  const std::shared_ptr<RecordBatch>& record_batch =\n-      RecordBatch::Make(parameter_schema, 1, {parameter_1_array});\n-\n-  ASSERT_OK(prepared_statement->SetParameters(record_batch));\n+  auto record_batch = RecordBatchFromJSON(parameter_schema, R\"([ [[0, \"%one\"]] ])\");\n+  ASSERT_OK(prepared_statement->SetParameters(std::move(record_batch)));\n \n   ASSERT_OK_AND_ASSIGN(auto flight_info, prepared_statement->Execute());\n-\n   ASSERT_OK_AND_ASSIGN(auto stream,\n                        sql_client->DoGet({}, flight_info->endpoints()[0].ticket));\n-\n   ASSERT_OK_AND_ASSIGN(auto table, stream->ToTable());\n \n   const std::shared_ptr<Schema>& expected_schema =\n       arrow::schema({arrow::field(\"id\", int64()), arrow::field(\"keyName\", utf8()),\n                      arrow::field(\"value\", int64()), arrow::field(\"foreignId\", int64())});\n \n-  const auto id_array = ArrayFromJSON(int64(), R\"([1, 3])\");\n-  const auto keyname_array = ArrayFromJSON(utf8(), R\"([\"one\", \"negative one\"])\");\n-  const auto value_array = ArrayFromJSON(int64(), R\"([1, -1])\");\n-  const auto foreignId_array = ArrayFromJSON(int64(), R\"([1, 1])\");\n-\n-  const std::shared_ptr<Table>& expected_table = Table::Make(\n-      expected_schema, {id_array, keyname_array, value_array, foreignId_array});\n-\n-  AssertTablesEqual(*expected_table, *table);\n+  auto expected_table = TableFromJSON(expected_schema, {R\"([\n+      [1, \"one\", 1, 1],\n+      [3, \"negative one\", -1, 1]\n+  ])\"});\n+  ASSERT_NO_FATAL_FAILURE(AssertTablesEqual(*expected_table, *table, /*verbose=*/true));\n+\n+  // Set multiple parameters at once\n+  record_batch =\n+      RecordBatchFromJSON(parameter_schema, R\"([ [[0, \"%one\"]], [[0, \"%zero\"]] ])\");\n+  ASSERT_OK(prepared_statement->SetParameters(std::move(record_batch)));\n+  ASSERT_OK_AND_ASSIGN(flight_info, prepared_statement->Execute());\n+  ASSERT_OK_AND_ASSIGN(stream, sql_client->DoGet({}, flight_info->endpoints()[0].ticket));\n+  ASSERT_OK_AND_ASSIGN(table, stream->ToTable());\n+  expected_table = TableFromJSON(expected_schema, {R\"([\n+      [1, \"one\", 1, 1],\n+      [3, \"negative one\", -1, 1],\n+      [2, \"zero\", 0, 1]\n\nReview Comment:\n   The implementation deals badly with nulls since we have to then guess the type, and I didn't really want to implement an adaptive type-guessing reader right here. It might be worth it if we expect to turn this into a more robust example. (But then I'd want to explore reusing the work I'm already doing in the ADBC SQLite driver instead of rewriting that logic twice.)\r\n   \r\n   That said it should be fine to add some nulls so long as they're never the first row of a result, I'll go update that\n\n\n\n",
                    "created": "2022-10-26T15:33:03.119+0000",
                    "updated": "2022-10-26T15:33:03.119+0000",
                    "started": "2022-10-26T15:33:03.119+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "820574",
                    "issueId": "13483536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13483536/worklog/820578",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #14266:\nURL: https://github.com/apache/arrow/pull/14266#discussion_r1005865068\n\n\n##########\ncpp/src/arrow/flight/sql/server_test.cc:\n##########\n@@ -502,51 +489,53 @@ TEST_F(TestFlightSqlServer, TestCommandPreparedStatementQueryWithParameterBindin\n       auto prepared_statement,\n       sql_client->Prepare({}, \"SELECT * FROM intTable WHERE keyName LIKE ?\"));\n \n-  auto parameter_schema = prepared_statement->parameter_schema();\n-\n+  const std::shared_ptr<Schema>& parameter_schema =\n+      prepared_statement->parameter_schema();\n   const std::shared_ptr<Schema>& expected_parameter_schema =\n       arrow::schema({arrow::field(\"parameter_1\", example::GetUnknownColumnDataType())});\n+  ASSERT_NO_FATAL_FAILURE(AssertSchemaEqual(expected_parameter_schema, parameter_schema));\n \n-  AssertSchemaEqual(expected_parameter_schema, parameter_schema);\n-\n-  std::shared_ptr<Array> type_ids = ArrayFromJSON(int8(), R\"([0])\");\n-  std::shared_ptr<Array> offsets = ArrayFromJSON(int32(), R\"([0])\");\n-  std::shared_ptr<Array> string_array = ArrayFromJSON(utf8(), R\"([\"%one\"])\");\n-  std::shared_ptr<Array> bytes_array = ArrayFromJSON(binary(), R\"([])\");\n-  std::shared_ptr<Array> bigint_array = ArrayFromJSON(int64(), R\"([])\");\n-  std::shared_ptr<Array> double_array = ArrayFromJSON(float64(), R\"([])\");\n-\n-  ASSERT_OK_AND_ASSIGN(\n-      auto parameter_1_array,\n-      DenseUnionArray::Make(*type_ids, *offsets,\n-                            {string_array, bytes_array, bigint_array, double_array},\n-                            {\"string\", \"bytes\", \"bigint\", \"double\"}, {0, 1, 2, 3}));\n-\n-  const std::shared_ptr<RecordBatch>& record_batch =\n-      RecordBatch::Make(parameter_schema, 1, {parameter_1_array});\n-\n-  ASSERT_OK(prepared_statement->SetParameters(record_batch));\n+  auto record_batch = RecordBatchFromJSON(parameter_schema, R\"([ [[0, \"%one\"]] ])\");\n+  ASSERT_OK(prepared_statement->SetParameters(std::move(record_batch)));\n \n   ASSERT_OK_AND_ASSIGN(auto flight_info, prepared_statement->Execute());\n-\n   ASSERT_OK_AND_ASSIGN(auto stream,\n                        sql_client->DoGet({}, flight_info->endpoints()[0].ticket));\n-\n   ASSERT_OK_AND_ASSIGN(auto table, stream->ToTable());\n \n   const std::shared_ptr<Schema>& expected_schema =\n       arrow::schema({arrow::field(\"id\", int64()), arrow::field(\"keyName\", utf8()),\n                      arrow::field(\"value\", int64()), arrow::field(\"foreignId\", int64())});\n \n-  const auto id_array = ArrayFromJSON(int64(), R\"([1, 3])\");\n-  const auto keyname_array = ArrayFromJSON(utf8(), R\"([\"one\", \"negative one\"])\");\n-  const auto value_array = ArrayFromJSON(int64(), R\"([1, -1])\");\n-  const auto foreignId_array = ArrayFromJSON(int64(), R\"([1, 1])\");\n-\n-  const std::shared_ptr<Table>& expected_table = Table::Make(\n-      expected_schema, {id_array, keyname_array, value_array, foreignId_array});\n-\n-  AssertTablesEqual(*expected_table, *table);\n+  auto expected_table = TableFromJSON(expected_schema, {R\"([\n+      [1, \"one\", 1, 1],\n+      [3, \"negative one\", -1, 1]\n+  ])\"});\n+  ASSERT_NO_FATAL_FAILURE(AssertTablesEqual(*expected_table, *table, /*verbose=*/true));\n+\n+  // Set multiple parameters at once\n+  record_batch =\n+      RecordBatchFromJSON(parameter_schema, R\"([ [[0, \"%one\"]], [[0, \"%zero\"]] ])\");\n+  ASSERT_OK(prepared_statement->SetParameters(std::move(record_batch)));\n+  ASSERT_OK_AND_ASSIGN(flight_info, prepared_statement->Execute());\n+  ASSERT_OK_AND_ASSIGN(stream, sql_client->DoGet({}, flight_info->endpoints()[0].ticket));\n+  ASSERT_OK_AND_ASSIGN(table, stream->ToTable());\n+  expected_table = TableFromJSON(expected_schema, {R\"([\n+      [1, \"one\", 1, 1],\n+      [3, \"negative one\", -1, 1],\n+      [2, \"zero\", 0, 1]\n\nReview Comment:\n   I would say you mainly need some kind of \"deferred builder\" that just counts nulls at the start, and switches to an actual builder once a non-null value is encountered (or switches to a null array at the end). Perhaps you want to abstract that in a SQLiteColumnBuilder or something.\r\n   \r\n   But, yes, more custom code to write :-)\n\n\n\n",
                    "created": "2022-10-26T15:50:18.972+0000",
                    "updated": "2022-10-26T15:50:18.972+0000",
                    "started": "2022-10-26T15:50:18.971+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "820578",
                    "issueId": "13483536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13483536/worklog/820582",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #14266:\nURL: https://github.com/apache/arrow/pull/14266#discussion_r1005873000\n\n\n##########\ncpp/src/arrow/flight/sql/server_test.cc:\n##########\n@@ -502,51 +489,53 @@ TEST_F(TestFlightSqlServer, TestCommandPreparedStatementQueryWithParameterBindin\n       auto prepared_statement,\n       sql_client->Prepare({}, \"SELECT * FROM intTable WHERE keyName LIKE ?\"));\n \n-  auto parameter_schema = prepared_statement->parameter_schema();\n-\n+  const std::shared_ptr<Schema>& parameter_schema =\n+      prepared_statement->parameter_schema();\n   const std::shared_ptr<Schema>& expected_parameter_schema =\n       arrow::schema({arrow::field(\"parameter_1\", example::GetUnknownColumnDataType())});\n+  ASSERT_NO_FATAL_FAILURE(AssertSchemaEqual(expected_parameter_schema, parameter_schema));\n \n-  AssertSchemaEqual(expected_parameter_schema, parameter_schema);\n-\n-  std::shared_ptr<Array> type_ids = ArrayFromJSON(int8(), R\"([0])\");\n-  std::shared_ptr<Array> offsets = ArrayFromJSON(int32(), R\"([0])\");\n-  std::shared_ptr<Array> string_array = ArrayFromJSON(utf8(), R\"([\"%one\"])\");\n-  std::shared_ptr<Array> bytes_array = ArrayFromJSON(binary(), R\"([])\");\n-  std::shared_ptr<Array> bigint_array = ArrayFromJSON(int64(), R\"([])\");\n-  std::shared_ptr<Array> double_array = ArrayFromJSON(float64(), R\"([])\");\n-\n-  ASSERT_OK_AND_ASSIGN(\n-      auto parameter_1_array,\n-      DenseUnionArray::Make(*type_ids, *offsets,\n-                            {string_array, bytes_array, bigint_array, double_array},\n-                            {\"string\", \"bytes\", \"bigint\", \"double\"}, {0, 1, 2, 3}));\n-\n-  const std::shared_ptr<RecordBatch>& record_batch =\n-      RecordBatch::Make(parameter_schema, 1, {parameter_1_array});\n-\n-  ASSERT_OK(prepared_statement->SetParameters(record_batch));\n+  auto record_batch = RecordBatchFromJSON(parameter_schema, R\"([ [[0, \"%one\"]] ])\");\n+  ASSERT_OK(prepared_statement->SetParameters(std::move(record_batch)));\n \n   ASSERT_OK_AND_ASSIGN(auto flight_info, prepared_statement->Execute());\n-\n   ASSERT_OK_AND_ASSIGN(auto stream,\n                        sql_client->DoGet({}, flight_info->endpoints()[0].ticket));\n-\n   ASSERT_OK_AND_ASSIGN(auto table, stream->ToTable());\n \n   const std::shared_ptr<Schema>& expected_schema =\n       arrow::schema({arrow::field(\"id\", int64()), arrow::field(\"keyName\", utf8()),\n                      arrow::field(\"value\", int64()), arrow::field(\"foreignId\", int64())});\n \n-  const auto id_array = ArrayFromJSON(int64(), R\"([1, 3])\");\n-  const auto keyname_array = ArrayFromJSON(utf8(), R\"([\"one\", \"negative one\"])\");\n-  const auto value_array = ArrayFromJSON(int64(), R\"([1, -1])\");\n-  const auto foreignId_array = ArrayFromJSON(int64(), R\"([1, 1])\");\n-\n-  const std::shared_ptr<Table>& expected_table = Table::Make(\n-      expected_schema, {id_array, keyname_array, value_array, foreignId_array});\n-\n-  AssertTablesEqual(*expected_table, *table);\n+  auto expected_table = TableFromJSON(expected_schema, {R\"([\n+      [1, \"one\", 1, 1],\n+      [3, \"negative one\", -1, 1]\n+  ])\"});\n+  ASSERT_NO_FATAL_FAILURE(AssertTablesEqual(*expected_table, *table, /*verbose=*/true));\n+\n+  // Set multiple parameters at once\n+  record_batch =\n+      RecordBatchFromJSON(parameter_schema, R\"([ [[0, \"%one\"]], [[0, \"%zero\"]] ])\");\n+  ASSERT_OK(prepared_statement->SetParameters(std::move(record_batch)));\n+  ASSERT_OK_AND_ASSIGN(flight_info, prepared_statement->Execute());\n+  ASSERT_OK_AND_ASSIGN(stream, sql_client->DoGet({}, flight_info->endpoints()[0].ticket));\n+  ASSERT_OK_AND_ASSIGN(table, stream->ToTable());\n+  expected_table = TableFromJSON(expected_schema, {R\"([\n+      [1, \"one\", 1, 1],\n+      [3, \"negative one\", -1, 1],\n+      [2, \"zero\", 0, 1]\n\nReview Comment:\n   Ah, well, that would handle nulls, but you could mix values of different types within a column as well\u2026and I can imagine some people want errors on mixed types, others want upcasting/coercion, others would be happy with nulls, and maybe one person wants a dense union :)\n\n\n\n",
                    "created": "2022-10-26T15:57:19.590+0000",
                    "updated": "2022-10-26T15:57:19.590+0000",
                    "started": "2022-10-26T15:57:19.578+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "820582",
                    "issueId": "13483536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13483536/worklog/820585",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #14266:\nURL: https://github.com/apache/arrow/pull/14266#discussion_r1005878920\n\n\n##########\ncpp/src/arrow/flight/sql/server_test.cc:\n##########\n@@ -502,51 +489,53 @@ TEST_F(TestFlightSqlServer, TestCommandPreparedStatementQueryWithParameterBindin\n       auto prepared_statement,\n       sql_client->Prepare({}, \"SELECT * FROM intTable WHERE keyName LIKE ?\"));\n \n-  auto parameter_schema = prepared_statement->parameter_schema();\n-\n+  const std::shared_ptr<Schema>& parameter_schema =\n+      prepared_statement->parameter_schema();\n   const std::shared_ptr<Schema>& expected_parameter_schema =\n       arrow::schema({arrow::field(\"parameter_1\", example::GetUnknownColumnDataType())});\n+  ASSERT_NO_FATAL_FAILURE(AssertSchemaEqual(expected_parameter_schema, parameter_schema));\n \n-  AssertSchemaEqual(expected_parameter_schema, parameter_schema);\n-\n-  std::shared_ptr<Array> type_ids = ArrayFromJSON(int8(), R\"([0])\");\n-  std::shared_ptr<Array> offsets = ArrayFromJSON(int32(), R\"([0])\");\n-  std::shared_ptr<Array> string_array = ArrayFromJSON(utf8(), R\"([\"%one\"])\");\n-  std::shared_ptr<Array> bytes_array = ArrayFromJSON(binary(), R\"([])\");\n-  std::shared_ptr<Array> bigint_array = ArrayFromJSON(int64(), R\"([])\");\n-  std::shared_ptr<Array> double_array = ArrayFromJSON(float64(), R\"([])\");\n-\n-  ASSERT_OK_AND_ASSIGN(\n-      auto parameter_1_array,\n-      DenseUnionArray::Make(*type_ids, *offsets,\n-                            {string_array, bytes_array, bigint_array, double_array},\n-                            {\"string\", \"bytes\", \"bigint\", \"double\"}, {0, 1, 2, 3}));\n-\n-  const std::shared_ptr<RecordBatch>& record_batch =\n-      RecordBatch::Make(parameter_schema, 1, {parameter_1_array});\n-\n-  ASSERT_OK(prepared_statement->SetParameters(record_batch));\n+  auto record_batch = RecordBatchFromJSON(parameter_schema, R\"([ [[0, \"%one\"]] ])\");\n+  ASSERT_OK(prepared_statement->SetParameters(std::move(record_batch)));\n \n   ASSERT_OK_AND_ASSIGN(auto flight_info, prepared_statement->Execute());\n-\n   ASSERT_OK_AND_ASSIGN(auto stream,\n                        sql_client->DoGet({}, flight_info->endpoints()[0].ticket));\n-\n   ASSERT_OK_AND_ASSIGN(auto table, stream->ToTable());\n \n   const std::shared_ptr<Schema>& expected_schema =\n       arrow::schema({arrow::field(\"id\", int64()), arrow::field(\"keyName\", utf8()),\n                      arrow::field(\"value\", int64()), arrow::field(\"foreignId\", int64())});\n \n-  const auto id_array = ArrayFromJSON(int64(), R\"([1, 3])\");\n-  const auto keyname_array = ArrayFromJSON(utf8(), R\"([\"one\", \"negative one\"])\");\n-  const auto value_array = ArrayFromJSON(int64(), R\"([1, -1])\");\n-  const auto foreignId_array = ArrayFromJSON(int64(), R\"([1, 1])\");\n-\n-  const std::shared_ptr<Table>& expected_table = Table::Make(\n-      expected_schema, {id_array, keyname_array, value_array, foreignId_array});\n-\n-  AssertTablesEqual(*expected_table, *table);\n+  auto expected_table = TableFromJSON(expected_schema, {R\"([\n+      [1, \"one\", 1, 1],\n+      [3, \"negative one\", -1, 1]\n+  ])\"});\n+  ASSERT_NO_FATAL_FAILURE(AssertTablesEqual(*expected_table, *table, /*verbose=*/true));\n+\n+  // Set multiple parameters at once\n+  record_batch =\n+      RecordBatchFromJSON(parameter_schema, R\"([ [[0, \"%one\"]], [[0, \"%zero\"]] ])\");\n+  ASSERT_OK(prepared_statement->SetParameters(std::move(record_batch)));\n+  ASSERT_OK_AND_ASSIGN(flight_info, prepared_statement->Execute());\n+  ASSERT_OK_AND_ASSIGN(stream, sql_client->DoGet({}, flight_info->endpoints()[0].ticket));\n+  ASSERT_OK_AND_ASSIGN(table, stream->ToTable());\n+  expected_table = TableFromJSON(expected_schema, {R\"([\n+      [1, \"one\", 1, 1],\n+      [3, \"negative one\", -1, 1],\n+      [2, \"zero\", 0, 1]\n\nReview Comment:\n   Not really, since it would switch to an actual resolved builder at the first non-null value encountered.\n\n\n\n",
                    "created": "2022-10-26T16:02:44.886+0000",
                    "updated": "2022-10-26T16:02:44.886+0000",
                    "started": "2022-10-26T16:02:44.886+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "820585",
                    "issueId": "13483536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13483536/worklog/821015",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #14266:\nURL: https://github.com/apache/arrow/pull/14266#discussion_r1006890482\n\n\n##########\ncpp/src/arrow/flight/sql/client.cc:\n##########\n@@ -574,26 +584,21 @@ arrow::Result<int64_t> PreparedStatement::ExecuteUpdate(\n   command.set_prepared_statement_handle(handle_);\n   ARROW_ASSIGN_OR_RAISE(FlightDescriptor descriptor,\n                         GetFlightDescriptorForCommand(command));\n-  std::unique_ptr<FlightStreamWriter> writer;\n-  std::unique_ptr<FlightMetadataReader> reader;\n-\n-  if (parameter_binding_ && parameter_binding_->num_rows() > 0) {\n-    ARROW_RETURN_NOT_OK(client_->DoPut(options, descriptor, parameter_binding_->schema(),\n-                                       &writer, &reader));\n-    ARROW_RETURN_NOT_OK(writer->WriteRecordBatch(*parameter_binding_));\n+  std::shared_ptr<Buffer> metadata;\n+  if (parameter_binding_) {\n+    ARROW_ASSIGN_OR_RAISE(metadata, BindParameters(client_->impl_.get(), options,\n+                                                   descriptor, parameter_binding_.get()));\n   } else {\n     const std::shared_ptr<Schema> schema = arrow::schema({});\n-    ARROW_RETURN_NOT_OK(client_->DoPut(options, descriptor, schema, &writer, &reader));\n-    const ArrayVector columns;\n-    const auto& record_batch = arrow::RecordBatch::Make(schema, 0, columns);\n-    ARROW_RETURN_NOT_OK(writer->WriteRecordBatch(*record_batch));\n+    auto record_batch = arrow::RecordBatch::Make(schema, 0, ArrayVector{});\n+    ARROW_ASSIGN_OR_RAISE(auto params,\n+                          RecordBatchReader::Make({std::move(record_batch)}));\n\nReview Comment:\n   It's not written into the spec. It also doesn't seem necessary here. I've removed it (or rather, replaced it with a 0-batch reader).\n\n\n\n##########\ncpp/src/arrow/flight/sql/example/sqlite_server.cc:\n##########\n@@ -77,50 +84,25 @@ std::string PrepareQueryForGetTables(const GetTables& command) {\n   return table_query.str();\n }\n \n-Status SetParametersOnSQLiteStatement(sqlite3_stmt* stmt, FlightMessageReader* reader) {\n+template <typename Callback>\n+Status SetParametersOnSQLiteStatement(SqliteStatement* statement,\n+                                      FlightMessageReader* reader, Callback callback) {\n+  sqlite3_stmt* stmt = statement->GetSqlite3Stmt();\n   while (true) {\n     ARROW_ASSIGN_OR_RAISE(FlightStreamChunk chunk, reader->Next());\n-    std::shared_ptr<RecordBatch>& record_batch = chunk.data;\n-    if (record_batch == nullptr) break;\n+    if (chunk.data == nullptr) break;\n \n-    const int64_t num_rows = record_batch->num_rows();\n-    const int& num_columns = record_batch->num_columns();\n+    const int64_t num_rows = chunk.data->num_rows();\n+    if (num_rows == 0) continue;\n \n+    ARROW_RETURN_NOT_OK(statement->SetParameters({std::move(chunk.data)}));\n     for (int i = 0; i < num_rows; ++i) {\n-      for (int c = 0; c < num_columns; ++c) {\n-        const std::shared_ptr<Array>& column = record_batch->column(c);\n-        ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> scalar, column->GetScalar(i));\n-\n-        auto& holder = static_cast<DenseUnionScalar&>(*scalar).value;\n-\n-        switch (holder->type->id()) {\n-          case Type::INT64: {\n-            int64_t value = static_cast<Int64Scalar&>(*holder).value;\n-            sqlite3_bind_int64(stmt, c + 1, value);\n-            break;\n-          }\n-          case Type::FLOAT: {\n-            double value = static_cast<FloatScalar&>(*holder).value;\n-            sqlite3_bind_double(stmt, c + 1, value);\n-            break;\n-          }\n-          case Type::STRING: {\n-            std::shared_ptr<Buffer> buffer = static_cast<StringScalar&>(*holder).value;\n-            sqlite3_bind_text(stmt, c + 1, reinterpret_cast<const char*>(buffer->data()),\n-                              static_cast<int>(buffer->size()), SQLITE_TRANSIENT);\n-            break;\n-          }\n-          case Type::BINARY: {\n-            std::shared_ptr<Buffer> buffer = static_cast<BinaryScalar&>(*holder).value;\n-            sqlite3_bind_blob(stmt, c + 1, buffer->data(),\n-                              static_cast<int>(buffer->size()), SQLITE_TRANSIENT);\n-            break;\n-          }\n-          default:\n-            return Status::Invalid(\"Received unsupported data type: \",\n-                                   holder->type->ToString());\n-        }\n+      if (sqlite3_clear_bindings(stmt) != SQLITE_OK) {\n+        return Status::Invalid(\"Failed to reset bindings on row \", i, \": \",\n+                               sqlite3_errmsg(statement->db()));\n       }\n+      ARROW_RETURN_NOT_OK(statement->Bind(/*batch_index=*/0, i));\n+      ARROW_RETURN_NOT_OK(callback());\n\nReview Comment:\n   We can't bind multiple rows at once, so we have to execute the query after each binding.\n\n\n\n##########\ncpp/src/arrow/flight/sql/example/sqlite_statement.h:\n##########\n@@ -62,15 +62,25 @@ class SqliteStatement {\n \n   /// \\brief Returns the underlying sqlite3_stmt.\n   /// \\return A sqlite statement.\n-  sqlite3_stmt* GetSqlite3Stmt() const;\n+  [[nodiscard]] sqlite3_stmt* GetSqlite3Stmt() const;\n\nReview Comment:\n   I've removed them all.\n\n\n\n##########\ncpp/src/arrow/flight/sql/example/sqlite_server.cc:\n##########\n@@ -77,50 +84,25 @@ std::string PrepareQueryForGetTables(const GetTables& command) {\n   return table_query.str();\n }\n \n-Status SetParametersOnSQLiteStatement(sqlite3_stmt* stmt, FlightMessageReader* reader) {\n+template <typename Callback>\n+Status SetParametersOnSQLiteStatement(SqliteStatement* statement,\n+                                      FlightMessageReader* reader, Callback callback) {\n+  sqlite3_stmt* stmt = statement->GetSqlite3Stmt();\n   while (true) {\n     ARROW_ASSIGN_OR_RAISE(FlightStreamChunk chunk, reader->Next());\n-    std::shared_ptr<RecordBatch>& record_batch = chunk.data;\n-    if (record_batch == nullptr) break;\n+    if (chunk.data == nullptr) break;\n \n-    const int64_t num_rows = record_batch->num_rows();\n-    const int& num_columns = record_batch->num_columns();\n+    const int64_t num_rows = chunk.data->num_rows();\n+    if (num_rows == 0) continue;\n \n+    ARROW_RETURN_NOT_OK(statement->SetParameters({std::move(chunk.data)}));\n     for (int i = 0; i < num_rows; ++i) {\n-      for (int c = 0; c < num_columns; ++c) {\n-        const std::shared_ptr<Array>& column = record_batch->column(c);\n-        ARROW_ASSIGN_OR_RAISE(std::shared_ptr<Scalar> scalar, column->GetScalar(i));\n-\n-        auto& holder = static_cast<DenseUnionScalar&>(*scalar).value;\n-\n-        switch (holder->type->id()) {\n-          case Type::INT64: {\n-            int64_t value = static_cast<Int64Scalar&>(*holder).value;\n-            sqlite3_bind_int64(stmt, c + 1, value);\n-            break;\n-          }\n-          case Type::FLOAT: {\n-            double value = static_cast<FloatScalar&>(*holder).value;\n-            sqlite3_bind_double(stmt, c + 1, value);\n-            break;\n-          }\n-          case Type::STRING: {\n-            std::shared_ptr<Buffer> buffer = static_cast<StringScalar&>(*holder).value;\n-            sqlite3_bind_text(stmt, c + 1, reinterpret_cast<const char*>(buffer->data()),\n-                              static_cast<int>(buffer->size()), SQLITE_TRANSIENT);\n-            break;\n-          }\n-          case Type::BINARY: {\n-            std::shared_ptr<Buffer> buffer = static_cast<BinaryScalar&>(*holder).value;\n-            sqlite3_bind_blob(stmt, c + 1, buffer->data(),\n-                              static_cast<int>(buffer->size()), SQLITE_TRANSIENT);\n-            break;\n-          }\n-          default:\n-            return Status::Invalid(\"Received unsupported data type: \",\n-                                   holder->type->ToString());\n-        }\n+      if (sqlite3_clear_bindings(stmt) != SQLITE_OK) {\n+        return Status::Invalid(\"Failed to reset bindings on row \", i, \": \",\n+                               sqlite3_errmsg(statement->db()));\n       }\n+      ARROW_RETURN_NOT_OK(statement->Bind(/*batch_index=*/0, i));\n\nReview Comment:\n   Yes, since there's only a single batch being fed through at a time.\n\n\n\n##########\ncpp/src/arrow/flight/sql/server_test.cc:\n##########\n@@ -502,51 +489,53 @@ TEST_F(TestFlightSqlServer, TestCommandPreparedStatementQueryWithParameterBindin\n       auto prepared_statement,\n       sql_client->Prepare({}, \"SELECT * FROM intTable WHERE keyName LIKE ?\"));\n \n-  auto parameter_schema = prepared_statement->parameter_schema();\n-\n+  const std::shared_ptr<Schema>& parameter_schema =\n+      prepared_statement->parameter_schema();\n   const std::shared_ptr<Schema>& expected_parameter_schema =\n       arrow::schema({arrow::field(\"parameter_1\", example::GetUnknownColumnDataType())});\n+  ASSERT_NO_FATAL_FAILURE(AssertSchemaEqual(expected_parameter_schema, parameter_schema));\n \n-  AssertSchemaEqual(expected_parameter_schema, parameter_schema);\n-\n-  std::shared_ptr<Array> type_ids = ArrayFromJSON(int8(), R\"([0])\");\n-  std::shared_ptr<Array> offsets = ArrayFromJSON(int32(), R\"([0])\");\n-  std::shared_ptr<Array> string_array = ArrayFromJSON(utf8(), R\"([\"%one\"])\");\n-  std::shared_ptr<Array> bytes_array = ArrayFromJSON(binary(), R\"([])\");\n-  std::shared_ptr<Array> bigint_array = ArrayFromJSON(int64(), R\"([])\");\n-  std::shared_ptr<Array> double_array = ArrayFromJSON(float64(), R\"([])\");\n-\n-  ASSERT_OK_AND_ASSIGN(\n-      auto parameter_1_array,\n-      DenseUnionArray::Make(*type_ids, *offsets,\n-                            {string_array, bytes_array, bigint_array, double_array},\n-                            {\"string\", \"bytes\", \"bigint\", \"double\"}, {0, 1, 2, 3}));\n-\n-  const std::shared_ptr<RecordBatch>& record_batch =\n-      RecordBatch::Make(parameter_schema, 1, {parameter_1_array});\n-\n-  ASSERT_OK(prepared_statement->SetParameters(record_batch));\n+  auto record_batch = RecordBatchFromJSON(parameter_schema, R\"([ [[0, \"%one\"]] ])\");\n+  ASSERT_OK(prepared_statement->SetParameters(std::move(record_batch)));\n \n   ASSERT_OK_AND_ASSIGN(auto flight_info, prepared_statement->Execute());\n-\n   ASSERT_OK_AND_ASSIGN(auto stream,\n                        sql_client->DoGet({}, flight_info->endpoints()[0].ticket));\n-\n   ASSERT_OK_AND_ASSIGN(auto table, stream->ToTable());\n \n   const std::shared_ptr<Schema>& expected_schema =\n       arrow::schema({arrow::field(\"id\", int64()), arrow::field(\"keyName\", utf8()),\n                      arrow::field(\"value\", int64()), arrow::field(\"foreignId\", int64())});\n \n-  const auto id_array = ArrayFromJSON(int64(), R\"([1, 3])\");\n-  const auto keyname_array = ArrayFromJSON(utf8(), R\"([\"one\", \"negative one\"])\");\n-  const auto value_array = ArrayFromJSON(int64(), R\"([1, -1])\");\n-  const auto foreignId_array = ArrayFromJSON(int64(), R\"([1, 1])\");\n-\n-  const std::shared_ptr<Table>& expected_table = Table::Make(\n-      expected_schema, {id_array, keyname_array, value_array, foreignId_array});\n-\n-  AssertTablesEqual(*expected_table, *table);\n+  auto expected_table = TableFromJSON(expected_schema, {R\"([\n+      [1, \"one\", 1, 1],\n+      [3, \"negative one\", -1, 1]\n+  ])\"});\n+  ASSERT_NO_FATAL_FAILURE(AssertTablesEqual(*expected_table, *table, /*verbose=*/true));\n+\n+  // Set multiple parameters at once\n+  record_batch =\n+      RecordBatchFromJSON(parameter_schema, R\"([ [[0, \"%one\"]], [[0, \"%zero\"]] ])\");\n+  ASSERT_OK(prepared_statement->SetParameters(std::move(record_batch)));\n+  ASSERT_OK_AND_ASSIGN(flight_info, prepared_statement->Execute());\n+  ASSERT_OK_AND_ASSIGN(stream, sql_client->DoGet({}, flight_info->endpoints()[0].ticket));\n+  ASSERT_OK_AND_ASSIGN(table, stream->ToTable());\n+  expected_table = TableFromJSON(expected_schema, {R\"([\n+      [1, \"one\", 1, 1],\n+      [3, \"negative one\", -1, 1],\n+      [2, \"zero\", 0, 1]\n\nReview Comment:\n   Adjusted some tests to return nulls.\n\n\n\n##########\ncpp/src/arrow/flight/sql/example/sqlite_statement.h:\n##########\n@@ -62,15 +62,25 @@ class SqliteStatement {\n \n   /// \\brief Returns the underlying sqlite3_stmt.\n   /// \\return A sqlite statement.\n-  sqlite3_stmt* GetSqlite3Stmt() const;\n+  [[nodiscard]] sqlite3_stmt* GetSqlite3Stmt() const;\n\nReview Comment:\n   The nodiscard thing is a quirk of the code linter in clangd; it suggests `[[nodiscard]]` on basically every getter due to https://clang.llvm.org/extra/clang-tidy/checks/modernize/use-nodiscard.html.\n\n\n\n",
                    "created": "2022-10-27T13:50:41.479+0000",
                    "updated": "2022-10-27T13:50:41.479+0000",
                    "started": "2022-10-27T13:50:41.479+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "821015",
                    "issueId": "13483536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13483536/worklog/822032",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #14266:\nURL: https://github.com/apache/arrow/pull/14266#discussion_r1009666006\n\n\n##########\ncpp/src/arrow/flight/sql/example/sqlite_statement.cc:\n##########\n@@ -160,10 +169,100 @@ arrow::Result<int> SqliteStatement::Reset() {\n sqlite3_stmt* SqliteStatement::GetSqlite3Stmt() const { return stmt_; }\n \n arrow::Result<int64_t> SqliteStatement::ExecuteUpdate() {\n-  ARROW_RETURN_NOT_OK(Step());\n+  while (true) {\n+    ARROW_ASSIGN_OR_RAISE(int rc, Step());\n+    if (rc == SQLITE_DONE) break;\n+  }\n   return sqlite3_changes(db_);\n }\n \n+Status SqliteStatement::SetParameters(\n+    std::vector<std::shared_ptr<arrow::RecordBatch>> parameters) {\n+  const int num_params = sqlite3_bind_parameter_count(stmt_);\n+  for (const auto& batch : parameters) {\n+    if (batch->num_columns() != num_params) {\n+      return Status::Invalid(\"Expected \", num_params, \" parameters, but got \",\n+                             batch->num_columns());\n+    }\n+  }\n+  parameters_ = std::move(parameters);\n+  auto end = std::remove_if(\n+      parameters_.begin(), parameters_.end(),\n+      [](const std::shared_ptr<RecordBatch>& batch) { return batch->num_rows() == 0; });\n+  parameters_.erase(end, parameters_.end());\n+  return Status::OK();\n+}\n+\n+Status SqliteStatement::Bind(size_t batch_index, int64_t row_index) {\n+  if (batch_index >= parameters_.size()) {\n+    return Status::IndexError(\"Cannot bind to batch \", batch_index);\n+  }\n+  const RecordBatch& batch = *parameters_[batch_index];\n+  if (row_index < 0 || row_index >= batch.num_rows()) {\n+    return Status::IndexError(\"Cannot bind to row \", row_index, \" in batch \",\n+                              batch_index);\n+  }\n+\n+  if (sqlite3_clear_bindings(stmt_) != SQLITE_OK) {\n+    return Status::Invalid(\"Failed to reset bindings: \", sqlite3_errmsg(db_));\n+  }\n+  for (int c = 0; c < batch.num_columns(); ++c) {\n+    Array* column = batch.column(c).get();\n+    int64_t column_index = row_index;\n+    if (column->type_id() == Type::DENSE_UNION) {\n+      // Allow polymorphic bindings via union\n\nReview Comment:\n   Nice, but why not also handle sparse unions?\n\n\n\n",
                    "created": "2022-10-31T17:13:26.945+0000",
                    "updated": "2022-10-31T17:13:26.945+0000",
                    "started": "2022-10-31T17:13:26.944+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "822032",
                    "issueId": "13483536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13483536/worklog/822034",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #14266:\nURL: https://github.com/apache/arrow/pull/14266#discussion_r1009667423\n\n\n##########\ncpp/src/arrow/flight/sql/example/sqlite_statement.cc:\n##########\n@@ -160,10 +169,100 @@ arrow::Result<int> SqliteStatement::Reset() {\n sqlite3_stmt* SqliteStatement::GetSqlite3Stmt() const { return stmt_; }\n \n arrow::Result<int64_t> SqliteStatement::ExecuteUpdate() {\n-  ARROW_RETURN_NOT_OK(Step());\n+  while (true) {\n+    ARROW_ASSIGN_OR_RAISE(int rc, Step());\n+    if (rc == SQLITE_DONE) break;\n+  }\n   return sqlite3_changes(db_);\n }\n \n+Status SqliteStatement::SetParameters(\n+    std::vector<std::shared_ptr<arrow::RecordBatch>> parameters) {\n+  const int num_params = sqlite3_bind_parameter_count(stmt_);\n+  for (const auto& batch : parameters) {\n+    if (batch->num_columns() != num_params) {\n+      return Status::Invalid(\"Expected \", num_params, \" parameters, but got \",\n+                             batch->num_columns());\n+    }\n+  }\n+  parameters_ = std::move(parameters);\n+  auto end = std::remove_if(\n+      parameters_.begin(), parameters_.end(),\n+      [](const std::shared_ptr<RecordBatch>& batch) { return batch->num_rows() == 0; });\n+  parameters_.erase(end, parameters_.end());\n+  return Status::OK();\n+}\n+\n+Status SqliteStatement::Bind(size_t batch_index, int64_t row_index) {\n+  if (batch_index >= parameters_.size()) {\n+    return Status::IndexError(\"Cannot bind to batch \", batch_index);\n+  }\n+  const RecordBatch& batch = *parameters_[batch_index];\n+  if (row_index < 0 || row_index >= batch.num_rows()) {\n+    return Status::IndexError(\"Cannot bind to row \", row_index, \" in batch \",\n+                              batch_index);\n+  }\n+\n+  if (sqlite3_clear_bindings(stmt_) != SQLITE_OK) {\n+    return Status::Invalid(\"Failed to reset bindings: \", sqlite3_errmsg(db_));\n+  }\n+  for (int c = 0; c < batch.num_columns(); ++c) {\n+    Array* column = batch.column(c).get();\n+    int64_t column_index = row_index;\n+    if (column->type_id() == Type::DENSE_UNION) {\n+      // Allow polymorphic bindings via union\n\nReview Comment:\n   (I realize this is still classified as example, though, so perhaps you don't want to maximize type coverage)\n\n\n\n",
                    "created": "2022-10-31T17:14:57.467+0000",
                    "updated": "2022-10-31T17:14:57.467+0000",
                    "started": "2022-10-31T17:14:57.466+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "822034",
                    "issueId": "13483536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13483536/worklog/822036",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #14266:\nURL: https://github.com/apache/arrow/pull/14266#discussion_r1009671144\n\n\n##########\ncpp/src/arrow/flight/sql/server_test.cc:\n##########\n@@ -555,41 +548,34 @@ TEST_F(TestFlightSqlServer, TestCommandPreparedStatementUpdateWithParameterBindi\n       sql_client->Prepare(\n           {}, \"INSERT INTO INTTABLE (keyName, value) VALUES ('new_value', ?)\"));\n \n-  auto parameter_schema = prepared_statement->parameter_schema();\n-\n+  const std::shared_ptr<Schema>& parameter_schema =\n+      prepared_statement->parameter_schema();\n   const std::shared_ptr<Schema>& expected_parameter_schema =\n       arrow::schema({arrow::field(\"parameter_1\", example::GetUnknownColumnDataType())});\n+  ASSERT_NO_FATAL_FAILURE(AssertSchemaEqual(expected_parameter_schema, parameter_schema));\n \n-  AssertSchemaEqual(expected_parameter_schema, parameter_schema);\n-\n-  std::shared_ptr<Array> type_ids = ArrayFromJSON(int8(), R\"([2])\");\n-  std::shared_ptr<Array> offsets = ArrayFromJSON(int32(), R\"([0])\");\n-  std::shared_ptr<Array> string_array = ArrayFromJSON(utf8(), R\"([])\");\n-  std::shared_ptr<Array> bytes_array = ArrayFromJSON(binary(), R\"([])\");\n-  std::shared_ptr<Array> bigint_array = ArrayFromJSON(int64(), R\"([999])\");\n-  std::shared_ptr<Array> double_array = ArrayFromJSON(float64(), R\"([])\");\n-\n-  ASSERT_OK_AND_ASSIGN(\n-      auto parameter_1_array,\n-      DenseUnionArray::Make(*type_ids, *offsets,\n-                            {string_array, bytes_array, bigint_array, double_array},\n-                            {\"string\", \"bytes\", \"bigint\", \"double\"}, {0, 1, 2, 3}));\n-\n-  const std::shared_ptr<RecordBatch>& record_batch =\n-      RecordBatch::Make(parameter_schema, 1, {parameter_1_array});\n-\n-  ASSERT_OK(prepared_statement->SetParameters(record_batch));\n-\n-  ASSERT_OK_AND_EQ(4, ExecuteCountQuery(\"SELECT COUNT(*) FROM intTable\"));\n-\n-  ASSERT_OK_AND_EQ(1, prepared_statement->ExecuteUpdate());\n+  auto record_batch = RecordBatchFromJSON(parameter_schema, R\"([ [[2, 999]] ])\");\n+  ASSERT_OK(prepared_statement->SetParameters(std::move(record_batch)));\n \n   ASSERT_OK_AND_EQ(5, ExecuteCountQuery(\"SELECT COUNT(*) FROM intTable\"));\n-\n+  ASSERT_OK_AND_EQ(1, prepared_statement->ExecuteUpdate());\n+  ASSERT_OK_AND_EQ(6, ExecuteCountQuery(\"SELECT COUNT(*) FROM intTable\"));\n   ASSERT_OK_AND_EQ(1, sql_client->ExecuteUpdate(\n                           {}, \"DELETE FROM intTable WHERE keyName = 'new_value'\"));\n+  ASSERT_OK_AND_EQ(5, ExecuteCountQuery(\"SELECT COUNT(*) FROM intTable\"));\n \n-  ASSERT_OK_AND_EQ(4, ExecuteCountQuery(\"SELECT COUNT(*) FROM intTable\"));\n+  // Set multiple parameters at once\n+  record_batch = RecordBatchFromJSON(parameter_schema, R\"([ [[2, 999]], [[2, 42]] ])\");\n+  ASSERT_OK(prepared_statement->SetParameters(std::move(record_batch)));\n+  ASSERT_OK_AND_EQ(2, prepared_statement->ExecuteUpdate());\n+  ASSERT_OK_AND_EQ(7, ExecuteCountQuery(\"SELECT COUNT(*) FROM intTable\"));\n+\n+  // Set a stream of parameters\n+  record_batch = RecordBatchFromJSON(parameter_schema, R\"([ [[2, 999]], [[2, 42]] ])\");\n+  ASSERT_OK_AND_ASSIGN(auto reader, RecordBatchReader::Make({std::move(record_batch)}));\n\nReview Comment:\n   Perhaps instead make this reader non-trivial (at least 2 different batches)?\n\n\n\n",
                    "created": "2022-10-31T17:18:57.509+0000",
                    "updated": "2022-10-31T17:18:57.509+0000",
                    "started": "2022-10-31T17:18:57.508+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "822036",
                    "issueId": "13483536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13483536/worklog/822100",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #14266:\nURL: https://github.com/apache/arrow/pull/14266#discussion_r1009852379\n\n\n##########\ncpp/src/arrow/flight/sql/example/sqlite_statement.cc:\n##########\n@@ -160,10 +169,100 @@ arrow::Result<int> SqliteStatement::Reset() {\n sqlite3_stmt* SqliteStatement::GetSqlite3Stmt() const { return stmt_; }\n \n arrow::Result<int64_t> SqliteStatement::ExecuteUpdate() {\n-  ARROW_RETURN_NOT_OK(Step());\n+  while (true) {\n+    ARROW_ASSIGN_OR_RAISE(int rc, Step());\n+    if (rc == SQLITE_DONE) break;\n+  }\n   return sqlite3_changes(db_);\n }\n \n+Status SqliteStatement::SetParameters(\n+    std::vector<std::shared_ptr<arrow::RecordBatch>> parameters) {\n+  const int num_params = sqlite3_bind_parameter_count(stmt_);\n+  for (const auto& batch : parameters) {\n+    if (batch->num_columns() != num_params) {\n+      return Status::Invalid(\"Expected \", num_params, \" parameters, but got \",\n+                             batch->num_columns());\n+    }\n+  }\n+  parameters_ = std::move(parameters);\n+  auto end = std::remove_if(\n+      parameters_.begin(), parameters_.end(),\n+      [](const std::shared_ptr<RecordBatch>& batch) { return batch->num_rows() == 0; });\n+  parameters_.erase(end, parameters_.end());\n+  return Status::OK();\n+}\n+\n+Status SqliteStatement::Bind(size_t batch_index, int64_t row_index) {\n+  if (batch_index >= parameters_.size()) {\n+    return Status::IndexError(\"Cannot bind to batch \", batch_index);\n+  }\n+  const RecordBatch& batch = *parameters_[batch_index];\n+  if (row_index < 0 || row_index >= batch.num_rows()) {\n+    return Status::IndexError(\"Cannot bind to row \", row_index, \" in batch \",\n+                              batch_index);\n+  }\n+\n+  if (sqlite3_clear_bindings(stmt_) != SQLITE_OK) {\n+    return Status::Invalid(\"Failed to reset bindings: \", sqlite3_errmsg(db_));\n+  }\n+  for (int c = 0; c < batch.num_columns(); ++c) {\n+    Array* column = batch.column(c).get();\n+    int64_t column_index = row_index;\n+    if (column->type_id() == Type::DENSE_UNION) {\n+      // Allow polymorphic bindings via union\n\nReview Comment:\n   Flight SQL returns the types of the parameters when you prepare a statement, and this server only ever returns dense union (since SQLite is untyped); in #14082 however the ADBC test suite uses ints specifically and it's easy to support both dense union and int\n\n\n\n",
                    "created": "2022-10-31T20:40:52.531+0000",
                    "updated": "2022-10-31T20:40:52.531+0000",
                    "started": "2022-10-31T20:40:52.531+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "822100",
                    "issueId": "13483536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13483536/worklog/822337",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #14266:\nURL: https://github.com/apache/arrow/pull/14266#issuecomment-1298604923\n\n   MacOS/Ruby failures look unrelated, restarted R build since the R setup action 404'd \n\n\n",
                    "created": "2022-11-01T14:37:54.690+0000",
                    "updated": "2022-11-01T14:37:54.690+0000",
                    "started": "2022-11-01T14:37:54.690+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "822337",
                    "issueId": "13483536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13483536/worklog/822420",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm merged PR #14266:\nURL: https://github.com/apache/arrow/pull/14266\n\n\n",
                    "created": "2022-11-01T17:29:59.483+0000",
                    "updated": "2022-11-01T17:29:59.483+0000",
                    "started": "2022-11-01T17:29:59.483+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "822420",
                    "issueId": "13483536"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13483536/worklog/822472",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "ursabot commented on PR #14266:\nURL: https://github.com/apache/arrow/pull/14266#issuecomment-1299285759\n\n   Benchmark runs are scheduled for baseline = e1303aacc1a0e3a01ee3ccf9fab93de18a0d2d2a and contender = 85ae0d2e83a31a1a3e99c30c43e905c0fbdd0791. 85ae0d2e83a31a1a3e99c30c43e905c0fbdd0791 is a master commit associated with this PR. Results will be available as each benchmark for each run completes.\n   Conbench compare runs links:\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ec2-t3-xlarge-us-east-2](https://conbench.ursa.dev/compare/runs/f4251639dec9487e9ee52c36560c15ce...dbc5a65fadcb4f2b9380f0e6bf439d28/)\n   [Failed :arrow_down:0.0% :arrow_up:0.0%] [test-mac-arm](https://conbench.ursa.dev/compare/runs/4f0f4ca60a074f4385eccf314ad5e015...497c6a64375c4e1989d8f64b9a5275b9/)\n   [Finished :arrow_down:0.0% :arrow_up:0.0%] [ursa-i9-9960x](https://conbench.ursa.dev/compare/runs/ec2e6b7081b94766b785633d2c947ce1...f6abecd2d5a3423d95163940651628cd/)\n   [Finished :arrow_down:0.29% :arrow_up:0.04%] [ursa-thinkcentre-m75q](https://conbench.ursa.dev/compare/runs/fd816083f3734d399c4c76cb53d28dd8...9975cf2f18b94a64b12715285fbe687b/)\n   Buildkite builds:\n   [Finished] [`85ae0d2e` ec2-t3-xlarge-us-east-2](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/1801)\n   [Failed] [`85ae0d2e` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/1822)\n   [Finished] [`85ae0d2e` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/1789)\n   [Finished] [`85ae0d2e` ursa-thinkcentre-m75q](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/1814)\n   [Finished] [`e1303aac` ec2-t3-xlarge-us-east-2](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ec2-t3-xlarge-us-east-2/builds/1800)\n   [Failed] [`e1303aac` test-mac-arm](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-test-mac-arm/builds/1821)\n   [Finished] [`e1303aac` ursa-i9-9960x](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-i9-9960x/builds/1788)\n   [Finished] [`e1303aac` ursa-thinkcentre-m75q](https://buildkite.com/apache-arrow/arrow-bci-benchmark-on-ursa-thinkcentre-m75q/builds/1813)\n   Supported benchmarks:\n   ec2-t3-xlarge-us-east-2: Supported benchmark langs: Python, R. Runs only benchmarks with cloud = True\n   test-mac-arm: Supported benchmark langs: C++, Python, R\n   ursa-i9-9960x: Supported benchmark langs: Python, R, JavaScript\n   ursa-thinkcentre-m75q: Supported benchmark langs: C++, Java\n   \n\n\n",
                    "created": "2022-11-01T22:03:34.527+0000",
                    "updated": "2022-11-01T22:03:34.527+0000",
                    "started": "2022-11-01T22:03:34.527+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "822472",
                    "issueId": "13483536"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 11400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6baa388e[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3c5c79b6[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@d1a8359[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5254da85[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@339e92f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@412ebf2d[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@18f7ec1a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6c039d73[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@203f714d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@145c75b0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@336ccc1d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@43f42706[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 11400,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Nov 01 17:30:01 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-11-01T17:30:01.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17867/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-09-27T20:46:29.000+0000",
        "updated": "2022-11-01T22:03:34.000+0000",
        "timeoriginalestimate": null,
        "description": "Also fix various issues noticed as part of ARROW-17661",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 11400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++][FlightRPC] Expose bulk parameter binding in Flight SQL client",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13483536/comment/17627267",
                    "id": "17627267",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 14266\n[https://github.com/apache/arrow/pull/14266]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-11-01T17:30:01.941+0000",
                    "updated": "2022-11-01T17:30:01.941+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z18wc8:",
        "customfield_12314139": null
    }
}