{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13201501",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13201501",
    "key": "ARROW-3913",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=shiro615",
            "name": "shiro615",
            "key": "shiro615",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34043",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34043",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34043",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34043"
            },
            "displayName": "Yosuke Shiro",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12334626",
                "id": "12334626",
                "name": "C++ - Gandiva"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332430",
                "id": "12332430",
                "name": "GLib"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=shiro615",
            "name": "shiro615",
            "key": "shiro615",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34043",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34043",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34043",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34043"
            },
            "displayName": "Yosuke Shiro",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=shiro615",
            "name": "shiro615",
            "key": "shiro615",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34043",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34043",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34043",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34043"
            },
            "displayName": "Yosuke Shiro",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 18600,
            "total": 18600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 18600,
            "total": 18600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3913/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 36,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13201501/worklog/172120",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 opened a new pull request #3092: ARROW-3913: [Gandiva] [GLib] Add GGandivaLiteralNode\nURL: https://github.com/apache/arrow/pull/3092\n \n \n   Support GGandivaLiteralNode including the following sub classes.\r\n   \r\n   - GGandivaUint8LiteralNode\r\n   - GGandivaUint16LiteralNode\r\n   - GGandivaUint32LiteralNode\r\n   - GGandivaUint64LiteralNode\r\n   - GGandivaInt8LiteralNode\r\n   - GGandivaInt16LiteralNode\r\n   - GGandivaInt32LiteralNode\r\n   - GGandivaInt64LiteralNode\r\n   - GGandivaFloatLiteralNode\r\n   - GGandivaDoubleLiteralNode\r\n   - GGandivaStringLiteralNode\r\n   - GGandivaBinaryLiteralNode\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-05T01:20:06.259+0000",
                    "updated": "2018-12-05T01:20:06.259+0000",
                    "started": "2018-12-05T01:20:06.258+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172120",
                    "issueId": "13201501"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13201501/worklog/172170",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #3092: ARROW-3913: [Gandiva] [GLib] Add GGandivaLiteralNode\nURL: https://github.com/apache/arrow/pull/3092#discussion_r238943864\n \n \n\n ##########\n File path: c_glib/gandiva-glib/node.cpp\n ##########\n @@ -40,6 +40,45 @@ G_BEGIN_DECLS\n  *\n  * #GGandivaFunctionNode is a class for a node in the expression tree, representing a function.\n  *\n+ * #GGandivaLiteralNode is a base class for a node in the expression tree,\n+ * representing a literal.\n+ *\n+ * #GGandivaUint8LiteralNode is a class for a node in the expression tree,\n+ * representing a 8-bit unsigned integer literal.\n+ *\n+ * #GGandivaUint16LiteralNode is a class for a node in the expression tree,\n+ * representing a 16-bit unsigned integer literal.\n+ *\n+ * #GGandivaUint32LiteralNode is a class for a node in the expression tree,\n+ * representing a 32-bit unsigned integer literal.\n+ *\n+ * #GGandivaUint64LiteralNode is a class for a node in the expression tree,\n+ * representing a 64-bit unsigned integer literal.\n+ *\n+ * #GGandivaInt8LiteralNode is a class for a node in the expression tree,\n+ * representing a 8-bit integer literal.\n+ *\n+ * #GGandivaInt16LiteralNode is a class for a node in the expression tree,\n+ * representing a 16-bit integer literal.\n+ *\n+ * #GGandivaInt32LiteralNode is a class for a node in the expression tree,\n+ * representing a 32-bit integer literal.\n+ *\n+ * #GGandivaInt64LiteralNode is a class for a node in the expression tree,\n+ * representing a 64-bit integer literal.\n+ *\n+ * #GGandivaFloatLiteralNode is a class for a node in the expression tree,\n+ * representing a 32-bit floating point literal.\n+ *\n+ * #GGandivaDoubleLiteralNode is a class for a node in the expression tree,\n+ * representing a 64-bit floating point literal.\n+ *\n+ * #GGandivaStringLiteralNode is a class for a node in the expression tree,\n+ * representing a UTF-8 encoded string literal.\n \n Review comment:\n   `a` -> `an`\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-05T06:56:25.605+0000",
                    "updated": "2018-12-05T06:56:25.605+0000",
                    "started": "2018-12-05T06:56:25.604+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172170",
                    "issueId": "13201501"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13201501/worklog/172171",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #3092: ARROW-3913: [Gandiva] [GLib] Add GGandivaLiteralNode\nURL: https://github.com/apache/arrow/pull/3092#discussion_r238947060\n \n \n\n ##########\n File path: c_glib/gandiva-glib/node.cpp\n ##########\n @@ -395,42 +434,1438 @@ ggandiva_function_node_get_parameters(GGandivaFunctionNode *node)\n   return priv->parameters;\n }\n \n-G_END_DECLS\n \n-std::shared_ptr<gandiva::Node>\n-ggandiva_node_get_raw(GGandivaNode *node)\n+G_DEFINE_TYPE(GGandivaLiteralNode,\n+              ggandiva_literal_node,\n+              GGANDIVA_TYPE_NODE)\n+\n+static void\n+ggandiva_literal_node_init(GGandivaLiteralNode *literal_node)\n {\n-  auto priv = GGANDIVA_NODE_GET_PRIVATE(node);\n-  return priv->node;\n }\n \n-GGandivaFieldNode *\n-ggandiva_field_node_new_raw(std::shared_ptr<gandiva::Node> *gandiva_node,\n-                            GArrowField *field)\n+static void\n+ggandiva_literal_node_class_init(GGandivaLiteralNodeClass *klass)\n {\n-  auto field_node = g_object_new(GGANDIVA_TYPE_FIELD_NODE,\n-                                 \"node\", gandiva_node,\n-                                 \"field\", field,\n-                                 NULL);\n-  return GGANDIVA_FIELD_NODE(field_node);\n }\n \n-GGandivaFunctionNode *\n-ggandiva_function_node_new_raw(std::shared_ptr<gandiva::Node> *gandiva_node,\n-                               const gchar *name,\n-                               GList *parameters,\n-                               GArrowDataType *return_type)\n+\n+typedef struct GGandivaBooleanLiteralNodePrivate_ {\n+  gboolean is_true;\n+} GGandivaBooleanLiteralNodePrivate;\n \n Review comment:\n   Can we implement the original raw value getter without property? It seems that property is overdone for this case.\r\n   \r\n   For example:\r\n   \r\n   ```cpp\r\n   template <typename Type>\r\n   return Type\r\n   ggandiva_literal_node_get(GGandivaLiteralNode *node)\r\n   {\r\n     auto gandiva_node = ggandiva_node_get_raw(GGANDIVA_NODE(node));\r\n     return boost::get<Type>(gandiva_node->holder());\r\n   }\r\n   \r\n   return gboolean\r\n   ggandiva_boolean_literal_node_get_value(GGandivaBooleanLiteralNode *node)\r\n   {\r\n     auto value = ggandiva_literal_node_get<bool>(GGANDIVA_LITERAL_NODE(node));\r\n     return static_cast<gboolean>(value);\r\n   }\r\n   \r\n   return guint8\r\n   ggandiva_uint8_literal_node_get_value(GGandivaUInt8LiteralNode *node)\r\n   {\r\n     return ggandiva_literal_node_get<uint8_t>(GGANDIVA_LITERAL_NODE(node));\r\n   }\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-05T06:56:25.642+0000",
                    "updated": "2018-12-05T06:56:25.642+0000",
                    "started": "2018-12-05T06:56:25.642+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172171",
                    "issueId": "13201501"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13201501/worklog/172172",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #3092: ARROW-3913: [Gandiva] [GLib] Add GGandivaLiteralNode\nURL: https://github.com/apache/arrow/pull/3092#discussion_r238944592\n \n \n\n ##########\n File path: c_glib/gandiva-glib/node.cpp\n ##########\n @@ -395,42 +434,1438 @@ ggandiva_function_node_get_parameters(GGandivaFunctionNode *node)\n   return priv->parameters;\n }\n \n-G_END_DECLS\n \n-std::shared_ptr<gandiva::Node>\n-ggandiva_node_get_raw(GGandivaNode *node)\n+G_DEFINE_TYPE(GGandivaLiteralNode,\n+              ggandiva_literal_node,\n+              GGANDIVA_TYPE_NODE)\n+\n+static void\n+ggandiva_literal_node_init(GGandivaLiteralNode *literal_node)\n {\n-  auto priv = GGANDIVA_NODE_GET_PRIVATE(node);\n-  return priv->node;\n }\n \n-GGandivaFieldNode *\n-ggandiva_field_node_new_raw(std::shared_ptr<gandiva::Node> *gandiva_node,\n-                            GArrowField *field)\n+static void\n+ggandiva_literal_node_class_init(GGandivaLiteralNodeClass *klass)\n {\n-  auto field_node = g_object_new(GGANDIVA_TYPE_FIELD_NODE,\n-                                 \"node\", gandiva_node,\n-                                 \"field\", field,\n-                                 NULL);\n-  return GGANDIVA_FIELD_NODE(field_node);\n }\n \n-GGandivaFunctionNode *\n-ggandiva_function_node_new_raw(std::shared_ptr<gandiva::Node> *gandiva_node,\n-                               const gchar *name,\n-                               GList *parameters,\n-                               GArrowDataType *return_type)\n+\n+typedef struct GGandivaBooleanLiteralNodePrivate_ {\n+  gboolean is_true;\n+} GGandivaBooleanLiteralNodePrivate;\n+\n+enum {\n+  PROP_IS_TRUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaBooleanLiteralNode,\n+                           ggandiva_boolean_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_BOOLEAN_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaBooleanLiteralNodePrivate *>(                     \\\n+    ggandiva_boolean_literal_node_get_instance_private(                 \\\n+      GGANDIVA_BOOLEAN_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_boolean_literal_node_set_property(GObject *object,\n+                                           guint prop_id,\n+                                           const GValue *value,\n+                                           GParamSpec *pspec)\n {\n-  auto function_node = g_object_new(GGANDIVA_TYPE_FUNCTION_NODE,\n-                                    \"node\", gandiva_node,\n-                                    \"name\", name,\n-                                    \"return-type\", return_type,\n-                                    NULL);\n-  auto priv = GGANDIVA_FUNCTION_NODE_GET_PRIVATE(function_node);\n-  for (auto node = parameters; node; node = g_list_next(node)) {\n-    auto parameter = GGANDIVA_NODE(node->data);\n-    priv->parameters = g_list_prepend(priv->parameters, g_object_ref(parameter));\n+  auto priv = GGANDIVA_BOOLEAN_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_IS_TRUE:\n+    priv->is_true = g_value_get_boolean(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n   }\n-  priv->parameters = g_list_reverse(priv->parameters);\n-  return GGANDIVA_FUNCTION_NODE(function_node);\n+}\n+\n+static void\n+ggandiva_boolean_literal_node_get_property(GObject *object,\n+                                           guint prop_id,\n+                                           GValue *value,\n+                                           GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_BOOLEAN_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_IS_TRUE:\n+    g_value_set_boolean(value, priv->is_true);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_boolean_literal_node_init(GGandivaBooleanLiteralNode *boolean_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_boolean_literal_node_class_init(GGandivaBooleanLiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_boolean_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_boolean_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_boolean(\"is-true\",\n \n Review comment:\n   `\"value\"` is better.\r\n   If we use `value` as property name, users can always use `value` property name to get value from all literal nodes.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-05T06:56:25.647+0000",
                    "updated": "2018-12-05T06:56:25.647+0000",
                    "started": "2018-12-05T06:56:25.646+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172172",
                    "issueId": "13201501"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13201501/worklog/172173",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #3092: ARROW-3913: [Gandiva] [GLib] Add GGandivaLiteralNode\nURL: https://github.com/apache/arrow/pull/3092#discussion_r238947738\n \n \n\n ##########\n File path: c_glib/gandiva-glib/node.cpp\n ##########\n @@ -395,42 +434,1438 @@ ggandiva_function_node_get_parameters(GGandivaFunctionNode *node)\n   return priv->parameters;\n }\n \n-G_END_DECLS\n \n-std::shared_ptr<gandiva::Node>\n-ggandiva_node_get_raw(GGandivaNode *node)\n+G_DEFINE_TYPE(GGandivaLiteralNode,\n+              ggandiva_literal_node,\n+              GGANDIVA_TYPE_NODE)\n+\n+static void\n+ggandiva_literal_node_init(GGandivaLiteralNode *literal_node)\n {\n-  auto priv = GGANDIVA_NODE_GET_PRIVATE(node);\n-  return priv->node;\n }\n \n-GGandivaFieldNode *\n-ggandiva_field_node_new_raw(std::shared_ptr<gandiva::Node> *gandiva_node,\n-                            GArrowField *field)\n+static void\n+ggandiva_literal_node_class_init(GGandivaLiteralNodeClass *klass)\n {\n-  auto field_node = g_object_new(GGANDIVA_TYPE_FIELD_NODE,\n-                                 \"node\", gandiva_node,\n-                                 \"field\", field,\n-                                 NULL);\n-  return GGANDIVA_FIELD_NODE(field_node);\n }\n \n-GGandivaFunctionNode *\n-ggandiva_function_node_new_raw(std::shared_ptr<gandiva::Node> *gandiva_node,\n-                               const gchar *name,\n-                               GList *parameters,\n-                               GArrowDataType *return_type)\n+\n+typedef struct GGandivaBooleanLiteralNodePrivate_ {\n+  gboolean is_true;\n+} GGandivaBooleanLiteralNodePrivate;\n+\n+enum {\n+  PROP_IS_TRUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaBooleanLiteralNode,\n+                           ggandiva_boolean_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_BOOLEAN_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaBooleanLiteralNodePrivate *>(                     \\\n+    ggandiva_boolean_literal_node_get_instance_private(                 \\\n+      GGANDIVA_BOOLEAN_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_boolean_literal_node_set_property(GObject *object,\n+                                           guint prop_id,\n+                                           const GValue *value,\n+                                           GParamSpec *pspec)\n {\n-  auto function_node = g_object_new(GGANDIVA_TYPE_FUNCTION_NODE,\n-                                    \"node\", gandiva_node,\n-                                    \"name\", name,\n-                                    \"return-type\", return_type,\n-                                    NULL);\n-  auto priv = GGANDIVA_FUNCTION_NODE_GET_PRIVATE(function_node);\n-  for (auto node = parameters; node; node = g_list_next(node)) {\n-    auto parameter = GGANDIVA_NODE(node->data);\n-    priv->parameters = g_list_prepend(priv->parameters, g_object_ref(parameter));\n+  auto priv = GGANDIVA_BOOLEAN_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_IS_TRUE:\n+    priv->is_true = g_value_get_boolean(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n   }\n-  priv->parameters = g_list_reverse(priv->parameters);\n-  return GGANDIVA_FUNCTION_NODE(function_node);\n+}\n+\n+static void\n+ggandiva_boolean_literal_node_get_property(GObject *object,\n+                                           guint prop_id,\n+                                           GValue *value,\n+                                           GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_BOOLEAN_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_IS_TRUE:\n+    g_value_set_boolean(value, priv->is_true);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_boolean_literal_node_init(GGandivaBooleanLiteralNode *boolean_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_boolean_literal_node_class_init(GGandivaBooleanLiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_boolean_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_boolean_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_boolean(\"is-true\",\n+                              \"Is true\",\n+                              \"The value of the boolean literal\",\n+                              FALSE,\n+                              static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_IS_TRUE, spec);\n+}\n+\n+/**\n+ * ggandiva_boolean_literal_node_new:\n+ * @is_true: The value of the boolean literal.\n+ *\n+ * Returns: A newly created #GGandivaBooleanLiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaBooleanLiteralNode *\n+ggandiva_boolean_literal_node_new(gboolean is_true)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(is_true);\n+  return ggandiva_boolean_literal_node_new_raw(&gandiva_node, is_true);\n+}\n+\n+\n+typedef struct GGandivaUint8LiteralNodePrivate_ {\n+  guint8 value;\n+} GGandivaUint8LiteralNodePrivate;\n+\n+enum {\n+  PROP_UINT8_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaUint8LiteralNode,\n+                           ggandiva_uint8_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_UINT8_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaUint8LiteralNodePrivate *>(                     \\\n+    ggandiva_uint8_literal_node_get_instance_private(                 \\\n+      GGANDIVA_UINT8_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_uint8_literal_node_set_property(GObject *object,\n+                                         guint prop_id,\n+                                         const GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_UINT8_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_UINT8_VALUE:\n+    priv->value = g_value_get_uint(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_uint8_literal_node_get_property(GObject *object,\n+                                         guint prop_id,\n+                                         GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_UINT8_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_UINT8_VALUE:\n+    g_value_set_uint(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_uint8_literal_node_init(GGandivaUint8LiteralNode *uint8_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_uint8_literal_node_class_init(GGandivaUint8LiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_uint8_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_uint8_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_uint(\"value\",\n+                           \"Value\",\n+                           \"The value of the uint8 literal\",\n+                           0,\n+                           G_MAXUINT,\n+                           0,\n+                           static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                    G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_UINT8_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_uint8_literal_node_new:\n+ * @value: The value of the uint8 literal.\n+ *\n+ * Returns: A newly created #GGandivaUint8LiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaUint8LiteralNode *\n+ggandiva_uint8_literal_node_new(guint8 value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_uint8_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaUint16LiteralNodePrivate_ {\n+  guint16 value;\n+} GGandivaUint16LiteralNodePrivate;\n+\n+enum {\n+  PROP_UINT16_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaUint16LiteralNode,\n+                           ggandiva_uint16_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_UINT16_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaUint16LiteralNodePrivate *>(                     \\\n+    ggandiva_uint16_literal_node_get_instance_private(                 \\\n+      GGANDIVA_UINT16_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_uint16_literal_node_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_UINT16_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_UINT16_VALUE:\n+    priv->value = g_value_get_uint(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_uint16_literal_node_get_property(GObject *object,\n+                                          guint prop_id,\n+                                          GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_UINT16_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_UINT16_VALUE:\n+    g_value_set_uint(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_uint16_literal_node_init(GGandivaUint16LiteralNode *uint16_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_uint16_literal_node_class_init(GGandivaUint16LiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_uint16_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_uint16_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_uint(\"value\",\n+                           \"Value\",\n+                           \"The value of the uint16 literal\",\n+                           0,\n+                           G_MAXUINT16,\n+                           0,\n+                           static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                    G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_UINT16_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_uint16_literal_node_new:\n+ * @value: The value of the uint16 literal.\n+ *\n+ * Returns: A newly created #GGandivaUint16LiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaUint16LiteralNode *\n+ggandiva_uint16_literal_node_new(guint16 value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_uint16_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaUint32LiteralNodePrivate_ {\n+  guint32 value;\n+} GGandivaUint32LiteralNodePrivate;\n+\n+enum {\n+  PROP_UINT32_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaUint32LiteralNode,\n+                           ggandiva_uint32_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_UINT32_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaUint32LiteralNodePrivate *>(                     \\\n+    ggandiva_uint32_literal_node_get_instance_private(                 \\\n+      GGANDIVA_UINT32_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_uint32_literal_node_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_UINT32_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_UINT32_VALUE:\n+    priv->value = g_value_get_uint(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_uint32_literal_node_get_property(GObject *object,\n+                                          guint prop_id,\n+                                          GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_UINT32_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_UINT32_VALUE:\n+    g_value_set_uint(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_uint32_literal_node_init(GGandivaUint32LiteralNode *uint32_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_uint32_literal_node_class_init(GGandivaUint32LiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_uint32_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_uint32_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_uint(\"value\",\n+                           \"Value\",\n+                           \"The value of the uint32 literal\",\n+                           0,\n+                           G_MAXUINT32,\n+                           0,\n+                           static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                    G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_UINT32_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_uint32_literal_node_new:\n+ * @value: The value of the uint32 literal.\n+ *\n+ * Returns: A newly created #GGandivaUint32LiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaUint32LiteralNode *\n+ggandiva_uint32_literal_node_new(guint32 value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_uint32_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaUint64LiteralNodePrivate_ {\n+  guint64 value;\n+} GGandivaUint64LiteralNodePrivate;\n+\n+enum {\n+  PROP_UINT64_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaUint64LiteralNode,\n+                           ggandiva_uint64_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_UINT64_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaUint64LiteralNodePrivate *>(                     \\\n+    ggandiva_uint64_literal_node_get_instance_private(                 \\\n+      GGANDIVA_UINT64_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_uint64_literal_node_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_UINT64_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_UINT64_VALUE:\n+    priv->value = g_value_get_uint64(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_uint64_literal_node_get_property(GObject *object,\n+                                          guint prop_id,\n+                                          GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_UINT64_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_UINT64_VALUE:\n+    g_value_set_uint64(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_uint64_literal_node_init(GGandivaUint64LiteralNode *uint64_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_uint64_literal_node_class_init(GGandivaUint64LiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_uint64_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_uint64_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_uint64(\"value\",\n+                             \"Value\",\n+                             \"The value of the uint64 literal\",\n+                             0,\n+                             G_MAXUINT64,\n+                             0,\n+                             static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                      G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_UINT64_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_uint64_literal_node_new:\n+ * @value: The value of the uint64 literal.\n+ *\n+ * Returns: A newly created #GGandivaUint64LiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaUint64LiteralNode *\n+ggandiva_uint64_literal_node_new(guint64 value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_uint64_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaInt8LiteralNodePrivate_ {\n+  gint8 value;\n+} GGandivaInt8LiteralNodePrivate;\n+\n+enum {\n+  PROP_INT8_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaInt8LiteralNode,\n+                           ggandiva_int8_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_INT8_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaInt8LiteralNodePrivate *>(                     \\\n+    ggandiva_int8_literal_node_get_instance_private(                 \\\n+      GGANDIVA_INT8_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_int8_literal_node_set_property(GObject *object,\n+                                        guint prop_id,\n+                                        const GValue *value,\n+                                        GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_INT8_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_INT8_VALUE:\n+    priv->value = g_value_get_int(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_int8_literal_node_get_property(GObject *object,\n+                                        guint prop_id,\n+                                        GValue *value,\n+                                        GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_INT8_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_INT8_VALUE:\n+    g_value_set_int(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_int8_literal_node_init(GGandivaInt8LiteralNode *int8_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_int8_literal_node_class_init(GGandivaInt8LiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_int8_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_int8_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_int(\"value\",\n+                          \"Value\",\n+                          \"The value of the int8 literal\",\n+                          G_MININT,\n+                          G_MAXINT,\n+                          0,\n+                          static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                   G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_INT8_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_int8_literal_node_new:\n+ * @value: The value of the int8 literal.\n+ *\n+ * Returns: A newly created #GGandivaInt8LiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaInt8LiteralNode *\n+ggandiva_int8_literal_node_new(gint8 value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_int8_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaInt16LiteralNodePrivate_ {\n+  gint16 value;\n+} GGandivaInt16LiteralNodePrivate;\n+\n+enum {\n+  PROP_INT16_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaInt16LiteralNode,\n+                           ggandiva_int16_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_INT16_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaInt16LiteralNodePrivate *>(                     \\\n+    ggandiva_int16_literal_node_get_instance_private(                 \\\n+      GGANDIVA_INT16_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_int16_literal_node_set_property(GObject *object,\n+                                         guint prop_id,\n+                                         const GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_INT16_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_INT16_VALUE:\n+    priv->value = g_value_get_int(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_int16_literal_node_get_property(GObject *object,\n+                                         guint prop_id,\n+                                         GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_INT16_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_INT16_VALUE:\n+    g_value_set_int(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_int16_literal_node_init(GGandivaInt16LiteralNode *int16_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_int16_literal_node_class_init(GGandivaInt16LiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_int16_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_int16_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_int(\"value\",\n+                          \"Value\",\n+                          \"The value of the int16 literal\",\n+                          G_MININT16,\n+                          G_MAXINT16,\n+                          0,\n+                          static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                   G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_INT16_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_int16_literal_node_new:\n+ * @value: The value of the int16 literal.\n+ *\n+ * Returns: A newly created #GGandivaInt16LiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaInt16LiteralNode *\n+ggandiva_int16_literal_node_new(gint16 value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_int16_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaInt32LiteralNodePrivate_ {\n+  gint32 value;\n+} GGandivaInt32LiteralNodePrivate;\n+\n+enum {\n+  PROP_INT32_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaInt32LiteralNode,\n+                           ggandiva_int32_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_INT32_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaInt32LiteralNodePrivate *>(                     \\\n+    ggandiva_int32_literal_node_get_instance_private(                 \\\n+      GGANDIVA_INT32_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_int32_literal_node_set_property(GObject *object,\n+                                         guint prop_id,\n+                                         const GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_INT32_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_INT32_VALUE:\n+    priv->value = g_value_get_int(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_int32_literal_node_get_property(GObject *object,\n+                                         guint prop_id,\n+                                         GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_INT32_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_INT32_VALUE:\n+    g_value_set_int(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_int32_literal_node_init(GGandivaInt32LiteralNode *int32_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_int32_literal_node_class_init(GGandivaInt32LiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_int32_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_int32_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_int(\"value\",\n+                          \"Value\",\n+                          \"The value of the int32 literal\",\n+                          G_MININT32,\n+                          G_MAXINT32,\n+                          0,\n+                          static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                   G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_INT32_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_int32_literal_node_new:\n+ * @value: The value of the int32 literal.\n+ *\n+ * Returns: A newly created #GGandivaInt32LiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaInt32LiteralNode *\n+ggandiva_int32_literal_node_new(gint32 value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_int32_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaInt64LiteralNodePrivate_ {\n+  gint64 value;\n+} GGandivaInt64LiteralNodePrivate;\n+\n+enum {\n+  PROP_INT64_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaInt64LiteralNode,\n+                           ggandiva_int64_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_INT64_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaInt64LiteralNodePrivate *>(                     \\\n+    ggandiva_int64_literal_node_get_instance_private(                 \\\n+      GGANDIVA_INT64_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_int64_literal_node_set_property(GObject *object,\n+                                         guint prop_id,\n+                                         const GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_INT64_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_INT64_VALUE:\n+    priv->value = g_value_get_int64(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_int64_literal_node_get_property(GObject *object,\n+                                         guint prop_id,\n+                                         GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_INT64_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_INT64_VALUE:\n+    g_value_set_int64(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_int64_literal_node_init(GGandivaInt64LiteralNode *int64_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_int64_literal_node_class_init(GGandivaInt64LiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_int64_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_int64_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_int64(\"value\",\n+                            \"Value\",\n+                            \"The value of the int64 literal\",\n+                            G_MININT64,\n+                            G_MAXINT64,\n+                            0,\n+                            static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                     G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_INT64_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_int64_literal_node_new:\n+ * @value: The value of the int64 literal.\n+ *\n+ * Returns: A newly created #GGandivaInt64LiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaInt64LiteralNode *\n+ggandiva_int64_literal_node_new(gint64 value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_int64_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaFloatLiteralNodePrivate_ {\n+  gfloat value;\n+} GGandivaFloatLiteralNodePrivate;\n+\n+enum {\n+  PROP_FLOAT_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaFloatLiteralNode,\n+                           ggandiva_float_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_FLOAT_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaFloatLiteralNodePrivate *>(                     \\\n+    ggandiva_float_literal_node_get_instance_private(                 \\\n+      GGANDIVA_FLOAT_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_float_literal_node_set_property(GObject *object,\n+                                         guint prop_id,\n+                                         const GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_FLOAT_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_FLOAT_VALUE:\n+    priv->value = g_value_get_float(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_float_literal_node_get_property(GObject *object,\n+                                         guint prop_id,\n+                                         GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_FLOAT_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_FLOAT_VALUE:\n+    g_value_set_float(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_float_literal_node_init(GGandivaFloatLiteralNode *float_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_float_literal_node_class_init(GGandivaFloatLiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_float_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_float_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_float(\"value\",\n+                            \"Value\",\n+                            \"The value of the float literal\",\n+                            -G_MAXFLOAT,\n+                            G_MAXFLOAT,\n+                            0.0,\n+                            static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                     G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_FLOAT_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_float_literal_node_new:\n+ * @value: The value of the float literal.\n+ *\n+ * Returns: A newly created #GGandivaFloatLiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaFloatLiteralNode *\n+ggandiva_float_literal_node_new(gfloat value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_float_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaDoubleLiteralNodePrivate_ {\n+  gdouble value;\n+} GGandivaDoubleLiteralNodePrivate;\n+\n+enum {\n+  PROP_DOUBLE_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaDoubleLiteralNode,\n+                           ggandiva_double_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_DOUBLE_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaDoubleLiteralNodePrivate *>(                     \\\n+    ggandiva_double_literal_node_get_instance_private(                 \\\n+      GGANDIVA_DOUBLE_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_double_literal_node_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_DOUBLE_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_DOUBLE_VALUE:\n+    priv->value = g_value_get_double(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_double_literal_node_get_property(GObject *object,\n+                                          guint prop_id,\n+                                          GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_DOUBLE_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_DOUBLE_VALUE:\n+    g_value_set_double(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_double_literal_node_init(GGandivaDoubleLiteralNode *double_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_double_literal_node_class_init(GGandivaDoubleLiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_double_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_double_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_double(\"value\",\n+                             \"Value\",\n+                             \"The value of the double literal\",\n+                             -G_MAXDOUBLE,\n+                             G_MAXDOUBLE,\n+                             0.0,\n+                             static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                      G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_DOUBLE_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_double_literal_node_new:\n+ * @value: The value of the double literal.\n+ *\n+ * Returns: A newly created #GGandivaDoubleLiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaDoubleLiteralNode *\n+ggandiva_double_literal_node_new(gdouble value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_double_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaStringLiteralNodePrivate_ {\n+  gchar *value;\n+} GGandivaStringLiteralNodePrivate;\n+\n+enum {\n+  PROP_STRING_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaStringLiteralNode,\n+                           ggandiva_string_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_STRING_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaStringLiteralNodePrivate *>(                     \\\n+    ggandiva_string_literal_node_get_instance_private(                 \\\n+      GGANDIVA_STRING_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_string_literal_node_finalize(GObject *object)\n+{\n+  auto priv = GGANDIVA_STRING_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  g_free(priv->value);\n+\n+  G_OBJECT_CLASS(ggandiva_string_literal_node_parent_class)->finalize(object);\n+}\n+\n+static void\n+ggandiva_string_literal_node_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_STRING_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_STRING_VALUE:\n+    priv->value = g_value_dup_string(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_string_literal_node_get_property(GObject *object,\n+                                          guint prop_id,\n+                                          GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_STRING_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_STRING_VALUE:\n+    g_value_set_string(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_string_literal_node_init(GGandivaStringLiteralNode *string_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_string_literal_node_class_init(GGandivaStringLiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = ggandiva_string_literal_node_finalize;\n+  gobject_class->set_property = ggandiva_string_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_string_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_string(\"value\",\n+                             \"Value\",\n+                             \"The value of the string literal\",\n+                             nullptr,\n+                             static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                      G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_STRING_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_string_literal_node_new:\n+ * @value: The value of the string literal.\n+ *\n+ * Returns: A newly created #GGandivaStringLiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaStringLiteralNode *\n+ggandiva_string_literal_node_new(const gchar *value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_string_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaBinaryLiteralNodePrivate_ {\n+  gchar *value;\n+} GGandivaBinaryLiteralNodePrivate;\n+\n+enum {\n+  PROP_BINARY_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaBinaryLiteralNode,\n+                           ggandiva_binary_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_BINARY_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaBinaryLiteralNodePrivate *>(                     \\\n+    ggandiva_binary_literal_node_get_instance_private(                 \\\n+      GGANDIVA_BINARY_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_binary_literal_node_finalize(GObject *object)\n+{\n+  auto priv = GGANDIVA_BINARY_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  g_free(priv->value);\n+\n+  G_OBJECT_CLASS(ggandiva_binary_literal_node_parent_class)->finalize(object);\n+}\n+\n+static void\n+ggandiva_binary_literal_node_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_BINARY_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_BINARY_VALUE:\n+    priv->value = g_value_dup_string(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_binary_literal_node_get_property(GObject *object,\n+                                          guint prop_id,\n+                                          GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_BINARY_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_BINARY_VALUE:\n+    g_value_set_string(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_binary_literal_node_init(GGandivaBinaryLiteralNode *binary_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_binary_literal_node_class_init(GGandivaBinaryLiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = ggandiva_binary_literal_node_finalize;\n+  gobject_class->set_property = ggandiva_binary_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_binary_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_string(\"value\",\n+                             \"Value\",\n+                             \"The value of the binary literal\",\n+                             nullptr,\n+                             static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                      G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_BINARY_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_binary_literal_node_new:\n+ * @value: The value of the binary literal.\n+ *\n+ * Returns: A newly created #GGandivaBinaryLiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaBinaryLiteralNode *\n+ggandiva_binary_literal_node_new(const gchar *value)\n \n Review comment:\n   We need to use `const guint8 *value, gsize size)` for binary data.\r\n   Because binary data may contain '`\\0`'.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-05T06:56:25.817+0000",
                    "updated": "2018-12-05T06:56:25.817+0000",
                    "started": "2018-12-05T06:56:25.817+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172173",
                    "issueId": "13201501"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13201501/worklog/172174",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #3092: ARROW-3913: [Gandiva] [GLib] Add GGandivaLiteralNode\nURL: https://github.com/apache/arrow/pull/3092#discussion_r238943590\n \n \n\n ##########\n File path: c_glib/gandiva-glib/node.cpp\n ##########\n @@ -40,6 +40,45 @@ G_BEGIN_DECLS\n  *\n  * #GGandivaFunctionNode is a class for a node in the expression tree, representing a function.\n  *\n+ * #GGandivaLiteralNode is a base class for a node in the expression tree,\n+ * representing a literal.\n+ *\n+ * #GGandivaUint8LiteralNode is a class for a node in the expression tree,\n \n Review comment:\n   We use `UInt` instead of `Uint`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-05T06:56:25.827+0000",
                    "updated": "2018-12-05T06:56:25.827+0000",
                    "started": "2018-12-05T06:56:25.826+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172174",
                    "issueId": "13201501"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13201501/worklog/172609",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on a change in pull request #3092: ARROW-3913: [Gandiva] [GLib] Add GGandivaLiteralNode\nURL: https://github.com/apache/arrow/pull/3092#discussion_r239388614\n \n \n\n ##########\n File path: c_glib/gandiva-glib/node.cpp\n ##########\n @@ -40,6 +40,45 @@ G_BEGIN_DECLS\n  *\n  * #GGandivaFunctionNode is a class for a node in the expression tree, representing a function.\n  *\n+ * #GGandivaLiteralNode is a base class for a node in the expression tree,\n+ * representing a literal.\n+ *\n+ * #GGandivaUint8LiteralNode is a class for a node in the expression tree,\n \n Review comment:\n   I'll rename it.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-06T09:53:31.054+0000",
                    "updated": "2018-12-06T09:53:31.054+0000",
                    "started": "2018-12-06T09:53:31.052+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172609",
                    "issueId": "13201501"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13201501/worklog/172610",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on a change in pull request #3092: ARROW-3913: [Gandiva] [GLib] Add GGandivaLiteralNode\nURL: https://github.com/apache/arrow/pull/3092#discussion_r239388653\n \n \n\n ##########\n File path: c_glib/gandiva-glib/node.cpp\n ##########\n @@ -395,42 +434,1438 @@ ggandiva_function_node_get_parameters(GGandivaFunctionNode *node)\n   return priv->parameters;\n }\n \n-G_END_DECLS\n \n-std::shared_ptr<gandiva::Node>\n-ggandiva_node_get_raw(GGandivaNode *node)\n+G_DEFINE_TYPE(GGandivaLiteralNode,\n+              ggandiva_literal_node,\n+              GGANDIVA_TYPE_NODE)\n+\n+static void\n+ggandiva_literal_node_init(GGandivaLiteralNode *literal_node)\n {\n-  auto priv = GGANDIVA_NODE_GET_PRIVATE(node);\n-  return priv->node;\n }\n \n-GGandivaFieldNode *\n-ggandiva_field_node_new_raw(std::shared_ptr<gandiva::Node> *gandiva_node,\n-                            GArrowField *field)\n+static void\n+ggandiva_literal_node_class_init(GGandivaLiteralNodeClass *klass)\n {\n-  auto field_node = g_object_new(GGANDIVA_TYPE_FIELD_NODE,\n-                                 \"node\", gandiva_node,\n-                                 \"field\", field,\n-                                 NULL);\n-  return GGANDIVA_FIELD_NODE(field_node);\n }\n \n-GGandivaFunctionNode *\n-ggandiva_function_node_new_raw(std::shared_ptr<gandiva::Node> *gandiva_node,\n-                               const gchar *name,\n-                               GList *parameters,\n-                               GArrowDataType *return_type)\n+\n+typedef struct GGandivaBooleanLiteralNodePrivate_ {\n+  gboolean is_true;\n+} GGandivaBooleanLiteralNodePrivate;\n+\n+enum {\n+  PROP_IS_TRUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaBooleanLiteralNode,\n+                           ggandiva_boolean_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_BOOLEAN_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaBooleanLiteralNodePrivate *>(                     \\\n+    ggandiva_boolean_literal_node_get_instance_private(                 \\\n+      GGANDIVA_BOOLEAN_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_boolean_literal_node_set_property(GObject *object,\n+                                           guint prop_id,\n+                                           const GValue *value,\n+                                           GParamSpec *pspec)\n {\n-  auto function_node = g_object_new(GGANDIVA_TYPE_FUNCTION_NODE,\n-                                    \"node\", gandiva_node,\n-                                    \"name\", name,\n-                                    \"return-type\", return_type,\n-                                    NULL);\n-  auto priv = GGANDIVA_FUNCTION_NODE_GET_PRIVATE(function_node);\n-  for (auto node = parameters; node; node = g_list_next(node)) {\n-    auto parameter = GGANDIVA_NODE(node->data);\n-    priv->parameters = g_list_prepend(priv->parameters, g_object_ref(parameter));\n+  auto priv = GGANDIVA_BOOLEAN_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_IS_TRUE:\n+    priv->is_true = g_value_get_boolean(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n   }\n-  priv->parameters = g_list_reverse(priv->parameters);\n-  return GGANDIVA_FUNCTION_NODE(function_node);\n+}\n+\n+static void\n+ggandiva_boolean_literal_node_get_property(GObject *object,\n+                                           guint prop_id,\n+                                           GValue *value,\n+                                           GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_BOOLEAN_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_IS_TRUE:\n+    g_value_set_boolean(value, priv->is_true);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_boolean_literal_node_init(GGandivaBooleanLiteralNode *boolean_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_boolean_literal_node_class_init(GGandivaBooleanLiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_boolean_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_boolean_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_boolean(\"is-true\",\n \n Review comment:\n   OK. I'll change it.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-06T09:53:36.184+0000",
                    "updated": "2018-12-06T09:53:36.184+0000",
                    "started": "2018-12-06T09:53:36.183+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172610",
                    "issueId": "13201501"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13201501/worklog/172611",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on a change in pull request #3092: ARROW-3913: [Gandiva] [GLib] Add GGandivaLiteralNode\nURL: https://github.com/apache/arrow/pull/3092#discussion_r239388864\n \n \n\n ##########\n File path: c_glib/gandiva-glib/node.cpp\n ##########\n @@ -395,42 +434,1438 @@ ggandiva_function_node_get_parameters(GGandivaFunctionNode *node)\n   return priv->parameters;\n }\n \n-G_END_DECLS\n \n-std::shared_ptr<gandiva::Node>\n-ggandiva_node_get_raw(GGandivaNode *node)\n+G_DEFINE_TYPE(GGandivaLiteralNode,\n+              ggandiva_literal_node,\n+              GGANDIVA_TYPE_NODE)\n+\n+static void\n+ggandiva_literal_node_init(GGandivaLiteralNode *literal_node)\n {\n-  auto priv = GGANDIVA_NODE_GET_PRIVATE(node);\n-  return priv->node;\n }\n \n-GGandivaFieldNode *\n-ggandiva_field_node_new_raw(std::shared_ptr<gandiva::Node> *gandiva_node,\n-                            GArrowField *field)\n+static void\n+ggandiva_literal_node_class_init(GGandivaLiteralNodeClass *klass)\n {\n-  auto field_node = g_object_new(GGANDIVA_TYPE_FIELD_NODE,\n-                                 \"node\", gandiva_node,\n-                                 \"field\", field,\n-                                 NULL);\n-  return GGANDIVA_FIELD_NODE(field_node);\n }\n \n-GGandivaFunctionNode *\n-ggandiva_function_node_new_raw(std::shared_ptr<gandiva::Node> *gandiva_node,\n-                               const gchar *name,\n-                               GList *parameters,\n-                               GArrowDataType *return_type)\n+\n+typedef struct GGandivaBooleanLiteralNodePrivate_ {\n+  gboolean is_true;\n+} GGandivaBooleanLiteralNodePrivate;\n \n Review comment:\n   It couldn\u2019t access `holder()`.\r\n   \r\n   ```cpp\r\n   ../gandiva-glib/node.cpp:36:39: error: member access into incomplete type 'std::__1::shared_ptr<gandiva::Node>::element_type' (aka 'gandiva::Node')\r\n     return boost::get<Type>(gandiva_node->holder());\r\n   ```\r\n   \r\n   I\u2019ve tried the following example to access by `LiteralNode`.\r\n   \r\n   ```cpp\r\n   template <typename Type>\r\n   Type\r\n   ggandiva_literal_node_get(GGandivaLiteralNode *node)\r\n   {\r\n     auto gandiva_literal_node = \r\n       dynamic_cast<gandiva::LiteralNode*>(ggandiva_node_get_raw(GGANDIVA_NODE(node)).get());\r\n     return boost::get<Type>(gandiva_literal_node->holder());\r\n   }\r\n   ```\r\n   \r\n   But `LiteralNode` doesn't seem to be published.\r\n   \r\n   ```cpp\r\n   ../gandiva-glib/node.cpp:36:27: error: no type named 'LiteralNode' in namespace 'gandiva'\r\n       dynamic_cast<gandiva::LiteralNode*>(ggandiva_node_get_raw(GGANDIVA_NODE(node)).get());\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-06T09:54:06.014+0000",
                    "updated": "2018-12-06T09:54:06.014+0000",
                    "started": "2018-12-06T09:54:06.013+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172611",
                    "issueId": "13201501"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13201501/worklog/172612",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on a change in pull request #3092: ARROW-3913: [Gandiva] [GLib] Add GGandivaLiteralNode\nURL: https://github.com/apache/arrow/pull/3092#discussion_r239389091\n \n \n\n ##########\n File path: c_glib/gandiva-glib/node.cpp\n ##########\n @@ -395,42 +434,1438 @@ ggandiva_function_node_get_parameters(GGandivaFunctionNode *node)\n   return priv->parameters;\n }\n \n-G_END_DECLS\n \n-std::shared_ptr<gandiva::Node>\n-ggandiva_node_get_raw(GGandivaNode *node)\n+G_DEFINE_TYPE(GGandivaLiteralNode,\n+              ggandiva_literal_node,\n+              GGANDIVA_TYPE_NODE)\n+\n+static void\n+ggandiva_literal_node_init(GGandivaLiteralNode *literal_node)\n {\n-  auto priv = GGANDIVA_NODE_GET_PRIVATE(node);\n-  return priv->node;\n }\n \n-GGandivaFieldNode *\n-ggandiva_field_node_new_raw(std::shared_ptr<gandiva::Node> *gandiva_node,\n-                            GArrowField *field)\n+static void\n+ggandiva_literal_node_class_init(GGandivaLiteralNodeClass *klass)\n {\n-  auto field_node = g_object_new(GGANDIVA_TYPE_FIELD_NODE,\n-                                 \"node\", gandiva_node,\n-                                 \"field\", field,\n-                                 NULL);\n-  return GGANDIVA_FIELD_NODE(field_node);\n }\n \n-GGandivaFunctionNode *\n-ggandiva_function_node_new_raw(std::shared_ptr<gandiva::Node> *gandiva_node,\n-                               const gchar *name,\n-                               GList *parameters,\n-                               GArrowDataType *return_type)\n+\n+typedef struct GGandivaBooleanLiteralNodePrivate_ {\n+  gboolean is_true;\n+} GGandivaBooleanLiteralNodePrivate;\n+\n+enum {\n+  PROP_IS_TRUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaBooleanLiteralNode,\n+                           ggandiva_boolean_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_BOOLEAN_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaBooleanLiteralNodePrivate *>(                     \\\n+    ggandiva_boolean_literal_node_get_instance_private(                 \\\n+      GGANDIVA_BOOLEAN_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_boolean_literal_node_set_property(GObject *object,\n+                                           guint prop_id,\n+                                           const GValue *value,\n+                                           GParamSpec *pspec)\n {\n-  auto function_node = g_object_new(GGANDIVA_TYPE_FUNCTION_NODE,\n-                                    \"node\", gandiva_node,\n-                                    \"name\", name,\n-                                    \"return-type\", return_type,\n-                                    NULL);\n-  auto priv = GGANDIVA_FUNCTION_NODE_GET_PRIVATE(function_node);\n-  for (auto node = parameters; node; node = g_list_next(node)) {\n-    auto parameter = GGANDIVA_NODE(node->data);\n-    priv->parameters = g_list_prepend(priv->parameters, g_object_ref(parameter));\n+  auto priv = GGANDIVA_BOOLEAN_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_IS_TRUE:\n+    priv->is_true = g_value_get_boolean(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n   }\n-  priv->parameters = g_list_reverse(priv->parameters);\n-  return GGANDIVA_FUNCTION_NODE(function_node);\n+}\n+\n+static void\n+ggandiva_boolean_literal_node_get_property(GObject *object,\n+                                           guint prop_id,\n+                                           GValue *value,\n+                                           GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_BOOLEAN_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_IS_TRUE:\n+    g_value_set_boolean(value, priv->is_true);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_boolean_literal_node_init(GGandivaBooleanLiteralNode *boolean_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_boolean_literal_node_class_init(GGandivaBooleanLiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_boolean_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_boolean_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_boolean(\"is-true\",\n+                              \"Is true\",\n+                              \"The value of the boolean literal\",\n+                              FALSE,\n+                              static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_IS_TRUE, spec);\n+}\n+\n+/**\n+ * ggandiva_boolean_literal_node_new:\n+ * @is_true: The value of the boolean literal.\n+ *\n+ * Returns: A newly created #GGandivaBooleanLiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaBooleanLiteralNode *\n+ggandiva_boolean_literal_node_new(gboolean is_true)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(is_true);\n+  return ggandiva_boolean_literal_node_new_raw(&gandiva_node, is_true);\n+}\n+\n+\n+typedef struct GGandivaUint8LiteralNodePrivate_ {\n+  guint8 value;\n+} GGandivaUint8LiteralNodePrivate;\n+\n+enum {\n+  PROP_UINT8_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaUint8LiteralNode,\n+                           ggandiva_uint8_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_UINT8_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaUint8LiteralNodePrivate *>(                     \\\n+    ggandiva_uint8_literal_node_get_instance_private(                 \\\n+      GGANDIVA_UINT8_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_uint8_literal_node_set_property(GObject *object,\n+                                         guint prop_id,\n+                                         const GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_UINT8_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_UINT8_VALUE:\n+    priv->value = g_value_get_uint(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_uint8_literal_node_get_property(GObject *object,\n+                                         guint prop_id,\n+                                         GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_UINT8_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_UINT8_VALUE:\n+    g_value_set_uint(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_uint8_literal_node_init(GGandivaUint8LiteralNode *uint8_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_uint8_literal_node_class_init(GGandivaUint8LiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_uint8_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_uint8_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_uint(\"value\",\n+                           \"Value\",\n+                           \"The value of the uint8 literal\",\n+                           0,\n+                           G_MAXUINT,\n+                           0,\n+                           static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                    G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_UINT8_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_uint8_literal_node_new:\n+ * @value: The value of the uint8 literal.\n+ *\n+ * Returns: A newly created #GGandivaUint8LiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaUint8LiteralNode *\n+ggandiva_uint8_literal_node_new(guint8 value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_uint8_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaUint16LiteralNodePrivate_ {\n+  guint16 value;\n+} GGandivaUint16LiteralNodePrivate;\n+\n+enum {\n+  PROP_UINT16_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaUint16LiteralNode,\n+                           ggandiva_uint16_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_UINT16_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaUint16LiteralNodePrivate *>(                     \\\n+    ggandiva_uint16_literal_node_get_instance_private(                 \\\n+      GGANDIVA_UINT16_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_uint16_literal_node_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_UINT16_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_UINT16_VALUE:\n+    priv->value = g_value_get_uint(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_uint16_literal_node_get_property(GObject *object,\n+                                          guint prop_id,\n+                                          GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_UINT16_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_UINT16_VALUE:\n+    g_value_set_uint(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_uint16_literal_node_init(GGandivaUint16LiteralNode *uint16_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_uint16_literal_node_class_init(GGandivaUint16LiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_uint16_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_uint16_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_uint(\"value\",\n+                           \"Value\",\n+                           \"The value of the uint16 literal\",\n+                           0,\n+                           G_MAXUINT16,\n+                           0,\n+                           static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                    G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_UINT16_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_uint16_literal_node_new:\n+ * @value: The value of the uint16 literal.\n+ *\n+ * Returns: A newly created #GGandivaUint16LiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaUint16LiteralNode *\n+ggandiva_uint16_literal_node_new(guint16 value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_uint16_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaUint32LiteralNodePrivate_ {\n+  guint32 value;\n+} GGandivaUint32LiteralNodePrivate;\n+\n+enum {\n+  PROP_UINT32_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaUint32LiteralNode,\n+                           ggandiva_uint32_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_UINT32_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaUint32LiteralNodePrivate *>(                     \\\n+    ggandiva_uint32_literal_node_get_instance_private(                 \\\n+      GGANDIVA_UINT32_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_uint32_literal_node_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_UINT32_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_UINT32_VALUE:\n+    priv->value = g_value_get_uint(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_uint32_literal_node_get_property(GObject *object,\n+                                          guint prop_id,\n+                                          GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_UINT32_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_UINT32_VALUE:\n+    g_value_set_uint(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_uint32_literal_node_init(GGandivaUint32LiteralNode *uint32_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_uint32_literal_node_class_init(GGandivaUint32LiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_uint32_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_uint32_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_uint(\"value\",\n+                           \"Value\",\n+                           \"The value of the uint32 literal\",\n+                           0,\n+                           G_MAXUINT32,\n+                           0,\n+                           static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                    G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_UINT32_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_uint32_literal_node_new:\n+ * @value: The value of the uint32 literal.\n+ *\n+ * Returns: A newly created #GGandivaUint32LiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaUint32LiteralNode *\n+ggandiva_uint32_literal_node_new(guint32 value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_uint32_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaUint64LiteralNodePrivate_ {\n+  guint64 value;\n+} GGandivaUint64LiteralNodePrivate;\n+\n+enum {\n+  PROP_UINT64_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaUint64LiteralNode,\n+                           ggandiva_uint64_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_UINT64_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaUint64LiteralNodePrivate *>(                     \\\n+    ggandiva_uint64_literal_node_get_instance_private(                 \\\n+      GGANDIVA_UINT64_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_uint64_literal_node_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_UINT64_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_UINT64_VALUE:\n+    priv->value = g_value_get_uint64(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_uint64_literal_node_get_property(GObject *object,\n+                                          guint prop_id,\n+                                          GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_UINT64_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_UINT64_VALUE:\n+    g_value_set_uint64(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_uint64_literal_node_init(GGandivaUint64LiteralNode *uint64_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_uint64_literal_node_class_init(GGandivaUint64LiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_uint64_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_uint64_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_uint64(\"value\",\n+                             \"Value\",\n+                             \"The value of the uint64 literal\",\n+                             0,\n+                             G_MAXUINT64,\n+                             0,\n+                             static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                      G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_UINT64_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_uint64_literal_node_new:\n+ * @value: The value of the uint64 literal.\n+ *\n+ * Returns: A newly created #GGandivaUint64LiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaUint64LiteralNode *\n+ggandiva_uint64_literal_node_new(guint64 value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_uint64_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaInt8LiteralNodePrivate_ {\n+  gint8 value;\n+} GGandivaInt8LiteralNodePrivate;\n+\n+enum {\n+  PROP_INT8_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaInt8LiteralNode,\n+                           ggandiva_int8_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_INT8_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaInt8LiteralNodePrivate *>(                     \\\n+    ggandiva_int8_literal_node_get_instance_private(                 \\\n+      GGANDIVA_INT8_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_int8_literal_node_set_property(GObject *object,\n+                                        guint prop_id,\n+                                        const GValue *value,\n+                                        GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_INT8_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_INT8_VALUE:\n+    priv->value = g_value_get_int(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_int8_literal_node_get_property(GObject *object,\n+                                        guint prop_id,\n+                                        GValue *value,\n+                                        GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_INT8_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_INT8_VALUE:\n+    g_value_set_int(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_int8_literal_node_init(GGandivaInt8LiteralNode *int8_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_int8_literal_node_class_init(GGandivaInt8LiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_int8_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_int8_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_int(\"value\",\n+                          \"Value\",\n+                          \"The value of the int8 literal\",\n+                          G_MININT,\n+                          G_MAXINT,\n+                          0,\n+                          static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                   G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_INT8_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_int8_literal_node_new:\n+ * @value: The value of the int8 literal.\n+ *\n+ * Returns: A newly created #GGandivaInt8LiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaInt8LiteralNode *\n+ggandiva_int8_literal_node_new(gint8 value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_int8_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaInt16LiteralNodePrivate_ {\n+  gint16 value;\n+} GGandivaInt16LiteralNodePrivate;\n+\n+enum {\n+  PROP_INT16_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaInt16LiteralNode,\n+                           ggandiva_int16_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_INT16_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaInt16LiteralNodePrivate *>(                     \\\n+    ggandiva_int16_literal_node_get_instance_private(                 \\\n+      GGANDIVA_INT16_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_int16_literal_node_set_property(GObject *object,\n+                                         guint prop_id,\n+                                         const GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_INT16_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_INT16_VALUE:\n+    priv->value = g_value_get_int(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_int16_literal_node_get_property(GObject *object,\n+                                         guint prop_id,\n+                                         GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_INT16_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_INT16_VALUE:\n+    g_value_set_int(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_int16_literal_node_init(GGandivaInt16LiteralNode *int16_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_int16_literal_node_class_init(GGandivaInt16LiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_int16_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_int16_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_int(\"value\",\n+                          \"Value\",\n+                          \"The value of the int16 literal\",\n+                          G_MININT16,\n+                          G_MAXINT16,\n+                          0,\n+                          static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                   G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_INT16_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_int16_literal_node_new:\n+ * @value: The value of the int16 literal.\n+ *\n+ * Returns: A newly created #GGandivaInt16LiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaInt16LiteralNode *\n+ggandiva_int16_literal_node_new(gint16 value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_int16_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaInt32LiteralNodePrivate_ {\n+  gint32 value;\n+} GGandivaInt32LiteralNodePrivate;\n+\n+enum {\n+  PROP_INT32_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaInt32LiteralNode,\n+                           ggandiva_int32_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_INT32_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaInt32LiteralNodePrivate *>(                     \\\n+    ggandiva_int32_literal_node_get_instance_private(                 \\\n+      GGANDIVA_INT32_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_int32_literal_node_set_property(GObject *object,\n+                                         guint prop_id,\n+                                         const GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_INT32_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_INT32_VALUE:\n+    priv->value = g_value_get_int(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_int32_literal_node_get_property(GObject *object,\n+                                         guint prop_id,\n+                                         GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_INT32_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_INT32_VALUE:\n+    g_value_set_int(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_int32_literal_node_init(GGandivaInt32LiteralNode *int32_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_int32_literal_node_class_init(GGandivaInt32LiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_int32_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_int32_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_int(\"value\",\n+                          \"Value\",\n+                          \"The value of the int32 literal\",\n+                          G_MININT32,\n+                          G_MAXINT32,\n+                          0,\n+                          static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                   G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_INT32_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_int32_literal_node_new:\n+ * @value: The value of the int32 literal.\n+ *\n+ * Returns: A newly created #GGandivaInt32LiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaInt32LiteralNode *\n+ggandiva_int32_literal_node_new(gint32 value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_int32_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaInt64LiteralNodePrivate_ {\n+  gint64 value;\n+} GGandivaInt64LiteralNodePrivate;\n+\n+enum {\n+  PROP_INT64_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaInt64LiteralNode,\n+                           ggandiva_int64_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_INT64_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaInt64LiteralNodePrivate *>(                     \\\n+    ggandiva_int64_literal_node_get_instance_private(                 \\\n+      GGANDIVA_INT64_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_int64_literal_node_set_property(GObject *object,\n+                                         guint prop_id,\n+                                         const GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_INT64_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_INT64_VALUE:\n+    priv->value = g_value_get_int64(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_int64_literal_node_get_property(GObject *object,\n+                                         guint prop_id,\n+                                         GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_INT64_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_INT64_VALUE:\n+    g_value_set_int64(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_int64_literal_node_init(GGandivaInt64LiteralNode *int64_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_int64_literal_node_class_init(GGandivaInt64LiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_int64_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_int64_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_int64(\"value\",\n+                            \"Value\",\n+                            \"The value of the int64 literal\",\n+                            G_MININT64,\n+                            G_MAXINT64,\n+                            0,\n+                            static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                     G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_INT64_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_int64_literal_node_new:\n+ * @value: The value of the int64 literal.\n+ *\n+ * Returns: A newly created #GGandivaInt64LiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaInt64LiteralNode *\n+ggandiva_int64_literal_node_new(gint64 value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_int64_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaFloatLiteralNodePrivate_ {\n+  gfloat value;\n+} GGandivaFloatLiteralNodePrivate;\n+\n+enum {\n+  PROP_FLOAT_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaFloatLiteralNode,\n+                           ggandiva_float_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_FLOAT_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaFloatLiteralNodePrivate *>(                     \\\n+    ggandiva_float_literal_node_get_instance_private(                 \\\n+      GGANDIVA_FLOAT_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_float_literal_node_set_property(GObject *object,\n+                                         guint prop_id,\n+                                         const GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_FLOAT_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_FLOAT_VALUE:\n+    priv->value = g_value_get_float(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_float_literal_node_get_property(GObject *object,\n+                                         guint prop_id,\n+                                         GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_FLOAT_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_FLOAT_VALUE:\n+    g_value_set_float(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_float_literal_node_init(GGandivaFloatLiteralNode *float_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_float_literal_node_class_init(GGandivaFloatLiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_float_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_float_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_float(\"value\",\n+                            \"Value\",\n+                            \"The value of the float literal\",\n+                            -G_MAXFLOAT,\n+                            G_MAXFLOAT,\n+                            0.0,\n+                            static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                     G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_FLOAT_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_float_literal_node_new:\n+ * @value: The value of the float literal.\n+ *\n+ * Returns: A newly created #GGandivaFloatLiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaFloatLiteralNode *\n+ggandiva_float_literal_node_new(gfloat value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_float_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaDoubleLiteralNodePrivate_ {\n+  gdouble value;\n+} GGandivaDoubleLiteralNodePrivate;\n+\n+enum {\n+  PROP_DOUBLE_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaDoubleLiteralNode,\n+                           ggandiva_double_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_DOUBLE_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaDoubleLiteralNodePrivate *>(                     \\\n+    ggandiva_double_literal_node_get_instance_private(                 \\\n+      GGANDIVA_DOUBLE_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_double_literal_node_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_DOUBLE_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_DOUBLE_VALUE:\n+    priv->value = g_value_get_double(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_double_literal_node_get_property(GObject *object,\n+                                          guint prop_id,\n+                                          GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_DOUBLE_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_DOUBLE_VALUE:\n+    g_value_set_double(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_double_literal_node_init(GGandivaDoubleLiteralNode *double_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_double_literal_node_class_init(GGandivaDoubleLiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_double_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_double_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_double(\"value\",\n+                             \"Value\",\n+                             \"The value of the double literal\",\n+                             -G_MAXDOUBLE,\n+                             G_MAXDOUBLE,\n+                             0.0,\n+                             static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                      G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_DOUBLE_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_double_literal_node_new:\n+ * @value: The value of the double literal.\n+ *\n+ * Returns: A newly created #GGandivaDoubleLiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaDoubleLiteralNode *\n+ggandiva_double_literal_node_new(gdouble value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_double_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaStringLiteralNodePrivate_ {\n+  gchar *value;\n+} GGandivaStringLiteralNodePrivate;\n+\n+enum {\n+  PROP_STRING_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaStringLiteralNode,\n+                           ggandiva_string_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_STRING_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaStringLiteralNodePrivate *>(                     \\\n+    ggandiva_string_literal_node_get_instance_private(                 \\\n+      GGANDIVA_STRING_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_string_literal_node_finalize(GObject *object)\n+{\n+  auto priv = GGANDIVA_STRING_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  g_free(priv->value);\n+\n+  G_OBJECT_CLASS(ggandiva_string_literal_node_parent_class)->finalize(object);\n+}\n+\n+static void\n+ggandiva_string_literal_node_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_STRING_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_STRING_VALUE:\n+    priv->value = g_value_dup_string(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_string_literal_node_get_property(GObject *object,\n+                                          guint prop_id,\n+                                          GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_STRING_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_STRING_VALUE:\n+    g_value_set_string(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_string_literal_node_init(GGandivaStringLiteralNode *string_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_string_literal_node_class_init(GGandivaStringLiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = ggandiva_string_literal_node_finalize;\n+  gobject_class->set_property = ggandiva_string_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_string_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_string(\"value\",\n+                             \"Value\",\n+                             \"The value of the string literal\",\n+                             nullptr,\n+                             static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                      G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_STRING_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_string_literal_node_new:\n+ * @value: The value of the string literal.\n+ *\n+ * Returns: A newly created #GGandivaStringLiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaStringLiteralNode *\n+ggandiva_string_literal_node_new(const gchar *value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_string_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaBinaryLiteralNodePrivate_ {\n+  gchar *value;\n+} GGandivaBinaryLiteralNodePrivate;\n+\n+enum {\n+  PROP_BINARY_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaBinaryLiteralNode,\n+                           ggandiva_binary_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_BINARY_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaBinaryLiteralNodePrivate *>(                     \\\n+    ggandiva_binary_literal_node_get_instance_private(                 \\\n+      GGANDIVA_BINARY_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_binary_literal_node_finalize(GObject *object)\n+{\n+  auto priv = GGANDIVA_BINARY_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  g_free(priv->value);\n+\n+  G_OBJECT_CLASS(ggandiva_binary_literal_node_parent_class)->finalize(object);\n+}\n+\n+static void\n+ggandiva_binary_literal_node_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_BINARY_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_BINARY_VALUE:\n+    priv->value = g_value_dup_string(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_binary_literal_node_get_property(GObject *object,\n+                                          guint prop_id,\n+                                          GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_BINARY_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_BINARY_VALUE:\n+    g_value_set_string(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_binary_literal_node_init(GGandivaBinaryLiteralNode *binary_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_binary_literal_node_class_init(GGandivaBinaryLiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = ggandiva_binary_literal_node_finalize;\n+  gobject_class->set_property = ggandiva_binary_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_binary_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_string(\"value\",\n+                             \"Value\",\n+                             \"The value of the binary literal\",\n+                             nullptr,\n+                             static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                      G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_BINARY_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_binary_literal_node_new:\n+ * @value: The value of the binary literal.\n+ *\n+ * Returns: A newly created #GGandivaBinaryLiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaBinaryLiteralNode *\n+ggandiva_binary_literal_node_new(const gchar *value)\n \n Review comment:\n   I see. I'll try to address them.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-06T09:54:45.195+0000",
                    "updated": "2018-12-06T09:54:45.195+0000",
                    "started": "2018-12-06T09:54:45.194+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172612",
                    "issueId": "13201501"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13201501/worklog/172916",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #3092: ARROW-3913: [Gandiva] [GLib] Add GGandivaLiteralNode\nURL: https://github.com/apache/arrow/pull/3092#discussion_r239680997\n \n \n\n ##########\n File path: c_glib/gandiva-glib/node.cpp\n ##########\n @@ -395,42 +434,1438 @@ ggandiva_function_node_get_parameters(GGandivaFunctionNode *node)\n   return priv->parameters;\n }\n \n-G_END_DECLS\n \n-std::shared_ptr<gandiva::Node>\n-ggandiva_node_get_raw(GGandivaNode *node)\n+G_DEFINE_TYPE(GGandivaLiteralNode,\n+              ggandiva_literal_node,\n+              GGANDIVA_TYPE_NODE)\n+\n+static void\n+ggandiva_literal_node_init(GGandivaLiteralNode *literal_node)\n {\n-  auto priv = GGANDIVA_NODE_GET_PRIVATE(node);\n-  return priv->node;\n }\n \n-GGandivaFieldNode *\n-ggandiva_field_node_new_raw(std::shared_ptr<gandiva::Node> *gandiva_node,\n-                            GArrowField *field)\n+static void\n+ggandiva_literal_node_class_init(GGandivaLiteralNodeClass *klass)\n {\n-  auto field_node = g_object_new(GGANDIVA_TYPE_FIELD_NODE,\n-                                 \"node\", gandiva_node,\n-                                 \"field\", field,\n-                                 NULL);\n-  return GGANDIVA_FIELD_NODE(field_node);\n }\n \n-GGandivaFunctionNode *\n-ggandiva_function_node_new_raw(std::shared_ptr<gandiva::Node> *gandiva_node,\n-                               const gchar *name,\n-                               GList *parameters,\n-                               GArrowDataType *return_type)\n+\n+typedef struct GGandivaBooleanLiteralNodePrivate_ {\n+  gboolean is_true;\n+} GGandivaBooleanLiteralNodePrivate;\n \n Review comment:\n   @pravindra C GLib Gandiva bindings want to use `LiteralNode::holder()` to access raw literal data. Is it acceptable that we make `gandiva/node.h` public?\r\n   \r\n   Other methods in `node.h` will be useful in bindings. For example, `Node::ToString()` is useful to inspect the node object.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-07T02:38:18.387+0000",
                    "updated": "2018-12-07T02:38:18.387+0000",
                    "started": "2018-12-07T02:38:18.386+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "172916",
                    "issueId": "13201501"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13201501/worklog/173230",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pravindra commented on a change in pull request #3092: ARROW-3913: [Gandiva] [GLib] Add GGandivaLiteralNode\nURL: https://github.com/apache/arrow/pull/3092#discussion_r240024084\n \n \n\n ##########\n File path: c_glib/gandiva-glib/node.cpp\n ##########\n @@ -395,42 +434,1438 @@ ggandiva_function_node_get_parameters(GGandivaFunctionNode *node)\n   return priv->parameters;\n }\n \n-G_END_DECLS\n \n-std::shared_ptr<gandiva::Node>\n-ggandiva_node_get_raw(GGandivaNode *node)\n+G_DEFINE_TYPE(GGandivaLiteralNode,\n+              ggandiva_literal_node,\n+              GGANDIVA_TYPE_NODE)\n+\n+static void\n+ggandiva_literal_node_init(GGandivaLiteralNode *literal_node)\n {\n-  auto priv = GGANDIVA_NODE_GET_PRIVATE(node);\n-  return priv->node;\n }\n \n-GGandivaFieldNode *\n-ggandiva_field_node_new_raw(std::shared_ptr<gandiva::Node> *gandiva_node,\n-                            GArrowField *field)\n+static void\n+ggandiva_literal_node_class_init(GGandivaLiteralNodeClass *klass)\n {\n-  auto field_node = g_object_new(GGANDIVA_TYPE_FIELD_NODE,\n-                                 \"node\", gandiva_node,\n-                                 \"field\", field,\n-                                 NULL);\n-  return GGANDIVA_FIELD_NODE(field_node);\n }\n \n-GGandivaFunctionNode *\n-ggandiva_function_node_new_raw(std::shared_ptr<gandiva::Node> *gandiva_node,\n-                               const gchar *name,\n-                               GList *parameters,\n-                               GArrowDataType *return_type)\n+\n+typedef struct GGandivaBooleanLiteralNodePrivate_ {\n+  gboolean is_true;\n+} GGandivaBooleanLiteralNodePrivate;\n \n Review comment:\n   sorry, I missed this. I'm fine with making gandiva/node.h public\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-09T05:10:25.241+0000",
                    "updated": "2018-12-09T05:10:25.241+0000",
                    "started": "2018-12-09T05:10:25.240+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173230",
                    "issueId": "13201501"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13201501/worklog/173231",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on a change in pull request #3092: ARROW-3913: [Gandiva] [GLib] Add GGandivaLiteralNode\nURL: https://github.com/apache/arrow/pull/3092#discussion_r240024174\n \n \n\n ##########\n File path: c_glib/gandiva-glib/node.cpp\n ##########\n @@ -395,42 +434,1438 @@ ggandiva_function_node_get_parameters(GGandivaFunctionNode *node)\n   return priv->parameters;\n }\n \n-G_END_DECLS\n \n-std::shared_ptr<gandiva::Node>\n-ggandiva_node_get_raw(GGandivaNode *node)\n+G_DEFINE_TYPE(GGandivaLiteralNode,\n+              ggandiva_literal_node,\n+              GGANDIVA_TYPE_NODE)\n+\n+static void\n+ggandiva_literal_node_init(GGandivaLiteralNode *literal_node)\n {\n-  auto priv = GGANDIVA_NODE_GET_PRIVATE(node);\n-  return priv->node;\n }\n \n-GGandivaFieldNode *\n-ggandiva_field_node_new_raw(std::shared_ptr<gandiva::Node> *gandiva_node,\n-                            GArrowField *field)\n+static void\n+ggandiva_literal_node_class_init(GGandivaLiteralNodeClass *klass)\n {\n-  auto field_node = g_object_new(GGANDIVA_TYPE_FIELD_NODE,\n-                                 \"node\", gandiva_node,\n-                                 \"field\", field,\n-                                 NULL);\n-  return GGANDIVA_FIELD_NODE(field_node);\n }\n \n-GGandivaFunctionNode *\n-ggandiva_function_node_new_raw(std::shared_ptr<gandiva::Node> *gandiva_node,\n-                               const gchar *name,\n-                               GList *parameters,\n-                               GArrowDataType *return_type)\n+\n+typedef struct GGandivaBooleanLiteralNodePrivate_ {\n+  gboolean is_true;\n+} GGandivaBooleanLiteralNodePrivate;\n \n Review comment:\n   @pravindra Thanks! I\u2019ll create the pull request to make `gandiva/node.h` public.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-09T05:17:42.233+0000",
                    "updated": "2018-12-09T05:17:42.233+0000",
                    "started": "2018-12-09T05:17:42.232+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173231",
                    "issueId": "13201501"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13201501/worklog/173232",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #3092: ARROW-3913: [Gandiva] [GLib] Add GGandivaLiteralNode\nURL: https://github.com/apache/arrow/pull/3092#issuecomment-445512644\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/3092?src=pr&el=h1) Report\n   > Merging [#3092](https://codecov.io/gh/apache/arrow/pull/3092?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/03b4a2738d2feb757678ab984d47632822a14a83?src=pr&el=desc) will **increase** coverage by `1.09%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/3092/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/3092?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #3092      +/-   ##\n   ==========================================\n   + Coverage   87.08%   88.18%   +1.09%     \n   ==========================================\n     Files         492      434      -58     \n     Lines       69160    65394    -3766     \n   ==========================================\n   - Hits        60231    57669    -2562     \n   + Misses       8832     7725    -1107     \n   + Partials       97        0      -97\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/3092?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/plasma/thirdparty/ae/ae.c](https://codecov.io/gh/apache/arrow/pull/3092/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wbGFzbWEvdGhpcmRwYXJ0eS9hZS9hZS5j) | `72.03% <0%> (-0.95%)` | :arrow_down: |\n   | [go/arrow/array/table.go](https://codecov.io/gh/apache/arrow/pull/3092/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvdGFibGUuZ28=) | | |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3092/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | | |\n   | [go/arrow/internal/testing/tools/bool.go](https://codecov.io/gh/apache/arrow/pull/3092/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvdGVzdGluZy90b29scy9ib29sLmdv) | | |\n   | [go/arrow/internal/bitutil/bitutil.go](https://codecov.io/gh/apache/arrow/pull/3092/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvYml0dXRpbC9iaXR1dGlsLmdv) | | |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3092/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | | |\n   | [go/arrow/array/null.go](https://codecov.io/gh/apache/arrow/pull/3092/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVsbC5nbw==) | | |\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/3092/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | | |\n   | [go/arrow/array/string.go](https://codecov.io/gh/apache/arrow/pull/3092/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvc3RyaW5nLmdv) | | |\n   | [go/arrow/math/uint64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/3092/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYXZ4Ml9hbWQ2NC5nbw==) | | |\n   | ... and [50 more](https://codecov.io/gh/apache/arrow/pull/3092/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/3092?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/3092?src=pr&el=footer). Last update [03b4a27...664cdab](https://codecov.io/gh/apache/arrow/pull/3092?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-09T05:35:00.504+0000",
                    "updated": "2018-12-09T05:35:00.504+0000",
                    "started": "2018-12-09T05:35:00.503+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173232",
                    "issueId": "13201501"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13201501/worklog/173234",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on a change in pull request #3092: [WIP] ARROW-3913: [Gandiva] [GLib] Add GGandivaLiteralNode\nURL: https://github.com/apache/arrow/pull/3092#discussion_r240024780\n \n \n\n ##########\n File path: c_glib/gandiva-glib/node.cpp\n ##########\n @@ -395,42 +434,1438 @@ ggandiva_function_node_get_parameters(GGandivaFunctionNode *node)\n   return priv->parameters;\n }\n \n-G_END_DECLS\n \n-std::shared_ptr<gandiva::Node>\n-ggandiva_node_get_raw(GGandivaNode *node)\n+G_DEFINE_TYPE(GGandivaLiteralNode,\n+              ggandiva_literal_node,\n+              GGANDIVA_TYPE_NODE)\n+\n+static void\n+ggandiva_literal_node_init(GGandivaLiteralNode *literal_node)\n {\n-  auto priv = GGANDIVA_NODE_GET_PRIVATE(node);\n-  return priv->node;\n }\n \n-GGandivaFieldNode *\n-ggandiva_field_node_new_raw(std::shared_ptr<gandiva::Node> *gandiva_node,\n-                            GArrowField *field)\n+static void\n+ggandiva_literal_node_class_init(GGandivaLiteralNodeClass *klass)\n {\n-  auto field_node = g_object_new(GGANDIVA_TYPE_FIELD_NODE,\n-                                 \"node\", gandiva_node,\n-                                 \"field\", field,\n-                                 NULL);\n-  return GGANDIVA_FIELD_NODE(field_node);\n }\n \n-GGandivaFunctionNode *\n-ggandiva_function_node_new_raw(std::shared_ptr<gandiva::Node> *gandiva_node,\n-                               const gchar *name,\n-                               GList *parameters,\n-                               GArrowDataType *return_type)\n+\n+typedef struct GGandivaBooleanLiteralNodePrivate_ {\n+  gboolean is_true;\n+} GGandivaBooleanLiteralNodePrivate;\n \n Review comment:\n   I've created #3135.\r\n   If #3135 has been merged, I\u2019ll rebase this branch on master.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-09T05:59:18.853+0000",
                    "updated": "2018-12-09T05:59:18.853+0000",
                    "started": "2018-12-09T05:59:18.851+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173234",
                    "issueId": "13201501"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13201501/worklog/173467",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on a change in pull request #3092: [WIP] ARROW-3913: [Gandiva] [GLib] Add GGandivaLiteralNode\nURL: https://github.com/apache/arrow/pull/3092#discussion_r240151127\n \n \n\n ##########\n File path: c_glib/gandiva-glib/node.cpp\n ##########\n @@ -40,6 +40,45 @@ G_BEGIN_DECLS\n  *\n  * #GGandivaFunctionNode is a class for a node in the expression tree, representing a function.\n  *\n+ * #GGandivaLiteralNode is a base class for a node in the expression tree,\n+ * representing a literal.\n+ *\n+ * #GGandivaUint8LiteralNode is a class for a node in the expression tree,\n \n Review comment:\n   I've fixed it.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-10T10:13:40.135+0000",
                    "updated": "2018-12-10T10:13:40.135+0000",
                    "started": "2018-12-10T10:13:40.134+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173467",
                    "issueId": "13201501"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13201501/worklog/173468",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on a change in pull request #3092: [WIP] ARROW-3913: [Gandiva] [GLib] Add GGandivaLiteralNode\nURL: https://github.com/apache/arrow/pull/3092#discussion_r240151149\n \n \n\n ##########\n File path: c_glib/gandiva-glib/node.cpp\n ##########\n @@ -40,6 +40,45 @@ G_BEGIN_DECLS\n  *\n  * #GGandivaFunctionNode is a class for a node in the expression tree, representing a function.\n  *\n+ * #GGandivaLiteralNode is a base class for a node in the expression tree,\n+ * representing a literal.\n+ *\n+ * #GGandivaUint8LiteralNode is a class for a node in the expression tree,\n+ * representing a 8-bit unsigned integer literal.\n+ *\n+ * #GGandivaUint16LiteralNode is a class for a node in the expression tree,\n+ * representing a 16-bit unsigned integer literal.\n+ *\n+ * #GGandivaUint32LiteralNode is a class for a node in the expression tree,\n+ * representing a 32-bit unsigned integer literal.\n+ *\n+ * #GGandivaUint64LiteralNode is a class for a node in the expression tree,\n+ * representing a 64-bit unsigned integer literal.\n+ *\n+ * #GGandivaInt8LiteralNode is a class for a node in the expression tree,\n+ * representing a 8-bit integer literal.\n+ *\n+ * #GGandivaInt16LiteralNode is a class for a node in the expression tree,\n+ * representing a 16-bit integer literal.\n+ *\n+ * #GGandivaInt32LiteralNode is a class for a node in the expression tree,\n+ * representing a 32-bit integer literal.\n+ *\n+ * #GGandivaInt64LiteralNode is a class for a node in the expression tree,\n+ * representing a 64-bit integer literal.\n+ *\n+ * #GGandivaFloatLiteralNode is a class for a node in the expression tree,\n+ * representing a 32-bit floating point literal.\n+ *\n+ * #GGandivaDoubleLiteralNode is a class for a node in the expression tree,\n+ * representing a 64-bit floating point literal.\n+ *\n+ * #GGandivaStringLiteralNode is a class for a node in the expression tree,\n+ * representing a UTF-8 encoded string literal.\n \n Review comment:\n   I've fixed it.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-10T10:13:44.046+0000",
                    "updated": "2018-12-10T10:13:44.046+0000",
                    "started": "2018-12-10T10:13:44.045+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173468",
                    "issueId": "13201501"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13201501/worklog/173469",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on a change in pull request #3092: [WIP] ARROW-3913: [Gandiva] [GLib] Add GGandivaLiteralNode\nURL: https://github.com/apache/arrow/pull/3092#discussion_r240151217\n \n \n\n ##########\n File path: c_glib/gandiva-glib/node.cpp\n ##########\n @@ -395,42 +434,1438 @@ ggandiva_function_node_get_parameters(GGandivaFunctionNode *node)\n   return priv->parameters;\n }\n \n-G_END_DECLS\n \n-std::shared_ptr<gandiva::Node>\n-ggandiva_node_get_raw(GGandivaNode *node)\n+G_DEFINE_TYPE(GGandivaLiteralNode,\n+              ggandiva_literal_node,\n+              GGANDIVA_TYPE_NODE)\n+\n+static void\n+ggandiva_literal_node_init(GGandivaLiteralNode *literal_node)\n {\n-  auto priv = GGANDIVA_NODE_GET_PRIVATE(node);\n-  return priv->node;\n }\n \n-GGandivaFieldNode *\n-ggandiva_field_node_new_raw(std::shared_ptr<gandiva::Node> *gandiva_node,\n-                            GArrowField *field)\n+static void\n+ggandiva_literal_node_class_init(GGandivaLiteralNodeClass *klass)\n {\n-  auto field_node = g_object_new(GGANDIVA_TYPE_FIELD_NODE,\n-                                 \"node\", gandiva_node,\n-                                 \"field\", field,\n-                                 NULL);\n-  return GGANDIVA_FIELD_NODE(field_node);\n }\n \n-GGandivaFunctionNode *\n-ggandiva_function_node_new_raw(std::shared_ptr<gandiva::Node> *gandiva_node,\n-                               const gchar *name,\n-                               GList *parameters,\n-                               GArrowDataType *return_type)\n+\n+typedef struct GGandivaBooleanLiteralNodePrivate_ {\n+  gboolean is_true;\n+} GGandivaBooleanLiteralNodePrivate;\n+\n+enum {\n+  PROP_IS_TRUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaBooleanLiteralNode,\n+                           ggandiva_boolean_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_BOOLEAN_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaBooleanLiteralNodePrivate *>(                     \\\n+    ggandiva_boolean_literal_node_get_instance_private(                 \\\n+      GGANDIVA_BOOLEAN_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_boolean_literal_node_set_property(GObject *object,\n+                                           guint prop_id,\n+                                           const GValue *value,\n+                                           GParamSpec *pspec)\n {\n-  auto function_node = g_object_new(GGANDIVA_TYPE_FUNCTION_NODE,\n-                                    \"node\", gandiva_node,\n-                                    \"name\", name,\n-                                    \"return-type\", return_type,\n-                                    NULL);\n-  auto priv = GGANDIVA_FUNCTION_NODE_GET_PRIVATE(function_node);\n-  for (auto node = parameters; node; node = g_list_next(node)) {\n-    auto parameter = GGANDIVA_NODE(node->data);\n-    priv->parameters = g_list_prepend(priv->parameters, g_object_ref(parameter));\n+  auto priv = GGANDIVA_BOOLEAN_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_IS_TRUE:\n+    priv->is_true = g_value_get_boolean(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n   }\n-  priv->parameters = g_list_reverse(priv->parameters);\n-  return GGANDIVA_FUNCTION_NODE(function_node);\n+}\n+\n+static void\n+ggandiva_boolean_literal_node_get_property(GObject *object,\n+                                           guint prop_id,\n+                                           GValue *value,\n+                                           GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_BOOLEAN_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_IS_TRUE:\n+    g_value_set_boolean(value, priv->is_true);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_boolean_literal_node_init(GGandivaBooleanLiteralNode *boolean_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_boolean_literal_node_class_init(GGandivaBooleanLiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_boolean_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_boolean_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_boolean(\"is-true\",\n \n Review comment:\n   I've fixed it.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-10T10:13:55.920+0000",
                    "updated": "2018-12-10T10:13:55.920+0000",
                    "started": "2018-12-10T10:13:55.919+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173469",
                    "issueId": "13201501"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13201501/worklog/173470",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on a change in pull request #3092: [WIP] ARROW-3913: [Gandiva] [GLib] Add GGandivaLiteralNode\nURL: https://github.com/apache/arrow/pull/3092#discussion_r240151263\n \n \n\n ##########\n File path: c_glib/gandiva-glib/node.cpp\n ##########\n @@ -395,42 +434,1438 @@ ggandiva_function_node_get_parameters(GGandivaFunctionNode *node)\n   return priv->parameters;\n }\n \n-G_END_DECLS\n \n-std::shared_ptr<gandiva::Node>\n-ggandiva_node_get_raw(GGandivaNode *node)\n+G_DEFINE_TYPE(GGandivaLiteralNode,\n+              ggandiva_literal_node,\n+              GGANDIVA_TYPE_NODE)\n+\n+static void\n+ggandiva_literal_node_init(GGandivaLiteralNode *literal_node)\n {\n-  auto priv = GGANDIVA_NODE_GET_PRIVATE(node);\n-  return priv->node;\n }\n \n-GGandivaFieldNode *\n-ggandiva_field_node_new_raw(std::shared_ptr<gandiva::Node> *gandiva_node,\n-                            GArrowField *field)\n+static void\n+ggandiva_literal_node_class_init(GGandivaLiteralNodeClass *klass)\n {\n-  auto field_node = g_object_new(GGANDIVA_TYPE_FIELD_NODE,\n-                                 \"node\", gandiva_node,\n-                                 \"field\", field,\n-                                 NULL);\n-  return GGANDIVA_FIELD_NODE(field_node);\n }\n \n-GGandivaFunctionNode *\n-ggandiva_function_node_new_raw(std::shared_ptr<gandiva::Node> *gandiva_node,\n-                               const gchar *name,\n-                               GList *parameters,\n-                               GArrowDataType *return_type)\n+\n+typedef struct GGandivaBooleanLiteralNodePrivate_ {\n+  gboolean is_true;\n+} GGandivaBooleanLiteralNodePrivate;\n \n Review comment:\n   I've rebased on master.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-10T10:14:04.020+0000",
                    "updated": "2018-12-10T10:14:04.020+0000",
                    "started": "2018-12-10T10:14:04.019+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173470",
                    "issueId": "13201501"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13201501/worklog/173471",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "shiro615 commented on a change in pull request #3092: [WIP] ARROW-3913: [Gandiva] [GLib] Add GGandivaLiteralNode\nURL: https://github.com/apache/arrow/pull/3092#discussion_r240151499\n \n \n\n ##########\n File path: c_glib/gandiva-glib/node.cpp\n ##########\n @@ -395,42 +434,1438 @@ ggandiva_function_node_get_parameters(GGandivaFunctionNode *node)\n   return priv->parameters;\n }\n \n-G_END_DECLS\n \n-std::shared_ptr<gandiva::Node>\n-ggandiva_node_get_raw(GGandivaNode *node)\n+G_DEFINE_TYPE(GGandivaLiteralNode,\n+              ggandiva_literal_node,\n+              GGANDIVA_TYPE_NODE)\n+\n+static void\n+ggandiva_literal_node_init(GGandivaLiteralNode *literal_node)\n {\n-  auto priv = GGANDIVA_NODE_GET_PRIVATE(node);\n-  return priv->node;\n }\n \n-GGandivaFieldNode *\n-ggandiva_field_node_new_raw(std::shared_ptr<gandiva::Node> *gandiva_node,\n-                            GArrowField *field)\n+static void\n+ggandiva_literal_node_class_init(GGandivaLiteralNodeClass *klass)\n {\n-  auto field_node = g_object_new(GGANDIVA_TYPE_FIELD_NODE,\n-                                 \"node\", gandiva_node,\n-                                 \"field\", field,\n-                                 NULL);\n-  return GGANDIVA_FIELD_NODE(field_node);\n }\n \n-GGandivaFunctionNode *\n-ggandiva_function_node_new_raw(std::shared_ptr<gandiva::Node> *gandiva_node,\n-                               const gchar *name,\n-                               GList *parameters,\n-                               GArrowDataType *return_type)\n+\n+typedef struct GGandivaBooleanLiteralNodePrivate_ {\n+  gboolean is_true;\n+} GGandivaBooleanLiteralNodePrivate;\n+\n+enum {\n+  PROP_IS_TRUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaBooleanLiteralNode,\n+                           ggandiva_boolean_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_BOOLEAN_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaBooleanLiteralNodePrivate *>(                     \\\n+    ggandiva_boolean_literal_node_get_instance_private(                 \\\n+      GGANDIVA_BOOLEAN_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_boolean_literal_node_set_property(GObject *object,\n+                                           guint prop_id,\n+                                           const GValue *value,\n+                                           GParamSpec *pspec)\n {\n-  auto function_node = g_object_new(GGANDIVA_TYPE_FUNCTION_NODE,\n-                                    \"node\", gandiva_node,\n-                                    \"name\", name,\n-                                    \"return-type\", return_type,\n-                                    NULL);\n-  auto priv = GGANDIVA_FUNCTION_NODE_GET_PRIVATE(function_node);\n-  for (auto node = parameters; node; node = g_list_next(node)) {\n-    auto parameter = GGANDIVA_NODE(node->data);\n-    priv->parameters = g_list_prepend(priv->parameters, g_object_ref(parameter));\n+  auto priv = GGANDIVA_BOOLEAN_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_IS_TRUE:\n+    priv->is_true = g_value_get_boolean(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n   }\n-  priv->parameters = g_list_reverse(priv->parameters);\n-  return GGANDIVA_FUNCTION_NODE(function_node);\n+}\n+\n+static void\n+ggandiva_boolean_literal_node_get_property(GObject *object,\n+                                           guint prop_id,\n+                                           GValue *value,\n+                                           GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_BOOLEAN_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_IS_TRUE:\n+    g_value_set_boolean(value, priv->is_true);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_boolean_literal_node_init(GGandivaBooleanLiteralNode *boolean_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_boolean_literal_node_class_init(GGandivaBooleanLiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_boolean_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_boolean_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_boolean(\"is-true\",\n+                              \"Is true\",\n+                              \"The value of the boolean literal\",\n+                              FALSE,\n+                              static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                       G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_IS_TRUE, spec);\n+}\n+\n+/**\n+ * ggandiva_boolean_literal_node_new:\n+ * @is_true: The value of the boolean literal.\n+ *\n+ * Returns: A newly created #GGandivaBooleanLiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaBooleanLiteralNode *\n+ggandiva_boolean_literal_node_new(gboolean is_true)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(is_true);\n+  return ggandiva_boolean_literal_node_new_raw(&gandiva_node, is_true);\n+}\n+\n+\n+typedef struct GGandivaUint8LiteralNodePrivate_ {\n+  guint8 value;\n+} GGandivaUint8LiteralNodePrivate;\n+\n+enum {\n+  PROP_UINT8_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaUint8LiteralNode,\n+                           ggandiva_uint8_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_UINT8_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaUint8LiteralNodePrivate *>(                     \\\n+    ggandiva_uint8_literal_node_get_instance_private(                 \\\n+      GGANDIVA_UINT8_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_uint8_literal_node_set_property(GObject *object,\n+                                         guint prop_id,\n+                                         const GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_UINT8_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_UINT8_VALUE:\n+    priv->value = g_value_get_uint(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_uint8_literal_node_get_property(GObject *object,\n+                                         guint prop_id,\n+                                         GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_UINT8_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_UINT8_VALUE:\n+    g_value_set_uint(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_uint8_literal_node_init(GGandivaUint8LiteralNode *uint8_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_uint8_literal_node_class_init(GGandivaUint8LiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_uint8_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_uint8_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_uint(\"value\",\n+                           \"Value\",\n+                           \"The value of the uint8 literal\",\n+                           0,\n+                           G_MAXUINT,\n+                           0,\n+                           static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                    G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_UINT8_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_uint8_literal_node_new:\n+ * @value: The value of the uint8 literal.\n+ *\n+ * Returns: A newly created #GGandivaUint8LiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaUint8LiteralNode *\n+ggandiva_uint8_literal_node_new(guint8 value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_uint8_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaUint16LiteralNodePrivate_ {\n+  guint16 value;\n+} GGandivaUint16LiteralNodePrivate;\n+\n+enum {\n+  PROP_UINT16_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaUint16LiteralNode,\n+                           ggandiva_uint16_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_UINT16_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaUint16LiteralNodePrivate *>(                     \\\n+    ggandiva_uint16_literal_node_get_instance_private(                 \\\n+      GGANDIVA_UINT16_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_uint16_literal_node_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_UINT16_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_UINT16_VALUE:\n+    priv->value = g_value_get_uint(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_uint16_literal_node_get_property(GObject *object,\n+                                          guint prop_id,\n+                                          GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_UINT16_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_UINT16_VALUE:\n+    g_value_set_uint(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_uint16_literal_node_init(GGandivaUint16LiteralNode *uint16_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_uint16_literal_node_class_init(GGandivaUint16LiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_uint16_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_uint16_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_uint(\"value\",\n+                           \"Value\",\n+                           \"The value of the uint16 literal\",\n+                           0,\n+                           G_MAXUINT16,\n+                           0,\n+                           static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                    G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_UINT16_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_uint16_literal_node_new:\n+ * @value: The value of the uint16 literal.\n+ *\n+ * Returns: A newly created #GGandivaUint16LiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaUint16LiteralNode *\n+ggandiva_uint16_literal_node_new(guint16 value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_uint16_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaUint32LiteralNodePrivate_ {\n+  guint32 value;\n+} GGandivaUint32LiteralNodePrivate;\n+\n+enum {\n+  PROP_UINT32_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaUint32LiteralNode,\n+                           ggandiva_uint32_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_UINT32_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaUint32LiteralNodePrivate *>(                     \\\n+    ggandiva_uint32_literal_node_get_instance_private(                 \\\n+      GGANDIVA_UINT32_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_uint32_literal_node_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_UINT32_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_UINT32_VALUE:\n+    priv->value = g_value_get_uint(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_uint32_literal_node_get_property(GObject *object,\n+                                          guint prop_id,\n+                                          GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_UINT32_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_UINT32_VALUE:\n+    g_value_set_uint(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_uint32_literal_node_init(GGandivaUint32LiteralNode *uint32_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_uint32_literal_node_class_init(GGandivaUint32LiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_uint32_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_uint32_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_uint(\"value\",\n+                           \"Value\",\n+                           \"The value of the uint32 literal\",\n+                           0,\n+                           G_MAXUINT32,\n+                           0,\n+                           static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                    G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_UINT32_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_uint32_literal_node_new:\n+ * @value: The value of the uint32 literal.\n+ *\n+ * Returns: A newly created #GGandivaUint32LiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaUint32LiteralNode *\n+ggandiva_uint32_literal_node_new(guint32 value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_uint32_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaUint64LiteralNodePrivate_ {\n+  guint64 value;\n+} GGandivaUint64LiteralNodePrivate;\n+\n+enum {\n+  PROP_UINT64_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaUint64LiteralNode,\n+                           ggandiva_uint64_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_UINT64_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaUint64LiteralNodePrivate *>(                     \\\n+    ggandiva_uint64_literal_node_get_instance_private(                 \\\n+      GGANDIVA_UINT64_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_uint64_literal_node_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_UINT64_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_UINT64_VALUE:\n+    priv->value = g_value_get_uint64(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_uint64_literal_node_get_property(GObject *object,\n+                                          guint prop_id,\n+                                          GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_UINT64_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_UINT64_VALUE:\n+    g_value_set_uint64(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_uint64_literal_node_init(GGandivaUint64LiteralNode *uint64_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_uint64_literal_node_class_init(GGandivaUint64LiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_uint64_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_uint64_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_uint64(\"value\",\n+                             \"Value\",\n+                             \"The value of the uint64 literal\",\n+                             0,\n+                             G_MAXUINT64,\n+                             0,\n+                             static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                      G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_UINT64_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_uint64_literal_node_new:\n+ * @value: The value of the uint64 literal.\n+ *\n+ * Returns: A newly created #GGandivaUint64LiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaUint64LiteralNode *\n+ggandiva_uint64_literal_node_new(guint64 value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_uint64_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaInt8LiteralNodePrivate_ {\n+  gint8 value;\n+} GGandivaInt8LiteralNodePrivate;\n+\n+enum {\n+  PROP_INT8_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaInt8LiteralNode,\n+                           ggandiva_int8_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_INT8_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaInt8LiteralNodePrivate *>(                     \\\n+    ggandiva_int8_literal_node_get_instance_private(                 \\\n+      GGANDIVA_INT8_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_int8_literal_node_set_property(GObject *object,\n+                                        guint prop_id,\n+                                        const GValue *value,\n+                                        GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_INT8_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_INT8_VALUE:\n+    priv->value = g_value_get_int(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_int8_literal_node_get_property(GObject *object,\n+                                        guint prop_id,\n+                                        GValue *value,\n+                                        GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_INT8_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_INT8_VALUE:\n+    g_value_set_int(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_int8_literal_node_init(GGandivaInt8LiteralNode *int8_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_int8_literal_node_class_init(GGandivaInt8LiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_int8_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_int8_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_int(\"value\",\n+                          \"Value\",\n+                          \"The value of the int8 literal\",\n+                          G_MININT,\n+                          G_MAXINT,\n+                          0,\n+                          static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                   G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_INT8_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_int8_literal_node_new:\n+ * @value: The value of the int8 literal.\n+ *\n+ * Returns: A newly created #GGandivaInt8LiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaInt8LiteralNode *\n+ggandiva_int8_literal_node_new(gint8 value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_int8_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaInt16LiteralNodePrivate_ {\n+  gint16 value;\n+} GGandivaInt16LiteralNodePrivate;\n+\n+enum {\n+  PROP_INT16_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaInt16LiteralNode,\n+                           ggandiva_int16_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_INT16_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaInt16LiteralNodePrivate *>(                     \\\n+    ggandiva_int16_literal_node_get_instance_private(                 \\\n+      GGANDIVA_INT16_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_int16_literal_node_set_property(GObject *object,\n+                                         guint prop_id,\n+                                         const GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_INT16_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_INT16_VALUE:\n+    priv->value = g_value_get_int(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_int16_literal_node_get_property(GObject *object,\n+                                         guint prop_id,\n+                                         GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_INT16_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_INT16_VALUE:\n+    g_value_set_int(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_int16_literal_node_init(GGandivaInt16LiteralNode *int16_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_int16_literal_node_class_init(GGandivaInt16LiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_int16_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_int16_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_int(\"value\",\n+                          \"Value\",\n+                          \"The value of the int16 literal\",\n+                          G_MININT16,\n+                          G_MAXINT16,\n+                          0,\n+                          static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                   G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_INT16_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_int16_literal_node_new:\n+ * @value: The value of the int16 literal.\n+ *\n+ * Returns: A newly created #GGandivaInt16LiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaInt16LiteralNode *\n+ggandiva_int16_literal_node_new(gint16 value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_int16_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaInt32LiteralNodePrivate_ {\n+  gint32 value;\n+} GGandivaInt32LiteralNodePrivate;\n+\n+enum {\n+  PROP_INT32_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaInt32LiteralNode,\n+                           ggandiva_int32_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_INT32_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaInt32LiteralNodePrivate *>(                     \\\n+    ggandiva_int32_literal_node_get_instance_private(                 \\\n+      GGANDIVA_INT32_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_int32_literal_node_set_property(GObject *object,\n+                                         guint prop_id,\n+                                         const GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_INT32_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_INT32_VALUE:\n+    priv->value = g_value_get_int(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_int32_literal_node_get_property(GObject *object,\n+                                         guint prop_id,\n+                                         GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_INT32_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_INT32_VALUE:\n+    g_value_set_int(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_int32_literal_node_init(GGandivaInt32LiteralNode *int32_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_int32_literal_node_class_init(GGandivaInt32LiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_int32_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_int32_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_int(\"value\",\n+                          \"Value\",\n+                          \"The value of the int32 literal\",\n+                          G_MININT32,\n+                          G_MAXINT32,\n+                          0,\n+                          static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                   G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_INT32_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_int32_literal_node_new:\n+ * @value: The value of the int32 literal.\n+ *\n+ * Returns: A newly created #GGandivaInt32LiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaInt32LiteralNode *\n+ggandiva_int32_literal_node_new(gint32 value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_int32_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaInt64LiteralNodePrivate_ {\n+  gint64 value;\n+} GGandivaInt64LiteralNodePrivate;\n+\n+enum {\n+  PROP_INT64_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaInt64LiteralNode,\n+                           ggandiva_int64_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_INT64_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaInt64LiteralNodePrivate *>(                     \\\n+    ggandiva_int64_literal_node_get_instance_private(                 \\\n+      GGANDIVA_INT64_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_int64_literal_node_set_property(GObject *object,\n+                                         guint prop_id,\n+                                         const GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_INT64_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_INT64_VALUE:\n+    priv->value = g_value_get_int64(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_int64_literal_node_get_property(GObject *object,\n+                                         guint prop_id,\n+                                         GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_INT64_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_INT64_VALUE:\n+    g_value_set_int64(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_int64_literal_node_init(GGandivaInt64LiteralNode *int64_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_int64_literal_node_class_init(GGandivaInt64LiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_int64_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_int64_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_int64(\"value\",\n+                            \"Value\",\n+                            \"The value of the int64 literal\",\n+                            G_MININT64,\n+                            G_MAXINT64,\n+                            0,\n+                            static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                     G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_INT64_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_int64_literal_node_new:\n+ * @value: The value of the int64 literal.\n+ *\n+ * Returns: A newly created #GGandivaInt64LiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaInt64LiteralNode *\n+ggandiva_int64_literal_node_new(gint64 value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_int64_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaFloatLiteralNodePrivate_ {\n+  gfloat value;\n+} GGandivaFloatLiteralNodePrivate;\n+\n+enum {\n+  PROP_FLOAT_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaFloatLiteralNode,\n+                           ggandiva_float_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_FLOAT_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaFloatLiteralNodePrivate *>(                     \\\n+    ggandiva_float_literal_node_get_instance_private(                 \\\n+      GGANDIVA_FLOAT_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_float_literal_node_set_property(GObject *object,\n+                                         guint prop_id,\n+                                         const GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_FLOAT_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_FLOAT_VALUE:\n+    priv->value = g_value_get_float(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_float_literal_node_get_property(GObject *object,\n+                                         guint prop_id,\n+                                         GValue *value,\n+                                         GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_FLOAT_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_FLOAT_VALUE:\n+    g_value_set_float(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_float_literal_node_init(GGandivaFloatLiteralNode *float_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_float_literal_node_class_init(GGandivaFloatLiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_float_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_float_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_float(\"value\",\n+                            \"Value\",\n+                            \"The value of the float literal\",\n+                            -G_MAXFLOAT,\n+                            G_MAXFLOAT,\n+                            0.0,\n+                            static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                     G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_FLOAT_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_float_literal_node_new:\n+ * @value: The value of the float literal.\n+ *\n+ * Returns: A newly created #GGandivaFloatLiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaFloatLiteralNode *\n+ggandiva_float_literal_node_new(gfloat value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_float_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaDoubleLiteralNodePrivate_ {\n+  gdouble value;\n+} GGandivaDoubleLiteralNodePrivate;\n+\n+enum {\n+  PROP_DOUBLE_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaDoubleLiteralNode,\n+                           ggandiva_double_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_DOUBLE_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaDoubleLiteralNodePrivate *>(                     \\\n+    ggandiva_double_literal_node_get_instance_private(                 \\\n+      GGANDIVA_DOUBLE_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_double_literal_node_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_DOUBLE_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_DOUBLE_VALUE:\n+    priv->value = g_value_get_double(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_double_literal_node_get_property(GObject *object,\n+                                          guint prop_id,\n+                                          GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_DOUBLE_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_DOUBLE_VALUE:\n+    g_value_set_double(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_double_literal_node_init(GGandivaDoubleLiteralNode *double_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_double_literal_node_class_init(GGandivaDoubleLiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->set_property = ggandiva_double_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_double_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_double(\"value\",\n+                             \"Value\",\n+                             \"The value of the double literal\",\n+                             -G_MAXDOUBLE,\n+                             G_MAXDOUBLE,\n+                             0.0,\n+                             static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                      G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_DOUBLE_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_double_literal_node_new:\n+ * @value: The value of the double literal.\n+ *\n+ * Returns: A newly created #GGandivaDoubleLiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaDoubleLiteralNode *\n+ggandiva_double_literal_node_new(gdouble value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_double_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaStringLiteralNodePrivate_ {\n+  gchar *value;\n+} GGandivaStringLiteralNodePrivate;\n+\n+enum {\n+  PROP_STRING_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaStringLiteralNode,\n+                           ggandiva_string_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_STRING_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaStringLiteralNodePrivate *>(                     \\\n+    ggandiva_string_literal_node_get_instance_private(                 \\\n+      GGANDIVA_STRING_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_string_literal_node_finalize(GObject *object)\n+{\n+  auto priv = GGANDIVA_STRING_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  g_free(priv->value);\n+\n+  G_OBJECT_CLASS(ggandiva_string_literal_node_parent_class)->finalize(object);\n+}\n+\n+static void\n+ggandiva_string_literal_node_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_STRING_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_STRING_VALUE:\n+    priv->value = g_value_dup_string(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_string_literal_node_get_property(GObject *object,\n+                                          guint prop_id,\n+                                          GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_STRING_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_STRING_VALUE:\n+    g_value_set_string(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_string_literal_node_init(GGandivaStringLiteralNode *string_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_string_literal_node_class_init(GGandivaStringLiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = ggandiva_string_literal_node_finalize;\n+  gobject_class->set_property = ggandiva_string_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_string_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_string(\"value\",\n+                             \"Value\",\n+                             \"The value of the string literal\",\n+                             nullptr,\n+                             static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                      G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_STRING_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_string_literal_node_new:\n+ * @value: The value of the string literal.\n+ *\n+ * Returns: A newly created #GGandivaStringLiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaStringLiteralNode *\n+ggandiva_string_literal_node_new(const gchar *value)\n+{\n+  auto gandiva_node = gandiva::TreeExprBuilder::MakeLiteral(value);\n+  return ggandiva_string_literal_node_new_raw(&gandiva_node, value);\n+}\n+\n+\n+typedef struct GGandivaBinaryLiteralNodePrivate_ {\n+  gchar *value;\n+} GGandivaBinaryLiteralNodePrivate;\n+\n+enum {\n+  PROP_BINARY_VALUE = 1\n+};\n+\n+G_DEFINE_TYPE_WITH_PRIVATE(GGandivaBinaryLiteralNode,\n+                           ggandiva_binary_literal_node,\n+                           GGANDIVA_TYPE_LITERAL_NODE)\n+\n+#define GGANDIVA_BINARY_LITERAL_NODE_GET_PRIVATE(object)               \\\n+  static_cast<GGandivaBinaryLiteralNodePrivate *>(                     \\\n+    ggandiva_binary_literal_node_get_instance_private(                 \\\n+      GGANDIVA_BINARY_LITERAL_NODE(object)))\n+\n+static void\n+ggandiva_binary_literal_node_finalize(GObject *object)\n+{\n+  auto priv = GGANDIVA_BINARY_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  g_free(priv->value);\n+\n+  G_OBJECT_CLASS(ggandiva_binary_literal_node_parent_class)->finalize(object);\n+}\n+\n+static void\n+ggandiva_binary_literal_node_set_property(GObject *object,\n+                                          guint prop_id,\n+                                          const GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_BINARY_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_BINARY_VALUE:\n+    priv->value = g_value_dup_string(value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_binary_literal_node_get_property(GObject *object,\n+                                          guint prop_id,\n+                                          GValue *value,\n+                                          GParamSpec *pspec)\n+{\n+  auto priv = GGANDIVA_BINARY_LITERAL_NODE_GET_PRIVATE(object);\n+\n+  switch (prop_id) {\n+  case PROP_BINARY_VALUE:\n+    g_value_set_string(value, priv->value);\n+    break;\n+  default:\n+    G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);\n+    break;\n+  }\n+}\n+\n+static void\n+ggandiva_binary_literal_node_init(GGandivaBinaryLiteralNode *binary_literal_node)\n+{\n+}\n+\n+static void\n+ggandiva_binary_literal_node_class_init(GGandivaBinaryLiteralNodeClass *klass)\n+{\n+  auto gobject_class = G_OBJECT_CLASS(klass);\n+\n+  gobject_class->finalize     = ggandiva_binary_literal_node_finalize;\n+  gobject_class->set_property = ggandiva_binary_literal_node_set_property;\n+  gobject_class->get_property = ggandiva_binary_literal_node_get_property;\n+\n+  GParamSpec *spec;\n+  spec = g_param_spec_string(\"value\",\n+                             \"Value\",\n+                             \"The value of the binary literal\",\n+                             nullptr,\n+                             static_cast<GParamFlags>(G_PARAM_READWRITE |\n+                                                      G_PARAM_CONSTRUCT_ONLY));\n+  g_object_class_install_property(gobject_class, PROP_BINARY_VALUE, spec);\n+}\n+\n+/**\n+ * ggandiva_binary_literal_node_new:\n+ * @value: The value of the binary literal.\n+ *\n+ * Returns: A newly created #GGandivaBinaryLiteralNode.\n+ *\n+ * Since: 0.12.0\n+ */\n+GGandivaBinaryLiteralNode *\n+ggandiva_binary_literal_node_new(const gchar *value)\n \n Review comment:\n   I've addressed it.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-12-10T10:14:44.537+0000",
                    "updated": "2018-12-10T10:14:44.537+0000",
                    "started": "2018-12-10T10:14:44.537+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "173471",
                    "issueId": "13201501"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 18600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2c2177[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@549d6e34[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4511283e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7a420266[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@ff96c4d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@17246a2a[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5bb8f028[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@3103980b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@75dc1162[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@411d40c9[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5db8c172[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@70d6d90e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 18600,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Dec 12 08:57:21 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-12-12T08:57:21.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3913/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-11-30T02:50:22.000+0000",
        "updated": "2018-12-12T08:57:26.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 18600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Gandiva] [GLib] Add GGandivaLiteralNode",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13201501/comment/16718634",
                    "id": "16718634",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "body": "Issue resolved by pull request 3092\n[https://github.com/apache/arrow/pull/3092]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kou",
                        "name": "kou",
                        "key": "kou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=kou&avatarId=30762",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=kou&avatarId=30762",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=kou&avatarId=30762",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=kou&avatarId=30762"
                        },
                        "displayName": "Kouhei Sutou",
                        "active": true,
                        "timeZone": "Asia/Tokyo"
                    },
                    "created": "2018-12-12T08:57:21.700+0000",
                    "updated": "2018-12-12T08:57:21.700+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|s010sg:",
        "customfield_12314139": null
    }
}