{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13316454",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316454",
    "key": "ARROW-9434",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
            "name": "kszucs",
            "key": "kszucs",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Krisztian Szucs",
            "active": true,
            "timeZone": "Europe/Budapest"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
            "name": "kszucs",
            "key": "kszucs",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Krisztian Szucs",
            "active": true,
            "timeZone": "Europe/Budapest"
        },
        "aggregateprogress": {
            "progress": 13800,
            "total": 13800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 13800,
            "total": 13800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9434/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 23,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316454/worklog/628659",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #10817:\nURL: https://github.com/apache/arrow/pull/10817\n\n\n   Also:\r\n   - implement MakeArrayFromScalar for unions\r\n   - implement ArrayBuilder::AppendScalar for unions\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-27T18:24:15.374+0000",
                    "updated": "2021-07-27T18:24:15.374+0000",
                    "started": "2021-07-27T18:24:15.374+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "628659",
                    "issueId": "13316454"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316454/worklog/628660",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10817:\nURL: https://github.com/apache/arrow/pull/10817#issuecomment-887732779\n\n\n   https://issues.apache.org/jira/browse/ARROW-9434\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-27T18:24:33.393+0000",
                    "updated": "2021-07-27T18:24:33.393+0000",
                    "started": "2021-07-27T18:24:33.393+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "628660",
                    "issueId": "13316454"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316454/worklog/628661",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #10817:\nURL: https://github.com/apache/arrow/pull/10817#issuecomment-887732797\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-27T18:24:36.734+0000",
                    "updated": "2021-07-27T18:24:36.734+0000",
                    "started": "2021-07-27T18:24:36.733+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "628661",
                    "issueId": "13316454"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316454/worklog/628662",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #10817:\nURL: https://github.com/apache/arrow/pull/10817#issuecomment-887733498\n\n\n   Ah perfect timing, thanks Antoine :)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-27T18:25:26.416+0000",
                    "updated": "2021-07-27T18:25:26.416+0000",
                    "started": "2021-07-27T18:25:26.416+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "628662",
                    "issueId": "13316454"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316454/worklog/628666",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10817:\nURL: https://github.com/apache/arrow/pull/10817#discussion_r677703724\n\n\n\n##########\nFile path: cpp/src/arrow/scalar.cc\n##########\n@@ -310,6 +316,19 @@ struct MakeNullImpl {\n     return Status::OK();\n   }\n \n+  Status Visit(const SparseUnionType& type) { return MakeUnionScalar(type); }\n+\n+  Status Visit(const DenseUnionType& type) { return MakeUnionScalar(type); }\n+\n+  template <typename T, typename ScalarType = typename TypeTraits<T>::ScalarType>\n+  Status MakeUnionScalar(const T& type) {\n+    if (type.num_fields() == 0) {\n+      return Status::Invalid(\"Cannot make scalar of empty union type\");\n+    }\n+    out_ = std::make_shared<ScalarType>(type.type_codes()[0], type_);\n\nReview comment:\n       I see there's the XXX comment below...\n\n##########\nFile path: cpp/src/arrow/scalar.cc\n##########\n@@ -310,6 +316,19 @@ struct MakeNullImpl {\n     return Status::OK();\n   }\n \n+  Status Visit(const SparseUnionType& type) { return MakeUnionScalar(type); }\n+\n+  Status Visit(const DenseUnionType& type) { return MakeUnionScalar(type); }\n+\n+  template <typename T, typename ScalarType = typename TypeTraits<T>::ScalarType>\n+  Status MakeUnionScalar(const T& type) {\n+    if (type.num_fields() == 0) {\n+      return Status::Invalid(\"Cannot make scalar of empty union type\");\n+    }\n+    out_ = std::make_shared<ScalarType>(type.type_codes()[0], type_);\n\nReview comment:\n       This will be a scalar with is_valid = false, right? Shouldn't this instead be a valid scalar containing a null scalar of one of the children?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-27T18:38:08.784+0000",
                    "updated": "2021-07-27T18:38:08.784+0000",
                    "started": "2021-07-27T18:38:08.784+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "628666",
                    "issueId": "13316454"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316454/worklog/628668",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10817:\nURL: https://github.com/apache/arrow/pull/10817#discussion_r677707357\n\n\n\n##########\nFile path: cpp/src/arrow/scalar.cc\n##########\n@@ -310,6 +316,19 @@ struct MakeNullImpl {\n     return Status::OK();\n   }\n \n+  Status Visit(const SparseUnionType& type) { return MakeUnionScalar(type); }\n+\n+  Status Visit(const DenseUnionType& type) { return MakeUnionScalar(type); }\n+\n+  template <typename T, typename ScalarType = typename TypeTraits<T>::ScalarType>\n+  Status MakeUnionScalar(const T& type) {\n+    if (type.num_fields() == 0) {\n+      return Status::Invalid(\"Cannot make scalar of empty union type\");\n+    }\n+    out_ = std::make_shared<ScalarType>(type.type_codes()[0], type_);\n\nReview comment:\n       It was already the case, this is basically adding the type code parameter.\r\n   I agree this behaviour is debatable.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-27T18:41:43.027+0000",
                    "updated": "2021-07-27T18:41:43.027+0000",
                    "started": "2021-07-27T18:41:43.027+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "628668",
                    "issueId": "13316454"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316454/worklog/630582",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10817:\nURL: https://github.com/apache/arrow/pull/10817#discussion_r678384557\n\n\n\n##########\nFile path: cpp/src/arrow/array/array_base.cc\n##########\n@@ -103,26 +103,28 @@ struct ScalarFromArraySlotImpl {\n   }\n \n   Status Visit(const SparseUnionArray& a) {\n+    const auto type_code = a.type_code(index_);\n     // child array which stores the actual value\n-    auto arr = a.field(a.child_id(index_));\n+    const auto arr = a.field(a.child_id(index_));\n     // no need to adjust the index\n     ARROW_ASSIGN_OR_RAISE(auto value, arr->GetScalar(index_));\n     if (value->is_valid) {\n-      out_ = std::shared_ptr<Scalar>(new SparseUnionScalar(value, a.type()));\n+      out_ = std::shared_ptr<Scalar>(new SparseUnionScalar(value, type_code, a.type()));\n     } else {\n       out_ = MakeNullScalar(a.type());\n\nReview comment:\n       It'd probably be better to preserve the type_code of the null slot for consistency\r\n   ```suggestion\r\n         out_ = std::shared_ptr<Scalar>(new SparseUnionScalar(type_code, a.type()));\r\n   ```\n\n##########\nFile path: cpp/src/arrow/scalar.cc\n##########\n@@ -97,8 +97,13 @@ struct ScalarHashImpl {\n     return Status::OK();\n   }\n \n-  // TODO(bkietz) implement less wimpy hashing when these have ValueType\n\nReview comment:\n       Thanks for fixing this too\n\n##########\nFile path: cpp/src/arrow/array/builder_base.cc\n##########\n@@ -206,6 +207,45 @@ struct AppendScalarImpl {\n     return Status::OK();\n   }\n \n+  Status Visit(const SparseUnionType& type) { return MakeUnionArray(type); }\n+\n+  Status Visit(const DenseUnionType& type) { return MakeUnionArray(type); }\n+\n+  template <typename T>\n+  Status MakeUnionArray(const T& type) {\n+    using BuilderType = typename TypeTraits<T>::BuilderType;\n+\n+    auto* builder = internal::checked_cast<BuilderType*>(builder_);\n+    const auto count = n_repeats_ * (scalars_end_ - scalars_begin_);\n+\n+    RETURN_NOT_OK(builder->Reserve(count));\n+\n+    DCHECK_EQ(type.num_fields(), builder->num_children());\n+    for (int field_index = 0; field_index < type.num_fields(); ++field_index) {\n+      RETURN_NOT_OK(builder->child_builder(field_index)->Reserve(count));\n+    }\n+\n+    for (int64_t i = 0; i < n_repeats_; i++) {\n+      for (const std::shared_ptr<Scalar>* s = scalars_begin_; s != scalars_end_; s++) {\n+        // For each scalar, 1. append the type code, 2. append the value to\n+        // the corresponding child (and append null to the other children)\n\nReview comment:\n       This seems inappropriate for the dense array; for that case shouldn't we *only* append to the child builder which corresponds to the appended scalar's type code? What you've written doesn't produce an invalid dense union array but it will be somewhat pessimized since there will be unnecessary null slots\n\n##########\nFile path: cpp/src/arrow/scalar_test.cc\n##########\n@@ -930,117 +930,134 @@ TEST(TestDictionaryScalar, Cast) {\n   }\n }\n \n-TEST(TestSparseUnionScalar, Basics) {\n-  auto ty = sparse_union({field(\"string\", utf8()), field(\"number\", uint64())});\n+void CheckGetValidUnionScalar(const Array& arr, int64_t index, const Scalar& expected,\n+                              const Scalar& expected_value) {\n+  ASSERT_OK_AND_ASSIGN(auto scalar, arr.GetScalar(index));\n+  ASSERT_TRUE(scalar->Equals(expected));\n+\n+  const auto& as_union = checked_cast<const UnionScalar&>(*scalar);\n+  ASSERT_TRUE(as_union.is_valid);\n+  ASSERT_TRUE(as_union.value->Equals(expected_value));\n+}\n \n-  auto alpha = MakeScalar(\"alpha\");\n-  auto beta = MakeScalar(\"beta\");\n-  ASSERT_OK_AND_ASSIGN(auto two, MakeScalar(uint64(), 2));\n+void CheckGetNullUnionScalar(const Array& arr, int64_t index) {\n+  ASSERT_OK_AND_ASSIGN(auto scalar, arr.GetScalar(index));\n+  ASSERT_TRUE(scalar->Equals(MakeNullScalar(arr.type())));\n \n-  auto scalar_alpha = SparseUnionScalar(alpha, ty);\n-  auto scalar_beta = SparseUnionScalar(beta, ty);\n-  auto scalar_two = SparseUnionScalar(two, ty);\n+  const auto& as_union = checked_cast<const UnionScalar&>(*scalar);\n+  ASSERT_FALSE(as_union.is_valid);\n+  // XXX in reality, the union array doesn't have a validity bitmap.\n+  // Validity is inferred from the underlying child value, which should maybe\n+  // be reflected here...\n+  ASSERT_EQ(as_union.value, nullptr);\n\nReview comment:\n       In this case, I think allowing UnionScalar::value to be nullptr instead of MakeNullScalar(...) is tantamount to considering shared_ptr<Scalar>(nullptr) to be an acceptable way to represent a null scalar. I think we should instead maintain scalars which are \"shaped\" as identically to their corresponding arrays as possible, and in this case I think that requires a non-nullptr UnionScalar::value.\r\n   ```suggestion\r\n     ASSERT_TRUE(as_union.value->is_valid);\r\n   ```\n\n##########\nFile path: cpp/src/arrow/array/array_base.cc\n##########\n@@ -103,26 +103,28 @@ struct ScalarFromArraySlotImpl {\n   }\n \n   Status Visit(const SparseUnionArray& a) {\n+    const auto type_code = a.type_code(index_);\n     // child array which stores the actual value\n-    auto arr = a.field(a.child_id(index_));\n+    const auto arr = a.field(a.child_id(index_));\n     // no need to adjust the index\n     ARROW_ASSIGN_OR_RAISE(auto value, arr->GetScalar(index_));\n     if (value->is_valid) {\n-      out_ = std::shared_ptr<Scalar>(new SparseUnionScalar(value, a.type()));\n+      out_ = std::shared_ptr<Scalar>(new SparseUnionScalar(value, type_code, a.type()));\n     } else {\n       out_ = MakeNullScalar(a.type());\n     }\n     return Status::OK();\n   }\n \n   Status Visit(const DenseUnionArray& a) {\n+    const auto type_code = a.type_code(index_);\n     // child array which stores the actual value\n     auto arr = a.field(a.child_id(index_));\n     // need to look up the value based on offsets\n     auto offset = a.value_offset(index_);\n     ARROW_ASSIGN_OR_RAISE(auto value, arr->GetScalar(offset));\n     if (value->is_valid) {\n-      out_ = std::shared_ptr<Scalar>(new DenseUnionScalar(value, a.type()));\n+      out_ = std::shared_ptr<Scalar>(new DenseUnionScalar(value, type_code, a.type()));\n     } else {\n       out_ = MakeNullScalar(a.type());\n\nReview comment:\n       Same:\r\n   ```suggestion\r\n         out_ = std::shared_ptr<Scalar>(new DenseUnionScalar(type_code, a.type()));\r\n   ```\n\n##########\nFile path: cpp/src/arrow/array/util.cc\n##########\n@@ -613,18 +614,85 @@ class RepeatedArrayFactory {\n     return Status::OK();\n   }\n \n-  Status Visit(const ExtensionType& type) {\n-    return Status::NotImplemented(\"construction from scalar of type \", *scalar_.type);\n+  Status Visit(const SparseUnionType& type) {\n+    const auto& union_scalar = checked_cast<const UnionScalar&>(scalar_);\n+    const auto& union_type = checked_cast<const UnionType&>(*scalar_.type);\n+    const auto scalar_type_code = union_scalar.type_code;\n+    const auto scalar_child_id = union_type.child_ids()[scalar_type_code];\n+\n+    // Create child arrays: most of them are all-null, except for the child array\n+    // for the given type code (if the scalar is valid).\n+    ArrayVector fields;\n+    for (int i = 0; i < type.num_fields(); ++i) {\n+      fields.emplace_back();\n+      if (i == scalar_child_id && scalar_.is_valid) {\n+        ARROW_ASSIGN_OR_RAISE(fields.back(),\n+                              MakeArrayFromScalar(*union_scalar.value, length_, pool_));\n+      } else {\n+        ARROW_ASSIGN_OR_RAISE(\n+            fields.back(), MakeArrayOfNull(union_type.field(i)->type(), length_, pool_));\n+      }\n+    }\n+\n+    ARROW_ASSIGN_OR_RAISE(auto type_codes_buffer, CreateUnionTypeCodes(scalar_type_code));\n+\n+    out_ = std::make_shared<SparseUnionArray>(scalar_.type, length_, std::move(fields),\n+                                              std::move(type_codes_buffer));\n+    return Status::OK();\n   }\n \n   Status Visit(const DenseUnionType& type) {\n-    return Status::NotImplemented(\"construction from scalar of type \", *scalar_.type);\n+    const auto& union_scalar = checked_cast<const UnionScalar&>(scalar_);\n+    const auto& union_type = checked_cast<const UnionType&>(*scalar_.type);\n+    const auto scalar_type_code = union_scalar.type_code;\n+    const auto scalar_child_id = union_type.child_ids()[scalar_type_code];\n+\n+    // Create child arrays: all of them are empty, except for the child array\n+    // for the given type code (if length > 0).\n+    ArrayVector fields;\n+    for (int i = 0; i < type.num_fields(); ++i) {\n+      fields.emplace_back();\n+      if (i == scalar_child_id && length_ > 0) {\n+        if (scalar_.is_valid) {\n+          // One valid element (will be referenced by multiple offsets)\n\nReview comment:\n       (we've had this discussion before, [see also](https://github.com/apache/arrow/pull/9794)) I'm not convinced this is legal- [Columnar.rst:561](https://github.com/bkietz/arrow/blob/fb117988139df607984594aac39c3ea59cecbe32/docs/source/format/Columnar.rst#L561) states that offsets must be \"in order / increasing\", not \"in order / non decreasing\" or \"in order / monotonic\".\r\n   \r\n   Clearly since CI is passing existing code accepts runs of equal offsets (and off the top of my head I can't think of a reason this would be problematic). In light of that: please open a follow up JIRA to rewrite that line of Columnar.rst to explicitly allow runs of equal offsets.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-28T15:17:56.202+0000",
                    "updated": "2021-07-28T15:17:56.202+0000",
                    "started": "2021-07-28T15:17:56.202+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "630582",
                    "issueId": "13316454"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316454/worklog/630623",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10817:\nURL: https://github.com/apache/arrow/pull/10817#discussion_r678452118\n\n\n\n##########\nFile path: cpp/src/arrow/array/array_base.cc\n##########\n@@ -103,26 +103,28 @@ struct ScalarFromArraySlotImpl {\n   }\n \n   Status Visit(const SparseUnionArray& a) {\n+    const auto type_code = a.type_code(index_);\n     // child array which stores the actual value\n-    auto arr = a.field(a.child_id(index_));\n+    const auto arr = a.field(a.child_id(index_));\n     // no need to adjust the index\n     ARROW_ASSIGN_OR_RAISE(auto value, arr->GetScalar(index_));\n     if (value->is_valid) {\n-      out_ = std::shared_ptr<Scalar>(new SparseUnionScalar(value, a.type()));\n+      out_ = std::shared_ptr<Scalar>(new SparseUnionScalar(value, type_code, a.type()));\n     } else {\n       out_ = MakeNullScalar(a.type());\n\nReview comment:\n       You're right, will do.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-28T16:10:34.315+0000",
                    "updated": "2021-07-28T16:10:34.315+0000",
                    "started": "2021-07-28T16:10:34.314+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "630623",
                    "issueId": "13316454"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316454/worklog/630624",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10817:\nURL: https://github.com/apache/arrow/pull/10817#discussion_r678453391\n\n\n\n##########\nFile path: cpp/src/arrow/array/builder_base.cc\n##########\n@@ -206,6 +207,45 @@ struct AppendScalarImpl {\n     return Status::OK();\n   }\n \n+  Status Visit(const SparseUnionType& type) { return MakeUnionArray(type); }\n+\n+  Status Visit(const DenseUnionType& type) { return MakeUnionArray(type); }\n+\n+  template <typename T>\n+  Status MakeUnionArray(const T& type) {\n+    using BuilderType = typename TypeTraits<T>::BuilderType;\n+\n+    auto* builder = internal::checked_cast<BuilderType*>(builder_);\n+    const auto count = n_repeats_ * (scalars_end_ - scalars_begin_);\n+\n+    RETURN_NOT_OK(builder->Reserve(count));\n+\n+    DCHECK_EQ(type.num_fields(), builder->num_children());\n+    for (int field_index = 0; field_index < type.num_fields(); ++field_index) {\n+      RETURN_NOT_OK(builder->child_builder(field_index)->Reserve(count));\n+    }\n+\n+    for (int64_t i = 0; i < n_repeats_; i++) {\n+      for (const std::shared_ptr<Scalar>* s = scalars_begin_; s != scalars_end_; s++) {\n+        // For each scalar, 1. append the type code, 2. append the value to\n+        // the corresponding child (and append null to the other children)\n\nReview comment:\n       Oh, you're right, indeed. Thanks for spotting this.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-28T16:12:08.067+0000",
                    "updated": "2021-07-28T16:12:08.067+0000",
                    "started": "2021-07-28T16:12:08.067+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "630624",
                    "issueId": "13316454"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316454/worklog/630634",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10817:\nURL: https://github.com/apache/arrow/pull/10817#discussion_r678465787\n\n\n\n##########\nFile path: cpp/src/arrow/scalar_test.cc\n##########\n@@ -930,117 +930,134 @@ TEST(TestDictionaryScalar, Cast) {\n   }\n }\n \n-TEST(TestSparseUnionScalar, Basics) {\n-  auto ty = sparse_union({field(\"string\", utf8()), field(\"number\", uint64())});\n+void CheckGetValidUnionScalar(const Array& arr, int64_t index, const Scalar& expected,\n+                              const Scalar& expected_value) {\n+  ASSERT_OK_AND_ASSIGN(auto scalar, arr.GetScalar(index));\n+  ASSERT_TRUE(scalar->Equals(expected));\n+\n+  const auto& as_union = checked_cast<const UnionScalar&>(*scalar);\n+  ASSERT_TRUE(as_union.is_valid);\n+  ASSERT_TRUE(as_union.value->Equals(expected_value));\n+}\n \n-  auto alpha = MakeScalar(\"alpha\");\n-  auto beta = MakeScalar(\"beta\");\n-  ASSERT_OK_AND_ASSIGN(auto two, MakeScalar(uint64(), 2));\n+void CheckGetNullUnionScalar(const Array& arr, int64_t index) {\n+  ASSERT_OK_AND_ASSIGN(auto scalar, arr.GetScalar(index));\n+  ASSERT_TRUE(scalar->Equals(MakeNullScalar(arr.type())));\n \n-  auto scalar_alpha = SparseUnionScalar(alpha, ty);\n-  auto scalar_beta = SparseUnionScalar(beta, ty);\n-  auto scalar_two = SparseUnionScalar(two, ty);\n+  const auto& as_union = checked_cast<const UnionScalar&>(*scalar);\n+  ASSERT_FALSE(as_union.is_valid);\n+  // XXX in reality, the union array doesn't have a validity bitmap.\n+  // Validity is inferred from the underlying child value, which should maybe\n+  // be reflected here...\n+  ASSERT_EQ(as_union.value, nullptr);\n\nReview comment:\n       If we want scalars to be \"shaped\" closely to their corresponding arrays, do you think `as_union.is_valid` should be true here?\r\n   (note that `as_union.valid->is_valid` would be false, unlike your suggestion)\r\n   \r\n   Note however that this PR doesn't change the current behaviour.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-28T16:27:53.956+0000",
                    "updated": "2021-07-28T16:27:53.956+0000",
                    "started": "2021-07-28T16:27:53.956+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "630634",
                    "issueId": "13316454"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316454/worklog/630635",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10817:\nURL: https://github.com/apache/arrow/pull/10817#discussion_r678468116\n\n\n\n##########\nFile path: cpp/src/arrow/array/util.cc\n##########\n@@ -613,18 +614,85 @@ class RepeatedArrayFactory {\n     return Status::OK();\n   }\n \n-  Status Visit(const ExtensionType& type) {\n-    return Status::NotImplemented(\"construction from scalar of type \", *scalar_.type);\n+  Status Visit(const SparseUnionType& type) {\n+    const auto& union_scalar = checked_cast<const UnionScalar&>(scalar_);\n+    const auto& union_type = checked_cast<const UnionType&>(*scalar_.type);\n+    const auto scalar_type_code = union_scalar.type_code;\n+    const auto scalar_child_id = union_type.child_ids()[scalar_type_code];\n+\n+    // Create child arrays: most of them are all-null, except for the child array\n+    // for the given type code (if the scalar is valid).\n+    ArrayVector fields;\n+    for (int i = 0; i < type.num_fields(); ++i) {\n+      fields.emplace_back();\n+      if (i == scalar_child_id && scalar_.is_valid) {\n+        ARROW_ASSIGN_OR_RAISE(fields.back(),\n+                              MakeArrayFromScalar(*union_scalar.value, length_, pool_));\n+      } else {\n+        ARROW_ASSIGN_OR_RAISE(\n+            fields.back(), MakeArrayOfNull(union_type.field(i)->type(), length_, pool_));\n+      }\n+    }\n+\n+    ARROW_ASSIGN_OR_RAISE(auto type_codes_buffer, CreateUnionTypeCodes(scalar_type_code));\n+\n+    out_ = std::make_shared<SparseUnionArray>(scalar_.type, length_, std::move(fields),\n+                                              std::move(type_codes_buffer));\n+    return Status::OK();\n   }\n \n   Status Visit(const DenseUnionType& type) {\n-    return Status::NotImplemented(\"construction from scalar of type \", *scalar_.type);\n+    const auto& union_scalar = checked_cast<const UnionScalar&>(scalar_);\n+    const auto& union_type = checked_cast<const UnionType&>(*scalar_.type);\n+    const auto scalar_type_code = union_scalar.type_code;\n+    const auto scalar_child_id = union_type.child_ids()[scalar_type_code];\n+\n+    // Create child arrays: all of them are empty, except for the child array\n+    // for the given type code (if length > 0).\n+    ArrayVector fields;\n+    for (int i = 0; i < type.num_fields(); ++i) {\n+      fields.emplace_back();\n+      if (i == scalar_child_id && length_ > 0) {\n+        if (scalar_.is_valid) {\n+          // One valid element (will be referenced by multiple offsets)\n\nReview comment:\n       Opened https://issues.apache.org/jira/browse/ARROW-13479\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-28T16:30:52.285+0000",
                    "updated": "2021-07-28T16:30:52.285+0000",
                    "started": "2021-07-28T16:30:52.284+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "630635",
                    "issueId": "13316454"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316454/worklog/630636",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10817:\nURL: https://github.com/apache/arrow/pull/10817#discussion_r678465787\n\n\n\n##########\nFile path: cpp/src/arrow/scalar_test.cc\n##########\n@@ -930,117 +930,134 @@ TEST(TestDictionaryScalar, Cast) {\n   }\n }\n \n-TEST(TestSparseUnionScalar, Basics) {\n-  auto ty = sparse_union({field(\"string\", utf8()), field(\"number\", uint64())});\n+void CheckGetValidUnionScalar(const Array& arr, int64_t index, const Scalar& expected,\n+                              const Scalar& expected_value) {\n+  ASSERT_OK_AND_ASSIGN(auto scalar, arr.GetScalar(index));\n+  ASSERT_TRUE(scalar->Equals(expected));\n+\n+  const auto& as_union = checked_cast<const UnionScalar&>(*scalar);\n+  ASSERT_TRUE(as_union.is_valid);\n+  ASSERT_TRUE(as_union.value->Equals(expected_value));\n+}\n \n-  auto alpha = MakeScalar(\"alpha\");\n-  auto beta = MakeScalar(\"beta\");\n-  ASSERT_OK_AND_ASSIGN(auto two, MakeScalar(uint64(), 2));\n+void CheckGetNullUnionScalar(const Array& arr, int64_t index) {\n+  ASSERT_OK_AND_ASSIGN(auto scalar, arr.GetScalar(index));\n+  ASSERT_TRUE(scalar->Equals(MakeNullScalar(arr.type())));\n \n-  auto scalar_alpha = SparseUnionScalar(alpha, ty);\n-  auto scalar_beta = SparseUnionScalar(beta, ty);\n-  auto scalar_two = SparseUnionScalar(two, ty);\n+  const auto& as_union = checked_cast<const UnionScalar&>(*scalar);\n+  ASSERT_FALSE(as_union.is_valid);\n+  // XXX in reality, the union array doesn't have a validity bitmap.\n+  // Validity is inferred from the underlying child value, which should maybe\n+  // be reflected here...\n+  ASSERT_EQ(as_union.value, nullptr);\n\nReview comment:\n       If we want scalars to be \"shaped\" closely to their corresponding arrays, do you think `as_union.is_valid` should be true here?\r\n   (note that `as_union.value->is_valid` would be false, unlike your suggestion)\r\n   \r\n   Note however that this PR doesn't change the current behaviour.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-28T16:31:35.695+0000",
                    "updated": "2021-07-28T16:31:35.695+0000",
                    "started": "2021-07-28T16:31:35.695+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "630636",
                    "issueId": "13316454"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316454/worklog/630637",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10817:\nURL: https://github.com/apache/arrow/pull/10817#discussion_r678469244\n\n\n\n##########\nFile path: cpp/src/arrow/scalar_test.cc\n##########\n@@ -930,117 +930,134 @@ TEST(TestDictionaryScalar, Cast) {\n   }\n }\n \n-TEST(TestSparseUnionScalar, Basics) {\n-  auto ty = sparse_union({field(\"string\", utf8()), field(\"number\", uint64())});\n+void CheckGetValidUnionScalar(const Array& arr, int64_t index, const Scalar& expected,\n+                              const Scalar& expected_value) {\n+  ASSERT_OK_AND_ASSIGN(auto scalar, arr.GetScalar(index));\n+  ASSERT_TRUE(scalar->Equals(expected));\n+\n+  const auto& as_union = checked_cast<const UnionScalar&>(*scalar);\n+  ASSERT_TRUE(as_union.is_valid);\n+  ASSERT_TRUE(as_union.value->Equals(expected_value));\n+}\n \n-  auto alpha = MakeScalar(\"alpha\");\n-  auto beta = MakeScalar(\"beta\");\n-  ASSERT_OK_AND_ASSIGN(auto two, MakeScalar(uint64(), 2));\n+void CheckGetNullUnionScalar(const Array& arr, int64_t index) {\n+  ASSERT_OK_AND_ASSIGN(auto scalar, arr.GetScalar(index));\n+  ASSERT_TRUE(scalar->Equals(MakeNullScalar(arr.type())));\n \n-  auto scalar_alpha = SparseUnionScalar(alpha, ty);\n-  auto scalar_beta = SparseUnionScalar(beta, ty);\n-  auto scalar_two = SparseUnionScalar(two, ty);\n+  const auto& as_union = checked_cast<const UnionScalar&>(*scalar);\n+  ASSERT_FALSE(as_union.is_valid);\n+  // XXX in reality, the union array doesn't have a validity bitmap.\n+  // Validity is inferred from the underlying child value, which should maybe\n+  // be reflected here...\n+  ASSERT_EQ(as_union.value, nullptr);\n\nReview comment:\n       Also, this would make `MakeNullScalar(union_type)` returning some slightly weird result with a `true` validity...\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-28T16:32:20.024+0000",
                    "updated": "2021-07-28T16:32:20.024+0000",
                    "started": "2021-07-28T16:32:20.024+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "630637",
                    "issueId": "13316454"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316454/worklog/630640",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10817:\nURL: https://github.com/apache/arrow/pull/10817#discussion_r678469244\n\n\n\n##########\nFile path: cpp/src/arrow/scalar_test.cc\n##########\n@@ -930,117 +930,134 @@ TEST(TestDictionaryScalar, Cast) {\n   }\n }\n \n-TEST(TestSparseUnionScalar, Basics) {\n-  auto ty = sparse_union({field(\"string\", utf8()), field(\"number\", uint64())});\n+void CheckGetValidUnionScalar(const Array& arr, int64_t index, const Scalar& expected,\n+                              const Scalar& expected_value) {\n+  ASSERT_OK_AND_ASSIGN(auto scalar, arr.GetScalar(index));\n+  ASSERT_TRUE(scalar->Equals(expected));\n+\n+  const auto& as_union = checked_cast<const UnionScalar&>(*scalar);\n+  ASSERT_TRUE(as_union.is_valid);\n+  ASSERT_TRUE(as_union.value->Equals(expected_value));\n+}\n \n-  auto alpha = MakeScalar(\"alpha\");\n-  auto beta = MakeScalar(\"beta\");\n-  ASSERT_OK_AND_ASSIGN(auto two, MakeScalar(uint64(), 2));\n+void CheckGetNullUnionScalar(const Array& arr, int64_t index) {\n+  ASSERT_OK_AND_ASSIGN(auto scalar, arr.GetScalar(index));\n+  ASSERT_TRUE(scalar->Equals(MakeNullScalar(arr.type())));\n \n-  auto scalar_alpha = SparseUnionScalar(alpha, ty);\n-  auto scalar_beta = SparseUnionScalar(beta, ty);\n-  auto scalar_two = SparseUnionScalar(two, ty);\n+  const auto& as_union = checked_cast<const UnionScalar&>(*scalar);\n+  ASSERT_FALSE(as_union.is_valid);\n+  // XXX in reality, the union array doesn't have a validity bitmap.\n+  // Validity is inferred from the underlying child value, which should maybe\n+  // be reflected here...\n+  ASSERT_EQ(as_union.value, nullptr);\n\nReview comment:\n       Also, this would make `MakeNullScalar(union_type)` return some slightly weird result with a `true` validity...\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-28T16:34:51.946+0000",
                    "updated": "2021-07-28T16:34:51.946+0000",
                    "started": "2021-07-28T16:34:51.946+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "630640",
                    "issueId": "13316454"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316454/worklog/630658",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10817:\nURL: https://github.com/apache/arrow/pull/10817#discussion_r678503252\n\n\n\n##########\nFile path: cpp/src/arrow/scalar_test.cc\n##########\n@@ -930,117 +930,134 @@ TEST(TestDictionaryScalar, Cast) {\n   }\n }\n \n-TEST(TestSparseUnionScalar, Basics) {\n-  auto ty = sparse_union({field(\"string\", utf8()), field(\"number\", uint64())});\n+void CheckGetValidUnionScalar(const Array& arr, int64_t index, const Scalar& expected,\n+                              const Scalar& expected_value) {\n+  ASSERT_OK_AND_ASSIGN(auto scalar, arr.GetScalar(index));\n+  ASSERT_TRUE(scalar->Equals(expected));\n+\n+  const auto& as_union = checked_cast<const UnionScalar&>(*scalar);\n+  ASSERT_TRUE(as_union.is_valid);\n+  ASSERT_TRUE(as_union.value->Equals(expected_value));\n+}\n \n-  auto alpha = MakeScalar(\"alpha\");\n-  auto beta = MakeScalar(\"beta\");\n-  ASSERT_OK_AND_ASSIGN(auto two, MakeScalar(uint64(), 2));\n+void CheckGetNullUnionScalar(const Array& arr, int64_t index) {\n+  ASSERT_OK_AND_ASSIGN(auto scalar, arr.GetScalar(index));\n+  ASSERT_TRUE(scalar->Equals(MakeNullScalar(arr.type())));\n \n-  auto scalar_alpha = SparseUnionScalar(alpha, ty);\n-  auto scalar_beta = SparseUnionScalar(beta, ty);\n-  auto scalar_two = SparseUnionScalar(two, ty);\n+  const auto& as_union = checked_cast<const UnionScalar&>(*scalar);\n+  ASSERT_FALSE(as_union.is_valid);\n+  // XXX in reality, the union array doesn't have a validity bitmap.\n+  // Validity is inferred from the underlying child value, which should maybe\n+  // be reflected here...\n+  ASSERT_EQ(as_union.value, nullptr);\n\nReview comment:\n       Sorry for my incorrect `suggestion`. Indeed: if we wanted to maintain consistent \"shape\" there can be no such thing as a union scalar for which `is_valid == false` since that would be analogous to a union array with a top level null slot. Having `MakeNullSalar(union_type)->is_valid == true` is counterintuitive, but it is consistent with the behavior of union arrays: `MakeArrayOfNull(union_type, 1).ValueOrDie()->IsValid(0) == true` so I still think it's the correct decision here.\r\n   \r\n   I do think the caveat is counterintuitive enough to explicitly note in the doccomments for MakeArrayOfNull and MakeNullScalar.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-28T17:18:01.524+0000",
                    "updated": "2021-07-28T17:18:01.524+0000",
                    "started": "2021-07-28T17:18:01.524+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "630658",
                    "issueId": "13316454"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316454/worklog/630659",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10817:\nURL: https://github.com/apache/arrow/pull/10817#discussion_r678504342\n\n\n\n##########\nFile path: cpp/src/arrow/scalar_test.cc\n##########\n@@ -930,117 +930,134 @@ TEST(TestDictionaryScalar, Cast) {\n   }\n }\n \n-TEST(TestSparseUnionScalar, Basics) {\n-  auto ty = sparse_union({field(\"string\", utf8()), field(\"number\", uint64())});\n+void CheckGetValidUnionScalar(const Array& arr, int64_t index, const Scalar& expected,\n+                              const Scalar& expected_value) {\n+  ASSERT_OK_AND_ASSIGN(auto scalar, arr.GetScalar(index));\n+  ASSERT_TRUE(scalar->Equals(expected));\n+\n+  const auto& as_union = checked_cast<const UnionScalar&>(*scalar);\n+  ASSERT_TRUE(as_union.is_valid);\n+  ASSERT_TRUE(as_union.value->Equals(expected_value));\n+}\n \n-  auto alpha = MakeScalar(\"alpha\");\n-  auto beta = MakeScalar(\"beta\");\n-  ASSERT_OK_AND_ASSIGN(auto two, MakeScalar(uint64(), 2));\n+void CheckGetNullUnionScalar(const Array& arr, int64_t index) {\n+  ASSERT_OK_AND_ASSIGN(auto scalar, arr.GetScalar(index));\n+  ASSERT_TRUE(scalar->Equals(MakeNullScalar(arr.type())));\n \n-  auto scalar_alpha = SparseUnionScalar(alpha, ty);\n-  auto scalar_beta = SparseUnionScalar(beta, ty);\n-  auto scalar_two = SparseUnionScalar(two, ty);\n+  const auto& as_union = checked_cast<const UnionScalar&>(*scalar);\n+  ASSERT_FALSE(as_union.is_valid);\n+  // XXX in reality, the union array doesn't have a validity bitmap.\n+  // Validity is inferred from the underlying child value, which should maybe\n+  // be reflected here...\n+  ASSERT_EQ(as_union.value, nullptr);\n\nReview comment:\n       This might be worth discussing on the ML, what do you think?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-28T17:19:35.493+0000",
                    "updated": "2021-07-28T17:19:35.493+0000",
                    "started": "2021-07-28T17:19:35.492+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "630659",
                    "issueId": "13316454"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316454/worklog/630667",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on a change in pull request #10817:\nURL: https://github.com/apache/arrow/pull/10817#discussion_r678511884\n\n\n\n##########\nFile path: cpp/src/arrow/scalar_test.cc\n##########\n@@ -930,117 +930,134 @@ TEST(TestDictionaryScalar, Cast) {\n   }\n }\n \n-TEST(TestSparseUnionScalar, Basics) {\n-  auto ty = sparse_union({field(\"string\", utf8()), field(\"number\", uint64())});\n+void CheckGetValidUnionScalar(const Array& arr, int64_t index, const Scalar& expected,\n+                              const Scalar& expected_value) {\n+  ASSERT_OK_AND_ASSIGN(auto scalar, arr.GetScalar(index));\n+  ASSERT_TRUE(scalar->Equals(expected));\n+\n+  const auto& as_union = checked_cast<const UnionScalar&>(*scalar);\n+  ASSERT_TRUE(as_union.is_valid);\n+  ASSERT_TRUE(as_union.value->Equals(expected_value));\n+}\n \n-  auto alpha = MakeScalar(\"alpha\");\n-  auto beta = MakeScalar(\"beta\");\n-  ASSERT_OK_AND_ASSIGN(auto two, MakeScalar(uint64(), 2));\n+void CheckGetNullUnionScalar(const Array& arr, int64_t index) {\n+  ASSERT_OK_AND_ASSIGN(auto scalar, arr.GetScalar(index));\n+  ASSERT_TRUE(scalar->Equals(MakeNullScalar(arr.type())));\n \n-  auto scalar_alpha = SparseUnionScalar(alpha, ty);\n-  auto scalar_beta = SparseUnionScalar(beta, ty);\n-  auto scalar_two = SparseUnionScalar(two, ty);\n+  const auto& as_union = checked_cast<const UnionScalar&>(*scalar);\n+  ASSERT_FALSE(as_union.is_valid);\n+  // XXX in reality, the union array doesn't have a validity bitmap.\n+  // Validity is inferred from the underlying child value, which should maybe\n+  // be reflected here...\n+  ASSERT_EQ(as_union.value, nullptr);\n\nReview comment:\n       SGTM, would you like me to write or will you?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-28T17:30:21.889+0000",
                    "updated": "2021-07-28T17:30:21.889+0000",
                    "started": "2021-07-28T17:30:21.888+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "630667",
                    "issueId": "13316454"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316454/worklog/630791",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on pull request #10817:\nURL: https://github.com/apache/arrow/pull/10817#issuecomment-888626956\n\n\n   It seems that my change was stolen.\r\n   Should I push it to this branch again? Or should I just paste a patch here?\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-28T21:16:13.207+0000",
                    "updated": "2021-07-28T21:16:13.207+0000",
                    "started": "2021-07-28T21:16:13.207+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "630791",
                    "issueId": "13316454"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316454/worklog/630802",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10817:\nURL: https://github.com/apache/arrow/pull/10817#discussion_r678672337\n\n\n\n##########\nFile path: cpp/src/arrow/scalar_test.cc\n##########\n@@ -930,117 +930,134 @@ TEST(TestDictionaryScalar, Cast) {\n   }\n }\n \n-TEST(TestSparseUnionScalar, Basics) {\n-  auto ty = sparse_union({field(\"string\", utf8()), field(\"number\", uint64())});\n+void CheckGetValidUnionScalar(const Array& arr, int64_t index, const Scalar& expected,\n+                              const Scalar& expected_value) {\n+  ASSERT_OK_AND_ASSIGN(auto scalar, arr.GetScalar(index));\n+  ASSERT_TRUE(scalar->Equals(expected));\n+\n+  const auto& as_union = checked_cast<const UnionScalar&>(*scalar);\n+  ASSERT_TRUE(as_union.is_valid);\n+  ASSERT_TRUE(as_union.value->Equals(expected_value));\n+}\n \n-  auto alpha = MakeScalar(\"alpha\");\n-  auto beta = MakeScalar(\"beta\");\n-  ASSERT_OK_AND_ASSIGN(auto two, MakeScalar(uint64(), 2));\n+void CheckGetNullUnionScalar(const Array& arr, int64_t index) {\n+  ASSERT_OK_AND_ASSIGN(auto scalar, arr.GetScalar(index));\n+  ASSERT_TRUE(scalar->Equals(MakeNullScalar(arr.type())));\n \n-  auto scalar_alpha = SparseUnionScalar(alpha, ty);\n-  auto scalar_beta = SparseUnionScalar(beta, ty);\n-  auto scalar_two = SparseUnionScalar(two, ty);\n+  const auto& as_union = checked_cast<const UnionScalar&>(*scalar);\n+  ASSERT_FALSE(as_union.is_valid);\n+  // XXX in reality, the union array doesn't have a validity bitmap.\n+  // Validity is inferred from the underlying child value, which should maybe\n+  // be reflected here...\n+  ASSERT_EQ(as_union.value, nullptr);\n\nReview comment:\n       You can write if you have time, otherwise I'll do it tomorrow.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-28T21:42:25.992+0000",
                    "updated": "2021-07-28T21:42:25.992+0000",
                    "started": "2021-07-28T21:42:25.991+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "630802",
                    "issueId": "13316454"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316454/worklog/630813",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #10817:\nURL: https://github.com/apache/arrow/pull/10817#issuecomment-888655480\n\n\n   @kou I'm sorry, I had forgot to update before force-rebasing :-( You can push it again.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-28T22:13:50.641+0000",
                    "updated": "2021-07-28T22:13:50.641+0000",
                    "started": "2021-07-28T22:13:50.640+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "630813",
                    "issueId": "13316454"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 13800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@526675b7[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2423e397[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@14104d89[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2f942bc7[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@64e81296[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@435f6baa[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@55b50a4d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5b71d92f[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7fa90c75[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@47932a11[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a89b7cc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@6fe4a913[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 13800,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Aug 02 15:34:37 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-08-02T15:34:37.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9434/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-07-13T12:40:49.000+0000",
        "updated": "2021-08-02T15:34:45.000+0000",
        "timeoriginalestimate": null,
        "description": "The format allows duplicated types in unions, so in order to properly construct an array from a unionscalar we need to know which type to use. Currently we only store the value as another scalar.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 13800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Store type_code information in UnionScalar::value",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316454/comment/17306356",
                    "id": "17306356",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "[~kszucs] Is this something you want to do for 4.0.0 ?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-03-22T16:34:56.341+0000",
                    "updated": "2021-03-22T16:34:56.341+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316454/comment/17320198",
                    "id": "17320198",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "body": "Postponed to 5.0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
                        "name": "kszucs",
                        "key": "kszucs",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Krisztian Szucs",
                        "active": true,
                        "timeZone": "Europe/Budapest"
                    },
                    "created": "2021-04-13T14:07:35.054+0000",
                    "updated": "2021-04-13T14:07:35.054+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13316454/comment/17391661",
                    "id": "17391661",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 10817\n[https://github.com/apache/arrow/pull/10817]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-08-02T15:34:37.245+0000",
                    "updated": "2021-08-02T15:34:37.245+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0gpc0:",
        "customfield_12314139": null
    }
}