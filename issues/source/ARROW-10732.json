{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13342673",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342673",
    "key": "ARROW-10732",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12603898",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12603898",
                "type": {
                    "id": "10032",
                    "name": "Blocker",
                    "inward": "is blocked by",
                    "outward": "blocks",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10032"
                },
                "outwardIssue": {
                    "id": "13343116",
                    "key": "ARROW-10761",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13343116",
                    "fields": {
                        "summary": "[Rust] [DataFusion] Add SQL support for referencing fields in structs",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12604354",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12604354",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13344379",
                    "key": "ARROW-10813",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344379",
                    "fields": {
                        "summary": "[Rust] [DataFusion] Implement DFSchema",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12335005",
                "id": "12335005",
                "name": "Rust - DataFusion"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 21000,
            "total": 21000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 21000,
            "total": 21000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10732/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 35,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342673/worklog/520523",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove opened a new pull request #8839:\nURL: https://github.com/apache/arrow/pull/8839\n\n\n   The first commit adds DFSchema and DFField to support qualified field names in DataFusion.\r\n   \r\n   I am now working on updating the logical plan to use this new schema.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-05T17:30:50.256+0000",
                    "updated": "2020-12-05T17:30:50.256+0000",
                    "started": "2020-12-05T17:30:50.256+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520523",
                    "issueId": "13342673"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342673/worklog/520526",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8839:\nURL: https://github.com/apache/arrow/pull/8839#issuecomment-739325065\n\n\n   https://issues.apache.org/jira/browse/ARROW-10732\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-05T17:34:18.587+0000",
                    "updated": "2020-12-05T17:34:18.587+0000",
                    "started": "2020-12-05T17:34:18.587+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520526",
                    "issueId": "13342673"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342673/worklog/520553",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #8839:\nURL: https://github.com/apache/arrow/pull/8839#issuecomment-739412569\n\n\n   @alamb @jorgecarleitao @Dandandan fyi\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-05T20:35:40.499+0000",
                    "updated": "2020-12-05T20:35:40.499+0000",
                    "started": "2020-12-05T20:35:40.498+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520553",
                    "issueId": "13342673"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342673/worklog/520576",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on pull request #8839:\nURL: https://github.com/apache/arrow/pull/8839#issuecomment-739422076\n\n\n   This is great! I didn't see any strange things now, code looks clean and it sounds like this could be integrated and further tested.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-05T22:02:45.983+0000",
                    "updated": "2020-12-05T22:02:45.983+0000",
                    "started": "2020-12-05T22:02:45.983+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520576",
                    "issueId": "13342673"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342673/worklog/520597",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #8839:\nURL: https://github.com/apache/arrow/pull/8839#issuecomment-739448512\n\n\n   Hey @andygrove . Thanks a lot for this!\r\n   \r\n   I would benefit from understanding the use-case for `DFSchema` at the physical plan. Note that this is primarily for my own understanding, as I am only familiar with qualifier names in SQL to disambiguate columns in expressions concerning more than one table - not in the representation of a statement at the logical and physical plan. Maybe you could give an example of where `arrow::Schema` is not sufficient at the physical level?\r\n   \r\n   My current understanding is that, without qualifiers, we can't write things like `(table1.a + 1) >= (table2.b - 1)`.\r\n   \r\n   What I am trying to understand is when do we need such an expression at the physical level. Typically, these plans require some form of join and are mapped to `filter(join(a, b))`, in which case I do not see how a qualifier is used: before the join there are two input nodes that are joined on a key (i.e. always an equality relationship between columns); after the join, there is a single node, and thus qualifiers are not needed.\r\n   \r\n   One use case case I see for this is when the join is itself over an expression, e.g. `JOIN ON (table1.a + 1) == (table2.b - 1)`. However, in this case, at the physical level, this can always be mapped to `join(projection())`. I.e. it seems to me that it is more of a convenience at building a logical statement than a necessity for executing such a statement.\r\n   \r\n   If the goal is that we can add the qualifier to the column name after the join, to desambiguate `table1.a` from `table2.a`, wouldn't it be easier to do that at the logical plan?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-06T03:17:48.120+0000",
                    "updated": "2020-12-06T03:17:48.120+0000",
                    "started": "2020-12-06T03:17:48.119+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520597",
                    "issueId": "13342673"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342673/worklog/520598",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao edited a comment on pull request #8839:\nURL: https://github.com/apache/arrow/pull/8839#issuecomment-739448512\n\n\n   Hey @andygrove . Thanks a lot for this!\r\n   \r\n   I would benefit from understanding the use-case for `DFSchema` at the physical plan. Note that this is primarily for my own understanding, as I am only familiar with qualifier names in SQL to disambiguate columns in expressions concerning more than one table - not in the representation of a statement at the logical and physical plan. Maybe you could give an example of where `arrow::Schema` is not sufficient at the physical level?\r\n   \r\n   My current understanding is that, without qualifiers, we can't write things like `(table1.a + 1) >= (table2.b - 1)`.\r\n   \r\n   What I am trying to understand is when do we need such an expression at the physical level. Typically, these plans require some form of join and are mapped to `filter(join(a, b))`, in which case I do not see how a qualifier is used: before the join there are two input nodes that are joined on a key (i.e. always an equality relationship between columns); after the join, there is a single node, and thus qualifiers are not needed.\r\n   \r\n   One use case case I see for this is when the join is itself over an expression, e.g. `JOIN ON (table1.a + 1) == (table2.b - 1)`. However, in this case, at the physical level, this can always be mapped to `join(projection())`. I.e. it seems to me that it is more of a convenience at building a logical statement than a necessity for executing such a statement.\r\n   \r\n   If the goal is that we can add the qualifier to the column name after the join, to desambiguate `table1.a` from `table2.a`, wouldn't it be easier to do that at the logical plan alone?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-06T03:22:53.681+0000",
                    "updated": "2020-12-06T03:22:53.681+0000",
                    "started": "2020-12-06T03:22:53.681+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520598",
                    "issueId": "13342673"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342673/worklog/520599",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #8839:\nURL: https://github.com/apache/arrow/pull/8839#issuecomment-739448886\n\n\n   Hi @jorgecarleitao did you get a chance to read the design document? There is a link to it from the JIRA.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-06T03:23:16.900+0000",
                    "updated": "2020-12-06T03:23:16.900+0000",
                    "started": "2020-12-06T03:23:16.899+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520599",
                    "issueId": "13342673"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342673/worklog/520600",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #8839:\nURL: https://github.com/apache/arrow/pull/8839#issuecomment-739449143\n\n\n   > Hi @jorgecarleitao did you get a chance to read the design document? There is a link to it from the JIRA.\r\n   \r\n   Yeah, I missed that one and the whole discussion on the issue: https://docs.google.com/document/d/1BFo7ruJayCulAHLa9-noaHXbgcaAH_4LuOJFGJnDHkc/edit#heading=h.su3u27lcpr3l , sorry about that.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-06T03:27:12.001+0000",
                    "updated": "2020-12-06T03:27:12.001+0000",
                    "started": "2020-12-06T03:27:12.001+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520600",
                    "issueId": "13342673"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342673/worklog/520601",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #8839:\nURL: https://github.com/apache/arrow/pull/8839#issuecomment-739449229\n\n\n   You may have a point about only needing this at the logical level. I am not sure, but I will take a look at this tomorrow.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-06T03:28:37.898+0000",
                    "updated": "2020-12-06T03:28:37.898+0000",
                    "started": "2020-12-06T03:28:37.897+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520601",
                    "issueId": "13342673"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342673/worklog/520602",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao edited a comment on pull request #8839:\nURL: https://github.com/apache/arrow/pull/8839#issuecomment-739448512\n\n\n   Hey @andygrove . Thanks a lot for this!\r\n   \r\n   I would benefit from understanding the use-case for `DFSchema` at the physical plan. Note that this is primarily for my own understanding, as I am only familiar with qualifier names in SQL to disambiguate columns in expressions concerning more than one table - not in the representation of a statement at the physical plan. Maybe you could give an example of where `arrow::Schema` is not sufficient at the physical level?\r\n   \r\n   My current understanding is that, without qualifiers, we can't write things like `(table1.a + 1) >= (table2.b - 1)`.\r\n   \r\n   What I am trying to understand is when do we need such an expression at the physical level. Typically, these plans require some form of join and are mapped to `filter(join(a, b))`, in which case I do not see how a qualifier is used: before the join there are two input nodes that are joined on a key (i.e. always an equality relationship between columns); after the join, there is a single node, and thus qualifiers are not needed.\r\n   \r\n   One use case case I see for this is when the join is itself over an expression, e.g. `JOIN ON (table1.a + 1) == (table2.b - 1)`. However, in this case, at the physical level, this can always be mapped to `join(projection())`. I.e. it seems to me that it is more of a convenience at building a logical statement than a necessity for executing such a statement.\r\n   \r\n   If the goal is that we can add the qualifier to the column name after the join, to desambiguate `table1.a` from `table2.a`, wouldn't it be easier to do that at the logical plan alone?\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-06T03:34:24.428+0000",
                    "updated": "2020-12-06T03:34:24.428+0000",
                    "started": "2020-12-06T03:34:24.427+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520602",
                    "issueId": "13342673"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342673/worklog/520668",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8839:\nURL: https://github.com/apache/arrow/pull/8839#discussion_r536985161\n\n\n\n##########\nFile path: rust/datafusion/src/logical_plan/dfschema.rs\n##########\n@@ -0,0 +1,415 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! DFSchema is an extended schema struct that DataFusion uses to provide support for\n+//! fields with optional relation names.\n+\n+use std::collections::HashSet;\n+use std::sync::Arc;\n+\n+use crate::error::{DataFusionError, Result};\n+\n+use arrow::datatypes::{DataType, Field, Schema, SchemaRef};\n+use std::fmt::{Display, Formatter};\n+\n+/// A reference-counted reference to a `DFSchema`.\n+pub type DFSchemaRef = Arc<DFSchema>;\n+\n+/// DFSchema wraps an Arrow schema and adds relation names\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct DFSchema {\n+    /// Fields\n+    fields: Vec<DFField>,\n+}\n+\n+impl DFSchema {\n+    /// Creates an empty `DFSchema`\n+    pub fn empty() -> Self {\n+        Self { fields: vec![] }\n\nReview comment:\n       Would it make sense to make this a hashset? Or convert to vec in last step.\r\n   \n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-06T08:15:26.206+0000",
                    "updated": "2020-12-06T08:15:26.206+0000",
                    "started": "2020-12-06T08:15:26.205+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520668",
                    "issueId": "13342673"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342673/worklog/520669",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8839:\nURL: https://github.com/apache/arrow/pull/8839#discussion_r536986106\n\n\n\n##########\nFile path: rust/datafusion/src/logical_plan/dfschema.rs\n##########\n@@ -0,0 +1,415 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! DFSchema is an extended schema struct that DataFusion uses to provide support for\n+//! fields with optional relation names.\n+\n+use std::collections::HashSet;\n+use std::sync::Arc;\n+\n+use crate::error::{DataFusionError, Result};\n+\n+use arrow::datatypes::{DataType, Field, Schema, SchemaRef};\n+use std::fmt::{Display, Formatter};\n+\n+/// A reference-counted reference to a `DFSchema`.\n+pub type DFSchemaRef = Arc<DFSchema>;\n+\n+/// DFSchema wraps an Arrow schema and adds relation names\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct DFSchema {\n+    /// Fields\n+    fields: Vec<DFField>,\n+}\n+\n+impl DFSchema {\n+    /// Creates an empty `DFSchema`\n+    pub fn empty() -> Self {\n+        Self { fields: vec![] }\n+    }\n+\n+    /// Create a new `DFSchema`\n+    pub fn new(fields: Vec<DFField>) -> Result<Self> {\n+        let mut qualified_names: HashSet<(&str, &str)> = HashSet::new();\n+        let mut unqualified_names: HashSet<&str> = HashSet::new();\n+        for field in &fields {\n+            if let Some(qualifier) = field.qualifier() {\n+                if !qualified_names.insert((qualifier, field.name())) {\n+                    return Err(DataFusionError::Plan(format!(\n+                        \"Joined schema would contain duplicate qualified field name '{}'\",\n+                        field.qualified_name()\n+                    )));\n+                }\n+            } else {\n+                if !unqualified_names.insert(field.name()) {\n+                    return Err(DataFusionError::Plan(\n+                        format!(\"Joined schema would contain duplicate unqualified field name '{}'\",\n+                                field.name())\n+                    ));\n+                }\n+            }\n+        }\n+\n+        // check for mix of qualified and unqualified field with same unqualified name\n+        // note that we need to sort the contents of the HashSet first so that errors are\n+        // deterministic\n+        let mut qualified_names: Vec<&(&str, &str)> = qualified_names.iter().collect();\n+        qualified_names.sort_by(|a, b| {\n+            let a = format!(\"{}.{}\", a.0, a.1);\n+            let b = format!(\"{}.{}\", b.0, b.1);\n+            a.cmp(&b)\n+        });\n+        for (qualifier, name) in &qualified_names {\n+            if unqualified_names.contains(name) {\n+                return Err(DataFusionError::Plan(format!(\n+                    \"Joined schema would contain qualified field name '{}.{}' \\\n+                    and unqualified field name '{}' which would be ambiguous\",\n+                    qualifier, name, name\n+                )));\n+            }\n+        }\n+        Ok(Self { fields })\n+    }\n+\n+    /// Create a `DFSchema` from an Arrow schema\n+    pub fn from(schema: &Schema) -> Result<Self> {\n+        Self::new(\n+            schema\n+                .fields()\n+                .iter()\n+                .map(|f| DFField {\n+                    field: f.clone(),\n+                    qualifier: None,\n+                })\n+                .collect(),\n+        )\n+    }\n+\n+    /// Create a `DFSchema` from an Arrow schema\n+    pub fn from_qualified(qualifier: &str, schema: &Schema) -> Result<Self> {\n+        Self::new(\n+            schema\n+                .fields()\n+                .iter()\n+                .map(|f| DFField {\n+                    field: f.clone(),\n+                    qualifier: Some(qualifier.to_owned()),\n+                })\n+                .collect(),\n+        )\n+    }\n+\n+    /// Combine two schemas\n+    pub fn join(&self, schema: &DFSchema) -> Result<Self> {\n+        let mut fields = self.fields.clone();\n+        fields.extend_from_slice(schema.fields().as_slice());\n+        Self::new(fields)\n+    }\n+\n+    /// Get a list of fields\n+    pub fn fields(&self) -> &Vec<DFField> {\n+        &self.fields\n+    }\n+\n+    /// Returns an immutable reference of a specific `Field` instance selected using an\n+    /// offset within the internal `fields` vector\n+    pub fn field(&self, i: usize) -> &DFField {\n+        &self.fields[i]\n+    }\n+\n+    /// Find the index of the column with the given name\n+    pub fn index_of(&self, name: &str) -> Result<usize> {\n+        for i in 0..self.fields.len() {\n\nReview comment:\n       This could use Vec::find\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-06T08:21:02.691+0000",
                    "updated": "2020-12-06T08:21:02.691+0000",
                    "started": "2020-12-06T08:21:02.690+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520669",
                    "issueId": "13342673"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342673/worklog/520670",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Dandandan commented on a change in pull request #8839:\nURL: https://github.com/apache/arrow/pull/8839#discussion_r536986106\n\n\n\n##########\nFile path: rust/datafusion/src/logical_plan/dfschema.rs\n##########\n@@ -0,0 +1,415 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+//! DFSchema is an extended schema struct that DataFusion uses to provide support for\n+//! fields with optional relation names.\n+\n+use std::collections::HashSet;\n+use std::sync::Arc;\n+\n+use crate::error::{DataFusionError, Result};\n+\n+use arrow::datatypes::{DataType, Field, Schema, SchemaRef};\n+use std::fmt::{Display, Formatter};\n+\n+/// A reference-counted reference to a `DFSchema`.\n+pub type DFSchemaRef = Arc<DFSchema>;\n+\n+/// DFSchema wraps an Arrow schema and adds relation names\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub struct DFSchema {\n+    /// Fields\n+    fields: Vec<DFField>,\n+}\n+\n+impl DFSchema {\n+    /// Creates an empty `DFSchema`\n+    pub fn empty() -> Self {\n+        Self { fields: vec![] }\n+    }\n+\n+    /// Create a new `DFSchema`\n+    pub fn new(fields: Vec<DFField>) -> Result<Self> {\n+        let mut qualified_names: HashSet<(&str, &str)> = HashSet::new();\n+        let mut unqualified_names: HashSet<&str> = HashSet::new();\n+        for field in &fields {\n+            if let Some(qualifier) = field.qualifier() {\n+                if !qualified_names.insert((qualifier, field.name())) {\n+                    return Err(DataFusionError::Plan(format!(\n+                        \"Joined schema would contain duplicate qualified field name '{}'\",\n+                        field.qualified_name()\n+                    )));\n+                }\n+            } else {\n+                if !unqualified_names.insert(field.name()) {\n+                    return Err(DataFusionError::Plan(\n+                        format!(\"Joined schema would contain duplicate unqualified field name '{}'\",\n+                                field.name())\n+                    ));\n+                }\n+            }\n+        }\n+\n+        // check for mix of qualified and unqualified field with same unqualified name\n+        // note that we need to sort the contents of the HashSet first so that errors are\n+        // deterministic\n+        let mut qualified_names: Vec<&(&str, &str)> = qualified_names.iter().collect();\n+        qualified_names.sort_by(|a, b| {\n+            let a = format!(\"{}.{}\", a.0, a.1);\n+            let b = format!(\"{}.{}\", b.0, b.1);\n+            a.cmp(&b)\n+        });\n+        for (qualifier, name) in &qualified_names {\n+            if unqualified_names.contains(name) {\n+                return Err(DataFusionError::Plan(format!(\n+                    \"Joined schema would contain qualified field name '{}.{}' \\\n+                    and unqualified field name '{}' which would be ambiguous\",\n+                    qualifier, name, name\n+                )));\n+            }\n+        }\n+        Ok(Self { fields })\n+    }\n+\n+    /// Create a `DFSchema` from an Arrow schema\n+    pub fn from(schema: &Schema) -> Result<Self> {\n+        Self::new(\n+            schema\n+                .fields()\n+                .iter()\n+                .map(|f| DFField {\n+                    field: f.clone(),\n+                    qualifier: None,\n+                })\n+                .collect(),\n+        )\n+    }\n+\n+    /// Create a `DFSchema` from an Arrow schema\n+    pub fn from_qualified(qualifier: &str, schema: &Schema) -> Result<Self> {\n+        Self::new(\n+            schema\n+                .fields()\n+                .iter()\n+                .map(|f| DFField {\n+                    field: f.clone(),\n+                    qualifier: Some(qualifier.to_owned()),\n+                })\n+                .collect(),\n+        )\n+    }\n+\n+    /// Combine two schemas\n+    pub fn join(&self, schema: &DFSchema) -> Result<Self> {\n+        let mut fields = self.fields.clone();\n+        fields.extend_from_slice(schema.fields().as_slice());\n+        Self::new(fields)\n+    }\n+\n+    /// Get a list of fields\n+    pub fn fields(&self) -> &Vec<DFField> {\n+        &self.fields\n+    }\n+\n+    /// Returns an immutable reference of a specific `Field` instance selected using an\n+    /// offset within the internal `fields` vector\n+    pub fn field(&self, i: usize) -> &DFField {\n+        &self.fields[i]\n+    }\n+\n+    /// Find the index of the column with the given name\n+    pub fn index_of(&self, name: &str) -> Result<usize> {\n+        for i in 0..self.fields.len() {\n\nReview comment:\n       This could use Vec::position\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-06T08:22:30.465+0000",
                    "updated": "2020-12-06T08:22:30.465+0000",
                    "started": "2020-12-06T08:22:30.465+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520670",
                    "issueId": "13342673"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342673/worklog/520741",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on a change in pull request #8839:\nURL: https://github.com/apache/arrow/pull/8839#discussion_r537030760\n\n\n\n##########\nFile path: rust/datafusion/src/execution/context.rs\n##########\n@@ -214,7 +212,7 @@ impl ExecutionContext {\n             has_header: options.has_header,\n             delimiter: Some(options.delimiter),\n             projection: None,\n-            projected_schema: csv.schema(),\n+            projected_schema: Arc::new(DFSchema::from(&csv.schema())),\n\nReview comment:\n       We could make this code look better if we implemented `impl Into<DFSchemaRef> for SchemaRef` -- so then we could write something like `projected_schema: csv.schema().into(),`\r\n   \r\n   Doing so in some follow on PR would be totally fine\r\n   \n\n##########\nFile path: rust/datafusion/src/execution/context.rs\n##########\n@@ -408,7 +406,7 @@ impl ExecutionContext {\n             let path = Path::new(&path).join(&filename);\n             let file = fs::File::create(path)?;\n             let mut writer =\n-                ArrowWriter::try_new(file.try_clone().unwrap(), plan.schema(), None)?;\n+                ArrowWriter::try_new(file.try_clone().unwrap(), plan.schema().to_arrow_schema(), None)?;\n\nReview comment:\n       We could likewise implement `impl Into<Schema> for DFSchema` and so call `into()` rather than `to_arrow_schema()`. This is again just a stylistic thing\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-06T12:49:29.984+0000",
                    "updated": "2020-12-06T12:49:29.984+0000",
                    "started": "2020-12-06T12:49:29.983+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520741",
                    "issueId": "13342673"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342673/worklog/520786",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #8839:\nURL: https://github.com/apache/arrow/pull/8839#issuecomment-739528704\n\n\n   @jorgecarleitao @alamb I've been looking at the question of whether the physical plan should use DFSchema. Here is the current (in master) implementation of the physical expression for Column:\r\n   \r\n   ```rust\r\n   impl PhysicalExpr for Column {\r\n       /// Get the data type of this expression, given the schema of the input\r\n       fn data_type(&self, input_schema: &Schema) -> Result<DataType> {\r\n           Ok(input_schema\r\n               .field_with_name(&self.name)?\r\n               .data_type()\r\n               .clone())\r\n       }\r\n   \r\n       /// Decide whehter this expression is nullable, given the schema of the input\r\n       fn nullable(&self, input_schema: &Schema) -> Result<bool> {\r\n           Ok(input_schema.field_with_name(&self.name)?.is_nullable())\r\n       }\r\n   \r\n       /// Evaluate the expression\r\n       fn evaluate(&self, batch: &RecordBatch) -> Result<ColumnarValue> {\r\n           Ok(ColumnarValue::Array(\r\n               batch.column(batch.schema().index_of(&self.name)?).clone(),\r\n           ))\r\n       }\r\n   }\r\n   ```\r\n   \r\n   As you can see, the `data_type` and `nullable` use the schema from the plan whereas the `evaluate` method uses the schema from the record batch, which is a little inconsistent. They should probably all use the same schema.\r\n   \r\n   The bigger issue though is that this expression is looking up columns by name, so how do we support qualified names here? I see the following choices:\r\n   \r\n   1. Have `ExecutionPlan.schema()` use `DFSchema` as I have done in this PR\r\n   2. Use qualified names in the Arrow schema field name e.g. \"t1.foo\"\r\n   3. Change the Column physical expression to refer to columns by index rather than name\r\n   \r\n   Maybe there are other options that I am not seeing?\r\n   \r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-06T16:43:19.955+0000",
                    "updated": "2020-12-06T16:43:19.955+0000",
                    "started": "2020-12-06T16:43:19.955+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520786",
                    "issueId": "13342673"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342673/worklog/520790",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorgecarleitao commented on pull request #8839:\nURL: https://github.com/apache/arrow/pull/8839#issuecomment-739532745\n\n\n   Thanks a lot for looking at this. All excellent points. I now see that this is tricky :)\r\n   \r\n   Thinking about what you wrote, if we plan the Logical as `t1.a, t2.a`, wouldn't the column names become `a, a` on the `RecordBatch`? i.e. there will be a discrepancy between the schema provided by `df.schema()` and the `RecordBatches::schema()` returned by `collect()`, no?\r\n   \r\n   I think that this will happen even if we pass `DFSchema` to the physical plan (1.) or use indexes (3.), as any map `qualified name -> unqualified` is lossy (the qualifier), and thus never recoverable at the `RecordBatch`'s schema.\r\n   \r\n   This IMO leaves us with 2., which is what I would try: change the physical planner to alias/rewrite column names with the qualifier when the physical plan is created. This will cause the resulting `RecordBatch`'s schema to have columns named `t1.a` and `t2.a`, thereby guaranteeing the invariant that the output schema of the physical execution matches the schema of the logical plan.\r\n   \r\n   I.e. The invariant that `SELECT t1.a, t2.a, c ...` yields a schema whose columns are named `[\"t1.a\", \"t2.a\", \"c\"]` is preserved. \r\n   \r\n   Note that we already do this when performing coercion: we preserve the logical schema name by injecting cast ops during physical (and not logical) planning, so that if the user wrote `SELECT sqrt(f32) ...`, the resulting name on the `RecordBatch::schema()` is `sqrt(f32)`, even if the physical operation performed was `sqrt(CAST(f32 as Float64))`.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-06T17:10:54.089+0000",
                    "updated": "2020-12-06T17:10:54.089+0000",
                    "started": "2020-12-06T17:10:54.089+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520790",
                    "issueId": "13342673"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342673/worklog/520800",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on pull request #8839:\nURL: https://github.com/apache/arrow/pull/8839#issuecomment-739544637\n\n\n   Thanks @jorgecarleitao I think that makes a lot of sense. Unfortunately I am running into some issues implementing this due to the physical planner calling into the logical planner to create names and it is getting hard to mix and match these schemas.\r\n   \r\n   I am going to have to take a step back and break this down into smaller steps I think.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-06T18:41:40.659+0000",
                    "updated": "2020-12-06T18:41:40.659+0000",
                    "started": "2020-12-06T18:41:40.658+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520800",
                    "issueId": "13342673"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342673/worklog/520804",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "andygrove commented on a change in pull request #8839:\nURL: https://github.com/apache/arrow/pull/8839#discussion_r537102128\n\n\n\n##########\nFile path: rust/datafusion/src/execution/context.rs\n##########\n@@ -408,7 +406,7 @@ impl ExecutionContext {\n             let path = Path::new(&path).join(&filename);\n             let file = fs::File::create(path)?;\n             let mut writer =\n-                ArrowWriter::try_new(file.try_clone().unwrap(), plan.schema(), None)?;\n+                ArrowWriter::try_new(file.try_clone().unwrap(), plan.schema().to_arrow_schema(), None)?;\n\nReview comment:\n       I've broken this out into a separate PR https://github.com/apache/arrow/pull/8857\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-06T19:01:29.525+0000",
                    "updated": "2020-12-06T19:01:29.525+0000",
                    "started": "2020-12-06T19:01:29.525+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "520804",
                    "issueId": "13342673"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342673/worklog/521169",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb commented on pull request #8839:\nURL: https://github.com/apache/arrow/pull/8839#issuecomment-739934509\n\n\n   > As you can see, the data_type and nullable use the schema from the plan whereas the evaluate method uses the schema from the record batch, which is a little inconsistent. They should probably all use the same schema.\r\n   \r\n   I agree -- I recommend using the schema from the plan for consistency.\r\n   \r\n   > This IMO leaves us with 2., which is what I would try: change the physical planner to alias/rewrite column names with the qualifier when the physical plan is created. This will cause the resulting RecordBatch's schema to have columns named t1.a and t2.a, thereby guaranteeing the invariant that the output schema of the physical execution matches the schema of the logical plan.\r\n   \r\n   \r\n   I agree with this recommendation -- I would recommend when moving from logical --> physical plan, that we always use the fully qualified name of the field, which would avoid ambiguity. If we don't like `t1.foo` being sprinkled around in plans that only have one table or where the column names aren't ambiguous, we could implement a (logical plan) optimizer pass to remove unneeded qualifiers. \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-07T13:58:18.929+0000",
                    "updated": "2020-12-07T13:58:18.929+0000",
                    "started": "2020-12-07T13:58:18.928+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "521169",
                    "issueId": "13342673"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342673/worklog/521170",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "alamb edited a comment on pull request #8839:\nURL: https://github.com/apache/arrow/pull/8839#issuecomment-739934509\n\n\n   > As you can see, the data_type and nullable use the schema from the plan whereas the evaluate method uses the schema from the record batch, which is a little inconsistent. They should probably all use the same schema.\r\n   \r\n   I agree -- I recommend using the schema from the plan for consistency.\r\n   \r\n   > This IMO leaves us with 2., which is what I would try: change the physical planner to alias/rewrite column names with the qualifier when the physical plan is created. This will cause the resulting RecordBatch's schema to have columns named t1.a and t2.a, thereby guaranteeing the invariant that the output schema of the physical execution matches the schema of the logical plan.\r\n   \r\n   \r\n   I agree with @jorgecarleitao 's recommendation -- I would recommend when moving from logical --> physical plan, that we always use the fully qualified name of the field, which would avoid ambiguity. If we don't like `t1.foo` being sprinkled around in plans that only have one table or where the column names aren't ambiguous, we could implement a (logical plan) optimizer pass to remove unneeded qualifiers. \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-07T13:58:32.263+0000",
                    "updated": "2020-12-07T13:58:32.263+0000",
                    "started": "2020-12-07T13:58:32.263+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "521170",
                    "issueId": "13342673"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 21000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@4862328f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@73e1279d[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3aebd2ff[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@40ccd7f0[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4f69c39c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@fff6e41[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6b67396b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@4d3200a0[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4c464fb9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@383fbd16[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6a41771b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@372b5df3[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 21000,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Dec 08 11:20:45 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-12-08T11:20:45.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10732/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2020-11-25T18:26:29.000+0000",
        "updated": "2020-12-08T11:20:51.000+0000",
        "timeoriginalestimate": null,
        "description": "We need to support referencing columns in queries using table name and/or alias prefixes so that we can support use cases such as joins between tables that have duplicate column names.\r\n\r\nFor example:\r\n{code:java}\r\nSELECT t1.id, t1.name, t2.name FROM t1 JOIN t2 ON t1.id = t2.id {code}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 21000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [DataFusion] Add SQL support for table/relation aliases and compound identifiers",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342673/comment/17240001",
                    "id": "17240001",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "[~alamb] [~jorgecarleitao] [~nevime] In order to implement this I need to make a design decision that impacts the core Arrow crate and potentially IPC so thought it would be good to discuss here first . I'm not sure if it warrants its own Google design doc or not but I am happy to create one if you think that would be helpful.\r\n\r\nThe issue is that when translating a SQL AST into a query plan, we need to be able to reference columns using compound keys such as \"customer.id\" and when we support structs in SQL we will need it for representing projections into structs as well e.g. \"customer.address.street\". I can easily update the Expr::Column to support compound names or even add a new Expr::CompoundColumnReferece but the issue I face is that we represent the schema of each LogicalPlan using the Arrow Schema and Field structs and Field does not currently support compound names:\r\n{code:java}\r\npub struct Field {\r\n    name: String,\r\n    data_type: DataType,\r\n    nullable: bool,\r\n    dict_id: i64,\r\n    dict_is_ordered: bool,\r\n} {code}\r\nI can work (hack) around this by just using the fully qualified name in the string in the form \"table.column\" and then have logic in the SQL planner to look up a field either by its simple name (while also checking that this is not an ambiguous reference) as well as looking up fully-qualified names. The other option would be to make changes to Field to support compound names and/or adding meta-data that we can use.\r\n\r\nWhat do you think?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-11-28T16:27:40.039+0000",
                    "updated": "2020-11-28T16:27:40.039+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342673/comment/17240026",
                    "id": "17240026",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "body": "We should be able to implement projection logic without needing to change the Field type, or even the IPC representation. For Arrow it should be easy, but for Parquet, it's a lot more work.\r\n\r\nWe can reference nested Arrow arrays by walking the schem tree, and getting the arrays that we want from that, e.g. if we have `a.b.c` and `a.b.d` but want `a.b`, we can grab `b` which will give us `b.c` and `b.d`.\r\n\r\nWith Parquet, getting `b` means returning `c` and `d1 as 2 separate arrays. There was a PR that implemented this logic in Java/parquet-mr, but I can't seem to find it in my browser history anymore.\r\n\r\nI don't know if we need a design doc, I think a draft PR that's clear enough could also work. We can implement the projection logic on the `Schema` or `RecordBatch` in Arrow, then use that logic in DataFusion.\r\n\r\nWhat do you think?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=nevi_me",
                        "name": "nevi_me",
                        "key": "nevi_me",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=nevi_me&avatarId=24271",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=nevi_me&avatarId=24271",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=nevi_me&avatarId=24271",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=nevi_me&avatarId=24271"
                        },
                        "displayName": "Neville Dipale",
                        "active": true,
                        "timeZone": "Africa/Johannesburg"
                    },
                    "created": "2020-11-28T18:22:32.414+0000",
                    "updated": "2020-11-28T18:22:32.414+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342673/comment/17240159",
                    "id": "17240159",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "[~andygrove] -- I don't think we should add the notion of relations to the Arrow schema -- instead I think that should entirely be a DataFusion concept and by the time Arrow sees it is just has some column name string that it doesn't try to parse or apply semantics to. If absolutely necessary, we could encode DataFusion stuff into the metadata. \r\n\r\n> fully qualified name in the string in the form \"table.column\" and then have logic in the SQL planner to look up a field either by its simple name (while also checking that this is not an ambiguous reference) as well as looking up fully-qualified names.\r\n\r\nI think this is a good idea. I also like doing a \"is ambiguous test\"\r\n\r\nSo like SQL (at least the postgres planner) will allow a query like\r\n\r\n{code}\r\nSELECT my_column from A JOIN B on A.id = B.id;\r\n{code}\r\n\r\nAs long as `my_column` appears in either A or B; If it appears in both you have to distinguish it explicitly like this:\r\n\r\n{code}\r\nSELECT A.my_column from A JOIN B on A.id = B.id;\r\n{code}\r\n\r\nWe could do something similar with Field and structs. \r\n\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-11-28T23:06:38.902+0000",
                    "updated": "2020-11-28T23:06:38.902+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342673/comment/17240287",
                    "id": "17240287",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "Thanks [~nevi_me]\u00a0 and [~alamb] for the feedback so far. I am working on a PR now and I think I have a workable approach.\r\n\r\nIn the SQL Planner, instead of dealing directly with LogicalPlan, I have introduced SQLRelation which is a wrapper for LogicalPlan that also contains name/alias information, and SQLSchema, which is a wrapper for Schema along with name/alias information.\r\n\r\nThis isolates the SQL aliasing to the SQL planner, which seems to make sense.\r\n\r\n\u00a0\r\n\r\n\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-11-29T16:07:34.806+0000",
                    "updated": "2020-11-29T16:07:34.806+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342673/comment/17240380",
                    "id": "17240380",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "I got quite far with PR but then hit a dead end so here is a design doc with my new proposal: https://docs.google.com/document/d/1BFo7ruJayCulAHLa9-noaHXbgcaAH_4LuOJFGJnDHkc/edit?usp=sharing",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-11-29T22:37:10.985+0000",
                    "updated": "2020-11-29T22:37:10.985+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342673/comment/17241606",
                    "id": "17241606",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "body": "I have now fixed the permissions in the shared Google doc so everyone should be able to access it now",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
                        "name": "andygrove",
                        "key": "andygrove",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
                        },
                        "displayName": "Andy Grove",
                        "active": true,
                        "timeZone": "America/Denver"
                    },
                    "created": "2020-12-01T15:07:30.011+0000",
                    "updated": "2020-12-01T15:07:30.011+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13342673/comment/17245823",
                    "id": "17245823",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 8839\n[https://github.com/apache/arrow/pull/8839]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=alamb",
                        "name": "alamb",
                        "key": "alamb",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=alamb&avatarId=43364",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=alamb&avatarId=43364",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=alamb&avatarId=43364",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=alamb&avatarId=43364"
                        },
                        "displayName": "Andrew Lamb",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-12-08T11:20:45.704+0000",
                    "updated": "2020-12-08T11:20:45.704+0000"
                }
            ],
            "maxResults": 7,
            "total": 7,
            "startAt": 0
        },
        "customfield_12311820": "0|z0kxvk:",
        "customfield_12314139": null
    }
}