{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13183707",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183707",
    "key": "ARROW-3190",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/1",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/blocker.svg",
            "name": "Blocker",
            "id": "1"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 2400,
            "total": 2400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 2400,
            "total": 2400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3190/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 4,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183707/worklog/144644",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm opened a new pull request #2569: ARROW-3190: [C++] Rename Writeable references to Writable, add backwards compatibility, deprecations\nURL: https://github.com/apache/arrow/pull/2569\n \n \n   \"Writable\" is the correct spelling. Seems this issue also occurred with the Python buffer protocol, where \"writeable\" exists now for backwards compatibility\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-16T01:37:49.228+0000",
                    "updated": "2018-09-16T01:37:49.228+0000",
                    "started": "2018-09-16T01:37:49.227+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "144644",
                    "issueId": "13183707"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183707/worklog/144976",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #2569: ARROW-3190: [C++] Rename Writeable references to Writable, add backwards compatibility, deprecations\nURL: https://github.com/apache/arrow/pull/2569#discussion_r218162565\n \n \n\n ##########\n File path: cpp/src/arrow/io/interfaces.h\n ##########\n @@ -162,16 +162,18 @@ class ARROW_EXPORT RandomAccessFile : public InputStream, public Seekable {\n   std::unique_ptr<RandomAccessFileImpl> impl_;\n };\n \n-class ARROW_EXPORT WriteableFile : public OutputStream, public Seekable {\n+class ARROW_EXPORT WritableFile : public OutputStream, public Seekable {\n  public:\n   virtual Status WriteAt(int64_t position, const void* data, int64_t nbytes) = 0;\n \n  protected:\n-  WriteableFile() = default;\n+  WritableFile() = default;\n };\n \n-class ARROW_EXPORT ReadWriteFileInterface : public RandomAccessFile,\n-                                            public WriteableFile {\n+// TOOD(wesm): remove this after 0.11\n \n Review comment:\n   Typo (\"TOOD\").\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-17T17:43:58.391+0000",
                    "updated": "2018-09-17T17:43:58.391+0000",
                    "started": "2018-09-17T17:43:58.390+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "144976",
                    "issueId": "13183707"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183707/worklog/144977",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2569: ARROW-3190: [C++] Rename Writeable references to Writable, add backwards compatibility, deprecations\nURL: https://github.com/apache/arrow/pull/2569#discussion_r218163285\n \n \n\n ##########\n File path: cpp/src/arrow/io/interfaces.h\n ##########\n @@ -162,16 +162,18 @@ class ARROW_EXPORT RandomAccessFile : public InputStream, public Seekable {\n   std::unique_ptr<RandomAccessFileImpl> impl_;\n };\n \n-class ARROW_EXPORT WriteableFile : public OutputStream, public Seekable {\n+class ARROW_EXPORT WritableFile : public OutputStream, public Seekable {\n  public:\n   virtual Status WriteAt(int64_t position, const void* data, int64_t nbytes) = 0;\n \n  protected:\n-  WriteableFile() = default;\n+  WritableFile() = default;\n };\n \n-class ARROW_EXPORT ReadWriteFileInterface : public RandomAccessFile,\n-                                            public WriteableFile {\n+// TOOD(wesm): remove this after 0.11\n \n Review comment:\n   fixed\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-17T17:45:12.561+0000",
                    "updated": "2018-09-17T17:45:12.561+0000",
                    "started": "2018-09-17T17:45:12.561+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "144977",
                    "issueId": "13183707"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183707/worklog/144978",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2569: ARROW-3190: [C++] Rename Writeable references to Writable, add backwards compatibility, deprecations\nURL: https://github.com/apache/arrow/pull/2569\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/gpu/cuda_memory.h b/cpp/src/arrow/gpu/cuda_memory.h\nindex 669a183b66..46fc0e6c01 100644\n--- a/cpp/src/arrow/gpu/cuda_memory.h\n+++ b/cpp/src/arrow/gpu/cuda_memory.h\n@@ -154,7 +154,7 @@ class ARROW_EXPORT CudaBufferReader : public io::BufferReader {\n \n /// \\class CudaBufferWriter\n /// \\brief File interface for writing to CUDA buffers, with optional buffering\n-class ARROW_EXPORT CudaBufferWriter : public io::WriteableFile {\n+class ARROW_EXPORT CudaBufferWriter : public io::WritableFile {\n  public:\n   explicit CudaBufferWriter(const std::shared_ptr<CudaBuffer>& buffer);\n   ~CudaBufferWriter() override;\ndiff --git a/cpp/src/arrow/io/file.cc b/cpp/src/arrow/io/file.cc\nindex 92ecb74e4c..a5f51b2007 100644\n--- a/cpp/src/arrow/io/file.cc\n+++ b/cpp/src/arrow/io/file.cc\n@@ -62,12 +62,12 @@ class OSFile {\n \n   // Note: only one of the Open* methods below may be called on a given instance\n \n-  Status OpenWriteable(const std::string& path, bool truncate, bool append,\n-                       bool write_only) {\n+  Status OpenWritable(const std::string& path, bool truncate, bool append,\n+                      bool write_only) {\n     RETURN_NOT_OK(SetFileName(path));\n \n     RETURN_NOT_OK(\n-        internal::FileOpenWriteable(file_name_, write_only, truncate, append, &fd_));\n+        internal::FileOpenWritable(file_name_, write_only, truncate, append, &fd_));\n     is_open_ = true;\n     mode_ = write_only ? FileMode::WRITE : FileMode::READWRITE;\n \n@@ -79,9 +79,9 @@ class OSFile {\n     return Status::OK();\n   }\n \n-  // This is different from OpenWriteable(string, ...) in that it doesn't\n+  // This is different from OpenWritable(string, ...) in that it doesn't\n   // truncate nor mandate a seekable file\n-  Status OpenWriteable(int fd) {\n+  Status OpenWritable(int fd) {\n     if (!internal::FileGetSize(fd, &size_).ok()) {\n       // Non-seekable file\n       size_ = -1;\n@@ -290,9 +290,9 @@ class FileOutputStream::FileOutputStreamImpl : public OSFile {\n  public:\n   Status Open(const std::string& path, bool append) {\n     const bool truncate = !append;\n-    return OpenWriteable(path, truncate, append, true /* write_only */);\n+    return OpenWritable(path, truncate, append, true /* write_only */);\n   }\n-  Status Open(int fd) { return OpenWriteable(fd); }\n+  Status Open(int fd) { return OpenWritable(fd); }\n };\n \n FileOutputStream::FileOutputStream() { impl_.reset(new FileOutputStreamImpl()); }\n@@ -371,7 +371,7 @@ class MemoryMappedFile::MemoryMap : public MutableBuffer {\n       constexpr bool append = false;\n       constexpr bool truncate = false;\n       constexpr bool write_only = false;\n-      RETURN_NOT_OK(file_->OpenWriteable(path, truncate, append, write_only));\n+      RETURN_NOT_OK(file_->OpenWritable(path, truncate, append, write_only));\n \n       is_mutable_ = true;\n     } else {\ndiff --git a/cpp/src/arrow/io/file.h b/cpp/src/arrow/io/file.h\nindex 423d11ec1c..be81dcb075 100644\n--- a/cpp/src/arrow/io/file.h\n+++ b/cpp/src/arrow/io/file.h\n@@ -173,7 +173,7 @@ class ARROW_EXPORT ReadableFile : public RandomAccessFile {\n // supporting zero copy reads. The same class is used for both reading and\n // writing.\n //\n-// If opening a file in a writeable mode, it is not truncated first as with\n+// If opening a file in a writable mode, it is not truncated first as with\n // FileOutputStream\n class ARROW_EXPORT MemoryMappedFile : public ReadWriteFileInterface {\n  public:\ndiff --git a/cpp/src/arrow/io/hdfs.cc b/cpp/src/arrow/io/hdfs.cc\nindex 789ffbd057..09f3b8d137 100644\n--- a/cpp/src/arrow/io/hdfs.cc\n+++ b/cpp/src/arrow/io/hdfs.cc\n@@ -229,7 +229,7 @@ Status HdfsReadableFile::Tell(int64_t* position) const { return impl_->Tell(posi\n // ----------------------------------------------------------------------\n // File writing\n \n-// Private implementation for writeable-only files\n+// Private implementation for writable-only files\n class HdfsOutputStream::HdfsOutputStreamImpl : public HdfsAnyFileImpl {\n  public:\n   HdfsOutputStreamImpl() {}\n@@ -475,9 +475,9 @@ class HadoopFileSystem::HadoopFileSystemImpl {\n     return Status::OK();\n   }\n \n-  Status OpenWriteable(const std::string& path, bool append, int32_t buffer_size,\n-                       int16_t replication, int64_t default_block_size,\n-                       std::shared_ptr<HdfsOutputStream>* file) {\n+  Status OpenWritable(const std::string& path, bool append, int32_t buffer_size,\n+                      int16_t replication, int64_t default_block_size,\n+                      std::shared_ptr<HdfsOutputStream>* file) {\n     int flags = O_WRONLY;\n     if (append) flags |= O_APPEND;\n \n@@ -594,17 +594,17 @@ Status HadoopFileSystem::OpenReadable(const std::string& path,\n   return OpenReadable(path, kDefaultHdfsBufferSize, file);\n }\n \n-Status HadoopFileSystem::OpenWriteable(const std::string& path, bool append,\n-                                       int32_t buffer_size, int16_t replication,\n-                                       int64_t default_block_size,\n-                                       std::shared_ptr<HdfsOutputStream>* file) {\n-  return impl_->OpenWriteable(path, append, buffer_size, replication, default_block_size,\n-                              file);\n+Status HadoopFileSystem::OpenWritable(const std::string& path, bool append,\n+                                      int32_t buffer_size, int16_t replication,\n+                                      int64_t default_block_size,\n+                                      std::shared_ptr<HdfsOutputStream>* file) {\n+  return impl_->OpenWritable(path, append, buffer_size, replication, default_block_size,\n+                             file);\n }\n \n-Status HadoopFileSystem::OpenWriteable(const std::string& path, bool append,\n-                                       std::shared_ptr<HdfsOutputStream>* file) {\n-  return OpenWriteable(path, append, 0, 0, 0, file);\n+Status HadoopFileSystem::OpenWritable(const std::string& path, bool append,\n+                                      std::shared_ptr<HdfsOutputStream>* file) {\n+  return OpenWritable(path, append, 0, 0, 0, file);\n }\n \n Status HadoopFileSystem::Chmod(const std::string& path, int mode) {\n@@ -620,6 +620,20 @@ Status HadoopFileSystem::Rename(const std::string& src, const std::string& dst)\n   return impl_->Rename(src, dst);\n }\n \n+// Deprecated in 0.11\n+\n+Status HadoopFileSystem::OpenWriteable(const std::string& path, bool append,\n+                                       int32_t buffer_size, int16_t replication,\n+                                       int64_t default_block_size,\n+                                       std::shared_ptr<HdfsOutputStream>* file) {\n+  return OpenWritable(path, append, buffer_size, replication, default_block_size, file);\n+}\n+\n+Status HadoopFileSystem::OpenWriteable(const std::string& path, bool append,\n+                                       std::shared_ptr<HdfsOutputStream>* file) {\n+  return OpenWritable(path, append, 0, 0, 0, file);\n+}\n+\n // ----------------------------------------------------------------------\n // Allow public API users to check whether we are set up correctly\n \ndiff --git a/cpp/src/arrow/io/hdfs.h b/cpp/src/arrow/io/hdfs.h\nindex 446764e694..ae22ecd734 100644\n--- a/cpp/src/arrow/io/hdfs.h\n+++ b/cpp/src/arrow/io/hdfs.h\n@@ -156,10 +156,19 @@ class ARROW_EXPORT HadoopFileSystem : public FileSystem {\n   // @param buffer_size, 0 for default\n   // @param replication, 0 for default\n   // @param default_block_size, 0 for default\n+  Status OpenWritable(const std::string& path, bool append, int32_t buffer_size,\n+                      int16_t replication, int64_t default_block_size,\n+                      std::shared_ptr<HdfsOutputStream>* file);\n+\n+  Status OpenWritable(const std::string& path, bool append,\n+                      std::shared_ptr<HdfsOutputStream>* file);\n+\n+  ARROW_DEPRECATED(\"Use OpenWritable\")\n   Status OpenWriteable(const std::string& path, bool append, int32_t buffer_size,\n                        int16_t replication, int64_t default_block_size,\n                        std::shared_ptr<HdfsOutputStream>* file);\n \n+  ARROW_DEPRECATED(\"Use OpenWritable\")\n   Status OpenWriteable(const std::string& path, bool append,\n                        std::shared_ptr<HdfsOutputStream>* file);\n \n@@ -212,7 +221,7 @@ class ARROW_EXPORT HdfsReadableFile : public RandomAccessFile {\n };\n \n // Naming this file OutputStream because it does not support seeking (like the\n-// WriteableFile interface)\n+// WritableFile interface)\n class ARROW_EXPORT HdfsOutputStream : public OutputStream {\n  public:\n   ~HdfsOutputStream() override;\ndiff --git a/cpp/src/arrow/io/interfaces.h b/cpp/src/arrow/io/interfaces.h\nindex 743621c469..a9d68c3d76 100644\n--- a/cpp/src/arrow/io/interfaces.h\n+++ b/cpp/src/arrow/io/interfaces.h\n@@ -162,16 +162,18 @@ class ARROW_EXPORT RandomAccessFile : public InputStream, public Seekable {\n   std::unique_ptr<RandomAccessFileImpl> impl_;\n };\n \n-class ARROW_EXPORT WriteableFile : public OutputStream, public Seekable {\n+class ARROW_EXPORT WritableFile : public OutputStream, public Seekable {\n  public:\n   virtual Status WriteAt(int64_t position, const void* data, int64_t nbytes) = 0;\n \n  protected:\n-  WriteableFile() = default;\n+  WritableFile() = default;\n };\n \n-class ARROW_EXPORT ReadWriteFileInterface : public RandomAccessFile,\n-                                            public WriteableFile {\n+// TODO(wesm): remove this after 0.11\n+using WriteableFile = WritableFile;\n+\n+class ARROW_EXPORT ReadWriteFileInterface : public RandomAccessFile, public WritableFile {\n  protected:\n   ReadWriteFileInterface() { RandomAccessFile::set_mode(FileMode::READWRITE); }\n };\ndiff --git a/cpp/src/arrow/io/io-file-test.cc b/cpp/src/arrow/io/io-file-test.cc\nindex 75504f7ed0..22d5947c69 100644\n--- a/cpp/src/arrow/io/io-file-test.cc\n+++ b/cpp/src/arrow/io/io-file-test.cc\n@@ -73,13 +73,13 @@ class TestFileOutputStream : public FileTestFixture {\n     internal::PlatformFilename file_name;\n     ASSERT_OK(internal::FileNameFromString(path_, &file_name));\n     int fd_file, fd_stream;\n-    ASSERT_OK(internal::FileOpenWriteable(file_name, true /* write_only */,\n-                                          false /* truncate */, false /* append */,\n-                                          &fd_file));\n+    ASSERT_OK(internal::FileOpenWritable(file_name, true /* write_only */,\n+                                         false /* truncate */, false /* append */,\n+                                         &fd_file));\n     ASSERT_OK(FileOutputStream::Open(fd_file, &file_));\n-    ASSERT_OK(internal::FileOpenWriteable(file_name, true /* write_only */,\n-                                          false /* truncate */, false /* append */,\n-                                          &fd_stream));\n+    ASSERT_OK(internal::FileOpenWritable(file_name, true /* write_only */,\n+                                         false /* truncate */, false /* append */,\n+                                         &fd_stream));\n     ASSERT_OK(FileOutputStream::Open(fd_stream, &stream_));\n   }\n \n@@ -169,8 +169,8 @@ TEST_F(TestFileOutputStream, FromFileDescriptor) {\n   // Re-open at end of file\n   internal::PlatformFilename file_name;\n   ASSERT_OK(internal::FileNameFromString(path_, &file_name));\n-  ASSERT_OK(internal::FileOpenWriteable(file_name, true /* write_only */,\n-                                        false /* truncate */, false /* append */, &fd));\n+  ASSERT_OK(internal::FileOpenWritable(file_name, true /* write_only */,\n+                                       false /* truncate */, false /* append */, &fd));\n   ASSERT_OK(internal::FileSeek(fd, 0, SEEK_END));\n   ASSERT_OK(FileOutputStream::Open(fd, &stream_));\n \ndiff --git a/cpp/src/arrow/io/io-hdfs-test.cc b/cpp/src/arrow/io/io-hdfs-test.cc\nindex e8f451cb64..c853b20126 100644\n--- a/cpp/src/arrow/io/io-hdfs-test.cc\n+++ b/cpp/src/arrow/io/io-hdfs-test.cc\n@@ -68,8 +68,8 @@ class TestHadoopFileSystem : public ::testing::Test {\n                         bool append = false, int buffer_size = 0, int16_t replication = 0,\n                         int default_block_size = 0) {\n     std::shared_ptr<HdfsOutputStream> file;\n-    RETURN_NOT_OK(client_->OpenWriteable(path, append, buffer_size, replication,\n-                                         default_block_size, &file));\n+    RETURN_NOT_OK(client_->OpenWritable(path, append, buffer_size, replication,\n+                                        default_block_size, &file));\n \n     RETURN_NOT_OK(file->Write(buffer, size));\n     RETURN_NOT_OK(file->Close());\ndiff --git a/cpp/src/arrow/io/memory.h b/cpp/src/arrow/io/memory.h\nindex 7757c18fcb..d9b22c7bc6 100644\n--- a/cpp/src/arrow/io/memory.h\n+++ b/cpp/src/arrow/io/memory.h\n@@ -81,7 +81,7 @@ class ARROW_EXPORT MockOutputStream : public OutputStream {\n };\n \n /// \\brief Enables random writes into a fixed-size mutable buffer\n-class ARROW_EXPORT FixedSizeBufferWriter : public WriteableFile {\n+class ARROW_EXPORT FixedSizeBufferWriter : public WritableFile {\n  public:\n   /// Input buffer must be mutable, will abort if not\n   explicit FixedSizeBufferWriter(const std::shared_ptr<Buffer>& buffer);\ndiff --git a/cpp/src/arrow/util/io-util.cc b/cpp/src/arrow/util/io-util.cc\nindex 3ece551ab5..ddffce3c55 100644\n--- a/cpp/src/arrow/util/io-util.cc\n+++ b/cpp/src/arrow/util/io-util.cc\n@@ -154,8 +154,8 @@ Status FileOpenReadable(const PlatformFilename& file_name, int* fd) {\n   return CheckFileOpResult(ret, errno_actual, file_name, \"open local\");\n }\n \n-Status FileOpenWriteable(const PlatformFilename& file_name, bool write_only,\n-                         bool truncate, bool append, int* fd) {\n+Status FileOpenWritable(const PlatformFilename& file_name, bool write_only, bool truncate,\n+                        bool append, int* fd) {\n   int ret, errno_actual;\n \n #if defined(_MSC_VER)\ndiff --git a/cpp/src/arrow/util/io-util.h b/cpp/src/arrow/util/io-util.h\nindex 62ae2a6f24..d95ddf008b 100644\n--- a/cpp/src/arrow/util/io-util.h\n+++ b/cpp/src/arrow/util/io-util.h\n@@ -146,8 +146,8 @@ struct PlatformFilename {\n Status FileNameFromString(const std::string& file_name, PlatformFilename* out);\n \n Status FileOpenReadable(const PlatformFilename& file_name, int* fd);\n-Status FileOpenWriteable(const PlatformFilename& file_name, bool write_only,\n-                         bool truncate, bool append, int* fd);\n+Status FileOpenWritable(const PlatformFilename& file_name, bool write_only, bool truncate,\n+                        bool append, int* fd);\n \n Status FileRead(int fd, uint8_t* buffer, const int64_t nbytes, int64_t* bytes_read);\n Status FileReadAt(int fd, uint8_t* buffer, int64_t position, int64_t nbytes,\ndiff --git a/python/pyarrow/_cuda.pyx b/python/pyarrow/_cuda.pyx\nindex 74e8555aeb..64aa3686c8 100644\n--- a/python/pyarrow/_cuda.pyx\n+++ b/python/pyarrow/_cuda.pyx\n@@ -528,7 +528,7 @@ cdef class BufferWriter(NativeFile):\n \n     def seek(self, int64_t position, int whence=0):\n         # TODO: remove this method after NativeFile.seek supports\n-        # writeable files.\n+        # writable files.\n         cdef int64_t offset\n \n         with nogil:\ndiff --git a/python/pyarrow/includes/libarrow.pxd b/python/pyarrow/includes/libarrow.pxd\nindex 1a499df1b0..370e14dc8c 100644\n--- a/python/pyarrow/includes/libarrow.pxd\n+++ b/python/pyarrow/includes/libarrow.pxd\n@@ -601,10 +601,10 @@ cdef extern from \"arrow/io/api.h\" namespace \"arrow::io\" nogil:\n     cdef cppclass Seekable:\n         CStatus Seek(int64_t position)\n \n-    cdef cppclass Writeable:\n+    cdef cppclass Writable:\n         CStatus Write(const uint8_t* data, int64_t nbytes)\n \n-    cdef cppclass OutputStream(FileInterface, Writeable):\n+    cdef cppclass OutputStream(FileInterface, Writable):\n         pass\n \n     cdef cppclass InputStream(FileInterface, Readable):\n@@ -619,12 +619,12 @@ cdef extern from \"arrow/io/api.h\" namespace \"arrow::io\" nogil:\n                        shared_ptr[CBuffer]* out)\n         c_bool supports_zero_copy()\n \n-    cdef cppclass WriteableFile(OutputStream, Seekable):\n+    cdef cppclass WritableFile(OutputStream, Seekable):\n         CStatus WriteAt(int64_t position, const uint8_t* data,\n                         int64_t nbytes)\n \n     cdef cppclass ReadWriteFileInterface(RandomAccessFile,\n-                                         WriteableFile):\n+                                         WritableFile):\n         pass\n \n     cdef cppclass FileSystem:\n@@ -727,10 +727,10 @@ cdef extern from \"arrow/io/api.h\" namespace \"arrow::io\" nogil:\n         CStatus OpenReadable(const c_string& path,\n                              shared_ptr[HdfsReadableFile]* handle)\n \n-        CStatus OpenWriteable(const c_string& path, c_bool append,\n-                              int32_t buffer_size, int16_t replication,\n-                              int64_t default_block_size,\n-                              shared_ptr[HdfsOutputStream]* handle)\n+        CStatus OpenWritable(const c_string& path, c_bool append,\n+                             int32_t buffer_size, int16_t replication,\n+                             int64_t default_block_size,\n+                             shared_ptr[HdfsOutputStream]* handle)\n \n     cdef cppclass CBufferReader \\\n             \" arrow::io::BufferReader\"(RandomAccessFile):\n@@ -747,7 +747,7 @@ cdef extern from \"arrow/io/api.h\" namespace \"arrow::io\" nogil:\n         int64_t GetExtentBytesWritten()\n \n     cdef cppclass CFixedSizeBufferWriter \\\n-            \" arrow::io::FixedSizeBufferWriter\"(WriteableFile):\n+            \" arrow::io::FixedSizeBufferWriter\"(WritableFile):\n         CFixedSizeBufferWriter(const shared_ptr[CBuffer]& buffer)\n \n         void set_memcopy_threads(int num_threads)\ndiff --git a/python/pyarrow/includes/libarrow_cuda.pxd b/python/pyarrow/includes/libarrow_cuda.pxd\nindex aca6006177..913cf70a92 100644\n--- a/python/pyarrow/includes/libarrow_cuda.pxd\n+++ b/python/pyarrow/includes/libarrow_cuda.pxd\n@@ -74,7 +74,7 @@ cdef extern from \"arrow/gpu/cuda_api.h\" namespace \"arrow::gpu\" nogil:\n         CStatus Read(int64_t nbytes, shared_ptr[CBuffer]* out)\n \n     cdef cppclass \\\n-            CCudaBufferWriter\" arrow::gpu::CudaBufferWriter\"(WriteableFile):\n+            CCudaBufferWriter\" arrow::gpu::CudaBufferWriter\"(WritableFile):\n         CCudaBufferWriter(const shared_ptr[CCudaBuffer]& buffer)\n         CStatus Close()\n         CStatus Flush()\ndiff --git a/python/pyarrow/io-hdfs.pxi b/python/pyarrow/io-hdfs.pxi\nindex cf35413fd5..4a6fb3d456 100644\n--- a/python/pyarrow/io-hdfs.pxi\n+++ b/python/pyarrow/io-hdfs.pxi\n@@ -420,9 +420,9 @@ cdef class HadoopFileSystem:\n             with nogil:\n                 check_status(\n                     self.client.get()\n-                    .OpenWriteable(c_path, append, c_buffer_size,\n-                                   c_replication, c_default_block_size,\n-                                   &wr_handle))\n+                    .OpenWritable(c_path, append, c_buffer_size,\n+                                  c_replication, c_default_block_size,\n+                                  &wr_handle))\n \n             out.wr_file = <shared_ptr[OutputStream]> wr_handle\n             out.is_writable = True\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-17T17:45:50.242+0000",
                    "updated": "2018-09-17T17:45:50.242+0000",
                    "started": "2018-09-17T17:45:50.241+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "144978",
                    "issueId": "13183707"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 2400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7b678c87[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@63dc65cb[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@31d2481f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@312081d3[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7b1fe8ce[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3a477fd2[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@19764a35[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2c6d7ed1[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2830ba0a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@2908e931[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@28439c7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@455854b0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 2400,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Sep 17 17:45:44 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-09-17T17:45:44.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3190/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-09-07T18:42:04.000+0000",
        "updated": "2018-09-17T17:45:50.000+0000",
        "timeoriginalestimate": null,
        "description": "See e.g. https://docs.oracle.com/javase/7/docs/api/java/nio/channels/WritableByteChannel.html",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 2400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] \"WriteableFile\" is misspelled, should be renamed \"WritableFile\" with deprecation for old name",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13183707/comment/16617893",
                    "id": "16617893",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2569\n[https://github.com/apache/arrow/pull/2569]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-09-17T17:45:44.677+0000",
                    "updated": "2018-09-17T17:45:44.677+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3xutj:",
        "customfield_12314139": null
    }
}