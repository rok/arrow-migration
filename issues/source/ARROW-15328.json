{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13422590",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422590",
    "key": "ARROW-15328",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12352360",
                "id": "12352360",
                "description": "",
                "name": "11.0.0",
                "archived": false,
                "released": false
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12649529",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12649529",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13424470",
                    "key": "ARROW-15435",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13424470",
                    "fields": {
                        "summary": "[C++][Doc] Improve API docs coverage",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
                            "id": "3",
                            "description": "A task that needs to be done.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
                            "name": "Task",
                            "subtask": false,
                            "avatarId": 21148
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=brycemecum",
            "name": "brycemecum",
            "key": "JIRAUSER280015",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER280015&avatarId=51518",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER280015&avatarId=51518",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER280015&avatarId=51518",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER280015&avatarId=51518"
            },
            "displayName": "Bryce Mecum",
            "active": true,
            "timeZone": "America/Juneau"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
            "name": "westonpace",
            "key": "westonpace",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Weston Pace",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 18600,
            "total": 18600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 18600,
            "total": 18600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15328/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 31,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422590/worklog/818128",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amoeba opened a new pull request, #14452:\nURL: https://github.com/apache/arrow/pull/14452\n\n   Updates the C++ CSV reader docs to include documenting and an example of the streaming CSV reader (StreamingReader), as per the suggestion in [ARROW-15328](https://issues.apache.org/jira/browse/ARROW-15328). \r\n   \r\n   @westonpace could you look at this and let me know if this is what you were thinking?\n\n\n",
                    "created": "2022-10-18T20:05:23.009+0000",
                    "updated": "2022-10-18T20:05:23.009+0000",
                    "started": "2022-10-18T20:05:23.009+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818128",
                    "issueId": "13422590"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422590/worklog/818236",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14452:\nURL: https://github.com/apache/arrow/pull/14452#issuecomment-1283087275\n\n   https://issues.apache.org/jira/browse/ARROW-15328\n\n\n",
                    "created": "2022-10-18T22:36:41.090+0000",
                    "updated": "2022-10-18T22:36:41.090+0000",
                    "started": "2022-10-18T22:36:41.090+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818236",
                    "issueId": "13422590"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422590/worklog/818479",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #14452:\nURL: https://github.com/apache/arrow/pull/14452#discussion_r999437065\n\n\n##########\ndocs/source/cpp/csv.rst:\n##########\n@@ -25,15 +25,24 @@ Reading and Writing CSV files\n =============================\n \n Arrow provides a fast CSV reader allowing ingestion of external data\n-as Arrow tables.\n+as Arrow Tables or streamed as Arrow RecordBatches.\n \n .. seealso::\n    :ref:`CSV reader/writer API reference <cpp-api-csv>`.\n \n-Basic usage\n-===========\n+Reading CSV files\n+=================\n+\n+Data in a CSV file can either be read in as a single Arrow Table using\n+:class:`~arrow::csv::TableReader` or streamed as RecordBatches using\n+:class:`~arrow::csv::StreamingReader`. See :ref:`Tradeoffs <tradeoffs>` for a\n+discussion of the tradeoffs between the two methods.\n+\n+TableReader\n+-----------\n \n-A CSV file is read from a :class:`~arrow::io::InputStream`.\n+The :class:`~arrow::csv::TableReader` class requires an\n+:class:`::arrow::io::InputStream` instance representing the input file.\n\nReview Comment:\n   Since this is true for both readers, why not move this up as a more general sentence in \"Reading CSV files\"?\r\n   \r\n   For example:\r\n   ```rest\r\n   Both these readers require an :class:`arrow::io::InputStream` instance\r\n   representing the input file. Their behavior can be customized using a\r\n   combination of :class:`~arrow::csv::ReadOptrions`,\r\n   :class:`~arrow::csv::ParseOptions`, and :class:`~arrow::csv::ConvertOptions`.\r\n   ```\r\n   \n\n\n\n##########\ndocs/source/cpp/csv.rst:\n##########\n@@ -56,19 +65,88 @@ A CSV file is read from a :class:`~arrow::io::InputStream`.\n                                       parse_options,\n                                       convert_options);\n       if (!maybe_reader.ok()) {\n-         // Handle TableReader instantiation error...\n+        // Handle TableReader instantiation error...\n       }\n       std::shared_ptr<arrow::csv::TableReader> reader = *maybe_reader;\n \n       // Read table from CSV file\n       auto maybe_table = reader->Read();\n       if (!maybe_table.ok()) {\n-         // Handle CSV read error\n-         // (for example a CSV syntax error or failed type conversion)\n+        // Handle CSV read error\n+        // (for example a CSV syntax error or failed type conversion)\n       }\n       std::shared_ptr<arrow::Table> table = *maybe_table;\n    }\n \n+Behavior of :class:`~arrow::csv::TableReader` can be customized using a\n+combination of :class:`~arrow::csv::ReadOptions`,\n+:class:`~arrow::csv::ParseOptions`, and :class:`~arrow::csv::ConvertOptions`.\n+\n+StreamingReader\n+---------------\n+\n+The :class:`~arrow::csv::StreamingReader` class requires an\n+:class:`::arrow::io::InputStream` instance representing the input file.\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::io::IOContext io_context = arrow::io::default_io_context();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate StreamingReader from input stream and options\n+      auto maybe_reader =\n+        arrow::csv::StreamingReader::Make(io_context,\n+                                          input,\n+                                          read_options,\n+                                          parse_options,\n+                                          convert_options);\n+      if (!maybe_reader.ok()) {\n+        // Handle StreamingReader instantiation error...\n+      }\n+      std::shared_ptr<arrow::csv::StreamingReader> reader = *maybe_reader;\n+\n+      // Set aside a RecordBatch pointer for re-use while streaming\n+      std::shared_ptr<RecordBatch> batch;\n+\n+      // Attempt to read the first RecordBatch\n+      reader->ReadNext(&batch);\n+\n+      if (batch == NULL) {\n+        // Handle end of file\n+      }\n+   }\n+\n+Behavior of :class:`~arrow::csv::StreamingReader` can be customized using a\n+combination of :class:`~arrow::csv::ReadOptrions`,\n+:class:`~arrow::csv::ParseOptions`, and :class:`~arrow::csv::ConvertOptions`.\n+\n+.. _tradeoffs:\n+\n+Tradeoffs\n+---------\n+\n+The choice between using :class:`~arrow::csv::TableReader` or :class:`~arrow::csv::StreamingReader`\n+will depend on your use case but two caveats are worth pointing out:\n+\n+1. :class:`~arrow::csv::TableReader` is capable of using multiple threads (See\n+   :ref:`Performance <performance>`) whereas\n+   :class:`~arrow::csv::StreamingReader` is always single-threaded and will\n+   ignore :member:`ReadOptions::use_threads`.\n+2. :class:`~arrow::csv::StreamingReader` performs type inference off the first\n+   block that's read in, after which point the types are frozen. Either set :member:`ReadOptions::block_size` to a large enough value or use :member:`ConvertOptions::column_types` to set the desired data types\n\nReview Comment:\n   Can you try to limit line length here?\n\n\n\n##########\ndocs/source/cpp/csv.rst:\n##########\n@@ -275,11 +353,13 @@ Write Options\n The format of written CSV files can be customized via :class:`~arrow::csv::WriteOptions`.\n Currently few options are available; more will be added in future releases.\n \n+.. _performance:\n\nReview Comment:\n   Same here.\n\n\n\n##########\ndocs/source/cpp/csv.rst:\n##########\n@@ -56,19 +65,88 @@ A CSV file is read from a :class:`~arrow::io::InputStream`.\n                                       parse_options,\n                                       convert_options);\n       if (!maybe_reader.ok()) {\n-         // Handle TableReader instantiation error...\n+        // Handle TableReader instantiation error...\n       }\n       std::shared_ptr<arrow::csv::TableReader> reader = *maybe_reader;\n \n       // Read table from CSV file\n       auto maybe_table = reader->Read();\n       if (!maybe_table.ok()) {\n-         // Handle CSV read error\n-         // (for example a CSV syntax error or failed type conversion)\n+        // Handle CSV read error\n+        // (for example a CSV syntax error or failed type conversion)\n       }\n       std::shared_ptr<arrow::Table> table = *maybe_table;\n    }\n \n+Behavior of :class:`~arrow::csv::TableReader` can be customized using a\n+combination of :class:`~arrow::csv::ReadOptions`,\n+:class:`~arrow::csv::ParseOptions`, and :class:`~arrow::csv::ConvertOptions`.\n+\n+StreamingReader\n+---------------\n+\n+The :class:`~arrow::csv::StreamingReader` class requires an\n+:class:`::arrow::io::InputStream` instance representing the input file.\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::io::IOContext io_context = arrow::io::default_io_context();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate StreamingReader from input stream and options\n+      auto maybe_reader =\n+        arrow::csv::StreamingReader::Make(io_context,\n+                                          input,\n+                                          read_options,\n+                                          parse_options,\n+                                          convert_options);\n+      if (!maybe_reader.ok()) {\n+        // Handle StreamingReader instantiation error...\n+      }\n+      std::shared_ptr<arrow::csv::StreamingReader> reader = *maybe_reader;\n+\n+      // Set aside a RecordBatch pointer for re-use while streaming\n+      std::shared_ptr<RecordBatch> batch;\n+\n+      // Attempt to read the first RecordBatch\n+      reader->ReadNext(&batch);\n+\n+      if (batch == NULL) {\n+        // Handle end of file\n+      }\n+   }\n+\n+Behavior of :class:`~arrow::csv::StreamingReader` can be customized using a\n+combination of :class:`~arrow::csv::ReadOptrions`,\n+:class:`~arrow::csv::ParseOptions`, and :class:`~arrow::csv::ConvertOptions`.\n+\n+.. _tradeoffs:\n\nReview Comment:\n   These references are global to the entire docs, so should be disambiguated, for example `cpp-csv-tradeoffs` instead of `tradeoffs`.\n\n\n\n##########\ndocs/source/cpp/csv.rst:\n##########\n@@ -56,19 +65,88 @@ A CSV file is read from a :class:`~arrow::io::InputStream`.\n                                       parse_options,\n                                       convert_options);\n       if (!maybe_reader.ok()) {\n-         // Handle TableReader instantiation error...\n+        // Handle TableReader instantiation error...\n       }\n       std::shared_ptr<arrow::csv::TableReader> reader = *maybe_reader;\n \n       // Read table from CSV file\n       auto maybe_table = reader->Read();\n       if (!maybe_table.ok()) {\n-         // Handle CSV read error\n-         // (for example a CSV syntax error or failed type conversion)\n+        // Handle CSV read error\n+        // (for example a CSV syntax error or failed type conversion)\n       }\n       std::shared_ptr<arrow::Table> table = *maybe_table;\n    }\n \n+Behavior of :class:`~arrow::csv::TableReader` can be customized using a\n+combination of :class:`~arrow::csv::ReadOptions`,\n+:class:`~arrow::csv::ParseOptions`, and :class:`~arrow::csv::ConvertOptions`.\n+\n+StreamingReader\n+---------------\n+\n+The :class:`~arrow::csv::StreamingReader` class requires an\n+:class:`::arrow::io::InputStream` instance representing the input file.\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::io::IOContext io_context = arrow::io::default_io_context();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate StreamingReader from input stream and options\n+      auto maybe_reader =\n+        arrow::csv::StreamingReader::Make(io_context,\n+                                          input,\n+                                          read_options,\n+                                          parse_options,\n+                                          convert_options);\n+      if (!maybe_reader.ok()) {\n+        // Handle StreamingReader instantiation error...\n+      }\n+      std::shared_ptr<arrow::csv::StreamingReader> reader = *maybe_reader;\n+\n+      // Set aside a RecordBatch pointer for re-use while streaming\n+      std::shared_ptr<RecordBatch> batch;\n+\n+      // Attempt to read the first RecordBatch\n+      reader->ReadNext(&batch);\n\nReview Comment:\n   Should not ignore the Status returned here.\n\n\n\n",
                    "created": "2022-10-19T13:22:32.595+0000",
                    "updated": "2022-10-19T13:22:32.595+0000",
                    "started": "2022-10-19T13:22:32.595+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818479",
                    "issueId": "13422590"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422590/worklog/818480",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #14452:\nURL: https://github.com/apache/arrow/pull/14452#issuecomment-1284008530\n\n   @wjones127 Would you like to take a look and review this?\n\n\n",
                    "created": "2022-10-19T13:22:35.069+0000",
                    "updated": "2022-10-19T13:22:35.069+0000",
                    "started": "2022-10-19T13:22:35.069+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818480",
                    "issueId": "13422590"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422590/worklog/818612",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amoeba commented on code in PR #14452:\nURL: https://github.com/apache/arrow/pull/14452#discussion_r999980886\n\n\n##########\ndocs/source/cpp/csv.rst:\n##########\n@@ -56,19 +65,88 @@ A CSV file is read from a :class:`~arrow::io::InputStream`.\n                                       parse_options,\n                                       convert_options);\n       if (!maybe_reader.ok()) {\n-         // Handle TableReader instantiation error...\n+        // Handle TableReader instantiation error...\n       }\n       std::shared_ptr<arrow::csv::TableReader> reader = *maybe_reader;\n \n       // Read table from CSV file\n       auto maybe_table = reader->Read();\n       if (!maybe_table.ok()) {\n-         // Handle CSV read error\n-         // (for example a CSV syntax error or failed type conversion)\n+        // Handle CSV read error\n+        // (for example a CSV syntax error or failed type conversion)\n       }\n       std::shared_ptr<arrow::Table> table = *maybe_table;\n    }\n \n+Behavior of :class:`~arrow::csv::TableReader` can be customized using a\n+combination of :class:`~arrow::csv::ReadOptions`,\n+:class:`~arrow::csv::ParseOptions`, and :class:`~arrow::csv::ConvertOptions`.\n+\n+StreamingReader\n+---------------\n+\n+The :class:`~arrow::csv::StreamingReader` class requires an\n+:class:`::arrow::io::InputStream` instance representing the input file.\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::io::IOContext io_context = arrow::io::default_io_context();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate StreamingReader from input stream and options\n+      auto maybe_reader =\n+        arrow::csv::StreamingReader::Make(io_context,\n+                                          input,\n+                                          read_options,\n+                                          parse_options,\n+                                          convert_options);\n+      if (!maybe_reader.ok()) {\n+        // Handle StreamingReader instantiation error...\n+      }\n+      std::shared_ptr<arrow::csv::StreamingReader> reader = *maybe_reader;\n+\n+      // Set aside a RecordBatch pointer for re-use while streaming\n+      std::shared_ptr<RecordBatch> batch;\n+\n+      // Attempt to read the first RecordBatch\n+      reader->ReadNext(&batch);\n\nReview Comment:\n   Good catch, changed to show an explicit block for handling status.\n\n\n\n",
                    "created": "2022-10-19T22:18:15.338+0000",
                    "updated": "2022-10-19T22:18:15.338+0000",
                    "started": "2022-10-19T22:18:15.337+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818612",
                    "issueId": "13422590"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422590/worklog/818613",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amoeba commented on code in PR #14452:\nURL: https://github.com/apache/arrow/pull/14452#discussion_r999981582\n\n\n##########\ndocs/source/cpp/csv.rst:\n##########\n@@ -25,15 +25,24 @@ Reading and Writing CSV files\n =============================\n \n Arrow provides a fast CSV reader allowing ingestion of external data\n-as Arrow tables.\n+as Arrow Tables or streamed as Arrow RecordBatches.\n \n .. seealso::\n    :ref:`CSV reader/writer API reference <cpp-api-csv>`.\n \n-Basic usage\n-===========\n+Reading CSV files\n+=================\n+\n+Data in a CSV file can either be read in as a single Arrow Table using\n+:class:`~arrow::csv::TableReader` or streamed as RecordBatches using\n+:class:`~arrow::csv::StreamingReader`. See :ref:`Tradeoffs <tradeoffs>` for a\n+discussion of the tradeoffs between the two methods.\n+\n+TableReader\n+-----------\n \n-A CSV file is read from a :class:`~arrow::io::InputStream`.\n+The :class:`~arrow::csv::TableReader` class requires an\n+:class:`::arrow::io::InputStream` instance representing the input file.\n\nReview Comment:\n   This is a good improvement, thanks.\n\n\n\n##########\ndocs/source/cpp/csv.rst:\n##########\n@@ -56,19 +65,88 @@ A CSV file is read from a :class:`~arrow::io::InputStream`.\n                                       parse_options,\n                                       convert_options);\n       if (!maybe_reader.ok()) {\n-         // Handle TableReader instantiation error...\n+        // Handle TableReader instantiation error...\n       }\n       std::shared_ptr<arrow::csv::TableReader> reader = *maybe_reader;\n \n       // Read table from CSV file\n       auto maybe_table = reader->Read();\n       if (!maybe_table.ok()) {\n-         // Handle CSV read error\n-         // (for example a CSV syntax error or failed type conversion)\n+        // Handle CSV read error\n+        // (for example a CSV syntax error or failed type conversion)\n       }\n       std::shared_ptr<arrow::Table> table = *maybe_table;\n    }\n \n+Behavior of :class:`~arrow::csv::TableReader` can be customized using a\n+combination of :class:`~arrow::csv::ReadOptions`,\n+:class:`~arrow::csv::ParseOptions`, and :class:`~arrow::csv::ConvertOptions`.\n+\n+StreamingReader\n+---------------\n+\n+The :class:`~arrow::csv::StreamingReader` class requires an\n+:class:`::arrow::io::InputStream` instance representing the input file.\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::io::IOContext io_context = arrow::io::default_io_context();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate StreamingReader from input stream and options\n+      auto maybe_reader =\n+        arrow::csv::StreamingReader::Make(io_context,\n+                                          input,\n+                                          read_options,\n+                                          parse_options,\n+                                          convert_options);\n+      if (!maybe_reader.ok()) {\n+        // Handle StreamingReader instantiation error...\n+      }\n+      std::shared_ptr<arrow::csv::StreamingReader> reader = *maybe_reader;\n+\n+      // Set aside a RecordBatch pointer for re-use while streaming\n+      std::shared_ptr<RecordBatch> batch;\n+\n+      // Attempt to read the first RecordBatch\n+      reader->ReadNext(&batch);\n+\n+      if (batch == NULL) {\n+        // Handle end of file\n+      }\n+   }\n+\n+Behavior of :class:`~arrow::csv::StreamingReader` can be customized using a\n+combination of :class:`~arrow::csv::ReadOptrions`,\n+:class:`~arrow::csv::ParseOptions`, and :class:`~arrow::csv::ConvertOptions`.\n+\n+.. _tradeoffs:\n\nReview Comment:\n   Done.\n\n\n\n",
                    "created": "2022-10-19T22:19:30.480+0000",
                    "updated": "2022-10-19T22:19:30.480+0000",
                    "started": "2022-10-19T22:19:30.480+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818613",
                    "issueId": "13422590"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422590/worklog/818614",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amoeba commented on code in PR #14452:\nURL: https://github.com/apache/arrow/pull/14452#discussion_r999981695\n\n\n##########\ndocs/source/cpp/csv.rst:\n##########\n@@ -275,11 +353,13 @@ Write Options\n The format of written CSV files can be customized via :class:`~arrow::csv::WriteOptions`.\n Currently few options are available; more will be added in future releases.\n \n+.. _performance:\n\nReview Comment:\n   Done.\n\n\n\n##########\ndocs/source/cpp/csv.rst:\n##########\n@@ -56,19 +65,88 @@ A CSV file is read from a :class:`~arrow::io::InputStream`.\n                                       parse_options,\n                                       convert_options);\n       if (!maybe_reader.ok()) {\n-         // Handle TableReader instantiation error...\n+        // Handle TableReader instantiation error...\n       }\n       std::shared_ptr<arrow::csv::TableReader> reader = *maybe_reader;\n \n       // Read table from CSV file\n       auto maybe_table = reader->Read();\n       if (!maybe_table.ok()) {\n-         // Handle CSV read error\n-         // (for example a CSV syntax error or failed type conversion)\n+        // Handle CSV read error\n+        // (for example a CSV syntax error or failed type conversion)\n       }\n       std::shared_ptr<arrow::Table> table = *maybe_table;\n    }\n \n+Behavior of :class:`~arrow::csv::TableReader` can be customized using a\n+combination of :class:`~arrow::csv::ReadOptions`,\n+:class:`~arrow::csv::ParseOptions`, and :class:`~arrow::csv::ConvertOptions`.\n+\n+StreamingReader\n+---------------\n+\n+The :class:`~arrow::csv::StreamingReader` class requires an\n+:class:`::arrow::io::InputStream` instance representing the input file.\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::io::IOContext io_context = arrow::io::default_io_context();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate StreamingReader from input stream and options\n+      auto maybe_reader =\n+        arrow::csv::StreamingReader::Make(io_context,\n+                                          input,\n+                                          read_options,\n+                                          parse_options,\n+                                          convert_options);\n+      if (!maybe_reader.ok()) {\n+        // Handle StreamingReader instantiation error...\n+      }\n+      std::shared_ptr<arrow::csv::StreamingReader> reader = *maybe_reader;\n+\n+      // Set aside a RecordBatch pointer for re-use while streaming\n+      std::shared_ptr<RecordBatch> batch;\n+\n+      // Attempt to read the first RecordBatch\n+      reader->ReadNext(&batch);\n+\n+      if (batch == NULL) {\n+        // Handle end of file\n+      }\n+   }\n+\n+Behavior of :class:`~arrow::csv::StreamingReader` can be customized using a\n+combination of :class:`~arrow::csv::ReadOptrions`,\n+:class:`~arrow::csv::ParseOptions`, and :class:`~arrow::csv::ConvertOptions`.\n+\n+.. _tradeoffs:\n+\n+Tradeoffs\n+---------\n+\n+The choice between using :class:`~arrow::csv::TableReader` or :class:`~arrow::csv::StreamingReader`\n+will depend on your use case but two caveats are worth pointing out:\n+\n+1. :class:`~arrow::csv::TableReader` is capable of using multiple threads (See\n+   :ref:`Performance <performance>`) whereas\n+   :class:`~arrow::csv::StreamingReader` is always single-threaded and will\n+   ignore :member:`ReadOptions::use_threads`.\n+2. :class:`~arrow::csv::StreamingReader` performs type inference off the first\n+   block that's read in, after which point the types are frozen. Either set :member:`ReadOptions::block_size` to a large enough value or use :member:`ConvertOptions::column_types` to set the desired data types\n\nReview Comment:\n   Done.\n\n\n\n",
                    "created": "2022-10-19T22:19:45.483+0000",
                    "updated": "2022-10-19T22:19:45.483+0000",
                    "started": "2022-10-19T22:19:45.483+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818614",
                    "issueId": "13422590"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422590/worklog/818615",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amoeba commented on code in PR #14452:\nURL: https://github.com/apache/arrow/pull/14452#discussion_r999981762\n\n\n##########\ndocs/source/cpp/csv.rst:\n##########\n@@ -56,19 +65,88 @@ A CSV file is read from a :class:`~arrow::io::InputStream`.\n                                       parse_options,\n                                       convert_options);\n       if (!maybe_reader.ok()) {\n-         // Handle TableReader instantiation error...\n+        // Handle TableReader instantiation error...\n       }\n       std::shared_ptr<arrow::csv::TableReader> reader = *maybe_reader;\n \n       // Read table from CSV file\n       auto maybe_table = reader->Read();\n       if (!maybe_table.ok()) {\n-         // Handle CSV read error\n-         // (for example a CSV syntax error or failed type conversion)\n+        // Handle CSV read error\n+        // (for example a CSV syntax error or failed type conversion)\n       }\n       std::shared_ptr<arrow::Table> table = *maybe_table;\n    }\n \n+Behavior of :class:`~arrow::csv::TableReader` can be customized using a\n+combination of :class:`~arrow::csv::ReadOptions`,\n+:class:`~arrow::csv::ParseOptions`, and :class:`~arrow::csv::ConvertOptions`.\n+\n+StreamingReader\n+---------------\n+\n+The :class:`~arrow::csv::StreamingReader` class requires an\n+:class:`::arrow::io::InputStream` instance representing the input file.\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::io::IOContext io_context = arrow::io::default_io_context();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate StreamingReader from input stream and options\n+      auto maybe_reader =\n+        arrow::csv::StreamingReader::Make(io_context,\n+                                          input,\n+                                          read_options,\n+                                          parse_options,\n+                                          convert_options);\n+      if (!maybe_reader.ok()) {\n+        // Handle StreamingReader instantiation error...\n+      }\n+      std::shared_ptr<arrow::csv::StreamingReader> reader = *maybe_reader;\n+\n+      // Set aside a RecordBatch pointer for re-use while streaming\n+      std::shared_ptr<RecordBatch> batch;\n+\n+      // Attempt to read the first RecordBatch\n+      reader->ReadNext(&batch);\n+\n+      if (batch == NULL) {\n+        // Handle end of file\n+      }\n+   }\n+\n+Behavior of :class:`~arrow::csv::StreamingReader` can be customized using a\n+combination of :class:`~arrow::csv::ReadOptrions`,\n+:class:`~arrow::csv::ParseOptions`, and :class:`~arrow::csv::ConvertOptions`.\n+\n+.. _tradeoffs:\n+\n+Tradeoffs\n+---------\n+\n+The choice between using :class:`~arrow::csv::TableReader` or :class:`~arrow::csv::StreamingReader`\n+will depend on your use case but two caveats are worth pointing out:\n+\n+1. :class:`~arrow::csv::TableReader` is capable of using multiple threads (See\n+   :ref:`Performance <performance>`) whereas\n+   :class:`~arrow::csv::StreamingReader` is always single-threaded and will\n+   ignore :member:`ReadOptions::use_threads`.\n+2. :class:`~arrow::csv::StreamingReader` performs type inference off the first\n+   block that's read in, after which point the types are frozen. Either set :member:`ReadOptions::block_size` to a large enough value or use :member:`ConvertOptions::column_types` to set the desired data types\n\nReview Comment:\n   Done in https://github.com/apache/arrow/pull/14452/commits/dc159736569a2eb8f5f07623df2d950f9f8d66b6.\n\n\n\n",
                    "created": "2022-10-19T22:20:20.551+0000",
                    "updated": "2022-10-19T22:20:20.551+0000",
                    "started": "2022-10-19T22:20:20.551+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818615",
                    "issueId": "13422590"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422590/worklog/818616",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amoeba commented on code in PR #14452:\nURL: https://github.com/apache/arrow/pull/14452#discussion_r999981582\n\n\n##########\ndocs/source/cpp/csv.rst:\n##########\n@@ -25,15 +25,24 @@ Reading and Writing CSV files\n =============================\n \n Arrow provides a fast CSV reader allowing ingestion of external data\n-as Arrow tables.\n+as Arrow Tables or streamed as Arrow RecordBatches.\n \n .. seealso::\n    :ref:`CSV reader/writer API reference <cpp-api-csv>`.\n \n-Basic usage\n-===========\n+Reading CSV files\n+=================\n+\n+Data in a CSV file can either be read in as a single Arrow Table using\n+:class:`~arrow::csv::TableReader` or streamed as RecordBatches using\n+:class:`~arrow::csv::StreamingReader`. See :ref:`Tradeoffs <tradeoffs>` for a\n+discussion of the tradeoffs between the two methods.\n+\n+TableReader\n+-----------\n \n-A CSV file is read from a :class:`~arrow::io::InputStream`.\n+The :class:`~arrow::csv::TableReader` class requires an\n+:class:`::arrow::io::InputStream` instance representing the input file.\n\nReview Comment:\n   This is a good improvement, thanks. Done in https://github.com/apache/arrow/pull/14452/commits/fd4c4190fc498023e8a2ccf92a8e35af6ccc664f.\n\n\n\n",
                    "created": "2022-10-19T22:20:40.555+0000",
                    "updated": "2022-10-19T22:20:40.555+0000",
                    "started": "2022-10-19T22:20:40.554+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818616",
                    "issueId": "13422590"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422590/worklog/818617",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amoeba commented on code in PR #14452:\nURL: https://github.com/apache/arrow/pull/14452#discussion_r999981661\n\n\n##########\ndocs/source/cpp/csv.rst:\n##########\n@@ -56,19 +65,88 @@ A CSV file is read from a :class:`~arrow::io::InputStream`.\n                                       parse_options,\n                                       convert_options);\n       if (!maybe_reader.ok()) {\n-         // Handle TableReader instantiation error...\n+        // Handle TableReader instantiation error...\n       }\n       std::shared_ptr<arrow::csv::TableReader> reader = *maybe_reader;\n \n       // Read table from CSV file\n       auto maybe_table = reader->Read();\n       if (!maybe_table.ok()) {\n-         // Handle CSV read error\n-         // (for example a CSV syntax error or failed type conversion)\n+        // Handle CSV read error\n+        // (for example a CSV syntax error or failed type conversion)\n       }\n       std::shared_ptr<arrow::Table> table = *maybe_table;\n    }\n \n+Behavior of :class:`~arrow::csv::TableReader` can be customized using a\n+combination of :class:`~arrow::csv::ReadOptions`,\n+:class:`~arrow::csv::ParseOptions`, and :class:`~arrow::csv::ConvertOptions`.\n+\n+StreamingReader\n+---------------\n+\n+The :class:`~arrow::csv::StreamingReader` class requires an\n+:class:`::arrow::io::InputStream` instance representing the input file.\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::io::IOContext io_context = arrow::io::default_io_context();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate StreamingReader from input stream and options\n+      auto maybe_reader =\n+        arrow::csv::StreamingReader::Make(io_context,\n+                                          input,\n+                                          read_options,\n+                                          parse_options,\n+                                          convert_options);\n+      if (!maybe_reader.ok()) {\n+        // Handle StreamingReader instantiation error...\n+      }\n+      std::shared_ptr<arrow::csv::StreamingReader> reader = *maybe_reader;\n+\n+      // Set aside a RecordBatch pointer for re-use while streaming\n+      std::shared_ptr<RecordBatch> batch;\n+\n+      // Attempt to read the first RecordBatch\n+      reader->ReadNext(&batch);\n+\n+      if (batch == NULL) {\n+        // Handle end of file\n+      }\n+   }\n+\n+Behavior of :class:`~arrow::csv::StreamingReader` can be customized using a\n+combination of :class:`~arrow::csv::ReadOptrions`,\n+:class:`~arrow::csv::ParseOptions`, and :class:`~arrow::csv::ConvertOptions`.\n+\n+.. _tradeoffs:\n\nReview Comment:\n   Done in https://github.com/apache/arrow/pull/14452/commits/d3632aa444b8e96a3c620e94f0269a096ce72a6b.\n\n\n\n##########\ndocs/source/cpp/csv.rst:\n##########\n@@ -275,11 +353,13 @@ Write Options\n The format of written CSV files can be customized via :class:`~arrow::csv::WriteOptions`.\n Currently few options are available; more will be added in future releases.\n \n+.. _performance:\n\nReview Comment:\n   Done in https://github.com/apache/arrow/pull/14452/commits/d3632aa444b8e96a3c620e94f0269a096ce72a6b.\n\n\n\n",
                    "created": "2022-10-19T22:20:55.603+0000",
                    "updated": "2022-10-19T22:20:55.603+0000",
                    "started": "2022-10-19T22:20:55.603+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818617",
                    "issueId": "13422590"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422590/worklog/818618",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amoeba commented on code in PR #14452:\nURL: https://github.com/apache/arrow/pull/14452#discussion_r999980886\n\n\n##########\ndocs/source/cpp/csv.rst:\n##########\n@@ -56,19 +65,88 @@ A CSV file is read from a :class:`~arrow::io::InputStream`.\n                                       parse_options,\n                                       convert_options);\n       if (!maybe_reader.ok()) {\n-         // Handle TableReader instantiation error...\n+        // Handle TableReader instantiation error...\n       }\n       std::shared_ptr<arrow::csv::TableReader> reader = *maybe_reader;\n \n       // Read table from CSV file\n       auto maybe_table = reader->Read();\n       if (!maybe_table.ok()) {\n-         // Handle CSV read error\n-         // (for example a CSV syntax error or failed type conversion)\n+        // Handle CSV read error\n+        // (for example a CSV syntax error or failed type conversion)\n       }\n       std::shared_ptr<arrow::Table> table = *maybe_table;\n    }\n \n+Behavior of :class:`~arrow::csv::TableReader` can be customized using a\n+combination of :class:`~arrow::csv::ReadOptions`,\n+:class:`~arrow::csv::ParseOptions`, and :class:`~arrow::csv::ConvertOptions`.\n+\n+StreamingReader\n+---------------\n+\n+The :class:`~arrow::csv::StreamingReader` class requires an\n+:class:`::arrow::io::InputStream` instance representing the input file.\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::io::IOContext io_context = arrow::io::default_io_context();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate StreamingReader from input stream and options\n+      auto maybe_reader =\n+        arrow::csv::StreamingReader::Make(io_context,\n+                                          input,\n+                                          read_options,\n+                                          parse_options,\n+                                          convert_options);\n+      if (!maybe_reader.ok()) {\n+        // Handle StreamingReader instantiation error...\n+      }\n+      std::shared_ptr<arrow::csv::StreamingReader> reader = *maybe_reader;\n+\n+      // Set aside a RecordBatch pointer for re-use while streaming\n+      std::shared_ptr<RecordBatch> batch;\n+\n+      // Attempt to read the first RecordBatch\n+      reader->ReadNext(&batch);\n\nReview Comment:\n   Good catch, changed to show an explicit block for handling status in https://github.com/apache/arrow/pull/14452/commits/dafb8290682e1261e62d5af490e825820450c098.\n\n\n\n",
                    "created": "2022-10-19T22:21:20.639+0000",
                    "updated": "2022-10-19T22:21:20.639+0000",
                    "started": "2022-10-19T22:21:20.638+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818618",
                    "issueId": "13422590"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422590/worklog/818619",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amoeba commented on PR #14452:\nURL: https://github.com/apache/arrow/pull/14452#issuecomment-1284633523\n\n   Thanks so much @pitrou for taking a look. I made all your suggested changes in atomic commits.\n\n\n",
                    "created": "2022-10-19T22:22:15.153+0000",
                    "updated": "2022-10-19T22:22:15.153+0000",
                    "started": "2022-10-19T22:22:15.153+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818619",
                    "issueId": "13422590"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422590/worklog/818630",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #14452:\nURL: https://github.com/apache/arrow/pull/14452#discussion_r1000008261\n\n\n##########\ndocs/source/cpp/csv.rst:\n##########\n@@ -25,15 +25,26 @@ Reading and Writing CSV files\n =============================\n \n Arrow provides a fast CSV reader allowing ingestion of external data\n-as Arrow tables.\n+as Arrow Tables or streamed as Arrow RecordBatches.\n\nReview Comment:\n   ```suggestion\r\n   to create Arrow Tables or a stream of Arrow RecordBatches.\r\n   ```\r\n   \r\n   This sentence feels slightly grammatically off to me.  It sounds like the input data is tables or batches but really it's the output.\n\n\n\n##########\ndocs/source/cpp/csv.rst:\n##########\n@@ -56,19 +67,84 @@ A CSV file is read from a :class:`~arrow::io::InputStream`.\n                                       parse_options,\n                                       convert_options);\n       if (!maybe_reader.ok()) {\n-         // Handle TableReader instantiation error...\n+        // Handle TableReader instantiation error...\n       }\n       std::shared_ptr<arrow::csv::TableReader> reader = *maybe_reader;\n \n       // Read table from CSV file\n       auto maybe_table = reader->Read();\n       if (!maybe_table.ok()) {\n-         // Handle CSV read error\n-         // (for example a CSV syntax error or failed type conversion)\n+        // Handle CSV read error\n+        // (for example a CSV syntax error or failed type conversion)\n       }\n       std::shared_ptr<arrow::Table> table = *maybe_table;\n    }\n \n+StreamingReader\n+---------------\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::io::IOContext io_context = arrow::io::default_io_context();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate StreamingReader from input stream and options\n+      auto maybe_reader =\n+        arrow::csv::StreamingReader::Make(io_context,\n+                                          input,\n+                                          read_options,\n+                                          parse_options,\n+                                          convert_options);\n+      if (!maybe_reader.ok()) {\n+        // Handle StreamingReader instantiation error...\n+      }\n+      std::shared_ptr<arrow::csv::StreamingReader> reader = *maybe_reader;\n+\n+      // Set aside a RecordBatch pointer for re-use while streaming\n+      std::shared_ptr<RecordBatch> batch;\n+\n+      // Attempt to read the first RecordBatch\n+      arrow::Status status = reader->ReadNext(&batch);\n+\n+      if (!status.ok()) {\n+        // Handle read error\n+      }\n+\n+      if (batch == NULL) {\n+        // Handle end of file\n+      }\n+   }\n+\n+.. _cpp-csv-tradeoffs:\n+\n+Tradeoffs\n+---------\n+\n+The choice between using :class:`~arrow::csv::TableReader` or\n+:class:`~arrow::csv::StreamingReader` will depend on your use case but two\n+caveats are worth pointing out:\n+\n+1. :class:`~arrow::csv::TableReader` is capable of using multiple threads (See\n+   :ref:`Performance <cpp-csv-performance>`) whereas\n+   :class:`~arrow::csv::StreamingReader` is always single-threaded and will\n+   ignore :member:`ReadOptions::use_threads`.\n\nReview Comment:\n   Close enough I suppose.  The streaming reader does use some threads and will (hopefully) use more in the future.  But I don't know that we can meaningfully explain that here without going too far into the details.\n\n\n\n##########\ndocs/source/cpp/csv.rst:\n##########\n@@ -56,19 +67,84 @@ A CSV file is read from a :class:`~arrow::io::InputStream`.\n                                       parse_options,\n                                       convert_options);\n       if (!maybe_reader.ok()) {\n-         // Handle TableReader instantiation error...\n+        // Handle TableReader instantiation error...\n       }\n       std::shared_ptr<arrow::csv::TableReader> reader = *maybe_reader;\n \n       // Read table from CSV file\n       auto maybe_table = reader->Read();\n       if (!maybe_table.ok()) {\n-         // Handle CSV read error\n-         // (for example a CSV syntax error or failed type conversion)\n+        // Handle CSV read error\n+        // (for example a CSV syntax error or failed type conversion)\n       }\n       std::shared_ptr<arrow::Table> table = *maybe_table;\n    }\n \n+StreamingReader\n+---------------\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::io::IOContext io_context = arrow::io::default_io_context();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate StreamingReader from input stream and options\n+      auto maybe_reader =\n+        arrow::csv::StreamingReader::Make(io_context,\n+                                          input,\n+                                          read_options,\n+                                          parse_options,\n+                                          convert_options);\n+      if (!maybe_reader.ok()) {\n+        // Handle StreamingReader instantiation error...\n+      }\n+      std::shared_ptr<arrow::csv::StreamingReader> reader = *maybe_reader;\n+\n+      // Set aside a RecordBatch pointer for re-use while streaming\n+      std::shared_ptr<RecordBatch> batch;\n+\n+      // Attempt to read the first RecordBatch\n+      arrow::Status status = reader->ReadNext(&batch);\n+\n+      if (!status.ok()) {\n+        // Handle read error\n+      }\n+\n+      if (batch == NULL) {\n+        // Handle end of file\n+      }\n\nReview Comment:\n   ```suggestion\r\n         while (true) {\r\n           // Attempt to read the first RecordBatch\r\n           arrow::Status status = reader->ReadNext(&batch);\r\n   \r\n           if (!status.ok()) {\r\n             // Handle read error\r\n           }\r\n   \r\n           if (batch == NULL) {\r\n             // Handle end of file\r\n             break;\r\n           }\r\n           \r\n           // Do something with the batch\r\n         }\r\n   ```\r\n   \r\n   I know it is an example but I feel we should show actual streaming consumption.\n\n\n\n##########\ndocs/source/cpp/csv.rst:\n##########\n@@ -56,19 +67,84 @@ A CSV file is read from a :class:`~arrow::io::InputStream`.\n                                       parse_options,\n                                       convert_options);\n       if (!maybe_reader.ok()) {\n-         // Handle TableReader instantiation error...\n+        // Handle TableReader instantiation error...\n       }\n       std::shared_ptr<arrow::csv::TableReader> reader = *maybe_reader;\n \n       // Read table from CSV file\n       auto maybe_table = reader->Read();\n       if (!maybe_table.ok()) {\n-         // Handle CSV read error\n-         // (for example a CSV syntax error or failed type conversion)\n+        // Handle CSV read error\n+        // (for example a CSV syntax error or failed type conversion)\n       }\n       std::shared_ptr<arrow::Table> table = *maybe_table;\n    }\n \n+StreamingReader\n+---------------\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::io::IOContext io_context = arrow::io::default_io_context();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate StreamingReader from input stream and options\n+      auto maybe_reader =\n+        arrow::csv::StreamingReader::Make(io_context,\n+                                          input,\n+                                          read_options,\n+                                          parse_options,\n+                                          convert_options);\n+      if (!maybe_reader.ok()) {\n+        // Handle StreamingReader instantiation error...\n+      }\n+      std::shared_ptr<arrow::csv::StreamingReader> reader = *maybe_reader;\n+\n+      // Set aside a RecordBatch pointer for re-use while streaming\n+      std::shared_ptr<RecordBatch> batch;\n+\n+      // Attempt to read the first RecordBatch\n+      arrow::Status status = reader->ReadNext(&batch);\n+\n+      if (!status.ok()) {\n+        // Handle read error\n+      }\n+\n+      if (batch == NULL) {\n+        // Handle end of file\n+      }\n+   }\n+\n+.. _cpp-csv-tradeoffs:\n+\n+Tradeoffs\n+---------\n+\n+The choice between using :class:`~arrow::csv::TableReader` or\n+:class:`~arrow::csv::StreamingReader` will depend on your use case but two\n+caveats are worth pointing out:\n+\n+1. :class:`~arrow::csv::TableReader` is capable of using multiple threads (See\n+   :ref:`Performance <cpp-csv-performance>`) whereas\n+   :class:`~arrow::csv::StreamingReader` is always single-threaded and will\n+   ignore :member:`ReadOptions::use_threads`.\n+2. :class:`~arrow::csv::StreamingReader` performs type inference off the first\n+   block that's read in, after which point the types are frozen. Either set\n+   :member:`ReadOptions::block_size` to a large enough value or use\n+   :member:`ConvertOptions::column_types` to set the desired data types\n+   explicitly.\n\nReview Comment:\n   Or else what?  It may not be clear to the user this would lead to an error like \"XYZ is not a valid float32\"\n\n\n\n##########\ndocs/source/cpp/csv.rst:\n##########\n@@ -25,15 +25,26 @@ Reading and Writing CSV files\n =============================\n \n Arrow provides a fast CSV reader allowing ingestion of external data\n-as Arrow tables.\n+as Arrow Tables or streamed as Arrow RecordBatches.\n \n .. seealso::\n    :ref:`CSV reader/writer API reference <cpp-api-csv>`.\n \n-Basic usage\n-===========\n+Reading CSV files\n+=================\n+\n+Data in a CSV file can either be read in as a single Arrow Table using\n+:class:`~arrow::csv::TableReader` or streamed as RecordBatches using\n+:class:`~arrow::csv::StreamingReader`. See :ref:`Tradeoffs <cpp-csv-tradeoffs>` for a\n+discussion of the tradeoffs between the two methods.\n+\n+Both these readers require an :class:`arrow::io::InputStream` instance\n\nReview Comment:\n   Not a problem at the moment.  However, there is [a PR](https://github.com/apache/arrow/pull/14269) which would allow you to get slightly better performance if you use a random access file (typically if you're connected to cloud storage) instead of an input stream.  So we might need to update this text after that pull merges.\n\n\n\n##########\ndocs/source/cpp/csv.rst:\n##########\n@@ -56,19 +67,84 @@ A CSV file is read from a :class:`~arrow::io::InputStream`.\n                                       parse_options,\n                                       convert_options);\n       if (!maybe_reader.ok()) {\n-         // Handle TableReader instantiation error...\n+        // Handle TableReader instantiation error...\n       }\n       std::shared_ptr<arrow::csv::TableReader> reader = *maybe_reader;\n \n       // Read table from CSV file\n       auto maybe_table = reader->Read();\n       if (!maybe_table.ok()) {\n-         // Handle CSV read error\n-         // (for example a CSV syntax error or failed type conversion)\n+        // Handle CSV read error\n+        // (for example a CSV syntax error or failed type conversion)\n       }\n       std::shared_ptr<arrow::Table> table = *maybe_table;\n    }\n \n+StreamingReader\n+---------------\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::io::IOContext io_context = arrow::io::default_io_context();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate StreamingReader from input stream and options\n+      auto maybe_reader =\n+        arrow::csv::StreamingReader::Make(io_context,\n+                                          input,\n+                                          read_options,\n+                                          parse_options,\n+                                          convert_options);\n+      if (!maybe_reader.ok()) {\n+        // Handle StreamingReader instantiation error...\n+      }\n+      std::shared_ptr<arrow::csv::StreamingReader> reader = *maybe_reader;\n+\n+      // Set aside a RecordBatch pointer for re-use while streaming\n+      std::shared_ptr<RecordBatch> batch;\n+\n+      // Attempt to read the first RecordBatch\n+      arrow::Status status = reader->ReadNext(&batch);\n+\n+      if (!status.ok()) {\n+        // Handle read error\n+      }\n+\n+      if (batch == NULL) {\n+        // Handle end of file\n+      }\n+   }\n+\n+.. _cpp-csv-tradeoffs:\n+\n+Tradeoffs\n+---------\n+\n+The choice between using :class:`~arrow::csv::TableReader` or\n+:class:`~arrow::csv::StreamingReader` will depend on your use case but two\n+caveats are worth pointing out:\n+\n+1. :class:`~arrow::csv::TableReader` is capable of using multiple threads (See\n+   :ref:`Performance <cpp-csv-performance>`) whereas\n+   :class:`~arrow::csv::StreamingReader` is always single-threaded and will\n+   ignore :member:`ReadOptions::use_threads`.\n+2. :class:`~arrow::csv::StreamingReader` performs type inference off the first\n+   block that's read in, after which point the types are frozen. Either set\n+   :member:`ReadOptions::block_size` to a large enough value or use\n+   :member:`ConvertOptions::column_types` to set the desired data types\n+   explicitly.\n+\n\nReview Comment:\n   These are all cons :)\r\n   \r\n   The table reader requires loading all of the data into memory.  This is a pretty significant tradeoff we should point out here.\n\n\n\n",
                    "created": "2022-10-19T23:22:56.006+0000",
                    "updated": "2022-10-19T23:22:56.006+0000",
                    "started": "2022-10-19T23:22:56.006+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818630",
                    "issueId": "13422590"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422590/worklog/818634",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amoeba commented on code in PR #14452:\nURL: https://github.com/apache/arrow/pull/14452#discussion_r1000023812\n\n\n##########\ndocs/source/cpp/csv.rst:\n##########\n@@ -25,15 +25,26 @@ Reading and Writing CSV files\n =============================\n \n Arrow provides a fast CSV reader allowing ingestion of external data\n-as Arrow tables.\n+as Arrow Tables or streamed as Arrow RecordBatches.\n\nReview Comment:\n   Fair enough. Fixed in 381f8b29ba205f6e0040c632eb23cec8eb46764c.\n\n\n\n",
                    "created": "2022-10-19T23:51:38.586+0000",
                    "updated": "2022-10-19T23:51:38.586+0000",
                    "started": "2022-10-19T23:51:38.585+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818634",
                    "issueId": "13422590"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422590/worklog/818635",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amoeba commented on code in PR #14452:\nURL: https://github.com/apache/arrow/pull/14452#discussion_r1000024176\n\n\n##########\ndocs/source/cpp/csv.rst:\n##########\n@@ -25,15 +25,26 @@ Reading and Writing CSV files\n =============================\n \n Arrow provides a fast CSV reader allowing ingestion of external data\n-as Arrow tables.\n+as Arrow Tables or streamed as Arrow RecordBatches.\n \n .. seealso::\n    :ref:`CSV reader/writer API reference <cpp-api-csv>`.\n \n-Basic usage\n-===========\n+Reading CSV files\n+=================\n+\n+Data in a CSV file can either be read in as a single Arrow Table using\n+:class:`~arrow::csv::TableReader` or streamed as RecordBatches using\n+:class:`~arrow::csv::StreamingReader`. See :ref:`Tradeoffs <cpp-csv-tradeoffs>` for a\n+discussion of the tradeoffs between the two methods.\n+\n+Both these readers require an :class:`arrow::io::InputStream` instance\n\nReview Comment:\n   Thanks for the heads up. I'll keep track of that PR.\n\n\n\n",
                    "created": "2022-10-19T23:52:38.653+0000",
                    "updated": "2022-10-19T23:52:38.653+0000",
                    "started": "2022-10-19T23:52:38.653+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818635",
                    "issueId": "13422590"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422590/worklog/818637",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amoeba commented on code in PR #14452:\nURL: https://github.com/apache/arrow/pull/14452#discussion_r1000025482\n\n\n##########\ndocs/source/cpp/csv.rst:\n##########\n@@ -56,19 +67,84 @@ A CSV file is read from a :class:`~arrow::io::InputStream`.\n                                       parse_options,\n                                       convert_options);\n       if (!maybe_reader.ok()) {\n-         // Handle TableReader instantiation error...\n+        // Handle TableReader instantiation error...\n       }\n       std::shared_ptr<arrow::csv::TableReader> reader = *maybe_reader;\n \n       // Read table from CSV file\n       auto maybe_table = reader->Read();\n       if (!maybe_table.ok()) {\n-         // Handle CSV read error\n-         // (for example a CSV syntax error or failed type conversion)\n+        // Handle CSV read error\n+        // (for example a CSV syntax error or failed type conversion)\n       }\n       std::shared_ptr<arrow::Table> table = *maybe_table;\n    }\n \n+StreamingReader\n+---------------\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::io::IOContext io_context = arrow::io::default_io_context();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate StreamingReader from input stream and options\n+      auto maybe_reader =\n+        arrow::csv::StreamingReader::Make(io_context,\n+                                          input,\n+                                          read_options,\n+                                          parse_options,\n+                                          convert_options);\n+      if (!maybe_reader.ok()) {\n+        // Handle StreamingReader instantiation error...\n+      }\n+      std::shared_ptr<arrow::csv::StreamingReader> reader = *maybe_reader;\n+\n+      // Set aside a RecordBatch pointer for re-use while streaming\n+      std::shared_ptr<RecordBatch> batch;\n+\n+      // Attempt to read the first RecordBatch\n+      arrow::Status status = reader->ReadNext(&batch);\n+\n+      if (!status.ok()) {\n+        // Handle read error\n+      }\n+\n+      if (batch == NULL) {\n+        // Handle end of file\n+      }\n\nReview Comment:\n   Agreed. Accepted your change in 32dcec6de04b10111ec78413589013bd6646c2a5.\n\n\n\n",
                    "created": "2022-10-19T23:55:43.826+0000",
                    "updated": "2022-10-19T23:55:43.826+0000",
                    "started": "2022-10-19T23:55:43.826+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818637",
                    "issueId": "13422590"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422590/worklog/818643",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amoeba commented on code in PR #14452:\nURL: https://github.com/apache/arrow/pull/14452#discussion_r1000030204\n\n\n##########\ndocs/source/cpp/csv.rst:\n##########\n@@ -56,19 +67,84 @@ A CSV file is read from a :class:`~arrow::io::InputStream`.\n                                       parse_options,\n                                       convert_options);\n       if (!maybe_reader.ok()) {\n-         // Handle TableReader instantiation error...\n+        // Handle TableReader instantiation error...\n       }\n       std::shared_ptr<arrow::csv::TableReader> reader = *maybe_reader;\n \n       // Read table from CSV file\n       auto maybe_table = reader->Read();\n       if (!maybe_table.ok()) {\n-         // Handle CSV read error\n-         // (for example a CSV syntax error or failed type conversion)\n+        // Handle CSV read error\n+        // (for example a CSV syntax error or failed type conversion)\n       }\n       std::shared_ptr<arrow::Table> table = *maybe_table;\n    }\n \n+StreamingReader\n+---------------\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::io::IOContext io_context = arrow::io::default_io_context();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate StreamingReader from input stream and options\n+      auto maybe_reader =\n+        arrow::csv::StreamingReader::Make(io_context,\n+                                          input,\n+                                          read_options,\n+                                          parse_options,\n+                                          convert_options);\n+      if (!maybe_reader.ok()) {\n+        // Handle StreamingReader instantiation error...\n+      }\n+      std::shared_ptr<arrow::csv::StreamingReader> reader = *maybe_reader;\n+\n+      // Set aside a RecordBatch pointer for re-use while streaming\n+      std::shared_ptr<RecordBatch> batch;\n+\n+      // Attempt to read the first RecordBatch\n+      arrow::Status status = reader->ReadNext(&batch);\n+\n+      if (!status.ok()) {\n+        // Handle read error\n+      }\n+\n+      if (batch == NULL) {\n+        // Handle end of file\n+      }\n+   }\n+\n+.. _cpp-csv-tradeoffs:\n+\n+Tradeoffs\n+---------\n+\n+The choice between using :class:`~arrow::csv::TableReader` or\n+:class:`~arrow::csv::StreamingReader` will depend on your use case but two\n+caveats are worth pointing out:\n+\n+1. :class:`~arrow::csv::TableReader` is capable of using multiple threads (See\n+   :ref:`Performance <cpp-csv-performance>`) whereas\n+   :class:`~arrow::csv::StreamingReader` is always single-threaded and will\n+   ignore :member:`ReadOptions::use_threads`.\n\nReview Comment:\n   I based my text here off of https://github.com/amoeba/arrow/blob/9640c3f7db50a1e95d397a8d9ec37ca33d10c733/cpp/src/arrow/csv/reader.h#L64-L71. Should we update that comment too or is this just nuance?\r\n   \r\n   Would better language be something like:\r\n   \r\n   > When reading the entire contents of a CSV, TableReader will tend to be more performant than StreamingReader because it makes better use of available cores.\n\n\n\n",
                    "created": "2022-10-20T00:07:35.113+0000",
                    "updated": "2022-10-20T00:07:35.113+0000",
                    "started": "2022-10-20T00:07:35.112+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818643",
                    "issueId": "13422590"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422590/worklog/818644",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amoeba commented on code in PR #14452:\nURL: https://github.com/apache/arrow/pull/14452#discussion_r1000030908\n\n\n##########\ndocs/source/cpp/csv.rst:\n##########\n@@ -56,19 +67,84 @@ A CSV file is read from a :class:`~arrow::io::InputStream`.\n                                       parse_options,\n                                       convert_options);\n       if (!maybe_reader.ok()) {\n-         // Handle TableReader instantiation error...\n+        // Handle TableReader instantiation error...\n       }\n       std::shared_ptr<arrow::csv::TableReader> reader = *maybe_reader;\n \n       // Read table from CSV file\n       auto maybe_table = reader->Read();\n       if (!maybe_table.ok()) {\n-         // Handle CSV read error\n-         // (for example a CSV syntax error or failed type conversion)\n+        // Handle CSV read error\n+        // (for example a CSV syntax error or failed type conversion)\n       }\n       std::shared_ptr<arrow::Table> table = *maybe_table;\n    }\n \n+StreamingReader\n+---------------\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::io::IOContext io_context = arrow::io::default_io_context();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate StreamingReader from input stream and options\n+      auto maybe_reader =\n+        arrow::csv::StreamingReader::Make(io_context,\n+                                          input,\n+                                          read_options,\n+                                          parse_options,\n+                                          convert_options);\n+      if (!maybe_reader.ok()) {\n+        // Handle StreamingReader instantiation error...\n+      }\n+      std::shared_ptr<arrow::csv::StreamingReader> reader = *maybe_reader;\n+\n+      // Set aside a RecordBatch pointer for re-use while streaming\n+      std::shared_ptr<RecordBatch> batch;\n+\n+      // Attempt to read the first RecordBatch\n+      arrow::Status status = reader->ReadNext(&batch);\n+\n+      if (!status.ok()) {\n+        // Handle read error\n+      }\n+\n+      if (batch == NULL) {\n+        // Handle end of file\n+      }\n+   }\n+\n+.. _cpp-csv-tradeoffs:\n+\n+Tradeoffs\n+---------\n+\n+The choice between using :class:`~arrow::csv::TableReader` or\n+:class:`~arrow::csv::StreamingReader` will depend on your use case but two\n+caveats are worth pointing out:\n+\n+1. :class:`~arrow::csv::TableReader` is capable of using multiple threads (See\n+   :ref:`Performance <cpp-csv-performance>`) whereas\n+   :class:`~arrow::csv::StreamingReader` is always single-threaded and will\n+   ignore :member:`ReadOptions::use_threads`.\n+2. :class:`~arrow::csv::StreamingReader` performs type inference off the first\n+   block that's read in, after which point the types are frozen. Either set\n+   :member:`ReadOptions::block_size` to a large enough value or use\n+   :member:`ConvertOptions::column_types` to set the desired data types\n+   explicitly.\n+\n\nReview Comment:\n   > These are all cons :)\r\n   \r\n   Can you elaborate on this? Do you just mean to say they aren't really tradeoffs?\r\n   \r\n   > The table reader requires loading all of the data into memory. This is a pretty significant tradeoff we should point out here.\r\n   \r\n   Yep. I wasn't sure if that was too obvious and removed it. I'll put it back in.\n\n\n\n",
                    "created": "2022-10-20T00:09:30.103+0000",
                    "updated": "2022-10-20T00:09:30.103+0000",
                    "started": "2022-10-20T00:09:30.102+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818644",
                    "issueId": "13422590"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422590/worklog/818645",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amoeba commented on code in PR #14452:\nURL: https://github.com/apache/arrow/pull/14452#discussion_r1000031167\n\n\n##########\ndocs/source/cpp/csv.rst:\n##########\n@@ -56,19 +67,84 @@ A CSV file is read from a :class:`~arrow::io::InputStream`.\n                                       parse_options,\n                                       convert_options);\n       if (!maybe_reader.ok()) {\n-         // Handle TableReader instantiation error...\n+        // Handle TableReader instantiation error...\n       }\n       std::shared_ptr<arrow::csv::TableReader> reader = *maybe_reader;\n \n       // Read table from CSV file\n       auto maybe_table = reader->Read();\n       if (!maybe_table.ok()) {\n-         // Handle CSV read error\n-         // (for example a CSV syntax error or failed type conversion)\n+        // Handle CSV read error\n+        // (for example a CSV syntax error or failed type conversion)\n       }\n       std::shared_ptr<arrow::Table> table = *maybe_table;\n    }\n \n+StreamingReader\n+---------------\n+\n+.. code-block:: cpp\n+\n+   #include \"arrow/csv/api.h\"\n+\n+   {\n+      // ...\n+      arrow::io::IOContext io_context = arrow::io::default_io_context();\n+      std::shared_ptr<arrow::io::InputStream> input = ...;\n+\n+      auto read_options = arrow::csv::ReadOptions::Defaults();\n+      auto parse_options = arrow::csv::ParseOptions::Defaults();\n+      auto convert_options = arrow::csv::ConvertOptions::Defaults();\n+\n+      // Instantiate StreamingReader from input stream and options\n+      auto maybe_reader =\n+        arrow::csv::StreamingReader::Make(io_context,\n+                                          input,\n+                                          read_options,\n+                                          parse_options,\n+                                          convert_options);\n+      if (!maybe_reader.ok()) {\n+        // Handle StreamingReader instantiation error...\n+      }\n+      std::shared_ptr<arrow::csv::StreamingReader> reader = *maybe_reader;\n+\n+      // Set aside a RecordBatch pointer for re-use while streaming\n+      std::shared_ptr<RecordBatch> batch;\n+\n+      // Attempt to read the first RecordBatch\n+      arrow::Status status = reader->ReadNext(&batch);\n+\n+      if (!status.ok()) {\n+        // Handle read error\n+      }\n+\n+      if (batch == NULL) {\n+        // Handle end of file\n+      }\n+   }\n+\n+.. _cpp-csv-tradeoffs:\n+\n+Tradeoffs\n+---------\n+\n+The choice between using :class:`~arrow::csv::TableReader` or\n+:class:`~arrow::csv::StreamingReader` will depend on your use case but two\n+caveats are worth pointing out:\n+\n+1. :class:`~arrow::csv::TableReader` is capable of using multiple threads (See\n+   :ref:`Performance <cpp-csv-performance>`) whereas\n+   :class:`~arrow::csv::StreamingReader` is always single-threaded and will\n+   ignore :member:`ReadOptions::use_threads`.\n+2. :class:`~arrow::csv::StreamingReader` performs type inference off the first\n+   block that's read in, after which point the types are frozen. Either set\n+   :member:`ReadOptions::block_size` to a large enough value or use\n+   :member:`ConvertOptions::column_types` to set the desired data types\n+   explicitly.\n\nReview Comment:\n   Good point here. I'll update this language.\n\n\n\n",
                    "created": "2022-10-20T00:10:05.111+0000",
                    "updated": "2022-10-20T00:10:05.111+0000",
                    "started": "2022-10-20T00:10:05.111+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818645",
                    "issueId": "13422590"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422590/worklog/818646",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "amoeba commented on PR #14452:\nURL: https://github.com/apache/arrow/pull/14452#issuecomment-1284724655\n\n   Thanks for the review @westonpace, this is really helpful. I have some language to work on and I'll update here when this is ready for another review.\n\n\n",
                    "created": "2022-10-20T00:10:24.372+0000",
                    "updated": "2022-10-20T00:10:24.372+0000",
                    "started": "2022-10-20T00:10:24.372+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818646",
                    "issueId": "13422590"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 18600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7e2e1f7[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7f9bedaa[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@41faf8fb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@61acbbd3[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@ce30d9a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@673c561d[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@71974721[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@756108e3[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@617a5408[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@64737a84[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f969764[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@52cda465[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 18600,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Oct 26 19:52:29 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-10-26T19:52:29.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-15328/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2022-01-13T17:51:56.000+0000",
        "updated": "2022-10-29T05:32:17.000+0000",
        "timeoriginalestimate": null,
        "description": "The streaming CSV reader is missing from the C++ documentation.  The table reader is documented here: https://arrow.apache.org/docs/cpp/api/formats.html?highlight=tablereader#_CPPv4N5arrow3csv11TableReaderE\r\n\r\nThe references to streaming reader are missing from {{docs/source/cpp/api/formats.rst}}.  In addition, we should probably add an example of using the streaming CSV reader to this page: https://arrow.apache.org/docs/cpp/csv.html\r\n\r\nWe should probably also add a short paragraph describing the tradeoffs between the two.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 18600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Streaming CSV reader missing from documentation",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422590/comment/17617985",
                    "id": "17617985",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=brycemecum",
                        "name": "brycemecum",
                        "key": "JIRAUSER280015",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER280015&avatarId=51518",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER280015&avatarId=51518",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER280015&avatarId=51518",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER280015&avatarId=51518"
                        },
                        "displayName": "Bryce Mecum",
                        "active": true,
                        "timeZone": "America/Juneau"
                    },
                    "body": "Part of the work mentioned in this ticket (ARROW-15328) was done as part of ARROW-15435, specifically adding a reference in formats.rst to arrow::csv::StreamingReader",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=brycemecum",
                        "name": "brycemecum",
                        "key": "JIRAUSER280015",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER280015&avatarId=51518",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER280015&avatarId=51518",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER280015&avatarId=51518",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER280015&avatarId=51518"
                        },
                        "displayName": "Bryce Mecum",
                        "active": true,
                        "timeZone": "America/Juneau"
                    },
                    "created": "2022-10-14T22:37:21.533+0000",
                    "updated": "2022-10-14T22:37:21.533+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422590/comment/17619766",
                    "id": "17619766",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=brycemecum",
                        "name": "brycemecum",
                        "key": "JIRAUSER280015",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER280015&avatarId=51518",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER280015&avatarId=51518",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER280015&avatarId=51518",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER280015&avatarId=51518"
                        },
                        "displayName": "Bryce Mecum",
                        "active": true,
                        "timeZone": "America/Juneau"
                    },
                    "body": "To round out this ticket, I submitted a PR which includes an example of StreamingReader and a discussion of tradeoffs. Needs review. See [#14452|https://github.com/apache/arrow/pull/14452]\u00a0\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=brycemecum",
                        "name": "brycemecum",
                        "key": "JIRAUSER280015",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=JIRAUSER280015&avatarId=51518",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=JIRAUSER280015&avatarId=51518",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=JIRAUSER280015&avatarId=51518",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=JIRAUSER280015&avatarId=51518"
                        },
                        "displayName": "Bryce Mecum",
                        "active": true,
                        "timeZone": "America/Juneau"
                    },
                    "created": "2022-10-18T20:06:53.057+0000",
                    "updated": "2022-10-18T20:06:53.057+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13422590/comment/17624719",
                    "id": "17624719",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 14452\n[https://github.com/apache/arrow/pull/14452]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-10-26T19:52:29.952+0000",
                    "updated": "2022-10-26T19:52:29.952+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|z0ykmg:",
        "customfield_12314139": null
    }
}