{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13211698",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13211698",
    "key": "ARROW-4365",
    "fields": {
        "parent": {
            "id": "13205055",
            "key": "ARROW-4059",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13205055",
            "fields": {
                "summary": "[Rust] Parquet/Arrow Integration",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                    "id": "2",
                    "description": "A new feature of the product, which has yet to be developed.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                    "name": "New Feature",
                    "subtask": false,
                    "avatarId": 21141
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=liurenjie1024",
            "name": "liurenjie1024",
            "key": "liurenjie1024",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Renjie Liu",
            "active": true,
            "timeZone": "Asia/Chongqing"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=liurenjie1024",
            "name": "liurenjie1024",
            "key": "liurenjie1024",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Renjie Liu",
            "active": true,
            "timeZone": "Asia/Chongqing"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=liurenjie1024",
            "name": "liurenjie1024",
            "key": "liurenjie1024",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Renjie Liu",
            "active": true,
            "timeZone": "Asia/Chongqing"
        },
        "aggregateprogress": {
            "progress": 36600,
            "total": 36600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 36600,
            "total": 36600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4365/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 73,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13211698/worklog/240203",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on pull request #4292: ARROW-4365: [Rust] [Parquet] Implement record reader.\nURL: https://github.com/apache/arrow/pull/4292\n \n \n   RecordReader reads logical records into memory, this is the prerequisite for ColumnReader.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-10T12:02:34.355+0000",
                    "updated": "2019-05-10T12:02:34.355+0000",
                    "started": "2019-05-10T12:02:34.355+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "240203",
                    "issueId": "13211698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13211698/worklog/240204",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on issue #4292: ARROW-4365: [Rust] [Parquet] Implement record reader.\nURL: https://github.com/apache/arrow/pull/4292#issuecomment-491264679\n \n \n   @sunchao @nevi-me @andygrove Please help to review this.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-10T12:03:11.076+0000",
                    "updated": "2019-05-10T12:03:11.076+0000",
                    "started": "2019-05-10T12:03:11.076+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "240204",
                    "issueId": "13211698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13211698/worklog/241400",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #4292: ARROW-4365: [Rust] [Parquet] Implement record reader.\nURL: https://github.com/apache/arrow/pull/4292#discussion_r282887332\n \n \n\n ##########\n File path: rust/parquet/src/arrow/record_reader.rs\n ##########\n @@ -0,0 +1,669 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::cmp::{max, min};\n+use std::mem::replace;\n+use std::mem::size_of;\n+use std::mem::transmute;\n+use std::slice;\n+\n+use crate::column::page::PageReader;\n+use crate::column::reader::ColumnReaderImpl;\n+use crate::data_type::DataType;\n+use crate::errors::ParquetError;\n+use crate::errors::Result;\n+use crate::schema::types::ColumnDescPtr;\n+use arrow::bitmap::Bitmap;\n+use arrow::buffer::Buffer;\n+use arrow::buffer::MutableBuffer;\n+use arrow::builder::BooleanBufferBuilder;\n+use arrow::builder::BufferBuilderTrait;\n+\n+const MIN_BATCH_SIZE: usize = 1024;\n+\n+/// A ```RecordReader``` is a stateful column reader that delimits semantic records.\n+pub struct RecordReader<T: DataType> {\n+    column_schema: ColumnDescPtr,\n+\n+    records: MutableBuffer,\n+    def_levels: Option<MutableBuffer>,\n+    rep_levels: Option<MutableBuffer>,\n+    nullity_bitmap: Option<BooleanBufferBuilder>,\n+    column_reader: Option<ColumnReaderImpl<T>>,\n+\n+    /// Number of records accumulated in records\n+    records_num: usize,\n+\n+    /// Last offset of ```records_num``` records\n+    values_pos: usize,\n+    values_seen: usize,\n+    /// Starts from 1, number of values have been written to buffer\n+    values_written: usize,\n+    in_middle_of_record: bool,\n+}\n+\n+struct FatPtr<T> {\n+    ptr: *const T,\n+    len: usize,\n+}\n+\n+impl<T> FatPtr<T> {\n+    fn new(ptr: *const T, len: usize) -> Self {\n+        Self { ptr, len }\n+    }\n+\n+    unsafe fn to_slice(&self) -> &[T] {\n+        slice::from_raw_parts(self.ptr, self.len)\n+    }\n+\n+    unsafe fn to_slice_mut(&self) -> &mut [T] {\n+        slice::from_raw_parts_mut(self.ptr as *mut T, self.len)\n+    }\n+}\n+\n+impl<T: DataType> RecordReader<T> {\n+    pub fn new(column_schema: ColumnDescPtr) -> Self {\n+        let (def_levels, nullity_bitmap) = if column_schema.max_def_level() > 0 {\n+            (\n+                Some(MutableBuffer::new(MIN_BATCH_SIZE)),\n+                Some(BooleanBufferBuilder::new(MIN_BATCH_SIZE)),\n+            )\n+        } else {\n+            (None, None)\n+        };\n+\n+        let rep_levels = if column_schema.max_rep_level() > 0 {\n+            Some(MutableBuffer::new(MIN_BATCH_SIZE))\n+        } else {\n+            None\n+        };\n+\n+        Self {\n+            records: MutableBuffer::new(MIN_BATCH_SIZE),\n+            def_levels,\n+            rep_levels,\n+            nullity_bitmap,\n+            column_reader: None,\n+            column_schema,\n+            records_num: 0usize,\n+            values_pos: 0usize,\n+            values_seen: 0usize,\n+            values_written: 0usize,\n+            in_middle_of_record: false,\n+        }\n+    }\n+\n+    /// Set the current page reader.\n+    pub fn set_page_reader(&mut self, page_reader: Box<PageReader>) -> Result<()> {\n \n Review comment:\n   Wouldn't it be better to return `()` if this is infallible? Or do you envisage this function possibly returning errors in future?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-13T23:43:29.151+0000",
                    "updated": "2019-05-13T23:43:29.151+0000",
                    "started": "2019-05-13T23:43:29.150+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "241400",
                    "issueId": "13211698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13211698/worklog/241401",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nevi-me commented on pull request #4292: ARROW-4365: [Rust] [Parquet] Implement record reader.\nURL: https://github.com/apache/arrow/pull/4292#discussion_r282885767\n \n \n\n ##########\n File path: rust/parquet/src/arrow/record_reader.rs\n ##########\n @@ -0,0 +1,669 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::cmp::{max, min};\n+use std::mem::replace;\n+use std::mem::size_of;\n+use std::mem::transmute;\n+use std::slice;\n+\n+use crate::column::page::PageReader;\n+use crate::column::reader::ColumnReaderImpl;\n+use crate::data_type::DataType;\n+use crate::errors::ParquetError;\n \n Review comment:\n   Please consolidate some of these `use` statements\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-13T23:43:29.151+0000",
                    "updated": "2019-05-13T23:43:29.151+0000",
                    "started": "2019-05-13T23:43:29.151+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "241401",
                    "issueId": "13211698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13211698/worklog/241848",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #4292: ARROW-4365: [Rust] [Parquet] Implement record reader.\nURL: https://github.com/apache/arrow/pull/4292#discussion_r283209563\n \n \n\n ##########\n File path: rust/parquet/src/arrow/record_reader.rs\n ##########\n @@ -0,0 +1,669 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::cmp::{max, min};\n+use std::mem::replace;\n+use std::mem::size_of;\n+use std::mem::transmute;\n+use std::slice;\n+\n+use crate::column::page::PageReader;\n+use crate::column::reader::ColumnReaderImpl;\n+use crate::data_type::DataType;\n+use crate::errors::ParquetError;\n+use crate::errors::Result;\n+use crate::schema::types::ColumnDescPtr;\n+use arrow::bitmap::Bitmap;\n+use arrow::buffer::Buffer;\n+use arrow::buffer::MutableBuffer;\n+use arrow::builder::BooleanBufferBuilder;\n+use arrow::builder::BufferBuilderTrait;\n+\n+const MIN_BATCH_SIZE: usize = 1024;\n+\n+/// A ```RecordReader``` is a stateful column reader that delimits semantic records.\n+pub struct RecordReader<T: DataType> {\n+    column_schema: ColumnDescPtr,\n+\n+    records: MutableBuffer,\n+    def_levels: Option<MutableBuffer>,\n+    rep_levels: Option<MutableBuffer>,\n+    nullity_bitmap: Option<BooleanBufferBuilder>,\n+    column_reader: Option<ColumnReaderImpl<T>>,\n+\n+    /// Number of records accumulated in records\n+    records_num: usize,\n+\n+    /// Last offset of ```records_num``` records\n+    values_pos: usize,\n+    values_seen: usize,\n+    /// Starts from 1, number of values have been written to buffer\n+    values_written: usize,\n+    in_middle_of_record: bool,\n+}\n+\n+struct FatPtr<T> {\n+    ptr: *const T,\n+    len: usize,\n+}\n+\n+impl<T> FatPtr<T> {\n+    fn new(ptr: *const T, len: usize) -> Self {\n+        Self { ptr, len }\n+    }\n+\n+    unsafe fn to_slice(&self) -> &[T] {\n+        slice::from_raw_parts(self.ptr, self.len)\n+    }\n+\n+    unsafe fn to_slice_mut(&self) -> &mut [T] {\n+        slice::from_raw_parts_mut(self.ptr as *mut T, self.len)\n+    }\n+}\n+\n+impl<T: DataType> RecordReader<T> {\n+    pub fn new(column_schema: ColumnDescPtr) -> Self {\n+        let (def_levels, nullity_bitmap) = if column_schema.max_def_level() > 0 {\n+            (\n+                Some(MutableBuffer::new(MIN_BATCH_SIZE)),\n+                Some(BooleanBufferBuilder::new(MIN_BATCH_SIZE)),\n+            )\n+        } else {\n+            (None, None)\n+        };\n+\n+        let rep_levels = if column_schema.max_rep_level() > 0 {\n+            Some(MutableBuffer::new(MIN_BATCH_SIZE))\n+        } else {\n+            None\n+        };\n+\n+        Self {\n+            records: MutableBuffer::new(MIN_BATCH_SIZE),\n+            def_levels,\n+            rep_levels,\n+            nullity_bitmap,\n+            column_reader: None,\n+            column_schema,\n+            records_num: 0usize,\n+            values_pos: 0usize,\n+            values_seen: 0usize,\n+            values_written: 0usize,\n+            in_middle_of_record: false,\n+        }\n+    }\n+\n+    /// Set the current page reader.\n+    pub fn set_page_reader(&mut self, page_reader: Box<PageReader>) -> Result<()> {\n+        self.column_reader = Some(ColumnReaderImpl::new(\n+            self.column_schema.clone(),\n+            page_reader,\n+        ));\n+        Ok(())\n+    }\n+\n+    /// Try to read ```num_records``` of column data into internal buffer.\n+    ///\n+    /// # Returns\n+    ///\n+    /// Number of actual records read.\n+    pub fn read_records(&mut self, num_records: usize) -> Result<usize> {\n+        let mut records_read = 0usize;\n+        let mut end_of_column = false;\n+\n+        loop {\n+            let mut iter_record_num = self.split_records(num_records - records_read)?;\n+\n+            if end_of_column\n+                && self.values_seen >= self.values_written\n+                && self.in_middle_of_record\n+            {\n+                self.records_num += 1;\n+                self.values_pos = self.values_seen - 1;\n+                self.in_middle_of_record = false;\n+                iter_record_num += 1;\n+            }\n+\n+            records_read += iter_record_num;\n+\n+            if records_read >= num_records {\n+                break;\n+            }\n+\n+            if end_of_column {\n+                break;\n+            }\n+\n+            let batch_size = max(num_records - records_read, MIN_BATCH_SIZE);\n+\n+            let values_read = self.read_one_batch(batch_size)?;\n+            if values_read < batch_size {\n+                end_of_column = true;\n+            }\n+        }\n+\n+        Ok(records_read)\n+    }\n+\n+    /// Returns number of records stored in buffer.\n+    pub fn records_num(&self) -> usize {\n \n Review comment:\n   Rename this to `num_records`? \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-14T16:47:42.359+0000",
                    "updated": "2019-05-14T16:47:42.359+0000",
                    "started": "2019-05-14T16:47:42.358+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "241848",
                    "issueId": "13211698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13211698/worklog/241849",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #4292: ARROW-4365: [Rust] [Parquet] Implement record reader.\nURL: https://github.com/apache/arrow/pull/4292#discussion_r283881856\n \n \n\n ##########\n File path: rust/parquet/src/arrow/record_reader.rs\n ##########\n @@ -0,0 +1,669 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::cmp::{max, min};\n+use std::mem::replace;\n+use std::mem::size_of;\n+use std::mem::transmute;\n+use std::slice;\n+\n+use crate::column::page::PageReader;\n+use crate::column::reader::ColumnReaderImpl;\n+use crate::data_type::DataType;\n+use crate::errors::ParquetError;\n+use crate::errors::Result;\n+use crate::schema::types::ColumnDescPtr;\n+use arrow::bitmap::Bitmap;\n+use arrow::buffer::Buffer;\n+use arrow::buffer::MutableBuffer;\n+use arrow::builder::BooleanBufferBuilder;\n+use arrow::builder::BufferBuilderTrait;\n+\n+const MIN_BATCH_SIZE: usize = 1024;\n+\n+/// A ```RecordReader``` is a stateful column reader that delimits semantic records.\n+pub struct RecordReader<T: DataType> {\n+    column_schema: ColumnDescPtr,\n \n Review comment:\n   nit: can we call it `column_desc` or something else? schema describes a set of columns but here we are talking about a single column.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-14T16:47:42.383+0000",
                    "updated": "2019-05-14T16:47:42.383+0000",
                    "started": "2019-05-14T16:47:42.382+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "241849",
                    "issueId": "13211698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13211698/worklog/241850",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #4292: ARROW-4365: [Rust] [Parquet] Implement record reader.\nURL: https://github.com/apache/arrow/pull/4292#discussion_r283662921\n \n \n\n ##########\n File path: rust/parquet/src/arrow/record_reader.rs\n ##########\n @@ -0,0 +1,669 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::cmp::{max, min};\n+use std::mem::replace;\n+use std::mem::size_of;\n+use std::mem::transmute;\n+use std::slice;\n+\n+use crate::column::page::PageReader;\n+use crate::column::reader::ColumnReaderImpl;\n+use crate::data_type::DataType;\n+use crate::errors::ParquetError;\n+use crate::errors::Result;\n+use crate::schema::types::ColumnDescPtr;\n+use arrow::bitmap::Bitmap;\n+use arrow::buffer::Buffer;\n+use arrow::buffer::MutableBuffer;\n+use arrow::builder::BooleanBufferBuilder;\n+use arrow::builder::BufferBuilderTrait;\n+\n+const MIN_BATCH_SIZE: usize = 1024;\n+\n+/// A ```RecordReader``` is a stateful column reader that delimits semantic records.\n+pub struct RecordReader<T: DataType> {\n+    column_schema: ColumnDescPtr,\n+\n+    records: MutableBuffer,\n+    def_levels: Option<MutableBuffer>,\n+    rep_levels: Option<MutableBuffer>,\n+    nullity_bitmap: Option<BooleanBufferBuilder>,\n+    column_reader: Option<ColumnReaderImpl<T>>,\n+\n+    /// Number of records accumulated in records\n+    records_num: usize,\n+\n+    /// Last offset of ```records_num``` records\n+    values_pos: usize,\n+    values_seen: usize,\n+    /// Starts from 1, number of values have been written to buffer\n+    values_written: usize,\n+    in_middle_of_record: bool,\n+}\n+\n+struct FatPtr<T> {\n+    ptr: *const T,\n+    len: usize,\n+}\n+\n+impl<T> FatPtr<T> {\n+    fn new(ptr: *const T, len: usize) -> Self {\n+        Self { ptr, len }\n+    }\n+\n+    unsafe fn to_slice(&self) -> &[T] {\n+        slice::from_raw_parts(self.ptr, self.len)\n+    }\n+\n+    unsafe fn to_slice_mut(&self) -> &mut [T] {\n+        slice::from_raw_parts_mut(self.ptr as *mut T, self.len)\n+    }\n+}\n+\n+impl<T: DataType> RecordReader<T> {\n+    pub fn new(column_schema: ColumnDescPtr) -> Self {\n+        let (def_levels, nullity_bitmap) = if column_schema.max_def_level() > 0 {\n+            (\n+                Some(MutableBuffer::new(MIN_BATCH_SIZE)),\n+                Some(BooleanBufferBuilder::new(MIN_BATCH_SIZE)),\n+            )\n+        } else {\n+            (None, None)\n+        };\n+\n+        let rep_levels = if column_schema.max_rep_level() > 0 {\n+            Some(MutableBuffer::new(MIN_BATCH_SIZE))\n+        } else {\n+            None\n+        };\n+\n+        Self {\n+            records: MutableBuffer::new(MIN_BATCH_SIZE),\n+            def_levels,\n+            rep_levels,\n+            nullity_bitmap,\n+            column_reader: None,\n+            column_schema,\n+            records_num: 0usize,\n+            values_pos: 0usize,\n+            values_seen: 0usize,\n+            values_written: 0usize,\n+            in_middle_of_record: false,\n+        }\n+    }\n+\n+    /// Set the current page reader.\n+    pub fn set_page_reader(&mut self, page_reader: Box<PageReader>) -> Result<()> {\n+        self.column_reader = Some(ColumnReaderImpl::new(\n+            self.column_schema.clone(),\n+            page_reader,\n+        ));\n+        Ok(())\n+    }\n+\n+    /// Try to read ```num_records``` of column data into internal buffer.\n+    ///\n+    /// # Returns\n+    ///\n+    /// Number of actual records read.\n+    pub fn read_records(&mut self, num_records: usize) -> Result<usize> {\n+        let mut records_read = 0usize;\n+        let mut end_of_column = false;\n+\n+        loop {\n+            let mut iter_record_num = self.split_records(num_records - records_read)?;\n+\n+            if end_of_column\n+                && self.values_seen >= self.values_written\n+                && self.in_middle_of_record\n+            {\n+                self.records_num += 1;\n+                self.values_pos = self.values_seen - 1;\n+                self.in_middle_of_record = false;\n+                iter_record_num += 1;\n+            }\n+\n+            records_read += iter_record_num;\n+\n+            if records_read >= num_records {\n+                break;\n+            }\n+\n+            if end_of_column {\n+                break;\n+            }\n+\n+            let batch_size = max(num_records - records_read, MIN_BATCH_SIZE);\n+\n+            let values_read = self.read_one_batch(batch_size)?;\n+            if values_read < batch_size {\n+                end_of_column = true;\n+            }\n+        }\n+\n+        Ok(records_read)\n+    }\n+\n+    /// Returns number of records stored in buffer.\n+    pub fn records_num(&self) -> usize {\n+        self.records_num\n+    }\n+\n+    /// Returns definition level data.\n+    pub fn consume_def_levels(&mut self) -> Option<Buffer> {\n+        let empty_def_buffer = if self.column_schema.max_def_level() > 0 {\n+            Some(MutableBuffer::new(MIN_BATCH_SIZE))\n+        } else {\n+            None\n+        };\n+\n+        replace(&mut self.def_levels, empty_def_buffer).map(|x| x.freeze())\n+    }\n+\n+    /// Returns currently stored buffer data.\n+    pub fn consume_record_data(&mut self) -> Buffer {\n+        replace(&mut self.records, MutableBuffer::new(MIN_BATCH_SIZE)).freeze()\n+    }\n+\n+    /// Returns bitmap data.\n+    pub fn consume_bitmap(&mut self) -> Option<Bitmap> {\n+        let bitmap_builder = if self.column_schema.max_def_level() > 0 {\n+            Some(BooleanBufferBuilder::new(MIN_BATCH_SIZE))\n+        } else {\n+            None\n+        };\n+\n+        replace(&mut self.nullity_bitmap, bitmap_builder)\n+            .map(|mut builder| builder.finish())\n+            .map(|buffer| Bitmap::from(buffer))\n+    }\n+\n+    /// Try to read one batch of data.\n+    fn read_one_batch(&mut self, batch_size: usize) -> Result<usize> {\n+        // Reserve spaces\n+        self.records\n+            .reserve(self.records.len() + batch_size * T::get_type_size())?;\n+        self.rep_levels.iter_mut().try_for_each(|buf| {\n+            buf.reserve(buf.len() + batch_size * size_of::<i16>())\n+                .map(|_| ())\n+        })?;\n+        self.def_levels.iter_mut().try_for_each(|buf| {\n+            buf.reserve(buf.len() + batch_size * size_of::<i16>())\n+                .map(|_| ())\n+        })?;\n+\n+        // Convert mutable buffer spaces to mutable slices\n+        let data_buf = self.records_buf(self.values_written);\n+        let mut def_levels_buf = self.def_levels_buf(self.values_written);\n+        let mut rep_levels_buf = self.rep_levels_buf(self.values_written);\n+\n+        let (data_read, levels_read) = self.column_reader.as_mut().unwrap().read_batch(\n+            batch_size,\n+            def_levels_buf.as_mut().map(|b| unsafe { b.to_slice_mut() }),\n+            rep_levels_buf.as_mut().map(|b| unsafe { b.to_slice_mut() }),\n+            unsafe { data_buf.to_slice_mut() },\n+        )?;\n+\n+        let max_def_level = self.column_schema.max_def_level();\n+\n+        if data_read < levels_read {\n+            // This means that there are null values in column data\n+            //TODO: Move this into ColumnReader\n+\n+            let data_buf = unsafe { data_buf.to_slice_mut() };\n+\n+            let def_levels_buf = def_levels_buf\n+                .as_mut()\n+                .map(|b| unsafe { b.to_slice_mut() })\n+                .ok_or_else(|| {\n+                    general_err!(\n+                        \"Definition levels should exist when data is less than levels!\"\n+                    )\n+                })?;\n+\n+            // Fill spaces in column data with default values\n+            let mut data_pos = data_read;\n+            let mut level_pos = levels_read;\n+\n+            while level_pos > data_pos {\n+                if def_levels_buf[level_pos - 1] == max_def_level {\n+                    // This values is not empty\n+                    // We use swap rather than assign here because T::T doesn't\n+                    // implement Copy\n+                    data_buf.swap(level_pos - 1, data_pos - 1);\n+                    data_pos -= 1;\n+                } else {\n+                    data_buf[level_pos - 1] = T::T::default();\n+                }\n+\n+                level_pos -= 1;\n+            }\n+        }\n+\n+        // Fill in bitmap data\n+        if let Some(nullity_buffer) = self.nullity_bitmap.as_mut() {\n+            let def_levels_buf = def_levels_buf\n+                .as_mut()\n+                .map(|b| unsafe { b.to_slice_mut() })\n+                .ok_or_else(|| {\n+                    general_err!(\n+                        \"Definition levels should exist when data is less than levels!\"\n+                    )\n+                })?;\n+            (0..levels_read).try_for_each(|idx| {\n+                nullity_buffer.append(def_levels_buf[idx] == max_def_level)\n+            })?;\n+        }\n+\n+        let values_read = max(data_read, levels_read);\n+        self.set_values_written(self.values_written + values_read)?;\n+        Ok(values_read)\n+    }\n+\n+    /// Split values into records according repetition definition and returns number of\n+    /// records read.\n+    fn split_records(&mut self, records_to_read: usize) -> Result<usize> {\n+        let rep_levels_buf = self.rep_levels_buf(0usize);\n+        let rep_levels_buf = rep_levels_buf.as_ref().map(|x| unsafe { x.to_slice() });\n+\n+        match rep_levels_buf {\n+            Some(buf) => {\n+                let mut records_read = 0usize;\n+\n+                while (self.values_seen < self.values_written)\n+                    && (records_read < records_to_read)\n+                {\n+                    if buf[self.values_seen] == 0 {\n+                        if self.in_middle_of_record {\n+                            records_read += 1;\n+                            self.values_pos = self.values_seen - 1;\n+                            self.records_num += 1;\n+                        }\n+                        self.in_middle_of_record = true;\n+                    }\n+                    self.values_seen += 1;\n+                }\n+\n+                Ok(records_read)\n+            }\n+            None => {\n+                let records_read =\n+                    min(records_to_read, self.values_written - self.values_seen);\n+                self.records_num += records_read;\n+                self.values_seen += records_read;\n+                self.values_pos += records_read;\n+                self.in_middle_of_record = false;\n+\n+                Ok(records_read)\n+            }\n+        }\n+    }\n+\n+    #[inline]\n+    fn rep_levels_buf(&self, from: usize) -> Option<FatPtr<i16>> {\n+        unsafe {\n+            self.rep_levels.as_ref().map(|buf| {\n+                FatPtr::new(\n+                    transmute::<*const u8, *mut i16>(buf.raw_data()).add(from),\n+                    buf.capacity() / size_of::<i16>() - from,\n+                )\n+            })\n+        }\n+    }\n+\n+    #[inline]\n+    fn def_levels_buf(&self, from: usize) -> Option<FatPtr<i16>> {\n+        unsafe {\n+            self.def_levels.as_ref().map(|buf| {\n+                FatPtr::new(\n+                    transmute::<*const u8, *mut i16>(buf.raw_data()).add(from),\n+                    buf.capacity() / size_of::<i16>() - from,\n+                )\n+            })\n+        }\n+    }\n+\n+    #[inline]\n+    fn records_buf(&self, from: usize) -> FatPtr<T::T> {\n+        unsafe {\n+            FatPtr::new(\n+                transmute::<*const u8, *mut T::T>(self.records.raw_data()).add(from),\n+                self.records.capacity() / T::get_type_size() - from,\n+            )\n+        }\n+    }\n+\n+    fn set_values_written(&mut self, new_values_written: usize) -> Result<()> {\n+        self.values_written = new_values_written;\n+        self.records\n+            .resize(self.values_written * T::get_type_size())?;\n+\n+        let new_levels_len = self.values_written * size_of::<i16>();\n+        self.rep_levels\n+            .iter_mut()\n+            .try_for_each(|buf| buf.resize(new_levels_len).map(|_| ()))?;\n+        self.def_levels\n \n Review comment:\n   Maybe use:\r\n   ```rust\r\n   if let Some(ref mut buf) = self.rep_levels {\r\n       buf.resize(new_levels_len)?;\r\n   }\r\n   ```\r\n   ? which is easier to understand than `iter_mut` + `try_for_each` + `map`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-14T16:47:42.385+0000",
                    "updated": "2019-05-14T16:47:42.385+0000",
                    "started": "2019-05-14T16:47:42.384+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "241850",
                    "issueId": "13211698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13211698/worklog/241851",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #4292: ARROW-4365: [Rust] [Parquet] Implement record reader.\nURL: https://github.com/apache/arrow/pull/4292#discussion_r283657266\n \n \n\n ##########\n File path: rust/parquet/src/arrow/record_reader.rs\n ##########\n @@ -0,0 +1,669 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::cmp::{max, min};\n+use std::mem::replace;\n+use std::mem::size_of;\n+use std::mem::transmute;\n+use std::slice;\n+\n+use crate::column::page::PageReader;\n+use crate::column::reader::ColumnReaderImpl;\n+use crate::data_type::DataType;\n+use crate::errors::ParquetError;\n+use crate::errors::Result;\n+use crate::schema::types::ColumnDescPtr;\n+use arrow::bitmap::Bitmap;\n+use arrow::buffer::Buffer;\n+use arrow::buffer::MutableBuffer;\n+use arrow::builder::BooleanBufferBuilder;\n+use arrow::builder::BufferBuilderTrait;\n+\n+const MIN_BATCH_SIZE: usize = 1024;\n+\n+/// A ```RecordReader``` is a stateful column reader that delimits semantic records.\n+pub struct RecordReader<T: DataType> {\n+    column_schema: ColumnDescPtr,\n+\n+    records: MutableBuffer,\n+    def_levels: Option<MutableBuffer>,\n+    rep_levels: Option<MutableBuffer>,\n+    nullity_bitmap: Option<BooleanBufferBuilder>,\n+    column_reader: Option<ColumnReaderImpl<T>>,\n+\n+    /// Number of records accumulated in records\n+    records_num: usize,\n+\n+    /// Last offset of ```records_num``` records\n+    values_pos: usize,\n+    values_seen: usize,\n+    /// Starts from 1, number of values have been written to buffer\n+    values_written: usize,\n+    in_middle_of_record: bool,\n+}\n+\n+struct FatPtr<T> {\n+    ptr: *const T,\n+    len: usize,\n+}\n+\n+impl<T> FatPtr<T> {\n+    fn new(ptr: *const T, len: usize) -> Self {\n+        Self { ptr, len }\n+    }\n+\n+    unsafe fn to_slice(&self) -> &[T] {\n+        slice::from_raw_parts(self.ptr, self.len)\n+    }\n+\n+    unsafe fn to_slice_mut(&self) -> &mut [T] {\n+        slice::from_raw_parts_mut(self.ptr as *mut T, self.len)\n+    }\n+}\n+\n+impl<T: DataType> RecordReader<T> {\n+    pub fn new(column_schema: ColumnDescPtr) -> Self {\n+        let (def_levels, nullity_bitmap) = if column_schema.max_def_level() > 0 {\n+            (\n+                Some(MutableBuffer::new(MIN_BATCH_SIZE)),\n+                Some(BooleanBufferBuilder::new(MIN_BATCH_SIZE)),\n+            )\n+        } else {\n+            (None, None)\n+        };\n+\n+        let rep_levels = if column_schema.max_rep_level() > 0 {\n+            Some(MutableBuffer::new(MIN_BATCH_SIZE))\n+        } else {\n+            None\n+        };\n+\n+        Self {\n+            records: MutableBuffer::new(MIN_BATCH_SIZE),\n+            def_levels,\n+            rep_levels,\n+            nullity_bitmap,\n+            column_reader: None,\n+            column_schema,\n+            records_num: 0usize,\n+            values_pos: 0usize,\n+            values_seen: 0usize,\n+            values_written: 0usize,\n+            in_middle_of_record: false,\n+        }\n+    }\n+\n+    /// Set the current page reader.\n+    pub fn set_page_reader(&mut self, page_reader: Box<PageReader>) -> Result<()> {\n+        self.column_reader = Some(ColumnReaderImpl::new(\n+            self.column_schema.clone(),\n+            page_reader,\n+        ));\n+        Ok(())\n+    }\n+\n+    /// Try to read ```num_records``` of column data into internal buffer.\n+    ///\n+    /// # Returns\n+    ///\n+    /// Number of actual records read.\n+    pub fn read_records(&mut self, num_records: usize) -> Result<usize> {\n+        let mut records_read = 0usize;\n+        let mut end_of_column = false;\n+\n+        loop {\n+            let mut iter_record_num = self.split_records(num_records - records_read)?;\n+\n+            if end_of_column\n \n Review comment:\n   Can we add some comments on this? like how it checks logical record boundaries etc. It's hard to understand by just looking at it.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-14T16:47:42.414+0000",
                    "updated": "2019-05-14T16:47:42.414+0000",
                    "started": "2019-05-14T16:47:42.414+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "241851",
                    "issueId": "13211698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13211698/worklog/241852",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #4292: ARROW-4365: [Rust] [Parquet] Implement record reader.\nURL: https://github.com/apache/arrow/pull/4292#discussion_r283882129\n \n \n\n ##########\n File path: rust/parquet/src/arrow/record_reader.rs\n ##########\n @@ -0,0 +1,669 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::cmp::{max, min};\n+use std::mem::replace;\n+use std::mem::size_of;\n+use std::mem::transmute;\n+use std::slice;\n+\n+use crate::column::page::PageReader;\n+use crate::column::reader::ColumnReaderImpl;\n+use crate::data_type::DataType;\n+use crate::errors::ParquetError;\n+use crate::errors::Result;\n+use crate::schema::types::ColumnDescPtr;\n+use arrow::bitmap::Bitmap;\n+use arrow::buffer::Buffer;\n+use arrow::buffer::MutableBuffer;\n+use arrow::builder::BooleanBufferBuilder;\n+use arrow::builder::BufferBuilderTrait;\n+\n+const MIN_BATCH_SIZE: usize = 1024;\n+\n+/// A ```RecordReader``` is a stateful column reader that delimits semantic records.\n+pub struct RecordReader<T: DataType> {\n+    column_schema: ColumnDescPtr,\n+\n+    records: MutableBuffer,\n+    def_levels: Option<MutableBuffer>,\n+    rep_levels: Option<MutableBuffer>,\n+    nullity_bitmap: Option<BooleanBufferBuilder>,\n+    column_reader: Option<ColumnReaderImpl<T>>,\n+\n+    /// Number of records accumulated in records\n+    records_num: usize,\n \n Review comment:\n   rename this to `num_records`?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-14T16:47:42.476+0000",
                    "updated": "2019-05-14T16:47:42.476+0000",
                    "started": "2019-05-14T16:47:42.476+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "241852",
                    "issueId": "13211698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13211698/worklog/241853",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #4292: ARROW-4365: [Rust] [Parquet] Implement record reader.\nURL: https://github.com/apache/arrow/pull/4292#discussion_r283885386\n \n \n\n ##########\n File path: rust/parquet/src/arrow/record_reader.rs\n ##########\n @@ -0,0 +1,669 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::cmp::{max, min};\n+use std::mem::replace;\n+use std::mem::size_of;\n+use std::mem::transmute;\n+use std::slice;\n+\n+use crate::column::page::PageReader;\n+use crate::column::reader::ColumnReaderImpl;\n+use crate::data_type::DataType;\n+use crate::errors::ParquetError;\n+use crate::errors::Result;\n+use crate::schema::types::ColumnDescPtr;\n+use arrow::bitmap::Bitmap;\n+use arrow::buffer::Buffer;\n+use arrow::buffer::MutableBuffer;\n+use arrow::builder::BooleanBufferBuilder;\n+use arrow::builder::BufferBuilderTrait;\n+\n+const MIN_BATCH_SIZE: usize = 1024;\n+\n+/// A ```RecordReader``` is a stateful column reader that delimits semantic records.\n+pub struct RecordReader<T: DataType> {\n+    column_schema: ColumnDescPtr,\n+\n+    records: MutableBuffer,\n+    def_levels: Option<MutableBuffer>,\n+    rep_levels: Option<MutableBuffer>,\n+    nullity_bitmap: Option<BooleanBufferBuilder>,\n \n Review comment:\n   nit: can we call it `null_bitmap`? to be consistent with other places.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-14T16:47:42.508+0000",
                    "updated": "2019-05-14T16:47:42.508+0000",
                    "started": "2019-05-14T16:47:42.507+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "241853",
                    "issueId": "13211698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13211698/worklog/241854",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #4292: ARROW-4365: [Rust] [Parquet] Implement record reader.\nURL: https://github.com/apache/arrow/pull/4292#discussion_r283207111\n \n \n\n ##########\n File path: rust/parquet/src/arrow/record_reader.rs\n ##########\n @@ -0,0 +1,669 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::cmp::{max, min};\n+use std::mem::replace;\n+use std::mem::size_of;\n+use std::mem::transmute;\n+use std::slice;\n+\n+use crate::column::page::PageReader;\n+use crate::column::reader::ColumnReaderImpl;\n+use crate::data_type::DataType;\n+use crate::errors::ParquetError;\n+use crate::errors::Result;\n+use crate::schema::types::ColumnDescPtr;\n+use arrow::bitmap::Bitmap;\n+use arrow::buffer::Buffer;\n+use arrow::buffer::MutableBuffer;\n+use arrow::builder::BooleanBufferBuilder;\n+use arrow::builder::BufferBuilderTrait;\n+\n+const MIN_BATCH_SIZE: usize = 1024;\n+\n+/// A ```RecordReader``` is a stateful column reader that delimits semantic records.\n+pub struct RecordReader<T: DataType> {\n+    column_schema: ColumnDescPtr,\n+\n+    records: MutableBuffer,\n+    def_levels: Option<MutableBuffer>,\n+    rep_levels: Option<MutableBuffer>,\n+    nullity_bitmap: Option<BooleanBufferBuilder>,\n+    column_reader: Option<ColumnReaderImpl<T>>,\n+\n+    /// Number of records accumulated in records\n+    records_num: usize,\n+\n+    /// Last offset of ```records_num``` records\n+    values_pos: usize,\n+    values_seen: usize,\n+    /// Starts from 1, number of values have been written to buffer\n+    values_written: usize,\n+    in_middle_of_record: bool,\n+}\n+\n+struct FatPtr<T> {\n+    ptr: *const T,\n+    len: usize,\n+}\n+\n+impl<T> FatPtr<T> {\n+    fn new(ptr: *const T, len: usize) -> Self {\n+        Self { ptr, len }\n+    }\n+\n+    unsafe fn to_slice(&self) -> &[T] {\n+        slice::from_raw_parts(self.ptr, self.len)\n+    }\n+\n+    unsafe fn to_slice_mut(&self) -> &mut [T] {\n+        slice::from_raw_parts_mut(self.ptr as *mut T, self.len)\n+    }\n+}\n+\n+impl<T: DataType> RecordReader<T> {\n+    pub fn new(column_schema: ColumnDescPtr) -> Self {\n+        let (def_levels, nullity_bitmap) = if column_schema.max_def_level() > 0 {\n+            (\n+                Some(MutableBuffer::new(MIN_BATCH_SIZE)),\n+                Some(BooleanBufferBuilder::new(MIN_BATCH_SIZE)),\n+            )\n+        } else {\n+            (None, None)\n+        };\n+\n+        let rep_levels = if column_schema.max_rep_level() > 0 {\n+            Some(MutableBuffer::new(MIN_BATCH_SIZE))\n+        } else {\n+            None\n+        };\n+\n+        Self {\n+            records: MutableBuffer::new(MIN_BATCH_SIZE),\n+            def_levels,\n+            rep_levels,\n+            nullity_bitmap,\n+            column_reader: None,\n+            column_schema,\n+            records_num: 0usize,\n \n Review comment:\n   no need to add `usize` for these - it is less verbose.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-14T16:47:46.411+0000",
                    "updated": "2019-05-14T16:47:46.411+0000",
                    "started": "2019-05-14T16:47:46.411+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "241854",
                    "issueId": "13211698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13211698/worklog/241855",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on pull request #4292: ARROW-4365: [Rust] [Parquet] Implement record reader.\nURL: https://github.com/apache/arrow/pull/4292#discussion_r283027227\n \n \n\n ##########\n File path: rust/parquet/src/arrow/record_reader.rs\n ##########\n @@ -0,0 +1,669 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::cmp::{max, min};\n+use std::mem::replace;\n+use std::mem::size_of;\n+use std::mem::transmute;\n+use std::slice;\n+\n+use crate::column::page::PageReader;\n+use crate::column::reader::ColumnReaderImpl;\n+use crate::data_type::DataType;\n+use crate::errors::ParquetError;\n+use crate::errors::Result;\n+use crate::schema::types::ColumnDescPtr;\n+use arrow::bitmap::Bitmap;\n+use arrow::buffer::Buffer;\n+use arrow::buffer::MutableBuffer;\n+use arrow::builder::BooleanBufferBuilder;\n+use arrow::builder::BufferBuilderTrait;\n+\n+const MIN_BATCH_SIZE: usize = 1024;\n+\n+/// A ```RecordReader``` is a stateful column reader that delimits semantic records.\n \n Review comment:\n   nit: use single backtick instead of triple? same below.\r\n   \r\n   Also, some high-level comments on what this is for, how to use this struct (e.g., examples) will be useful.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-14T16:47:46.474+0000",
                    "updated": "2019-05-14T16:47:46.474+0000",
                    "started": "2019-05-14T16:47:46.473+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "241855",
                    "issueId": "13211698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13211698/worklog/241862",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sunchao commented on issue #4292: ARROW-4365: [Rust] [Parquet] Implement record reader.\nURL: https://github.com/apache/arrow/pull/4292#issuecomment-492320978\n \n \n   Also we should change the title of this PR: Implement Arrow record reader.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-14T16:55:54.838+0000",
                    "updated": "2019-05-14T16:55:54.838+0000",
                    "started": "2019-05-14T16:55:54.837+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "241862",
                    "issueId": "13211698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13211698/worklog/243982",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on pull request #4292: ARROW-4365: [Rust] [Parquet] Implement arrow record reader.\nURL: https://github.com/apache/arrow/pull/4292#discussion_r285100132\n \n \n\n ##########\n File path: rust/parquet/src/arrow/record_reader.rs\n ##########\n @@ -0,0 +1,669 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::cmp::{max, min};\n+use std::mem::replace;\n+use std::mem::size_of;\n+use std::mem::transmute;\n+use std::slice;\n+\n+use crate::column::page::PageReader;\n+use crate::column::reader::ColumnReaderImpl;\n+use crate::data_type::DataType;\n+use crate::errors::ParquetError;\n \n Review comment:\n   Fixed.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-17T12:16:36.664+0000",
                    "updated": "2019-05-17T12:16:36.664+0000",
                    "started": "2019-05-17T12:16:36.663+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "243982",
                    "issueId": "13211698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13211698/worklog/243984",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on pull request #4292: ARROW-4365: [Rust] [Parquet] Implement arrow record reader.\nURL: https://github.com/apache/arrow/pull/4292#discussion_r285100457\n \n \n\n ##########\n File path: rust/parquet/src/arrow/record_reader.rs\n ##########\n @@ -0,0 +1,669 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::cmp::{max, min};\n+use std::mem::replace;\n+use std::mem::size_of;\n+use std::mem::transmute;\n+use std::slice;\n+\n+use crate::column::page::PageReader;\n+use crate::column::reader::ColumnReaderImpl;\n+use crate::data_type::DataType;\n+use crate::errors::ParquetError;\n+use crate::errors::Result;\n+use crate::schema::types::ColumnDescPtr;\n+use arrow::bitmap::Bitmap;\n+use arrow::buffer::Buffer;\n+use arrow::buffer::MutableBuffer;\n+use arrow::builder::BooleanBufferBuilder;\n+use arrow::builder::BufferBuilderTrait;\n+\n+const MIN_BATCH_SIZE: usize = 1024;\n+\n+/// A ```RecordReader``` is a stateful column reader that delimits semantic records.\n+pub struct RecordReader<T: DataType> {\n+    column_schema: ColumnDescPtr,\n+\n+    records: MutableBuffer,\n+    def_levels: Option<MutableBuffer>,\n+    rep_levels: Option<MutableBuffer>,\n+    nullity_bitmap: Option<BooleanBufferBuilder>,\n+    column_reader: Option<ColumnReaderImpl<T>>,\n+\n+    /// Number of records accumulated in records\n+    records_num: usize,\n+\n+    /// Last offset of ```records_num``` records\n+    values_pos: usize,\n+    values_seen: usize,\n+    /// Starts from 1, number of values have been written to buffer\n+    values_written: usize,\n+    in_middle_of_record: bool,\n+}\n+\n+struct FatPtr<T> {\n+    ptr: *const T,\n+    len: usize,\n+}\n+\n+impl<T> FatPtr<T> {\n+    fn new(ptr: *const T, len: usize) -> Self {\n+        Self { ptr, len }\n+    }\n+\n+    unsafe fn to_slice(&self) -> &[T] {\n+        slice::from_raw_parts(self.ptr, self.len)\n+    }\n+\n+    unsafe fn to_slice_mut(&self) -> &mut [T] {\n+        slice::from_raw_parts_mut(self.ptr as *mut T, self.len)\n+    }\n+}\n+\n+impl<T: DataType> RecordReader<T> {\n+    pub fn new(column_schema: ColumnDescPtr) -> Self {\n+        let (def_levels, nullity_bitmap) = if column_schema.max_def_level() > 0 {\n+            (\n+                Some(MutableBuffer::new(MIN_BATCH_SIZE)),\n+                Some(BooleanBufferBuilder::new(MIN_BATCH_SIZE)),\n+            )\n+        } else {\n+            (None, None)\n+        };\n+\n+        let rep_levels = if column_schema.max_rep_level() > 0 {\n+            Some(MutableBuffer::new(MIN_BATCH_SIZE))\n+        } else {\n+            None\n+        };\n+\n+        Self {\n+            records: MutableBuffer::new(MIN_BATCH_SIZE),\n+            def_levels,\n+            rep_levels,\n+            nullity_bitmap,\n+            column_reader: None,\n+            column_schema,\n+            records_num: 0usize,\n+            values_pos: 0usize,\n+            values_seen: 0usize,\n+            values_written: 0usize,\n+            in_middle_of_record: false,\n+        }\n+    }\n+\n+    /// Set the current page reader.\n+    pub fn set_page_reader(&mut self, page_reader: Box<PageReader>) -> Result<()> {\n \n Review comment:\n   Yes, I return result here because it contains logic to build other components.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-17T12:17:44.157+0000",
                    "updated": "2019-05-17T12:17:44.157+0000",
                    "started": "2019-05-17T12:17:44.156+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "243984",
                    "issueId": "13211698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13211698/worklog/243990",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on pull request #4292: ARROW-4365: [Rust] [Parquet] Implement arrow record reader.\nURL: https://github.com/apache/arrow/pull/4292#discussion_r285101346\n \n \n\n ##########\n File path: rust/parquet/src/arrow/record_reader.rs\n ##########\n @@ -0,0 +1,669 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::cmp::{max, min};\n+use std::mem::replace;\n+use std::mem::size_of;\n+use std::mem::transmute;\n+use std::slice;\n+\n+use crate::column::page::PageReader;\n+use crate::column::reader::ColumnReaderImpl;\n+use crate::data_type::DataType;\n+use crate::errors::ParquetError;\n+use crate::errors::Result;\n+use crate::schema::types::ColumnDescPtr;\n+use arrow::bitmap::Bitmap;\n+use arrow::buffer::Buffer;\n+use arrow::buffer::MutableBuffer;\n+use arrow::builder::BooleanBufferBuilder;\n+use arrow::builder::BufferBuilderTrait;\n+\n+const MIN_BATCH_SIZE: usize = 1024;\n+\n+/// A ```RecordReader``` is a stateful column reader that delimits semantic records.\n \n Review comment:\n   Fixed. I don't have high level comments for this because this will not be a public api, but an internal use.  I think tests is enough to demonstrate how to use it.\r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-17T12:20:36.344+0000",
                    "updated": "2019-05-17T12:20:36.344+0000",
                    "started": "2019-05-17T12:20:36.344+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "243990",
                    "issueId": "13211698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13211698/worklog/243991",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on pull request #4292: ARROW-4365: [Rust] [Parquet] Implement arrow record reader.\nURL: https://github.com/apache/arrow/pull/4292#discussion_r285101409\n \n \n\n ##########\n File path: rust/parquet/src/arrow/record_reader.rs\n ##########\n @@ -0,0 +1,669 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use std::cmp::{max, min};\n+use std::mem::replace;\n+use std::mem::size_of;\n+use std::mem::transmute;\n+use std::slice;\n+\n+use crate::column::page::PageReader;\n+use crate::column::reader::ColumnReaderImpl;\n+use crate::data_type::DataType;\n+use crate::errors::ParquetError;\n+use crate::errors::Result;\n+use crate::schema::types::ColumnDescPtr;\n+use arrow::bitmap::Bitmap;\n+use arrow::buffer::Buffer;\n+use arrow::buffer::MutableBuffer;\n+use arrow::builder::BooleanBufferBuilder;\n+use arrow::builder::BufferBuilderTrait;\n+\n+const MIN_BATCH_SIZE: usize = 1024;\n+\n+/// A ```RecordReader``` is a stateful column reader that delimits semantic records.\n+pub struct RecordReader<T: DataType> {\n+    column_schema: ColumnDescPtr,\n+\n+    records: MutableBuffer,\n+    def_levels: Option<MutableBuffer>,\n+    rep_levels: Option<MutableBuffer>,\n+    nullity_bitmap: Option<BooleanBufferBuilder>,\n+    column_reader: Option<ColumnReaderImpl<T>>,\n+\n+    /// Number of records accumulated in records\n+    records_num: usize,\n+\n+    /// Last offset of ```records_num``` records\n+    values_pos: usize,\n+    values_seen: usize,\n+    /// Starts from 1, number of values have been written to buffer\n+    values_written: usize,\n+    in_middle_of_record: bool,\n+}\n+\n+struct FatPtr<T> {\n+    ptr: *const T,\n+    len: usize,\n+}\n+\n+impl<T> FatPtr<T> {\n+    fn new(ptr: *const T, len: usize) -> Self {\n+        Self { ptr, len }\n+    }\n+\n+    unsafe fn to_slice(&self) -> &[T] {\n+        slice::from_raw_parts(self.ptr, self.len)\n+    }\n+\n+    unsafe fn to_slice_mut(&self) -> &mut [T] {\n+        slice::from_raw_parts_mut(self.ptr as *mut T, self.len)\n+    }\n+}\n+\n+impl<T: DataType> RecordReader<T> {\n+    pub fn new(column_schema: ColumnDescPtr) -> Self {\n+        let (def_levels, nullity_bitmap) = if column_schema.max_def_level() > 0 {\n+            (\n+                Some(MutableBuffer::new(MIN_BATCH_SIZE)),\n+                Some(BooleanBufferBuilder::new(MIN_BATCH_SIZE)),\n+            )\n+        } else {\n+            (None, None)\n+        };\n+\n+        let rep_levels = if column_schema.max_rep_level() > 0 {\n+            Some(MutableBuffer::new(MIN_BATCH_SIZE))\n+        } else {\n+            None\n+        };\n+\n+        Self {\n+            records: MutableBuffer::new(MIN_BATCH_SIZE),\n+            def_levels,\n+            rep_levels,\n+            nullity_bitmap,\n+            column_reader: None,\n+            column_schema,\n+            records_num: 0usize,\n \n Review comment:\n   Fixed.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-17T12:20:43.726+0000",
                    "updated": "2019-05-17T12:20:43.726+0000",
                    "started": "2019-05-17T12:20:43.726+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "243991",
                    "issueId": "13211698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13211698/worklog/243995",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on issue #4292: ARROW-4365: [Rust] [Parquet] Implement arrow record reader.\nURL: https://github.com/apache/arrow/pull/4292#issuecomment-493435749\n \n \n   @sunchao Thanks for the review. Yes you are right, this is heavily inspired by c++ implementation. Currently c++ implementation can handle List<List<List<Primitive>> type, I'll extend this to handle more cases. Also I took a look at triple.rs. Though it's similar to record reader, they serve different purposes. The main goal of record reader is to help arrow array reader to find the boundaries of nested records and buffer them, while triple.rs is much simpler.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-17T12:29:08.754+0000",
                    "updated": "2019-05-17T12:29:08.754+0000",
                    "started": "2019-05-17T12:29:08.753+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "243995",
                    "issueId": "13211698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13211698/worklog/244118",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "sadikovi commented on issue #4292: ARROW-4365: [Rust] [Parquet] Implement arrow record reader.\nURL: https://github.com/apache/arrow/pull/4292#issuecomment-493508826\n \n \n   @liurenjie1024 Ouch. \r\n   \r\n   The list collection is actually done in `reader.rs`. `triplet.rs`'s goal is producing triplets of spaced values, accounting for definition levels. I am not familiar with arrow reader. Can c++ code handle `List<List<List<List<List<...>>>>`? It should not matter how many nested levels it has, the algorithm should just work (which might suggest that c++ code might be missing something). \r\n   \r\n   I looked at the code, could you add more documentation around it, otherwise it is quite difficult to understand what is going on? Also would be good to add more tests around different complex schemas including deeply nested nullable lists and maps. \r\n   \r\n   Thanks!\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-17T16:06:29.550+0000",
                    "updated": "2019-05-17T16:06:29.550+0000",
                    "started": "2019-05-17T16:06:29.549+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "244118",
                    "issueId": "13211698"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13211698/worklog/244607",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "liurenjie1024 commented on issue #4292: ARROW-4365: [Rust] [Parquet] Implement arrow record reader.\nURL: https://github.com/apache/arrow/pull/4292#issuecomment-493719978\n \n \n   @sadikovi \r\n   Currently c++ code can handle any nested level of list, I just didn't express it clearly.\r\n   Just took a look at reader.rs. What record_reader.rs does for arrow_reader(which I'll send a PR later after this) is similar to what triplet.rs does for reader.rs. Seems like this name record_reader is misleading, it should be called something like record_splitter. \r\n   In fact I have tests for nullable lists, but not maps because currently arrow rust implementation doesn't support map. More nested lists may not help because the main logic is of splitting records are the same.\r\n   \r\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-19T01:48:08.010+0000",
                    "updated": "2019-05-19T01:48:08.010+0000",
                    "started": "2019-05-19T01:48:08.009+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "244607",
                    "issueId": "13211698"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 36600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@71fb8450[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@333dd0ac[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@c1080fe[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@51758960[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f3f07fd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6c944be5[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@640b21f9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@19488a91[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@e5f76aa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@405acfe7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7de32afc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@20222bd3[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 36600,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jul 30 08:20:46 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-07-30T08:20:46.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-4365/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2019-01-25T01:09:39.000+0000",
        "updated": "2019-08-01T22:39:46.000+0000",
        "timeoriginalestimate": null,
        "description": "RecordReader reads logical records into memory, this is the\u00a0prerequisite\u00a0for ColumnReader",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "10h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 36600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] [Parquet] Implement RecordReader",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13211698/comment/16895906",
                    "id": "16895906",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=csun",
                        "name": "csun",
                        "key": "csun",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=csun&avatarId=23340",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=csun&avatarId=23340",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=csun&avatarId=23340",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=csun&avatarId=23340"
                        },
                        "displayName": "Chao Sun",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 4292\n[https://github.com/apache/arrow/pull/4292]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=csun",
                        "name": "csun",
                        "key": "csun",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=csun&avatarId=23340",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=csun&avatarId=23340",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=csun&avatarId=23340",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=csun&avatarId=23340"
                        },
                        "displayName": "Chao Sun",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2019-07-30T08:20:46.503+0000",
                    "updated": "2019-07-30T08:20:46.503+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|yi0ajc:",
        "customfield_12314139": null
    }
}