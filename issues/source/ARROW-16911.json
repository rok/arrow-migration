{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13468626",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468626",
    "key": "ARROW-16911",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351550",
                "id": "12351550",
                "name": "9.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-08-03"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
            "name": "vibhatha",
            "key": "vibhatha",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Vibhatha Lakmal Abeykoon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
            "name": "vibhatha",
            "key": "vibhatha",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Vibhatha Lakmal Abeykoon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=vibhatha",
            "name": "vibhatha",
            "key": "vibhatha",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34044",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34044",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34044",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34044"
            },
            "displayName": "Vibhatha Lakmal Abeykoon",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 18600,
            "total": 18600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 18600,
            "total": 18600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16911/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 31,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468626/worklog/789465",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha opened a new pull request, #13567:\nURL: https://github.com/apache/arrow/pull/13567\n\n   Adding `Equals` method to `Partitioning` class and extended classes. Also include a few test cases. \n\n\n",
                    "created": "2022-07-11T11:01:25.213+0000",
                    "updated": "2022-07-11T11:01:25.213+0000",
                    "started": "2022-07-11T11:01:25.213+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789465",
                    "issueId": "13468626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468626/worklog/789467",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13567:\nURL: https://github.com/apache/arrow/pull/13567#issuecomment-1180255978\n\n   https://issues.apache.org/jira/browse/ARROW-16911\n\n\n",
                    "created": "2022-07-11T11:02:01.867+0000",
                    "updated": "2022-07-11T11:02:01.867+0000",
                    "started": "2022-07-11T11:02:01.866+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789467",
                    "issueId": "13468626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468626/worklog/789468",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #13567:\nURL: https://github.com/apache/arrow/pull/13567#issuecomment-1180256021\n\n   :warning: Ticket **has no components in JIRA**, make sure you assign one.\n\n\n",
                    "created": "2022-07-11T11:02:05.123+0000",
                    "updated": "2022-07-11T11:02:05.123+0000",
                    "started": "2022-07-11T11:02:05.123+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789468",
                    "issueId": "13468626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468626/worklog/789524",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #13567:\nURL: https://github.com/apache/arrow/pull/13567#discussion_r917904533\n\n\n##########\ncpp/src/arrow/dataset/partition.h:\n##########\n@@ -310,6 +322,11 @@ class ARROW_DS_EXPORT FunctionPartitioning : public Partitioning {\n \n   std::string type_name() const override { return name_; }\n \n+  bool Equals(const Partitioning& other, bool check_metadata) const override {\n+    return ::arrow::internal::checked_cast<const FunctionPartitioning&>(other)\n+               .type_name() == type_name();\n\nReview Comment:\n   TBH, I'm not sure it makes sense to implement Equals for FunctionPartitioning. Or else at best we should check `this == &other`. Also why is this inline in the header unlike the others?\n\n\n\n##########\ncpp/src/arrow/dataset/partition.cc:\n##########\n@@ -381,6 +404,15 @@ Result<std::vector<KeyValuePartitioning::Key>> DirectoryPartitioning::ParseKeys(\n   return ParsePartitionSegments(segments);\n }\n \n+bool DirectoryPartitioning::Equals(const Partitioning& other, bool check_metadata) const {\n+  if (this == &other) {\n+    return true;\n+  }\n+  const auto& direct_part =\n+      ::arrow::internal::checked_cast<const DirectoryPartitioning&>(other);\n+  return type_name() == direct_part.type_name() && KeyValuePartitioning::Equals(other);\n\nReview Comment:\n   ```suggestion\r\n     return type_name() == direct_part.type_name() && KeyValuePartitioning::Equals(other);\r\n   ```\n\n\n\n##########\ncpp/src/arrow/dataset/partition.cc:\n##########\n@@ -82,6 +82,14 @@ std::shared_ptr<Partitioning> Partitioning::Default() {\n \n     std::string type_name() const override { return \"default\"; }\n \n+    bool Equals(const Partitioning& other, bool check_metadata) const override {\n+      if (this == &other) {\n+        return true;\n+      }\n+      return checked_cast<const DefaultPartitioning&>(other).type_name() == type_name() &&\n\nReview Comment:\n   Don't do the checked cast here, it'll be wrong if the other partitioning isn't the same type. You don't use any methods from the derived type anyways.\n\n\n\n##########\ncpp/src/arrow/dataset/partition.cc:\n##########\n@@ -381,6 +404,15 @@ Result<std::vector<KeyValuePartitioning::Key>> DirectoryPartitioning::ParseKeys(\n   return ParsePartitionSegments(segments);\n }\n \n+bool DirectoryPartitioning::Equals(const Partitioning& other, bool check_metadata) const {\n+  if (this == &other) {\n+    return true;\n+  }\n+  const auto& direct_part =\n+      ::arrow::internal::checked_cast<const DirectoryPartitioning&>(other);\n+  return type_name() == direct_part.type_name() && KeyValuePartitioning::Equals(other);\n\nReview Comment:\n   and ditto below (since KeyValuePartitioning::Equals does the `this == &other` check already\n\n\n\n##########\ncpp/src/arrow/dataset/partition_test.cc:\n##########\n@@ -206,6 +206,15 @@ TEST_F(TestPartitioning, DirectoryPartitioning) {\n                                           equal(field_ref(\"beta\"), literal(\"foo\"))));\n }\n \n\nReview Comment:\n   I'd like to see tests that partitionings of different types don't compare equal.\n\n\n\n##########\ncpp/src/arrow/dataset/partition.cc:\n##########\n@@ -754,6 +794,17 @@ Result<PartitionPathFormat> HivePartitioning::FormatValues(\n   return PartitionPathFormat{fs::internal::JoinAbstractPath(std::move(segments)), \"\"};\n }\n \n+bool HivePartitioning::Equals(const Partitioning& other, bool check_metadata) const {\n+  if (this == &other) {\n+    return true;\n+  }\n+  const auto& hive_part = ::arrow::internal::checked_cast<const HivePartitioning&>(other);\n+  return type_name() == hive_part.type_name() &&\n\nReview Comment:\n   Do the type name check first, then cast and do the rest of the comparisons.\n\n\n\n",
                    "created": "2022-07-11T13:07:39.411+0000",
                    "updated": "2022-07-11T13:07:39.411+0000",
                    "started": "2022-07-11T13:07:39.410+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789524",
                    "issueId": "13468626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468626/worklog/789583",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13567:\nURL: https://github.com/apache/arrow/pull/13567#discussion_r917974623\n\n\n##########\ncpp/src/arrow/dataset/partition.h:\n##########\n@@ -63,13 +64,18 @@ struct ARROW_DS_EXPORT PartitionPathFormat {\n /// Paths are consumed from left to right. Paths must be relative to\n /// the root of a partition; path prefixes must be removed before passing\n /// the path to a partitioning for parsing.\n-class ARROW_DS_EXPORT Partitioning {\n+class ARROW_DS_EXPORT Partitioning : public util::EqualityComparable<Partitioning> {\n  public:\n   virtual ~Partitioning() = default;\n \n   /// \\brief The name identifying the kind of partitioning\n   virtual std::string type_name() const = 0;\n \n+  /// \\brief determines if partiioning is exactly equal\n+  virtual bool Equals(const Partitioning& other, bool check_metadata = false) const {\n\nReview Comment:\n   We shouldn't need a `check_metadata` flag here.  This method here should pass `check_metadata=false` in always.\r\n   \r\n   If, by some chance, a future partitioning decides to depend on the schema metadata (which should be possible) then it should override this method and pass `check_metadata=true`.\n\n\n\n##########\ncpp/src/arrow/dataset/partition.cc:\n##########\n@@ -82,6 +82,14 @@ std::shared_ptr<Partitioning> Partitioning::Default() {\n \n     std::string type_name() const override { return \"default\"; }\n \n+    bool Equals(const Partitioning& other, bool check_metadata) const override {\n+      if (this == &other) {\n+        return true;\n+      }\n+      return checked_cast<const DefaultPartitioning&>(other).type_name() == type_name() &&\n\nReview Comment:\n   I agree.  If you received a pointer type `Partitioning*` you could do a `dynamic_cast` instead of the `type_name` comparison.  However, a failed `dynamic_cast` is an exception when you have a reference type and it's probably better to just compare `type_name`.\r\n   \r\n   The comparison to `type_name` is basically doing the same thing as a cast check anyways.\r\n   \r\n   The reason a `checked_cast` is a bad idea is that it should be ok for a user to do:\r\n   \r\n   ```\r\n   DefaultPartitioning one;\r\n   KeyValuePartitioning two(schema);\r\n   if (one.Equals(two)) {\r\n     std::cout << \"equal\" << std::endl;\r\n   }\r\n   ```\r\n   \r\n   This `Equals` method should always return false so this toy example is somewhat meaningless.  However, it could be useful if the actual partitions were based on file metadata or something dynamically calculated.  If there is a `checked_cast` then, instead of false, we will get an abort in debug mode and potentially a segmentation fault in release mode.\n\n\n\n##########\ncpp/src/arrow/dataset/partition.h:\n##########\n@@ -310,6 +322,11 @@ class ARROW_DS_EXPORT FunctionPartitioning : public Partitioning {\n \n   std::string type_name() const override { return name_; }\n \n+  bool Equals(const Partitioning& other, bool check_metadata) const override {\n+    return ::arrow::internal::checked_cast<const FunctionPartitioning&>(other)\n+               .type_name() == type_name();\n\nReview Comment:\n   I was going to suggest we at least compare `parse_impl_` and `format_impl_` but it appears [that is somewhat meaningless](https://en.cppreference.com/w/cpp/utility/functional/function/operator_cmp).\r\n   \r\n   I think we should always return false here and, if a user wants to allow comparisons, they can override this.\n\n\n\n",
                    "created": "2022-07-11T14:30:27.022+0000",
                    "updated": "2022-07-11T14:30:27.022+0000",
                    "started": "2022-07-11T14:30:27.022+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789583",
                    "issueId": "13468626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468626/worklog/789584",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13567:\nURL: https://github.com/apache/arrow/pull/13567#discussion_r918002885\n\n\n##########\ncpp/src/arrow/dataset/partition.cc:\n##########\n@@ -82,6 +82,14 @@ std::shared_ptr<Partitioning> Partitioning::Default() {\n \n     std::string type_name() const override { return \"default\"; }\n \n+    bool Equals(const Partitioning& other, bool check_metadata) const override {\n+      if (this == &other) {\n+        return true;\n+      }\n+      return checked_cast<const DefaultPartitioning&>(other).type_name() == type_name() &&\n\nReview Comment:\n   I agree with @lidavidm that a checked_cast should be avoided.  If you received a pointer type `Partitioning*` you could do a `dynamic_cast` instead of the `type_name` comparison.  However, a failed `dynamic_cast` is an exception when you have a reference type and it's probably better to just compare `type_name`.\r\n   \r\n   The comparison to `type_name` is basically doing the same thing as a cast check anyways.\r\n   \r\n   The reason a `checked_cast` is a bad idea is that it should be ok for a user to do:\r\n   \r\n   ```\r\n   DefaultPartitioning one;\r\n   KeyValuePartitioning two(schema);\r\n   if (one.Equals(two)) {\r\n     std::cout << \"equal\" << std::endl;\r\n   }\r\n   ```\r\n   \r\n   This `Equals` method should always return false so this toy example is somewhat meaningless.  However, it could be useful if the actual partitions were based on file metadata or something dynamically calculated.  If there is a `checked_cast` then, instead of false, we will get an abort in debug mode and potentially a segmentation fault in release mode.\n\n\n\n",
                    "created": "2022-07-11T14:31:17.062+0000",
                    "updated": "2022-07-11T14:31:17.062+0000",
                    "started": "2022-07-11T14:31:17.062+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789584",
                    "issueId": "13468626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468626/worklog/789597",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13567:\nURL: https://github.com/apache/arrow/pull/13567#discussion_r918041699\n\n\n##########\ncpp/src/arrow/dataset/partition.cc:\n##########\n@@ -82,6 +82,14 @@ std::shared_ptr<Partitioning> Partitioning::Default() {\n \n     std::string type_name() const override { return \"default\"; }\n \n+    bool Equals(const Partitioning& other, bool check_metadata) const override {\n+      if (this == &other) {\n+        return true;\n+      }\n+      return checked_cast<const DefaultPartitioning&>(other).type_name() == type_name() &&\n\nReview Comment:\n   Yes your absolutely right, sorry I missed this. Thanks for pointing this out. \n\n\n\n",
                    "created": "2022-07-11T15:01:56.645+0000",
                    "updated": "2022-07-11T15:01:56.645+0000",
                    "started": "2022-07-11T15:01:56.644+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789597",
                    "issueId": "13468626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468626/worklog/789639",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13567:\nURL: https://github.com/apache/arrow/pull/13567#discussion_r918111292\n\n\n##########\ncpp/src/arrow/dataset/partition.cc:\n##########\n@@ -115,6 +117,21 @@ static Result<RecordBatchVector> ApplyGroupings(\n   return out;\n }\n \n+bool KeyValuePartitioning::Equals(const Partitioning& other) const {\n+  if (this == &other) {\n+    return true;\n+  }\n+  const auto& kv_partion = checked_cast<const KeyValuePartitioning&>(other);\n+  int64_t idx = 0;\n+  for (const auto& array : dictionaries_) {\n+    if (!array->Equals(kv_partion.dictionaries()[idx++])) {\n\nReview Comment:\n   Hmm, what if `kv_partion.dictionaries()` does not have the same size as `this->dictionaries_`. Is it possible?\n\n\n\n##########\ncpp/src/arrow/dataset/partition.h:\n##########\n@@ -63,13 +64,18 @@ struct ARROW_DS_EXPORT PartitionPathFormat {\n /// Paths are consumed from left to right. Paths must be relative to\n /// the root of a partition; path prefixes must be removed before passing\n /// the path to a partitioning for parsing.\n-class ARROW_DS_EXPORT Partitioning {\n+class ARROW_DS_EXPORT Partitioning : public util::EqualityComparable<Partitioning> {\n  public:\n   virtual ~Partitioning() = default;\n \n   /// \\brief The name identifying the kind of partitioning\n   virtual std::string type_name() const = 0;\n \n+  /// \\brief determines if partiioning is exactly equal\n\nReview Comment:\n   ```suggestion\r\n     /// \\brief Return whether the partitionings are equal\r\n   ```\n\n\n\n##########\ncpp/src/arrow/dataset/partition_test.cc:\n##########\n@@ -206,6 +206,15 @@ TEST_F(TestPartitioning, DirectoryPartitioning) {\n                                           equal(field_ref(\"beta\"), literal(\"foo\"))));\n }\n \n+TEST_F(TestPartitioning, DirectoryPartitioningEquals) {\n+  auto part = std::make_shared<DirectoryPartitioning>(\n+      schema({field(\"alpha\", int32()), field(\"beta\", utf8())}));\n+  auto other = std::make_shared<DirectoryPartitioning>(\n+      schema({field(\"alpha\", int32()), field(\"beta\", utf8())}));\n+  EXPECT_TRUE(part->Equals(*part));\n+  EXPECT_FALSE(part->Equals(*other));\n\nReview Comment:\n   (same remark for the below tests)\n\n\n\n##########\ncpp/src/arrow/dataset/partition_test.cc:\n##########\n@@ -206,6 +206,15 @@ TEST_F(TestPartitioning, DirectoryPartitioning) {\n                                           equal(field_ref(\"beta\"), literal(\"foo\"))));\n }\n \n+TEST_F(TestPartitioning, DirectoryPartitioningEquals) {\n+  auto part = std::make_shared<DirectoryPartitioning>(\n+      schema({field(\"alpha\", int32()), field(\"beta\", utf8())}));\n+  auto other = std::make_shared<DirectoryPartitioning>(\n+      schema({field(\"alpha\", int32()), field(\"beta\", utf8())}));\n+  EXPECT_TRUE(part->Equals(*part));\n+  EXPECT_FALSE(part->Equals(*other));\n\nReview Comment:\n   Given that `Equals` generally starts by comparing pointer equality, these tests are not sufficient. You should also test a third `DirectoryPartitioning` that has exactly the same attributes as `part`.\n\n\n\n##########\ncpp/src/arrow/dataset/partition.cc:\n##########\n@@ -82,6 +82,8 @@ std::shared_ptr<Partitioning> Partitioning::Default() {\n \n     std::string type_name() const override { return \"default\"; }\n \n+    bool Equals(const Partitioning& other) const override { return false; }\n\nReview Comment:\n   Are you planning to actually implement this?\n\n\n\n",
                    "created": "2022-07-11T16:10:45.992+0000",
                    "updated": "2022-07-11T16:10:45.992+0000",
                    "started": "2022-07-11T16:10:45.991+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789639",
                    "issueId": "13468626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468626/worklog/789643",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #13567:\nURL: https://github.com/apache/arrow/pull/13567#discussion_r918125799\n\n\n##########\ncpp/src/arrow/dataset/partition.cc:\n##########\n@@ -115,6 +117,21 @@ static Result<RecordBatchVector> ApplyGroupings(\n   return out;\n }\n \n+bool KeyValuePartitioning::Equals(const Partitioning& other) const {\n+  if (this == &other) {\n+    return true;\n+  }\n+  const auto& kv_partion = checked_cast<const KeyValuePartitioning&>(other);\n+  int64_t idx = 0;\n+  for (const auto& array : dictionaries_) {\n+    if (!array->Equals(kv_partion.dictionaries()[idx++])) {\n\nReview Comment:\n   Also a typo here: `kv_partitioning`?\n\n\n\n",
                    "created": "2022-07-11T16:20:57.018+0000",
                    "updated": "2022-07-11T16:20:57.018+0000",
                    "started": "2022-07-11T16:20:57.017+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789643",
                    "issueId": "13468626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468626/worklog/789659",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13567:\nURL: https://github.com/apache/arrow/pull/13567#discussion_r918147690\n\n\n##########\ncpp/src/arrow/dataset/partition.cc:\n##########\n@@ -115,6 +117,21 @@ static Result<RecordBatchVector> ApplyGroupings(\n   return out;\n }\n \n+bool KeyValuePartitioning::Equals(const Partitioning& other) const {\n+  if (this == &other) {\n+    return true;\n+  }\n+  const auto& kv_partion = checked_cast<const KeyValuePartitioning&>(other);\n+  int64_t idx = 0;\n+  for (const auto& array : dictionaries_) {\n+    if (!array->Equals(kv_partion.dictionaries()[idx++])) {\n\nReview Comment:\n   @pitrou thanks for noting this one. I am not very much familiary with this piece of the code please advice.\r\n   \r\n   But I guess in general, whatever the system thinks, I should first check the size and if size differs this should return false right? I totally missed this part. Partially being there cannot be taken as a fulfilment of equality right?\n\n\n\n",
                    "created": "2022-07-11T16:46:00.435+0000",
                    "updated": "2022-07-11T16:46:00.435+0000",
                    "started": "2022-07-11T16:46:00.434+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789659",
                    "issueId": "13468626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468626/worklog/789660",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13567:\nURL: https://github.com/apache/arrow/pull/13567#discussion_r918148748\n\n\n##########\ncpp/src/arrow/dataset/partition.cc:\n##########\n@@ -82,6 +82,8 @@ std::shared_ptr<Partitioning> Partitioning::Default() {\n \n     std::string type_name() const override { return \"default\"; }\n \n+    bool Equals(const Partitioning& other) const override { return false; }\n\nReview Comment:\n   I am not sure if I misunderstood the review comment when changing the earlier code into this. I thought this must be always `false`. cc @westonpace \n\n\n\n",
                    "created": "2022-07-11T16:47:19.719+0000",
                    "updated": "2022-07-11T16:47:19.719+0000",
                    "started": "2022-07-11T16:47:19.718+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789660",
                    "issueId": "13468626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468626/worklog/789666",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #13567:\nURL: https://github.com/apache/arrow/pull/13567#discussion_r918162355\n\n\n##########\ncpp/src/arrow/dataset/partition.cc:\n##########\n@@ -82,6 +82,8 @@ std::shared_ptr<Partitioning> Partitioning::Default() {\n \n     std::string type_name() const override { return \"default\"; }\n \n+    bool Equals(const Partitioning& other) const override { return false; }\n\nReview Comment:\n   I was thinking to always return false for `FunctionPartitioning`.  The default partitioning can simply return `type_name() == other.type_name()`\n\n\n\n",
                    "created": "2022-07-11T17:00:51.367+0000",
                    "updated": "2022-07-11T17:00:51.367+0000",
                    "started": "2022-07-11T17:00:51.366+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789666",
                    "issueId": "13468626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468626/worklog/789671",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13567:\nURL: https://github.com/apache/arrow/pull/13567#discussion_r918172392\n\n\n##########\ncpp/src/arrow/dataset/partition.cc:\n##########\n@@ -115,6 +117,21 @@ static Result<RecordBatchVector> ApplyGroupings(\n   return out;\n }\n \n+bool KeyValuePartitioning::Equals(const Partitioning& other) const {\n+  if (this == &other) {\n+    return true;\n+  }\n+  const auto& kv_partion = checked_cast<const KeyValuePartitioning&>(other);\n+  int64_t idx = 0;\n+  for (const auto& array : dictionaries_) {\n+    if (!array->Equals(kv_partion.dictionaries()[idx++])) {\n\nReview Comment:\n   Yes, you should check the size.\n\n\n\n",
                    "created": "2022-07-11T17:13:12.525+0000",
                    "updated": "2022-07-11T17:13:12.525+0000",
                    "started": "2022-07-11T17:13:12.524+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789671",
                    "issueId": "13468626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468626/worklog/789823",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13567:\nURL: https://github.com/apache/arrow/pull/13567#discussion_r918503221\n\n\n##########\ncpp/src/arrow/dataset/partition.cc:\n##########\n@@ -82,6 +82,8 @@ std::shared_ptr<Partitioning> Partitioning::Default() {\n \n     std::string type_name() const override { return \"default\"; }\n \n+    bool Equals(const Partitioning& other) const override { return false; }\n\nReview Comment:\n   Oh!. Fixing it. \n\n\n\n",
                    "created": "2022-07-12T02:56:40.620+0000",
                    "updated": "2022-07-12T02:56:40.620+0000",
                    "started": "2022-07-12T02:56:40.620+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789823",
                    "issueId": "13468626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468626/worklog/789908",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on code in PR #13567:\nURL: https://github.com/apache/arrow/pull/13567#discussion_r918650561\n\n\n##########\ncpp/src/arrow/dataset/partition_test.cc:\n##########\n@@ -426,6 +453,37 @@ TEST_F(TestPartitioning, HivePartitioning) {\n   AssertParseError(\"/alpha=0.0/beta=3.25/\");  // conversion of \"0.0\" to int32 fails\n }\n \n+TEST_F(TestPartitioning, HivePartitioningEquals) {\n+  const auto& array_vector = ArrayVector();\n+  const auto& other_vector = {ArrayFromJSON(utf8(), R\"([\"foo\", \"bar\", \"baz\"])\"),\n+                              ArrayFromJSON(utf8(), R\"([\"bar\", \"foo\", \"baz\"])\")};\n+  auto part = std::make_shared<HivePartitioning>(\n+      schema({field(\"alpha\", int32()), field(\"beta\", float32())}), array_vector, \"xyz\");\n+  auto other_part = std::make_shared<HivePartitioning>(\n+      schema({field(\"sigma\", int32()), field(\"beta\", float32())}), array_vector, \"xyz\");\n+  auto another_part = std::make_shared<HivePartitioning>(\n+      schema({field(\"alpha\", int32()), field(\"beta\", float32())}), other_vector, \"xyz\");\n+  auto some_part = std::make_shared<HivePartitioning>(\n+      schema({field(\"alpha\", int32()), field(\"beta\", float32())}), array_vector, \"abc\");\n\nReview Comment:\n   Same here.\n\n\n\n##########\ncpp/src/arrow/dataset/partition.h:\n##########\n@@ -63,13 +64,18 @@ struct ARROW_DS_EXPORT PartitionPathFormat {\n /// Paths are consumed from left to right. Paths must be relative to\n /// the root of a partition; path prefixes must be removed before passing\n /// the path to a partitioning for parsing.\n-class ARROW_DS_EXPORT Partitioning {\n+class ARROW_DS_EXPORT Partitioning : public util::EqualityComparable<Partitioning> {\n  public:\n   virtual ~Partitioning() = default;\n \n   /// \\brief The name identifying the kind of partitioning\n   virtual std::string type_name() const = 0;\n \n+  //// \\brief Return whether the partitionings are equal\n+  virtual bool Equals(const Partitioning& other) const {\n+    return schema_->Equals(other.schema_, false);\n\nReview Comment:\n   Nit for code clarity\r\n   ```suggestion\r\n       return schema_->Equals(other.schema_, /*check_metadata=*/ false);\r\n   ```\n\n\n\n##########\ncpp/src/arrow/dataset/partition_test.cc:\n##########\n@@ -959,6 +1025,16 @@ TEST_F(TestPartitioning, Range) {\n                          less_equal(field_ref(\"z\"), literal(3.0)))}));\n }\n \n+TEST_F(TestPartitioning, RangePartitoningEquals) {\n\nReview Comment:\n   Not sure this check is actually useful? `RangePartitioning` is just a test class...\n\n\n\n##########\ncpp/src/arrow/dataset/partition_test.cc:\n##########\n@@ -222,6 +237,18 @@ TEST_F(TestPartitioning, FilenamePartitioning) {\n                                          equal(field_ref(\"beta\"), literal(\"foo\"))));\n }\n \n+TEST_F(TestPartitioning, FilenamePartitioningEquals) {\n+  auto part = std::make_shared<FilenamePartitioning>(\n+      schema({field(\"alpha\", int32()), field(\"beta\", utf8())}));\n+  auto other_part = std::make_shared<FilenamePartitioning>(\n+      schema({field(\"sigma\", int32()), field(\"beta\", utf8())}));\n+  auto another_part = std::make_shared<FilenamePartitioning>(\n+      schema({field(\"sigma\", int64()), field(\"beta\", utf8())}));\n+  EXPECT_TRUE(part->Equals(*part));\n+  EXPECT_FALSE(part->Equals(*other_part));\n+  EXPECT_FALSE(other_part->Equals(*another_part));\n\nReview Comment:\n   Like above, introduce a distinct object that's equal to one of the others?\n\n\n\n",
                    "created": "2022-07-12T07:44:24.109+0000",
                    "updated": "2022-07-12T07:44:24.109+0000",
                    "started": "2022-07-12T07:44:24.108+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789908",
                    "issueId": "13468626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468626/worklog/789925",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on code in PR #13567:\nURL: https://github.com/apache/arrow/pull/13567#discussion_r918666275\n\n\n##########\ncpp/src/arrow/dataset/partition_test.cc:\n##########\n@@ -959,6 +1025,16 @@ TEST_F(TestPartitioning, Range) {\n                          less_equal(field_ref(\"z\"), literal(3.0)))}));\n }\n \n+TEST_F(TestPartitioning, RangePartitoningEquals) {\n\nReview Comment:\n   yeah that's true. I just added it. I will remove this one. \n\n\n\n",
                    "created": "2022-07-12T07:59:35.147+0000",
                    "updated": "2022-07-12T07:59:35.147+0000",
                    "started": "2022-07-12T07:59:35.146+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "789925",
                    "issueId": "13468626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468626/worklog/790007",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on code in PR #13567:\nURL: https://github.com/apache/arrow/pull/13567#discussion_r918888503\n\n\n##########\ncpp/src/arrow/dataset/partition.cc:\n##########\n@@ -115,6 +119,28 @@ static Result<RecordBatchVector> ApplyGroupings(\n   return out;\n }\n \n+bool KeyValuePartitioning::Equals(const Partitioning& other) const {\n+  if (this == &other) {\n+    return true;\n+  }\n+  const auto& kv_partitioning = checked_cast<const KeyValuePartitioning&>(other);\n+  const auto& other_dictionaries = kv_partitioning.dictionaries();\n+  if (dictionaries_.size() != other_dictionaries.size()) {\n+    return false;\n+  }\n+  int64_t idx = 0;\n+  for (const auto& array : dictionaries_) {\n+    const auto& other_array = other_dictionaries[idx++];\n+    bool match = (array == NULLPTR && other_array == NULLPTR) ||\n\nReview Comment:\n   just a reminder: NULLPTR is only required in headers, regular code can use `nullptr` like usual.\n\n\n\n",
                    "created": "2022-07-12T12:06:53.127+0000",
                    "updated": "2022-07-12T12:06:53.127+0000",
                    "started": "2022-07-12T12:06:53.127+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790007",
                    "issueId": "13468626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468626/worklog/790008",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on PR #13567:\nURL: https://github.com/apache/arrow/pull/13567#issuecomment-1181679011\n\n   LGTM after Antoine's comments are addressed.\n\n\n",
                    "created": "2022-07-12T12:06:54.329+0000",
                    "updated": "2022-07-12T12:06:54.329+0000",
                    "started": "2022-07-12T12:06:54.328+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "790008",
                    "issueId": "13468626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468626/worklog/791241",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "vibhatha commented on PR #13567:\nURL: https://github.com/apache/arrow/pull/13567#issuecomment-1185133720\n\n   cc @lidavidm @pitrou addressed the reviews\n\n\n",
                    "created": "2022-07-15T03:20:19.864+0000",
                    "updated": "2022-07-15T03:20:19.864+0000",
                    "started": "2022-07-15T03:20:19.864+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "791241",
                    "issueId": "13468626"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468626/worklog/792064",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on PR #13567:\nURL: https://github.com/apache/arrow/pull/13567#issuecomment-1187220817\n\n   @vibhatha This CI failure looks unrelated, can you take a look? https://github.com/apache/arrow/runs/7351561711?check_suite_focus=true#step:6:2042\n\n\n",
                    "created": "2022-07-18T12:02:02.616+0000",
                    "updated": "2022-07-18T12:02:02.616+0000",
                    "started": "2022-07-18T12:02:02.616+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "792064",
                    "issueId": "13468626"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 18600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@790b367f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@b0cb18c[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6a5deb51[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@433a747[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29c87c51[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4fcedd94[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4acca05f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@535c2fde[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@391cfb10[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@87a3da[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2fe625cd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1d76dd30[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 18600,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jul 19 12:01:46 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-07-19T12:01:46.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-16911/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-06-27T14:45:31.000+0000",
        "updated": "2022-07-20T06:45:37.000+0000",
        "timeoriginalestimate": null,
        "description": "In writing an `Equals` method for `FileSystemDataset`, it is required to add an `Equals` method to `Partitioning`.\u00a0",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "5h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 18600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add Equals method to Partitioning",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13468626/comment/17568505",
                    "id": "17568505",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 13567\n[https://github.com/apache/arrow/pull/13567]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2022-07-19T12:01:46.160+0000",
                    "updated": "2022-07-19T12:01:46.160+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z16e80:",
        "customfield_12314139": null
    }
}