{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13290150",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290150",
    "key": "ARROW-8023",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12347769",
                "id": "12347769",
                "description": "",
                "name": "1.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-07-24"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12582506",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12582506",
                "type": {
                    "id": "10020",
                    "name": "Cloners",
                    "inward": "is cloned by",
                    "outward": "is a clone of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10020"
                },
                "outwardIssue": {
                    "id": "13285044",
                    "key": "ARROW-7847",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13285044",
                    "fields": {
                        "summary": "[Website] Write a blog post about fuzzing",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
                            "id": "3",
                            "description": "A task that needs to be done.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
                            "name": "Task",
                            "subtask": false,
                            "avatarId": 21148
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332543",
                "id": "12332543",
                "name": "Website"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 17400,
            "total": 17400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 17400,
            "total": 17400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8023/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 36,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290150/worklog/414768",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #50: ARROW-8023: [Website] Add blog post about the C data interface\nURL: https://github.com/apache/arrow-site/pull/50\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T15:28:57.805+0000",
                    "updated": "2020-04-02T15:28:57.805+0000",
                    "started": "2020-04-02T15:28:57.805+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414768",
                    "issueId": "13290150"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290150/worklog/414771",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #50: ARROW-8023: [Website] Add blog post about the C data interface\nURL: https://github.com/apache/arrow-site/pull/50#issuecomment-607916905\n \n \n   Draft PR until the C data interace docs are online (presumably once 0.17.0 is released).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T15:29:37.371+0000",
                    "updated": "2020-04-02T15:29:37.371+0000",
                    "started": "2020-04-02T15:29:37.371+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414771",
                    "issueId": "13290150"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290150/worklog/414953",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #50: ARROW-8023: [Website] Add blog post about the C data interface\nURL: https://github.com/apache/arrow-site/pull/50#discussion_r402506206\n \n \n\n ##########\n File path: _posts/2020-04-xx-introducing-arrow-c-data-interface.md\n ##########\n @@ -0,0 +1,90 @@\n+---\n+layout: post\n+title: \"Introducing the Apache Arrow C data interface\"\n+description: \"This post introduces the Arrow C data interface, a simple C-based\n+interoperability standard to simplify interactions between independent users\n+and implementors of the Arrow in-memory format.\"\n+date: \"2020-04-02 00:00:00 +0100\"\n+author: apitrou\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Apache Arrow is a cross-language, platform-independent in-memory format\n+allowing zero-copy data sharing and transfer between heterogenous runtimes\n+and applications.\n+\n+The easiest way to benefit from the Arrow format has always been to depend\n+on one of the concrete implementations developed by the Apache Arrow community.\n+There are 11 such implementations, each for a different language and ecosystem\n+(Java, C++, Python, Rust, R, Javascript, C#, Go...).\n+\n+However, packaging and ABI issues in C++ can deter from depending on the\n+Arrow C++ library.  We have therefore worked on an alternative, which\n+involves exchanging data at the C level by conforming to a simple data\n+definition.  The C ABI is a platform-wide standard that is unlikely to\n+change (and practically never changes), because it ensures portability of\n+libraries and executable binaries.\n \n Review comment:\n   ```suggestion\r\n   definition.  The C ABI is an Arrow-wide standard that is designed\r\n   to ensure portability of libraries and executable binaries which use it,\r\n   and so is highly unlikely to change.\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T18:28:05.590+0000",
                    "updated": "2020-04-02T18:28:05.590+0000",
                    "started": "2020-04-02T18:28:05.590+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414953",
                    "issueId": "13290150"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290150/worklog/414954",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #50: ARROW-8023: [Website] Add blog post about the C data interface\nURL: https://github.com/apache/arrow-site/pull/50#discussion_r402506987\n \n \n\n ##########\n File path: _posts/2020-04-xx-introducing-arrow-c-data-interface.md\n ##########\n @@ -0,0 +1,90 @@\n+---\n+layout: post\n+title: \"Introducing the Apache Arrow C data interface\"\n+description: \"This post introduces the Arrow C data interface, a simple C-based\n+interoperability standard to simplify interactions between independent users\n+and implementors of the Arrow in-memory format.\"\n+date: \"2020-04-02 00:00:00 +0100\"\n+author: apitrou\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Apache Arrow is a cross-language, platform-independent in-memory format\n+allowing zero-copy data sharing and transfer between heterogenous runtimes\n+and applications.\n+\n+The easiest way to benefit from the Arrow format has always been to depend\n+on one of the concrete implementations developed by the Apache Arrow community.\n+There are 11 such implementations, each for a different language and ecosystem\n+(Java, C++, Python, Rust, R, Javascript, C#, Go...).\n+\n+However, packaging and ABI issues in C++ can deter from depending on the\n+Arrow C++ library.  We have therefore worked on an alternative, which\n+involves exchanging data at the C level by conforming to a simple data\n+definition.  The C ABI is a platform-wide standard that is unlikely to\n+change (and practically never changes), because it ensures portability of\n+libraries and executable binaries.\n+\n+The best way to learn about the C Data Interface is to read the\n+[spec](https://arrow.apache.org/docs/format/CDataInterface.html).\n+However, we will quickly go over its strong points.\n+\n+## Two simple struct definitions\n+\n+To interact with the C Data Interface from you C or C++ level, the only\n+thing you have to include in your code is two struct type declarations\n+(and a couple of ``#define`` for constant values).  Those declarations\n+only depend on standard C types.  You can simply paste them in a header\n+file.\n \n Review comment:\n   ```suggestion\r\n   To interact with the C Data Interface from you C or C++ level, the only\r\n   thing you have to include in your code is two struct type declarations\r\n   (and a couple of ``#define``s for constant values).  Those declarations\r\n   only depend on standard C types, and can simply be pasted in a header\r\n   file.\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T18:28:05.788+0000",
                    "updated": "2020-04-02T18:28:05.788+0000",
                    "started": "2020-04-02T18:28:05.787+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414954",
                    "issueId": "13290150"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290150/worklog/414955",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #50: ARROW-8023: [Website] Add blog post about the C data interface\nURL: https://github.com/apache/arrow-site/pull/50#discussion_r402507444\n \n \n\n ##########\n File path: _posts/2020-04-xx-introducing-arrow-c-data-interface.md\n ##########\n @@ -0,0 +1,90 @@\n+---\n+layout: post\n+title: \"Introducing the Apache Arrow C data interface\"\n+description: \"This post introduces the Arrow C data interface, a simple C-based\n+interoperability standard to simplify interactions between independent users\n+and implementors of the Arrow in-memory format.\"\n+date: \"2020-04-02 00:00:00 +0100\"\n+author: apitrou\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Apache Arrow is a cross-language, platform-independent in-memory format\n+allowing zero-copy data sharing and transfer between heterogenous runtimes\n+and applications.\n+\n+The easiest way to benefit from the Arrow format has always been to depend\n+on one of the concrete implementations developed by the Apache Arrow community.\n+There are 11 such implementations, each for a different language and ecosystem\n+(Java, C++, Python, Rust, R, Javascript, C#, Go...).\n+\n+However, packaging and ABI issues in C++ can deter from depending on the\n+Arrow C++ library.  We have therefore worked on an alternative, which\n+involves exchanging data at the C level by conforming to a simple data\n+definition.  The C ABI is a platform-wide standard that is unlikely to\n+change (and practically never changes), because it ensures portability of\n+libraries and executable binaries.\n+\n+The best way to learn about the C Data Interface is to read the\n+[spec](https://arrow.apache.org/docs/format/CDataInterface.html).\n+However, we will quickly go over its strong points.\n+\n+## Two simple struct definitions\n+\n+To interact with the C Data Interface from you C or C++ level, the only\n+thing you have to include in your code is two struct type declarations\n+(and a couple of ``#define`` for constant values).  Those declarations\n+only depend on standard C types.  You can simply paste them in a header\n+file.\n+\n+## Zero-copy data sharing\n+\n+The C Data Interface passes Arrow buffers through memory pointers.  So,\n+by construction, it allows you to share or pass data from one runtime to\n \n Review comment:\n   ```suggestion\r\n   by construction, it allows you to share data from one runtime to\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T18:28:05.837+0000",
                    "updated": "2020-04-02T18:28:05.837+0000",
                    "started": "2020-04-02T18:28:05.837+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414955",
                    "issueId": "13290150"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290150/worklog/414956",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #50: ARROW-8023: [Website] Add blog post about the C data interface\nURL: https://github.com/apache/arrow-site/pull/50#discussion_r402520650\n \n \n\n ##########\n File path: _posts/2020-04-xx-introducing-arrow-c-data-interface.md\n ##########\n @@ -0,0 +1,90 @@\n+---\n+layout: post\n+title: \"Introducing the Apache Arrow C data interface\"\n+description: \"This post introduces the Arrow C data interface, a simple C-based\n+interoperability standard to simplify interactions between independent users\n+and implementors of the Arrow in-memory format.\"\n+date: \"2020-04-02 00:00:00 +0100\"\n+author: apitrou\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Apache Arrow is a cross-language, platform-independent in-memory format\n+allowing zero-copy data sharing and transfer between heterogenous runtimes\n+and applications.\n+\n+The easiest way to benefit from the Arrow format has always been to depend\n+on one of the concrete implementations developed by the Apache Arrow community.\n+There are 11 such implementations, each for a different language and ecosystem\n+(Java, C++, Python, Rust, R, Javascript, C#, Go...).\n+\n+However, packaging and ABI issues in C++ can deter from depending on the\n+Arrow C++ library.  We have therefore worked on an alternative, which\n+involves exchanging data at the C level by conforming to a simple data\n+definition.  The C ABI is a platform-wide standard that is unlikely to\n+change (and practically never changes), because it ensures portability of\n+libraries and executable binaries.\n+\n+The best way to learn about the C Data Interface is to read the\n+[spec](https://arrow.apache.org/docs/format/CDataInterface.html).\n+However, we will quickly go over its strong points.\n+\n+## Two simple struct definitions\n+\n+To interact with the C Data Interface from you C or C++ level, the only\n+thing you have to include in your code is two struct type declarations\n+(and a couple of ``#define`` for constant values).  Those declarations\n+only depend on standard C types.  You can simply paste them in a header\n+file.\n+\n+## Zero-copy data sharing\n+\n+The C Data Interface passes Arrow buffers through memory pointers.  So,\n+by construction, it allows you to share or pass data from one runtime to\n+another without copying it.  Since the data is supposed to be in standard\n+[Arrow in-memory format](https://arrow.apache.org/docs/format/Columnar.html),\n+its layout is well-defined and unambiguous.\n+\n+## Reduced marshalling\n+\n+The C Data Interface stays close to the natural way of expressing Arrow-like\n+data in C or C++.  Only two aspects involve non-trivial marshalling:\n+\n+* the encoding of data types, using a very simple string-based language\n+* the encoding of optional metadata, using a very simple length-prefixed format\n+\n+## Separate type and data representation\n+\n+Some applications will produce many instances of data of a single datatype\n+(for example, as a stream of record batches).  To allow those applications\n+to reduce the overhead of datatype representation and reconstruction, the\n+C Data Interface defines two independent structures: one representing a\n+datatype (and optional metadata), one representing a piece of data.\n \n Review comment:\n   ```suggestion\r\n   For applications which produce many instances of data of a single datatype\r\n   (for example, as a stream of record batches), repeatedly reconstructing the\r\n   datatype from its string encoding would represent unnecessary overhead.  To\r\n   address this use case, the C Data Interface defines two independent structures:\r\n   one representing a datatype (and optional metadata), one representing a piece\r\n   of data.\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T18:28:05.843+0000",
                    "updated": "2020-04-02T18:28:05.843+0000",
                    "started": "2020-04-02T18:28:05.843+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414956",
                    "issueId": "13290150"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290150/worklog/414957",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #50: ARROW-8023: [Website] Add blog post about the C data interface\nURL: https://github.com/apache/arrow-site/pull/50#discussion_r402523644\n \n \n\n ##########\n File path: _posts/2020-04-xx-introducing-arrow-c-data-interface.md\n ##########\n @@ -0,0 +1,90 @@\n+---\n+layout: post\n+title: \"Introducing the Apache Arrow C data interface\"\n+description: \"This post introduces the Arrow C data interface, a simple C-based\n+interoperability standard to simplify interactions between independent users\n+and implementors of the Arrow in-memory format.\"\n+date: \"2020-04-02 00:00:00 +0100\"\n+author: apitrou\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Apache Arrow is a cross-language, platform-independent in-memory format\n+allowing zero-copy data sharing and transfer between heterogenous runtimes\n+and applications.\n+\n+The easiest way to benefit from the Arrow format has always been to depend\n+on one of the concrete implementations developed by the Apache Arrow community.\n+There are 11 such implementations, each for a different language and ecosystem\n+(Java, C++, Python, Rust, R, Javascript, C#, Go...).\n+\n+However, packaging and ABI issues in C++ can deter from depending on the\n+Arrow C++ library.  We have therefore worked on an alternative, which\n+involves exchanging data at the C level by conforming to a simple data\n+definition.  The C ABI is a platform-wide standard that is unlikely to\n+change (and practically never changes), because it ensures portability of\n+libraries and executable binaries.\n+\n+The best way to learn about the C Data Interface is to read the\n+[spec](https://arrow.apache.org/docs/format/CDataInterface.html).\n+However, we will quickly go over its strong points.\n+\n+## Two simple struct definitions\n+\n+To interact with the C Data Interface from you C or C++ level, the only\n+thing you have to include in your code is two struct type declarations\n+(and a couple of ``#define`` for constant values).  Those declarations\n+only depend on standard C types.  You can simply paste them in a header\n+file.\n+\n+## Zero-copy data sharing\n+\n+The C Data Interface passes Arrow buffers through memory pointers.  So,\n+by construction, it allows you to share or pass data from one runtime to\n+another without copying it.  Since the data is supposed to be in standard\n+[Arrow in-memory format](https://arrow.apache.org/docs/format/Columnar.html),\n+its layout is well-defined and unambiguous.\n+\n+## Reduced marshalling\n+\n+The C Data Interface stays close to the natural way of expressing Arrow-like\n+data in C or C++.  Only two aspects involve non-trivial marshalling:\n+\n+* the encoding of data types, using a very simple string-based language\n+* the encoding of optional metadata, using a very simple length-prefixed format\n+\n+## Separate type and data representation\n+\n+Some applications will produce many instances of data of a single datatype\n+(for example, as a stream of record batches).  To allow those applications\n+to reduce the overhead of datatype representation and reconstruction, the\n+C Data Interface defines two independent structures: one representing a\n+datatype (and optional metadata), one representing a piece of data.\n+\n+## Lifetime handling\n+\n+One common difficulty of data sharing between heterogenous runtimes is to\n+correctly handle the lifetime of data.  The C Data Interface solves that issue\n+by letting the data producer define a pointer to a release callback that the\n+consumer must call when it has done using the data.  This way, the producer\n+is free to define its memory management scheme.  For example, the Arrow C++\n+library, when used as a producer, passes a release callback which simply\n+decrements a `shared_ptr`'s reference count.\n \n Review comment:\n   ```suggestion\r\n   correctly handle the lifetime of data.  The C Data Interface allows the producer\r\n   to define its own memory management scheme through a release callback.\r\n   This is a simple function pointer which consumers will call when they are\r\n   finished using the data.  For example when used as a producer the Arrow C++\r\n   library passes a release callback which simply decrements a `shared_ptr`'s\r\n   reference count.\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T18:28:05.846+0000",
                    "updated": "2020-04-02T18:28:05.846+0000",
                    "started": "2020-04-02T18:28:05.846+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414957",
                    "issueId": "13290150"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290150/worklog/414958",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #50: ARROW-8023: [Website] Add blog post about the C data interface\nURL: https://github.com/apache/arrow-site/pull/50#discussion_r402507663\n \n \n\n ##########\n File path: _posts/2020-04-xx-introducing-arrow-c-data-interface.md\n ##########\n @@ -0,0 +1,90 @@\n+---\n+layout: post\n+title: \"Introducing the Apache Arrow C data interface\"\n+description: \"This post introduces the Arrow C data interface, a simple C-based\n+interoperability standard to simplify interactions between independent users\n+and implementors of the Arrow in-memory format.\"\n+date: \"2020-04-02 00:00:00 +0100\"\n+author: apitrou\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Apache Arrow is a cross-language, platform-independent in-memory format\n+allowing zero-copy data sharing and transfer between heterogenous runtimes\n+and applications.\n+\n+The easiest way to benefit from the Arrow format has always been to depend\n+on one of the concrete implementations developed by the Apache Arrow community.\n+There are 11 such implementations, each for a different language and ecosystem\n+(Java, C++, Python, Rust, R, Javascript, C#, Go...).\n+\n+However, packaging and ABI issues in C++ can deter from depending on the\n+Arrow C++ library.  We have therefore worked on an alternative, which\n+involves exchanging data at the C level by conforming to a simple data\n+definition.  The C ABI is a platform-wide standard that is unlikely to\n+change (and practically never changes), because it ensures portability of\n+libraries and executable binaries.\n+\n+The best way to learn about the C Data Interface is to read the\n+[spec](https://arrow.apache.org/docs/format/CDataInterface.html).\n+However, we will quickly go over its strong points.\n+\n+## Two simple struct definitions\n+\n+To interact with the C Data Interface from you C or C++ level, the only\n+thing you have to include in your code is two struct type declarations\n+(and a couple of ``#define`` for constant values).  Those declarations\n+only depend on standard C types.  You can simply paste them in a header\n+file.\n+\n+## Zero-copy data sharing\n+\n+The C Data Interface passes Arrow buffers through memory pointers.  So,\n+by construction, it allows you to share or pass data from one runtime to\n+another without copying it.  Since the data is supposed to be in standard\n \n Review comment:\n   ```suggestion\r\n   another without copying it.  Since the data is in standard\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T18:28:05.881+0000",
                    "updated": "2020-04-02T18:28:05.881+0000",
                    "started": "2020-04-02T18:28:05.881+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414958",
                    "issueId": "13290150"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290150/worklog/414959",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #50: ARROW-8023: [Website] Add blog post about the C data interface\nURL: https://github.com/apache/arrow-site/pull/50#discussion_r402505576\n \n \n\n ##########\n File path: _posts/2020-04-xx-introducing-arrow-c-data-interface.md\n ##########\n @@ -0,0 +1,90 @@\n+---\n+layout: post\n+title: \"Introducing the Apache Arrow C data interface\"\n+description: \"This post introduces the Arrow C data interface, a simple C-based\n+interoperability standard to simplify interactions between independent users\n+and implementors of the Arrow in-memory format.\"\n+date: \"2020-04-02 00:00:00 +0100\"\n+author: apitrou\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Apache Arrow is a cross-language, platform-independent in-memory format\n+allowing zero-copy data sharing and transfer between heterogenous runtimes\n+and applications.\n+\n+The easiest way to benefit from the Arrow format has always been to depend\n+on one of the concrete implementations developed by the Apache Arrow community.\n+There are 11 such implementations, each for a different language and ecosystem\n+(Java, C++, Python, Rust, R, Javascript, C#, Go...).\n+\n+However, packaging and ABI issues in C++ can deter from depending on the\n+Arrow C++ library.  We have therefore worked on an alternative, which\n+involves exchanging data at the C level by conforming to a simple data\n \n Review comment:\n   ```suggestion\r\n   Arrow C++ library.  We have therefore provided an alternative which\r\n   exchanges data at the C level, conforming to a simple data\r\n   definition.  The C ABI is a platform-wide standard that is unlikely to\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T18:28:06.037+0000",
                    "updated": "2020-04-02T18:28:06.037+0000",
                    "started": "2020-04-02T18:28:06.036+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "414959",
                    "issueId": "13290150"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290150/worklog/415046",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #50: ARROW-8023: [Website] Add blog post about the C data interface\nURL: https://github.com/apache/arrow-site/pull/50#issuecomment-608096657\n \n \n   > I'd love to see some example code, maybe a session of R using reticulate?\r\n   \r\n   I also made this minimal cffi example yesterday, might help illustrate the workflow:\r\n   \r\n   https://gist.github.com/wesm/d48908018c4b7a0d9789a31d10caf525\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T21:22:08.406+0000",
                    "updated": "2020-04-02T21:22:08.406+0000",
                    "started": "2020-04-02T21:22:08.406+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "415046",
                    "issueId": "13290150"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290150/worklog/415071",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #50: ARROW-8023: [Website] Add blog post about the C data interface\nURL: https://github.com/apache/arrow-site/pull/50#discussion_r402615859\n \n \n\n ##########\n File path: _posts/2020-04-xx-introducing-arrow-c-data-interface.md\n ##########\n @@ -0,0 +1,90 @@\n+---\n+layout: post\n+title: \"Introducing the Apache Arrow C data interface\"\n+description: \"This post introduces the Arrow C data interface, a simple C-based\n+interoperability standard to simplify interactions between independent users\n+and implementors of the Arrow in-memory format.\"\n+date: \"2020-04-02 00:00:00 +0100\"\n+author: apitrou\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Apache Arrow is a cross-language, platform-independent in-memory format\n+allowing zero-copy data sharing and transfer between heterogenous runtimes\n+and applications.\n+\n+The easiest way to benefit from the Arrow format has always been to depend\n+on one of the concrete implementations developed by the Apache Arrow community.\n+There are 11 such implementations, each for a different language and ecosystem\n+(Java, C++, Python, Rust, R, Javascript, C#, Go...).\n+\n+However, packaging and ABI issues in C++ can deter from depending on the\n+Arrow C++ library.  We have therefore worked on an alternative, which\n+involves exchanging data at the C level by conforming to a simple data\n+definition.  The C ABI is a platform-wide standard that is unlikely to\n+change (and practically never changes), because it ensures portability of\n+libraries and executable binaries.\n+\n+The best way to learn about the C Data Interface is to read the\n+[spec](https://arrow.apache.org/docs/format/CDataInterface.html).\n+However, we will quickly go over its strong points.\n+\n+## Two simple struct definitions\n+\n+To interact with the C Data Interface from you C or C++ level, the only\n+thing you have to include in your code is two struct type declarations\n+(and a couple of ``#define`` for constant values).  Those declarations\n+only depend on standard C types.  You can simply paste them in a header\n+file.\n+\n \n Review comment:\n   Add a sentence about C FFI capabilities in languages like Rust, Python (cffi / cython), Go, Julia, etc.? To stave off the reaction of \"but I'm not using C or C++\". Most people should know that they can deal with C ABIs in their languages but just in case. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T21:51:47.597+0000",
                    "updated": "2020-04-02T21:51:47.597+0000",
                    "started": "2020-04-02T21:51:47.597+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "415071",
                    "issueId": "13290150"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290150/worklog/415072",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #50: ARROW-8023: [Website] Add blog post about the C data interface\nURL: https://github.com/apache/arrow-site/pull/50#discussion_r402612650\n \n \n\n ##########\n File path: _posts/2020-04-xx-introducing-arrow-c-data-interface.md\n ##########\n @@ -0,0 +1,90 @@\n+---\n+layout: post\n+title: \"Introducing the Apache Arrow C data interface\"\n+description: \"This post introduces the Arrow C data interface, a simple C-based\n+interoperability standard to simplify interactions between independent users\n+and implementors of the Arrow in-memory format.\"\n+date: \"2020-04-02 00:00:00 +0100\"\n+author: apitrou\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Apache Arrow is a cross-language, platform-independent in-memory format\n+allowing zero-copy data sharing and transfer between heterogenous runtimes\n+and applications.\n+\n+The easiest way to benefit from the Arrow format has always been to depend\n+on one of the concrete implementations developed by the Apache Arrow community.\n+There are 11 such implementations, each for a different language and ecosystem\n+(Java, C++, Python, Rust, R, Javascript, C#, Go...).\n+\n+However, packaging and ABI issues in C++ can deter from depending on the\n+Arrow C++ library.  We have therefore worked on an alternative, which\n \n Review comment:\n   I'm concerned that this might read as too much of a \"neg\" of the C++ library.\r\n   \r\n   How about this:\r\n   \r\n   \"Some projects may wish to import and export Arrow columnar data without taking on a new library dependency, such as the Arrow C++ library.\"\r\n   \r\n   The packaging and ABI issues are somewhat distracting details -- people have many reasons for not wanting to take on dependencies -- if we list them here then it could be a distraction, e.g. \"wait, what ABI issues?\"\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T21:51:47.624+0000",
                    "updated": "2020-04-02T21:51:47.624+0000",
                    "started": "2020-04-02T21:51:47.623+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "415072",
                    "issueId": "13290150"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290150/worklog/415073",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #50: ARROW-8023: [Website] Add blog post about the C data interface\nURL: https://github.com/apache/arrow-site/pull/50#discussion_r402615218\n \n \n\n ##########\n File path: _posts/2020-04-xx-introducing-arrow-c-data-interface.md\n ##########\n @@ -0,0 +1,90 @@\n+---\n+layout: post\n+title: \"Introducing the Apache Arrow C data interface\"\n+description: \"This post introduces the Arrow C data interface, a simple C-based\n+interoperability standard to simplify interactions between independent users\n+and implementors of the Arrow in-memory format.\"\n+date: \"2020-04-02 00:00:00 +0100\"\n+author: apitrou\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Apache Arrow is a cross-language, platform-independent in-memory format\n+allowing zero-copy data sharing and transfer between heterogenous runtimes\n+and applications.\n+\n+The easiest way to benefit from the Arrow format has always been to depend\n+on one of the concrete implementations developed by the Apache Arrow community.\n+There are 11 such implementations, each for a different language and ecosystem\n+(Java, C++, Python, Rust, R, Javascript, C#, Go...).\n+\n+However, packaging and ABI issues in C++ can deter from depending on the\n+Arrow C++ library.  We have therefore worked on an alternative, which\n+involves exchanging data at the C level by conforming to a simple data\n+definition.  The C ABI is a platform-wide standard that is unlikely to\n+change (and practically never changes), because it ensures portability of\n+libraries and executable binaries.\n+\n+The best way to learn about the C Data Interface is to read the\n+[spec](https://arrow.apache.org/docs/format/CDataInterface.html).\n+However, we will quickly go over its strong points.\n+\n+## Two simple struct definitions\n+\n+To interact with the C Data Interface from you C or C++ level, the only\n \n Review comment:\n   \"from you C or C++ level\" -> \"at the C or C++ level\"\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T21:51:47.679+0000",
                    "updated": "2020-04-02T21:51:47.679+0000",
                    "started": "2020-04-02T21:51:47.678+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "415073",
                    "issueId": "13290150"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290150/worklog/415074",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #50: ARROW-8023: [Website] Add blog post about the C data interface\nURL: https://github.com/apache/arrow-site/pull/50#discussion_r402614192\n \n \n\n ##########\n File path: _posts/2020-04-xx-introducing-arrow-c-data-interface.md\n ##########\n @@ -0,0 +1,90 @@\n+---\n+layout: post\n+title: \"Introducing the Apache Arrow C data interface\"\n+description: \"This post introduces the Arrow C data interface, a simple C-based\n+interoperability standard to simplify interactions between independent users\n+and implementors of the Arrow in-memory format.\"\n+date: \"2020-04-02 00:00:00 +0100\"\n+author: apitrou\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Apache Arrow is a cross-language, platform-independent in-memory format\n+allowing zero-copy data sharing and transfer between heterogenous runtimes\n+and applications.\n+\n+The easiest way to benefit from the Arrow format has always been to depend\n+on one of the concrete implementations developed by the Apache Arrow community.\n+There are 11 such implementations, each for a different language and ecosystem\n+(Java, C++, Python, Rust, R, Javascript, C#, Go...).\n+\n+However, packaging and ABI issues in C++ can deter from depending on the\n+Arrow C++ library.  We have therefore worked on an alternative, which\n+involves exchanging data at the C level by conforming to a simple data\n \n Review comment:\n   A potential rephrasing\r\n   \r\n   \"We therefore have designed a tiny (minimalist?) and portable C data structures that can be easily copied into a codebase and used to provide access to Arrow data at function call sites.\" (or similar)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T21:51:47.835+0000",
                    "updated": "2020-04-02T21:51:47.835+0000",
                    "started": "2020-04-02T21:51:47.835+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "415074",
                    "issueId": "13290150"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290150/worklog/415076",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #50: ARROW-8023: [Website] Add blog post about the C data interface\nURL: https://github.com/apache/arrow-site/pull/50#discussion_r402616046\n \n \n\n ##########\n File path: _posts/2020-04-xx-introducing-arrow-c-data-interface.md\n ##########\n @@ -0,0 +1,90 @@\n+---\n+layout: post\n+title: \"Introducing the Apache Arrow C data interface\"\n+description: \"This post introduces the Arrow C data interface, a simple C-based\n+interoperability standard to simplify interactions between independent users\n+and implementors of the Arrow in-memory format.\"\n+date: \"2020-04-02 00:00:00 +0100\"\n+author: apitrou\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Apache Arrow is a cross-language, platform-independent in-memory format\n+allowing zero-copy data sharing and transfer between heterogenous runtimes\n+and applications.\n+\n+The easiest way to benefit from the Arrow format has always been to depend\n+on one of the concrete implementations developed by the Apache Arrow community.\n+There are 11 such implementations, each for a different language and ecosystem\n+(Java, C++, Python, Rust, R, Javascript, C#, Go...).\n+\n+However, packaging and ABI issues in C++ can deter from depending on the\n+Arrow C++ library.  We have therefore worked on an alternative, which\n+involves exchanging data at the C level by conforming to a simple data\n+definition.  The C ABI is a platform-wide standard that is unlikely to\n+change (and practically never changes), because it ensures portability of\n+libraries and executable binaries.\n+\n+The best way to learn about the C Data Interface is to read the\n+[spec](https://arrow.apache.org/docs/format/CDataInterface.html).\n+However, we will quickly go over its strong points.\n+\n+## Two simple struct definitions\n+\n+To interact with the C Data Interface from you C or C++ level, the only\n+thing you have to include in your code is two struct type declarations\n+(and a couple of ``#define`` for constant values).  Those declarations\n+only depend on standard C types.  You can simply paste them in a header\n+file.\n+\n+## Zero-copy data sharing\n+\n+The C Data Interface passes Arrow buffers through memory pointers.  So,\n \n Review comment:\n   \"Arrow data buffers\" ?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T21:51:47.838+0000",
                    "updated": "2020-04-02T21:51:47.838+0000",
                    "started": "2020-04-02T21:51:47.838+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "415076",
                    "issueId": "13290150"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290150/worklog/415075",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #50: ARROW-8023: [Website] Add blog post about the C data interface\nURL: https://github.com/apache/arrow-site/pull/50#discussion_r402610353\n \n \n\n ##########\n File path: _posts/2020-04-xx-introducing-arrow-c-data-interface.md\n ##########\n @@ -0,0 +1,90 @@\n+---\n+layout: post\n+title: \"Introducing the Apache Arrow C data interface\"\n+description: \"This post introduces the Arrow C data interface, a simple C-based\n+interoperability standard to simplify interactions between independent users\n+and implementors of the Arrow in-memory format.\"\n+date: \"2020-04-02 00:00:00 +0100\"\n+author: apitrou\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Apache Arrow is a cross-language, platform-independent in-memory format\n+allowing zero-copy data sharing and transfer between heterogenous runtimes\n+and applications.\n+\n+The easiest way to benefit from the Arrow format has always been to depend\n \n Review comment:\n   \"to use the Arrow columnar format\"\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T21:51:47.838+0000",
                    "updated": "2020-04-02T21:51:47.838+0000",
                    "started": "2020-04-02T21:51:47.838+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "415075",
                    "issueId": "13290150"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290150/worklog/415077",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #50: ARROW-8023: [Website] Add blog post about the C data interface\nURL: https://github.com/apache/arrow-site/pull/50#discussion_r402611429\n \n \n\n ##########\n File path: _posts/2020-04-xx-introducing-arrow-c-data-interface.md\n ##########\n @@ -0,0 +1,90 @@\n+---\n+layout: post\n+title: \"Introducing the Apache Arrow C data interface\"\n+description: \"This post introduces the Arrow C data interface, a simple C-based\n+interoperability standard to simplify interactions between independent users\n+and implementors of the Arrow in-memory format.\"\n+date: \"2020-04-02 00:00:00 +0100\"\n+author: apitrou\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Apache Arrow is a cross-language, platform-independent in-memory format\n+allowing zero-copy data sharing and transfer between heterogenous runtimes\n+and applications.\n+\n+The easiest way to benefit from the Arrow format has always been to depend\n+on one of the concrete implementations developed by the Apache Arrow community.\n+There are 11 such implementations, each for a different language and ecosystem\n \n Review comment:\n   Nit: maybe something like \"The project codebase contains libraries for 11 different programming language so far and will likely grow to include more languages in the future.\"\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T21:51:47.841+0000",
                    "updated": "2020-04-02T21:51:47.841+0000",
                    "started": "2020-04-02T21:51:47.841+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "415077",
                    "issueId": "13290150"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290150/worklog/415078",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #50: ARROW-8023: [Website] Add blog post about the C data interface\nURL: https://github.com/apache/arrow-site/pull/50#discussion_r402610157\n \n \n\n ##########\n File path: _posts/2020-04-xx-introducing-arrow-c-data-interface.md\n ##########\n @@ -0,0 +1,90 @@\n+---\n+layout: post\n+title: \"Introducing the Apache Arrow C data interface\"\n+description: \"This post introduces the Arrow C data interface, a simple C-based\n+interoperability standard to simplify interactions between independent users\n+and implementors of the Arrow in-memory format.\"\n+date: \"2020-04-02 00:00:00 +0100\"\n+author: apitrou\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Apache Arrow is a cross-language, platform-independent in-memory format\n \n Review comment:\n   \"Apache Arrow **includes** a cross-language, platform-independent in-memory **columnar format**\"\r\n   \r\n   Reflecting expanding scope of the project. Still running into people who are surprised by the amount of software in the project. Therefore, we should be consistent about expressing things that the project \"has\" or \"includes\" versus what it \"is\" (to avoid some of these \"project identity confusion\" problems)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T21:51:47.845+0000",
                    "updated": "2020-04-02T21:51:47.845+0000",
                    "started": "2020-04-02T21:51:47.845+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "415078",
                    "issueId": "13290150"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290150/worklog/415079",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #50: ARROW-8023: [Website] Add blog post about the C data interface\nURL: https://github.com/apache/arrow-site/pull/50#discussion_r402615011\n \n \n\n ##########\n File path: _posts/2020-04-xx-introducing-arrow-c-data-interface.md\n ##########\n @@ -0,0 +1,90 @@\n+---\n+layout: post\n+title: \"Introducing the Apache Arrow C data interface\"\n+description: \"This post introduces the Arrow C data interface, a simple C-based\n+interoperability standard to simplify interactions between independent users\n+and implementors of the Arrow in-memory format.\"\n+date: \"2020-04-02 00:00:00 +0100\"\n+author: apitrou\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Apache Arrow is a cross-language, platform-independent in-memory format\n+allowing zero-copy data sharing and transfer between heterogenous runtimes\n+and applications.\n+\n+The easiest way to benefit from the Arrow format has always been to depend\n+on one of the concrete implementations developed by the Apache Arrow community.\n+There are 11 such implementations, each for a different language and ecosystem\n+(Java, C++, Python, Rust, R, Javascript, C#, Go...).\n+\n+However, packaging and ABI issues in C++ can deter from depending on the\n+Arrow C++ library.  We have therefore worked on an alternative, which\n+involves exchanging data at the C level by conforming to a simple data\n+definition.  The C ABI is a platform-wide standard that is unlikely to\n+change (and practically never changes), because it ensures portability of\n \n Review comment:\n   Maybe add a sentence to this paragraph like \"Two libraries that utilize these C structures can do zero-copy data transfers at runtime without any build-time or link-time dependency requirements.\"\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T21:51:48.013+0000",
                    "updated": "2020-04-02T21:51:48.013+0000",
                    "started": "2020-04-02T21:51:48.013+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "415079",
                    "issueId": "13290150"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13290150/worklog/415081",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #50: ARROW-8023: [Website] Add blog post about the C data interface\nURL: https://github.com/apache/arrow-site/pull/50#discussion_r402612650\n \n \n\n ##########\n File path: _posts/2020-04-xx-introducing-arrow-c-data-interface.md\n ##########\n @@ -0,0 +1,90 @@\n+---\n+layout: post\n+title: \"Introducing the Apache Arrow C data interface\"\n+description: \"This post introduces the Arrow C data interface, a simple C-based\n+interoperability standard to simplify interactions between independent users\n+and implementors of the Arrow in-memory format.\"\n+date: \"2020-04-02 00:00:00 +0100\"\n+author: apitrou\n+categories: [application]\n+---\n+<!--\n+{% comment %}\n+Licensed to the Apache Software Foundation (ASF) under one or more\n+contributor license agreements.  See the NOTICE file distributed with\n+this work for additional information regarding copyright ownership.\n+The ASF licenses this file to you under the Apache License, Version 2.0\n+(the \"License\"); you may not use this file except in compliance with\n+the License.  You may obtain a copy of the License at\n+\n+http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing, software\n+distributed under the License is distributed on an \"AS IS\" BASIS,\n+WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+See the License for the specific language governing permissions and\n+limitations under the License.\n+{% endcomment %}\n+-->\n+\n+Apache Arrow is a cross-language, platform-independent in-memory format\n+allowing zero-copy data sharing and transfer between heterogenous runtimes\n+and applications.\n+\n+The easiest way to benefit from the Arrow format has always been to depend\n+on one of the concrete implementations developed by the Apache Arrow community.\n+There are 11 such implementations, each for a different language and ecosystem\n+(Java, C++, Python, Rust, R, Javascript, C#, Go...).\n+\n+However, packaging and ABI issues in C++ can deter from depending on the\n+Arrow C++ library.  We have therefore worked on an alternative, which\n \n Review comment:\n   I'm concerned that this might read as too much of a \"neg\" of the C++ library.\r\n   \r\n   How about this:\r\n   \r\n   \"Some projects may wish to import and export the Arrow columnar format without taking on a new library dependency, such as the Arrow C++ library.\"\r\n   \r\n   The packaging and ABI issues are somewhat distracting details -- people have many reasons for not wanting to take on dependencies -- if we list them here then it could be a distraction, e.g. \"wait, what ABI issues?\"\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-04-02T21:53:06.581+0000",
                    "updated": "2020-04-02T21:53:06.581+0000",
                    "started": "2020-04-02T21:53:06.581+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "415081",
                    "issueId": "13290150"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/3",
            "id": "3",
            "description": "A task that needs to be done.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21148&avatarType=issuetype",
            "name": "Task",
            "subtask": false,
            "avatarId": 21148
        },
        "timespent": 17400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3ca9cd35[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1d33d003[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4bc3af0a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4873cdb9[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@292fbae8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@18848804[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4ee9dfe1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@18a1cd80[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4c8dcc86[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@70f5b9bb[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@70e37693[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@663878c2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 17400,
        "customfield_12312520": null,
        "customfield_12312521": "2020-03-06 17:47:53.0",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-05-26T20:49:33.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-8023/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-03-06T17:47:53.000+0000",
        "updated": "2020-05-26T20:49:33.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 17400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Website] Write a blog post about the C data interface",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [],
            "maxResults": 0,
            "total": 0,
            "startAt": 0
        },
        "customfield_12311820": "0|z0c9gg:",
        "customfield_12314139": null
    }
}