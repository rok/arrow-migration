{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13178284",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178284",
    "key": "ARROW-3039",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12644920",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12644920",
                "type": {
                    "id": "12310660",
                    "name": "Completes",
                    "inward": "is fixed by",
                    "outward": "fixes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310660"
                },
                "outwardIssue": {
                    "id": "13271583",
                    "key": "ARROW-7286",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13271583",
                    "fields": {
                        "summary": "[Go] Ensure go implementation implements clarified dictionary spec",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                            "id": "7",
                            "description": "The sub-task of the issue",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                            "name": "Sub-task",
                            "subtask": true,
                            "avatarId": 21146
                        }
                    }
                }
            },
            {
                "id": "12644524",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12644524",
                "type": {
                    "id": "12310660",
                    "name": "Completes",
                    "inward": "is fixed by",
                    "outward": "fixes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310660"
                },
                "outwardIssue": {
                    "id": "13231750",
                    "key": "ARROW-5267",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13231750",
                    "fields": {
                        "summary": "[Go] implement read/write IPC for dictionaries",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                            "id": "7",
                            "description": "The sub-task of the issue",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                            "name": "Sub-task",
                            "subtask": true,
                            "avatarId": 21146
                        }
                    }
                }
            },
            {
                "id": "12638677",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12638677",
                "type": {
                    "id": "12310660",
                    "name": "Completes",
                    "inward": "is fixed by",
                    "outward": "fixes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310660"
                },
                "outwardIssue": {
                    "id": "13315701",
                    "key": "ARROW-9378",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315701",
                    "fields": {
                        "summary": "[Go] Support unsigned dictionary indices",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12581014",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12581014",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13231750",
                    "key": "ARROW-5267",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13231750",
                    "fields": {
                        "summary": "[Go] implement read/write IPC for dictionaries",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                            "id": "7",
                            "description": "The sub-task of the issue",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                            "name": "Sub-task",
                            "subtask": true,
                            "avatarId": 21146
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
            "name": "zeroshade",
            "key": "zeroshade",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
            },
            "displayName": "Matthew Topol",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333772",
                "id": "12333772",
                "name": "Go"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=sbinet",
            "name": "sbinet",
            "key": "sbinet",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=sbinet&avatarId=36072",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=sbinet&avatarId=36072",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=sbinet&avatarId=36072",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=sbinet&avatarId=36072"
            },
            "displayName": "Sebastien Binet",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 33000,
            "total": 33000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 33000,
            "total": 33000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3039/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 55,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178284/worklog/709206",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade opened a new pull request #12158:\nURL: https://github.com/apache/arrow/pull/12158\n\n\n   Also resolves ARROW-5267, ARROW-7286, and ARROW-9378 which all are different pieces of the DictionaryArray support.\r\n   \r\n   This *does not* implement Dictionary support for scalars yet, nor does it yet support concatenating Dictionary Arrays and dictionary unification. Cards will be created to track work for those two pieces of functionality separately.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-14T17:35:48.701+0000",
                    "updated": "2022-01-14T17:35:48.701+0000",
                    "started": "2022-01-14T17:35:48.701+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "709206",
                    "issueId": "13178284"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178284/worklog/709213",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12158:\nURL: https://github.com/apache/arrow/pull/12158#issuecomment-1013324342\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-14T17:39:10.229+0000",
                    "updated": "2022-01-14T17:39:10.229+0000",
                    "started": "2022-01-14T17:39:10.228+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "709213",
                    "issueId": "13178284"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178284/worklog/717271",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "brancz commented on pull request #12158:\nURL: https://github.com/apache/arrow/pull/12158#issuecomment-1024624600\n\n\n   Hey! I stumbled on this PR since I was looking for dictionary support, and I was wondering why there wasn't a `StringDictionaryBuilder`, but almost everything else? Or is one just supposed to use the `Dictionary` type directly for that? The other case I have that I'd want to use dictionaries for is Lists, as in a dictionary of common lists seen before, does that even work with Dictionaries? (sorry if the second one is a more general question than about this PR)\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-28T20:49:08.604+0000",
                    "updated": "2022-01-28T20:49:08.604+0000",
                    "started": "2022-01-28T20:49:08.603+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "717271",
                    "issueId": "13178284"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178284/worklog/717275",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "brancz edited a comment on pull request #12158:\nURL: https://github.com/apache/arrow/pull/12158#issuecomment-1024624600\n\n\n   Hey! I stumbled on this PR since I was looking for dictionary support, and I was wondering why there wasn't a `StringDictionaryBuilder`, but almost everything else? Or is one just supposed to use the `Dictionary` type directly for that? The other case I have that I'd want to use dictionaries for is Lists, as in a dictionary of common lists seen before, does that even work with Dictionaries? (sorry if the second one is a more general question than about this PR)\r\n   \r\n   Will report on usage of the API once we start trying it out!\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-28T21:02:43.655+0000",
                    "updated": "2022-01-28T21:02:43.655+0000",
                    "started": "2022-01-28T21:02:43.654+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "717275",
                    "issueId": "13178284"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178284/worklog/718029",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "zeroshade commented on pull request #12158:\nURL: https://github.com/apache/arrow/pull/12158#issuecomment-1025935325\n\n\n   Hey @brancz The reason for a lack of `StringDictionaryBuilder` is that it's really just a special case of the `BinaryDictionaryBuilder` which can be instantiated with the proper `arrow.DataType` and accepts adding either `[]byte` or `string`. So rather than create a separate `StringDictionaryBuilder` I just rolled it into that. Alternatively I could create a `StringDictionaryBuilder` which is just an alias to the `BinaryDictionaryBuilder` if that might be easier to understand?\r\n   \r\n   As for Lists, in the most technical sense nothing in the Arrow format spec prohibits or prevents using a List array as a dictionary. I just simply didn't implement it yet in this PR as that is not a case covered by the integration tests.\r\n   \r\n   I'd love any feedback on the API from real world usage! I'm still waiting on people looking through and reviewing this and so on, and was aiming to not merge this until after arrow version 7.0.0 gets released anyways. So i'd integrate any feedback you have into this PR. Looking forward to it and thanks for checking this out!\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-01-31T16:00:31.659+0000",
                    "updated": "2022-01-31T16:00:31.659+0000",
                    "started": "2022-01-31T16:00:31.659+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "718029",
                    "issueId": "13178284"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178284/worklog/719361",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "brancz commented on pull request #12158:\nURL: https://github.com/apache/arrow/pull/12158#issuecomment-1027935601\n\n\n   That makes sense, thank you for elaborating!\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-02T13:22:30.494+0000",
                    "updated": "2022-02-02T13:22:30.494+0000",
                    "started": "2022-02-02T13:22:30.494+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "719361",
                    "issueId": "13178284"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178284/worklog/721564",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #12158:\nURL: https://github.com/apache/arrow/pull/12158#discussion_r800127568\n\n\n\n##########\nFile path: dev/archery/archery/integration/datagen.py\n##########\n@@ -1620,24 +1620,20 @@ def _temp_path():\n \n         # TODO(ARROW-3039, ARROW-5267): Dictionaries in GO\n         generate_dictionary_case()\n-        .skip_category('C#')\n-        .skip_category('Go'),\n+        .skip_category('C#'),\n\nReview comment:\n       :)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-06T05:09:36.528+0000",
                    "updated": "2022-02-06T05:09:36.528+0000",
                    "started": "2022-02-06T05:09:36.528+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "721564",
                    "issueId": "13178284"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178284/worklog/721565",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #12158:\nURL: https://github.com/apache/arrow/pull/12158#discussion_r800127741\n\n\n\n##########\nFile path: go/arrow/array/array_test.go\n##########\n@@ -95,13 +96,15 @@ func TestMakeFromData(t *testing.T) {\n \t\t\t}, 0 /* nulls */, 0 /* offset */)},\n \t\t},\n \n+\t\t{name: \"dictionary\", d: &testDataType{arrow.DICTIONARY}, expPanic: true, expError: \"arrow/array: no dictionary set in Data for Dictionary array\"},\n+\t\t{name: \"dictionary\", d: &arrow.DictionaryType{IndexType: arrow.PrimitiveTypes.Int8, ValueType: &testDataType{arrow.INT64}}, dict: array.NewData(&testDataType{arrow.INT64}, 0 /* length */, make([]*memory.Buffer, 2 /*null bitmap, values*/), nil /* childData */, 0 /* nulls */, 0 /* offset */)},\n\nReview comment:\n       does it pay to test more index and value types?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-06T05:11:29.388+0000",
                    "updated": "2022-02-06T05:11:29.388+0000",
                    "started": "2022-02-06T05:11:29.388+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "721565",
                    "issueId": "13178284"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178284/worklog/721566",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #12158:\nURL: https://github.com/apache/arrow/pull/12158#discussion_r800127832\n\n\n\n##########\nFile path: go/arrow/array/data.go\n##########\n@@ -29,13 +29,14 @@ import (\n \n // Data represents the memory and metadata of an Arrow array.\n type Data struct {\n-\trefCount  int64\n-\tdtype     arrow.DataType\n-\tnulls     int\n-\toffset    int\n-\tlength    int\n-\tbuffers   []*memory.Buffer  // TODO(sgc): should this be an interface?\n-\tchildData []arrow.ArrayData // TODO(sgc): managed by ListArray, StructArray and UnionArray types\n+\trefCount   int64\n+\tdtype      arrow.DataType\n+\tnulls      int\n+\toffset     int\n+\tlength     int\n+\tbuffers    []*memory.Buffer  // TODO(sgc): should this be an interface?\n+\tchildData  []arrow.ArrayData // TODO(sgc): managed by ListArray, StructArray and UnionArray types\n+\tdictionary *Data             // only populated for dictionary arrays\n\nReview comment:\n       maybe expand the comment  to elaborate that for dictionary arrays buffers will contain nullability and indexes  that reference elements in this variable? (and childdata would be empty)\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-06T05:13:52.011+0000",
                    "updated": "2022-02-06T05:13:52.011+0000",
                    "started": "2022-02-06T05:13:52.011+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "721566",
                    "issueId": "13178284"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178284/worklog/721567",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #12158:\nURL: https://github.com/apache/arrow/pull/12158#discussion_r800127882\n\n\n\n##########\nFile path: go/arrow/array/data.go\n##########\n@@ -63,6 +64,16 @@ func NewData(dtype arrow.DataType, length int, buffers []*memory.Buffer, childDa\n \t}\n }\n \n+// NewDataWithDictionary creates a new data object, but also sets the provided dictionary into the data if it's not nil\n+func NewDataWithDictionary(dtype arrow.DataType, length int, buffers []*memory.Buffer, childData []arrow.ArrayData, nulls, offset int, dict *Data) *Data {\n+\tdata := NewData(dtype, length, buffers, childData, nulls, offset)\n\nReview comment:\n       should we check that childData is empty here?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-06T05:14:47.915+0000",
                    "updated": "2022-02-06T05:14:47.915+0000",
                    "started": "2022-02-06T05:14:47.915+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "721567",
                    "issueId": "13178284"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178284/worklog/721568",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #12158:\nURL: https://github.com/apache/arrow/pull/12158#discussion_r800127967\n\n\n\n##########\nFile path: go/arrow/array/dictionary.go\n##########\n@@ -0,0 +1,1305 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array\n+\n+import (\n+\t\"errors\"\n+\t\"fmt\"\n+\t\"math\"\n+\t\"sync/atomic\"\n+\t\"unsafe\"\n+\n+\t\"github.com/apache/arrow/go/v7/arrow\"\n+\t\"github.com/apache/arrow/go/v7/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/v7/arrow/decimal128\"\n+\t\"github.com/apache/arrow/go/v7/arrow/float16\"\n+\t\"github.com/apache/arrow/go/v7/arrow/internal/debug\"\n+\t\"github.com/apache/arrow/go/v7/arrow/memory\"\n+\t\"github.com/apache/arrow/go/v7/internal/hashing\"\n+\t\"github.com/goccy/go-json\"\n+)\n+\n+// Dictionary represents the type for dictionary-encoded data with a data\n\nReview comment:\n       Thank you for the nice docs!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-06T05:16:00.414+0000",
                    "updated": "2022-02-06T05:16:00.414+0000",
                    "started": "2022-02-06T05:16:00.414+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "721568",
                    "issueId": "13178284"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178284/worklog/721569",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #12158:\nURL: https://github.com/apache/arrow/pull/12158#discussion_r800128161\n\n\n\n##########\nFile path: go/arrow/array/dictionary.go\n##########\n@@ -0,0 +1,1305 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array\n+\n+import (\n+\t\"errors\"\n+\t\"fmt\"\n+\t\"math\"\n+\t\"sync/atomic\"\n+\t\"unsafe\"\n+\n+\t\"github.com/apache/arrow/go/v7/arrow\"\n+\t\"github.com/apache/arrow/go/v7/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/v7/arrow/decimal128\"\n+\t\"github.com/apache/arrow/go/v7/arrow/float16\"\n+\t\"github.com/apache/arrow/go/v7/arrow/internal/debug\"\n+\t\"github.com/apache/arrow/go/v7/arrow/memory\"\n+\t\"github.com/apache/arrow/go/v7/internal/hashing\"\n+\t\"github.com/goccy/go-json\"\n+)\n+\n+// Dictionary represents the type for dictionary-encoded data with a data\n+// dependent dictionary.\n+//\n+// A dictionary array contains an array of non-negative integers (the \"dictionary\"\n+// indices\") along with a data type containing a \"dictionary\" corresponding to\n+// the distinct values represented in the data.\n+//\n+// For example, the array:\n+//\n+//      [\"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"bar\"]\n+//\n+// with dictionary [\"bar\", \"foo\"], would have the representation of:\n+//\n+//      indices: [1, 0, 1, 0, 1, 0]\n+//      dictionary: [\"bar\", \"foo\"]\n+//\n+// The indices in principle may be any integer type.\n+type Dictionary struct {\n+\tarray\n+\n+\tindices Interface\n+\tdict    Interface\n+}\n+\n+// NewDictionaryArray constructs a dictionary array with the provided indices\n+// and dictionary using the given type.\n+func NewDictionaryArray(typ arrow.DataType, indices, dict Interface) *Dictionary {\n+\ta := &Dictionary{}\n+\ta.array.refCount = 1\n+\tdictdata := NewData(typ, indices.Len(), indices.Data().Buffers(), indices.Data().Children(), indices.NullN(), indices.Data().Offset())\n+\tdictdata.dictionary = dict.Data().(*Data)\n+\tdict.Data().Retain()\n+\n+\tdefer dictdata.Release()\n+\ta.setData(dictdata)\n+\treturn a\n+}\n+\n+// checkIndexBounds returns an error if any value in the provided integer\n+// arraydata is >= the passed upperlimit or < 0. otherwise nil\n+func checkIndexBounds(indices *Data, upperlimit uint64) error {\n+\tif indices.length == 0 {\n+\t\treturn nil\n+\t}\n+\n+\tvar maxval uint64\n+\tswitch indices.dtype.ID() {\n+\tcase arrow.UINT8:\n\nReview comment:\n       This needs signed cased  also?\r\n   \r\n   From the spec\r\n   \r\n   ```\r\n   Since unsigned integers can be more difficult to work with in some cases (e.g. in the JVM), we recommend preferring signed integers over unsigned integers for representing dictionary indices. Additionally, we recommend avoiding using 64-bit unsigned integer indices unless they are required by an application.\r\n   ```\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-06T05:18:53.139+0000",
                    "updated": "2022-02-06T05:18:53.139+0000",
                    "started": "2022-02-06T05:18:53.139+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "721569",
                    "issueId": "13178284"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178284/worklog/721570",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #12158:\nURL: https://github.com/apache/arrow/pull/12158#discussion_r800128243\n\n\n\n##########\nFile path: go/arrow/array/dictionary.go\n##########\n@@ -0,0 +1,1305 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array\n+\n+import (\n+\t\"errors\"\n+\t\"fmt\"\n+\t\"math\"\n+\t\"sync/atomic\"\n+\t\"unsafe\"\n+\n+\t\"github.com/apache/arrow/go/v7/arrow\"\n+\t\"github.com/apache/arrow/go/v7/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/v7/arrow/decimal128\"\n+\t\"github.com/apache/arrow/go/v7/arrow/float16\"\n+\t\"github.com/apache/arrow/go/v7/arrow/internal/debug\"\n+\t\"github.com/apache/arrow/go/v7/arrow/memory\"\n+\t\"github.com/apache/arrow/go/v7/internal/hashing\"\n+\t\"github.com/goccy/go-json\"\n+)\n+\n+// Dictionary represents the type for dictionary-encoded data with a data\n+// dependent dictionary.\n+//\n+// A dictionary array contains an array of non-negative integers (the \"dictionary\"\n+// indices\") along with a data type containing a \"dictionary\" corresponding to\n+// the distinct values represented in the data.\n+//\n+// For example, the array:\n+//\n+//      [\"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"bar\"]\n+//\n+// with dictionary [\"bar\", \"foo\"], would have the representation of:\n+//\n+//      indices: [1, 0, 1, 0, 1, 0]\n+//      dictionary: [\"bar\", \"foo\"]\n+//\n+// The indices in principle may be any integer type.\n+type Dictionary struct {\n+\tarray\n+\n+\tindices Interface\n+\tdict    Interface\n+}\n+\n+// NewDictionaryArray constructs a dictionary array with the provided indices\n+// and dictionary using the given type.\n+func NewDictionaryArray(typ arrow.DataType, indices, dict Interface) *Dictionary {\n+\ta := &Dictionary{}\n+\ta.array.refCount = 1\n+\tdictdata := NewData(typ, indices.Len(), indices.Data().Buffers(), indices.Data().Children(), indices.NullN(), indices.Data().Offset())\n+\tdictdata.dictionary = dict.Data().(*Data)\n+\tdict.Data().Retain()\n+\n+\tdefer dictdata.Release()\n+\ta.setData(dictdata)\n+\treturn a\n+}\n+\n+// checkIndexBounds returns an error if any value in the provided integer\n+// arraydata is >= the passed upperlimit or < 0. otherwise nil\n+func checkIndexBounds(indices *Data, upperlimit uint64) error {\n\nReview comment:\n       nit: probably will never happen in practice but upperlimit could be awkward here for comparison again int64 in case of overflow (I think I'm OK ignoring it).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-06T05:20:17.557+0000",
                    "updated": "2022-02-06T05:20:17.557+0000",
                    "started": "2022-02-06T05:20:17.556+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "721570",
                    "issueId": "13178284"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178284/worklog/721571",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #12158:\nURL: https://github.com/apache/arrow/pull/12158#discussion_r800128264\n\n\n\n##########\nFile path: go/arrow/array/dictionary.go\n##########\n@@ -0,0 +1,1305 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array\n+\n+import (\n+\t\"errors\"\n+\t\"fmt\"\n+\t\"math\"\n+\t\"sync/atomic\"\n+\t\"unsafe\"\n+\n+\t\"github.com/apache/arrow/go/v7/arrow\"\n+\t\"github.com/apache/arrow/go/v7/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/v7/arrow/decimal128\"\n+\t\"github.com/apache/arrow/go/v7/arrow/float16\"\n+\t\"github.com/apache/arrow/go/v7/arrow/internal/debug\"\n+\t\"github.com/apache/arrow/go/v7/arrow/memory\"\n+\t\"github.com/apache/arrow/go/v7/internal/hashing\"\n+\t\"github.com/goccy/go-json\"\n+)\n+\n+// Dictionary represents the type for dictionary-encoded data with a data\n+// dependent dictionary.\n+//\n+// A dictionary array contains an array of non-negative integers (the \"dictionary\"\n+// indices\") along with a data type containing a \"dictionary\" corresponding to\n+// the distinct values represented in the data.\n+//\n+// For example, the array:\n+//\n+//      [\"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"bar\"]\n+//\n+// with dictionary [\"bar\", \"foo\"], would have the representation of:\n+//\n+//      indices: [1, 0, 1, 0, 1, 0]\n+//      dictionary: [\"bar\", \"foo\"]\n+//\n+// The indices in principle may be any integer type.\n+type Dictionary struct {\n+\tarray\n+\n+\tindices Interface\n+\tdict    Interface\n+}\n+\n+// NewDictionaryArray constructs a dictionary array with the provided indices\n+// and dictionary using the given type.\n+func NewDictionaryArray(typ arrow.DataType, indices, dict Interface) *Dictionary {\n+\ta := &Dictionary{}\n+\ta.array.refCount = 1\n+\tdictdata := NewData(typ, indices.Len(), indices.Data().Buffers(), indices.Data().Children(), indices.NullN(), indices.Data().Offset())\n+\tdictdata.dictionary = dict.Data().(*Data)\n+\tdict.Data().Retain()\n+\n+\tdefer dictdata.Release()\n+\ta.setData(dictdata)\n+\treturn a\n+}\n+\n+// checkIndexBounds returns an error if any value in the provided integer\n+// arraydata is >= the passed upperlimit or < 0. otherwise nil\n+func checkIndexBounds(indices *Data, upperlimit uint64) error {\n+\tif indices.length == 0 {\n+\t\treturn nil\n+\t}\n+\n+\tvar maxval uint64\n+\tswitch indices.dtype.ID() {\n+\tcase arrow.UINT8:\n\nReview comment:\n       I see this is handled below.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-06T05:21:20.049+0000",
                    "updated": "2022-02-06T05:21:20.049+0000",
                    "started": "2022-02-06T05:21:20.049+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "721571",
                    "issueId": "13178284"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178284/worklog/721572",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #12158:\nURL: https://github.com/apache/arrow/pull/12158#discussion_r800128349\n\n\n\n##########\nFile path: go/arrow/array/dictionary.go\n##########\n@@ -0,0 +1,1305 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array\n+\n+import (\n+\t\"errors\"\n+\t\"fmt\"\n+\t\"math\"\n+\t\"sync/atomic\"\n+\t\"unsafe\"\n+\n+\t\"github.com/apache/arrow/go/v7/arrow\"\n+\t\"github.com/apache/arrow/go/v7/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/v7/arrow/decimal128\"\n+\t\"github.com/apache/arrow/go/v7/arrow/float16\"\n+\t\"github.com/apache/arrow/go/v7/arrow/internal/debug\"\n+\t\"github.com/apache/arrow/go/v7/arrow/memory\"\n+\t\"github.com/apache/arrow/go/v7/internal/hashing\"\n+\t\"github.com/goccy/go-json\"\n+)\n+\n+// Dictionary represents the type for dictionary-encoded data with a data\n+// dependent dictionary.\n+//\n+// A dictionary array contains an array of non-negative integers (the \"dictionary\"\n+// indices\") along with a data type containing a \"dictionary\" corresponding to\n+// the distinct values represented in the data.\n+//\n+// For example, the array:\n+//\n+//      [\"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"bar\"]\n+//\n+// with dictionary [\"bar\", \"foo\"], would have the representation of:\n+//\n+//      indices: [1, 0, 1, 0, 1, 0]\n+//      dictionary: [\"bar\", \"foo\"]\n+//\n+// The indices in principle may be any integer type.\n+type Dictionary struct {\n+\tarray\n+\n+\tindices Interface\n+\tdict    Interface\n+}\n+\n+// NewDictionaryArray constructs a dictionary array with the provided indices\n+// and dictionary using the given type.\n+func NewDictionaryArray(typ arrow.DataType, indices, dict Interface) *Dictionary {\n+\ta := &Dictionary{}\n+\ta.array.refCount = 1\n+\tdictdata := NewData(typ, indices.Len(), indices.Data().Buffers(), indices.Data().Children(), indices.NullN(), indices.Data().Offset())\n+\tdictdata.dictionary = dict.Data().(*Data)\n+\tdict.Data().Retain()\n+\n+\tdefer dictdata.Release()\n+\ta.setData(dictdata)\n+\treturn a\n+}\n+\n+// checkIndexBounds returns an error if any value in the provided integer\n+// arraydata is >= the passed upperlimit or < 0. otherwise nil\n+func checkIndexBounds(indices *Data, upperlimit uint64) error {\n+\tif indices.length == 0 {\n+\t\treturn nil\n+\t}\n+\n+\tvar maxval uint64\n+\tswitch indices.dtype.ID() {\n+\tcase arrow.UINT8:\n+\t\tmaxval = math.MaxUint8\n+\tcase arrow.UINT16:\n+\t\tmaxval = math.MaxUint16\n+\tcase arrow.UINT32:\n+\t\tmaxval = math.MaxUint32\n+\tcase arrow.UINT64:\n+\t\tmaxval = math.MaxUint64\n+\t}\n+\tisSigned := maxval == 0\n+\tif !isSigned && upperlimit > maxval {\n+\t\treturn nil\n+\t}\n+\n+\t// TODO(mtopol): lift BitSetRunReader from parquet to utils\n\nReview comment:\n       TODOs with links to JIRAs instead of contributors would be appreciated. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-06T05:22:42.559+0000",
                    "updated": "2022-02-06T05:22:42.559+0000",
                    "started": "2022-02-06T05:22:42.559+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "721572",
                    "issueId": "13178284"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178284/worklog/721573",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #12158:\nURL: https://github.com/apache/arrow/pull/12158#discussion_r800128445\n\n\n\n##########\nFile path: go/arrow/array/dictionary.go\n##########\n@@ -0,0 +1,1305 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array\n+\n+import (\n+\t\"errors\"\n+\t\"fmt\"\n+\t\"math\"\n+\t\"sync/atomic\"\n+\t\"unsafe\"\n+\n+\t\"github.com/apache/arrow/go/v7/arrow\"\n+\t\"github.com/apache/arrow/go/v7/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/v7/arrow/decimal128\"\n+\t\"github.com/apache/arrow/go/v7/arrow/float16\"\n+\t\"github.com/apache/arrow/go/v7/arrow/internal/debug\"\n+\t\"github.com/apache/arrow/go/v7/arrow/memory\"\n+\t\"github.com/apache/arrow/go/v7/internal/hashing\"\n+\t\"github.com/goccy/go-json\"\n+)\n+\n+// Dictionary represents the type for dictionary-encoded data with a data\n+// dependent dictionary.\n+//\n+// A dictionary array contains an array of non-negative integers (the \"dictionary\"\n+// indices\") along with a data type containing a \"dictionary\" corresponding to\n+// the distinct values represented in the data.\n+//\n+// For example, the array:\n+//\n+//      [\"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"bar\"]\n+//\n+// with dictionary [\"bar\", \"foo\"], would have the representation of:\n+//\n+//      indices: [1, 0, 1, 0, 1, 0]\n+//      dictionary: [\"bar\", \"foo\"]\n+//\n+// The indices in principle may be any integer type.\n+type Dictionary struct {\n+\tarray\n+\n+\tindices Interface\n+\tdict    Interface\n+}\n+\n+// NewDictionaryArray constructs a dictionary array with the provided indices\n+// and dictionary using the given type.\n+func NewDictionaryArray(typ arrow.DataType, indices, dict Interface) *Dictionary {\n+\ta := &Dictionary{}\n+\ta.array.refCount = 1\n+\tdictdata := NewData(typ, indices.Len(), indices.Data().Buffers(), indices.Data().Children(), indices.NullN(), indices.Data().Offset())\n+\tdictdata.dictionary = dict.Data().(*Data)\n+\tdict.Data().Retain()\n+\n+\tdefer dictdata.Release()\n+\ta.setData(dictdata)\n+\treturn a\n+}\n+\n+// checkIndexBounds returns an error if any value in the provided integer\n+// arraydata is >= the passed upperlimit or < 0. otherwise nil\n+func checkIndexBounds(indices *Data, upperlimit uint64) error {\n+\tif indices.length == 0 {\n+\t\treturn nil\n+\t}\n+\n+\tvar maxval uint64\n+\tswitch indices.dtype.ID() {\n+\tcase arrow.UINT8:\n+\t\tmaxval = math.MaxUint8\n+\tcase arrow.UINT16:\n+\t\tmaxval = math.MaxUint16\n+\tcase arrow.UINT32:\n+\t\tmaxval = math.MaxUint32\n+\tcase arrow.UINT64:\n+\t\tmaxval = math.MaxUint64\n+\t}\n+\tisSigned := maxval == 0\n+\tif !isSigned && upperlimit > maxval {\n\nReview comment:\n       couldn't this check be applied to signed values as well?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-06T05:24:38.425+0000",
                    "updated": "2022-02-06T05:24:38.425+0000",
                    "started": "2022-02-06T05:24:38.425+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "721573",
                    "issueId": "13178284"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178284/worklog/721574",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #12158:\nURL: https://github.com/apache/arrow/pull/12158#discussion_r800128658\n\n\n\n##########\nFile path: go/arrow/array/dictionary.go\n##########\n@@ -0,0 +1,1305 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array\n+\n+import (\n+\t\"errors\"\n+\t\"fmt\"\n+\t\"math\"\n+\t\"sync/atomic\"\n+\t\"unsafe\"\n+\n+\t\"github.com/apache/arrow/go/v7/arrow\"\n+\t\"github.com/apache/arrow/go/v7/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/v7/arrow/decimal128\"\n+\t\"github.com/apache/arrow/go/v7/arrow/float16\"\n+\t\"github.com/apache/arrow/go/v7/arrow/internal/debug\"\n+\t\"github.com/apache/arrow/go/v7/arrow/memory\"\n+\t\"github.com/apache/arrow/go/v7/internal/hashing\"\n+\t\"github.com/goccy/go-json\"\n+)\n+\n+// Dictionary represents the type for dictionary-encoded data with a data\n+// dependent dictionary.\n+//\n+// A dictionary array contains an array of non-negative integers (the \"dictionary\"\n+// indices\") along with a data type containing a \"dictionary\" corresponding to\n+// the distinct values represented in the data.\n+//\n+// For example, the array:\n+//\n+//      [\"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"bar\"]\n+//\n+// with dictionary [\"bar\", \"foo\"], would have the representation of:\n+//\n+//      indices: [1, 0, 1, 0, 1, 0]\n+//      dictionary: [\"bar\", \"foo\"]\n+//\n+// The indices in principle may be any integer type.\n+type Dictionary struct {\n+\tarray\n+\n+\tindices Interface\n+\tdict    Interface\n+}\n+\n+// NewDictionaryArray constructs a dictionary array with the provided indices\n+// and dictionary using the given type.\n+func NewDictionaryArray(typ arrow.DataType, indices, dict Interface) *Dictionary {\n+\ta := &Dictionary{}\n+\ta.array.refCount = 1\n+\tdictdata := NewData(typ, indices.Len(), indices.Data().Buffers(), indices.Data().Children(), indices.NullN(), indices.Data().Offset())\n+\tdictdata.dictionary = dict.Data().(*Data)\n+\tdict.Data().Retain()\n+\n+\tdefer dictdata.Release()\n+\ta.setData(dictdata)\n+\treturn a\n+}\n+\n+// checkIndexBounds returns an error if any value in the provided integer\n+// arraydata is >= the passed upperlimit or < 0. otherwise nil\n+func checkIndexBounds(indices *Data, upperlimit uint64) error {\n+\tif indices.length == 0 {\n+\t\treturn nil\n+\t}\n+\n+\tvar maxval uint64\n+\tswitch indices.dtype.ID() {\n+\tcase arrow.UINT8:\n+\t\tmaxval = math.MaxUint8\n+\tcase arrow.UINT16:\n+\t\tmaxval = math.MaxUint16\n+\tcase arrow.UINT32:\n+\t\tmaxval = math.MaxUint32\n+\tcase arrow.UINT64:\n+\t\tmaxval = math.MaxUint64\n+\t}\n+\tisSigned := maxval == 0\n+\tif !isSigned && upperlimit > maxval {\n+\t\treturn nil\n+\t}\n+\n+\t// TODO(mtopol): lift BitSetRunReader from parquet to utils\n+\t// and use it here for performance improvement.\n+\tvar nullbitmap []byte\n+\tif indices.buffers[0] != nil {\n+\t\tnullbitmap = indices.buffers[0].Bytes()\n+\t}\n+\n+\tvar outOfBounds func(i int) error\n+\tswitch indices.dtype.ID() {\n+\tcase arrow.INT8:\n+\t\tdata := arrow.Int8Traits.CastFromBytes(indices.buffers[1].Bytes())\n+\t\toutOfBounds = func(i int) error {\n+\t\t\tif data[i] < 0 || data[i] >= int8(upperlimit) {\n+\t\t\t\treturn fmt.Errorf(\"index %d out of bounds\", data[i])\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t}\n+\tcase arrow.UINT8:\n+\t\tdata := arrow.Uint8Traits.CastFromBytes(indices.buffers[1].Bytes())\n+\t\toutOfBounds = func(i int) error {\n+\t\t\tif data[i] >= uint8(upperlimit) {\n+\t\t\t\treturn fmt.Errorf(\"index %d out of bounds\", data[i])\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t}\n+\tcase arrow.INT16:\n+\t\tdata := arrow.Int16Traits.CastFromBytes(indices.buffers[1].Bytes())\n+\t\toutOfBounds = func(i int) error {\n+\t\t\tif data[i] < 0 || data[i] >= int16(upperlimit) {\n\nReview comment:\n       not sure if you care about perf here and what the SIMD version story is in Go but in C++ the compiler can use SIMD to take the min and max over the entire data array first.  Then checking the bounds of that min and max against 0 and upper bound.  (Not sure if the function to do this ended up in the parquet implementation native code).  The down-side is the error message has to be less precise (you can't can provide index without reiterating over the array but most arrays will be valid anyways).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-06T05:28:51.111+0000",
                    "updated": "2022-02-06T05:28:51.111+0000",
                    "started": "2022-02-06T05:28:51.110+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "721574",
                    "issueId": "13178284"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178284/worklog/721576",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #12158:\nURL: https://github.com/apache/arrow/pull/12158#discussion_r800128811\n\n\n\n##########\nFile path: go/arrow/array/dictionary.go\n##########\n@@ -0,0 +1,1305 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array\n+\n+import (\n+\t\"errors\"\n+\t\"fmt\"\n+\t\"math\"\n+\t\"sync/atomic\"\n+\t\"unsafe\"\n+\n+\t\"github.com/apache/arrow/go/v7/arrow\"\n+\t\"github.com/apache/arrow/go/v7/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/v7/arrow/decimal128\"\n+\t\"github.com/apache/arrow/go/v7/arrow/float16\"\n+\t\"github.com/apache/arrow/go/v7/arrow/internal/debug\"\n+\t\"github.com/apache/arrow/go/v7/arrow/memory\"\n+\t\"github.com/apache/arrow/go/v7/internal/hashing\"\n+\t\"github.com/goccy/go-json\"\n+)\n+\n+// Dictionary represents the type for dictionary-encoded data with a data\n+// dependent dictionary.\n+//\n+// A dictionary array contains an array of non-negative integers (the \"dictionary\"\n+// indices\") along with a data type containing a \"dictionary\" corresponding to\n+// the distinct values represented in the data.\n+//\n+// For example, the array:\n+//\n+//      [\"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"bar\"]\n+//\n+// with dictionary [\"bar\", \"foo\"], would have the representation of:\n+//\n+//      indices: [1, 0, 1, 0, 1, 0]\n+//      dictionary: [\"bar\", \"foo\"]\n+//\n+// The indices in principle may be any integer type.\n+type Dictionary struct {\n+\tarray\n+\n+\tindices Interface\n+\tdict    Interface\n+}\n+\n+// NewDictionaryArray constructs a dictionary array with the provided indices\n+// and dictionary using the given type.\n+func NewDictionaryArray(typ arrow.DataType, indices, dict Interface) *Dictionary {\n+\ta := &Dictionary{}\n+\ta.array.refCount = 1\n+\tdictdata := NewData(typ, indices.Len(), indices.Data().Buffers(), indices.Data().Children(), indices.NullN(), indices.Data().Offset())\n+\tdictdata.dictionary = dict.Data().(*Data)\n+\tdict.Data().Retain()\n+\n+\tdefer dictdata.Release()\n+\ta.setData(dictdata)\n+\treturn a\n+}\n+\n+// checkIndexBounds returns an error if any value in the provided integer\n+// arraydata is >= the passed upperlimit or < 0. otherwise nil\n+func checkIndexBounds(indices *Data, upperlimit uint64) error {\n+\tif indices.length == 0 {\n+\t\treturn nil\n+\t}\n+\n+\tvar maxval uint64\n+\tswitch indices.dtype.ID() {\n+\tcase arrow.UINT8:\n+\t\tmaxval = math.MaxUint8\n+\tcase arrow.UINT16:\n+\t\tmaxval = math.MaxUint16\n+\tcase arrow.UINT32:\n+\t\tmaxval = math.MaxUint32\n+\tcase arrow.UINT64:\n+\t\tmaxval = math.MaxUint64\n+\t}\n+\tisSigned := maxval == 0\n+\tif !isSigned && upperlimit > maxval {\n+\t\treturn nil\n+\t}\n+\n+\t// TODO(mtopol): lift BitSetRunReader from parquet to utils\n+\t// and use it here for performance improvement.\n+\tvar nullbitmap []byte\n+\tif indices.buffers[0] != nil {\n+\t\tnullbitmap = indices.buffers[0].Bytes()\n+\t}\n+\n+\tvar outOfBounds func(i int) error\n+\tswitch indices.dtype.ID() {\n+\tcase arrow.INT8:\n+\t\tdata := arrow.Int8Traits.CastFromBytes(indices.buffers[1].Bytes())\n+\t\toutOfBounds = func(i int) error {\n+\t\t\tif data[i] < 0 || data[i] >= int8(upperlimit) {\n+\t\t\t\treturn fmt.Errorf(\"index %d out of bounds\", data[i])\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t}\n+\tcase arrow.UINT8:\n+\t\tdata := arrow.Uint8Traits.CastFromBytes(indices.buffers[1].Bytes())\n+\t\toutOfBounds = func(i int) error {\n+\t\t\tif data[i] >= uint8(upperlimit) {\n+\t\t\t\treturn fmt.Errorf(\"index %d out of bounds\", data[i])\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t}\n+\tcase arrow.INT16:\n+\t\tdata := arrow.Int16Traits.CastFromBytes(indices.buffers[1].Bytes())\n+\t\toutOfBounds = func(i int) error {\n+\t\t\tif data[i] < 0 || data[i] >= int16(upperlimit) {\n+\t\t\t\treturn fmt.Errorf(\"index %d out of bounds\", data[i])\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t}\n+\tcase arrow.UINT16:\n+\t\tdata := arrow.Uint16Traits.CastFromBytes(indices.buffers[1].Bytes())\n+\t\toutOfBounds = func(i int) error {\n+\t\t\tif data[i] >= uint16(upperlimit) {\n+\t\t\t\treturn fmt.Errorf(\"index %d out of bounds\", data[i])\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t}\n+\tcase arrow.INT32:\n+\t\tdata := arrow.Int32Traits.CastFromBytes(indices.buffers[1].Bytes())\n+\t\toutOfBounds = func(i int) error {\n+\t\t\tif data[i] < 0 || data[i] >= int32(upperlimit) {\n+\t\t\t\treturn fmt.Errorf(\"index %d out of bounds\", data[i])\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t}\n+\tcase arrow.UINT32:\n+\t\tdata := arrow.Uint32Traits.CastFromBytes(indices.buffers[1].Bytes())\n+\t\toutOfBounds = func(i int) error {\n+\t\t\tif data[i] >= uint32(upperlimit) {\n+\t\t\t\treturn fmt.Errorf(\"index %d out of bounds\", data[i])\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t}\n+\tcase arrow.INT64:\n+\t\tdata := arrow.Int64Traits.CastFromBytes(indices.buffers[1].Bytes())\n+\t\toutOfBounds = func(i int) error {\n+\t\t\tif data[i] < 0 || data[i] >= int64(upperlimit) {\n+\t\t\t\treturn fmt.Errorf(\"index %d out of bounds\", data[i])\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t}\n+\tcase arrow.UINT64:\n+\t\tdata := arrow.Uint64Traits.CastFromBytes(indices.buffers[1].Bytes())\n+\t\toutOfBounds = func(i int) error {\n+\t\t\tif data[i] >= upperlimit {\n+\t\t\t\treturn fmt.Errorf(\"index %d out of bounds\", data[i])\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t}\n+\tdefault:\n+\t\treturn fmt.Errorf(\"invalid type for bounds checking: %T\", indices.dtype)\n+\t}\n+\n+\tfor i := 0; i < indices.length; i++ {\n+\t\tif len(nullbitmap) > 0 && bitutil.BitIsNotSet(nullbitmap, i+indices.offset) {\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tif err := outOfBounds(i + indices.offset); err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t}\n+\treturn nil\n+}\n+\n+// NewValidatedDictionaryArray constructs a dictionary array from the provided indices\n+// and dictionary arrays, while also performing validation checks to ensure correctness\n+// such as bounds checking at are usually skipped for performance.\n+func NewValidatedDictionaryArray(typ *arrow.DictionaryType, indices, dict Interface) (*Dictionary, error) {\n+\tif indices.DataType().ID() != typ.IndexType.ID() {\n+\t\treturn nil, fmt.Errorf(\"dictionary type index (%T) does not match indices array type (%T)\", typ.IndexType, indices.DataType())\n+\t}\n+\n+\tif !arrow.TypeEqual(typ.ValueType, dict.DataType()) {\n+\t\treturn nil, fmt.Errorf(\"dictionary value type (%T) does not match dict array type (%T)\", typ.ValueType, dict.DataType())\n+\t}\n+\n+\tif err := checkIndexBounds(indices.Data().(*Data), uint64(dict.Len())); err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\treturn NewDictionaryArray(typ, indices, dict), nil\n+}\n+\n+// NewDictionaryData creates a strongly typed Dictionary array from\n+// an ArrayData object with a datatype of arrow.Dictionary and a dictionary\n+func NewDictionaryData(data arrow.ArrayData) *Dictionary {\n+\ta := &Dictionary{}\n+\ta.refCount = 1\n+\ta.setData(data.(*Data))\n+\treturn a\n+}\n+\n+func (d *Dictionary) Retain() {\n+\tatomic.AddInt64(&d.refCount, 1)\n+}\n+\n+func (d *Dictionary) Release() {\n+\tdebug.Assert(atomic.LoadInt64(&d.refCount) > 0, \"too many releases\")\n+\n+\tif atomic.AddInt64(&d.refCount, -1) == 0 {\n+\t\td.data.Release()\n+\t\td.data, d.nullBitmapBytes = nil, nil\n+\t\td.indices.Release()\n+\t\td.indices = nil\n+\t\tif d.dict != nil {\n+\t\t\td.dict.Release()\n+\t\t\td.dict = nil\n+\t\t}\n+\t}\n+}\n+\n+func (d *Dictionary) setData(data *Data) {\n+\td.array.setData(data)\n+\n+\tif data.dictionary == nil {\n+\t\tpanic(\"arrow/array: no dictionary set in Data for Dictionary array\")\n+\t}\n+\n+\tdictType := data.dtype.(*arrow.DictionaryType)\n+\tdebug.Assert(arrow.TypeEqual(dictType.ValueType, data.dictionary.DataType()), \"mismatched dictionary value types\")\n+\n+\tindexData := NewData(dictType.IndexType, data.length, data.buffers, data.childData, data.nulls, data.offset)\n+\tdefer indexData.Release()\n+\td.indices = MakeFromData(indexData)\n+}\n+\n+// Dictionary returns the values array that makes up the dictionary for this\n+// array.\n+func (d *Dictionary) Dictionary() Interface {\n+\tif d.dict == nil {\n+\t\td.dict = MakeFromData(d.data.dictionary)\n+\t}\n+\treturn d.dict\n+}\n+\n+// Indices returns the underlying array of indices as it's own array\n+func (d *Dictionary) Indices() Interface {\n+\treturn d.indices\n+}\n+\n+// CanCompareIndices returns true if the dictionary arrays can be compared\n+// without having to unify the dictionaries themselves first.\n\nReview comment:\n       might want to clarify that index types also need to be equal\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-06T05:31:06.168+0000",
                    "updated": "2022-02-06T05:31:06.168+0000",
                    "started": "2022-02-06T05:31:06.167+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "721576",
                    "issueId": "13178284"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178284/worklog/721577",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #12158:\nURL: https://github.com/apache/arrow/pull/12158#discussion_r800129021\n\n\n\n##########\nFile path: go/arrow/array/dictionary.go\n##########\n@@ -0,0 +1,1305 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array\n+\n+import (\n+\t\"errors\"\n+\t\"fmt\"\n+\t\"math\"\n+\t\"sync/atomic\"\n+\t\"unsafe\"\n+\n+\t\"github.com/apache/arrow/go/v7/arrow\"\n+\t\"github.com/apache/arrow/go/v7/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/v7/arrow/decimal128\"\n+\t\"github.com/apache/arrow/go/v7/arrow/float16\"\n+\t\"github.com/apache/arrow/go/v7/arrow/internal/debug\"\n+\t\"github.com/apache/arrow/go/v7/arrow/memory\"\n+\t\"github.com/apache/arrow/go/v7/internal/hashing\"\n+\t\"github.com/goccy/go-json\"\n+)\n+\n+// Dictionary represents the type for dictionary-encoded data with a data\n+// dependent dictionary.\n+//\n+// A dictionary array contains an array of non-negative integers (the \"dictionary\"\n+// indices\") along with a data type containing a \"dictionary\" corresponding to\n+// the distinct values represented in the data.\n+//\n+// For example, the array:\n+//\n+//      [\"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"bar\"]\n+//\n+// with dictionary [\"bar\", \"foo\"], would have the representation of:\n+//\n+//      indices: [1, 0, 1, 0, 1, 0]\n+//      dictionary: [\"bar\", \"foo\"]\n+//\n+// The indices in principle may be any integer type.\n+type Dictionary struct {\n+\tarray\n+\n+\tindices Interface\n+\tdict    Interface\n+}\n+\n+// NewDictionaryArray constructs a dictionary array with the provided indices\n+// and dictionary using the given type.\n+func NewDictionaryArray(typ arrow.DataType, indices, dict Interface) *Dictionary {\n+\ta := &Dictionary{}\n+\ta.array.refCount = 1\n+\tdictdata := NewData(typ, indices.Len(), indices.Data().Buffers(), indices.Data().Children(), indices.NullN(), indices.Data().Offset())\n+\tdictdata.dictionary = dict.Data().(*Data)\n+\tdict.Data().Retain()\n+\n+\tdefer dictdata.Release()\n+\ta.setData(dictdata)\n+\treturn a\n+}\n+\n+// checkIndexBounds returns an error if any value in the provided integer\n+// arraydata is >= the passed upperlimit or < 0. otherwise nil\n+func checkIndexBounds(indices *Data, upperlimit uint64) error {\n+\tif indices.length == 0 {\n+\t\treturn nil\n+\t}\n+\n+\tvar maxval uint64\n+\tswitch indices.dtype.ID() {\n+\tcase arrow.UINT8:\n+\t\tmaxval = math.MaxUint8\n+\tcase arrow.UINT16:\n+\t\tmaxval = math.MaxUint16\n+\tcase arrow.UINT32:\n+\t\tmaxval = math.MaxUint32\n+\tcase arrow.UINT64:\n+\t\tmaxval = math.MaxUint64\n+\t}\n+\tisSigned := maxval == 0\n+\tif !isSigned && upperlimit > maxval {\n+\t\treturn nil\n+\t}\n+\n+\t// TODO(mtopol): lift BitSetRunReader from parquet to utils\n+\t// and use it here for performance improvement.\n+\tvar nullbitmap []byte\n+\tif indices.buffers[0] != nil {\n+\t\tnullbitmap = indices.buffers[0].Bytes()\n+\t}\n+\n+\tvar outOfBounds func(i int) error\n+\tswitch indices.dtype.ID() {\n+\tcase arrow.INT8:\n+\t\tdata := arrow.Int8Traits.CastFromBytes(indices.buffers[1].Bytes())\n+\t\toutOfBounds = func(i int) error {\n+\t\t\tif data[i] < 0 || data[i] >= int8(upperlimit) {\n+\t\t\t\treturn fmt.Errorf(\"index %d out of bounds\", data[i])\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t}\n+\tcase arrow.UINT8:\n+\t\tdata := arrow.Uint8Traits.CastFromBytes(indices.buffers[1].Bytes())\n+\t\toutOfBounds = func(i int) error {\n+\t\t\tif data[i] >= uint8(upperlimit) {\n+\t\t\t\treturn fmt.Errorf(\"index %d out of bounds\", data[i])\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t}\n+\tcase arrow.INT16:\n+\t\tdata := arrow.Int16Traits.CastFromBytes(indices.buffers[1].Bytes())\n+\t\toutOfBounds = func(i int) error {\n+\t\t\tif data[i] < 0 || data[i] >= int16(upperlimit) {\n+\t\t\t\treturn fmt.Errorf(\"index %d out of bounds\", data[i])\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t}\n+\tcase arrow.UINT16:\n+\t\tdata := arrow.Uint16Traits.CastFromBytes(indices.buffers[1].Bytes())\n+\t\toutOfBounds = func(i int) error {\n+\t\t\tif data[i] >= uint16(upperlimit) {\n+\t\t\t\treturn fmt.Errorf(\"index %d out of bounds\", data[i])\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t}\n+\tcase arrow.INT32:\n+\t\tdata := arrow.Int32Traits.CastFromBytes(indices.buffers[1].Bytes())\n+\t\toutOfBounds = func(i int) error {\n+\t\t\tif data[i] < 0 || data[i] >= int32(upperlimit) {\n+\t\t\t\treturn fmt.Errorf(\"index %d out of bounds\", data[i])\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t}\n+\tcase arrow.UINT32:\n+\t\tdata := arrow.Uint32Traits.CastFromBytes(indices.buffers[1].Bytes())\n+\t\toutOfBounds = func(i int) error {\n+\t\t\tif data[i] >= uint32(upperlimit) {\n+\t\t\t\treturn fmt.Errorf(\"index %d out of bounds\", data[i])\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t}\n+\tcase arrow.INT64:\n+\t\tdata := arrow.Int64Traits.CastFromBytes(indices.buffers[1].Bytes())\n+\t\toutOfBounds = func(i int) error {\n+\t\t\tif data[i] < 0 || data[i] >= int64(upperlimit) {\n+\t\t\t\treturn fmt.Errorf(\"index %d out of bounds\", data[i])\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t}\n+\tcase arrow.UINT64:\n+\t\tdata := arrow.Uint64Traits.CastFromBytes(indices.buffers[1].Bytes())\n+\t\toutOfBounds = func(i int) error {\n+\t\t\tif data[i] >= upperlimit {\n+\t\t\t\treturn fmt.Errorf(\"index %d out of bounds\", data[i])\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t}\n+\tdefault:\n+\t\treturn fmt.Errorf(\"invalid type for bounds checking: %T\", indices.dtype)\n+\t}\n+\n+\tfor i := 0; i < indices.length; i++ {\n+\t\tif len(nullbitmap) > 0 && bitutil.BitIsNotSet(nullbitmap, i+indices.offset) {\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tif err := outOfBounds(i + indices.offset); err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t}\n+\treturn nil\n+}\n+\n+// NewValidatedDictionaryArray constructs a dictionary array from the provided indices\n+// and dictionary arrays, while also performing validation checks to ensure correctness\n+// such as bounds checking at are usually skipped for performance.\n+func NewValidatedDictionaryArray(typ *arrow.DictionaryType, indices, dict Interface) (*Dictionary, error) {\n+\tif indices.DataType().ID() != typ.IndexType.ID() {\n+\t\treturn nil, fmt.Errorf(\"dictionary type index (%T) does not match indices array type (%T)\", typ.IndexType, indices.DataType())\n+\t}\n+\n+\tif !arrow.TypeEqual(typ.ValueType, dict.DataType()) {\n+\t\treturn nil, fmt.Errorf(\"dictionary value type (%T) does not match dict array type (%T)\", typ.ValueType, dict.DataType())\n+\t}\n+\n+\tif err := checkIndexBounds(indices.Data().(*Data), uint64(dict.Len())); err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\treturn NewDictionaryArray(typ, indices, dict), nil\n+}\n+\n+// NewDictionaryData creates a strongly typed Dictionary array from\n+// an ArrayData object with a datatype of arrow.Dictionary and a dictionary\n+func NewDictionaryData(data arrow.ArrayData) *Dictionary {\n+\ta := &Dictionary{}\n+\ta.refCount = 1\n+\ta.setData(data.(*Data))\n+\treturn a\n+}\n+\n+func (d *Dictionary) Retain() {\n+\tatomic.AddInt64(&d.refCount, 1)\n+}\n+\n+func (d *Dictionary) Release() {\n+\tdebug.Assert(atomic.LoadInt64(&d.refCount) > 0, \"too many releases\")\n+\n+\tif atomic.AddInt64(&d.refCount, -1) == 0 {\n+\t\td.data.Release()\n+\t\td.data, d.nullBitmapBytes = nil, nil\n+\t\td.indices.Release()\n+\t\td.indices = nil\n+\t\tif d.dict != nil {\n+\t\t\td.dict.Release()\n+\t\t\td.dict = nil\n+\t\t}\n+\t}\n+}\n+\n+func (d *Dictionary) setData(data *Data) {\n+\td.array.setData(data)\n+\n+\tif data.dictionary == nil {\n+\t\tpanic(\"arrow/array: no dictionary set in Data for Dictionary array\")\n+\t}\n+\n+\tdictType := data.dtype.(*arrow.DictionaryType)\n+\tdebug.Assert(arrow.TypeEqual(dictType.ValueType, data.dictionary.DataType()), \"mismatched dictionary value types\")\n+\n+\tindexData := NewData(dictType.IndexType, data.length, data.buffers, data.childData, data.nulls, data.offset)\n+\tdefer indexData.Release()\n+\td.indices = MakeFromData(indexData)\n+}\n+\n+// Dictionary returns the values array that makes up the dictionary for this\n+// array.\n+func (d *Dictionary) Dictionary() Interface {\n+\tif d.dict == nil {\n+\t\td.dict = MakeFromData(d.data.dictionary)\n+\t}\n+\treturn d.dict\n+}\n+\n+// Indices returns the underlying array of indices as it's own array\n+func (d *Dictionary) Indices() Interface {\n+\treturn d.indices\n+}\n+\n+// CanCompareIndices returns true if the dictionary arrays can be compared\n+// without having to unify the dictionaries themselves first.\n+func (d *Dictionary) CanCompareIndices(other *Dictionary) bool {\n+\tif !arrow.TypeEqual(d.indices.DataType(), other.indices.DataType()) {\n+\t\treturn false\n+\t}\n+\n+\tminlen := int64(min(d.data.dictionary.length, other.data.dictionary.length))\n+\treturn ArraySliceEqual(d.Dictionary(), 0, minlen, other.Dictionary(), 0, minlen)\n+}\n+\n+func (d *Dictionary) String() string {\n+\treturn fmt.Sprintf(\"{ dictionary: %v\\n  indices: %v }\", d.Dictionary(), d.Indices())\n+}\n+\n+// GetValueIndex returns the dictionary index for the value at index i of the array.\n+// The actual value can be retrieved by using d.Dictionary().(valuetype).Value(d.GetValueIndex(i))\n+func (d *Dictionary) GetValueIndex(i int) int {\n+\tindiceData := d.data.buffers[1].Bytes()\n+\t// we know the value is non-negative per the spec, so\n+\t// we can use the unsigned value regardless.\n+\tswitch d.indices.DataType().ID() {\n+\tcase arrow.UINT8, arrow.INT8:\n+\t\treturn int(uint8(indiceData[d.data.offset+i]))\n+\tcase arrow.UINT16, arrow.INT16:\n+\t\treturn int(arrow.Uint16Traits.CastFromBytes(indiceData)[d.data.offset+i])\n+\tcase arrow.UINT32, arrow.INT32:\n+\t\treturn int(arrow.Uint32Traits.CastFromBytes(indiceData)[d.data.offset+i])\n+\tcase arrow.UINT64, arrow.INT64:\n+\t\treturn int(arrow.Uint64Traits.CastFromBytes(indiceData)[d.data.offset+i])\n\nReview comment:\n       unlikely to hit this in practice but doesn't this potentially truncate the index?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-06T05:33:28.902+0000",
                    "updated": "2022-02-06T05:33:28.902+0000",
                    "started": "2022-02-06T05:33:28.902+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "721577",
                    "issueId": "13178284"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178284/worklog/721578",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on a change in pull request #12158:\nURL: https://github.com/apache/arrow/pull/12158#discussion_r800129147\n\n\n\n##########\nFile path: go/arrow/array/dictionary.go\n##########\n@@ -0,0 +1,1305 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package array\n+\n+import (\n+\t\"errors\"\n+\t\"fmt\"\n+\t\"math\"\n+\t\"sync/atomic\"\n+\t\"unsafe\"\n+\n+\t\"github.com/apache/arrow/go/v7/arrow\"\n+\t\"github.com/apache/arrow/go/v7/arrow/bitutil\"\n+\t\"github.com/apache/arrow/go/v7/arrow/decimal128\"\n+\t\"github.com/apache/arrow/go/v7/arrow/float16\"\n+\t\"github.com/apache/arrow/go/v7/arrow/internal/debug\"\n+\t\"github.com/apache/arrow/go/v7/arrow/memory\"\n+\t\"github.com/apache/arrow/go/v7/internal/hashing\"\n+\t\"github.com/goccy/go-json\"\n+)\n+\n+// Dictionary represents the type for dictionary-encoded data with a data\n+// dependent dictionary.\n+//\n+// A dictionary array contains an array of non-negative integers (the \"dictionary\"\n+// indices\") along with a data type containing a \"dictionary\" corresponding to\n+// the distinct values represented in the data.\n+//\n+// For example, the array:\n+//\n+//      [\"foo\", \"bar\", \"foo\", \"bar\", \"foo\", \"bar\"]\n+//\n+// with dictionary [\"bar\", \"foo\"], would have the representation of:\n+//\n+//      indices: [1, 0, 1, 0, 1, 0]\n+//      dictionary: [\"bar\", \"foo\"]\n+//\n+// The indices in principle may be any integer type.\n+type Dictionary struct {\n+\tarray\n+\n+\tindices Interface\n+\tdict    Interface\n+}\n+\n+// NewDictionaryArray constructs a dictionary array with the provided indices\n+// and dictionary using the given type.\n+func NewDictionaryArray(typ arrow.DataType, indices, dict Interface) *Dictionary {\n+\ta := &Dictionary{}\n+\ta.array.refCount = 1\n+\tdictdata := NewData(typ, indices.Len(), indices.Data().Buffers(), indices.Data().Children(), indices.NullN(), indices.Data().Offset())\n+\tdictdata.dictionary = dict.Data().(*Data)\n+\tdict.Data().Retain()\n+\n+\tdefer dictdata.Release()\n+\ta.setData(dictdata)\n+\treturn a\n+}\n+\n+// checkIndexBounds returns an error if any value in the provided integer\n+// arraydata is >= the passed upperlimit or < 0. otherwise nil\n+func checkIndexBounds(indices *Data, upperlimit uint64) error {\n+\tif indices.length == 0 {\n+\t\treturn nil\n+\t}\n+\n+\tvar maxval uint64\n+\tswitch indices.dtype.ID() {\n+\tcase arrow.UINT8:\n+\t\tmaxval = math.MaxUint8\n+\tcase arrow.UINT16:\n+\t\tmaxval = math.MaxUint16\n+\tcase arrow.UINT32:\n+\t\tmaxval = math.MaxUint32\n+\tcase arrow.UINT64:\n+\t\tmaxval = math.MaxUint64\n+\t}\n+\tisSigned := maxval == 0\n+\tif !isSigned && upperlimit > maxval {\n+\t\treturn nil\n+\t}\n+\n+\t// TODO(mtopol): lift BitSetRunReader from parquet to utils\n+\t// and use it here for performance improvement.\n+\tvar nullbitmap []byte\n+\tif indices.buffers[0] != nil {\n+\t\tnullbitmap = indices.buffers[0].Bytes()\n+\t}\n+\n+\tvar outOfBounds func(i int) error\n+\tswitch indices.dtype.ID() {\n+\tcase arrow.INT8:\n+\t\tdata := arrow.Int8Traits.CastFromBytes(indices.buffers[1].Bytes())\n+\t\toutOfBounds = func(i int) error {\n+\t\t\tif data[i] < 0 || data[i] >= int8(upperlimit) {\n+\t\t\t\treturn fmt.Errorf(\"index %d out of bounds\", data[i])\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t}\n+\tcase arrow.UINT8:\n+\t\tdata := arrow.Uint8Traits.CastFromBytes(indices.buffers[1].Bytes())\n+\t\toutOfBounds = func(i int) error {\n+\t\t\tif data[i] >= uint8(upperlimit) {\n+\t\t\t\treturn fmt.Errorf(\"index %d out of bounds\", data[i])\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t}\n+\tcase arrow.INT16:\n+\t\tdata := arrow.Int16Traits.CastFromBytes(indices.buffers[1].Bytes())\n+\t\toutOfBounds = func(i int) error {\n+\t\t\tif data[i] < 0 || data[i] >= int16(upperlimit) {\n+\t\t\t\treturn fmt.Errorf(\"index %d out of bounds\", data[i])\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t}\n+\tcase arrow.UINT16:\n+\t\tdata := arrow.Uint16Traits.CastFromBytes(indices.buffers[1].Bytes())\n+\t\toutOfBounds = func(i int) error {\n+\t\t\tif data[i] >= uint16(upperlimit) {\n+\t\t\t\treturn fmt.Errorf(\"index %d out of bounds\", data[i])\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t}\n+\tcase arrow.INT32:\n+\t\tdata := arrow.Int32Traits.CastFromBytes(indices.buffers[1].Bytes())\n+\t\toutOfBounds = func(i int) error {\n+\t\t\tif data[i] < 0 || data[i] >= int32(upperlimit) {\n+\t\t\t\treturn fmt.Errorf(\"index %d out of bounds\", data[i])\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t}\n+\tcase arrow.UINT32:\n+\t\tdata := arrow.Uint32Traits.CastFromBytes(indices.buffers[1].Bytes())\n+\t\toutOfBounds = func(i int) error {\n+\t\t\tif data[i] >= uint32(upperlimit) {\n+\t\t\t\treturn fmt.Errorf(\"index %d out of bounds\", data[i])\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t}\n+\tcase arrow.INT64:\n+\t\tdata := arrow.Int64Traits.CastFromBytes(indices.buffers[1].Bytes())\n+\t\toutOfBounds = func(i int) error {\n+\t\t\tif data[i] < 0 || data[i] >= int64(upperlimit) {\n+\t\t\t\treturn fmt.Errorf(\"index %d out of bounds\", data[i])\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t}\n+\tcase arrow.UINT64:\n+\t\tdata := arrow.Uint64Traits.CastFromBytes(indices.buffers[1].Bytes())\n+\t\toutOfBounds = func(i int) error {\n+\t\t\tif data[i] >= upperlimit {\n+\t\t\t\treturn fmt.Errorf(\"index %d out of bounds\", data[i])\n+\t\t\t}\n+\t\t\treturn nil\n+\t\t}\n+\tdefault:\n+\t\treturn fmt.Errorf(\"invalid type for bounds checking: %T\", indices.dtype)\n+\t}\n+\n+\tfor i := 0; i < indices.length; i++ {\n+\t\tif len(nullbitmap) > 0 && bitutil.BitIsNotSet(nullbitmap, i+indices.offset) {\n+\t\t\tcontinue\n+\t\t}\n+\n+\t\tif err := outOfBounds(i + indices.offset); err != nil {\n+\t\t\treturn err\n+\t\t}\n+\t}\n+\treturn nil\n+}\n+\n+// NewValidatedDictionaryArray constructs a dictionary array from the provided indices\n+// and dictionary arrays, while also performing validation checks to ensure correctness\n+// such as bounds checking at are usually skipped for performance.\n+func NewValidatedDictionaryArray(typ *arrow.DictionaryType, indices, dict Interface) (*Dictionary, error) {\n+\tif indices.DataType().ID() != typ.IndexType.ID() {\n+\t\treturn nil, fmt.Errorf(\"dictionary type index (%T) does not match indices array type (%T)\", typ.IndexType, indices.DataType())\n+\t}\n+\n+\tif !arrow.TypeEqual(typ.ValueType, dict.DataType()) {\n+\t\treturn nil, fmt.Errorf(\"dictionary value type (%T) does not match dict array type (%T)\", typ.ValueType, dict.DataType())\n+\t}\n+\n+\tif err := checkIndexBounds(indices.Data().(*Data), uint64(dict.Len())); err != nil {\n+\t\treturn nil, err\n+\t}\n+\n+\treturn NewDictionaryArray(typ, indices, dict), nil\n+}\n+\n+// NewDictionaryData creates a strongly typed Dictionary array from\n+// an ArrayData object with a datatype of arrow.Dictionary and a dictionary\n+func NewDictionaryData(data arrow.ArrayData) *Dictionary {\n+\ta := &Dictionary{}\n+\ta.refCount = 1\n+\ta.setData(data.(*Data))\n+\treturn a\n+}\n+\n+func (d *Dictionary) Retain() {\n+\tatomic.AddInt64(&d.refCount, 1)\n+}\n+\n+func (d *Dictionary) Release() {\n+\tdebug.Assert(atomic.LoadInt64(&d.refCount) > 0, \"too many releases\")\n+\n+\tif atomic.AddInt64(&d.refCount, -1) == 0 {\n+\t\td.data.Release()\n+\t\td.data, d.nullBitmapBytes = nil, nil\n+\t\td.indices.Release()\n+\t\td.indices = nil\n+\t\tif d.dict != nil {\n+\t\t\td.dict.Release()\n+\t\t\td.dict = nil\n+\t\t}\n+\t}\n+}\n+\n+func (d *Dictionary) setData(data *Data) {\n+\td.array.setData(data)\n+\n+\tif data.dictionary == nil {\n+\t\tpanic(\"arrow/array: no dictionary set in Data for Dictionary array\")\n+\t}\n+\n+\tdictType := data.dtype.(*arrow.DictionaryType)\n+\tdebug.Assert(arrow.TypeEqual(dictType.ValueType, data.dictionary.DataType()), \"mismatched dictionary value types\")\n+\n+\tindexData := NewData(dictType.IndexType, data.length, data.buffers, data.childData, data.nulls, data.offset)\n+\tdefer indexData.Release()\n+\td.indices = MakeFromData(indexData)\n+}\n+\n+// Dictionary returns the values array that makes up the dictionary for this\n+// array.\n+func (d *Dictionary) Dictionary() Interface {\n+\tif d.dict == nil {\n+\t\td.dict = MakeFromData(d.data.dictionary)\n+\t}\n+\treturn d.dict\n+}\n+\n+// Indices returns the underlying array of indices as it's own array\n+func (d *Dictionary) Indices() Interface {\n+\treturn d.indices\n+}\n+\n+// CanCompareIndices returns true if the dictionary arrays can be compared\n+// without having to unify the dictionaries themselves first.\n+func (d *Dictionary) CanCompareIndices(other *Dictionary) bool {\n+\tif !arrow.TypeEqual(d.indices.DataType(), other.indices.DataType()) {\n+\t\treturn false\n+\t}\n+\n+\tminlen := int64(min(d.data.dictionary.length, other.data.dictionary.length))\n+\treturn ArraySliceEqual(d.Dictionary(), 0, minlen, other.Dictionary(), 0, minlen)\n+}\n+\n+func (d *Dictionary) String() string {\n+\treturn fmt.Sprintf(\"{ dictionary: %v\\n  indices: %v }\", d.Dictionary(), d.Indices())\n+}\n+\n+// GetValueIndex returns the dictionary index for the value at index i of the array.\n+// The actual value can be retrieved by using d.Dictionary().(valuetype).Value(d.GetValueIndex(i))\n+func (d *Dictionary) GetValueIndex(i int) int {\n+\tindiceData := d.data.buffers[1].Bytes()\n+\t// we know the value is non-negative per the spec, so\n+\t// we can use the unsigned value regardless.\n+\tswitch d.indices.DataType().ID() {\n+\tcase arrow.UINT8, arrow.INT8:\n+\t\treturn int(uint8(indiceData[d.data.offset+i]))\n+\tcase arrow.UINT16, arrow.INT16:\n+\t\treturn int(arrow.Uint16Traits.CastFromBytes(indiceData)[d.data.offset+i])\n+\tcase arrow.UINT32, arrow.INT32:\n+\t\treturn int(arrow.Uint32Traits.CastFromBytes(indiceData)[d.data.offset+i])\n+\tcase arrow.UINT64, arrow.INT64:\n+\t\treturn int(arrow.Uint64Traits.CastFromBytes(indiceData)[d.data.offset+i])\n+\t}\n+\tdebug.Assert(false, \"unreachable dictionary index\")\n+\treturn -1\n+}\n+\n+func (d *Dictionary) getOneForMarshal(i int) interface{} {\n+\tif d.IsNull(i) {\n+\t\treturn nil\n+\t}\n+\tvidx := d.GetValueIndex(i)\n+\treturn d.Dictionary().(arraymarshal).getOneForMarshal(vidx)\n+}\n+\n+func (d *Dictionary) MarshalJSON() ([]byte, error) {\n+\tvals := make([]interface{}, d.Len())\n+\tfor i := 0; i < d.Len(); i++ {\n+\t\tvals[i] = d.getOneForMarshal(i)\n+\t}\n+\treturn json.Marshal(vals)\n+}\n+\n+func arrayEqualDict(l, r *Dictionary) bool {\n+\treturn ArrayEqual(l.Dictionary(), r.Dictionary()) && ArrayEqual(l.indices, r.indices)\n+}\n+\n+func arrayApproxEqualDict(l, r *Dictionary, opt equalOption) bool {\n+\treturn arrayApproxEqual(l.Dictionary(), r.Dictionary(), opt) && arrayApproxEqual(l.indices, r.indices, opt)\n+}\n+\n+// helper for building the properly typed indices of the dictionary builder\n+type indexBuilder struct {\n+\tBuilder\n+\tAppend func(int)\n+}\n+\n+func createIndexBuilder(mem memory.Allocator, dt arrow.FixedWidthDataType) (ret indexBuilder, err error) {\n+\tret = indexBuilder{Builder: NewBuilder(mem, dt)}\n+\tswitch dt.ID() {\n+\tcase arrow.INT8:\n+\t\tret.Append = func(idx int) {\n+\t\t\tret.Builder.(*Int8Builder).Append(int8(idx))\n+\t\t}\n+\tcase arrow.UINT8:\n+\t\tret.Append = func(idx int) {\n+\t\t\tret.Builder.(*Uint8Builder).Append(uint8(idx))\n+\t\t}\n+\tcase arrow.INT16:\n+\t\tret.Append = func(idx int) {\n+\t\t\tret.Builder.(*Int16Builder).Append(int16(idx))\n+\t\t}\n+\tcase arrow.UINT16:\n+\t\tret.Append = func(idx int) {\n+\t\t\tret.Builder.(*Uint16Builder).Append(uint16(idx))\n+\t\t}\n+\tcase arrow.INT32:\n+\t\tret.Append = func(idx int) {\n+\t\t\tret.Builder.(*Int32Builder).Append(int32(idx))\n+\t\t}\n+\tcase arrow.UINT32:\n+\t\tret.Append = func(idx int) {\n+\t\t\tret.Builder.(*Uint32Builder).Append(uint32(idx))\n+\t\t}\n+\tcase arrow.INT64:\n+\t\tret.Append = func(idx int) {\n+\t\t\tret.Builder.(*Int64Builder).Append(int64(idx))\n+\t\t}\n+\tcase arrow.UINT64:\n+\t\tret.Append = func(idx int) {\n+\t\t\tret.Builder.(*Uint64Builder).Append(uint64(idx))\n+\t\t}\n+\tdefault:\n+\t\tdebug.Assert(false, \"dictionary index type must be integral\")\n+\t\terr = fmt.Errorf(\"dictionary index type must be integral, not %s\", dt)\n+\t}\n+\n+\treturn\n+}\n+\n+// helper function to construct an appropriately typed memo table based on\n+// the value type for the dictionary\n+func createMemoTable(mem memory.Allocator, dt arrow.DataType) (ret hashing.MemoTable, err error) {\n+\tswitch dt.ID() {\n+\tcase arrow.INT8:\n+\t\tret = hashing.NewInt8MemoTable(0)\n+\tcase arrow.UINT8:\n+\t\tret = hashing.NewUint8MemoTable(0)\n+\tcase arrow.INT16:\n+\t\tret = hashing.NewInt16MemoTable(0)\n+\tcase arrow.UINT16:\n+\t\tret = hashing.NewUint16MemoTable(0)\n+\tcase arrow.INT32:\n+\t\tret = hashing.NewInt32MemoTable(0)\n+\tcase arrow.UINT32:\n+\t\tret = hashing.NewUint32MemoTable(0)\n+\tcase arrow.INT64:\n+\t\tret = hashing.NewInt64MemoTable(0)\n+\tcase arrow.UINT64:\n+\t\tret = hashing.NewUint64MemoTable(0)\n+\tcase arrow.DURATION, arrow.TIMESTAMP, arrow.DATE64, arrow.TIME64:\n+\t\tret = hashing.NewInt64MemoTable(0)\n+\tcase arrow.TIME32, arrow.DATE32, arrow.INTERVAL_MONTHS:\n+\t\tret = hashing.NewInt32MemoTable(0)\n+\tcase arrow.FLOAT16:\n+\t\tret = hashing.NewUint16MemoTable(0)\n+\tcase arrow.FLOAT32:\n+\t\tret = hashing.NewFloat32MemoTable(0)\n+\tcase arrow.FLOAT64:\n+\t\tret = hashing.NewFloat64MemoTable(0)\n+\tcase arrow.BINARY, arrow.FIXED_SIZE_BINARY, arrow.DECIMAL128, arrow.INTERVAL_DAY_TIME, arrow.INTERVAL_MONTH_DAY_NANO:\n+\t\tret = hashing.NewBinaryMemoTable(0, 0, NewBinaryBuilder(mem, arrow.BinaryTypes.Binary))\n+\tcase arrow.STRING:\n+\t\tret = hashing.NewBinaryMemoTable(0, 0, NewBinaryBuilder(mem, arrow.BinaryTypes.String))\n+\tcase arrow.NULL:\n+\tdefault:\n+\t\tdebug.Assert(false, \"unimplemented dictionary value type\")\n+\t\terr = fmt.Errorf(\"unimplemented dictionary value type, %s\", dt)\n+\t}\n+\n+\treturn\n+}\n+\n+type DictionaryBuilder interface {\n+\tBuilder\n+\n+\tNewDictionaryArray() *Dictionary\n+\tNewDelta() (indices, delta Interface, err error)\n+\tAppendArray(Interface) error\n+\tResetFull()\n+}\n+\n+type dictionaryBuilder struct {\n+\tbuilder\n+\n+\tdt          *arrow.DictionaryType\n+\tdeltaOffset int\n+\tmemoTable   hashing.MemoTable\n+\tidxBuilder  indexBuilder\n+}\n+\n+func NewDictionaryBuilderWithDict(mem memory.Allocator, dt *arrow.DictionaryType, init Interface) DictionaryBuilder {\n+\tif init != nil && !arrow.TypeEqual(dt.ValueType, init.DataType()) {\n+\t\tpanic(fmt.Errorf(\"arrow/array: cannot initialize dictionary type %T with array of type %T\", dt.ValueType, init.DataType()))\n+\t}\n+\n+\tidxbldr, err := createIndexBuilder(mem, dt.IndexType.(arrow.FixedWidthDataType))\n+\tif err != nil {\n+\t\tpanic(fmt.Errorf(\"arrow/array: unsupported builder for index type of %T\", dt))\n+\t}\n+\n+\tmemo, err := createMemoTable(mem, dt.ValueType)\n+\tif err != nil {\n+\t\tpanic(fmt.Errorf(\"arrow/array: unsupported builder for value type of %T\", dt))\n+\t}\n+\n+\tbldr := dictionaryBuilder{\n+\t\tbuilder:    builder{refCount: 1, mem: mem},\n+\t\tidxBuilder: idxbldr,\n+\t\tmemoTable:  memo,\n+\t\tdt:         dt,\n+\t}\n+\n+\tswitch dt.ValueType.ID() {\n+\tcase arrow.NULL:\n+\t\tret := &NullDictionaryBuilder{bldr}\n+\t\tdebug.Assert(init == nil, \"arrow/array: doesn't make sense to init a null dictionary\")\n+\t\treturn ret\n+\tcase arrow.UINT8:\n+\t\tret := &Uint8DictionaryBuilder{bldr}\n+\t\tif init != nil {\n+\t\t\tif err = ret.InsertDictValues(init.(*Uint8)); err != nil {\n+\t\t\t\tpanic(err)\n+\t\t\t}\n+\t\t}\n+\t\treturn ret\n+\tcase arrow.INT8:\n+\t\tret := &Int8DictionaryBuilder{bldr}\n+\t\tif init != nil {\n+\t\t\tif err = ret.InsertDictValues(init.(*Int8)); err != nil {\n+\t\t\t\tpanic(err)\n\nReview comment:\n       why is panic the right thing here?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-06T05:36:21.780+0000",
                    "updated": "2022-02-06T05:36:21.780+0000",
                    "started": "2022-02-06T05:36:21.779+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "721578",
                    "issueId": "13178284"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 33000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1492ceb9[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2abcfa51[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@63f27cf4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@2ed17ca9[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5adf4b7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@586cb122[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@28096307[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@d18769b[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@677a23c3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@5a227baf[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@39d03ab7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@77322fb8[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 33000,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Apr 21 14:40:47 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-04-21T14:40:47.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3039/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-08-10T13:51:44.000+0000",
        "updated": "2022-08-02T18:21:15.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "9h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 33000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Go] add support for DictionaryArray",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13178284/comment/17525754",
                    "id": "17525754",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
                        "name": "zeroshade",
                        "key": "zeroshade",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
                        },
                        "displayName": "Matthew Topol",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 12158\n[https://github.com/apache/arrow/pull/12158]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=zeroshade",
                        "name": "zeroshade",
                        "key": "zeroshade",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=zeroshade&avatarId=31230",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=zeroshade&avatarId=31230",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=zeroshade&avatarId=31230",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=zeroshade&avatarId=31230"
                        },
                        "displayName": "Matthew Topol",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-04-21T14:40:47.032+0000",
                    "updated": "2022-04-21T14:40:47.032+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3wxlz:",
        "customfield_12314139": null
    }
}