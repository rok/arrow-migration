{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13381940",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381940",
    "key": "ARROW-12955",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12616699",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12616699",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13341287",
                    "key": "ARROW-10640",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13341287",
                    "fields": {
                        "summary": "[C++] An \"if_else\" kernel to combine two arrays based on a mask",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12619436",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12619436",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13390078",
                    "key": "ARROW-13358",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13390078",
                    "fields": {
                        "summary": "[C++] Extend type support for if_else kernel",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=niranda",
            "name": "niranda",
            "key": "niranda",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39936",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39936",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39936",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39936"
            },
            "displayName": "Niranda Perera",
            "active": true,
            "timeZone": "America/Indiana/Indianapolis"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=niranda",
            "name": "niranda",
            "key": "niranda",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39936",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39936",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39936",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39936"
            },
            "displayName": "Niranda Perera",
            "active": true,
            "timeZone": "America/Indiana/Indianapolis"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=niranda",
            "name": "niranda",
            "key": "niranda",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=39936",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=39936",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=39936",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=39936"
            },
            "displayName": "Niranda Perera",
            "active": true,
            "timeZone": "America/Indiana/Indianapolis"
        },
        "aggregateprogress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12955/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 24,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381940/worklog/611741",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nirandaperera opened a new pull request #10538:\nURL: https://github.com/apache/arrow/pull/10538\n\n\n   This PR adds variable binary type support \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-16T05:15:48.833+0000",
                    "updated": "2021-06-16T05:15:48.833+0000",
                    "started": "2021-06-16T05:15:48.833+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611741",
                    "issueId": "13381940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381940/worklog/611742",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10538:\nURL: https://github.com/apache/arrow/pull/10538#issuecomment-862046118\n\n\n   https://issues.apache.org/jira/browse/ARROW-12955\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-16T05:16:02.536+0000",
                    "updated": "2021-06-16T05:16:02.536+0000",
                    "started": "2021-06-16T05:16:02.536+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611742",
                    "issueId": "13381940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381940/worklog/615641",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10538:\nURL: https://github.com/apache/arrow/pull/10538#discussion_r659863256\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -353,6 +353,332 @@ struct IfElseFunctor<Type, enable_if_number<Type>> {\n   }\n };\n \n+template <typename Type>\n+struct IfElseFunctor<Type, enable_if_base_binary<Type>> {\n+  using OffsetType = typename TypeTraits<Type>::OffsetType::c_type;\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+\n+  // A - Array\n+  // S - Scalar\n+\n+  //  AAA\n+  static Status Call(KernelContext* ctx, const ArrayData& cond, const ArrayData& left,\n+                     const ArrayData& right, ArrayData* out) {\n+    const uint8_t* cond_data = cond.buffers[1]->data();\n+    BitBlockCounter bit_counter(cond_data, cond.offset, cond.length);\n+\n+    const auto* left_offsets = left.GetValues<OffsetType>(1);\n+    const uint8_t* left_data = left.buffers[2]->data();\n+    const auto* right_offsets = right.GetValues<OffsetType>(1);\n+    const uint8_t* right_data = right.buffers[2]->data();\n+\n+    // reserve an additional space\n+    ARROW_ASSIGN_OR_RAISE(auto out_offset_buf,\n+                          ctx->Allocate((cond.length + 1) * sizeof(OffsetType)));\n+    auto* out_offsets = reinterpret_cast<OffsetType*>(out_offset_buf->mutable_data());\n+    out_offsets[0] = 0;\n+\n+    // allocate data buffer conservatively\n+    auto data_buff_alloc =\n+        static_cast<int64_t>((left_offsets[left.length] - left_offsets[0]) +\n+                             (right_offsets[right.length] - right_offsets[0]));\n+    ARROW_ASSIGN_OR_RAISE(std::shared_ptr<ResizableBuffer> out_data_buf,\n+                          ctx->Allocate(data_buff_alloc));\n+    uint8_t* out_data = out_data_buf->mutable_data();\n+\n+    int64_t offset = cond.offset;\n+    OffsetType total_bytes_written = 0;\n+    while (offset < cond.offset + cond.length) {\n\nReview comment:\n       It seems like this is copying data even if the output would be null. That doesn't sound like a good idea (if the filter bitmap has 99% nulls, you want those 99% null string slots in the output to take 0 data space).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-28T14:56:42.882+0000",
                    "updated": "2021-06-28T14:56:42.882+0000",
                    "started": "2021-06-28T14:56:42.882+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "615641",
                    "issueId": "13381940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381940/worklog/615818",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nirandaperera commented on a change in pull request #10538:\nURL: https://github.com/apache/arrow/pull/10538#discussion_r660103166\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -353,6 +353,332 @@ struct IfElseFunctor<Type, enable_if_number<Type>> {\n   }\n };\n \n+template <typename Type>\n+struct IfElseFunctor<Type, enable_if_base_binary<Type>> {\n+  using OffsetType = typename TypeTraits<Type>::OffsetType::c_type;\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+\n+  // A - Array\n+  // S - Scalar\n+\n+  //  AAA\n+  static Status Call(KernelContext* ctx, const ArrayData& cond, const ArrayData& left,\n+                     const ArrayData& right, ArrayData* out) {\n+    const uint8_t* cond_data = cond.buffers[1]->data();\n+    BitBlockCounter bit_counter(cond_data, cond.offset, cond.length);\n+\n+    const auto* left_offsets = left.GetValues<OffsetType>(1);\n+    const uint8_t* left_data = left.buffers[2]->data();\n+    const auto* right_offsets = right.GetValues<OffsetType>(1);\n+    const uint8_t* right_data = right.buffers[2]->data();\n+\n+    // reserve an additional space\n+    ARROW_ASSIGN_OR_RAISE(auto out_offset_buf,\n+                          ctx->Allocate((cond.length + 1) * sizeof(OffsetType)));\n+    auto* out_offsets = reinterpret_cast<OffsetType*>(out_offset_buf->mutable_data());\n+    out_offsets[0] = 0;\n+\n+    // allocate data buffer conservatively\n+    auto data_buff_alloc =\n+        static_cast<int64_t>((left_offsets[left.length] - left_offsets[0]) +\n+                             (right_offsets[right.length] - right_offsets[0]));\n+    ARROW_ASSIGN_OR_RAISE(std::shared_ptr<ResizableBuffer> out_data_buf,\n+                          ctx->Allocate(data_buff_alloc));\n+    uint8_t* out_data = out_data_buf->mutable_data();\n+\n+    int64_t offset = cond.offset;\n+    OffsetType total_bytes_written = 0;\n+    while (offset < cond.offset + cond.length) {\n\nReview comment:\n       Agreed. There are some improvements I am planning to add to this. I'll ping you, once I have pushed them. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-28T20:42:52.748+0000",
                    "updated": "2021-06-28T20:42:52.748+0000",
                    "started": "2021-06-28T20:42:52.748+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "615818",
                    "issueId": "13381940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381940/worklog/616171",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nirandaperera commented on a change in pull request #10538:\nURL: https://github.com/apache/arrow/pull/10538#discussion_r660103166\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -353,6 +353,332 @@ struct IfElseFunctor<Type, enable_if_number<Type>> {\n   }\n };\n \n+template <typename Type>\n+struct IfElseFunctor<Type, enable_if_base_binary<Type>> {\n+  using OffsetType = typename TypeTraits<Type>::OffsetType::c_type;\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+\n+  // A - Array\n+  // S - Scalar\n+\n+  //  AAA\n+  static Status Call(KernelContext* ctx, const ArrayData& cond, const ArrayData& left,\n+                     const ArrayData& right, ArrayData* out) {\n+    const uint8_t* cond_data = cond.buffers[1]->data();\n+    BitBlockCounter bit_counter(cond_data, cond.offset, cond.length);\n+\n+    const auto* left_offsets = left.GetValues<OffsetType>(1);\n+    const uint8_t* left_data = left.buffers[2]->data();\n+    const auto* right_offsets = right.GetValues<OffsetType>(1);\n+    const uint8_t* right_data = right.buffers[2]->data();\n+\n+    // reserve an additional space\n+    ARROW_ASSIGN_OR_RAISE(auto out_offset_buf,\n+                          ctx->Allocate((cond.length + 1) * sizeof(OffsetType)));\n+    auto* out_offsets = reinterpret_cast<OffsetType*>(out_offset_buf->mutable_data());\n+    out_offsets[0] = 0;\n+\n+    // allocate data buffer conservatively\n+    auto data_buff_alloc =\n+        static_cast<int64_t>((left_offsets[left.length] - left_offsets[0]) +\n+                             (right_offsets[right.length] - right_offsets[0]));\n+    ARROW_ASSIGN_OR_RAISE(std::shared_ptr<ResizableBuffer> out_data_buf,\n+                          ctx->Allocate(data_buff_alloc));\n+    uint8_t* out_data = out_data_buf->mutable_data();\n+\n+    int64_t offset = cond.offset;\n+    OffsetType total_bytes_written = 0;\n+    while (offset < cond.offset + cond.length) {\n\nReview comment:\n       Agreed. There are some improvements I am planning to add to this. I'll ping you, once I have pushed them. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-29T13:21:33.257+0000",
                    "updated": "2021-06-29T13:21:33.257+0000",
                    "started": "2021-06-29T13:21:33.257+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "616171",
                    "issueId": "13381940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381940/worklog/616196",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10538:\nURL: https://github.com/apache/arrow/pull/10538#discussion_r659863256\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -353,6 +353,332 @@ struct IfElseFunctor<Type, enable_if_number<Type>> {\n   }\n };\n \n+template <typename Type>\n+struct IfElseFunctor<Type, enable_if_base_binary<Type>> {\n+  using OffsetType = typename TypeTraits<Type>::OffsetType::c_type;\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+\n+  // A - Array\n+  // S - Scalar\n+\n+  //  AAA\n+  static Status Call(KernelContext* ctx, const ArrayData& cond, const ArrayData& left,\n+                     const ArrayData& right, ArrayData* out) {\n+    const uint8_t* cond_data = cond.buffers[1]->data();\n+    BitBlockCounter bit_counter(cond_data, cond.offset, cond.length);\n+\n+    const auto* left_offsets = left.GetValues<OffsetType>(1);\n+    const uint8_t* left_data = left.buffers[2]->data();\n+    const auto* right_offsets = right.GetValues<OffsetType>(1);\n+    const uint8_t* right_data = right.buffers[2]->data();\n+\n+    // reserve an additional space\n+    ARROW_ASSIGN_OR_RAISE(auto out_offset_buf,\n+                          ctx->Allocate((cond.length + 1) * sizeof(OffsetType)));\n+    auto* out_offsets = reinterpret_cast<OffsetType*>(out_offset_buf->mutable_data());\n+    out_offsets[0] = 0;\n+\n+    // allocate data buffer conservatively\n+    auto data_buff_alloc =\n+        static_cast<int64_t>((left_offsets[left.length] - left_offsets[0]) +\n+                             (right_offsets[right.length] - right_offsets[0]));\n+    ARROW_ASSIGN_OR_RAISE(std::shared_ptr<ResizableBuffer> out_data_buf,\n+                          ctx->Allocate(data_buff_alloc));\n+    uint8_t* out_data = out_data_buf->mutable_data();\n+\n+    int64_t offset = cond.offset;\n+    OffsetType total_bytes_written = 0;\n+    while (offset < cond.offset + cond.length) {\n\nReview comment:\n       It seems like this is copying data even if the output would be null. That doesn't sound like a good idea (if the filter bitmap has 99% nulls, you want those 99% null string slots in the output to take 0 data space).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-29T13:29:09.327+0000",
                    "updated": "2021-06-29T13:29:09.327+0000",
                    "started": "2021-06-29T13:29:09.327+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "616196",
                    "issueId": "13381940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381940/worklog/617805",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nirandaperera commented on pull request #10538:\nURL: https://github.com/apache/arrow/pull/10538#issuecomment-872519526\n\n\n   @pitrou @lidavidm I made some changes to the code. As Antoine pointed out previously, the null values in the output string array would have non-empty slots in the data buffer. I think it requires a small fix. I'll add that here as well. But I'd like to get your feedback on the code flow. \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-01T20:11:15.956+0000",
                    "updated": "2021-07-01T20:11:15.956+0000",
                    "started": "2021-07-01T20:11:15.956+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "617805",
                    "issueId": "13381940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381940/worklog/617835",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10538:\nURL: https://github.com/apache/arrow/pull/10538#discussion_r662573252\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -455,6 +602,302 @@ struct IfElseFunctor<Type, enable_if_number<Type>> {\n   }\n };\n \n+template <typename Type>\n+struct IfElseFunctor<Type, enable_if_base_binary<Type>> {\n+  using OffsetType = typename TypeTraits<Type>::OffsetType::c_type;\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+\n+  // A - Array, S - Scalar, X = Array/Scalar\n+\n+  // SXX\n+  static Status Call(KernelContext* ctx, const BooleanScalar& cond, const Datum& left,\n+                     const Datum& right, Datum* out) {\n+    if (left.is_scalar() && right.is_scalar()) {\n+      if (cond.is_valid) {\n+        *out = cond.value ? left.scalar() : right.scalar();\n+      } else {\n+        *out = MakeNullScalar(left.type());\n+      }\n+      return Status::OK();\n+    }\n+    // either left or right is an array. Output is always an array\n+    int64_t out_arr_len = std::max(left.length(), right.length());\n+    if (!cond.is_valid) {\n+      // cond is null; just create a null array\n+      ARROW_ASSIGN_OR_RAISE(*out,\n+                            MakeArrayOfNull(left.type(), out_arr_len, ctx->memory_pool()))\n+      return Status::OK();\n+    }\n+\n+    const auto& valid_data = cond.value ? left : right;\n+    if (valid_data.is_array()) {\n+      *out = valid_data;\n+    } else {\n+      // valid data is a scalar that needs to be broadcasted\n+      ARROW_ASSIGN_OR_RAISE(*out, MakeArrayFromScalar(*valid_data.scalar(), out_arr_len,\n+                                                      ctx->memory_pool()));\n+    }\n+    return Status::OK();\n+  }\n+\n+  //  AAA\n+  static Status Call(KernelContext* ctx, const ArrayData& cond, const ArrayData& left,\n+                     const ArrayData& right, ArrayData* out) {\n+    const uint8_t* cond_data = cond.buffers[1]->data();\n+    BitBlockCounter bit_counter(cond_data, cond.offset, cond.length);\n+\n+    const auto* left_offsets = left.GetValues<OffsetType>(1);\n+    const uint8_t* left_data = left.buffers[2]->data();\n+    const auto* right_offsets = right.GetValues<OffsetType>(1);\n+    const uint8_t* right_data = right.buffers[2]->data();\n+\n+    // reserve an additional space\n+    ARROW_ASSIGN_OR_RAISE(auto out_offset_buf,\n+                          ctx->Allocate((cond.length + 1) * sizeof(OffsetType)));\n+    auto* out_offsets = reinterpret_cast<OffsetType*>(out_offset_buf->mutable_data());\n+    out_offsets[0] = 0;\n+\n+    // allocate data buffer conservatively\n+    int64_t data_buff_alloc = std::max(left_offsets[left.length] - left_offsets[0],\n+                                       right_offsets[right.length] - right_offsets[0]);\n+    ARROW_ASSIGN_OR_RAISE(std::shared_ptr<ResizableBuffer> out_data_buf,\n+                          ctx->Allocate(data_buff_alloc));\n+    uint8_t* out_data = out_data_buf->mutable_data();\n+\n+    RunIfElseLoop(\n+        cond,\n+        [&](int64_t offset, int64_t length) {  // from left bulk\n+          auto bytes_written = left_offsets[offset + length] - left_offsets[offset];\n+          std::memcpy(out_data + out_offsets[offset], left_data + left_offsets[offset],\n+                      bytes_written);\n+          // normalize the out_offsets by reducing input start offset, and adding the\n+          // offset upto the word\n+          std::transform(left_offsets + offset + 1, left_offsets + offset + length + 1,\n+                         out_offsets + offset + 1, [&](const OffsetType& src_offset) {\n+                           return src_offset - left_offsets[offset] + out_offsets[offset];\n+                         });\n+        },\n+        [&](int64_t offset, int64_t length) {  // from right bulk\n+          auto bytes_written = right_offsets[offset + length] - right_offsets[offset];\n+          std::memcpy(out_data + out_offsets[offset], right_data + right_offsets[offset],\n+                      bytes_written);\n+          // normalize the out_offsets by reducing input start offset, and adding the\n+          // offset upto the word\n+          std::transform(right_offsets + offset + 1, right_offsets + offset + length + 1,\n+                         out_offsets + offset + 1, [&](const OffsetType& src_offset) {\n+                           return src_offset - right_offsets[offset] +\n+                                  out_offsets[offset];\n+                         });\n+        },\n+        [&](int64_t offset) {  // left each\n+          auto bytes_written = left_offsets[offset + 1] - left_offsets[offset];\n+          std::memcpy(out_data + out_offsets[offset], left_data + left_offsets[offset],\n+                      bytes_written);\n+          out_offsets[offset + 1] = out_offsets[offset] + bytes_written;\n+        },\n+        [&](int64_t offset) {  // right each\n+          auto bytes_written = right_offsets[offset + 1] - right_offsets[offset];\n+          std::memcpy(out_data + out_offsets[offset], right_data + right_offsets[offset],\n+                      bytes_written);\n+          out_offsets[offset + 1] = out_offsets[offset] + bytes_written;\n+        });\n+    // resize the data buffer\n+    ARROW_RETURN_NOT_OK(out_data_buf->Resize(out_offsets[cond.length]));\n+\n+    out->buffers[1] = std::move(out_offset_buf);\n+    out->buffers[2] = std::move(out_data_buf);\n+    return Status::OK();\n+  }\n+\n+  // ASA\n+  static Status Call(KernelContext* ctx, const ArrayData& cond, const Scalar& left,\n+                     const ArrayData& right, ArrayData* out) {\n+    const uint8_t* cond_data = cond.buffers[1]->data();\n+    BitBlockCounter bit_counter(cond_data, cond.offset, cond.length);\n+\n+    util::string_view left_data = internal::UnboxScalar<Type>::Unbox(left);\n+    size_t left_size = left_data.size();\n+\n+    const auto* right_offsets = right.GetValues<OffsetType>(1);\n+    const uint8_t* right_data = right.buffers[2]->data();\n+\n+    // reserve an additional space\n+    ARROW_ASSIGN_OR_RAISE(auto out_offset_buf,\n+                          ctx->Allocate((cond.length + 1) * sizeof(OffsetType)));\n+    auto* out_offsets = reinterpret_cast<OffsetType*>(out_offset_buf->mutable_data());\n+    out_offsets[0] = 0;\n+\n+    // allocate data buffer conservatively\n+    auto data_buff_alloc =\n+        std::max(left_size * cond.length,\n\nReview comment:\n       It looks like clang wants you to pass the type explicitly here\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -607,15 +1050,16 @@ struct ResolveIfElseExec {\n   }\n };\n \n-template <>\n-struct ResolveIfElseExec<NullType> {\n+template <typename AllocateMem>\n+struct ResolveIfElseExec<NullType, AllocateMem> {\n   static Status Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n-    if (batch[0].is_scalar()) {\n+    // if all are scalars, return a null scalar\n+    if (batch[0].is_scalar() && batch[1].is_scalar() && batch[2].is_scalar()) {\n       *out = MakeNullScalar(null());\n     } else {\n-      const std::shared_ptr<ArrayData>& cond_array = batch[0].array();\n-      ARROW_ASSIGN_OR_RAISE(\n-          *out, MakeArrayOfNull(null(), cond_array->length, ctx->memory_pool()));\n+      int64_t len =\n+          std::max(batch[0].length(), std::max(batch[1].length(), batch[2].length()));\n\nReview comment:\n       In this case it should just be `batch.length`\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -455,6 +602,302 @@ struct IfElseFunctor<Type, enable_if_number<Type>> {\n   }\n };\n \n+template <typename Type>\n+struct IfElseFunctor<Type, enable_if_base_binary<Type>> {\n+  using OffsetType = typename TypeTraits<Type>::OffsetType::c_type;\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+\n+  // A - Array, S - Scalar, X = Array/Scalar\n+\n+  // SXX\n+  static Status Call(KernelContext* ctx, const BooleanScalar& cond, const Datum& left,\n+                     const Datum& right, Datum* out) {\n+    if (left.is_scalar() && right.is_scalar()) {\n+      if (cond.is_valid) {\n+        *out = cond.value ? left.scalar() : right.scalar();\n+      } else {\n+        *out = MakeNullScalar(left.type());\n+      }\n+      return Status::OK();\n+    }\n+    // either left or right is an array. Output is always an array\n+    int64_t out_arr_len = std::max(left.length(), right.length());\n+    if (!cond.is_valid) {\n+      // cond is null; just create a null array\n+      ARROW_ASSIGN_OR_RAISE(*out,\n+                            MakeArrayOfNull(left.type(), out_arr_len, ctx->memory_pool()))\n+      return Status::OK();\n+    }\n+\n+    const auto& valid_data = cond.value ? left : right;\n+    if (valid_data.is_array()) {\n+      *out = valid_data;\n+    } else {\n+      // valid data is a scalar that needs to be broadcasted\n+      ARROW_ASSIGN_OR_RAISE(*out, MakeArrayFromScalar(*valid_data.scalar(), out_arr_len,\n+                                                      ctx->memory_pool()));\n+    }\n+    return Status::OK();\n+  }\n+\n+  //  AAA\n+  static Status Call(KernelContext* ctx, const ArrayData& cond, const ArrayData& left,\n+                     const ArrayData& right, ArrayData* out) {\n+    const uint8_t* cond_data = cond.buffers[1]->data();\n+    BitBlockCounter bit_counter(cond_data, cond.offset, cond.length);\n+\n+    const auto* left_offsets = left.GetValues<OffsetType>(1);\n+    const uint8_t* left_data = left.buffers[2]->data();\n+    const auto* right_offsets = right.GetValues<OffsetType>(1);\n+    const uint8_t* right_data = right.buffers[2]->data();\n+\n+    // reserve an additional space\n+    ARROW_ASSIGN_OR_RAISE(auto out_offset_buf,\n+                          ctx->Allocate((cond.length + 1) * sizeof(OffsetType)));\n+    auto* out_offsets = reinterpret_cast<OffsetType*>(out_offset_buf->mutable_data());\n+    out_offsets[0] = 0;\n+\n+    // allocate data buffer conservatively\n\nReview comment:\n       Note that for 'coalesce' and 'choose', what I've gone with is using a builder (with ReserveData) for binary types, and using something akin to your 'handlebulk' only for fixed-width types.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -455,6 +602,302 @@ struct IfElseFunctor<Type, enable_if_number<Type>> {\n   }\n };\n \n+template <typename Type>\n+struct IfElseFunctor<Type, enable_if_base_binary<Type>> {\n+  using OffsetType = typename TypeTraits<Type>::OffsetType::c_type;\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+\n+  // A - Array, S - Scalar, X = Array/Scalar\n+\n+  // SXX\n+  static Status Call(KernelContext* ctx, const BooleanScalar& cond, const Datum& left,\n+                     const Datum& right, Datum* out) {\n+    if (left.is_scalar() && right.is_scalar()) {\n+      if (cond.is_valid) {\n+        *out = cond.value ? left.scalar() : right.scalar();\n+      } else {\n+        *out = MakeNullScalar(left.type());\n+      }\n+      return Status::OK();\n+    }\n+    // either left or right is an array. Output is always an array\n+    int64_t out_arr_len = std::max(left.length(), right.length());\n\nReview comment:\n       Just use `batch.length`\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -58,8 +58,10 @@ inline Bitmap GetBitmap(const Datum& datum, int i) {\n // if the condition is null then output is null otherwise we take validity from the\n // selected argument\n // ie. cond.valid & (cond.data & left.valid | ~cond.data & right.valid)\n-Status PromoteNullsVisitor(KernelContext* ctx, const Datum& cond_d, const Datum& left_d,\n-                           const Datum& right_d, ArrayData* output) {\n+template <typename AllocateMem>\n\nReview comment:\n       nit: maybe AllocateNullBitmap?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -36,7 +36,7 @@ namespace {\n constexpr uint64_t kAllNull = 0;\n constexpr uint64_t kAllValid = ~kAllNull;\n \n-util::optional<uint64_t> GetConstantValidityWord(const Datum& data) {\n\nReview comment:\n       AIUI, they don't need to be declared static if inside an anonymous namespace?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -455,6 +602,302 @@ struct IfElseFunctor<Type, enable_if_number<Type>> {\n   }\n };\n \n+template <typename Type>\n+struct IfElseFunctor<Type, enable_if_base_binary<Type>> {\n+  using OffsetType = typename TypeTraits<Type>::OffsetType::c_type;\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+\n+  // A - Array, S - Scalar, X = Array/Scalar\n+\n+  // SXX\n+  static Status Call(KernelContext* ctx, const BooleanScalar& cond, const Datum& left,\n+                     const Datum& right, Datum* out) {\n+    if (left.is_scalar() && right.is_scalar()) {\n+      if (cond.is_valid) {\n+        *out = cond.value ? left.scalar() : right.scalar();\n+      } else {\n+        *out = MakeNullScalar(left.type());\n+      }\n+      return Status::OK();\n+    }\n+    // either left or right is an array. Output is always an array\n+    int64_t out_arr_len = std::max(left.length(), right.length());\n+    if (!cond.is_valid) {\n+      // cond is null; just create a null array\n+      ARROW_ASSIGN_OR_RAISE(*out,\n+                            MakeArrayOfNull(left.type(), out_arr_len, ctx->memory_pool()))\n+      return Status::OK();\n+    }\n+\n+    const auto& valid_data = cond.value ? left : right;\n+    if (valid_data.is_array()) {\n+      *out = valid_data;\n+    } else {\n+      // valid data is a scalar that needs to be broadcasted\n+      ARROW_ASSIGN_OR_RAISE(*out, MakeArrayFromScalar(*valid_data.scalar(), out_arr_len,\n+                                                      ctx->memory_pool()));\n+    }\n+    return Status::OK();\n+  }\n+\n+  //  AAA\n+  static Status Call(KernelContext* ctx, const ArrayData& cond, const ArrayData& left,\n+                     const ArrayData& right, ArrayData* out) {\n+    const uint8_t* cond_data = cond.buffers[1]->data();\n+    BitBlockCounter bit_counter(cond_data, cond.offset, cond.length);\n+\n+    const auto* left_offsets = left.GetValues<OffsetType>(1);\n+    const uint8_t* left_data = left.buffers[2]->data();\n+    const auto* right_offsets = right.GetValues<OffsetType>(1);\n+    const uint8_t* right_data = right.buffers[2]->data();\n+\n+    // reserve an additional space\n+    ARROW_ASSIGN_OR_RAISE(auto out_offset_buf,\n+                          ctx->Allocate((cond.length + 1) * sizeof(OffsetType)));\n+    auto* out_offsets = reinterpret_cast<OffsetType*>(out_offset_buf->mutable_data());\n+    out_offsets[0] = 0;\n+\n+    // allocate data buffer conservatively\n\nReview comment:\n       Is this sufficient? For `IfElse([true, false], ['asdf', ''], ['', 'asdf'])` this will allocate only a length 4 buffer but a length 8 buffer is needed.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -78,19 +80,37 @@ Status PromoteNullsVisitor(KernelContext* ctx, const Datum& cond_d, const Datum&\n   // cond.valid & (cond.data & left.valid | ~cond.data & right.valid)\n   // In the following cases, we dont need to allocate out_valid bitmap\n \n-  // if cond & left & right all ones, then output is all valid. output validity buffer\n-  // is already allocated, hence set all bits\n+  // if cond & left & right all ones, then output is all valid.\n+  // if output validity buffer is already allocated (NullHandling::\n+  // COMPUTED_PREALLOCATE) -> set all bits\n+  // else, return nullptr\n   if (cond_const == kAllValid && left_const == kAllValid && right_const == kAllValid) {\n-    BitUtil::SetBitmap(output->buffers[0]->mutable_data(), output->offset,\n-                       output->length);\n+    if (AllocateMem::value) {\n+      output->buffers[0] = nullptr;\n+    } else {  // NullHandling::COMPUTED_NO_PREALLOCATE\n\nReview comment:\n       These comments contradict each other?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -455,6 +602,302 @@ struct IfElseFunctor<Type, enable_if_number<Type>> {\n   }\n };\n \n+template <typename Type>\n+struct IfElseFunctor<Type, enable_if_base_binary<Type>> {\n+  using OffsetType = typename TypeTraits<Type>::OffsetType::c_type;\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+\n+  // A - Array, S - Scalar, X = Array/Scalar\n+\n+  // SXX\n+  static Status Call(KernelContext* ctx, const BooleanScalar& cond, const Datum& left,\n+                     const Datum& right, Datum* out) {\n+    if (left.is_scalar() && right.is_scalar()) {\n+      if (cond.is_valid) {\n+        *out = cond.value ? left.scalar() : right.scalar();\n+      } else {\n+        *out = MakeNullScalar(left.type());\n+      }\n+      return Status::OK();\n+    }\n+    // either left or right is an array. Output is always an array\n+    int64_t out_arr_len = std::max(left.length(), right.length());\n+    if (!cond.is_valid) {\n+      // cond is null; just create a null array\n+      ARROW_ASSIGN_OR_RAISE(*out,\n+                            MakeArrayOfNull(left.type(), out_arr_len, ctx->memory_pool()))\n+      return Status::OK();\n+    }\n+\n+    const auto& valid_data = cond.value ? left : right;\n+    if (valid_data.is_array()) {\n+      *out = valid_data;\n+    } else {\n+      // valid data is a scalar that needs to be broadcasted\n+      ARROW_ASSIGN_OR_RAISE(*out, MakeArrayFromScalar(*valid_data.scalar(), out_arr_len,\n+                                                      ctx->memory_pool()));\n+    }\n+    return Status::OK();\n+  }\n+\n+  //  AAA\n+  static Status Call(KernelContext* ctx, const ArrayData& cond, const ArrayData& left,\n+                     const ArrayData& right, ArrayData* out) {\n+    const uint8_t* cond_data = cond.buffers[1]->data();\n+    BitBlockCounter bit_counter(cond_data, cond.offset, cond.length);\n+\n+    const auto* left_offsets = left.GetValues<OffsetType>(1);\n+    const uint8_t* left_data = left.buffers[2]->data();\n+    const auto* right_offsets = right.GetValues<OffsetType>(1);\n+    const uint8_t* right_data = right.buffers[2]->data();\n+\n+    // reserve an additional space\n+    ARROW_ASSIGN_OR_RAISE(auto out_offset_buf,\n+                          ctx->Allocate((cond.length + 1) * sizeof(OffsetType)));\n+    auto* out_offsets = reinterpret_cast<OffsetType*>(out_offset_buf->mutable_data());\n+    out_offsets[0] = 0;\n+\n+    // allocate data buffer conservatively\n+    int64_t data_buff_alloc = std::max(left_offsets[left.length] - left_offsets[0],\n+                                       right_offsets[right.length] - right_offsets[0]);\n+    ARROW_ASSIGN_OR_RAISE(std::shared_ptr<ResizableBuffer> out_data_buf,\n+                          ctx->Allocate(data_buff_alloc));\n+    uint8_t* out_data = out_data_buf->mutable_data();\n+\n+    RunIfElseLoop(\n+        cond,\n+        [&](int64_t offset, int64_t length) {  // from left bulk\n\nReview comment:\n       minor nit but I wonder if the compiler could generate similar (enough) code from a\r\n   \r\n   ```\r\n   struct CopyBinaryBulk {\r\n       const offset_type* offsets;\r\n       const uint8_t* values;\r\n       offset_type* out_offsets;\r\n       uint8_t* out_values;\r\n   \r\n       operator()(...) { ... }\r\n   };\r\n   ```\r\n   \r\n   so you don't have to copy-paste these everywhere\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -274,18 +310,129 @@ static void RunIfElseLoop(const ArrayData& cond, HandleBulk handle_bulk,\n }\n \n template <typename HandleBulk, typename HandleEach>\n-static void RunIfElseLoopInverted(const ArrayData& cond, HandleBulk handle_bulk,\n-                                  HandleEach handle_each) {\n-  return RunIfElseLoop<HandleBulk, HandleEach, true>(cond, handle_bulk, handle_each);\n+static void RunIfElseLoopInverted(const ArrayData& cond, const HandleBulk& handle_bulk,\n+                                  const HandleEach& handle_each) {\n+  RunIfElseLoop<HandleBulk, HandleEach, true>(cond, handle_bulk, handle_each);\n+}\n+\n+/// Runs the main if_else loop.\n+///\n+/// `HandleBulk` has the signature:\n+///     [](int64_t offset, int64_t length){...}\n+/// It should copy `length` number of elements from source array to output array with\n+/// `offset` offset in both arrays\n+///\n+/// `HandleEach` has the signature:\n+///     [](int64_t offset){...}\n+/// It should copy single element from source array to output array with `offset`\n+/// offset in both arrays\n+template <typename HandleBulkLeft, typename HandleBulkRight, typename HandleEachLeft,\n+          typename HandleEachRight, bool invert = false>\n+static void RunIfElseLoop(const ArrayData& cond, const HandleBulkLeft& handle_bulk_left,\n+                          const HandleBulkRight& handle_bulk_right,\n+                          const HandleEachLeft& handle_each_left,\n+                          const HandleEachRight& handle_each_right) {\n+  int64_t offset = 0;\n+  const auto* cond_data = cond.buffers[1]->data();  // this is a BoolArray\n+\n+  // There are multiple options for this one. Ex: BitBlockCounter, BitmapWordReader,\n+  // BitRunReader, etc. BitRunReader would be efficient for longer contiguous values in\n+  // the cond data buffer.\n+  // BitmapWordReader was slightly better performant that BitBlockCounter.\n+  BitmapWordReader<Word> cond_reader(cond_data, cond.offset, cond.length);\n+\n+  int64_t cnt = cond_reader.words();\n+  while (cnt--) {\n+    Word word = cond_reader.NextWord();\n+    if (invert) {\n+      if (word == UINT64_MAX) {\n+        handle_bulk_right(offset, word_len);\n+      } else if (word == 0) {\n+        handle_bulk_left(offset, word_len);\n+      } else {\n+        for (int64_t i = 0; i < word_len; ++i) {\n+          if (!BitUtil::GetBit(cond_data, cond.offset + offset + i)) {\n+            handle_each_right(offset + i);\n+          } else {\n+            handle_each_left(offset + i);\n+          }\n+        }\n+      }\n+    } else {\n+      if (word == UINT64_MAX) {\n+        handle_bulk_left(offset, word_len);\n+      } else if (word == 0) {\n+        handle_bulk_right(offset, word_len);\n+      } else {\n+        for (int64_t i = 0; i < word_len; ++i) {\n+          if (BitUtil::GetBit(cond_data, cond.offset + offset + i)) {\n+            handle_each_left(offset + i);\n+          } else {\n+            handle_each_right(offset + i);\n+          }\n+        }\n+      }\n+    }\n+    offset += word_len;\n+  }\n+\n+  cnt = cond_reader.trailing_bytes();\n+  while (cnt--) {\n+    int valid_bits;\n+    uint8_t byte = cond_reader.NextTrailingByte(valid_bits);\n+    if (invert) {\n+      if (byte == UINT8_MAX && valid_bits == 8) {\n+        handle_bulk_right(offset, 8);\n+      } else if (byte == 0 && valid_bits == 8) {\n+        handle_bulk_left(offset, 8);\n+      } else {\n+        for (int i = 0; i < valid_bits; ++i) {\n+          if (!BitUtil::GetBit(cond_data, cond.offset + offset + i)) {\n+            handle_each_right(offset + i);\n+          } else {\n+            handle_each_left(offset + i);\n+          }\n+        }\n+      }\n+    } else {\n+      if (byte == UINT8_MAX && valid_bits == 8) {\n+        handle_bulk_left(offset, 8);\n+      } else if (byte == 0 && valid_bits == 8) {\n+        handle_bulk_right(offset, 8);\n+      } else {\n+        for (int i = 0; i < valid_bits; ++i) {\n+          if (BitUtil::GetBit(cond_data, cond.offset + offset + i)) {\n+            handle_each_left(offset + i);\n+          } else {\n+            handle_each_right(offset + i);\n+          }\n+        }\n+      }\n+    }\n+    offset += 8;  // doesn't necessarily have to be valid_bits here. Because it\n+    // valid_bits < 8, then the loop will exit\n\nReview comment:\n       this is a little confusing but the intent is, valid_bits < 8 => cnt == 0?\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -455,6 +602,302 @@ struct IfElseFunctor<Type, enable_if_number<Type>> {\n   }\n };\n \n+template <typename Type>\n+struct IfElseFunctor<Type, enable_if_base_binary<Type>> {\n+  using OffsetType = typename TypeTraits<Type>::OffsetType::c_type;\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+\n+  // A - Array, S - Scalar, X = Array/Scalar\n+\n+  // SXX\n+  static Status Call(KernelContext* ctx, const BooleanScalar& cond, const Datum& left,\n+                     const Datum& right, Datum* out) {\n+    if (left.is_scalar() && right.is_scalar()) {\n+      if (cond.is_valid) {\n+        *out = cond.value ? left.scalar() : right.scalar();\n+      } else {\n+        *out = MakeNullScalar(left.type());\n+      }\n+      return Status::OK();\n+    }\n+    // either left or right is an array. Output is always an array\n+    int64_t out_arr_len = std::max(left.length(), right.length());\n+    if (!cond.is_valid) {\n+      // cond is null; just create a null array\n+      ARROW_ASSIGN_OR_RAISE(*out,\n+                            MakeArrayOfNull(left.type(), out_arr_len, ctx->memory_pool()))\n+      return Status::OK();\n+    }\n+\n+    const auto& valid_data = cond.value ? left : right;\n+    if (valid_data.is_array()) {\n+      *out = valid_data;\n+    } else {\n+      // valid data is a scalar that needs to be broadcasted\n+      ARROW_ASSIGN_OR_RAISE(*out, MakeArrayFromScalar(*valid_data.scalar(), out_arr_len,\n+                                                      ctx->memory_pool()));\n+    }\n+    return Status::OK();\n+  }\n+\n+  //  AAA\n+  static Status Call(KernelContext* ctx, const ArrayData& cond, const ArrayData& left,\n+                     const ArrayData& right, ArrayData* out) {\n+    const uint8_t* cond_data = cond.buffers[1]->data();\n+    BitBlockCounter bit_counter(cond_data, cond.offset, cond.length);\n+\n+    const auto* left_offsets = left.GetValues<OffsetType>(1);\n+    const uint8_t* left_data = left.buffers[2]->data();\n+    const auto* right_offsets = right.GetValues<OffsetType>(1);\n+    const uint8_t* right_data = right.buffers[2]->data();\n+\n+    // reserve an additional space\n+    ARROW_ASSIGN_OR_RAISE(auto out_offset_buf,\n+                          ctx->Allocate((cond.length + 1) * sizeof(OffsetType)));\n+    auto* out_offsets = reinterpret_cast<OffsetType*>(out_offset_buf->mutable_data());\n+    out_offsets[0] = 0;\n+\n+    // allocate data buffer conservatively\n\nReview comment:\n       The 'most conservative' would be to allocate the sum of the value lengths.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else_test.cc\n##########\n@@ -316,5 +313,98 @@ TEST_F(TestIfElseKernel, IfElseDispatchBest) {\n   CheckDispatchBest(name, {null(), uint8(), int8()}, {boolean(), int16(), int16()});\n }\n \n+template <typename Type>\n+class TestIfElseBaseBinary : public ::testing::Test {};\n+\n+TYPED_TEST_SUITE(TestIfElseBaseBinary, BinaryTypes);\n+\n+TYPED_TEST(TestIfElseBaseBinary, IfElseBaseBinary) {\n\nReview comment:\n       IMO these cases could be consolidated into one or two checks since there are only 12 cases here (or 5 if you want to prune: null cond, true cond with null/non-null left array, false cond with null/non-null right array).\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else_benchmark.cc\n##########\n@@ -48,13 +48,13 @@ static void IfElseBench(benchmark::State& state) {\n     ABORT_NOT_OK(IfElse(cond->Slice(offset), left->Slice(offset), right->Slice(offset)));\n   }\n \n-  state.SetBytesProcessed(state.iterations() *\n\nReview comment:\n       You could use BaseBinaryArray::values_length() if you want to write a specialized case.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-01T20:59:09.799+0000",
                    "updated": "2021-07-01T20:59:09.799+0000",
                    "started": "2021-07-01T20:59:09.799+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "617835",
                    "issueId": "13381940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381940/worklog/617862",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nirandaperera commented on a change in pull request #10538:\nURL: https://github.com/apache/arrow/pull/10538#discussion_r662606715\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -455,6 +602,302 @@ struct IfElseFunctor<Type, enable_if_number<Type>> {\n   }\n };\n \n+template <typename Type>\n+struct IfElseFunctor<Type, enable_if_base_binary<Type>> {\n+  using OffsetType = typename TypeTraits<Type>::OffsetType::c_type;\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+\n+  // A - Array, S - Scalar, X = Array/Scalar\n+\n+  // SXX\n+  static Status Call(KernelContext* ctx, const BooleanScalar& cond, const Datum& left,\n+                     const Datum& right, Datum* out) {\n+    if (left.is_scalar() && right.is_scalar()) {\n+      if (cond.is_valid) {\n+        *out = cond.value ? left.scalar() : right.scalar();\n+      } else {\n+        *out = MakeNullScalar(left.type());\n+      }\n+      return Status::OK();\n+    }\n+    // either left or right is an array. Output is always an array\n+    int64_t out_arr_len = std::max(left.length(), right.length());\n+    if (!cond.is_valid) {\n+      // cond is null; just create a null array\n+      ARROW_ASSIGN_OR_RAISE(*out,\n+                            MakeArrayOfNull(left.type(), out_arr_len, ctx->memory_pool()))\n+      return Status::OK();\n+    }\n+\n+    const auto& valid_data = cond.value ? left : right;\n+    if (valid_data.is_array()) {\n+      *out = valid_data;\n+    } else {\n+      // valid data is a scalar that needs to be broadcasted\n+      ARROW_ASSIGN_OR_RAISE(*out, MakeArrayFromScalar(*valid_data.scalar(), out_arr_len,\n+                                                      ctx->memory_pool()));\n+    }\n+    return Status::OK();\n+  }\n+\n+  //  AAA\n+  static Status Call(KernelContext* ctx, const ArrayData& cond, const ArrayData& left,\n+                     const ArrayData& right, ArrayData* out) {\n+    const uint8_t* cond_data = cond.buffers[1]->data();\n+    BitBlockCounter bit_counter(cond_data, cond.offset, cond.length);\n+\n+    const auto* left_offsets = left.GetValues<OffsetType>(1);\n+    const uint8_t* left_data = left.buffers[2]->data();\n+    const auto* right_offsets = right.GetValues<OffsetType>(1);\n+    const uint8_t* right_data = right.buffers[2]->data();\n+\n+    // reserve an additional space\n+    ARROW_ASSIGN_OR_RAISE(auto out_offset_buf,\n+                          ctx->Allocate((cond.length + 1) * sizeof(OffsetType)));\n+    auto* out_offsets = reinterpret_cast<OffsetType*>(out_offset_buf->mutable_data());\n+    out_offsets[0] = 0;\n+\n+    // allocate data buffer conservatively\n\nReview comment:\n       Ah! I actually had sum previously and I changed it to max! :disappointed: Thank you for catching this!!!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-01T21:38:02.915+0000",
                    "updated": "2021-07-01T21:38:02.915+0000",
                    "started": "2021-07-01T21:38:02.915+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "617862",
                    "issueId": "13381940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381940/worklog/618162",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nirandaperera commented on a change in pull request #10538:\nURL: https://github.com/apache/arrow/pull/10538#discussion_r663113754\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -78,19 +80,37 @@ Status PromoteNullsVisitor(KernelContext* ctx, const Datum& cond_d, const Datum&\n   // cond.valid & (cond.data & left.valid | ~cond.data & right.valid)\n   // In the following cases, we dont need to allocate out_valid bitmap\n \n-  // if cond & left & right all ones, then output is all valid. output validity buffer\n-  // is already allocated, hence set all bits\n+  // if cond & left & right all ones, then output is all valid.\n+  // if output validity buffer is already allocated (NullHandling::\n+  // COMPUTED_PREALLOCATE) -> set all bits\n+  // else, return nullptr\n   if (cond_const == kAllValid && left_const == kAllValid && right_const == kAllValid) {\n-    BitUtil::SetBitmap(output->buffers[0]->mutable_data(), output->offset,\n-                       output->length);\n+    if (AllocateMem::value) {\n+      output->buffers[0] = nullptr;\n+    } else {  // NullHandling::COMPUTED_NO_PREALLOCATE\n\nReview comment:\n       yes it does. My bad! \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-02T16:02:13.672+0000",
                    "updated": "2021-07-02T16:02:13.672+0000",
                    "started": "2021-07-02T16:02:13.672+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "618162",
                    "issueId": "13381940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381940/worklog/618165",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nirandaperera commented on a change in pull request #10538:\nURL: https://github.com/apache/arrow/pull/10538#discussion_r663116352\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -455,6 +602,302 @@ struct IfElseFunctor<Type, enable_if_number<Type>> {\n   }\n };\n \n+template <typename Type>\n+struct IfElseFunctor<Type, enable_if_base_binary<Type>> {\n+  using OffsetType = typename TypeTraits<Type>::OffsetType::c_type;\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+\n+  // A - Array, S - Scalar, X = Array/Scalar\n+\n+  // SXX\n+  static Status Call(KernelContext* ctx, const BooleanScalar& cond, const Datum& left,\n+                     const Datum& right, Datum* out) {\n+    if (left.is_scalar() && right.is_scalar()) {\n+      if (cond.is_valid) {\n+        *out = cond.value ? left.scalar() : right.scalar();\n+      } else {\n+        *out = MakeNullScalar(left.type());\n+      }\n+      return Status::OK();\n+    }\n+    // either left or right is an array. Output is always an array\n+    int64_t out_arr_len = std::max(left.length(), right.length());\n+    if (!cond.is_valid) {\n+      // cond is null; just create a null array\n+      ARROW_ASSIGN_OR_RAISE(*out,\n+                            MakeArrayOfNull(left.type(), out_arr_len, ctx->memory_pool()))\n+      return Status::OK();\n+    }\n+\n+    const auto& valid_data = cond.value ? left : right;\n+    if (valid_data.is_array()) {\n+      *out = valid_data;\n+    } else {\n+      // valid data is a scalar that needs to be broadcasted\n+      ARROW_ASSIGN_OR_RAISE(*out, MakeArrayFromScalar(*valid_data.scalar(), out_arr_len,\n+                                                      ctx->memory_pool()));\n+    }\n+    return Status::OK();\n+  }\n+\n+  //  AAA\n+  static Status Call(KernelContext* ctx, const ArrayData& cond, const ArrayData& left,\n+                     const ArrayData& right, ArrayData* out) {\n+    const uint8_t* cond_data = cond.buffers[1]->data();\n+    BitBlockCounter bit_counter(cond_data, cond.offset, cond.length);\n+\n+    const auto* left_offsets = left.GetValues<OffsetType>(1);\n+    const uint8_t* left_data = left.buffers[2]->data();\n+    const auto* right_offsets = right.GetValues<OffsetType>(1);\n+    const uint8_t* right_data = right.buffers[2]->data();\n+\n+    // reserve an additional space\n+    ARROW_ASSIGN_OR_RAISE(auto out_offset_buf,\n+                          ctx->Allocate((cond.length + 1) * sizeof(OffsetType)));\n+    auto* out_offsets = reinterpret_cast<OffsetType*>(out_offset_buf->mutable_data());\n+    out_offsets[0] = 0;\n+\n+    // allocate data buffer conservatively\n\nReview comment:\n       @lidavidm I tried with the builders. There's some perf penalty but the code is much more readable and manageable. So, I'll change binary ones to that. I simplified the code a lot TBH. Let me push that changes \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-02T16:06:57.580+0000",
                    "updated": "2021-07-02T16:06:57.580+0000",
                    "started": "2021-07-02T16:06:57.580+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "618165",
                    "issueId": "13381940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381940/worklog/618193",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #10538:\nURL: https://github.com/apache/arrow/pull/10538#issuecomment-873158635\n\n\n   N.B. it looks like this segfaults in the tests on Windows MSVC 2019 (https://github.com/apache/arrow/pull/10538/checks?check_run_id=2966481230#step:8:339) and there are various errors on Clang, MSVC, and MinGW (mostly related to implicit casts or needing to explicitly parameterize std::max).\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-02T17:42:14.050+0000",
                    "updated": "2021-07-02T17:42:14.050+0000",
                    "started": "2021-07-02T17:42:14.050+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "618193",
                    "issueId": "13381940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381940/worklog/618209",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10538:\nURL: https://github.com/apache/arrow/pull/10538#discussion_r663193637\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -443,16 +451,217 @@ struct IfElseFunctor<Type, enable_if_number<Type>> {\n \n     // selectively copy values from left data\n     T left_data = internal::UnboxScalar<Type>::Unbox(left);\n-    RunIfElseLoop(\n-        cond,\n-        [&](int64_t data_offset, int64_t num_elems) {\n-          std::fill(out_values + data_offset, out_values + data_offset + num_elems,\n-                    left_data);\n+    RunIfElseLoop(cond, [&](int64_t data_offset, int64_t num_elems) {\n+      std::fill(out_values + data_offset, out_values + data_offset + num_elems,\n+                left_data);\n+    });\n+\n+    return Status::OK();\n+  }\n+};\n+\n+template <typename Type>\n+struct IfElseFunctor<Type, enable_if_base_binary<Type>> {\n+  using OffsetType = typename TypeTraits<Type>::OffsetType::c_type;\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+  using BuilderType = typename TypeTraits<Type>::BuilderType;\n+\n+  // A - Array, S - Scalar, X = Array/Scalar\n+\n+  // SXX\n+  static Status Call(KernelContext* ctx, const BooleanScalar& cond, const Datum& left,\n+                     const Datum& right, Datum* out) {\n+    if (left.is_scalar() && right.is_scalar()) {\n+      if (cond.is_valid) {\n+        *out = cond.value ? left.scalar() : right.scalar();\n+      } else {\n+        *out = MakeNullScalar(left.type());\n+      }\n+      return Status::OK();\n+    }\n+    // either left or right is an array. Output is always an array\n+    int64_t out_arr_len = std::max(left.length(), right.length());\n+    if (!cond.is_valid) {\n+      // cond is null; just create a null array\n+      ARROW_ASSIGN_OR_RAISE(*out,\n+                            MakeArrayOfNull(left.type(), out_arr_len, ctx->memory_pool()))\n+      return Status::OK();\n+    }\n+\n+    const auto& valid_data = cond.value ? left : right;\n+    if (valid_data.is_array()) {\n+      *out = valid_data;\n+    } else {\n+      // valid data is a scalar that needs to be broadcasted\n+      ARROW_ASSIGN_OR_RAISE(*out, MakeArrayFromScalar(*valid_data.scalar(), out_arr_len,\n+                                                      ctx->memory_pool()));\n+    }\n+    return Status::OK();\n+  }\n+\n+  //  AAA\n+  static Status Call(KernelContext* ctx, const ArrayData& cond, const ArrayData& left,\n+                     const ArrayData& right, ArrayData* out) {\n+    const uint8_t* cond_data = cond.buffers[1]->data();\n+    BitBlockCounter bit_counter(cond_data, cond.offset, cond.length);\n+\n+    const auto* left_offsets = left.GetValues<OffsetType>(1);\n+    const uint8_t* left_data = left.buffers[2]->data();\n+    const auto* right_offsets = right.GetValues<OffsetType>(1);\n+    const uint8_t* right_data = right.buffers[2]->data();\n+\n+    // allocate data buffer conservatively\n+    int64_t data_buff_alloc = left_offsets[left.length] - left_offsets[0] +\n+                              right_offsets[right.length] - right_offsets[0];\n+\n+    BuilderType builder(ctx->memory_pool());\n+    ARROW_RETURN_NOT_OK(builder.Reserve(cond.length + 1));\n+    ARROW_RETURN_NOT_OK(builder.ReserveData(data_buff_alloc));\n+\n+    RunLoop(\n+        cond, *out,\n+        [&](int64_t i) {\n+          builder.UnsafeAppend(left_data + left_offsets[i],\n+                               left_offsets[i + 1] - left_offsets[i]);\n+        },\n+        [&](int64_t i) {\n+          builder.UnsafeAppend(right_data + right_offsets[i],\n+                               right_offsets[i + 1] - right_offsets[i]);\n+        },\n+        [&]() { builder.AppendNull(); });\n+    ARROW_ASSIGN_OR_RAISE(auto out_arr, builder.Finish());\n+\n+    out->buffers[0] = std::move(out_arr->data()->buffers[0]);\n+    out->buffers[1] = std::move(out_arr->data()->buffers[1]);\n+    out->buffers[2] = std::move(out_arr->data()->buffers[2]);\n\nReview comment:\n       nit: maybe also copy over null_count?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-02T18:47:18.558+0000",
                    "updated": "2021-07-02T18:47:18.558+0000",
                    "started": "2021-07-02T18:47:18.557+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "618209",
                    "issueId": "13381940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381940/worklog/618230",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nirandaperera commented on a change in pull request #10538:\nURL: https://github.com/apache/arrow/pull/10538#discussion_r663215493\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -274,18 +310,129 @@ static void RunIfElseLoop(const ArrayData& cond, HandleBulk handle_bulk,\n }\n \n template <typename HandleBulk, typename HandleEach>\n-static void RunIfElseLoopInverted(const ArrayData& cond, HandleBulk handle_bulk,\n-                                  HandleEach handle_each) {\n-  return RunIfElseLoop<HandleBulk, HandleEach, true>(cond, handle_bulk, handle_each);\n+static void RunIfElseLoopInverted(const ArrayData& cond, const HandleBulk& handle_bulk,\n+                                  const HandleEach& handle_each) {\n+  RunIfElseLoop<HandleBulk, HandleEach, true>(cond, handle_bulk, handle_each);\n+}\n+\n+/// Runs the main if_else loop.\n+///\n+/// `HandleBulk` has the signature:\n+///     [](int64_t offset, int64_t length){...}\n+/// It should copy `length` number of elements from source array to output array with\n+/// `offset` offset in both arrays\n+///\n+/// `HandleEach` has the signature:\n+///     [](int64_t offset){...}\n+/// It should copy single element from source array to output array with `offset`\n+/// offset in both arrays\n+template <typename HandleBulkLeft, typename HandleBulkRight, typename HandleEachLeft,\n+          typename HandleEachRight, bool invert = false>\n+static void RunIfElseLoop(const ArrayData& cond, const HandleBulkLeft& handle_bulk_left,\n+                          const HandleBulkRight& handle_bulk_right,\n+                          const HandleEachLeft& handle_each_left,\n+                          const HandleEachRight& handle_each_right) {\n+  int64_t offset = 0;\n+  const auto* cond_data = cond.buffers[1]->data();  // this is a BoolArray\n+\n+  // There are multiple options for this one. Ex: BitBlockCounter, BitmapWordReader,\n+  // BitRunReader, etc. BitRunReader would be efficient for longer contiguous values in\n+  // the cond data buffer.\n+  // BitmapWordReader was slightly better performant that BitBlockCounter.\n+  BitmapWordReader<Word> cond_reader(cond_data, cond.offset, cond.length);\n+\n+  int64_t cnt = cond_reader.words();\n+  while (cnt--) {\n+    Word word = cond_reader.NextWord();\n+    if (invert) {\n+      if (word == UINT64_MAX) {\n+        handle_bulk_right(offset, word_len);\n+      } else if (word == 0) {\n+        handle_bulk_left(offset, word_len);\n+      } else {\n+        for (int64_t i = 0; i < word_len; ++i) {\n+          if (!BitUtil::GetBit(cond_data, cond.offset + offset + i)) {\n+            handle_each_right(offset + i);\n+          } else {\n+            handle_each_left(offset + i);\n+          }\n+        }\n+      }\n+    } else {\n+      if (word == UINT64_MAX) {\n+        handle_bulk_left(offset, word_len);\n+      } else if (word == 0) {\n+        handle_bulk_right(offset, word_len);\n+      } else {\n+        for (int64_t i = 0; i < word_len; ++i) {\n+          if (BitUtil::GetBit(cond_data, cond.offset + offset + i)) {\n+            handle_each_left(offset + i);\n+          } else {\n+            handle_each_right(offset + i);\n+          }\n+        }\n+      }\n+    }\n+    offset += word_len;\n+  }\n+\n+  cnt = cond_reader.trailing_bytes();\n+  while (cnt--) {\n+    int valid_bits;\n+    uint8_t byte = cond_reader.NextTrailingByte(valid_bits);\n+    if (invert) {\n+      if (byte == UINT8_MAX && valid_bits == 8) {\n+        handle_bulk_right(offset, 8);\n+      } else if (byte == 0 && valid_bits == 8) {\n+        handle_bulk_left(offset, 8);\n+      } else {\n+        for (int i = 0; i < valid_bits; ++i) {\n+          if (!BitUtil::GetBit(cond_data, cond.offset + offset + i)) {\n+            handle_each_right(offset + i);\n+          } else {\n+            handle_each_left(offset + i);\n+          }\n+        }\n+      }\n+    } else {\n+      if (byte == UINT8_MAX && valid_bits == 8) {\n+        handle_bulk_left(offset, 8);\n+      } else if (byte == 0 && valid_bits == 8) {\n+        handle_bulk_right(offset, 8);\n+      } else {\n+        for (int i = 0; i < valid_bits; ++i) {\n+          if (BitUtil::GetBit(cond_data, cond.offset + offset + i)) {\n+            handle_each_left(offset + i);\n+          } else {\n+            handle_each_right(offset + i);\n+          }\n+        }\n+      }\n+    }\n+    offset += 8;  // doesn't necessarily have to be valid_bits here. Because it\n+    // valid_bits < 8, then the loop will exit\n\nReview comment:\n       No, this is only done for the bytes at the end. So, we had a 100 lengthed bitmap. Then, first 64 would fall into the `Word` block. Rest 36, would be handled byte-by-byte (8 + 8+ 8+ 8 + 4). So, `cnt=5`. When `valid_bits< 8` that means the `while` loop end on the next iteration. And `offset` value is not used beyond the loop. So, we can just keep on incrementing by 8. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-02T19:40:11.054+0000",
                    "updated": "2021-07-02T19:40:11.054+0000",
                    "started": "2021-07-02T19:40:11.054+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "618230",
                    "issueId": "13381940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381940/worklog/618233",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nirandaperera commented on a change in pull request #10538:\nURL: https://github.com/apache/arrow/pull/10538#discussion_r663218611\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -455,6 +602,302 @@ struct IfElseFunctor<Type, enable_if_number<Type>> {\n   }\n };\n \n+template <typename Type>\n+struct IfElseFunctor<Type, enable_if_base_binary<Type>> {\n+  using OffsetType = typename TypeTraits<Type>::OffsetType::c_type;\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+\n+  // A - Array, S - Scalar, X = Array/Scalar\n+\n+  // SXX\n+  static Status Call(KernelContext* ctx, const BooleanScalar& cond, const Datum& left,\n+                     const Datum& right, Datum* out) {\n+    if (left.is_scalar() && right.is_scalar()) {\n+      if (cond.is_valid) {\n+        *out = cond.value ? left.scalar() : right.scalar();\n+      } else {\n+        *out = MakeNullScalar(left.type());\n+      }\n+      return Status::OK();\n+    }\n+    // either left or right is an array. Output is always an array\n+    int64_t out_arr_len = std::max(left.length(), right.length());\n\nReview comment:\n       `batch` is not available at this point :slightly_smiling_face: \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-02T19:48:34.152+0000",
                    "updated": "2021-07-02T19:48:34.152+0000",
                    "started": "2021-07-02T19:48:34.152+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "618233",
                    "issueId": "13381940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381940/worklog/618236",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10538:\nURL: https://github.com/apache/arrow/pull/10538#discussion_r663219563\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -455,6 +602,302 @@ struct IfElseFunctor<Type, enable_if_number<Type>> {\n   }\n };\n \n+template <typename Type>\n+struct IfElseFunctor<Type, enable_if_base_binary<Type>> {\n+  using OffsetType = typename TypeTraits<Type>::OffsetType::c_type;\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+\n+  // A - Array, S - Scalar, X = Array/Scalar\n+\n+  // SXX\n+  static Status Call(KernelContext* ctx, const BooleanScalar& cond, const Datum& left,\n+                     const Datum& right, Datum* out) {\n+    if (left.is_scalar() && right.is_scalar()) {\n+      if (cond.is_valid) {\n+        *out = cond.value ? left.scalar() : right.scalar();\n+      } else {\n+        *out = MakeNullScalar(left.type());\n+      }\n+      return Status::OK();\n+    }\n+    // either left or right is an array. Output is always an array\n+    int64_t out_arr_len = std::max(left.length(), right.length());\n\nReview comment:\n       Oh whoops.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-02T19:50:58.340+0000",
                    "updated": "2021-07-02T19:50:58.340+0000",
                    "started": "2021-07-02T19:50:58.339+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "618236",
                    "issueId": "13381940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381940/worklog/618258",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nirandaperera commented on a change in pull request #10538:\nURL: https://github.com/apache/arrow/pull/10538#discussion_r663240445\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else_test.cc\n##########\n@@ -316,5 +313,98 @@ TEST_F(TestIfElseKernel, IfElseDispatchBest) {\n   CheckDispatchBest(name, {null(), uint8(), int8()}, {boolean(), int16(), int16()});\n }\n \n+template <typename Type>\n+class TestIfElseBaseBinary : public ::testing::Test {};\n+\n+TYPED_TEST_SUITE(TestIfElseBaseBinary, BinaryTypes);\n+\n+TYPED_TEST(TestIfElseBaseBinary, IfElseBaseBinary) {\n\nReview comment:\n       well, there are 64 cases TBH. Each param can be null/ non-null and scalar/ array (4 variations). Since we have 3 params we have 4*4*4 = 64 permutations. :slightly_smiling_face: \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-02T20:47:44.931+0000",
                    "updated": "2021-07-02T20:47:44.931+0000",
                    "started": "2021-07-02T20:47:44.931+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "618258",
                    "issueId": "13381940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381940/worklog/618260",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nirandaperera commented on a change in pull request #10538:\nURL: https://github.com/apache/arrow/pull/10538#discussion_r663240445\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else_test.cc\n##########\n@@ -316,5 +313,98 @@ TEST_F(TestIfElseKernel, IfElseDispatchBest) {\n   CheckDispatchBest(name, {null(), uint8(), int8()}, {boolean(), int16(), int16()});\n }\n \n+template <typename Type>\n+class TestIfElseBaseBinary : public ::testing::Test {};\n+\n+TYPED_TEST_SUITE(TestIfElseBaseBinary, BinaryTypes);\n+\n+TYPED_TEST(TestIfElseBaseBinary, IfElseBaseBinary) {\n\nReview comment:\n       well, there are 64 cases TBH. Each param can be null/ non-null and scalar/ array (4 variations). Since we have 3 params we have 4x4x4 = 64 permutations. :slightly_smiling_face: \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-02T20:48:35.056+0000",
                    "updated": "2021-07-02T20:48:35.056+0000",
                    "started": "2021-07-02T20:48:35.056+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "618260",
                    "issueId": "13381940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381940/worklog/618261",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nirandaperera commented on a change in pull request #10538:\nURL: https://github.com/apache/arrow/pull/10538#discussion_r663241697\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else_test.cc\n##########\n@@ -316,5 +313,98 @@ TEST_F(TestIfElseKernel, IfElseDispatchBest) {\n   CheckDispatchBest(name, {null(), uint8(), int8()}, {boolean(), int16(), int16()});\n }\n \n+template <typename Type>\n+class TestIfElseBaseBinary : public ::testing::Test {};\n+\n+TYPED_TEST_SUITE(TestIfElseBaseBinary, BinaryTypes);\n+\n+TYPED_TEST(TestIfElseBaseBinary, IfElseBaseBinary) {\n\nReview comment:\n       `CheckWithDifferentShapes` actually checks for all those cases + with offsets. But I agree, in `CheckWithDifferentShapes` it could check similar cases redundantly in several iterations. But we decided to leave it as it is. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-02T20:50:59.724+0000",
                    "updated": "2021-07-02T20:50:59.724+0000",
                    "started": "2021-07-02T20:50:59.724+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "618261",
                    "issueId": "13381940"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381940/worklog/618290",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10538:\nURL: https://github.com/apache/arrow/pull/10538#discussion_r663273941\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_if_else.cc\n##########\n@@ -201,70 +226,61 @@ static constexpr int64_t word_len = sizeof(Word) * 8;\n /// Runs the main if_else loop. Here, it is expected that the right data has already\n /// been copied to the output.\n /// If `invert` is meant to invert the cond.data. If is set to `true`, then the\n-/// buffer will be inverted before calling the handle_bulk or handle_each functions.\n+/// buffer will be inverted before calling the handle_block or handle_each functions.\n /// This is useful, when left is an array and right is scalar. Then rather than\n /// copying data from the right to output, we can copy left data to the output and\n /// invert the cond data to fill right values. Filling out with a scalar is presumed to\n /// be more efficient than filling with an array\n-template <typename HandleBulk, typename HandleEach, bool invert = false>\n-static void RunIfElseLoop(const ArrayData& cond, HandleBulk handle_bulk,\n-                          HandleEach handle_each) {\n+///\n+/// `HandleBlock` has the signature:\n+///     [](int64_t offset, int64_t length){...}\n+/// It should copy `length` number of elements from source array to output array with\n+/// `offset` offset in both arrays\n+template <typename HandleBlock, bool invert = false>\n+void RunIfElseLoop(const ArrayData& cond, const HandleBlock& handle_block) {\n   int64_t data_offset = 0;\n   int64_t bit_offset = cond.offset;\n   const auto* cond_data = cond.buffers[1]->data();  // this is a BoolArray\n \n   BitmapWordReader<Word> cond_reader(cond_data, cond.offset, cond.length);\n \n+  constexpr Word pickAll = invert ? 0 : UINT64_MAX;\n+  constexpr Word pickNone = ~pickAll;\n+\n   int64_t cnt = cond_reader.words();\n   while (cnt--) {\n     Word word = cond_reader.NextWord();\n-    if (invert) {\n-      if (word == 0) {\n-        handle_bulk(data_offset, word_len);\n-      } else if (word != UINT64_MAX) {\n-        for (int64_t i = 0; i < word_len; ++i) {\n-          if (!BitUtil::GetBit(cond_data, bit_offset + i)) {\n-            handle_each(data_offset + i);\n-          }\n-        }\n-      }\n-    } else {\n-      if (word == UINT64_MAX) {\n-        handle_bulk(data_offset, word_len);\n-      } else if (word) {\n-        for (int64_t i = 0; i < word_len; ++i) {\n-          if (BitUtil::GetBit(cond_data, bit_offset + i)) {\n-            handle_each(data_offset + i);\n-          }\n+\n+    // todo: check if this passes MSVC\n\nReview comment:\n       Seems like it does.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-07-02T22:48:02.201+0000",
                    "updated": "2021-07-02T22:48:02.201+0000",
                    "started": "2021-07-02T22:48:02.201+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "618290",
                    "issueId": "13381940"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 14400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@753c81a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f52d2d3[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@50552e45[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@29e8bad6[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4d7e12f4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@7d727beb[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@42c5506[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@68fe615f[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@552a2706[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@3b69b36b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5d8b5565[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@46643312[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 14400,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Jul 16 01:22:25 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-07-16T01:22:25.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12955/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-06-03T16:01:23.000+0000",
        "updated": "2021-07-16T15:17:10.000+0000",
        "timeoriginalestimate": null,
        "description": "Current if_else kernel only supports fixed sized primitive, temporal, boolean, and null types only.\r\n\r\nAdd the following type support\r\n * Fixed length binary\r\n * Variable length binary\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 14400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add additional type support for if_else kernel",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381940/comment/17381649",
                    "id": "17381649",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 10538\n[https://github.com/apache/arrow/pull/10538]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-07-16T01:22:25.905+0000",
                    "updated": "2021-07-16T01:22:25.905+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0rmns:",
        "customfield_12314139": null
    }
}