{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13150243",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13150243",
    "key": "ARROW-2398",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333773",
                "id": "12333773",
                "name": "Rust"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=andygrove",
            "name": "andygrove",
            "key": "andygrove",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=andygrove&avatarId=28239",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=andygrove&avatarId=28239",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=andygrove&avatarId=28239",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=andygrove&avatarId=28239"
            },
            "displayName": "Andy Grove",
            "active": true,
            "timeZone": "America/Denver"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2398/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1613495e[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1a909e08[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5e7583e1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@408b26f9[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4c748a73[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@1d4f00d6[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f57f215[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@76f2bde8[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1e3d9657[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7b916cf6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2b06eecb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@48781bbe[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Apr 06 13:16:06 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-04-06T13:16:06.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2398/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-04-05T08:57:25.000+0000",
        "updated": "2018-04-06T13:16:06.000+0000",
        "timeoriginalestimate": null,
        "description": "This PR implements a builder so that buffers can be populated directly in aligned memory (as opposed to being created from Vec<T>).\r\n\r\n\u00a0\r\n\r\nhttps://github.com/apache/arrow/pull/1838",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Rust] Provide a zero-copy builder for type-safe Buffer<T>",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13150243/comment/16426642",
                    "id": "16426642",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "andygrove commented on issue #1838: ARROW-2398: [Rust] Create Builder<T> for building buffers directly in aligned memory\nURL: https://github.com/apache/arrow/pull/1838#issuecomment-378867157\n \n \n   rustfmt has stopped working on my system, so CI will probably fail until I fix that.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-05T08:58:14.044+0000",
                    "updated": "2018-04-05T08:58:14.044+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13150243/comment/16426809",
                    "id": "16426809",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy commented on a change in pull request #1838: ARROW-2398: [Rust] Create Builder<T> for building buffers directly in aligned memory\nURL: https://github.com/apache/arrow/pull/1838#discussion_r179441418\n \n \n\n ##########\n File path: rust/src/buffer.rs\n ##########\n @@ -18,10 +18,74 @@\n use bytes::Bytes;\n use libc;\n use std::mem;\n+use std::ptr;\n use std::slice;\n \n use super::memory::*;\n \n+/// Buffer builder with zero-copy build method\n+pub struct Builder<T> {\n+    data: *mut T,\n+    len: usize,\n+    capacity: usize,\n+}\n+\n+impl<T> Builder<T> {\n+    /// Creates a builder with a default capacity\n+    pub fn new() -> Self {\n+        Builder::with_capacity(64)\n+    }\n+\n+    /// Creates a builder with a fixed capacity\n+    pub fn with_capacity(capacity: usize) -> Self {\n+        let sz = mem::size_of::<T>();\n+        let buffer = allocate_aligned((capacity * sz) as i64).unwrap();\n+        Builder {\n+            len: 0,\n+            capacity,\n+            data: unsafe { mem::transmute::<*const u8, *mut T>(buffer) },\n+        }\n+    }\n+\n+    /// Push a value into the builder, growing the internal buffer as needed\n+    pub fn push(&mut self, v: T) {\n+        assert!(!self.data.is_null());\n+        if self.len == self.capacity {\n+            let sz = mem::size_of::<T>();\n+            let new_capacity = self.capacity * 2;\n+            unsafe {\n+                let old_buffer = self.data;\n+                let new_buffer = allocate_aligned((new_capacity * sz) as i64).unwrap();\n+                libc::memcpy(\n+                    mem::transmute::<*const u8, *mut libc::c_void>(new_buffer),\n+                    mem::transmute::<*const T, *const libc::c_void>(old_buffer),\n+                    self.len * sz,\n+                );\n+                self.capacity = new_capacity;\n+                self.data = mem::transmute::<*const u8, *mut T>(new_buffer);\n+                mem::drop(old_buffer);\n+            }\n+        }\n+        assert!(self.len < self.capacity);\n+        unsafe {\n+            *self.data.offset(self.len as isize) = v;\n+        }\n+        self.len += 1;\n+    }\n+\n+    /// Build a Buffer from the existing memory\n+    pub fn build(&mut self) -> Buffer<T> {\n \n Review comment:\n   Is there a reason that this is called `build`? In C++ we call this `Finish` and it would be nice to have them consistent. If `build` is a typical name used in Rust, it's probably better to keep it as is.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-05T12:14:30.787+0000",
                    "updated": "2018-04-05T12:14:30.787+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13150243/comment/16426910",
                    "id": "16426910",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "andygrove commented on issue #1838: ARROW-2398: [Rust] Create Builder<T> for building buffers directly in aligned memory\nURL: https://github.com/apache/arrow/pull/1838#issuecomment-378933133\n \n \n   @xhochy I renamed it to finish(). It's best to keep it consistent within the project.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-05T13:20:14.038+0000",
                    "updated": "2018-04-05T13:20:14.038+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13150243/comment/16426946",
                    "id": "16426946",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "andygrove commented on issue #1838: ARROW-2398: [Rust] Create Builder<T> for building buffers directly in aligned memory\nURL: https://github.com/apache/arrow/pull/1838#issuecomment-378941788\n \n \n   Moved builder into separate file for consistency with C++. Also implemented `Drop` for builder (in case builder was created but finish was not called).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-05T13:47:17.519+0000",
                    "updated": "2018-04-05T13:47:17.519+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13150243/comment/16426990",
                    "id": "16426990",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1838: ARROW-2398: [Rust] Create Builder<T> for building buffers directly in aligned memory\nURL: https://github.com/apache/arrow/pull/1838#issuecomment-378950520\n \n \n   @andygrove I think you forgot to add `buffer.rs`.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-05T14:13:07.482+0000",
                    "updated": "2018-04-05T14:13:07.482+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13150243/comment/16426996",
                    "id": "16426996",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "andygrove commented on issue #1838: ARROW-2398: [Rust] Create Builder<T> for building buffers directly in aligned memory\nURL: https://github.com/apache/arrow/pull/1838#issuecomment-378952198\n \n \n   Oops, added. Also ran `rustfmt` again.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-05T14:18:23.274+0000",
                    "updated": "2018-04-05T14:18:23.274+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13150243/comment/16427482",
                    "id": "16427482",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "maxim-lian commented on issue #1838: ARROW-2398: [Rust] Create Builder<T> for building buffers directly in aligned memory\nURL: https://github.com/apache/arrow/pull/1838#issuecomment-379048195\n \n \n   Out of interest, why wouldn't a `Vec` work rather than a `Builder`. It's also a pointer-to-data, len, & capacity. Is this (by-and-large) the simplest way of having a no-copy constructor?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-05T19:21:28.068+0000",
                    "updated": "2018-04-05T19:21:28.068+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13150243/comment/16427514",
                    "id": "16427514",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "andygrove commented on issue #1838: ARROW-2398: [Rust] Create Builder<T> for building buffers directly in aligned memory\nURL: https://github.com/apache/arrow/pull/1838#issuecomment-379058661\n \n \n   @maxim-lian Vec is almost perfect, yes. The only problem is that the memory isn't aligned to an 8 or 64 byte boundary as required by the Arrow specification. \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-05T20:00:30.888+0000",
                    "updated": "2018-04-05T20:00:30.888+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13150243/comment/16428292",
                    "id": "16428292",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy closed pull request #1838: ARROW-2398: [Rust] Create Builder<T> for building buffers directly in aligned memory\nURL: https://github.com/apache/arrow/pull/1838\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/rust/README.md b/rust/README.md\nindex 20e4b73f1..2bbc7f104 100644\n--- a/rust/README.md\n+++ b/rust/README.md\n@@ -25,17 +25,37 @@ This is a starting point for a native Rust implementation of Arrow.\n \n The current code demonstrates arrays of primitive types and structs.\n \n-## Example\n+## Creating an Array from a Vec\n \n ```rust\n-let _schema = Schema::new(vec![\n-    Field::new(\"a\", DataType::Int32, false),\n-    Field::new(\"b\", DataType::Float32, false),\n-]);\n-\n-let a = Rc::new(Array::from(vec![1,2,3,4,5]));\n-let b = Rc::new(Array::from(vec![1.1, 2.2, 3.3, 4.4, 5.5]));\n-let _ = Rc::new(Array::from(vec![a,b]));\n+// create a memory-aligned Arrow array from an existing Vec\n+let array = Array::from(vec![1,2,3,4,5]);\n+\n+match array.data() {\n+    &ArrayData::Int32(ref buffer) => {\n+        println!(\"array contents: {:?}\", buffer.iter().collect::<Vec<i32>>());\n+    }\n+    _ => {}\n+}\n+```\n+\n+## Creating an Array from a Builder\n+\n+```rust\n+let mut builder: Builder<i32> = Builder::new();\n+for i in 0..10 {\n+    builder.push(i);\n+}\n+let buffer = builder.finish();\n+let array = Array::from(buffer);\n+```\n+\n+## Run Examples\n+\n+Examples can be run using the `cargo run --example` command. For example:\n+\n+```bash\n+cargo run --example array_from_builder\n ```\n \n ## Run Tests\ndiff --git a/rust/examples/array_from_builder.rs b/rust/examples/array_from_builder.rs\nnew file mode 100644\nindex 000000000..3a273a64d\n--- /dev/null\n+++ b/rust/examples/array_from_builder.rs\n@@ -0,0 +1,49 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+extern crate arrow;\n+\n+use arrow::array::*;\n+use arrow::buffer::*;\n+use arrow::builder::*;\n+\n+fn main() {\n+    let mut builder: Builder<i32> = Builder::new();\n+    for i in 0..10 {\n+        builder.push(i);\n+    }\n+    let buffer = builder.finish();\n+\n+    println!(\"buffer length: {}\", buffer.len());\n+    println!(\"buffer contents: {:?}\", buffer.iter().collect::<Vec<i32>>());\n+\n+    // note that the builder can no longer be used once it has built a buffer, so either\n+    // of the following calls will fail\n+\n+    //    builder.push(123);\n+    //    builder.build();\n+\n+    // create a memory-aligned Arrow from the builder (zero-copy)\n+    let array = Array::from(buffer);\n+\n+    match array.data() {\n+        &ArrayData::Int32(ref buffer) => {\n+            println!(\"array contents: {:?}\", buffer.iter().collect::<Vec<i32>>());\n+        }\n+        _ => {}\n+    }\n+}\ndiff --git a/rust/examples/array_from_vec.rs b/rust/examples/array_from_vec.rs\nnew file mode 100644\nindex 000000000..8cb4b268f\n--- /dev/null\n+++ b/rust/examples/array_from_vec.rs\n@@ -0,0 +1,32 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+extern crate arrow;\n+\n+use arrow::array::*;\n+\n+fn main() {\n+    // create a memory-aligned Arrow array from an existing Vec\n+    let array = Array::from(vec![1, 2, 3, 4, 5]);\n+\n+    match array.data() {\n+        &ArrayData::Int32(ref buffer) => {\n+            println!(\"array contents: {:?}\", buffer.iter().collect::<Vec<i32>>());\n+        }\n+        _ => {}\n+    }\n+}\ndiff --git a/rust/src/array.rs b/rust/src/array.rs\nindex 1c0a653d7..09f0c9500 100644\n--- a/rust/src/array.rs\n+++ b/rust/src/array.rs\n@@ -42,12 +42,17 @@ pub enum ArrayData {\n }\n \n macro_rules! arraydata_from_primitive {\n-    ($DT: ty, $AT: ident) => {\n+    ($DT:ty, $AT:ident) => {\n         impl From<Vec<$DT>> for ArrayData {\n             fn from(v: Vec<$DT>) -> Self {\n                 ArrayData::$AT(Buffer::from(v))\n             }\n         }\n+        impl From<Buffer<$DT>> for ArrayData {\n+            fn from(v: Buffer<$DT>) -> Self {\n+                ArrayData::$AT(v)\n+            }\n+        }\n     };\n }\n \n@@ -91,7 +96,7 @@ impl Array {\n }\n \n macro_rules! array_from_primitive {\n-    ($DT: ty) => {\n+    ($DT:ty) => {\n         impl From<Vec<$DT>> for Array {\n             fn from(v: Vec<$DT>) -> Self {\n                 Array {\n@@ -102,6 +107,16 @@ macro_rules! array_from_primitive {\n                 }\n             }\n         }\n+        impl From<Buffer<$DT>> for Array {\n+            fn from(v: Buffer<$DT>) -> Self {\n+                Array {\n+                    len: v.len() as i32,\n+                    null_count: 0,\n+                    validity_bitmap: None,\n+                    data: ArrayData::from(v),\n+                }\n+            }\n+        }\n     };\n }\n \n@@ -117,7 +132,7 @@ array_from_primitive!(i32);\n array_from_primitive!(i64);\n \n macro_rules! array_from_optional_primitive {\n-    ($DT: ty, $DEFAULT: expr) => {\n+    ($DT:ty, $DEFAULT:expr) => {\n         impl From<Vec<Option<$DT>>> for Array {\n             fn from(v: Vec<Option<$DT>>) -> Self {\n                 let mut null_count = 0;\ndiff --git a/rust/src/buffer.rs b/rust/src/buffer.rs\nindex 517583e90..ab90a5b08 100644\n--- a/rust/src/buffer.rs\n+++ b/rust/src/buffer.rs\n@@ -18,16 +18,23 @@\n use bytes::Bytes;\n use libc;\n use std::mem;\n+use std::ptr;\n use std::slice;\n \n use super::memory::*;\n \n+/// Buffer<T> is essentially just a Vec<T> for fixed-width primitive types and the start of the\n+/// memory region is aligned at a 64-byte boundary\n pub struct Buffer<T> {\n     data: *const T,\n     len: i32,\n }\n \n impl<T> Buffer<T> {\n+    pub fn from_raw_parts(data: *const T, len: i32) -> Self {\n+        Buffer { data, len }\n+    }\n+\n     pub fn len(&self) -> i32 {\n         self.len\n     }\n@@ -43,10 +50,12 @@ impl<T> Buffer<T> {\n         unsafe { slice::from_raw_parts(self.data.offset(start as isize), (end - start) as usize) }\n     }\n \n+    /// Get a reference to the value at the specified offset\n     pub fn get(&self, i: usize) -> &T {\n         unsafe { &(*self.data.offset(i as isize)) }\n     }\n \n+    /// Deprecated method (used by Bitmap)\n     pub fn set(&mut self, i: usize, v: T) {\n         unsafe {\n             let p = mem::transmute::<*const T, *mut T>(self.data);\n@@ -54,6 +63,7 @@ impl<T> Buffer<T> {\n         }\n     }\n \n+    /// Return an iterator over the values in the buffer\n     pub fn iter(&self) -> BufferIterator<T> {\n         BufferIterator {\n             data: self.data,\n@@ -92,7 +102,7 @@ where\n }\n \n macro_rules! array_from_primitive {\n-    ($DT: ty) => {\n+    ($DT:ty) => {\n         impl From<Vec<$DT>> for Buffer<$DT> {\n             fn from(v: Vec<$DT>) -> Self {\n                 // allocate aligned memory buffer\ndiff --git a/rust/src/builder.rs b/rust/src/builder.rs\nnew file mode 100644\nindex 000000000..1cc024042\n--- /dev/null\n+++ b/rust/src/builder.rs\n@@ -0,0 +1,131 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+use bytes::Bytes;\n+use libc;\n+use std::mem;\n+use std::ptr;\n+use std::slice;\n+\n+use super::buffer::*;\n+use super::memory::*;\n+\n+/// Buffer builder with zero-copy build method\n+pub struct Builder<T> {\n+    data: *mut T,\n+    len: usize,\n+    capacity: usize,\n+}\n+\n+impl<T> Builder<T> {\n+    /// Creates a builder with a default capacity\n+    pub fn new() -> Self {\n+        Builder::with_capacity(64)\n+    }\n+\n+    /// Creates a builder with a fixed capacity\n+    pub fn with_capacity(capacity: usize) -> Self {\n+        let sz = mem::size_of::<T>();\n+        let buffer = allocate_aligned((capacity * sz) as i64).unwrap();\n+        Builder {\n+            len: 0,\n+            capacity,\n+            data: unsafe { mem::transmute::<*const u8, *mut T>(buffer) },\n+        }\n+    }\n+\n+    /// Push a value into the builder, growing the internal buffer as needed\n+    pub fn push(&mut self, v: T) {\n+        assert!(!self.data.is_null());\n+        if self.len == self.capacity {\n+            let sz = mem::size_of::<T>();\n+            let new_capacity = self.capacity * 2;\n+            unsafe {\n+                let old_buffer = self.data;\n+                let new_buffer = allocate_aligned((new_capacity * sz) as i64).unwrap();\n+                libc::memcpy(\n+                    mem::transmute::<*const u8, *mut libc::c_void>(new_buffer),\n+                    mem::transmute::<*const T, *const libc::c_void>(old_buffer),\n+                    self.len * sz,\n+                );\n+                self.capacity = new_capacity;\n+                self.data = mem::transmute::<*const u8, *mut T>(new_buffer);\n+                mem::drop(old_buffer);\n+            }\n+        }\n+        assert!(self.len < self.capacity);\n+        unsafe {\n+            *self.data.offset(self.len as isize) = v;\n+        }\n+        self.len += 1;\n+    }\n+\n+    /// Build a Buffer from the existing memory\n+    pub fn finish(&mut self) -> Buffer<T> {\n+        assert!(!self.data.is_null());\n+        let p = unsafe { mem::transmute::<*mut T, *const T>(self.data) };\n+        self.data = ptr::null_mut(); // ensure builder cannot be re-used\n+        Buffer::from_raw_parts(p, self.len as i32)\n+    }\n+}\n+\n+impl<T> Drop for Builder<T> {\n+    fn drop(&mut self) {\n+        if !self.data.is_null() {\n+            mem::drop(self.data)\n+        }\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    #[test]\n+    fn test_builder_i32_empty() {\n+        let mut b: Builder<i32> = Builder::with_capacity(5);\n+        let a = b.finish();\n+        assert_eq!(0, a.len());\n+    }\n+\n+    #[test]\n+    fn test_builder_i32() {\n+        let mut b: Builder<i32> = Builder::with_capacity(5);\n+        for i in 0..5 {\n+            b.push(i);\n+        }\n+        let a = b.finish();\n+        assert_eq!(5, a.len());\n+        for i in 0..5 {\n+            assert_eq!(&i, a.get(i as usize));\n+        }\n+    }\n+\n+    #[test]\n+    fn test_builder_i32_grow_buffer() {\n+        let mut b: Builder<i32> = Builder::with_capacity(2);\n+        for i in 0..5 {\n+            b.push(i);\n+        }\n+        let a = b.finish();\n+        assert_eq!(5, a.len());\n+        for i in 0..5 {\n+            assert_eq!(&i, a.get(i as usize));\n+        }\n+    }\n+\n+}\ndiff --git a/rust/src/datatypes.rs b/rust/src/datatypes.rs\nindex 1e1afe64b..85278f7bb 100644\n--- a/rust/src/datatypes.rs\n+++ b/rust/src/datatypes.rs\n@@ -15,10 +15,10 @@\n // specific language governing permissions and limitations\n // under the License.\n \n-use std::fmt;\n+use super::error::ArrowError;\n use serde_json;\n use serde_json::Value;\n-use super::error::ArrowError;\n+use std::fmt;\n \n #[derive(Debug, Clone, PartialEq)]\n pub enum DataType {\ndiff --git a/rust/src/lib.rs b/rust/src/lib.rs\nindex bfcd83dc5..6ab3daabb 100644\n--- a/rust/src/lib.rs\n+++ b/rust/src/lib.rs\n@@ -24,6 +24,7 @@ extern crate serde_json;\n pub mod array;\n pub mod bitmap;\n pub mod buffer;\n+pub mod builder;\n pub mod datatypes;\n pub mod error;\n pub mod list;\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-06T13:16:04.966+0000",
                    "updated": "2018-04-06T13:16:04.966+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13150243/comment/16428293",
                    "id": "16428293",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 1838\n[https://github.com/apache/arrow/pull/1838]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-04-06T13:16:06.225+0000",
                    "updated": "2018-04-06T13:16:06.225+0000"
                }
            ],
            "maxResults": 10,
            "total": 10,
            "startAt": 0
        },
        "customfield_12311820": "0|i3s6d3:",
        "customfield_12314139": null
    }
}