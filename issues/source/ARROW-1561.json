{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13103400",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103400",
    "key": "ARROW-1561",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "Analytics",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=preeti_suman",
            "name": "preeti_suman",
            "key": "preeti_suman",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Preeti Suman",
            "active": true,
            "timeZone": "America/Chicago"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 78000,
            "total": 78000,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 78000,
            "total": 78000,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1561/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 145,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103400/worklog/235903",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "psuman65 commented on pull request #4235: ARROW-1561: [C++] Kernel implementations for IsIn\nURL: https://github.com/apache/arrow/pull/4235\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-01T17:31:04.901+0000",
                    "updated": "2019-05-01T17:31:04.901+0000",
                    "started": "2019-05-01T17:31:04.900+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "235903",
                    "issueId": "13103400"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103400/worklog/235919",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aregm commented on issue #4235: ARROW-1561: [C++] Kernel implementations for IsIn\nURL: https://github.com/apache/arrow/pull/4235#issuecomment-488359854\n \n \n   @psuman65 Please run the linter and the format checker to fix some formatting issues, as described here https://github.com/apache/arrow/blob/master/docs/source/developers/cpp.rst#code-style-linting-and-ci. Thanks. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-01T17:58:59.512+0000",
                    "updated": "2019-05-01T17:58:59.512+0000",
                    "started": "2019-05-01T17:58:59.512+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "235919",
                    "issueId": "13103400"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103400/worklog/235920",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "aregm commented on issue #4235: ARROW-1561: [C++] Kernel implementations for IsIn\nURL: https://github.com/apache/arrow/pull/4235#issuecomment-488359854\n \n \n   @psuman65 Preeti, please run the linter and the format checker to fix some formatting issues, as described here https://github.com/apache/arrow/blob/master/docs/source/developers/cpp.rst#code-style-linting-and-ci. Thanks. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-01T18:00:05.854+0000",
                    "updated": "2019-05-01T18:00:05.854+0000",
                    "started": "2019-05-01T18:00:05.854+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "235920",
                    "issueId": "13103400"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103400/worklog/235927",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4235: ARROW-1561: [C++] Kernel implementations for IsIn\nURL: https://github.com/apache/arrow/pull/4235#discussion_r280156016\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/isin.h\n ##########\n @@ -0,0 +1,49 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+class DataType;\n+struct ArrayData;\n+\n+namespace compute {\n+\n+class FunctionContext;\n \n Review comment:\n   can you include the necessary file instead of forward declaring (https://google.github.io/styleguide/cppguide.html#Forward_Declarations)\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-01T18:21:49.690+0000",
                    "updated": "2019-05-01T18:21:49.690+0000",
                    "started": "2019-05-01T18:21:49.689+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "235927",
                    "issueId": "13103400"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103400/worklog/235928",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4235: ARROW-1561: [C++] Kernel implementations for IsIn\nURL: https://github.com/apache/arrow/pull/4235#discussion_r280162057\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/isin.cc\n ##########\n @@ -0,0 +1,244 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/isin.h\"\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <cstring>\n+#include <memory>\n+#include <mutex>\n+#include <sstream>\n+#include <string>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/hashing.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+\n+class MemoryPool;\n+\n+using internal::checked_cast;\n+using internal::DictionaryTraits;\n+using internal::HashTraits;\n+\n+namespace compute {\n+\n+#define CHECK_IMPLEMENTED(KERNEL, FUNCNAME, TYPE)                                       \\\n+  if (!KERNEL) {                                                                        \\\n+    return Status::NotImplemented(FUNCNAME, \" not implemented for \", type->ToString()); \\\n+  }\n+\n+class HashBinaryKernelImpl: public BinaryKernel {\n+\n+    virtual Status Compute(FunctionContext* ctx, const ArrayData& left,\n+                         const ArrayData& right, std::shared_ptr<ArrayData>& out) = 0;\n+\n+    public:\n+    Status Call(FunctionContext* ctx, const Datum& left, const Datum& right,\n+                                                    Datum* out) override {\n+\n+        DCHECK_EQ(Datum::ARRAY, right.kind());\n+        DCHECK_EQ(Datum::ARRAY, left.kind());\n+\n+        const ArrayData& left_data = *left.array();\n+        const ArrayData& right_data = *right.array();\n+\n+        std::shared_ptr<ArrayData> result;\n+        RETURN_NOT_OK(Compute(ctx, left_data , right_data, result));\n+\n+        out->value = std::move(result);\n+        return Status::OK();\n+    }\n+    std::shared_ptr<DataType> out_type() const override { return boolean(); }\n+};\n+\n+template <typename Type, typename Scalar>\n+class IsInKernel : public HashBinaryKernelImpl{\n+public:\n+    IsInKernel(const std::shared_ptr<DataType>& type, MemoryPool* pool){}\n+\n+    Status VisitNull(){\n+        values.emplace_back ();\n+        return Status::OK();\n+    }\n+\n+    Status VisitValue(const Scalar& value){\n+        values.emplace_back(value);\n+        return Status::OK();\n+    }\n+\n+    Status Compute(FunctionContext* ctx, const ArrayData& left, const ArrayData& right,\n+                 std::shared_ptr<ArrayData>& out) override {\n+\n+        values.reserve(left.length);\n+        memo_table_.reset(new MemoTable(0));\n+        bool_builder_.Reset();\n+        bool_builder_.Reserve(left.length);\n+\n+        ArrayDataVisitor<Type>::Visit(right, this);\n+\n+        for (const auto& value: values){\n+            memo_table_->GetOrInsert(value);\n+        }\n+\n+        values.clear();\n+        ArrayDataVisitor<Type>::Visit(left, this);\n+\n+        for (const auto& value: values){\n+            if ( memo_table_->Get(value) != -1){\n+                bool_builder_.UnsafeAppend(true);\n+            } else {\n+                bool_builder_.UnsafeAppend(false);\n+            }\n+        }\n+\n+        RETURN_NOT_OK (bool_builder_.FinishInternal(&out));\n+        return Status::OK();\n+    }\n+\n+    protected:\n+        using MemoTable = typename HashTraits<Type>::MemoTableType;\n+        std::unique_ptr<MemoTable> memo_table_;\n+\n+    private:\n+        BooleanBuilder bool_builder_;\n+        std::vector<Scalar>values;\n \n Review comment:\n   we probably shouldn't be using a vector for variable size list values (we should be using a buffer array/istead).  But in this case I would expect the memo_table to be a member of the class and populated directly before Compute is called. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-01T18:21:49.698+0000",
                    "updated": "2019-05-01T18:21:49.698+0000",
                    "started": "2019-05-01T18:21:49.697+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "235928",
                    "issueId": "13103400"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103400/worklog/235929",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4235: ARROW-1561: [C++] Kernel implementations for IsIn\nURL: https://github.com/apache/arrow/pull/4235#discussion_r280160157\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/isin.cc\n ##########\n @@ -0,0 +1,244 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/isin.h\"\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <cstring>\n+#include <memory>\n+#include <mutex>\n+#include <sstream>\n+#include <string>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/hashing.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+\n+class MemoryPool;\n+\n+using internal::checked_cast;\n+using internal::DictionaryTraits;\n+using internal::HashTraits;\n+\n+namespace compute {\n+\n+#define CHECK_IMPLEMENTED(KERNEL, FUNCNAME, TYPE)                                       \\\n+  if (!KERNEL) {                                                                        \\\n+    return Status::NotImplemented(FUNCNAME, \" not implemented for \", type->ToString()); \\\n+  }\n+\n+class HashBinaryKernelImpl: public BinaryKernel {\n+\n+    virtual Status Compute(FunctionContext* ctx, const ArrayData& left,\n+                         const ArrayData& right, std::shared_ptr<ArrayData>& out) = 0;\n+\n+    public:\n+    Status Call(FunctionContext* ctx, const Datum& left, const Datum& right,\n+                                                    Datum* out) override {\n+\n+        DCHECK_EQ(Datum::ARRAY, right.kind());\n+        DCHECK_EQ(Datum::ARRAY, left.kind());\n+\n+        const ArrayData& left_data = *left.array();\n+        const ArrayData& right_data = *right.array();\n+\n+        std::shared_ptr<ArrayData> result;\n+        RETURN_NOT_OK(Compute(ctx, left_data , right_data, result));\n+\n+        out->value = std::move(result);\n+        return Status::OK();\n+    }\n+    std::shared_ptr<DataType> out_type() const override { return boolean(); }\n+};\n+\n+template <typename Type, typename Scalar>\n+class IsInKernel : public HashBinaryKernelImpl{\n \n Review comment:\n   please provide some documentation as to strategy here.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-01T18:21:49.714+0000",
                    "updated": "2019-05-01T18:21:49.714+0000",
                    "started": "2019-05-01T18:21:49.714+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "235929",
                    "issueId": "13103400"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103400/worklog/235930",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4235: ARROW-1561: [C++] Kernel implementations for IsIn\nURL: https://github.com/apache/arrow/pull/4235#discussion_r280156091\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/isin.h\n ##########\n @@ -0,0 +1,49 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+class DataType;\n+struct ArrayData;\n+\n+namespace compute {\n+\n+class FunctionContext;\n \n Review comment:\n   I think this needs updating?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-01T18:21:49.727+0000",
                    "updated": "2019-05-01T18:21:49.727+0000",
                    "started": "2019-05-01T18:21:49.726+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "235930",
                    "issueId": "13103400"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103400/worklog/235931",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4235: ARROW-1561: [C++] Kernel implementations for IsIn\nURL: https://github.com/apache/arrow/pull/4235#discussion_r280156530\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/isin.cc\n ##########\n @@ -0,0 +1,244 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/isin.h\"\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <cstring>\n+#include <memory>\n+#include <mutex>\n+#include <sstream>\n+#include <string>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/hashing.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+\n+class MemoryPool;\n+\n+using internal::checked_cast;\n+using internal::DictionaryTraits;\n+using internal::HashTraits;\n+\n+namespace compute {\n+\n+#define CHECK_IMPLEMENTED(KERNEL, FUNCNAME, TYPE)                                       \\\n+  if (!KERNEL) {                                                                        \\\n+    return Status::NotImplemented(FUNCNAME, \" not implemented for \", type->ToString()); \\\n+  }\n+\n+class HashBinaryKernelImpl: public BinaryKernel {\n+\n+    virtual Status Compute(FunctionContext* ctx, const ArrayData& left,\n+                         const ArrayData& right, std::shared_ptr<ArrayData>& out) = 0;\n+\n+    public:\n+    Status Call(FunctionContext* ctx, const Datum& left, const Datum& right,\n+                                                    Datum* out) override {\n+\n+        DCHECK_EQ(Datum::ARRAY, right.kind());\n+        DCHECK_EQ(Datum::ARRAY, left.kind());\n+\n+        const ArrayData& left_data = *left.array();\n+        const ArrayData& right_data = *right.array();\n+\n+        std::shared_ptr<ArrayData> result;\n+        RETURN_NOT_OK(Compute(ctx, left_data , right_data, result));\n+\n+        out->value = std::move(result);\n+        return Status::OK();\n+    }\n+    std::shared_ptr<DataType> out_type() const override { return boolean(); }\n+};\n+\n+template <typename Type, typename Scalar>\n+class IsInKernel : public HashBinaryKernelImpl{\n+public:\n+    IsInKernel(const std::shared_ptr<DataType>& type, MemoryPool* pool){}\n+\n+    Status VisitNull(){\n+        values.emplace_back ();\n+        return Status::OK();\n+    }\n+\n+    Status VisitValue(const Scalar& value){\n+        values.emplace_back(value);\n+        return Status::OK();\n+    }\n+\n+    Status Compute(FunctionContext* ctx, const ArrayData& left, const ArrayData& right,\n+                 std::shared_ptr<ArrayData>& out) override {\n+\n+        values.reserve(left.length);\n+        memo_table_.reset(new MemoTable(0));\n+        bool_builder_.Reset();\n+        bool_builder_.Reserve(left.length);\n+\n+        ArrayDataVisitor<Type>::Visit(right, this);\n+\n+        for (const auto& value: values){\n+            memo_table_->GetOrInsert(value);\n+        }\n+\n+        values.clear();\n+        ArrayDataVisitor<Type>::Visit(left, this);\n+\n+        for (const auto& value: values){\n+            if ( memo_table_->Get(value) != -1){\n+                bool_builder_.UnsafeAppend(true);\n+            } else {\n+                bool_builder_.UnsafeAppend(false);\n+            }\n+        }\n+\n+        RETURN_NOT_OK (bool_builder_.FinishInternal(&out));\n \n Review comment:\n   no space\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-01T18:21:49.728+0000",
                    "updated": "2019-05-01T18:21:49.728+0000",
                    "started": "2019-05-01T18:21:49.727+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "235931",
                    "issueId": "13103400"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103400/worklog/235933",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4235: ARROW-1561: [C++] Kernel implementations for IsIn\nURL: https://github.com/apache/arrow/pull/4235#discussion_r280163099\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/isin.cc\n ##########\n @@ -0,0 +1,244 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/isin.h\"\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <cstring>\n+#include <memory>\n+#include <mutex>\n+#include <sstream>\n+#include <string>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/hashing.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+\n+class MemoryPool;\n+\n+using internal::checked_cast;\n+using internal::DictionaryTraits;\n+using internal::HashTraits;\n+\n+namespace compute {\n+\n+#define CHECK_IMPLEMENTED(KERNEL, FUNCNAME, TYPE)                                       \\\n+  if (!KERNEL) {                                                                        \\\n+    return Status::NotImplemented(FUNCNAME, \" not implemented for \", type->ToString()); \\\n+  }\n+\n+class HashBinaryKernelImpl: public BinaryKernel {\n+\n+    virtual Status Compute(FunctionContext* ctx, const ArrayData& left,\n+                         const ArrayData& right, std::shared_ptr<ArrayData>& out) = 0;\n+\n+    public:\n+    Status Call(FunctionContext* ctx, const Datum& left, const Datum& right,\n+                                                    Datum* out) override {\n+\n+        DCHECK_EQ(Datum::ARRAY, right.kind());\n+        DCHECK_EQ(Datum::ARRAY, left.kind());\n+\n+        const ArrayData& left_data = *left.array();\n+        const ArrayData& right_data = *right.array();\n+\n+        std::shared_ptr<ArrayData> result;\n+        RETURN_NOT_OK(Compute(ctx, left_data , right_data, result));\n+\n+        out->value = std::move(result);\n+        return Status::OK();\n+    }\n+    std::shared_ptr<DataType> out_type() const override { return boolean(); }\n+};\n+\n+template <typename Type, typename Scalar>\n+class IsInKernel : public HashBinaryKernelImpl{\n+public:\n+    IsInKernel(const std::shared_ptr<DataType>& type, MemoryPool* pool){}\n+\n+    Status VisitNull(){\n+        values.emplace_back ();\n+        return Status::OK();\n+    }\n+\n+    Status VisitValue(const Scalar& value){\n+        values.emplace_back(value);\n+        return Status::OK();\n+    }\n+\n+    Status Compute(FunctionContext* ctx, const ArrayData& left, const ArrayData& right,\n+                 std::shared_ptr<ArrayData>& out) override {\n+\n+        values.reserve(left.length);\n+        memo_table_.reset(new MemoTable(0));\n+        bool_builder_.Reset();\n+        bool_builder_.Reserve(left.length);\n+\n+        ArrayDataVisitor<Type>::Visit(right, this);\n+\n+        for (const auto& value: values){\n+            memo_table_->GetOrInsert(value);\n+        }\n+\n+        values.clear();\n+        ArrayDataVisitor<Type>::Visit(left, this);\n+\n+        for (const auto& value: values){\n+            if ( memo_table_->Get(value) != -1){\n+                bool_builder_.UnsafeAppend(true);\n+            } else {\n+                bool_builder_.UnsafeAppend(false);\n+            }\n+        }\n+\n+        RETURN_NOT_OK (bool_builder_.FinishInternal(&out));\n+        return Status::OK();\n+    }\n+\n+    protected:\n+        using MemoTable = typename HashTraits<Type>::MemoTableType;\n+        std::unique_ptr<MemoTable> memo_table_;\n+\n+    private:\n+        BooleanBuilder bool_builder_;\n+        std::vector<Scalar>values;\n+};\n+\n+\n+class NullIsInKernel : public HashBinaryKernelImpl{\n \n Review comment:\n   I think it should be possible to collapse this into one kernel.\r\n   \r\n   I think the trick is you probably need two visitors.  One that populate the memo table + an additional member to keep track of nulls on the kernel above.  The second visitor would make use of the memo table and iterate over left.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-01T18:21:49.916+0000",
                    "updated": "2019-05-01T18:21:49.916+0000",
                    "started": "2019-05-01T18:21:49.914+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "235933",
                    "issueId": "13103400"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103400/worklog/235932",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4235: ARROW-1561: [C++] Kernel implementations for IsIn\nURL: https://github.com/apache/arrow/pull/4235#discussion_r280163346\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/isin.cc\n ##########\n @@ -0,0 +1,244 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/isin.h\"\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <cstring>\n+#include <memory>\n+#include <mutex>\n+#include <sstream>\n+#include <string>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/hashing.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+\n+class MemoryPool;\n+\n+using internal::checked_cast;\n+using internal::DictionaryTraits;\n+using internal::HashTraits;\n+\n+namespace compute {\n+\n+#define CHECK_IMPLEMENTED(KERNEL, FUNCNAME, TYPE)                                       \\\n+  if (!KERNEL) {                                                                        \\\n+    return Status::NotImplemented(FUNCNAME, \" not implemented for \", type->ToString()); \\\n+  }\n+\n+class HashBinaryKernelImpl: public BinaryKernel {\n \n Review comment:\n   It feels like maybe this should be a UnaryKernel that closes over Right by creating the memo table (more on this below).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-01T18:21:49.916+0000",
                    "updated": "2019-05-01T18:21:49.916+0000",
                    "started": "2019-05-01T18:21:49.915+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "235932",
                    "issueId": "13103400"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103400/worklog/235934",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #4235: ARROW-1561: [C++] Kernel implementations for IsIn\nURL: https://github.com/apache/arrow/pull/4235#discussion_r280159129\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/isin.cc\n ##########\n @@ -0,0 +1,244 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/isin.h\"\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <cstring>\n+#include <memory>\n+#include <mutex>\n+#include <sstream>\n+#include <string>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/hashing.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+\n+class MemoryPool;\n+\n+using internal::checked_cast;\n+using internal::DictionaryTraits;\n+using internal::HashTraits;\n+\n+namespace compute {\n+\n+#define CHECK_IMPLEMENTED(KERNEL, FUNCNAME, TYPE)                                       \\\n+  if (!KERNEL) {                                                                        \\\n+    return Status::NotImplemented(FUNCNAME, \" not implemented for \", type->ToString()); \\\n+  }\n+\n+class HashBinaryKernelImpl: public BinaryKernel {\n+\n+    virtual Status Compute(FunctionContext* ctx, const ArrayData& left,\n+                         const ArrayData& right, std::shared_ptr<ArrayData>& out) = 0;\n+\n+    public:\n+    Status Call(FunctionContext* ctx, const Datum& left, const Datum& right,\n+                                                    Datum* out) override {\n+\n+        DCHECK_EQ(Datum::ARRAY, right.kind());\n+        DCHECK_EQ(Datum::ARRAY, left.kind());\n+\n+        const ArrayData& left_data = *left.array();\n+        const ArrayData& right_data = *right.array();\n+\n+        std::shared_ptr<ArrayData> result;\n+        RETURN_NOT_OK(Compute(ctx, left_data , right_data, result));\n+\n+        out->value = std::move(result);\n+        return Status::OK();\n+    }\n+    std::shared_ptr<DataType> out_type() const override { return boolean(); }\n+};\n+\n+template <typename Type, typename Scalar>\n+class IsInKernel : public HashBinaryKernelImpl{\n+public:\n+    IsInKernel(const std::shared_ptr<DataType>& type, MemoryPool* pool){}\n+\n+    Status VisitNull(){\n+        values.emplace_back ();\n+        return Status::OK();\n+    }\n+\n+    Status VisitValue(const Scalar& value){\n+        values.emplace_back(value);\n+        return Status::OK();\n+    }\n+\n+    Status Compute(FunctionContext* ctx, const ArrayData& left, const ArrayData& right,\n+                 std::shared_ptr<ArrayData>& out) override {\n+\n+        values.reserve(left.length);\n+        memo_table_.reset(new MemoTable(0));\n+        bool_builder_.Reset();\n \n Review comment:\n   Can you use: PrimitiveAllocatingUnaryKernel or PrimitiveAllocatingBinaryKernel (https://github.com/apache/arrow/blob/c822e466b6e88f67059fea2da4a9fb5e5bfa201a/cpp/src/arrow/compute/kernels/util-internal.h) instead of allocated here.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-01T18:21:52.709+0000",
                    "updated": "2019-05-01T18:21:52.709+0000",
                    "started": "2019-05-01T18:21:52.708+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "235934",
                    "issueId": "13103400"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103400/worklog/236302",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4235: ARROW-1561: [C++] Kernel implementations for IsIn\nURL: https://github.com/apache/arrow/pull/4235#discussion_r280420677\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/isin-test.cc\n ##########\n @@ -0,0 +1,270 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstdint>\n+#include <cstdio>\n+#include <functional>\n+#include <locale>\n+#include <memory>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/testing/gtest_common.h\"\n+#include \"arrow/testing/util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/decimal.h\"\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/isin.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+#include \"arrow/compute/test-util.h\"\n+\n+using std::shared_ptr;\n+using std::vector;\n+\n+namespace arrow {\n+namespace compute {\n+\n+// ----------------------------------------------------------------------\n+// IsIn tests\n+\n+template <typename Type, typename T>\n \n Review comment:\n   Note that you can set a default value to `T = TypeTraits<Type>::c_type`.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-02T14:26:30.561+0000",
                    "updated": "2019-05-02T14:26:30.561+0000",
                    "started": "2019-05-02T14:26:30.558+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "236302",
                    "issueId": "13103400"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103400/worklog/236301",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4235: ARROW-1561: [C++] Kernel implementations for IsIn\nURL: https://github.com/apache/arrow/pull/4235#discussion_r280419490\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/isin-test.cc\n ##########\n @@ -0,0 +1,270 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstdint>\n+#include <cstdio>\n+#include <functional>\n+#include <locale>\n+#include <memory>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/testing/gtest_common.h\"\n+#include \"arrow/testing/util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/decimal.h\"\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/isin.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+#include \"arrow/compute/test-util.h\"\n+\n+using std::shared_ptr;\n \n Review comment:\n   We prefer to use the full name. Remove the 2 lines and fix the compilation issues.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-02T14:26:30.561+0000",
                    "updated": "2019-05-02T14:26:30.561+0000",
                    "started": "2019-05-02T14:26:30.560+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "236301",
                    "issueId": "13103400"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103400/worklog/236303",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4235: ARROW-1561: [C++] Kernel implementations for IsIn\nURL: https://github.com/apache/arrow/pull/4235#discussion_r280421091\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/isin-test.cc\n ##########\n @@ -0,0 +1,270 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <cstdint>\n+#include <cstdio>\n+#include <functional>\n+#include <locale>\n+#include <memory>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/testing/gtest_common.h\"\n+#include \"arrow/testing/util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/decimal.h\"\n+\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/isin.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+#include \"arrow/compute/test-util.h\"\n+\n+using std::shared_ptr;\n+using std::vector;\n+\n+namespace arrow {\n+namespace compute {\n+\n+// ----------------------------------------------------------------------\n+// IsIn tests\n+\n+template <typename Type, typename T>\n+void CheckIsIn(FunctionContext* ctx, const shared_ptr<DataType>& type,\n+                 const vector<T>& in_values, const vector<bool>& in_is_valid,\n+                 const vector<T>& member_set_values, const vector<bool>& member_set_is_valid,\n+                 const vector<bool>& out_values, const vector<bool>& out_is_valid) {\n+  shared_ptr<Array> input = _MakeArray<Type, T>(type, in_values, in_is_valid);\n+  shared_ptr<Array> member_set = _MakeArray<Type, T>(type, member_set_values, member_set_is_valid);\n+  shared_ptr<Array> expected = _MakeArray<BooleanType, bool>(boolean(), out_values, out_is_valid);\n+\n+  Datum  datum_out;\n+  ASSERT_OK(IsIn(ctx, input, member_set, &datum_out));\n+  shared_ptr<Array> result = datum_out.make_array();\n+  ASSERT_ARRAYS_EQUAL(*expected, *result);\n+}\n+\n+class TestIsInKernel : public ComputeFixture, public TestBase {};\n+\n+template <typename Type>\n+class TestIsInKernelPrimitive : public ComputeFixture, public TestBase {};\n+\n+typedef ::testing::Types<Int8Type, UInt8Type, Int16Type, UInt16Type, Int32Type,\n+                         UInt32Type, Int64Type, UInt64Type, FloatType, DoubleType,\n+                         Date32Type, Date64Type>\n+    PrimitiveDictionaries;\n+\n+TYPED_TEST_CASE(TestIsInKernelPrimitive, PrimitiveDictionaries);\n+\n+TYPED_TEST(TestIsInKernelPrimitive, IsIn) {\n+  using T = typename TypeParam::c_type;\n+  auto type = TypeTraits<TypeParam>::type_singleton();\n+  CheckIsIn<TypeParam, T>(&this->ctx_, type, {2, 1, 2, 1, 2, 3},\n+                                {true, false, true, true, true, true}, {2, 1, 2, 1, 2, 3},\n+                                {true, false, true, true, true, true},\n+                                {true, true, true, true, true, true}, {});\n+}\n+\n+TYPED_TEST(TestIsInKernelPrimitive, PrimitiveResizeTable) {\n+  using T = typename TypeParam::c_type;\n+\n+  const int64_t kTotalValues = std::min<int64_t>(INT16_MAX, 1UL << sizeof(T) / 2);\n+  const int64_t kRepeats = 5;\n+\n+  std::vector<T> values;\n+  std::vector<T> member_set;\n+  std::vector<bool> expected;\n+  for (int64_t i = 0; i < kTotalValues * kRepeats; i++) {\n+    const auto val = static_cast<T>(i % kTotalValues);\n+    values.push_back(val);\n+    member_set.push_back(val);\n+    expected.push_back(static_cast<bool>(true));\n+  }\n+\n+  auto type = TypeTraits<TypeParam>::type_singleton();\n+  CheckIsIn<TypeParam, T>(&this->ctx_, type, values, {}, member_set, {}, expected, {});\n+}\n+\n+TEST_F(TestIsInKernel, IsInNull) {\n+  CheckIsIn<NullType,std::nullptr_t>(&this->ctx_, null(), {0, 0, 0},\n+                                   {false, false, false}, {0, 0, 0},\n+                                   {false, false, false}, {true, true, true}, {});\n+\n+  CheckIsIn<NullType,std::nullptr_t>(&this->ctx_, null(), {NULL, NULL, NULL},\n+                                   {}, {NULL, NULL, NULL},\n+                                   {}, {true, true, true}, {});\n+\n+  CheckIsIn<NullType,std::nullptr_t>(&this->ctx_, null(), {nullptr, nullptr, nullptr},\n+                                   {}, {nullptr, nullptr, nullptr},\n+                                   {}, {true, true, true}, {});\n+}\n+\n+TEST_F(TestIsInKernel, IsInTimeTimestamp) {\n+  CheckIsIn<Time32Type, int32_t>(&this->ctx_, time32(TimeUnit::SECOND), {2, 1, 5, 1},\n+                                   {true, false, true, true}, {2, 1, 2, 1},\n+                                   {true, false, true, true}, {true, true, false, true}, {});\n+\n+  CheckIsIn<Time64Type, int64_t>(&this->ctx_, time64(TimeUnit::NANO), {2, 1, 2, 1},\n+                                   {true, false, true, true}, {2, 1, 2, 1},\n+                                   {true, false, true, true}, {true, true, true, true}, {});\n+\n+  CheckIsIn<TimestampType, int64_t>(&this->ctx_, timestamp(TimeUnit::NANO),\n+                                      {2, 1, 2, 1}, {true, false, true, true},\n+                                      {2, 1, 2, 1}, {true, false, true, true},\n+                                      {true, true, true, true}, {});\n+}\n+\n+TEST_F(TestIsInKernel, IsInBoolean) {\n+  CheckIsIn<BooleanType, bool>(&this->ctx_, boolean(), {false, true, false, true},\n+                                 {true, false, true, true}, {true, true, false, true},\n+                                 {true, false, true, true}, { true, true, true, true }, {});\n+\n+  CheckIsIn<BooleanType, bool>(&this->ctx_, boolean(), {false, true, false, true},\n+                                 {true, false, true, true}, {false, true, false, true},\n+                                 {true, true, false, true}, {true, true, true, true}, {});\n+\n+  CheckIsIn<BooleanType, bool>(&this->ctx_, boolean(), {true, true, false, true}, {},\n+                                 {true, true, false, true}, {}, {true, true, true, true}, {});\n+\n+  CheckIsIn<BooleanType, bool>(&this->ctx_, boolean(), {false, true, false, true}, {},\n+                                  {true, true, true, true}, {}, {false, true, false, true}, {});\n+}\n+\n+TEST_F(TestIsInKernel, IsInBinary) {\n+  CheckIsIn<BinaryType, std::string>(&this->ctx_, binary(),\n+                                       {\"test\", \"\", \"test2\", \"test\"},\n+                                       {true, false, true, true}, {\"test\", \"\", \"test2\", \"test\"},\n+                                       {true, false, true, true}, {true, true, true, true}, {});\n+\n+  CheckIsIn<StringType, std::string>(&this->ctx_, utf8(), {\"test\", \"\", \"test2\", \"test\"},\n+                                       {true, false, true, true}, {\"test\",\"\", \"test2\", \"test\"},\n+                                       {true, false, true, false}, {true, true, true, true}, {});\n+}\n+\n+TEST_F(TestIsInKernel, BinaryResizeTable) {\n+  const int32_t kTotalValues = 10000;\n+#if !defined(ARROW_VALGRIND)\n+  const int32_t kRepeats = 10;\n+#else\n+  // Mitigate Valgrind's slowness\n+  const int32_t kRepeats = 3;\n+#endif\n+\n+  std::vector<std::string> values;\n+  std::vector<std::string> member_set;\n+  std::vector<bool> expected;\n+  char buf[20] = \"test\";\n+\n+  for (int32_t i = 0; i < kTotalValues * kRepeats; i++) {\n+    int32_t index = i % kTotalValues;\n+\n+    ASSERT_GE(snprintf(buf + 4, sizeof(buf) - 4, \"%d\", index), 0);\n \n Review comment:\n   Is this debug code?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-02T14:26:31.068+0000",
                    "updated": "2019-05-02T14:26:31.068+0000",
                    "started": "2019-05-02T14:26:31.067+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "236303",
                    "issueId": "13103400"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103400/worklog/236304",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4235: ARROW-1561: [C++] Kernel implementations for IsIn\nURL: https://github.com/apache/arrow/pull/4235#discussion_r280428633\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/isin.h\n ##########\n @@ -0,0 +1,49 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+class DataType;\n+struct ArrayData;\n+\n+namespace compute {\n+\n+class FunctionContext;\n+\n+/// \\brief IsIn returns boolean values\n+/// \\param[in] context the FunctionContext\n+/// \\param[in] data array-like input\n \n Review comment:\n   And not the proper name.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-02T14:26:31.150+0000",
                    "updated": "2019-05-02T14:26:31.150+0000",
                    "started": "2019-05-02T14:26:31.150+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "236304",
                    "issueId": "13103400"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103400/worklog/236305",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4235: ARROW-1561: [C++] Kernel implementations for IsIn\nURL: https://github.com/apache/arrow/pull/4235#discussion_r280426456\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/isin.cc\n ##########\n @@ -0,0 +1,244 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/isin.h\"\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <cstring>\n+#include <memory>\n+#include <mutex>\n+#include <sstream>\n+#include <string>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/hashing.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+\n+class MemoryPool;\n+\n+using internal::checked_cast;\n+using internal::DictionaryTraits;\n+using internal::HashTraits;\n+\n+namespace compute {\n+\n+#define CHECK_IMPLEMENTED(KERNEL, FUNCNAME, TYPE)                                       \\\n+  if (!KERNEL) {                                                                        \\\n+    return Status::NotImplemented(FUNCNAME, \" not implemented for \", type->ToString()); \\\n+  }\n+\n+class HashBinaryKernelImpl: public BinaryKernel {\n \n Review comment:\n   I also think this is the proper strategy, the right operator should be treated as constant here.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-02T14:26:31.153+0000",
                    "updated": "2019-05-02T14:26:31.153+0000",
                    "started": "2019-05-02T14:26:31.153+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "236305",
                    "issueId": "13103400"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103400/worklog/236307",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4235: ARROW-1561: [C++] Kernel implementations for IsIn\nURL: https://github.com/apache/arrow/pull/4235#discussion_r280428541\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/isin.h\n ##########\n @@ -0,0 +1,49 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+class DataType;\n+struct ArrayData;\n+\n+namespace compute {\n+\n+class FunctionContext;\n+\n+/// \\brief IsIn returns boolean values\n+/// \\param[in] context the FunctionContext\n+/// \\param[in] data array-like input\n \n Review comment:\n   It's missing the `member_set` parameter.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-02T14:26:31.318+0000",
                    "updated": "2019-05-02T14:26:31.318+0000",
                    "started": "2019-05-02T14:26:31.317+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "236307",
                    "issueId": "13103400"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103400/worklog/236306",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4235: ARROW-1561: [C++] Kernel implementations for IsIn\nURL: https://github.com/apache/arrow/pull/4235#discussion_r280428695\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/isin.h\n ##########\n @@ -0,0 +1,49 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+class DataType;\n+struct ArrayData;\n+\n+namespace compute {\n+\n+class FunctionContext;\n+\n+/// \\brief IsIn returns boolean values\n+/// \\param[in] context the FunctionContext\n+/// \\param[in] data array-like input\n+/// \\param[out] out result with same shape and type as input\n+///\n+/// \\since 0.14.0\n+/// \\note API not yet finalized\n+\n \n Review comment:\n   Extra new line.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-02T14:26:31.318+0000",
                    "updated": "2019-05-02T14:26:31.318+0000",
                    "started": "2019-05-02T14:26:31.317+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "236306",
                    "issueId": "13103400"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103400/worklog/236308",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4235: ARROW-1561: [C++] Kernel implementations for IsIn\nURL: https://github.com/apache/arrow/pull/4235#discussion_r280430111\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/isin.cc\n ##########\n @@ -0,0 +1,244 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/isin.h\"\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <cstring>\n+#include <memory>\n+#include <mutex>\n+#include <sstream>\n+#include <string>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/util-internal.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit-util.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/hashing.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+\n+class MemoryPool;\n+\n+using internal::checked_cast;\n+using internal::DictionaryTraits;\n+using internal::HashTraits;\n+\n+namespace compute {\n+\n+#define CHECK_IMPLEMENTED(KERNEL, FUNCNAME, TYPE)                                       \\\n+  if (!KERNEL) {                                                                        \\\n+    return Status::NotImplemented(FUNCNAME, \" not implemented for \", type->ToString()); \\\n+  }\n+\n+class HashBinaryKernelImpl: public BinaryKernel {\n+\n+    virtual Status Compute(FunctionContext* ctx, const ArrayData& left,\n+                         const ArrayData& right, std::shared_ptr<ArrayData>& out) = 0;\n+\n+    public:\n+    Status Call(FunctionContext* ctx, const Datum& left, const Datum& right,\n+                                                    Datum* out) override {\n+\n+        DCHECK_EQ(Datum::ARRAY, right.kind());\n+        DCHECK_EQ(Datum::ARRAY, left.kind());\n+\n+        const ArrayData& left_data = *left.array();\n+        const ArrayData& right_data = *right.array();\n+\n+        std::shared_ptr<ArrayData> result;\n+        RETURN_NOT_OK(Compute(ctx, left_data , right_data, result));\n+\n+        out->value = std::move(result);\n+        return Status::OK();\n+    }\n+    std::shared_ptr<DataType> out_type() const override { return boolean(); }\n+};\n+\n+template <typename Type, typename Scalar>\n+class IsInKernel : public HashBinaryKernelImpl{\n+public:\n+    IsInKernel(const std::shared_ptr<DataType>& type, MemoryPool* pool){}\n+\n+    Status VisitNull(){\n+        values.emplace_back ();\n+        return Status::OK();\n+    }\n+\n+    Status VisitValue(const Scalar& value){\n+        values.emplace_back(value);\n+        return Status::OK();\n+    }\n+\n+    Status Compute(FunctionContext* ctx, const ArrayData& left, const ArrayData& right,\n+                 std::shared_ptr<ArrayData>& out) override {\n+\n+        values.reserve(left.length);\n+        memo_table_.reset(new MemoTable(0));\n+        bool_builder_.Reset();\n+        bool_builder_.Reserve(left.length);\n+\n+        ArrayDataVisitor<Type>::Visit(right, this);\n+\n+        for (const auto& value: values){\n+            memo_table_->GetOrInsert(value);\n+        }\n+\n+        values.clear();\n+        ArrayDataVisitor<Type>::Visit(left, this);\n+\n+        for (const auto& value: values){\n+            if ( memo_table_->Get(value) != -1){\n+                bool_builder_.UnsafeAppend(true);\n+            } else {\n+                bool_builder_.UnsafeAppend(false);\n+            }\n+        }\n+\n+        RETURN_NOT_OK (bool_builder_.FinishInternal(&out));\n+        return Status::OK();\n+    }\n+\n+    protected:\n+        using MemoTable = typename HashTraits<Type>::MemoTableType;\n+        std::unique_ptr<MemoTable> memo_table_;\n+\n+    private:\n+        BooleanBuilder bool_builder_;\n+        std::vector<Scalar>values;\n \n Review comment:\n   This vector is copying the left operand and right, this should be done in a copy-less fashion. The vector needs to go away.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-02T14:26:31.486+0000",
                    "updated": "2019-05-02T14:26:31.486+0000",
                    "started": "2019-05-02T14:26:31.485+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "236308",
                    "issueId": "13103400"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103400/worklog/236309",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "fsaintjacques commented on pull request #4235: ARROW-1561: [C++] Kernel implementations for IsIn\nURL: https://github.com/apache/arrow/pull/4235#discussion_r280428868\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/isin.h\n ##########\n @@ -0,0 +1,49 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+\n+class Array;\n+class DataType;\n+struct ArrayData;\n+\n+namespace compute {\n+\n+class FunctionContext;\n \n Review comment:\n   ?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-05-02T14:26:31.491+0000",
                    "updated": "2019-05-02T14:26:31.491+0000",
                    "started": "2019-05-02T14:26:31.490+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "236309",
                    "issueId": "13103400"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 78000,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@66567f90[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@70bc71e0[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@166d1669[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5cd4635[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6c0c9969[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@3d143667[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4334a1f2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2ca7bb4f[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@24e8a863[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@38531597[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5e8e085e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@4fe2bd03[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 78000,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Jul 31 20:39:24 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-07-31T20:39:24.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1561/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2017-09-19T21:54:28.000+0000",
        "updated": "2019-07-31T20:43:22.000+0000",
        "timeoriginalestimate": null,
        "description": "isin determines whether each element in the left array is contained in the values in the right array. This function must handle the case where the right array has nulls (so that null in the left array will return true)\n\n{code}\nisin(['a', 'b', null], ['a', 'c'])\nreturns [true, false, null]\n\nisin(['a', 'b', null], ['a', 'c', null])\nreturns [true, false, true]\n{code}\n\nMay need an option to return false for null instead of null",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "21h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 78000
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Kernel implementations for \"isin\" (set containment)",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103400/comment/16609538",
                    "id": "16609538",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "[~xhochy] are you working on this?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-09-10T17:24:57.250+0000",
                    "updated": "2018-09-10T17:24:57.250+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103400/comment/16612292",
                    "id": "16612292",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "I'm doing the JIRAs currently that lead up to this here. Won't be there for 0.11",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-09-12T15:04:46.929+0000",
                    "updated": "2018-09-12T15:04:46.929+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103400/comment/16897510",
                    "id": "16897510",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 4235\n[https://github.com/apache/arrow/pull/4235]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-07-31T20:39:24.472+0000",
                    "updated": "2019-07-31T20:39:24.472+0000"
                }
            ],
            "maxResults": 3,
            "total": 3,
            "startAt": 0
        },
        "customfield_12311820": "0|i3k9hb:",
        "customfield_12314139": null
    }
}