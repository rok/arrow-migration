{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13139982",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982",
    "key": "ARROW-2195",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12342562",
                "id": "12342562",
                "description": "",
                "name": "0.10.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-08-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12531163",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12531163",
                "type": {
                    "id": "12310051",
                    "name": "Supercedes",
                    "inward": "is superceded by",
                    "outward": "supercedes",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310051"
                },
                "outwardIssue": {
                    "id": "13148872",
                    "key": "ARROW-2364",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13148872",
                    "fields": {
                        "summary": "[Plasma] PlasmaClient::Get() could take vector of object ids",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/5",
                            "id": "5",
                            "description": "General wishlist item.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Wish",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12332956",
                "id": "12332956",
                "name": "C++ - Plasma"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
            "name": "pcmoritz",
            "key": "pcmoritz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Philipp Moritz",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
            "name": "pcmoritz",
            "key": "pcmoritz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Philipp Moritz",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2195/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2c9e10f9[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@31c18293[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@45b8236f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@78d0f451[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@a481b4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@76241e28[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7283f8d8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@d0ee8a5[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29836191[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7f80efd7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@12288dc7[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@681904e7[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Apr 11 21:04:19 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-04-04T17:54:23.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2195/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2018-02-21T19:11:27.000+0000",
        "updated": "2018-04-11T21:04:19.000+0000",
        "timeoriginalestimate": null,
        "description": "It can be reproduced with the following script:\r\n\r\n{code:python}\r\nimport pyarrow as pa\r\nimport pyarrow.plasma as plasma\r\n\r\ndef retrieve1():\r\n    client = plasma.connect('test', \"\", 0)\r\n\r\n    key = \"keynumber1keynumber1\"\r\n    pid = plasma.ObjectID(bytearray(key,'UTF-8'))\r\n\r\n    [buff] = client .get_buffers([pid])\r\n    batch = pa.RecordBatchStreamReader(buff).read_next_batch()\r\n\r\n    print(batch)\r\n    print(batch.schema)\r\n    print(batch[0])\r\n\r\n    return batch\r\n\r\nclient = plasma.connect('test', \"\", 0)\r\n\r\ntest1 = [1, 12, 23, 3, 21, 34]\r\ntest1 = pa.array(test1, pa.int32())\r\n\r\nbatch = pa.RecordBatch.from_arrays([test1], ['FIELD1'])\r\n\r\nkey = \"keynumber1keynumber1\"\r\npid = plasma.ObjectID(bytearray(key,'UTF-8'))\r\nsink = pa.MockOutputStream()\r\nstream_writer = pa.RecordBatchStreamWriter(sink, batch.schema)\r\nstream_writer.write_batch(batch)\r\nstream_writer.close()\r\n\r\nbff = client.create(pid, sink.size())\r\n\r\nstream = pa.FixedSizeBufferWriter(bff)\r\nwriter = pa.RecordBatchStreamWriter(stream, batch.schema)\r\nwriter.write_batch(batch)\r\nclient.seal(pid)\r\n\r\nbatch = retrieve1()\r\nprint(batch)\r\nprint(batch.schema)\r\nprint(batch[0])\r\n{code}\r\n\u00a0\r\n\r\nPreliminary backtrace:\r\n\r\n\u00a0\r\n\r\n{code}\r\n\r\nCESS (code=1, address=0x111138158)\r\n\r\n\u00a0 \u00a0\u00a0frame #0: 0x000000010e6457fc lib.so`__pyx_pw_7pyarrow_3lib_10Int32Value_1as_py(_object*, _object*) + 28\r\n\r\nlib.so`__pyx_pw_7pyarrow_3lib_10Int32Value_1as_py:\r\n\r\n->\u00a0\u00a00x10e6457fc <+28>: movslq (%rdx,%rcx,4), %rdi\r\n\r\n\u00a0 \u00a0\u00a00x10e645800 <+32>: callq\u00a0\u00a00x10e698170\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0; symbol stub for: PyInt_FromLong\r\n\r\n\u00a0 \u00a0\u00a00x10e645805 <+37>: testq\u00a0\u00a0%rax, %rax\r\n\r\n\u00a0 \u00a0\u00a00x10e645808 <+40>: je\u00a0\u00a0 \u00a0\u00a00x10e64580c\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0; <+44>\r\n\r\n(lldb)\u00a0bt\r\n * thread #1: tid = 0xf1378e, 0x000000010e6457fc lib.so`__pyx_pw_7pyarrow_3lib_10Int32Value_1as_py(_object*, _object*) + 28, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x111138158)\r\n\r\n\u00a0\u00a0* frame #0: 0x000000010e6457fc lib.so`__pyx_pw_7pyarrow_3lib_10Int32Value_1as_py(_object*, _object*) + 28\r\n\r\n\u00a0 \u00a0\u00a0frame #1: 0x000000010e5ccd35 lib.so`__Pyx_PyObject_CallNoArg(_object*) + 133\r\n\r\n\u00a0 \u00a0\u00a0frame #2: 0x000000010e613b25 lib.so`__pyx_pw_7pyarrow_3lib_10ArrayValue_3__repr__(_object*) + 933\r\n\r\n\u00a0 \u00a0\u00a0frame #3: 0x000000010c2f83bc libpython2.7.dylib`PyObject_Repr + 60\r\n\r\n\u00a0 \u00a0\u00a0frame #4: 0x000000010c35f651 libpython2.7.dylib`PyEval_EvalFrameEx + 22305\r\n\r\n{code}",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Plasma] Segfault when retrieving RecordBatch from plasma store",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16386184",
                    "id": "16386184",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "The returned {{BatchRecord}} doesn't keep the {{PlasmaBuffer}} alive. In turn, {{PlasmaBuffer.__dealloc__}} calls {{self.client.release(self.object_id)}}. If you remove that line, the program runs fine.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-03-05T15:13:41.950+0000",
                    "updated": "2018-03-05T15:13:41.950+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16386229",
                    "id": "16386229",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "The detailed explanation here is that the C++ shared_ptr is passed around, not the Python wrapper. So {{PlasmaBuffer.__dealloc__}} is called even though there are still C++ exports of the underlying data, particularly in the {{BatchRecord}} object.\r\n\r\nIncidentally, it seems {{ForeignBuffer}} will have the same problem: when the C++ shared_ptr is passed around, the original Python object won't be kept alive. Instead, perhaps we need to be able to add destructors to an arbitrary C++ Buffer object, for example:\r\n\r\n{code:c++}\r\nStatus Buffer::AddDestructor(std::function<void()>&& destructor);\r\n{code}\r\n\r\nThen it will be possible to keep a Python object alive as long as the corresponding C++ buffer is alive:\r\n\r\n{code:c++}\r\nStatus AddBufferPayload(std::shared_ptr<Buffer> buffer, PyObject* ref)\r\n{\r\n  RETURN_NOT_OK(buffer->AddDestructor([&ref]() { Py_DECREF(ref); }));\r\n  Py_INCREF(ref);\r\n  return Status::OK();\r\n}\r\n{code}\r\n\r\n{code:python}\r\ndef foreign_buffer(addr, size, base):\r\n    cdef shared_ptr[CBuffer] buffer = make_shared[CBuffer](\r\n        <uint8_t*>c_addr, c_size)\r\n    AddBufferPayload(buffer, base)\r\n    return pyarrow_wrap_buffer(buffer)\r\n{code}\r\n\r\n{code:python}\r\ncdef class _PlasmaObjectKeepAlive:\r\n    cdef:\r\n        ObjectID object_id\r\n        PlasmaClient client\r\n\r\n    def __cinit__(self, ObjectID object_id, PlasmaClient client):\r\n        self.object_id = object_id\r\n        self.client = client\r\n\r\n    def __dealloc__(self):\r\n        \"\"\"\r\n        Notify Plasma that the object is no longer needed.\r\n\r\n        If the plasma client has been shut down, then don't do anything.\r\n        \"\"\"\r\n        self.client.release(self.object_id)\r\n\r\ncdef class PlasmaClient:\r\n\r\n    cdef _make_plasma_buffer(self, ObjectID object_id,\r\n                             shared_ptr[CBuffer] buffer, int64_t size):\r\n        AddBufferPaylod(buffer, _PlasmaObjectKeepAlive(object_id, self)\r\n        return pyarrow_wrap_buffer(buffer)\r\n\r\n{code}\r\n\r\ncc [~xhochy]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-03-05T15:43:32.822+0000",
                    "updated": "2018-03-05T15:43:32.822+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16386257",
                    "id": "16386257",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Instead of adding a dtor to the base {{Buffer}} we can instead create an {{arrow::ForeignBuffer}} subclass with the extra dtor member",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-03-05T15:55:21.711+0000",
                    "updated": "2018-03-05T15:55:21.711+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16386262",
                    "id": "16386262",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "That would indeed solve the ForeignBuffer issue, but not the Plasma issue, right? That is, the solution only applies when the buffer is created from Python...",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-03-05T15:58:30.632+0000",
                    "updated": "2018-03-05T15:58:30.632+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16386267",
                    "id": "16386267",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Right probably need to make Plasma buffers work like the {{MemoryMap}} in https://github.com/apache/arrow/blob/master/cpp/src/arrow/io/file.cc#L593 that manages the lifetime of the mapped memory created by the {{MemoryMappedFile}} class",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-03-05T16:02:33.346+0000",
                    "updated": "2018-03-05T16:02:33.346+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16387768",
                    "id": "16387768",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "{quote}Right probably need to make Plasma buffers work like the {{MemoryMap}} in [https://github.com/apache/arrow/blob/master/cpp/src/arrow/io/file.cc#L593] that manages the lifetime of the mapped memory created by the {{MemoryMappedFile}} class\r\n{quote}\r\nRight now it seems C++ users are supposed to call {{PlasmaClient::Release}} explicitly when they are done with an object. Doing it automatically risks introducing double (or early) releases, am I wrong?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-03-06T13:33:00.248+0000",
                    "updated": "2018-03-06T13:33:16.641+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16388442",
                    "id": "16388442",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "adding [~robertnishihara] also",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-03-06T20:04:57.813+0000",
                    "updated": "2018-03-06T20:04:57.813+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16394791",
                    "id": "16394791",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Moving to 0.10.0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-03-12T03:53:39.402+0000",
                    "updated": "2018-03-12T03:53:39.402+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16418664",
                    "id": "16418664",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "I think the right thing to do here is to add a new {{PlasmaClient::GetAuto}} method that returns automatically-releasing buffers.\r\n\r\nThe one caveat is that the buffers must keep a pointer to the plasma client, so the caller must guarantee that the client stays alive long enough. Unfortunately, the {{PlasmaClient}} constructor/factory currently doesn't return a {{shared_ptr}}...",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-03-29T09:37:58.114+0000",
                    "updated": "2018-03-29T09:37:58.114+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16418679",
                    "id": "16418679",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou opened a new pull request #1807: [WIP] ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807\n \n \n   On the C++ side, add a new PlasmaClient::GetAuto() method to return buffers that release\r\n   the corresponding object on destruction.\r\n   \r\n   On the Python side, return such buffers in PlasmaClient.get_buffers().\r\n   \r\n   TODO: also tackle Create()?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-29T09:57:03.258+0000",
                    "updated": "2018-03-29T09:57:03.258+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16418687",
                    "id": "16418687",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "By the way, does anyone know how to build the GPU extensions for Plasma?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-03-29T10:02:26.841+0000",
                    "updated": "2018-03-29T10:02:26.841+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16418768",
                    "id": "16418768",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Ok, apparently I just had to pass `ARROW_GPU=ON` to cmake after installing the CUDA toolkit :)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-03-29T11:04:39.500+0000",
                    "updated": "2018-03-29T11:04:39.500+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16418852",
                    "id": "16418852",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1807: [WIP] ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#issuecomment-377213581\n \n \n   This changes/adds some APIs on the CUDA side so will need reviewing from someone familiar with that code base.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-03-29T12:02:50.975+0000",
                    "updated": "2018-03-29T12:02:50.975+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16418904",
                    "id": "16418904",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "The Create() behavior is specific enough to warrant its own issue.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-03-29T12:33:13.454+0000",
                    "updated": "2018-03-29T12:33:13.454+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16418917",
                    "id": "16418917",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Opened ARROW-2363 for Create().",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-03-29T12:41:01.515+0000",
                    "updated": "2018-03-29T12:41:01.515+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16422097",
                    "id": "16422097",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#issuecomment-377901845\n \n \n   @robertnishihara @pcmoritz @Wapaul1 Is one of you interested in reviewing this?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-02T10:21:12.295+0000",
                    "updated": "2018-04-02T10:21:12.295+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16422833",
                    "id": "16422833",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pcmoritz commented on a change in pull request #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#discussion_r178599283\n \n \n\n ##########\n File path: cpp/src/plasma/common.h\n ##########\n @@ -104,4 +104,29 @@ struct PlasmaStoreInfo;\n extern const PlasmaStoreInfo* plasma_config;\n }  // namespace plasma\n \n+// ----------------------------------------------------------------------\n \n Review comment:\n   Let's put this into https://github.com/apache/arrow/blob/master/cpp/src/arrow/util/macros.h. It seems more broadly useful for the whole arrow project.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-02T17:38:06.038+0000",
                    "updated": "2018-04-02T17:38:06.038+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16422909",
                    "id": "16422909",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pcmoritz commented on a change in pull request #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#discussion_r178610323\n \n \n\n ##########\n File path: cpp/src/plasma/client.cc\n ##########\n @@ -72,6 +72,27 @@ constexpr int64_t kThreadPoolSize = 8;\n constexpr int64_t kBytesInMB = 1 << 20;\n static std::vector<std::thread> threadpool_(kThreadPoolSize);\n \n+/// A Buffer class that automatically releases the backing plasma object\n+/// when it goes out of scope.\n+class PlasmaBuffer : public Buffer {\n+ public:\n+  ~PlasmaBuffer();\n+\n+  PlasmaBuffer(PlasmaClient* client, const ObjectID& object_id,\n+               const std::shared_ptr<Buffer>& buffer)\n+      : Buffer(buffer, 0, buffer->size()), client_(client), object_id_(object_id) {\n+    if (buffer->is_mutable()) {\n+      is_mutable_ = true;\n+    }\n+  }\n+\n+ private:\n+  PlasmaClient* client_;\n+  ObjectID object_id_;\n+};\n+\n+PlasmaBuffer::~PlasmaBuffer() { (void)client_->Release(object_id_); }\n \n Review comment:\n   we have ARROW_UNUSED for this: https://github.com/apache/arrow/blob/ecb7605a640dc34452dd696240a74df9a9f7f39b/cpp/src/arrow/util/macros.h#L28\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-02T18:19:22.737+0000",
                    "updated": "2018-04-02T18:19:22.737+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16422920",
                    "id": "16422920",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pcmoritz commented on a change in pull request #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#discussion_r178611472\n \n \n\n ##########\n File path: cpp/src/plasma/client.cc\n ##########\n @@ -144,6 +165,11 @@ uint8_t* PlasmaClient::lookup_mmapped_file(int store_fd_val) {\n   return entry->second.pointer;\n }\n \n+bool PlasmaClient::IsInUse(const ObjectID& object_id) {\n \n Review comment:\n   This should be exposed through the Info method, see https://github.com/apache/arrow/blob/ecb7605a640dc34452dd696240a74df9a9f7f39b/cpp/src/plasma/client.h#L301\r\n   \r\n   Given that is is private, we can leave it for now, but can you create a JIRA for it?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-02T18:23:59.196+0000",
                    "updated": "2018-04-02T18:23:59.196+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16422924",
                    "id": "16422924",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pcmoritz commented on a change in pull request #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#discussion_r178612209\n \n \n\n ##########\n File path: cpp/src/plasma/client.cc\n ##########\n @@ -384,6 +407,22 @@ Status PlasmaClient::Get(const ObjectID* object_ids, int64_t num_objects,\n   return Status::OK();\n }\n \n+Status PlasmaClient::Get(const ObjectID* object_ids, int64_t num_objects,\n+                         int64_t timeout_ms, ObjectBuffer* object_buffers) {\n+  const auto wrap_buffer = [](const ObjectID& object_id,\n \n Review comment:\n   Can we get rid of this callback, and do the wrapping into PlasmaBuffer as a post-processing step to GetBuffers?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-02T18:26:56.088+0000",
                    "updated": "2018-04-02T18:26:56.088+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16422937",
                    "id": "16422937",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#discussion_r178613813\n \n \n\n ##########\n File path: cpp/src/plasma/client.cc\n ##########\n @@ -144,6 +165,11 @@ uint8_t* PlasmaClient::lookup_mmapped_file(int store_fd_val) {\n   return entry->second.pointer;\n }\n \n+bool PlasmaClient::IsInUse(const ObjectID& object_id) {\n \n Review comment:\n   Ok, see ARROW-2379\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-02T18:32:25.757+0000",
                    "updated": "2018-04-02T18:32:25.757+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16422941",
                    "id": "16422941",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#discussion_r178614666\n \n \n\n ##########\n File path: cpp/src/plasma/client.cc\n ##########\n @@ -384,6 +407,22 @@ Status PlasmaClient::Get(const ObjectID* object_ids, int64_t num_objects,\n   return Status::OK();\n }\n \n+Status PlasmaClient::Get(const ObjectID* object_ids, int64_t num_objects,\n+                         int64_t timeout_ms, ObjectBuffer* object_buffers) {\n+  const auto wrap_buffer = [](const ObjectID& object_id,\n \n Review comment:\n   That sounds a bit brittle. You want to have a single `PlasmaBuffer` per exported (e.g. mmap'ed) piece of memory, but both data and metadata share that piece of memory.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-02T18:35:53.822+0000",
                    "updated": "2018-04-02T18:35:53.822+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16422950",
                    "id": "16422950",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pcmoritz commented on issue #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#issuecomment-378005932\n \n \n   How do people feel about replacing the old Get and Create methods with new ones which return PlasmaBuffers, and make Release private (which means PlasmaBuffer needs to be friend of PlasmaClient). Given that 0.9 has just been released it might be the right time to do it.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-02T18:39:50.072+0000",
                    "updated": "2018-04-02T18:39:50.072+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16422959",
                    "id": "16422959",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#issuecomment-378007899\n \n \n   I suppose that depends how you feel about breaking compatibility without notice :-)\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-02T18:46:51.795+0000",
                    "updated": "2018-04-02T18:46:51.795+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16423128",
                    "id": "16423128",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pcmoritz commented on issue #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#issuecomment-378045398\n \n \n   Ok, let's do the following:\r\n   \r\n   - Deprecate the old Create and Get and Release\r\n   \r\n   - Make new ones with the following signature:\r\n   \r\n   ```\r\n   // sizes are already available through buffers, no need to store them separately\r\n   struct PlasmaObject {\r\n     std::shared_ptr<Buffer> data;\r\n     std::shared_ptr<Buffer> metadata;\r\n     int device_num;\r\n   }\r\n   \r\n   Status Get(const std::vector<ObjectID>& object_ids, int64_t timeout_ms, std::vector<PlasmaObject>* objects);\r\n   \r\n   Status Create(const ObjectID& object_id, int64_t data_size, int64_t metadata_size, PlasmaObject* object);\r\n   \r\n   (the metadata would be written to shared memory directly by the client instead of passing it in)\r\n   \r\n   which are backed by PlasmaBuffers and don't need explicit release\r\n   ```\r\n   \r\n   I'm slightly uncomfortable that the two overloaded ones have different behavior and the same name, but going forward that seems to be the best solution (we should try to avoid having two rounds of deprecations).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-02T21:01:16.246+0000",
                    "updated": "2018-04-02T21:01:16.246+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16423129",
                    "id": "16423129",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pcmoritz commented on issue #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#issuecomment-378045398\n \n \n   Ok, let's do the following:\r\n   \r\n   - Deprecate the old Create and Get and Release\r\n   \r\n   - Make new ones with the following signature:\r\n   \r\n   ```\r\n   // sizes are already available through buffers, no need to store them separately\r\n   struct PlasmaObject {\r\n     std::shared_ptr<Buffer> data;\r\n     std::shared_ptr<Buffer> metadata;\r\n     int device_num;\r\n   }\r\n   \r\n   Status Get(const std::vector<ObjectID>& object_ids, int64_t timeout_ms, std::vector<PlasmaObject>* objects);\r\n   \r\n   Status Create(const ObjectID& object_id, int64_t data_size, int64_t metadata_size, PlasmaObject* object);\r\n   \r\n   // (the metadata would be written to shared memory directly by the client instead of passing it in)\r\n   \r\n   which are backed by PlasmaBuffers and don't need explicit release\r\n   ```\r\n   \r\n   I'm slightly uncomfortable that the two overloaded ones have different behavior and the same name, but going forward that seems to be the best solution (we should try to avoid having two rounds of deprecations).\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-02T21:01:42.676+0000",
                    "updated": "2018-04-02T21:01:42.676+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16423212",
                    "id": "16423212",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "robertnishihara commented on a change in pull request #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#discussion_r178666714\n \n \n\n ##########\n File path: cpp/src/plasma/client.cc\n ##########\n @@ -144,6 +165,11 @@ uint8_t* PlasmaClient::lookup_mmapped_file(int store_fd_val) {\n   return entry->second.pointer;\n }\n \n+bool PlasmaClient::IsInUse(const ObjectID& object_id) {\n \n Review comment:\n   `Info` requires an IPC to the plasma store and seems too heavy-weight since this can all be determined with locally available information.\r\n   \r\n   `IsInUse` is probably better named something like `IsInUseByThisClient` (that's an ugly name, but I think it's more clear).\r\n   \r\n   We have a lot of code in `client.cc` that's already doing stuff like\r\n   \r\n   ```cpp\r\n   auto elem = objects_in_use_.find(object_id);\r\n   if (elem == objects_in_use_.end()) {\r\n     ...\r\n   }\r\n   ```\r\n   \r\n   so it may make sense for `IsInUse` to replace some of that code.\r\n   \r\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-02T22:20:08.252+0000",
                    "updated": "2018-04-02T22:20:08.252+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16423245",
                    "id": "16423245",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "robertnishihara commented on a change in pull request #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#discussion_r178669125\n \n \n\n ##########\n File path: cpp/src/plasma/client.h\n ##########\n @@ -121,31 +122,40 @@ class ARROW_EXPORT PlasmaClient {\n   ///        device_num = 1 corresponds to GPU0,\n   ///        device_num = 2 corresponds to GPU1, etc.\n   /// \\return The return status.\n-  Status Create(const ObjectID& object_id, int64_t data_size, uint8_t* metadata,\n+  ///\n+  /// The returned object must be released once it is done with, then it\n+  /// must be either sealed or aborted.\n \n Review comment:\n   It's ok for it to be sealed before it is released.\r\n   \r\n   Maybe \"The returned object must be released once it is done with. It must also be either sealed or aborted.\"?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-02T22:48:56.557+0000",
                    "updated": "2018-04-02T22:48:56.557+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16423246",
                    "id": "16423246",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "robertnishihara commented on a change in pull request #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#discussion_r178670394\n \n \n\n ##########\n File path: python/pyarrow/plasma.pyx\n ##########\n @@ -248,12 +250,7 @@ cdef class PlasmaClient:\n             check_status(self.client.get().Get(ids.data(), ids.size(),\n \n Review comment:\n   Should this be changed to use `GetAuto`?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-02T22:48:56.622+0000",
                    "updated": "2018-04-02T22:48:56.622+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16423247",
                    "id": "16423247",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "robertnishihara commented on a change in pull request #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#discussion_r178670911\n \n \n\n ##########\n File path: cpp/src/plasma/client.cc\n ##########\n @@ -72,6 +72,27 @@ constexpr int64_t kThreadPoolSize = 8;\n constexpr int64_t kBytesInMB = 1 << 20;\n static std::vector<std::thread> threadpool_(kThreadPoolSize);\n \n+/// A Buffer class that automatically releases the backing plasma object\n+/// when it goes out of scope.\n+class PlasmaBuffer : public Buffer {\n \n Review comment:\n   Does this mean we can get rid of \r\n   \r\n   https://github.com/apache/arrow/blob/7e27cf511558a92c598bae330958d9c86a721b22/python/pyarrow/plasma.pyx#L182\r\n   \r\n   now?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-02T22:48:56.658+0000",
                    "updated": "2018-04-02T22:48:56.658+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16423625",
                    "id": "16423625",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#discussion_r178744110\n \n \n\n ##########\n File path: cpp/src/plasma/client.h\n ##########\n @@ -121,31 +122,40 @@ class ARROW_EXPORT PlasmaClient {\n   ///        device_num = 1 corresponds to GPU0,\n   ///        device_num = 2 corresponds to GPU1, etc.\n   /// \\return The return status.\n-  Status Create(const ObjectID& object_id, int64_t data_size, uint8_t* metadata,\n+  ///\n+  /// The returned object must be released once it is done with, then it\n+  /// must be either sealed or aborted.\n \n Review comment:\n   Indeed, it seems you're right.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-03T08:12:54.813+0000",
                    "updated": "2018-04-03T08:12:54.813+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16423635",
                    "id": "16423635",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#discussion_r178744999\n \n \n\n ##########\n File path: python/pyarrow/plasma.pyx\n ##########\n @@ -248,12 +250,7 @@ cdef class PlasmaClient:\n             check_status(self.client.get().Get(ids.data(), ids.size(),\n \n Review comment:\n   Yes, I had overlooked that. Thank you.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-03T08:16:32.340+0000",
                    "updated": "2018-04-03T08:16:32.340+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16423636",
                    "id": "16423636",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on a change in pull request #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#discussion_r178745046\n \n \n\n ##########\n File path: cpp/src/plasma/client.cc\n ##########\n @@ -72,6 +72,27 @@ constexpr int64_t kThreadPoolSize = 8;\n constexpr int64_t kBytesInMB = 1 << 20;\n static std::vector<std::thread> threadpool_(kThreadPoolSize);\n \n+/// A Buffer class that automatically releases the backing plasma object\n+/// when it goes out of scope.\n+class PlasmaBuffer : public Buffer {\n \n Review comment:\n   Once we migrate Create() too, yes.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-03T08:16:43.939+0000",
                    "updated": "2018-04-03T08:16:43.939+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16423850",
                    "id": "16423850",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#issuecomment-378211881\n \n \n   @pcmoritz I would suggest tackling Create() in a separate PR, since there are additional complications in how it interacts with Seal() and Abort().\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-03T11:04:16.033+0000",
                    "updated": "2018-04-03T11:04:16.033+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16423852",
                    "id": "16423852",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#issuecomment-378211881\n \n \n   @pcmoritz I would suggest tackling Create() in a separate PR, since there are additional complications in how it interacts with Seal() and Abort(). What do you think?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-03T11:05:25.283+0000",
                    "updated": "2018-04-03T11:05:25.283+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16423934",
                    "id": "16423934",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#issuecomment-378231065\n \n \n   Note an ideal API would have the Seal(), Abort() and Release() methods on the PlasmaBuffer, not on PlasmaClient.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-03T12:23:44.168+0000",
                    "updated": "2018-04-03T12:23:44.168+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16424455",
                    "id": "16424455",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pcmoritz commented on a change in pull request #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#discussion_r178931180\n \n \n\n ##########\n File path: cpp/src/arrow/util/macros.h\n ##########\n @@ -94,4 +94,29 @@\n #endif\n #endif  // !defined(MANUALLY_ALIGNED_STRUCT)\n \n+// ----------------------------------------------------------------------\n+// From googletest\n+// XXX also in parquet-cpp\n \n Review comment:\n   remove the XXX\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-03T19:08:22.484+0000",
                    "updated": "2018-04-03T19:08:22.484+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16424469",
                    "id": "16424469",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pcmoritz commented on a change in pull request #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#discussion_r178933701\n \n \n\n ##########\n File path: cpp/src/plasma/test/client_tests.cc\n ##########\n @@ -55,10 +64,25 @@ class TestPlasmaStore : public ::testing::Test {\n     ARROW_CHECK_OK(\n         client2_.Connect(\"/tmp/store\" + store_index, \"\", PLASMA_DEFAULT_RELEASE_DELAY));\n   }\n-  virtual void Finish() {\n+  virtual void TearDown() {\n     ARROW_CHECK_OK(client_.Disconnect());\n     ARROW_CHECK_OK(client2_.Disconnect());\n-    system(\"killall plasma_store &\");\n+    // Kill all plasma_store processes\n+    // XXX should only kill the processes we launched\n \n Review comment:\n   replace XXX by TODO\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-03T19:18:17.828+0000",
                    "updated": "2018-04-03T19:18:17.828+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16424473",
                    "id": "16424473",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pcmoritz commented on issue #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#issuecomment-378366078\n \n \n   Awesome, this is really great! Let's remove the XXX in the PR and then we can merge it.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-03T19:20:53.846+0000",
                    "updated": "2018-04-03T19:20:53.846+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16424509",
                    "id": "16424509",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "robertnishihara commented on issue #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#issuecomment-378375186\n \n \n   Nice job @pitrou! This will be a lot cleaner. Especially once we can do the same thing for `Create` and then remove the old code paths.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-03T19:54:01.743+0000",
                    "updated": "2018-04-03T19:54:01.743+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16424517",
                    "id": "16424517",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pcmoritz commented on issue #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#issuecomment-378377783\n \n \n   I also created a JIRA for the Create API (very similar to what you propose, in addition it allows us to get rid of the Abort() method): https://issues.apache.org/jira/browse/ARROW-2386\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-03T20:03:03.118+0000",
                    "updated": "2018-04-03T20:03:03.118+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16425893",
                    "id": "16425893",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pitrou commented on issue #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#issuecomment-378679924\n \n \n   @pcmoritz I fixed the XXX's.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-04T17:25:52.766+0000",
                    "updated": "2018-04-04T17:25:52.766+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16425923",
                    "id": "16425923",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "pcmoritz closed pull request #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/gpu/cuda-test.cc b/cpp/src/arrow/gpu/cuda-test.cc\nindex ae411c9b8..04e1f929e 100644\n--- a/cpp/src/arrow/gpu/cuda-test.cc\n+++ b/cpp/src/arrow/gpu/cuda-test.cc\n@@ -80,6 +80,49 @@ TEST_F(TestCudaBuffer, CopyFromHost) {\n   AssertCudaBufferEquals(*device_buffer, host_buffer->data(), kSize);\n }\n \n+TEST_F(TestCudaBuffer, FromBuffer) {\n+  const int64_t kSize = 1000;\n+  // Initialize device buffer with random data\n+  std::shared_ptr<PoolBuffer> host_buffer;\n+  std::shared_ptr<CudaBuffer> device_buffer;\n+  ASSERT_OK(context_->Allocate(kSize, &device_buffer));\n+  ASSERT_OK(test::MakeRandomBytePoolBuffer(kSize, default_memory_pool(), &host_buffer));\n+  ASSERT_OK(device_buffer->CopyFromHost(0, host_buffer->data(), 1000));\n+  // Sanity check\n+  AssertCudaBufferEquals(*device_buffer, host_buffer->data(), kSize);\n+\n+  // Get generic Buffer from device buffer\n+  std::shared_ptr<Buffer> buffer;\n+  std::shared_ptr<CudaBuffer> result;\n+  buffer = std::static_pointer_cast<Buffer>(device_buffer);\n+  ASSERT_OK(CudaBuffer::FromBuffer(buffer, &result));\n+  ASSERT_EQ(result->size(), kSize);\n+  ASSERT_EQ(result->is_mutable(), true);\n+  ASSERT_EQ(result->mutable_data(), buffer->mutable_data());\n+  AssertCudaBufferEquals(*result, host_buffer->data(), kSize);\n+\n+  buffer = SliceBuffer(device_buffer, 0, kSize);\n+  ASSERT_OK(CudaBuffer::FromBuffer(buffer, &result));\n+  ASSERT_EQ(result->size(), kSize);\n+  ASSERT_EQ(result->is_mutable(), false);\n+  AssertCudaBufferEquals(*result, host_buffer->data(), kSize);\n+\n+  buffer = SliceMutableBuffer(device_buffer, 0, kSize);\n+  ASSERT_OK(CudaBuffer::FromBuffer(buffer, &result));\n+  ASSERT_EQ(result->size(), kSize);\n+  ASSERT_EQ(result->is_mutable(), true);\n+  ASSERT_EQ(result->mutable_data(), buffer->mutable_data());\n+  AssertCudaBufferEquals(*result, host_buffer->data(), kSize);\n+\n+  buffer = SliceMutableBuffer(device_buffer, 3, kSize - 10);\n+  buffer = SliceMutableBuffer(buffer, 8, kSize - 20);\n+  ASSERT_OK(CudaBuffer::FromBuffer(buffer, &result));\n+  ASSERT_EQ(result->size(), kSize - 20);\n+  ASSERT_EQ(result->is_mutable(), true);\n+  ASSERT_EQ(result->mutable_data(), buffer->mutable_data());\n+  AssertCudaBufferEquals(*result, host_buffer->data() + 11, kSize - 20);\n+}\n+\n // IPC only supported on Linux\n #if defined(__linux)\n \ndiff --git a/cpp/src/arrow/gpu/cuda_memory.cc b/cpp/src/arrow/gpu/cuda_memory.cc\nindex 183cbcbc6..a24550947 100644\n--- a/cpp/src/arrow/gpu/cuda_memory.cc\n+++ b/cpp/src/arrow/gpu/cuda_memory.cc\n@@ -98,7 +98,34 @@ CudaBuffer::CudaBuffer(const std::shared_ptr<CudaBuffer>& parent, const int64_t\n     : Buffer(parent, offset, size),\n       context_(parent->context()),\n       own_data_(false),\n-      is_ipc_(false) {}\n+      is_ipc_(false) {\n+  if (parent->is_mutable()) {\n+    is_mutable_ = true;\n+    mutable_data_ = const_cast<uint8_t*>(data_);\n+  }\n+}\n+\n+Status CudaBuffer::FromBuffer(std::shared_ptr<Buffer> buffer,\n+                              std::shared_ptr<CudaBuffer>* out) {\n+  int64_t offset = 0, size = buffer->size();\n+  bool is_mutable = buffer->is_mutable();\n+  // The original CudaBuffer may have been wrapped in another Buffer\n+  // (for example through slicing).\n+  while (!(*out = std::dynamic_pointer_cast<CudaBuffer>(buffer))) {\n+    const std::shared_ptr<Buffer> parent = buffer->parent();\n+    if (!parent) {\n+      return Status::TypeError(\"buffer is not backed by a CudaBuffer\");\n+    }\n+    offset += buffer->data() - parent->data();\n+    buffer = parent;\n+  }\n+  // Re-slice to represent the same memory area\n+  if (offset != 0 || (*out)->size() != size || !is_mutable) {\n+    *out = std::make_shared<CudaBuffer>(*out, offset, size);\n+    (*out)->is_mutable_ = is_mutable;\n+  }\n+  return Status::OK();\n+}\n \n Status CudaBuffer::CopyToHost(const int64_t position, const int64_t nbytes,\n                               void* out) const {\n@@ -129,8 +156,13 @@ CudaHostBuffer::~CudaHostBuffer() {\n // ----------------------------------------------------------------------\n // CudaBufferReader\n \n-CudaBufferReader::CudaBufferReader(const std::shared_ptr<CudaBuffer>& buffer)\n-    : io::BufferReader(buffer), cuda_buffer_(buffer), context_(buffer->context()) {}\n+CudaBufferReader::CudaBufferReader(const std::shared_ptr<Buffer>& buffer)\n+    : io::BufferReader(buffer) {\n+  if (!CudaBuffer::FromBuffer(buffer, &cuda_buffer_).ok()) {\n+    throw std::bad_cast();\n+  }\n+  context_ = cuda_buffer_->context();\n+}\n \n CudaBufferReader::~CudaBufferReader() {}\n \ndiff --git a/cpp/src/arrow/gpu/cuda_memory.h b/cpp/src/arrow/gpu/cuda_memory.h\nindex 3f3dd2f6c..7eb8b884f 100644\n--- a/cpp/src/arrow/gpu/cuda_memory.h\n+++ b/cpp/src/arrow/gpu/cuda_memory.h\n@@ -46,6 +46,15 @@ class ARROW_EXPORT CudaBuffer : public Buffer {\n \n   ~CudaBuffer();\n \n+  /// \\brief Convert back generic buffer into CudaBuffer\n+  /// \\param[in] buffer buffer to convert\n+  /// \\param[out] out conversion result\n+  /// \\return Status\n+  ///\n+  /// This function returns an error if the buffer isn't backed by GPU memory\n+  static Status FromBuffer(std::shared_ptr<Buffer> buffer,\n+                           std::shared_ptr<CudaBuffer>* out);\n+\n   /// \\brief Copy memory from GPU device to CPU host\n   /// \\param[out] out a pre-allocated output buffer\n   /// \\return Status\n@@ -123,7 +132,7 @@ class ARROW_EXPORT CudaIpcMemHandle {\n /// able to do anything other than pointer arithmetic on the returned buffers\n class ARROW_EXPORT CudaBufferReader : public io::BufferReader {\n  public:\n-  explicit CudaBufferReader(const std::shared_ptr<CudaBuffer>& buffer);\n+  explicit CudaBufferReader(const std::shared_ptr<Buffer>& buffer);\n   ~CudaBufferReader();\n \n   /// \\brief Read bytes into pre-allocated host memory\ndiff --git a/cpp/src/arrow/test-util.h b/cpp/src/arrow/test-util.h\nindex fdd42a67a..58f82b348 100644\n--- a/cpp/src/arrow/test-util.h\n+++ b/cpp/src/arrow/test-util.h\n@@ -324,6 +324,14 @@ void AssertChunkedEqual(const ChunkedArray& expected, const ChunkedArray& actual\n   }\n }\n \n+void AssertBufferEqual(const Buffer& buffer, const std::vector<uint8_t>& expected) {\n+  ASSERT_EQ(buffer.size(), expected.size());\n+  const uint8_t* buffer_data = buffer.data();\n+  for (size_t i = 0; i < expected.size(); ++i) {\n+    ASSERT_EQ(buffer_data[i], expected[i]);\n+  }\n+}\n+\n void PrintColumn(const Column& col, std::stringstream* ss) {\n   const ChunkedArray& carr = *col.data();\n   for (int i = 0; i < carr.num_chunks(); ++i) {\ndiff --git a/cpp/src/arrow/util/macros.h b/cpp/src/arrow/util/macros.h\nindex 8b1125d02..d90025600 100644\n--- a/cpp/src/arrow/util/macros.h\n+++ b/cpp/src/arrow/util/macros.h\n@@ -94,4 +94,29 @@\n #endif\n #endif  // !defined(MANUALLY_ALIGNED_STRUCT)\n \n+// ----------------------------------------------------------------------\n+// From googletest\n+// (also in parquet-cpp)\n+\n+// When you need to test the private or protected members of a class,\n+// use the FRIEND_TEST macro to declare your tests as friends of the\n+// class.  For example:\n+//\n+// class MyClass {\n+//  private:\n+//   void MyMethod();\n+//   FRIEND_TEST(MyClassTest, MyMethod);\n+// };\n+//\n+// class MyClassTest : public testing::Test {\n+//   // ...\n+// };\n+//\n+// TEST_F(MyClassTest, MyMethod) {\n+//   // Can call MyClass::MyMethod() here.\n+// }\n+\n+#define FRIEND_TEST(test_case_name, test_name) \\\n+  friend class test_case_name##_##test_name##_Test\n+\n #endif  // ARROW_UTIL_MACROS_H\ndiff --git a/cpp/src/plasma/client.cc b/cpp/src/plasma/client.cc\nindex a9bbd8cc4..9635e70e4 100644\n--- a/cpp/src/plasma/client.cc\n+++ b/cpp/src/plasma/client.cc\n@@ -72,6 +72,27 @@ constexpr int64_t kThreadPoolSize = 8;\n constexpr int64_t kBytesInMB = 1 << 20;\n static std::vector<std::thread> threadpool_(kThreadPoolSize);\n \n+/// A Buffer class that automatically releases the backing plasma object\n+/// when it goes out of scope.\n+class PlasmaBuffer : public Buffer {\n+ public:\n+  ~PlasmaBuffer();\n+\n+  PlasmaBuffer(PlasmaClient* client, const ObjectID& object_id,\n+               const std::shared_ptr<Buffer>& buffer)\n+      : Buffer(buffer, 0, buffer->size()), client_(client), object_id_(object_id) {\n+    if (buffer->is_mutable()) {\n+      is_mutable_ = true;\n+    }\n+  }\n+\n+ private:\n+  PlasmaClient* client_;\n+  ObjectID object_id_;\n+};\n+\n+PlasmaBuffer::~PlasmaBuffer() { ARROW_UNUSED(client_->Release(object_id_)); }\n+\n struct ObjectInUseEntry {\n   /// A count of the number of times this client has called PlasmaClient::Create\n   /// or\n@@ -144,6 +165,11 @@ uint8_t* PlasmaClient::lookup_mmapped_file(int store_fd_val) {\n   return entry->second.pointer;\n }\n \n+bool PlasmaClient::IsInUse(const ObjectID& object_id) {\n+  const auto elem = objects_in_use_.find(object_id);\n+  return (elem != objects_in_use_.end());\n+}\n+\n void PlasmaClient::increment_object_count(const ObjectID& object_id, PlasmaObject* object,\n                                           bool is_sealed) {\n   // Increment the count of the object to track the fact that it is being used.\n@@ -182,7 +208,7 @@ void PlasmaClient::increment_object_count(const ObjectID& object_id, PlasmaObjec\n }\n \n Status PlasmaClient::Create(const ObjectID& object_id, int64_t data_size,\n-                            uint8_t* metadata, int64_t metadata_size,\n+                            const uint8_t* metadata, int64_t metadata_size,\n                             std::shared_ptr<Buffer>* data, int device_num) {\n   ARROW_LOG(DEBUG) << \"called plasma_create on conn \" << store_conn_ << \" with size \"\n                    << data_size << \" and metadata size \" << metadata_size;\n@@ -247,49 +273,45 @@ Status PlasmaClient::Create(const ObjectID& object_id, int64_t data_size,\n   return Status::OK();\n }\n \n-Status PlasmaClient::Get(const ObjectID* object_ids, int64_t num_objects,\n-                         int64_t timeout_ms, ObjectBuffer* object_buffers) {\n+Status PlasmaClient::GetBuffers(\n+    const ObjectID* object_ids, int64_t num_objects, int64_t timeout_ms,\n+    const std::function<std::shared_ptr<Buffer>(\n+        const ObjectID&, const std::shared_ptr<Buffer>&)>& wrap_buffer,\n+    ObjectBuffer* object_buffers) {\n   // Fill out the info for the objects that are already in use locally.\n   bool all_present = true;\n-  for (int i = 0; i < num_objects; ++i) {\n+  for (int64_t i = 0; i < num_objects; ++i) {\n     auto object_entry = objects_in_use_.find(object_ids[i]);\n     if (object_entry == objects_in_use_.end()) {\n       // This object is not currently in use by this client, so we need to send\n       // a request to the store.\n       all_present = false;\n-      // Make a note to ourselves that the object is not present.\n-      object_buffers[i].data_size = -1;\n     } else {\n       // NOTE: If the object is still unsealed, we will deadlock, since we must\n       // have been the one who created it.\n       ARROW_CHECK(object_entry->second->is_sealed)\n           << \"Plasma client called get on an unsealed object that it created\";\n       PlasmaObject* object = &object_entry->second->object;\n+      std::shared_ptr<Buffer> physical_buf;\n+\n       if (object->device_num == 0) {\n         uint8_t* data = lookup_mmapped_file(object->store_fd);\n-        object_buffers[i].data =\n-            std::make_shared<Buffer>(data + object->data_offset, object->data_size);\n-        object_buffers[i].metadata = std::make_shared<Buffer>(\n-            data + object->data_offset + object->data_size, object->metadata_size);\n+        physical_buf = std::make_shared<Buffer>(\n+            data + object->data_offset, object->data_size + object->metadata_size);\n       } else {\n #ifdef PLASMA_GPU\n-        std::shared_ptr<CudaBuffer> gpu_handle =\n-            gpu_object_map.find(object_ids[i])->second->ptr;\n-        object_buffers[i].data =\n-            std::make_shared<CudaBuffer>(gpu_handle, 0, object->data_size);\n-        object_buffers[i].metadata = std::make_shared<CudaBuffer>(\n-            gpu_handle, object->data_size, object->metadata_size);\n+        physical_buf = gpu_object_map.find(object_ids[i])->second->ptr;\n #else\n         ARROW_LOG(FATAL) << \"Arrow GPU library is not enabled.\";\n #endif\n       }\n-      object_buffers[i].data_size = object->data_size;\n-      object_buffers[i].metadata_size = object->metadata_size;\n+      physical_buf = wrap_buffer(object_ids[i], physical_buf);\n+      object_buffers[i].data = SliceBuffer(physical_buf, 0, object->data_size);\n+      object_buffers[i].metadata =\n+          SliceBuffer(physical_buf, object->data_size, object->metadata_size);\n       object_buffers[i].device_num = object->device_num;\n       // Increment the count of the number of instances of this object that this\n-      // client is using. A call to PlasmaClient::Release is required to\n-      // decrement this\n-      // count. Cache the reference to the object.\n+      // client is using. Cache the reference to the object.\n       increment_object_count(object_ids[i], object, true);\n     }\n   }\n@@ -300,7 +322,7 @@ Status PlasmaClient::Get(const ObjectID* object_ids, int64_t num_objects,\n \n   // If we get here, then the objects aren't all currently in use by this\n   // client, so we need to send a request to the plasma store.\n-  RETURN_NOT_OK(SendGetRequest(store_conn_, object_ids, num_objects, timeout_ms));\n+  RETURN_NOT_OK(SendGetRequest(store_conn_, &object_ids[0], num_objects, timeout_ms));\n   std::vector<uint8_t> buffer;\n   RETURN_NOT_OK(PlasmaReceive(store_conn_, MessageType_PlasmaGetReply, &buffer));\n   std::vector<ObjectID> received_object_ids(num_objects);\n@@ -320,10 +342,10 @@ Status PlasmaClient::Get(const ObjectID* object_ids, int64_t num_objects,\n     lookup_or_mmap(fd, store_fds[i], mmap_sizes[i]);\n   }\n \n-  for (int i = 0; i < num_objects; ++i) {\n+  for (int64_t i = 0; i < num_objects; ++i) {\n     DCHECK(received_object_ids[i] == object_ids[i]);\n     object = &object_data[i];\n-    if (object_buffers[i].data_size != -1) {\n+    if (object_buffers[i].data) {\n       // If the object was already in use by the client, then the store should\n       // have returned it.\n       DCHECK_NE(object->data_size, -1);\n@@ -334,56 +356,67 @@ Status PlasmaClient::Get(const ObjectID* object_ids, int64_t num_objects,\n     // If we are here, the object was not currently in use, so we need to\n     // process the reply from the object store.\n     if (object->data_size != -1) {\n+      std::shared_ptr<Buffer> physical_buf;\n       if (object->device_num == 0) {\n         uint8_t* data = lookup_mmapped_file(object->store_fd);\n-        // Finish filling out the return values.\n-        object_buffers[i].data =\n-            std::make_shared<Buffer>(data + object->data_offset, object->data_size);\n-        object_buffers[i].metadata = std::make_shared<Buffer>(\n-            data + object->data_offset + object->data_size, object->metadata_size);\n+        physical_buf = std::make_shared<Buffer>(\n+            data + object->data_offset, object->data_size + object->metadata_size);\n       } else {\n #ifdef PLASMA_GPU\n         std::lock_guard<std::mutex> lock(gpu_mutex);\n         auto handle = gpu_object_map.find(object_ids[i]);\n-        std::shared_ptr<CudaBuffer> gpu_handle;\n         if (handle == gpu_object_map.end()) {\n           std::shared_ptr<CudaContext> context;\n           RETURN_NOT_OK(manager_->GetContext(object->device_num - 1, &context));\n           GpuProcessHandle* obj_handle = new GpuProcessHandle();\n           RETURN_NOT_OK(context->OpenIpcBuffer(*object->ipc_handle, &obj_handle->ptr));\n           gpu_object_map[object_ids[i]] = obj_handle;\n-          gpu_handle = obj_handle->ptr;\n+          physical_buf = obj_handle->ptr;\n         } else {\n           handle->second->client_count += 1;\n-          gpu_handle = handle->second->ptr;\n+          physical_buf = handle->second->ptr;\n         }\n-        object_buffers[i].data =\n-            std::make_shared<CudaBuffer>(gpu_handle, 0, object->data_size);\n-        object_buffers[i].metadata = std::make_shared<CudaBuffer>(\n-            gpu_handle, object->data_size, object->metadata_size);\n #else\n         ARROW_LOG(FATAL) << \"Arrow GPU library is not enabled.\";\n #endif\n       }\n-      object_buffers[i].data_size = object->data_size;\n-      object_buffers[i].metadata_size = object->metadata_size;\n+      // Finish filling out the return values.\n+      physical_buf = wrap_buffer(object_ids[i], physical_buf);\n+      object_buffers[i].data = SliceBuffer(physical_buf, 0, object->data_size);\n+      object_buffers[i].metadata =\n+          SliceBuffer(physical_buf, object->data_size, object->metadata_size);\n       object_buffers[i].device_num = object->device_num;\n       // Increment the count of the number of instances of this object that this\n-      // client is using. A call to PlasmaClient::Release is required to\n-      // decrement this\n-      // count. Cache the reference to the object.\n+      // client is using. Cache the reference to the object.\n       increment_object_count(received_object_ids[i], object, true);\n     } else {\n-      // The object was not retrieved. Make sure we already put a -1 here to\n-      // indicate that the object was not retrieved. The caller is not\n-      // responsible for releasing this object.\n-      DCHECK_EQ(object_buffers[i].data_size, -1);\n-      object_buffers[i].data_size = -1;\n+      // The object was not retrieved.  The caller can detect this condition\n+      // by checking the boolean value of the metadata/data buffers.\n+      DCHECK(!object_buffers[i].metadata);\n+      DCHECK(!object_buffers[i].data);\n     }\n   }\n   return Status::OK();\n }\n \n+Status PlasmaClient::Get(const std::vector<ObjectID>& object_ids, int64_t timeout_ms,\n+                         std::vector<ObjectBuffer>* out) {\n+  const auto wrap_buffer = [=](const ObjectID& object_id,\n+                               const std::shared_ptr<Buffer>& buffer) {\n+    return std::make_shared<PlasmaBuffer>(this, object_id, buffer);\n+  };\n+  const size_t num_objects = object_ids.size();\n+  *out = std::vector<ObjectBuffer>(num_objects);\n+  return GetBuffers(&object_ids[0], num_objects, timeout_ms, wrap_buffer, &(*out)[0]);\n+}\n+\n+Status PlasmaClient::Get(const ObjectID* object_ids, int64_t num_objects,\n+                         int64_t timeout_ms, ObjectBuffer* out) {\n+  const auto wrap_buffer = [](const ObjectID& object_id,\n+                              const std::shared_ptr<Buffer>& buffer) { return buffer; };\n+  return GetBuffers(object_ids, num_objects, timeout_ms, wrap_buffer, out);\n+}\n+\n Status PlasmaClient::UnmapObject(const ObjectID& object_id) {\n   auto object_entry = objects_in_use_.find(object_id);\n   ARROW_CHECK(object_entry != objects_in_use_.end());\n@@ -546,24 +579,26 @@ static inline bool compute_object_hash_parallel(XXH64_state_t* hash_state,\n }\n \n static uint64_t compute_object_hash(const ObjectBuffer& obj_buffer) {\n+  DCHECK(obj_buffer.metadata);\n+  DCHECK(obj_buffer.data);\n   XXH64_state_t hash_state;\n   if (obj_buffer.device_num != 0) {\n     // TODO(wap): Create cuda program to hash data on gpu.\n     return 0;\n   }\n   XXH64_reset(&hash_state, XXH64_DEFAULT_SEED);\n-  if (obj_buffer.data_size >= kBytesInMB) {\n+  if (obj_buffer.data->size() >= kBytesInMB) {\n     compute_object_hash_parallel(\n         &hash_state, reinterpret_cast<const unsigned char*>(obj_buffer.data->data()),\n-        obj_buffer.data_size);\n+        obj_buffer.data->size());\n   } else {\n     XXH64_update(&hash_state,\n                  reinterpret_cast<const unsigned char*>(obj_buffer.data->data()),\n-                 obj_buffer.data_size);\n+                 obj_buffer.data->size());\n   }\n   XXH64_update(&hash_state,\n                reinterpret_cast<const unsigned char*>(obj_buffer.metadata->data()),\n-               obj_buffer.metadata_size);\n+               obj_buffer.metadata->size());\n   return XXH64_digest(&hash_state);\n }\n \n@@ -647,17 +682,16 @@ Status PlasmaClient::Evict(int64_t num_bytes, int64_t& num_bytes_evicted) {\n Status PlasmaClient::Hash(const ObjectID& object_id, uint8_t* digest) {\n   // Get the plasma object data. We pass in a timeout of 0 to indicate that\n   // the operation should timeout immediately.\n-  ObjectBuffer object_buffer;\n-  RETURN_NOT_OK(Get(&object_id, 1, 0, &object_buffer));\n+  std::vector<ObjectBuffer> object_buffers;\n+  RETURN_NOT_OK(Get({object_id}, 0, &object_buffers));\n   // If the object was not retrieved, return false.\n-  if (object_buffer.data_size == -1) {\n+  if (!object_buffers[0].data) {\n     return Status::PlasmaObjectNonexistent(\"Object not found\");\n   }\n   // Compute the hash.\n-  uint64_t hash = compute_object_hash(object_buffer);\n+  uint64_t hash = compute_object_hash(object_buffers[0]);\n   memcpy(digest, &hash, sizeof(hash));\n-  // Release the plasma object.\n-  return Release(object_id);\n+  return Status::OK();\n }\n \n Status PlasmaClient::Subscribe(int* fd) {\ndiff --git a/cpp/src/plasma/client.h b/cpp/src/plasma/client.h\nindex 7c27c474d..dd8175d48 100644\n--- a/cpp/src/plasma/client.h\n+++ b/cpp/src/plasma/client.h\n@@ -25,9 +25,11 @@\n #include <memory>\n #include <string>\n #include <unordered_map>\n+#include <vector>\n \n #include \"arrow/buffer.h\"\n #include \"arrow/status.h\"\n+#include \"arrow/util/macros.h\"\n #include \"arrow/util/visibility.h\"\n #include \"plasma/common.h\"\n #ifdef PLASMA_GPU\n@@ -48,12 +50,8 @@ constexpr int64_t kL3CacheSizeBytes = 100000000;\n struct ObjectBuffer {\n   /// The data buffer.\n   std::shared_ptr<Buffer> data;\n-  /// The size in bytes of the data object.\n-  int64_t data_size;\n   /// The metadata buffer.\n   std::shared_ptr<Buffer> metadata;\n-  /// The metadata size in bytes.\n-  int64_t metadata_size;\n   /// The device number.\n   int device_num;\n };\n@@ -121,31 +119,47 @@ class ARROW_EXPORT PlasmaClient {\n   ///        device_num = 1 corresponds to GPU0,\n   ///        device_num = 2 corresponds to GPU1, etc.\n   /// \\return The return status.\n-  Status Create(const ObjectID& object_id, int64_t data_size, uint8_t* metadata,\n+  ///\n+  /// The returned object must be released once it is done with.  It must also\n+  /// be either sealed or aborted.\n+  Status Create(const ObjectID& object_id, int64_t data_size, const uint8_t* metadata,\n                 int64_t metadata_size, std::shared_ptr<Buffer>* data, int device_num = 0);\n+\n   /// Get some objects from the Plasma Store. This function will block until the\n   /// objects have all been created and sealed in the Plasma Store or the\n-  /// timeout\n-  /// expires. The caller is responsible for releasing any retrieved objects,\n-  /// but\n-  /// the caller should not release objects that were not retrieved.\n+  /// timeout expires.\n+  ///\n+  /// \\param object_ids The IDs of the objects to get.\n+  /// \\param timeout_ms The amount of time in milliseconds to wait before this\n+  ///        request times out. If this value is -1, then no timeout is set.\n+  /// \\param[out] object_buffers The object results.\n+  /// \\return The return status.\n+  ///\n+  /// If an object was not retrieved, the corresponding metadata and data\n+  /// fields in the ObjectBuffer structure will evaluate to false.\n+  /// Objects are automatically released by the client when their buffers\n+  /// get out of scope.\n+  Status Get(const std::vector<ObjectID>& object_ids, int64_t timeout_ms,\n+             std::vector<ObjectBuffer>* object_buffers);\n+\n+  /// Deprecated variant of Get() that doesn't automatically release buffers\n+  /// when they get out of scope.\n   ///\n   /// \\param object_ids The IDs of the objects to get.\n   /// \\param num_objects The number of object IDs to get.\n   /// \\param timeout_ms The amount of time in milliseconds to wait before this\n   ///        request times out. If this value is -1, then no timeout is set.\n-  /// \\param object_buffers An array where the results will be stored. If the\n-  /// data\n-  ///        size field is -1, then the object was not retrieved.\n+  /// \\param object_buffers An array where the results will be stored.\n   /// \\return The return status.\n+  ///\n+  /// The caller is responsible for releasing any retrieved objects, but it\n+  /// should not release objects that were not retrieved.\n   Status Get(const ObjectID* object_ids, int64_t num_objects, int64_t timeout_ms,\n              ObjectBuffer* object_buffers);\n \n   /// Tell Plasma that the client no longer needs the object. This should be\n-  /// called\n-  /// after Get when the client is done with the object. After this call,\n-  /// the address returned by Get is no longer valid. This should be called\n-  /// once for each call to Get (with the same object ID).\n+  /// called after Get() or Create() when the client is done with the object.\n+  /// After this call, the buffer returned by Get() is no longer valid.\n   ///\n   /// \\param object_id The ID of the object that is no longer needed.\n   /// \\return The return status.\n@@ -328,6 +342,10 @@ class ARROW_EXPORT PlasmaClient {\n   int get_manager_fd() const;\n \n  private:\n+  FRIEND_TEST(TestPlasmaStore, GetTest);\n+  FRIEND_TEST(TestPlasmaStore, LegacyGetTest);\n+  FRIEND_TEST(TestPlasmaStore, AbortTest);\n+\n   /// This is a helper method for unmapping objects for which all references have\n   /// gone out of scope, either by calling Release or Abort.\n   ///\n@@ -340,6 +358,14 @@ class ARROW_EXPORT PlasmaClient {\n \n   Status PerformRelease(const ObjectID& object_id);\n \n+  /// Common helper for Get() variants\n+  Status GetBuffers(const ObjectID* object_ids, int64_t num_objects, int64_t timeout_ms,\n+                    const std::function<std::shared_ptr<Buffer>(\n+                        const ObjectID&, const std::shared_ptr<Buffer>&)>& wrap_buffer,\n+                    ObjectBuffer* object_buffers);\n+\n+  bool IsInUse(const ObjectID& object_id);\n+\n   uint8_t* lookup_or_mmap(int fd, int store_fd_val, int64_t map_size);\n \n   uint8_t* lookup_mmapped_file(int store_fd_val);\ndiff --git a/cpp/src/plasma/test/client_tests.cc b/cpp/src/plasma/test/client_tests.cc\nindex 07e0f9c6a..10e4e4f64 100644\n--- a/cpp/src/plasma/test/client_tests.cc\n+++ b/cpp/src/plasma/test/client_tests.cc\n@@ -24,6 +24,8 @@\n \n #include <random>\n \n+#include \"arrow/test-util.h\"\n+\n #include \"plasma/client.h\"\n #include \"plasma/common.h\"\n #include \"plasma/plasma.h\"\n@@ -35,6 +37,13 @@ namespace plasma {\n \n std::string test_executable;  // NOLINT\n \n+void AssertObjectBufferEqual(const ObjectBuffer& object_buffer,\n+                             const std::vector<uint8_t>& metadata,\n+                             const std::vector<uint8_t>& data) {\n+  arrow::test::AssertBufferEqual(*object_buffer.metadata, metadata);\n+  arrow::test::AssertBufferEqual(*object_buffer.data, data);\n+}\n+\n class TestPlasmaStore : public ::testing::Test {\n  public:\n   // TODO(pcm): At the moment, stdout of the test gets mixed up with\n@@ -55,10 +64,25 @@ class TestPlasmaStore : public ::testing::Test {\n     ARROW_CHECK_OK(\n         client2_.Connect(\"/tmp/store\" + store_index, \"\", PLASMA_DEFAULT_RELEASE_DELAY));\n   }\n-  virtual void Finish() {\n+  virtual void TearDown() {\n     ARROW_CHECK_OK(client_.Disconnect());\n     ARROW_CHECK_OK(client2_.Disconnect());\n-    system(\"killall plasma_store &\");\n+    // Kill all plasma_store processes\n+    // TODO should only kill the processes we launched\n+    system(\"killall -9 plasma_store\");\n+  }\n+\n+  void CreateObject(PlasmaClient& client, const ObjectID& object_id,\n+                    const std::vector<uint8_t>& metadata,\n+                    const std::vector<uint8_t>& data) {\n+    std::shared_ptr<Buffer> data_buffer;\n+    ARROW_CHECK_OK(client.Create(object_id, data.size(), &metadata[0], metadata.size(),\n+                                 &data_buffer));\n+    for (size_t i = 0; i < data.size(); i++) {\n+      data_buffer->mutable_data()[i] = data[i];\n+    }\n+    ARROW_CHECK_OK(client.Seal(object_id));\n+    ARROW_CHECK_OK(client.Release(object_id));\n   }\n \n  protected:\n@@ -101,54 +125,87 @@ TEST_F(TestPlasmaStore, ContainsTest) {\n \n   // Test for the object being in local Plasma store.\n   // First create object.\n-  int64_t data_size = 100;\n-  uint8_t metadata[] = {5};\n-  int64_t metadata_size = sizeof(metadata);\n-  std::shared_ptr<Buffer> data;\n-  ARROW_CHECK_OK(client_.Create(object_id, data_size, metadata, metadata_size, &data));\n-  ARROW_CHECK_OK(client_.Seal(object_id));\n+  std::vector<uint8_t> data(100, 0);\n+  CreateObject(client_, object_id, {42}, data);\n   // Avoid race condition of Plasma Manager waiting for notification.\n-  ObjectBuffer object_buffer;\n-  ARROW_CHECK_OK(client_.Get(&object_id, 1, -1, &object_buffer));\n+  std::vector<ObjectBuffer> object_buffers;\n+  ARROW_CHECK_OK(client_.Get({object_id}, -1, &object_buffers));\n   ARROW_CHECK_OK(client_.Contains(object_id, &has_object));\n   ASSERT_EQ(has_object, true);\n }\n \n TEST_F(TestPlasmaStore, GetTest) {\n+  std::vector<ObjectBuffer> object_buffers;\n+\n   ObjectID object_id = ObjectID::from_random();\n-  ObjectBuffer object_buffer;\n \n   // Test for object non-existence.\n-  ARROW_CHECK_OK(client_.Get(&object_id, 1, 0, &object_buffer));\n-  ASSERT_EQ(object_buffer.data_size, -1);\n+  ARROW_CHECK_OK(client_.Get({object_id}, 0, &object_buffers));\n+  ASSERT_EQ(object_buffers.size(), 1);\n+  ASSERT_FALSE(object_buffers[0].metadata);\n+  ASSERT_FALSE(object_buffers[0].data);\n+  EXPECT_FALSE(client_.IsInUse(object_id));\n \n   // Test for the object being in local Plasma store.\n   // First create object.\n-  int64_t data_size = 4;\n-  uint8_t metadata[] = {5};\n-  int64_t metadata_size = sizeof(metadata);\n-  std::shared_ptr<Buffer> data_buffer;\n-  uint8_t* data;\n-  ARROW_CHECK_OK(\n-      client_.Create(object_id, data_size, metadata, metadata_size, &data_buffer));\n-  data = data_buffer->mutable_data();\n-  for (int64_t i = 0; i < data_size; i++) {\n-    data[i] = static_cast<uint8_t>(i % 4);\n+  std::vector<uint8_t> data = {3, 5, 6, 7, 9};\n+  CreateObject(client_, object_id, {42}, data);\n+  ARROW_CHECK_OK(client_.FlushReleaseHistory());\n+  EXPECT_FALSE(client_.IsInUse(object_id));\n+\n+  object_buffers.clear();\n+  ARROW_CHECK_OK(client_.Get({object_id}, -1, &object_buffers));\n+  ASSERT_EQ(object_buffers.size(), 1);\n+  ASSERT_EQ(object_buffers[0].device_num, 0);\n+  AssertObjectBufferEqual(object_buffers[0], {42}, {3, 5, 6, 7, 9});\n+\n+  // Metadata keeps object in use\n+  {\n+    auto metadata = object_buffers[0].metadata;\n+    object_buffers.clear();\n+    ::arrow::test::AssertBufferEqual(*metadata, {42});\n+    ARROW_CHECK_OK(client_.FlushReleaseHistory());\n+    EXPECT_TRUE(client_.IsInUse(object_id));\n   }\n-  ARROW_CHECK_OK(client_.Seal(object_id));\n+  // Object is automatically released\n+  ARROW_CHECK_OK(client_.FlushReleaseHistory());\n+  EXPECT_FALSE(client_.IsInUse(object_id));\n+}\n \n-  ARROW_CHECK_OK(client_.Get(&object_id, 1, -1, &object_buffer));\n-  const uint8_t* object_data = object_buffer.data->data();\n-  for (int64_t i = 0; i < data_size; i++) {\n-    ASSERT_EQ(data[i], object_data[i]);\n+TEST_F(TestPlasmaStore, LegacyGetTest) {\n+  // Test for old non-releasing Get() variant\n+  ObjectID object_id = ObjectID::from_random();\n+  {\n+    ObjectBuffer object_buffer;\n+\n+    // Test for object non-existence.\n+    ARROW_CHECK_OK(client_.Get(&object_id, 1, 0, &object_buffer));\n+    ASSERT_FALSE(object_buffer.metadata);\n+    ASSERT_FALSE(object_buffer.data);\n+    EXPECT_FALSE(client_.IsInUse(object_id));\n+\n+    // First create object.\n+    std::vector<uint8_t> data = {3, 5, 6, 7, 9};\n+    CreateObject(client_, object_id, {42}, data);\n+    ARROW_CHECK_OK(client_.FlushReleaseHistory());\n+    EXPECT_FALSE(client_.IsInUse(object_id));\n+\n+    ARROW_CHECK_OK(client_.Get(&object_id, 1, -1, &object_buffer));\n+    AssertObjectBufferEqual(object_buffer, {42}, {3, 5, 6, 7, 9});\n   }\n+  // Object needs releasing manually\n+  ARROW_CHECK_OK(client_.FlushReleaseHistory());\n+  EXPECT_TRUE(client_.IsInUse(object_id));\n+  ARROW_CHECK_OK(client_.Release(object_id));\n+  ARROW_CHECK_OK(client_.FlushReleaseHistory());\n+  EXPECT_FALSE(client_.IsInUse(object_id));\n }\n \n TEST_F(TestPlasmaStore, MultipleGetTest) {\n   ObjectID object_id1 = ObjectID::from_random();\n   ObjectID object_id2 = ObjectID::from_random();\n-  ObjectID object_ids[2] = {object_id1, object_id2};\n-  ObjectBuffer object_buffer[2];\n+  std::vector<ObjectID> object_ids = {object_id1, object_id2};\n+  std::vector<ObjectBuffer> object_buffers;\n \n   int64_t data_size = 4;\n   uint8_t metadata[] = {5};\n@@ -162,18 +219,18 @@ TEST_F(TestPlasmaStore, MultipleGetTest) {\n   data->mutable_data()[0] = 2;\n   ARROW_CHECK_OK(client_.Seal(object_id2));\n \n-  ARROW_CHECK_OK(client_.Get(object_ids, 2, -1, object_buffer));\n-  ASSERT_EQ(object_buffer[0].data->data()[0], 1);\n-  ASSERT_EQ(object_buffer[1].data->data()[0], 2);\n+  ARROW_CHECK_OK(client_.Get(object_ids, -1, &object_buffers));\n+  ASSERT_EQ(object_buffers[0].data->data()[0], 1);\n+  ASSERT_EQ(object_buffers[1].data->data()[0], 2);\n }\n \n TEST_F(TestPlasmaStore, AbortTest) {\n   ObjectID object_id = ObjectID::from_random();\n-  ObjectBuffer object_buffer;\n+  std::vector<ObjectBuffer> object_buffers;\n \n   // Test for object non-existence.\n-  ARROW_CHECK_OK(client_.Get(&object_id, 1, 0, &object_buffer));\n-  ASSERT_EQ(object_buffer.data_size, -1);\n+  ARROW_CHECK_OK(client_.Get({object_id}, 0, &object_buffers));\n+  ASSERT_FALSE(object_buffers[0].data);\n \n   // Test object abort.\n   // First create object.\n@@ -193,30 +250,29 @@ TEST_F(TestPlasmaStore, AbortTest) {\n   ASSERT_TRUE(status.IsInvalid());\n   // Release, then abort.\n   ARROW_CHECK_OK(client_.Release(object_id));\n+  ARROW_CHECK_OK(client_.FlushReleaseHistory());\n+  EXPECT_TRUE(client_.IsInUse(object_id));\n+\n   ARROW_CHECK_OK(client_.Abort(object_id));\n+  ARROW_CHECK_OK(client_.FlushReleaseHistory());\n+  EXPECT_FALSE(client_.IsInUse(object_id));\n \n   // Test for object non-existence after the abort.\n-  ARROW_CHECK_OK(client_.Get(&object_id, 1, 0, &object_buffer));\n-  ASSERT_EQ(object_buffer.data_size, -1);\n+  ARROW_CHECK_OK(client_.Get({object_id}, 0, &object_buffers));\n+  ASSERT_FALSE(object_buffers[0].data);\n \n   // Create the object successfully this time.\n-  ARROW_CHECK_OK(client_.Create(object_id, data_size, metadata, metadata_size, &data));\n-  data_ptr = data->mutable_data();\n-  for (int64_t i = 0; i < data_size; i++) {\n-    data_ptr[i] = static_cast<uint8_t>(i % 4);\n-  }\n-  ARROW_CHECK_OK(client_.Seal(object_id));\n+  CreateObject(client_, object_id, {42, 43}, {1, 2, 3, 4, 5});\n \n   // Test that we can get the object.\n-  ARROW_CHECK_OK(client_.Get(&object_id, 1, -1, &object_buffer));\n-  const uint8_t* buffer_ptr = object_buffer.data->data();\n-  for (int64_t i = 0; i < data_size; i++) {\n-    ASSERT_EQ(data_ptr[i], buffer_ptr[i]);\n-  }\n+  ARROW_CHECK_OK(client_.Get({object_id}, -1, &object_buffers));\n+  AssertObjectBufferEqual(object_buffers[0], {42, 43}, {1, 2, 3, 4, 5});\n+  ARROW_CHECK_OK(client_.Release(object_id));\n }\n \n TEST_F(TestPlasmaStore, MultipleClientTest) {\n   ObjectID object_id = ObjectID::from_random();\n+  std::vector<ObjectBuffer> object_buffers;\n \n   // Test for object non-existence on the first client.\n   bool has_object;\n@@ -232,8 +288,8 @@ TEST_F(TestPlasmaStore, MultipleClientTest) {\n   ARROW_CHECK_OK(client2_.Create(object_id, data_size, metadata, metadata_size, &data));\n   ARROW_CHECK_OK(client2_.Seal(object_id));\n   // Test that the first client can get the object.\n-  ObjectBuffer object_buffer;\n-  ARROW_CHECK_OK(client_.Get(&object_id, 1, -1, &object_buffer));\n+  ARROW_CHECK_OK(client_.Get({object_id}, -1, &object_buffers));\n+  ASSERT_TRUE(object_buffers[0].data);\n   ARROW_CHECK_OK(client_.Contains(object_id, &has_object));\n   ASSERT_EQ(has_object, true);\n \n@@ -245,7 +301,8 @@ TEST_F(TestPlasmaStore, MultipleClientTest) {\n   ARROW_CHECK_OK(client_.Disconnect());\n   // Test that the second client can seal and get the created object.\n   ARROW_CHECK_OK(client2_.Seal(object_id));\n-  ARROW_CHECK_OK(client2_.Get(&object_id, 1, -1, &object_buffer));\n+  ARROW_CHECK_OK(client2_.Get({object_id}, -1, &object_buffers));\n+  ASSERT_TRUE(object_buffers[0].data);\n   ARROW_CHECK_OK(client2_.Contains(object_id, &has_object));\n   ASSERT_EQ(has_object, true);\n }\n@@ -308,42 +365,66 @@ using arrow::gpu::CudaBuffer;\n using arrow::gpu::CudaBufferReader;\n using arrow::gpu::CudaBufferWriter;\n \n+namespace {\n+\n+void AssertCudaRead(const std::shared_ptr<Buffer>& buffer,\n+                    const std::vector<uint8_t>& expected_data) {\n+  std::shared_ptr<CudaBuffer> gpu_buffer;\n+  const size_t data_size = expected_data.size();\n+\n+  ARROW_CHECK_OK(CudaBuffer::FromBuffer(buffer, &gpu_buffer));\n+  ASSERT_EQ(gpu_buffer->size(), data_size);\n+\n+  CudaBufferReader reader(gpu_buffer);\n+  uint8_t read_data[data_size];\n+  int64_t read_data_size;\n+  ARROW_CHECK_OK(reader.Read(data_size, &read_data_size, read_data));\n+  ASSERT_EQ(read_data_size, data_size);\n+\n+  for (size_t i = 0; i < data_size; i++) {\n+    ASSERT_EQ(read_data[i], expected_data[i]);\n+  }\n+}\n+\n+}  // namespace\n+\n TEST_F(TestPlasmaStore, GetGPUTest) {\n   ObjectID object_id = ObjectID::from_random();\n-  ObjectBuffer object_buffer;\n+  std::vector<ObjectBuffer> object_buffers;\n \n   // Test for object non-existence.\n-  ARROW_CHECK_OK(client_.Get(&object_id, 1, 0, &object_buffer));\n-  ASSERT_EQ(object_buffer.data_size, -1);\n+  ARROW_CHECK_OK(client_.Get({object_id}, 0, &object_buffers));\n+  ASSERT_EQ(object_buffers.size(), 1);\n+  ASSERT_FALSE(object_buffers[0].data);\n \n   // Test for the object being in local Plasma store.\n   // First create object.\n   uint8_t data[] = {4, 5, 3, 1};\n   int64_t data_size = sizeof(data);\n-  uint8_t metadata[] = {5};\n+  uint8_t metadata[] = {42};\n   int64_t metadata_size = sizeof(metadata);\n   std::shared_ptr<Buffer> data_buffer;\n   std::shared_ptr<CudaBuffer> gpu_buffer;\n   ARROW_CHECK_OK(\n       client_.Create(object_id, data_size, metadata, metadata_size, &data_buffer, 1));\n-  gpu_buffer = std::dynamic_pointer_cast<CudaBuffer>(data_buffer);\n+  ARROW_CHECK_OK(CudaBuffer::FromBuffer(data_buffer, &gpu_buffer));\n   CudaBufferWriter writer(gpu_buffer);\n-  writer.Write(data, data_size);\n+  ARROW_CHECK_OK(writer.Write(data, data_size));\n   ARROW_CHECK_OK(client_.Seal(object_id));\n \n-  ARROW_CHECK_OK(client_.Get(&object_id, 1, -1, &object_buffer));\n-  gpu_buffer = std::dynamic_pointer_cast<CudaBuffer>(object_buffer.data);\n-  CudaBufferReader reader(gpu_buffer);\n-  uint8_t read_data[data_size];\n-  int64_t read_data_size;\n-  reader.Read(data_size, &read_data_size, read_data);\n-  for (int64_t i = 0; i < data_size; i++) {\n-    ASSERT_EQ(data[i], read_data[i]);\n-  }\n+  object_buffers.clear();\n+  ARROW_CHECK_OK(client_.Get({object_id}, -1, &object_buffers));\n+  ASSERT_EQ(object_buffers.size(), 1);\n+  ASSERT_EQ(object_buffers[0].device_num, 1);\n+  // Check data\n+  AssertCudaRead(object_buffers[0].data, {4, 5, 3, 1});\n+  // Check metadata\n+  AssertCudaRead(object_buffers[0].metadata, {42});\n }\n \n TEST_F(TestPlasmaStore, MultipleClientGPUTest) {\n   ObjectID object_id = ObjectID::from_random();\n+  std::vector<ObjectBuffer> object_buffers;\n \n   // Test for object non-existence on the first client.\n   bool has_object;\n@@ -360,8 +441,7 @@ TEST_F(TestPlasmaStore, MultipleClientGPUTest) {\n       client2_.Create(object_id, data_size, metadata, metadata_size, &data, 1));\n   ARROW_CHECK_OK(client2_.Seal(object_id));\n   // Test that the first client can get the object.\n-  ObjectBuffer object_buffer;\n-  ARROW_CHECK_OK(client_.Get(&object_id, 1, -1, &object_buffer));\n+  ARROW_CHECK_OK(client_.Get({object_id}, -1, &object_buffers));\n   ARROW_CHECK_OK(client_.Contains(object_id, &has_object));\n   ASSERT_EQ(has_object, true);\n \n@@ -374,12 +454,16 @@ TEST_F(TestPlasmaStore, MultipleClientGPUTest) {\n   ARROW_CHECK_OK(client_.Disconnect());\n   // Test that the second client can seal and get the created object.\n   ARROW_CHECK_OK(client2_.Seal(object_id));\n-  ARROW_CHECK_OK(client2_.Get(&object_id, 1, -1, &object_buffer));\n+  object_buffers.clear();\n   ARROW_CHECK_OK(client2_.Contains(object_id, &has_object));\n   ASSERT_EQ(has_object, true);\n+  ARROW_CHECK_OK(client2_.Get({object_id}, -1, &object_buffers));\n+  ASSERT_EQ(object_buffers.size(), 1);\n+  ASSERT_EQ(object_buffers[0].device_num, 1);\n+  AssertCudaRead(object_buffers[0].metadata, {5});\n }\n \n-#endif\n+#endif  // PLASMA_GPU\n \n }  // namespace plasma\n \ndiff --git a/python/pyarrow/plasma.pyx b/python/pyarrow/plasma.pyx\nindex 32f6d189d..b99e2b0ef 100644\n--- a/python/pyarrow/plasma.pyx\n+++ b/python/pyarrow/plasma.pyx\n@@ -29,7 +29,7 @@ from cpython.pycapsule cimport *\n import collections\n import pyarrow\n \n-from pyarrow.lib cimport Buffer, NativeFile, check_status\n+from pyarrow.lib cimport Buffer, NativeFile, check_status, pyarrow_wrap_buffer\n from pyarrow.includes.libarrow cimport (CBuffer, CMutableBuffer,\n                                         CFixedSizeBufferWriter, CStatus)\n \n@@ -83,8 +83,8 @@ cdef extern from \"plasma/client.h\" nogil:\n                        const uint8_t* metadata, int64_t metadata_size,\n                        const shared_ptr[CBuffer]* data)\n \n-        CStatus Get(const CUniqueID* object_ids, int64_t num_objects,\n-                    int64_t timeout_ms, CObjectBuffer* object_buffers)\n+        CStatus Get(const c_vector[CUniqueID] object_ids, int64_t timeout_ms,\n+                    c_vector[CObjectBuffer]* object_buffers)\n \n         CStatus Seal(const CUniqueID& object_id)\n \n@@ -117,9 +117,7 @@ cdef extern from \"plasma/client.h\" nogil:\n cdef extern from \"plasma/client.h\" nogil:\n \n     cdef struct CObjectBuffer\" plasma::ObjectBuffer\":\n-        int64_t data_size\n         shared_ptr[CBuffer] data\n-        int64_t metadata_size\n         shared_ptr[CBuffer] metadata\n \n \n@@ -239,21 +237,16 @@ cdef class PlasmaClient:\n \n     cdef _get_object_buffers(self, object_ids, int64_t timeout_ms,\n                              c_vector[CObjectBuffer]* result):\n-        cdef c_vector[CUniqueID] ids\n-        cdef ObjectID object_id\n+        cdef:\n+            c_vector[CUniqueID] ids\n+            ObjectID object_id\n+\n         for object_id in object_ids:\n             ids.push_back(object_id.data)\n-        result[0].resize(ids.size())\n         with nogil:\n-            check_status(self.client.get().Get(ids.data(), ids.size(),\n-                         timeout_ms, result[0].data()))\n-\n-    cdef _make_plasma_buffer(self, ObjectID object_id,\n-                             shared_ptr[CBuffer] buffer, int64_t size):\n-        result = PlasmaBuffer(object_id, self)\n-        result.init(buffer)\n-        return result\n+            check_status(self.client.get().Get(ids, timeout_ms, result))\n \n+    # XXX C++ API should instead expose some kind of CreateAuto()\n     cdef _make_mutable_plasma_buffer(self, ObjectID object_id, uint8_t* data,\n                                      int64_t size):\n         cdef shared_ptr[CBuffer] buffer\n@@ -332,11 +325,8 @@ cdef class PlasmaClient:\n         self._get_object_buffers(object_ids, timeout_ms, &object_buffers)\n         result = []\n         for i in range(object_buffers.size()):\n-            if object_buffers[i].data_size != -1:\n-                result.append(\n-                    self._make_plasma_buffer(object_ids[i],\n-                                             object_buffers[i].data,\n-                                             object_buffers[i].data_size))\n+            if object_buffers[i].data.get() != nullptr:\n+                result.append(pyarrow_wrap_buffer(object_buffers[i].data))\n             else:\n                 result.append(None)\n         return result\n@@ -367,10 +357,10 @@ cdef class PlasmaClient:\n         self._get_object_buffers(object_ids, timeout_ms, &object_buffers)\n         result = []\n         for i in range(object_buffers.size()):\n-            result.append(\n-                self._make_plasma_buffer(object_ids[i],\n-                                         object_buffers[i].metadata,\n-                                         object_buffers[i].metadata_size))\n+            if object_buffers[i].metadata.get() != nullptr:\n+                result.append(pyarrow_wrap_buffer(object_buffers[i].metadata))\n+            else:\n+                result.append(None)\n         return result\n \n     def put(self, object value, ObjectID object_id=None, int memcopy_threads=6,\ndiff --git a/python/pyarrow/tests/test_plasma.py b/python/pyarrow/tests/test_plasma.py\nindex 1df213dec..435884199 100644\n--- a/python/pyarrow/tests/test_plasma.py\n+++ b/python/pyarrow/tests/test_plasma.py\n@@ -190,7 +190,6 @@ def setup_method(self, test_method):\n         plasma_store_name, self.p = self.plasma_store_ctx.__enter__()\n         # Connect to Plasma.\n         self.plasma_client = plasma.connect(plasma_store_name, \"\", 64)\n-        # For the eviction test\n         self.plasma_client2 = plasma.connect(plasma_store_name, \"\", 0)\n \n     def teardown_method(self, test_method):\n@@ -311,6 +310,36 @@ def test_get(self):\n                 else:\n                     assert results[i] is None\n \n+    def test_buffer_lifetime(self):\n+        # ARROW-2195\n+        arr = pa.array([1, 12, 23, 3, 34], pa.int32())\n+        batch = pa.RecordBatch.from_arrays([arr], ['field1'])\n+\n+        # Serialize RecordBatch into Plasma store\n+        sink = pa.MockOutputStream()\n+        writer = pa.RecordBatchStreamWriter(sink, batch.schema)\n+        writer.write_batch(batch)\n+        writer.close()\n+\n+        object_id = random_object_id()\n+        data_buffer = self.plasma_client.create(object_id, sink.size())\n+        stream = pa.FixedSizeBufferWriter(data_buffer)\n+        writer = pa.RecordBatchStreamWriter(stream, batch.schema)\n+        writer.write_batch(batch)\n+        writer.close()\n+        self.plasma_client.seal(object_id)\n+        del data_buffer\n+\n+        # Unserialize RecordBatch from Plasma store\n+        [data_buffer] = self.plasma_client2.get_buffers([object_id])\n+        reader = pa.RecordBatchStreamReader(data_buffer)\n+        read_batch = reader.read_next_batch()\n+        # Lose reference to returned buffer.  The RecordBatch must still\n+        # be backed by valid memory.\n+        del data_buffer, reader\n+\n+        assert read_batch.equals(batch)\n+\n     def test_put_and_get(self):\n         for value in [[\"hello\", \"world\", 3, 1.0], None, \"hello\"]:\n             object_id = self.plasma_client.put(value)\n@@ -770,15 +799,15 @@ def test_use_one_memory_mapped_file(self):\n         # them go out of scope.\n         for _ in range(100):\n             create_object(\n-                self.plasma_client,\n+                self.plasma_client2,\n                 np.random.randint(1, DEFAULT_PLASMA_STORE_MEMORY // 20), 0)\n         # Create large objects that require the full object store size, and\n         # verify that they fit.\n         for _ in range(2):\n-            create_object(self.plasma_client, DEFAULT_PLASMA_STORE_MEMORY, 0)\n+            create_object(self.plasma_client2, DEFAULT_PLASMA_STORE_MEMORY, 0)\n         # Verify that an object that is too large does not fit.\n         with pytest.raises(pa.lib.PlasmaStoreFull):\n-            create_object(self.plasma_client, DEFAULT_PLASMA_STORE_MEMORY + 1,\n+            create_object(self.plasma_client2, DEFAULT_PLASMA_STORE_MEMORY + 1,\n                           0)\n \n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-04T17:52:26.232+0000",
                    "updated": "2018-04-04T17:52:26.232+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16425927",
                    "id": "16425927",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
                        "name": "pcmoritz",
                        "key": "pcmoritz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Philipp Moritz",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Issue resolved by pull request 1807\n[https://github.com/apache/arrow/pull/1807]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=pcmoritz",
                        "name": "pcmoritz",
                        "key": "pcmoritz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Philipp Moritz",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-04T17:54:23.654+0000",
                    "updated": "2018-04-04T17:54:23.654+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13139982/comment/16434571",
                    "id": "16434571",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "robertnishihara commented on issue #1807: ARROW-2195: [Plasma] Return auto-releasing buffers\nURL: https://github.com/apache/arrow/pull/1807#issuecomment-380595114\n \n \n   @pitrou I'm seeing https://issues.apache.org/jira/browse/ARROW-2448 when using this PR.\r\n   \r\n   It seems like we need each client to keep track of the buffers that it produces and to invalidate them when the client disconnects (or something like that). cc @pcmoritz \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-04-11T21:04:19.868+0000",
                    "updated": "2018-04-11T21:04:19.868+0000"
                }
            ],
            "maxResults": 45,
            "total": 45,
            "startAt": 0
        },
        "customfield_12311820": "0|i3qfnb:",
        "customfield_12314139": null
    }
}