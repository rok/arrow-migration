{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13315578",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315578",
    "key": "ARROW-9369",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345977",
                "id": "12345977",
                "description": "",
                "name": "2.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-10-19"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348202",
                "id": "12348202",
                "name": "0.17.1",
                "archived": false,
                "released": true,
                "releaseDate": "2020-05-18"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=kszucs",
            "name": "kszucs",
            "key": "kszucs",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Krisztian Szucs",
            "active": true,
            "timeZone": "Europe/Budapest"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=tremes",
            "name": "tremes",
            "key": "tremes",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Tomas Remes",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=tremes",
            "name": "tremes",
            "key": "tremes",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Tomas Remes",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9369/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 9,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315578/worklog/472467",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs opened a new pull request #8008:\nURL: https://github.com/apache/arrow/pull/8008\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-19T14:45:14.873+0000",
                    "updated": "2020-08-19T14:45:14.873+0000",
                    "started": "2020-08-19T14:45:14.872+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "472467",
                    "issueId": "13315578"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315578/worklog/472470",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8008:\nURL: https://github.com/apache/arrow/pull/8008#issuecomment-676477885\n\n\n   https://issues.apache.org/jira/browse/ARROW-9369\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-19T14:57:01.756+0000",
                    "updated": "2020-08-19T14:57:01.756+0000",
                    "started": "2020-08-19T14:57:01.755+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "472470",
                    "issueId": "13315578"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315578/worklog/472859",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8008:\nURL: https://github.com/apache/arrow/pull/8008#discussion_r473908069\n\n\n\n##########\nFile path: cpp/src/arrow/python/python_to_arrow.cc\n##########\n@@ -1123,6 +1168,50 @@ class DecimalConverter : public TypedConverter<arrow::Decimal128Type, null_codin\n   std::shared_ptr<DecimalType> decimal_type_;\n };\n \n+#define DICTIONARY_PRIMITIVE(TYPE_ENUM, TYPE_CLASS)                 \\\n+  case Type::TYPE_ENUM:                                             \\\n+    *out = std::unique_ptr<SeqConverter>(                           \\\n+        new PrimitiveDictionaryConverter<TYPE_CLASS, null_coding>); \\\n+    break;\n+\n+#define DICTIONARY_BINARY_LIKE(TYPE_ENUM, TYPE_CLASS)                \\\n+  case Type::TYPE_ENUM:                                              \\\n+    *out = std::unique_ptr<SeqConverter>(                            \\\n+        new BinaryLikeDictionaryConverter<TYPE_CLASS, null_coding>); \\\n+    break;\n+\n+template <NullCoding null_coding>\n+Status GetDictionaryConverter(const std::shared_ptr<DataType>& type,\n+                              std::unique_ptr<SeqConverter>* out) {\n+  const auto& dict_type = checked_cast<const DictionaryType&>(*type);\n+  const auto& value_type = dict_type.value_type();\n+\n+  switch (value_type->id()) {\n+    DICTIONARY_PRIMITIVE(BOOL, BooleanType);\n+    DICTIONARY_PRIMITIVE(INT8, Int8Type);\n+    DICTIONARY_PRIMITIVE(INT16, Int16Type);\n+    DICTIONARY_PRIMITIVE(INT32, Int32Type);\n+    DICTIONARY_PRIMITIVE(INT64, Int64Type);\n+    DICTIONARY_PRIMITIVE(UINT8, UInt8Type);\n+    DICTIONARY_PRIMITIVE(UINT16, UInt16Type);\n+    DICTIONARY_PRIMITIVE(UINT32, UInt32Type);\n+    DICTIONARY_PRIMITIVE(UINT64, UInt64Type);\n+    DICTIONARY_PRIMITIVE(HALF_FLOAT, HalfFloatType);\n+    DICTIONARY_PRIMITIVE(FLOAT, FloatType);\n+    DICTIONARY_PRIMITIVE(DOUBLE, DoubleType);\n+    DICTIONARY_PRIMITIVE(DATE32, Date32Type);\n+    DICTIONARY_PRIMITIVE(DATE64, Date64Type);\n+    DICTIONARY_BINARY_LIKE(BINARY, BinaryType);\n+    DICTIONARY_BINARY_LIKE(STRING, StringType);\n+    // DICTIONARY_BINARY_LIKE(LARGE_BINARY, LargeBinaryType);\n+    // DICTIONARY_BINARY_LIKE(LARGE_STRING, LargeStringType);\n\nReview comment:\n       Is there a reason this isn't enabled? Is the PR unfinished?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-20T11:44:41.323+0000",
                    "updated": "2020-08-20T11:44:41.323+0000",
                    "started": "2020-08-20T11:44:41.322+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "472859",
                    "issueId": "13315578"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315578/worklog/473549",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on a change in pull request #8008:\nURL: https://github.com/apache/arrow/pull/8008#discussion_r475098380\n\n\n\n##########\nFile path: cpp/src/arrow/python/python_to_arrow.cc\n##########\n@@ -1123,6 +1168,50 @@ class DecimalConverter : public TypedConverter<arrow::Decimal128Type, null_codin\n   std::shared_ptr<DecimalType> decimal_type_;\n };\n \n+#define DICTIONARY_PRIMITIVE(TYPE_ENUM, TYPE_CLASS)                 \\\n+  case Type::TYPE_ENUM:                                             \\\n+    *out = std::unique_ptr<SeqConverter>(                           \\\n+        new PrimitiveDictionaryConverter<TYPE_CLASS, null_coding>); \\\n+    break;\n+\n+#define DICTIONARY_BINARY_LIKE(TYPE_ENUM, TYPE_CLASS)                \\\n+  case Type::TYPE_ENUM:                                              \\\n+    *out = std::unique_ptr<SeqConverter>(                            \\\n+        new BinaryLikeDictionaryConverter<TYPE_CLASS, null_coding>); \\\n+    break;\n+\n+template <NullCoding null_coding>\n+Status GetDictionaryConverter(const std::shared_ptr<DataType>& type,\n+                              std::unique_ptr<SeqConverter>* out) {\n+  const auto& dict_type = checked_cast<const DictionaryType&>(*type);\n+  const auto& value_type = dict_type.value_type();\n+\n+  switch (value_type->id()) {\n+    DICTIONARY_PRIMITIVE(BOOL, BooleanType);\n+    DICTIONARY_PRIMITIVE(INT8, Int8Type);\n+    DICTIONARY_PRIMITIVE(INT16, Int16Type);\n+    DICTIONARY_PRIMITIVE(INT32, Int32Type);\n+    DICTIONARY_PRIMITIVE(INT64, Int64Type);\n+    DICTIONARY_PRIMITIVE(UINT8, UInt8Type);\n+    DICTIONARY_PRIMITIVE(UINT16, UInt16Type);\n+    DICTIONARY_PRIMITIVE(UINT32, UInt32Type);\n+    DICTIONARY_PRIMITIVE(UINT64, UInt64Type);\n+    DICTIONARY_PRIMITIVE(HALF_FLOAT, HalfFloatType);\n+    DICTIONARY_PRIMITIVE(FLOAT, FloatType);\n+    DICTIONARY_PRIMITIVE(DOUBLE, DoubleType);\n+    DICTIONARY_PRIMITIVE(DATE32, Date32Type);\n+    DICTIONARY_PRIMITIVE(DATE64, Date64Type);\n+    DICTIONARY_BINARY_LIKE(BINARY, BinaryType);\n+    DICTIONARY_BINARY_LIKE(STRING, StringType);\n+    // DICTIONARY_BINARY_LIKE(LARGE_BINARY, LargeBinaryType);\n+    // DICTIONARY_BINARY_LIKE(LARGE_STRING, LargeStringType);\n\nReview comment:\n       Yes, there are a couple of design decisions we need to make because of the following problems:\r\n   - the index key type is ignored since adaptive builder is used\r\n   - large binary/string types are not supported by the builder which I'm not sure whether is intentional or not\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-22T14:52:05.580+0000",
                    "updated": "2020-08-22T14:52:05.580+0000",
                    "started": "2020-08-22T14:52:05.580+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "473549",
                    "issueId": "13315578"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315578/worklog/473860",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #8008:\nURL: https://github.com/apache/arrow/pull/8008#discussion_r475540932\n\n\n\n##########\nFile path: python/pyarrow/scalar.pxi\n##########\n@@ -687,6 +687,44 @@ cdef class DictionaryScalar(Scalar):\n     Concrete class for dictionary-encoded scalars.\n     \"\"\"\n \n+    def __init__(self, index, dictionary, type):\n\nReview comment:\n       Maybe we can put this in some `from_..` class method? (to keep it consistent with the other scalars that `__init__` raises)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-24T11:44:14.132+0000",
                    "updated": "2020-08-24T11:44:14.132+0000",
                    "started": "2020-08-24T11:44:14.132+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "473860",
                    "issueId": "13315578"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315578/worklog/473861",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on a change in pull request #8008:\nURL: https://github.com/apache/arrow/pull/8008#discussion_r475541170\n\n\n\n##########\nFile path: python/pyarrow/scalar.pxi\n##########\n@@ -687,6 +687,44 @@ cdef class DictionaryScalar(Scalar):\n     Concrete class for dictionary-encoded scalars.\n     \"\"\"\n \n+    def __init__(self, index, dictionary, type):\n\nReview comment:\n       (and can you also add some tests for this construction method?)\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-24T11:44:37.410+0000",
                    "updated": "2020-08-24T11:44:37.410+0000",
                    "started": "2020-08-24T11:44:37.410+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "473861",
                    "issueId": "13315578"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315578/worklog/474251",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8008:\nURL: https://github.com/apache/arrow/pull/8008#discussion_r476391155\n\n\n\n##########\nFile path: cpp/src/arrow/python/python_to_arrow.cc\n##########\n@@ -903,6 +897,75 @@ class FixedSizeListConverter : public BaseListConverter<FixedSizeListType, null_\n   int64_t list_size_;\n };\n \n+// ----------------------------------------------------------------------\n+// Convert dictionary\n+\n+template <typename ValueType, NullCoding null_coding>\n+class DictionaryConverter : public SeqConverter {\n+ public:\n+  using BuilderType = DictionaryBuilder<ValueType>;\n+\n+  Status Init(ArrayBuilder* builder) override {\n+    RETURN_NOT_OK(SeqConverter::Init(builder));\n+    typed_builder_ = checked_cast<BuilderType*>(builder);\n+    return Status::OK();\n+  }\n+\n+  Status Append(PyObject* obj) override {\n+    // Append null if the obj is None or pandas null otherwise the valid value\n+    return NullChecker<null_coding>::Check(obj) ? AppendNull() : AppendValue(obj);\n+  }\n+\n+ protected:\n+  BuilderType* typed_builder_;\n+};\n+\n+template <typename ValueType, NullCoding null_coding>\n+class PrimitiveDictionaryConverter : public DictionaryConverter<ValueType, null_coding> {\n+ public:\n+  Status AppendValue(PyObject* obj) override {\n+    ARROW_ASSIGN_OR_RAISE(auto value, ValueConverter<ValueType>::FromPython(obj));\n+    return this->typed_builder_->Append(value);\n+  }\n+};\n+\n+template <typename ValueType, NullCoding null_coding>\n+class BinaryLikeDictionaryConverter : public DictionaryConverter<ValueType, null_coding> {\n+ public:\n+  Status AppendValue(PyObject* obj) override {\n+    ARROW_ASSIGN_OR_RAISE(string_view_, ValueConverter<ValueType>::FromPython(obj));\n+    // DCHECK_GE(string_view_.size, 0);\n+    RETURN_NOT_OK(this->typed_builder_->Append(string_view_.bytes,\n\nReview comment:\n       Isn't there a `TypedBuilder::Append(string_view)`? If not, can you please add it?\n\n##########\nFile path: cpp/src/arrow/python/python_to_arrow.cc\n##########\n@@ -903,6 +897,75 @@ class FixedSizeListConverter : public BaseListConverter<FixedSizeListType, null_\n   int64_t list_size_;\n };\n \n+// ----------------------------------------------------------------------\n+// Convert dictionary\n+\n+template <typename ValueType, NullCoding null_coding>\n+class DictionaryConverter : public SeqConverter {\n+ public:\n+  using BuilderType = DictionaryBuilder<ValueType>;\n+\n+  Status Init(ArrayBuilder* builder) override {\n+    RETURN_NOT_OK(SeqConverter::Init(builder));\n+    typed_builder_ = checked_cast<BuilderType*>(builder);\n+    return Status::OK();\n+  }\n+\n+  Status Append(PyObject* obj) override {\n+    // Append null if the obj is None or pandas null otherwise the valid value\n+    return NullChecker<null_coding>::Check(obj) ? AppendNull() : AppendValue(obj);\n+  }\n+\n+ protected:\n+  BuilderType* typed_builder_;\n+};\n+\n+template <typename ValueType, NullCoding null_coding>\n+class PrimitiveDictionaryConverter : public DictionaryConverter<ValueType, null_coding> {\n+ public:\n+  Status AppendValue(PyObject* obj) override {\n+    ARROW_ASSIGN_OR_RAISE(auto value, ValueConverter<ValueType>::FromPython(obj));\n+    return this->typed_builder_->Append(value);\n+  }\n+};\n+\n+template <typename ValueType, NullCoding null_coding>\n+class BinaryLikeDictionaryConverter : public DictionaryConverter<ValueType, null_coding> {\n+ public:\n+  Status AppendValue(PyObject* obj) override {\n+    ARROW_ASSIGN_OR_RAISE(string_view_, ValueConverter<ValueType>::FromPython(obj));\n+    // DCHECK_GE(string_view_.size, 0);\n\nReview comment:\n       Why?\n\n##########\nFile path: cpp/src/arrow/python/python_to_arrow.cc\n##########\n@@ -1123,6 +1186,53 @@ class DecimalConverter : public TypedConverter<arrow::Decimal128Type, null_codin\n   std::shared_ptr<DecimalType> decimal_type_;\n };\n \n+#define DICTIONARY_PRIMITIVE(TYPE_ENUM, TYPE_CLASS)                 \\\n\nReview comment:\n       Please `#undef` at the end.\n\n##########\nFile path: python/pyarrow/tests/test_scalars.py\n##########\n@@ -550,8 +550,8 @@ def test_dictionary():\n         with pytest.warns(FutureWarning):\n             assert s.dictionary_value.as_py() == v\n \n-    with pytest.raises(pa.ArrowNotImplementedError):\n-        pickle.loads(pickle.dumps(s))\n+    restored = pickle.loads(pickle.dumps(s))\n+    assert restored.equals(s)\n\nReview comment:\n       This should be inside the loop.\r\n   (also, null values are not tested?)\n\n##########\nFile path: python/pyarrow/tests/test_convert_builtin.py\n##########\n@@ -1640,3 +1640,85 @@ def test_map_from_tuples():\n     for entry in [[(5,)], [()], [('5', 'foo', True)]]:\n         with pytest.raises(ValueError, match=\"(?i)tuple size\"):\n             pa.array([entry], type=pa.map_('i4', 'i4'))\n+\n+\n+def test_dictionary_from_boolean():\n+    typ = pa.dictionary(pa.int8(), value_type=pa.bool_())\n+    a = pa.array([False, False, True, False, True], type=typ)\n+    assert isinstance(a.type, pa.DictionaryType)\n+    assert a.type.equals(typ)\n+\n+    expected_indices = pa.array([0, 0, 1, 0, 1], type=pa.int8())\n+    expected_dictionary = pa.array([False, True], type=pa.bool_())\n+    assert a.indices.equals(expected_indices)\n+    assert a.dictionary.equals(expected_dictionary)\n+\n+\n+@pytest.mark.parametrize('value_type', [\n+    pa.int8(),\n+    pa.int16(),\n+    pa.int32(),\n+    pa.int64(),\n+    pa.uint8(),\n+    pa.uint16(),\n+    pa.uint32(),\n+    pa.uint64(),\n+    pa.float32(),\n+    pa.float64(),\n+    pa.date32(),\n+    pa.date64(),\n+])\n+def test_dictionary_from_integers(value_type):\n+    typ = pa.dictionary(pa.int8(), value_type=value_type)\n+    a = pa.array([1, 2, 1, 1, 2, 3], type=typ)\n+    assert isinstance(a.type, pa.DictionaryType)\n+    assert a.type.equals(typ)\n+\n+    expected_indices = pa.array([0, 1, 0, 0, 1, 2], type=pa.int8())\n+    expected_dictionary = pa.array([1, 2, 3], type=value_type)\n+    assert a.indices.equals(expected_indices)\n+    assert a.dictionary.equals(expected_dictionary)\n+\n+\n+@pytest.mark.parametrize('input_index_type', [\n+    pa.int8(),\n+    pa.int16(),\n+    pa.int32(),\n+    pa.int64()\n+])\n+def test_dictionary_is_always_adaptive(input_index_type):\n+    # dictionary array is constructed using adaptive index type builder,\n+    # meaning that the input index type is ignored since the output index\n+    # type depends on the input data\n+    typ = pa.dictionary(input_index_type, value_type=pa.int64())\n+\n+    a = pa.array(range(2**7), type=typ)\n+    expected = pa.dictionary(pa.int8(), pa.int64())\n+    assert a.type.equals(expected)\n+\n+    a = pa.array(range(2**7 + 1), type=typ)\n+    expected = pa.dictionary(pa.int16(), pa.int64())\n+    assert a.type.equals(expected)\n+\n+\n+def test_dictionary_from_strings():\n+    for value_type in [pa.binary(), pa.string()]:\n+        typ = pa.dictionary(pa.int8(), value_type)\n+        a = pa.array([\"\", \"a\", \"bb\", \"a\", \"bb\", \"ccc\"], type=typ)\n\nReview comment:\n       Also test with nulls?\n\n##########\nFile path: cpp/src/arrow/python/python_to_arrow.cc\n##########\n@@ -903,6 +897,75 @@ class FixedSizeListConverter : public BaseListConverter<FixedSizeListType, null_\n   int64_t list_size_;\n };\n \n+// ----------------------------------------------------------------------\n+// Convert dictionary\n+\n+template <typename ValueType, NullCoding null_coding>\n+class DictionaryConverter : public SeqConverter {\n+ public:\n+  using BuilderType = DictionaryBuilder<ValueType>;\n+\n+  Status Init(ArrayBuilder* builder) override {\n+    RETURN_NOT_OK(SeqConverter::Init(builder));\n+    typed_builder_ = checked_cast<BuilderType*>(builder);\n+    return Status::OK();\n+  }\n+\n+  Status Append(PyObject* obj) override {\n+    // Append null if the obj is None or pandas null otherwise the valid value\n+    return NullChecker<null_coding>::Check(obj) ? AppendNull() : AppendValue(obj);\n+  }\n+\n+ protected:\n+  BuilderType* typed_builder_;\n+};\n+\n+template <typename ValueType, NullCoding null_coding>\n+class PrimitiveDictionaryConverter : public DictionaryConverter<ValueType, null_coding> {\n+ public:\n+  Status AppendValue(PyObject* obj) override {\n+    ARROW_ASSIGN_OR_RAISE(auto value, ValueConverter<ValueType>::FromPython(obj));\n+    return this->typed_builder_->Append(value);\n+  }\n+};\n+\n+template <typename ValueType, NullCoding null_coding>\n+class BinaryLikeDictionaryConverter : public DictionaryConverter<ValueType, null_coding> {\n+ public:\n+  Status AppendValue(PyObject* obj) override {\n+    ARROW_ASSIGN_OR_RAISE(string_view_, ValueConverter<ValueType>::FromPython(obj));\n+    // DCHECK_GE(string_view_.size, 0);\n+    RETURN_NOT_OK(this->typed_builder_->Append(string_view_.bytes,\n+                                               static_cast<int32_t>(string_view_.size)));\n+    return Status::OK();\n+  }\n+\n+ protected:\n+  // Create a single instance of PyBytesView here to prevent unnecessary object\n+  // creation/destruction\n+  PyBytesView string_view_;\n+};\n+\n+template <NullCoding null_coding>\n+class FixedSizeBinaryDictionaryConverter\n+    : public DictionaryConverter<FixedSizeBinaryType, null_coding> {\n+ public:\n+  explicit FixedSizeBinaryDictionaryConverter(int32_t byte_width)\n+      : byte_width_(byte_width) {}\n+\n+  Status AppendValue(PyObject* obj) override {\n+    ARROW_ASSIGN_OR_RAISE(\n+        string_view_, ValueConverter<FixedSizeBinaryType>::FromPython(obj, byte_width_));\n+    RETURN_NOT_OK(this->typed_builder_->Append(string_view_.bytes,\n+                                               static_cast<int32_t>(string_view_.size)));\n+    return Status::OK();\n+  }\n+\n+ protected:\n+  int32_t byte_width_;\n\nReview comment:\n       Add `const`\n\n##########\nFile path: cpp/src/arrow/python/python_to_arrow.cc\n##########\n@@ -903,6 +897,75 @@ class FixedSizeListConverter : public BaseListConverter<FixedSizeListType, null_\n   int64_t list_size_;\n };\n \n+// ----------------------------------------------------------------------\n+// Convert dictionary\n+\n+template <typename ValueType, NullCoding null_coding>\n+class DictionaryConverter : public SeqConverter {\n+ public:\n+  using BuilderType = DictionaryBuilder<ValueType>;\n+\n+  Status Init(ArrayBuilder* builder) override {\n+    RETURN_NOT_OK(SeqConverter::Init(builder));\n+    typed_builder_ = checked_cast<BuilderType*>(builder);\n+    return Status::OK();\n+  }\n+\n+  Status Append(PyObject* obj) override {\n+    // Append null if the obj is None or pandas null otherwise the valid value\n+    return NullChecker<null_coding>::Check(obj) ? AppendNull() : AppendValue(obj);\n+  }\n+\n+ protected:\n+  BuilderType* typed_builder_;\n+};\n+\n+template <typename ValueType, NullCoding null_coding>\n+class PrimitiveDictionaryConverter : public DictionaryConverter<ValueType, null_coding> {\n+ public:\n+  Status AppendValue(PyObject* obj) override {\n+    ARROW_ASSIGN_OR_RAISE(auto value, ValueConverter<ValueType>::FromPython(obj));\n+    return this->typed_builder_->Append(value);\n+  }\n+};\n+\n+template <typename ValueType, NullCoding null_coding>\n+class BinaryLikeDictionaryConverter : public DictionaryConverter<ValueType, null_coding> {\n+ public:\n+  Status AppendValue(PyObject* obj) override {\n+    ARROW_ASSIGN_OR_RAISE(string_view_, ValueConverter<ValueType>::FromPython(obj));\n+    // DCHECK_GE(string_view_.size, 0);\n+    RETURN_NOT_OK(this->typed_builder_->Append(string_view_.bytes,\n+                                               static_cast<int32_t>(string_view_.size)));\n+    return Status::OK();\n+  }\n+\n+ protected:\n+  // Create a single instance of PyBytesView here to prevent unnecessary object\n+  // creation/destruction\n+  PyBytesView string_view_;\n+};\n+\n+template <NullCoding null_coding>\n+class FixedSizeBinaryDictionaryConverter\n+    : public DictionaryConverter<FixedSizeBinaryType, null_coding> {\n+ public:\n+  explicit FixedSizeBinaryDictionaryConverter(int32_t byte_width)\n+      : byte_width_(byte_width) {}\n+\n+  Status AppendValue(PyObject* obj) override {\n+    ARROW_ASSIGN_OR_RAISE(\n+        string_view_, ValueConverter<FixedSizeBinaryType>::FromPython(obj, byte_width_));\n+    RETURN_NOT_OK(this->typed_builder_->Append(string_view_.bytes,\n\nReview comment:\n       Same here: it would be good to have `TypedBuilder::Append(string_view)`.\n\n##########\nFile path: python/pyarrow/tests/test_convert_builtin.py\n##########\n@@ -1640,3 +1640,85 @@ def test_map_from_tuples():\n     for entry in [[(5,)], [()], [('5', 'foo', True)]]:\n         with pytest.raises(ValueError, match=\"(?i)tuple size\"):\n             pa.array([entry], type=pa.map_('i4', 'i4'))\n+\n+\n+def test_dictionary_from_boolean():\n+    typ = pa.dictionary(pa.int8(), value_type=pa.bool_())\n+    a = pa.array([False, False, True, False, True], type=typ)\n+    assert isinstance(a.type, pa.DictionaryType)\n+    assert a.type.equals(typ)\n+\n+    expected_indices = pa.array([0, 0, 1, 0, 1], type=pa.int8())\n+    expected_dictionary = pa.array([False, True], type=pa.bool_())\n+    assert a.indices.equals(expected_indices)\n+    assert a.dictionary.equals(expected_dictionary)\n+\n+\n+@pytest.mark.parametrize('value_type', [\n+    pa.int8(),\n+    pa.int16(),\n+    pa.int32(),\n+    pa.int64(),\n+    pa.uint8(),\n+    pa.uint16(),\n+    pa.uint32(),\n+    pa.uint64(),\n+    pa.float32(),\n+    pa.float64(),\n+    pa.date32(),\n+    pa.date64(),\n+])\n+def test_dictionary_from_integers(value_type):\n+    typ = pa.dictionary(pa.int8(), value_type=value_type)\n+    a = pa.array([1, 2, 1, 1, 2, 3], type=typ)\n+    assert isinstance(a.type, pa.DictionaryType)\n+    assert a.type.equals(typ)\n+\n+    expected_indices = pa.array([0, 1, 0, 0, 1, 2], type=pa.int8())\n\nReview comment:\n       Can you test with nulls at some point?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-08-25T12:03:00.964+0000",
                    "updated": "2020-08-25T12:03:00.964+0000",
                    "started": "2020-08-25T12:03:00.964+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "474251",
                    "issueId": "13315578"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315578/worklog/481509",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs closed pull request #8008:\nURL: https://github.com/apache/arrow/pull/8008\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-10T14:59:11.688+0000",
                    "updated": "2020-09-10T14:59:11.688+0000",
                    "started": "2020-09-10T14:59:11.688+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "481509",
                    "issueId": "13315578"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315578/worklog/481510",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on pull request #8008:\nURL: https://github.com/apache/arrow/pull/8008#issuecomment-690347767\n\n\n   We can close this in favor of #8088\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-09-10T14:59:14.751+0000",
                    "updated": "2020-09-10T14:59:14.751+0000",
                    "started": "2020-09-10T14:59:14.751+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "481510",
                    "issueId": "13315578"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
            "id": "1",
            "description": "A problem which impairs or prevents the functions of the product.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
            "name": "Bug",
            "subtask": false,
            "avatarId": 21133
        },
        "timespent": 5400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6eeae9b9[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3f86f666[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@57737914[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5f4e905a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@70039628[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@71fd8d93[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3d0af161[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@166d6ada[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7a330ce9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@67bf9729[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@dd4f346[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7092739c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 5400,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Sep 08 06:46:14 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-09-08T06:47:23.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9369/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2020-07-08T08:40:46.000+0000",
        "updated": "2022-09-08T06:47:23.000+0000",
        "timeoriginalestimate": null,
        "description": "Converting from a python sequence with specified target type isn't implemented yet for dictionary type:\r\n\r\n{code}\r\nIn [1]: pa.array(['a', 'b', 'a'], pa.dictionary(pa.int32(), pa.string()))                                                                                                                                          \r\n---------------------------------------------------------------------------\r\nArrowNotImplementedError                  Traceback (most recent call last)\r\n<ipython-input-1-bda8628a4917> in <module>\r\n----> 1 pa.array(['a', 'b', 'a'], pa.dictionary(pa.int32(), pa.string()))\r\n\r\n~/scipy/repos/arrow/python/pyarrow/array.pxi in pyarrow.lib.array()\r\n\r\n~/scipy/repos/arrow/python/pyarrow/array.pxi in pyarrow.lib._sequence_to_array()\r\n\r\n~/scipy/repos/arrow/python/pyarrow/error.pxi in pyarrow.lib.check_status()\r\n\r\nArrowNotImplementedError: Sequence converter for type dictionary<values=string, indices=int32, ordered=0> not implemented\r\n{code}\r\n\r\n\r\n\r\n-----\r\n_Original report_\r\n\r\nHello, I am trying to do the following (please correct me if I am doing some non-sense):\r\n{code:python}\r\nimport pandas as pd\r\nimport pyarrow as pa\r\nimport pyarrow.parquet as pq\r\n\r\nfields = [pa.field(\"object\", pa.dictionary(pa.int64(), pa.string()))]\r\ndata = {\"object\": { \r\n                               \"a\": \"a\",\r\n                               \"b\": \"b\",\r\n                               \"c\": \"c\", \r\n                               \"s\": \"d\" }}\r\ndf = pd.DataFrame(data)\r\ntable = pa.Table.from_pandas(df, pa.schema(fields))\r\npq.write_table(table, \"test.parquet\") \r\n{code}\r\nand I am getting:\r\n{noformat}\r\nTraceback (most recent call last):\r\n  File \"pa_test.py\", line 17, in <module>\r\n    table = pa.Table.from_pandas(df, pa.schema(fields))\r\n  File \"pyarrow/table.pxi\", line 1451, in pyarrow.lib.Table.from_pandas\r\n  File \"/home/tremes/GITHUB/data-pipeline/venv/lib64/python3.7/site-packages/pyarrow/pandas_compat.py\", line 575, in dataframe_to_arrays\r\n    for c, f in zip(columns_to_convert, convert_fields)]\r\n  File \"/home/tremes/GITHUB/data-pipeline/venv/lib64/python3.7/site-packages/pyarrow/pandas_compat.py\", line 575, in <listcomp>\r\n    for c, f in zip(columns_to_convert, convert_fields)]\r\n  File \"/home/tremes/GITHUB/data-pipeline/venv/lib64/python3.7/site-packages/pyarrow/pandas_compat.py\", line 566, in convert_column\r\n    raise e\r\n  File \"/home/tremes/GITHUB/data-pipeline/venv/lib64/python3.7/site-packages/pyarrow/pandas_compat.py\", line 560, in convert_column\r\n    result = pa.array(col, type=type_, from_pandas=True, safe=safe)\r\n  File \"pyarrow/array.pxi\", line 265, in pyarrow.lib.array\r\n  File \"pyarrow/array.pxi\", line 80, in pyarrow.lib._ndarray_to_array\r\n  File \"pyarrow/error.pxi\", line 106, in pyarrow.lib.check_status\r\npyarrow.lib.ArrowNotImplementedError: ('Sequence converter for type dictionary<values=string, indices=int64, ordered=0> not implemented', 'Conversion failed for column object with type object')\r\n{noformat}\r\nWorkaround is to use {{df.to_parquet(\"test.parquet\")}}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 5400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Support conversion from python sequence to dictionary type",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315578/comment/17153459",
                    "id": "17153459",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "The dictionary type maps to pandas' categorical type, so you can first convert the dataframe column to a categorical, and then this works:\r\n\r\n{code}\r\nIn [17]: df[\"object\"] = df[\"object\"].astype(\"category\")                                                                                                                                                            \r\n\r\nIn [19]: table = pa.Table.from_pandas(df, pa.schema(fields))                                                                                                                                                       \r\n\r\nIn [20]: table                                                                                                                                                                                                     \r\nOut[20]: \r\npyarrow.Table\r\nobject: dictionary<values=string, indices=int64, ordered=0>\r\n{code}\r\n\r\nIn principle, the converter for the dictionary type could be expanded to take a non-categorical type, but that is right now not yet implemented.\r\n\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2020-07-08T10:01:50.268+0000",
                    "updated": "2020-07-08T10:01:50.268+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315578/comment/17154232",
                    "id": "17154232",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "I renamed the issue to reflect the possible enhancement to add a converter from a general python sequence to a dictionary type.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2020-07-09T06:44:29.895+0000",
                    "updated": "2020-07-09T06:44:29.895+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315578/comment/17292362",
                    "id": "17292362",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=ARF1",
                        "name": "ARF1",
                        "key": "arf1",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ARF",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I think this issue has been fixed and can be closed:\r\n\r\n{code:python}\r\npa.array(['a', 'b', 'a'], pa.dictionary(pa.int32(), pa.string()))\r\n{code}\r\n\r\nOutput:\r\n{code:none}\r\n<pyarrow.lib.DictionaryArray object at 0x00000172FAABEBA0>\r\n\r\n-- dictionary:\r\n  [\r\n    \"a\",\r\n    \"b\"\r\n  ]\r\n-- indices:\r\n  [\r\n    0,\r\n    1,\r\n    0\r\n  ]\r\n{code}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=ARF1",
                        "name": "ARF1",
                        "key": "arf1",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ARF",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-02-28T10:08:19.707+0000",
                    "updated": "2021-02-28T10:08:19.707+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13315578/comment/17601674",
                    "id": "17601674",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "body": "Yes, think this was fixed by ARROW-9992",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
                        "name": "jorisvandenbossche",
                        "key": "jorisvandenbossche",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Joris Van den Bossche",
                        "active": true,
                        "timeZone": "Europe/Brussels"
                    },
                    "created": "2022-09-08T06:46:14.714+0000",
                    "updated": "2022-09-08T06:46:14.714+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|z0gjyo:",
        "customfield_12314139": null
    }
}