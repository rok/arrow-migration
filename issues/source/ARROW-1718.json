{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13111559",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111559",
    "key": "ARROW-1718",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12518310",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12518310",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13110075",
                    "key": "ARROW-1680",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13110075",
                    "fields": {
                        "summary": "[Python] Timestamp unit change not done in from_pandas() conversion",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/1",
                            "id": "1",
                            "description": "A problem which impairs or prevents the functions of the product.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21133&avatarType=issuetype",
                            "name": "Bug",
                            "subtask": false,
                            "avatarId": 21133
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
            "name": "bryanc",
            "key": "bryanc",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
            },
            "displayName": "Bryan Cutler",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
            "name": "bryanc",
            "key": "bryanc",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
            },
            "displayName": "Bryan Cutler",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1718/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@62e4c8ea[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3aefeacf[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@11ea1d1d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@5416247d[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5b4b3196[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@679c0dfd[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@265ff6e6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@430f1b9c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@41ca45ea[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@46be4bcb[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1f0f6d3c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@246746ba[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Oct 30 13:45:44 UTC 2017",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2017-10-30T07:51:11.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1718/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2017-10-23T22:55:21.000+0000",
        "updated": "2017-10-30T13:45:44.000+0000",
        "timeoriginalestimate": null,
        "description": "When calling {{Array.from_pandas}} with a pandas.Series of dates and specifying the desired pyarrow type, an error occurs.  If the type is not specified then {{from_pandas}} will interpret the data as a timestamp type.\r\n\r\n{code}\r\nimport pandas as pd\r\nimport pyarrow as pa\r\nimport datetime\r\n\r\narr = pa.array([datetime.date(2017, 10, 23)])\r\nc = pa.Column.from_array(\"d\", arr)\r\n\r\ns = c.to_pandas()\r\nprint(s)\r\n# 0   2017-10-23\r\n# Name: d, dtype: datetime64[ns]\r\n\r\nresult = pa.Array.from_pandas(s, type=pa.date32())\r\nprint(result)\r\n\"\"\"\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\n  File \"pyarrow/array.pxi\", line 295, in pyarrow.lib.Array.__repr__ (/home/bryan/git/arrow/python/build/temp.linux-x86_64-2.7/lib.cxx:26221)\r\n  File \"/home/bryan/.local/lib/python2.7/site-packages/pyarrow-0.7.2.dev21+ng028f2cd-py2.7-linux-x86_64.egg/pyarrow/formatting.py\", line 28, in array_format\r\n    values.append(value_format(x, 0))\r\n  File \"/home/bryan/.local/lib/python2.7/site-packages/pyarrow-0.7.2.dev21+ng028f2cd-py2.7-linux-x86_64.egg/pyarrow/formatting.py\", line 49, in value_format\r\n    return repr(x)\r\n  File \"pyarrow/scalar.pxi\", line 63, in pyarrow.lib.ArrayValue.__repr__ (/home/bryan/git/arrow/python/build/temp.linux-x86_64-2.7/lib.cxx:19535)\r\n  File \"pyarrow/scalar.pxi\", line 137, in pyarrow.lib.Date32Value.as_py (/home/bryan/git/arrow/python/build/temp.linux-x86_64-2.7/lib.cxx:20368)\r\nValueError: year is out of range\r\n\"\"\"\r\n{code}",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Implement casts from timestamp to date32/date64 and support in Array.from_pandas",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111559/comment/16216002",
                    "id": "16216002",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
                        "name": "bryanc",
                        "key": "bryanc",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
                        },
                        "displayName": "Bryan Cutler",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "[~wesmckinn] I am also wondering if {{Column.to_pandas}} from the code above should produce a 'datetime64[ns]' series?  I believe {{Array.to_pandas}} creates a 'datetime64[D]' series.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
                        "name": "bryanc",
                        "key": "bryanc",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
                        },
                        "displayName": "Bryan Cutler",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2017-10-23T22:58:12.642+0000",
                    "updated": "2017-10-23T22:58:12.642+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111559/comment/16216138",
                    "id": "16216138",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "That sounds inconsistent. Will have to take a closer look",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-10-24T00:37:52.731+0000",
                    "updated": "2017-10-24T00:37:52.731+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111559/comment/16221679",
                    "id": "16221679",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "There's a bit of work to do here but it will be for the greater good. I changed the title to reflect the scope of the work (which is more than a bugfix). Should have a patch out in the next few days",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-10-27T03:54:11.782+0000",
                    "updated": "2017-10-27T03:54:11.782+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111559/comment/16222737",
                    "id": "16222737",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm opened a new pull request #1258: ARROW-1718: [C++/Python] Implement casts from timestamp to date32/64, properly handle NumPy datetime64[D] -> date32\nURL: https://github.com/apache/arrow/pull/1258\n \n \n   This was sort of a can of worms. cc @xhochy @cpcloud @BryanCutler \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-27T17:36:18.902+0000",
                    "updated": "2017-10-27T17:36:18.902+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111559/comment/16222775",
                    "id": "16222775",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "BryanCutler commented on issue #1258: ARROW-1718: [C++/Python] Implement casts from timestamp to date32/64, properly handle NumPy datetime64[D] -> date32\nURL: https://github.com/apache/arrow/pull/1258#issuecomment-340080163\n \n \n   +1 looks good, thanks for doing this!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-27T20:42:18.437+0000",
                    "updated": "2017-10-27T20:42:18.437+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111559/comment/16222844",
                    "id": "16222844",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy commented on a change in pull request #1258: ARROW-1718: [C++/Python] Implement casts from timestamp to date32/64, properly handle NumPy datetime64[D] -> date32\nURL: https://github.com/apache/arrow/pull/1258#discussion_r147518348\n \n \n\n ##########\n File path: .travis.yml\n ##########\n @@ -51,12 +51,12 @@ matrix:\n     os: linux\n     group: deprecated\n     before_script:\n-    - export CC=\"gcc-4.9\"\n \n Review comment:\n   Is this expected to be in here?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-27T21:18:06.799+0000",
                    "updated": "2017-10-27T21:18:06.799+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111559/comment/16224270",
                    "id": "16224270",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1258: ARROW-1718: [C++/Python] Implement casts from timestamp to date32/64, properly handle NumPy datetime64[D] -> date32\nURL: https://github.com/apache/arrow/pull/1258#discussion_r147601882\n \n \n\n ##########\n File path: .travis.yml\n ##########\n @@ -51,12 +51,12 @@ matrix:\n     os: linux\n     group: deprecated\n     before_script:\n-    - export CC=\"gcc-4.9\"\n \n Review comment:\n   We aren't using clang-4.0 in any other build matrix, any objections to using that here (we use gcc 4.9 in other builds)? \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-30T00:40:25.437+0000",
                    "updated": "2017-10-30T00:40:25.437+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111559/comment/16224464",
                    "id": "16224464",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy commented on a change in pull request #1258: ARROW-1718: [C++/Python] Implement casts from timestamp to date32/64, properly handle NumPy datetime64[D] -> date32\nURL: https://github.com/apache/arrow/pull/1258#discussion_r147633177\n \n \n\n ##########\n File path: .travis.yml\n ##########\n @@ -51,12 +51,12 @@ matrix:\n     os: linux\n     group: deprecated\n     before_script:\n-    - export CC=\"gcc-4.9\"\n \n Review comment:\n   We use clang-4.0 in the integration tests, but as we use gcc-4.9 in the manylinux1 builds I do not care much about the choice of compiler here as long as we test Python+old gcc together in some build.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-30T07:49:51.957+0000",
                    "updated": "2017-10-30T07:49:51.957+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111559/comment/16224467",
                    "id": "16224467",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "xhochy closed pull request #1258: ARROW-1718: [C++/Python] Implement casts from timestamp to date32/64, properly handle NumPy datetime64[D] -> date32\nURL: https://github.com/apache/arrow/pull/1258\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/.travis.yml b/.travis.yml\nindex 039ae9520..6419548a6 100644\n--- a/.travis.yml\n+++ b/.travis.yml\n@@ -51,12 +51,12 @@ matrix:\n     os: linux\n     group: deprecated\n     before_script:\n-    - export CC=\"gcc-4.9\"\n-    - export CXX=\"g++-4.9\"\n     - export ARROW_TRAVIS_USE_TOOLCHAIN=1\n     - export ARROW_TRAVIS_VALGRIND=1\n     - export ARROW_TRAVIS_PLASMA=1\n     - export ARROW_TRAVIS_CLANG_FORMAT=1\n+    - export CC=\"clang-4.0\"\n+    - export CXX=\"clang++-4.0\"\n     - $TRAVIS_BUILD_DIR/ci/travis_install_clang_tools.sh\n     - $TRAVIS_BUILD_DIR/ci/travis_lint.sh\n     - $TRAVIS_BUILD_DIR/ci/travis_before_script_cpp.sh\ndiff --git a/cpp/src/arrow/compute/cast.cc b/cpp/src/arrow/compute/cast.cc\nindex 68a2b1237..114ab9af0 100644\n--- a/cpp/src/arrow/compute/cast.cc\n+++ b/cpp/src/arrow/compute/cast.cc\n@@ -69,11 +69,18 @@\n namespace arrow {\n namespace compute {\n \n+constexpr int64_t kMillisecondsInDay = 86400000;\n+\n template <typename T>\n-inline const T* GetValuesAs(const ArrayData& data, int i) {\n+inline const T* GetValues(const ArrayData& data, int i) {\n   return reinterpret_cast<const T*>(data.buffers[i]->data()) + data.offset;\n }\n \n+template <typename T>\n+inline T* GetMutableValues(const ArrayData* data, int i) {\n+  return reinterpret_cast<T*>(data->buffers[i]->mutable_data()) + data->offset;\n+}\n+\n namespace {\n \n void CopyData(const Array& input, ArrayData* output) {\n@@ -164,7 +171,7 @@ struct CastFunctor<T, BooleanType,\n     auto in_data = input.data();\n     internal::BitmapReader bit_reader(in_data->buffers[1]->data(), in_data->offset,\n                                       in_data->length);\n-    auto out = reinterpret_cast<c_type*>(output->buffers[1]->mutable_data());\n+    auto out = GetMutableValues<c_type>(output, 1);\n     for (int64_t i = 0; i < input.length(); ++i) {\n       *out++ = bit_reader.IsSet() ? kOne : kZero;\n       bit_reader.Next();\n@@ -214,8 +221,8 @@ struct CastFunctor<O, I, typename std::enable_if<std::is_same<BooleanType, O>::v\n     using in_type = typename I::c_type;\n     DCHECK_EQ(output->offset, 0);\n \n-    const in_type* in_data = GetValuesAs<in_type>(*input.data(), 1);\n-    uint8_t* out_data = reinterpret_cast<uint8_t*>(output->buffers[1]->mutable_data());\n+    const in_type* in_data = GetValues<in_type>(*input.data(), 1);\n+    uint8_t* out_data = GetMutableValues<uint8_t>(output, 1);\n     for (int64_t i = 0; i < input.length(); ++i) {\n       BitUtil::SetBitTo(out_data, i, (*in_data++) != 0);\n     }\n@@ -233,8 +240,8 @@ struct CastFunctor<O, I,\n \n     auto in_offset = input.offset();\n \n-    const in_type* in_data = GetValuesAs<in_type>(*input.data(), 1);\n-    auto out_data = reinterpret_cast<out_type*>(output->buffers[1]->mutable_data());\n+    const in_type* in_data = GetValues<in_type>(*input.data(), 1);\n+    auto out_data = GetMutableValues<out_type>(output, 1);\n \n     if (!options.allow_int_overflow) {\n       constexpr in_type kMax = static_cast<in_type>(std::numeric_limits<out_type>::max());\n@@ -276,8 +283,8 @@ struct CastFunctor<O, I,\n     using in_type = typename I::c_type;\n     using out_type = typename O::c_type;\n \n-    const in_type* in_data = GetValuesAs<in_type>(*input.data(), 1);\n-    auto out_data = reinterpret_cast<out_type*>(output->buffers[1]->mutable_data());\n+    const in_type* in_data = GetValues<in_type>(*input.data(), 1);\n+    auto out_data = GetMutableValues<out_type>(output, 1);\n     for (int64_t i = 0; i < input.length(); ++i) {\n       *out_data++ = static_cast<out_type>(*in_data++);\n     }\n@@ -288,13 +295,16 @@ struct CastFunctor<O, I,\n // From one timestamp to another\n \n template <typename in_type, typename out_type>\n-inline void ShiftTime(FunctionContext* ctx, const CastOptions& options,\n-                      const bool is_multiply, const int64_t factor, const Array& input,\n-                      ArrayData* output) {\n-  const in_type* in_data = GetValuesAs<in_type>(*input.data(), 1);\n-  auto out_data = reinterpret_cast<out_type*>(output->buffers[1]->mutable_data());\n+void ShiftTime(FunctionContext* ctx, const CastOptions& options, const bool is_multiply,\n+               const int64_t factor, const Array& input, ArrayData* output) {\n+  const in_type* in_data = GetValues<in_type>(*input.data(), 1);\n+  auto out_data = GetMutableValues<out_type>(output, 1);\n \n-  if (is_multiply) {\n+  if (factor == 1) {\n+    for (int64_t i = 0; i < input.length(); i++) {\n+      out_data[i] = static_cast<out_type>(in_data[i]);\n+    }\n+  } else if (is_multiply) {\n     for (int64_t i = 0; i < input.length(); i++) {\n       out_data[i] = static_cast<out_type>(in_data[i] * factor);\n     }\n@@ -352,6 +362,52 @@ struct CastFunctor<TimestampType, TimestampType> {\n   }\n };\n \n+template <>\n+struct CastFunctor<Date32Type, TimestampType> {\n+  void operator()(FunctionContext* ctx, const CastOptions& options, const Array& input,\n+                  ArrayData* output) {\n+    const auto& in_type = static_cast<const TimestampType&>(*input.type());\n+\n+    static const int64_t kTimestampToDateFactors[4] = {\n+        86400LL,                             // SECOND\n+        86400LL * 1000LL,                    // MILLI\n+        86400LL * 1000LL * 1000LL,           // MICRO\n+        86400LL * 1000LL * 1000LL * 1000LL,  // NANO\n+    };\n+\n+    const int64_t factor = kTimestampToDateFactors[static_cast<int>(in_type.unit())];\n+    ShiftTime<int64_t, int32_t>(ctx, options, false, factor, input, output);\n+  }\n+};\n+\n+template <>\n+struct CastFunctor<Date64Type, TimestampType> {\n+  void operator()(FunctionContext* ctx, const CastOptions& options, const Array& input,\n+                  ArrayData* output) {\n+    const auto& in_type = static_cast<const TimestampType&>(*input.type());\n+\n+    std::pair<bool, int64_t> conversion =\n+        kTimeConversionTable[static_cast<int>(in_type.unit())]\n+                            [static_cast<int>(TimeUnit::MILLI)];\n+\n+    ShiftTime<int64_t, int64_t>(ctx, options, conversion.first, conversion.second, input,\n+                                output);\n+\n+    // Ensure that intraday milliseconds have been zeroed out\n+    auto out_data = GetMutableValues<int64_t>(output, 1);\n+    for (int64_t i = 0; i < input.length(); ++i) {\n+      const int64_t remainder = out_data[i] % kMillisecondsInDay;\n+      if (ARROW_PREDICT_FALSE(!options.allow_time_truncate && input.IsValid(i) &&\n+                              remainder > 0)) {\n+        ctx->SetStatus(\n+            Status::Invalid(\"Timestamp value had non-zero intraday milliseconds\"));\n+        break;\n+      }\n+      out_data[i] -= remainder;\n+    }\n+  }\n+};\n+\n // ----------------------------------------------------------------------\n // From one time32 or time64 to another\n \n@@ -385,8 +441,6 @@ struct CastFunctor<O, I,\n // ----------------------------------------------------------------------\n // Between date32 and date64\n \n-constexpr int64_t kMillisecondsInDay = 86400000;\n-\n template <>\n struct CastFunctor<Date64Type, Date32Type> {\n   void operator()(FunctionContext* ctx, const CastOptions& options, const Array& input,\n@@ -415,7 +469,7 @@ void UnpackFixedSizeBinaryDictionary(FunctionContext* ctx, const Array& indices,\n   internal::BitmapReader valid_bits_reader(indices.null_bitmap_data(), indices.offset(),\n                                            indices.length());\n \n-  const index_c_type* in = GetValuesAs<index_c_type>(*indices.data(), 1);\n+  const index_c_type* in = GetValues<index_c_type>(*indices.data(), 1);\n \n   uint8_t* out = output->buffers[1]->mutable_data();\n   int32_t byte_width =\n@@ -479,7 +533,7 @@ Status UnpackBinaryDictionary(FunctionContext* ctx, const Array& indices,\n   internal::BitmapReader valid_bits_reader(indices.null_bitmap_data(), indices.offset(),\n                                            indices.length());\n \n-  const index_c_type* in = GetValuesAs<index_c_type>(*indices.data(), 1);\n+  const index_c_type* in = GetValues<index_c_type>(*indices.data(), 1);\n   for (int64_t i = 0; i < indices.length(); ++i) {\n     if (valid_bits_reader.IsSet()) {\n       int32_t length;\n@@ -550,7 +604,7 @@ void UnpackPrimitiveDictionary(const Array& indices, const c_type* dictionary,\n   internal::BitmapReader valid_bits_reader(indices.null_bitmap_data(), indices.offset(),\n                                            indices.length());\n \n-  const index_c_type* in = GetValuesAs<index_c_type>(*indices.data(), 1);\n+  const index_c_type* in = GetValues<index_c_type>(*indices.data(), 1);\n   for (int64_t i = 0; i < indices.length(); ++i) {\n     if (valid_bits_reader.IsSet()) {\n       out[i] = dictionary[in[i]];\n@@ -575,7 +629,7 @@ struct CastFunctor<T, DictionaryType,\n     DCHECK(values_type.Equals(*output->type))\n         << \"Dictionary type: \" << values_type << \" target type: \" << (*output->type);\n \n-    const c_type* dictionary = GetValuesAs<c_type>(*type.dictionary()->data(), 1);\n+    const c_type* dictionary = GetValues<c_type>(*type.dictionary()->data(), 1);\n \n     auto out = reinterpret_cast<c_type*>(output->buffers[1]->mutable_data());\n     const Array& indices = *dict_array.indices();\n@@ -755,7 +809,10 @@ class CastKernel : public UnaryKernel {\n   FN(Time64Type, Time32Type);     \\\n   FN(Time64Type, Time64Type);\n \n-#define TIMESTAMP_CASES(FN, IN_TYPE) FN(TimestampType, TimestampType);\n+#define TIMESTAMP_CASES(FN, IN_TYPE) \\\n+  FN(TimestampType, TimestampType);  \\\n+  FN(TimestampType, Date32Type);     \\\n+  FN(TimestampType, Date64Type);\n \n #define DICTIONARY_CASES(FN, IN_TYPE) \\\n   FN(IN_TYPE, NullType);              \\\ndiff --git a/cpp/src/arrow/compute/compute-test.cc b/cpp/src/arrow/compute/compute-test.cc\nindex 8a7ef923b..61d53c4d5 100644\n--- a/cpp/src/arrow/compute/compute-test.cc\n+++ b/cpp/src/arrow/compute/compute-test.cc\n@@ -355,6 +355,70 @@ TEST_F(TestCast, TimestampToTimestamp) {\n                             timestamp(TimeUnit::SECOND), options);\n }\n \n+TEST_F(TestCast, TimestampToDate32_Date64) {\n+  CastOptions options;\n+\n+  vector<bool> is_valid = {true, true, false};\n+\n+  // 2000-01-01, 2000-01-02, null\n+  vector<int64_t> v_nano = {946684800000000000, 946771200000000000, 0};\n+  vector<int64_t> v_micro = {946684800000000, 946771200000000, 0};\n+  vector<int64_t> v_milli = {946684800000, 946771200000, 0};\n+  vector<int64_t> v_second = {946684800, 946771200, 0};\n+  vector<int32_t> v_day = {10957, 10958, 0};\n+\n+  // Simple conversions\n+  CheckCase<TimestampType, int64_t, Date64Type, int64_t>(\n+      timestamp(TimeUnit::NANO), v_nano, is_valid, date64(), v_milli, options);\n+  CheckCase<TimestampType, int64_t, Date64Type, int64_t>(\n+      timestamp(TimeUnit::MICRO), v_micro, is_valid, date64(), v_milli, options);\n+  CheckCase<TimestampType, int64_t, Date64Type, int64_t>(\n+      timestamp(TimeUnit::MILLI), v_milli, is_valid, date64(), v_milli, options);\n+  CheckCase<TimestampType, int64_t, Date64Type, int64_t>(\n+      timestamp(TimeUnit::SECOND), v_second, is_valid, date64(), v_milli, options);\n+\n+  CheckCase<TimestampType, int64_t, Date32Type, int32_t>(\n+      timestamp(TimeUnit::NANO), v_nano, is_valid, date32(), v_day, options);\n+  CheckCase<TimestampType, int64_t, Date32Type, int32_t>(\n+      timestamp(TimeUnit::MICRO), v_micro, is_valid, date32(), v_day, options);\n+  CheckCase<TimestampType, int64_t, Date32Type, int32_t>(\n+      timestamp(TimeUnit::MILLI), v_milli, is_valid, date32(), v_day, options);\n+  CheckCase<TimestampType, int64_t, Date32Type, int32_t>(\n+      timestamp(TimeUnit::SECOND), v_second, is_valid, date32(), v_day, options);\n+\n+  // Disallow truncate, failures\n+  vector<int64_t> v_nano_fail = {946684800000000001, 946771200000000001, 0};\n+  vector<int64_t> v_micro_fail = {946684800000001, 946771200000001, 0};\n+  vector<int64_t> v_milli_fail = {946684800001, 946771200001, 0};\n+  vector<int64_t> v_second_fail = {946684801, 946771201, 0};\n+\n+  options.allow_time_truncate = false;\n+  CheckFails<TimestampType>(timestamp(TimeUnit::NANO), v_nano_fail, is_valid, date64(),\n+                            options);\n+  CheckFails<TimestampType>(timestamp(TimeUnit::MICRO), v_micro_fail, is_valid, date64(),\n+                            options);\n+  CheckFails<TimestampType>(timestamp(TimeUnit::MILLI), v_milli_fail, is_valid, date64(),\n+                            options);\n+  CheckFails<TimestampType>(timestamp(TimeUnit::SECOND), v_second_fail, is_valid,\n+                            date64(), options);\n+\n+  CheckFails<TimestampType>(timestamp(TimeUnit::NANO), v_nano_fail, is_valid, date32(),\n+                            options);\n+  CheckFails<TimestampType>(timestamp(TimeUnit::MICRO), v_micro_fail, is_valid, date32(),\n+                            options);\n+  CheckFails<TimestampType>(timestamp(TimeUnit::MILLI), v_milli_fail, is_valid, date32(),\n+                            options);\n+  CheckFails<TimestampType>(timestamp(TimeUnit::SECOND), v_second_fail, is_valid,\n+                            date32(), options);\n+\n+  // Make sure that nulls are excluded from the truncation checks\n+  vector<int64_t> v_second_nofail = {946684800, 946771200, 1};\n+  CheckCase<TimestampType, int64_t, Date64Type, int64_t>(\n+      timestamp(TimeUnit::SECOND), v_second_nofail, is_valid, date64(), v_milli, options);\n+  CheckCase<TimestampType, int64_t, Date32Type, int32_t>(\n+      timestamp(TimeUnit::SECOND), v_second_nofail, is_valid, date32(), v_day, options);\n+}\n+\n TEST_F(TestCast, TimeToTime) {\n   CastOptions options;\n \ndiff --git a/cpp/src/arrow/python/builtin_convert.cc b/cpp/src/arrow/python/builtin_convert.cc\nindex d52627ebf..0e775a0fb 100644\n--- a/cpp/src/arrow/python/builtin_convert.cc\n+++ b/cpp/src/arrow/python/builtin_convert.cc\n@@ -519,7 +519,26 @@ class UInt64Converter : public TypedConverterVisitor<UInt64Builder, UInt64Conver\n   }\n };\n \n-class DateConverter : public TypedConverterVisitor<Date64Builder, DateConverter> {\n+class Date32Converter : public TypedConverterVisitor<Date32Builder, Date32Converter> {\n+ public:\n+  inline Status AppendItem(const OwnedRef& item) {\n+    int32_t t;\n+    if (PyDate_Check(item.obj())) {\n+      auto pydate = reinterpret_cast<PyDateTime_Date*>(item.obj());\n+      t = static_cast<int32_t>(PyDate_to_s(pydate));\n+    } else {\n+      int64_t casted_val = static_cast<int64_t>(PyLong_AsLongLong(item.obj()));\n+      RETURN_IF_PYERROR();\n+      if (casted_val > std::numeric_limits<int32_t>::max()) {\n+        return Status::Invalid(\"Integer as date32 larger than INT32_MAX\");\n+      }\n+      t = static_cast<int32_t>(casted_val);\n+    }\n+    return typed_builder_->Append(t);\n+  }\n+};\n+\n+class Date64Converter : public TypedConverterVisitor<Date64Builder, Date64Converter> {\n  public:\n   inline Status AppendItem(const OwnedRef& item) {\n     int64_t t;\n@@ -535,7 +554,7 @@ class DateConverter : public TypedConverterVisitor<Date64Builder, DateConverter>\n };\n \n class TimestampConverter\n-    : public TypedConverterVisitor<Date64Builder, TimestampConverter> {\n+    : public TypedConverterVisitor<TimestampBuilder, TimestampConverter> {\n  public:\n   explicit TimestampConverter(TimeUnit::type unit) : unit_(unit) {}\n \n@@ -717,8 +736,10 @@ std::shared_ptr<SeqConverter> GetConverter(const std::shared_ptr<DataType>& type\n       return std::make_shared<UInt32Converter>();\n     case Type::UINT64:\n       return std::make_shared<UInt64Converter>();\n+    case Type::DATE32:\n+      return std::make_shared<Date32Converter>();\n     case Type::DATE64:\n-      return std::make_shared<DateConverter>();\n+      return std::make_shared<Date64Converter>();\n     case Type::TIMESTAMP:\n       return std::make_shared<TimestampConverter>(\n           static_cast<const TimestampType&>(*type).unit());\ndiff --git a/cpp/src/arrow/python/numpy_to_arrow.cc b/cpp/src/arrow/python/numpy_to_arrow.cc\nindex ead3a0481..c5aff2e4f 100644\n--- a/cpp/src/arrow/python/numpy_to_arrow.cc\n+++ b/cpp/src/arrow/python/numpy_to_arrow.cc\n@@ -260,6 +260,7 @@ class NumPyConverter {\n       : pool_(pool),\n         type_(type),\n         arr_(reinterpret_cast<PyArrayObject*>(ao)),\n+        dtype_(PyArray_DESCR(arr_)),\n         mask_(nullptr),\n         use_pandas_null_sentinels_(use_pandas_null_sentinels) {\n     if (mo != nullptr && mo != Py_None) {\n@@ -431,6 +432,7 @@ class NumPyConverter {\n   MemoryPool* pool_;\n   std::shared_ptr<DataType> type_;\n   PyArrayObject* arr_;\n+  PyArray_Descr* dtype_;\n   PyArrayObject* mask_;\n   int64_t length_;\n   int64_t stride_;\n@@ -450,7 +452,7 @@ Status NumPyConverter::Convert() {\n     return Status::Invalid(\"only handle 1-dimensional arrays\");\n   }\n \n-  if (PyArray_DESCR(arr_)->type_num == NPY_OBJECT) {\n+  if (dtype_->type_num == NPY_OBJECT) {\n     return ConvertObjects();\n   }\n \n@@ -462,33 +464,12 @@ Status NumPyConverter::Convert() {\n   return VisitTypeInline(*type_, this);\n }\n \n-template <typename T, typename T2>\n-void CopyStrided(T* input_data, int64_t length, int64_t stride, T2* output_data) {\n-  // Passing input_data as non-const is a concession to PyObject*\n-  int64_t j = 0;\n-  for (int64_t i = 0; i < length; ++i) {\n-    output_data[i] = static_cast<T2>(input_data[j]);\n-    j += stride;\n-  }\n-}\n-\n-template <>\n-void CopyStrided<PyObject*, PyObject*>(PyObject** input_data, int64_t length,\n-                                       int64_t stride, PyObject** output_data) {\n-  int64_t j = 0;\n-  for (int64_t i = 0; i < length; ++i) {\n-    output_data[i] = input_data[j];\n-    if (output_data[i] != nullptr) {\n-      Py_INCREF(output_data[i]);\n-    }\n-    j += stride;\n-  }\n-}\n+namespace {\n \n-static Status CastBuffer(const std::shared_ptr<Buffer>& input, const int64_t length,\n-                         const std::shared_ptr<DataType>& in_type,\n-                         const std::shared_ptr<DataType>& out_type, MemoryPool* pool,\n-                         std::shared_ptr<Buffer>* out) {\n+Status CastBuffer(const std::shared_ptr<Buffer>& input, const int64_t length,\n+                  const std::shared_ptr<DataType>& in_type,\n+                  const std::shared_ptr<DataType>& out_type, MemoryPool* pool,\n+                  std::shared_ptr<Buffer>* out) {\n   // Must cast\n   std::vector<std::shared_ptr<Buffer>> buffers = {nullptr, input};\n   auto tmp_data = std::make_shared<ArrayData>(in_type, length, buffers, 0);\n@@ -499,6 +480,7 @@ static Status CastBuffer(const std::shared_ptr<Buffer>& input, const int64_t len\n   compute::FunctionContext context(pool);\n   compute::CastOptions cast_options;\n   cast_options.allow_int_overflow = false;\n+  cast_options.allow_time_truncate = false;\n \n   RETURN_NOT_OK(\n       compute::Cast(&context, *tmp_array, out_type, cast_options, &casted_array));\n@@ -506,29 +488,47 @@ static Status CastBuffer(const std::shared_ptr<Buffer>& input, const int64_t len\n   return Status::OK();\n }\n \n+template <typename T, typename T2>\n+void CopyStrided(T* input_data, int64_t length, int64_t stride, T2* output_data) {\n+  // Passing input_data as non-const is a concession to PyObject*\n+  int64_t j = 0;\n+  for (int64_t i = 0; i < length; ++i) {\n+    output_data[i] = static_cast<T2>(input_data[j]);\n+    j += stride;\n+  }\n+}\n+\n template <typename ArrowType>\n-inline Status NumPyConverter::ConvertData(std::shared_ptr<Buffer>* data) {\n+Status CopyStridedArray(PyArrayObject* arr, const int64_t length, MemoryPool* pool,\n+                        std::shared_ptr<Buffer>* out) {\n   using traits = internal::arrow_traits<ArrowType::type_id>;\n   using T = typename traits::T;\n \n+  // Strided, must copy into new contiguous memory\n+  const int64_t stride = PyArray_STRIDES(arr)[0];\n+  const int64_t stride_elements = stride / sizeof(T);\n+\n+  auto new_buffer = std::make_shared<PoolBuffer>(pool);\n+  RETURN_NOT_OK(new_buffer->Resize(sizeof(T) * length));\n+  CopyStrided(reinterpret_cast<T*>(PyArray_DATA(arr)), length, stride_elements,\n+              reinterpret_cast<T*>(new_buffer->mutable_data()));\n+  *out = new_buffer;\n+  return Status::OK();\n+}\n+\n+}  // namespace\n+\n+template <typename ArrowType>\n+inline Status NumPyConverter::ConvertData(std::shared_ptr<Buffer>* data) {\n   if (is_strided()) {\n-    // Strided, must copy into new contiguous memory\n-    const int64_t stride = PyArray_STRIDES(arr_)[0];\n-    const int64_t stride_elements = stride / sizeof(T);\n-\n-    auto new_buffer = std::make_shared<PoolBuffer>(pool_);\n-    RETURN_NOT_OK(new_buffer->Resize(sizeof(T) * length_));\n-    CopyStrided(reinterpret_cast<T*>(PyArray_DATA(arr_)), length_, stride_elements,\n-                reinterpret_cast<T*>(new_buffer->mutable_data()));\n-    *data = new_buffer;\n+    RETURN_NOT_OK(CopyStridedArray<ArrowType>(arr_, length_, pool_, data));\n   } else {\n     // Can zero-copy\n     *data = std::make_shared<NumPyBuffer>(reinterpret_cast<PyObject*>(arr_));\n   }\n \n   std::shared_ptr<DataType> input_type;\n-  RETURN_NOT_OK(\n-      NumPyDtypeToArrow(reinterpret_cast<PyObject*>(PyArray_DESCR(arr_)), &input_type));\n+  RETURN_NOT_OK(NumPyDtypeToArrow(reinterpret_cast<PyObject*>(dtype_), &input_type));\n \n   if (!input_type->Equals(*type_)) {\n     RETURN_NOT_OK(CastBuffer(*data, length_, input_type, type_, pool_, data));\n@@ -538,45 +538,6 @@ inline Status NumPyConverter::ConvertData(std::shared_ptr<Buffer>* data) {\n }\n \n template <>\n-inline Status NumPyConverter::ConvertData<Date32Type>(std::shared_ptr<Buffer>* data) {\n-  // Handle LONGLONG->INT64 and other fun things\n-  int type_num_compat = cast_npy_type_compat(PyArray_DESCR(arr_)->type_num);\n-  int type_size = NumPyTypeSize(type_num_compat);\n-\n-  if (type_size == 4) {\n-    // Source and target are INT32, so can refer to the main implementation.\n-    return ConvertData<Int32Type>(data);\n-  } else if (type_size == 8) {\n-    // We need to scale down from int64 to int32\n-    auto new_buffer = std::make_shared<PoolBuffer>(pool_);\n-    RETURN_NOT_OK(new_buffer->Resize(sizeof(int32_t) * length_));\n-\n-    auto input = reinterpret_cast<const int64_t*>(PyArray_DATA(arr_));\n-    auto output = reinterpret_cast<int32_t*>(new_buffer->mutable_data());\n-\n-    if (is_strided()) {\n-      // Strided, must copy into new contiguous memory\n-      const int64_t stride = PyArray_STRIDES(arr_)[0];\n-      const int64_t stride_elements = stride / sizeof(int64_t);\n-      CopyStrided(input, length_, stride_elements, output);\n-    } else {\n-      // TODO(wesm): int32 overflow checks\n-      for (int64_t i = 0; i < length_; ++i) {\n-        *output++ = static_cast<int32_t>(*input++);\n-      }\n-    }\n-    *data = new_buffer;\n-  } else {\n-    std::stringstream ss;\n-    ss << \"Cannot convert NumPy array of element size \";\n-    ss << type_size << \" to a Date32 array\";\n-    return Status::NotImplemented(ss.str());\n-  }\n-\n-  return Status::OK();\n-}\n-\n-template <>\n inline Status NumPyConverter::ConvertData<BooleanType>(std::shared_ptr<Buffer>* data) {\n   int64_t nbytes = BitUtil::BytesForBits(length_);\n   auto buffer = std::make_shared<PoolBuffer>(pool_);\n@@ -597,6 +558,42 @@ inline Status NumPyConverter::ConvertData<BooleanType>(std::shared_ptr<Buffer>*\n   return Status::OK();\n }\n \n+template <>\n+inline Status NumPyConverter::ConvertData<Date32Type>(std::shared_ptr<Buffer>* data) {\n+  if (is_strided()) {\n+    RETURN_NOT_OK(CopyStridedArray<Date32Type>(arr_, length_, pool_, data));\n+  } else {\n+    // Can zero-copy\n+    *data = std::make_shared<NumPyBuffer>(reinterpret_cast<PyObject*>(arr_));\n+  }\n+\n+  // If we have inbound datetime64[D] data, this needs to be downcasted\n+  // separately here from int64_t to int32_t, because this data is not\n+  // supported in compute::Cast\n+  auto date_dtype = reinterpret_cast<PyArray_DatetimeDTypeMetaData*>(dtype_->c_metadata);\n+  if (dtype_->type_num == NPY_DATETIME && date_dtype->meta.base == NPY_FR_D) {\n+    auto date32_buffer = std::make_shared<PoolBuffer>(pool_);\n+    RETURN_NOT_OK(date32_buffer->Resize(sizeof(int32_t) * length_));\n+\n+    auto datetime64_values = reinterpret_cast<const int64_t*>((*data)->data());\n+    auto date32_values = reinterpret_cast<int32_t*>(date32_buffer->mutable_data());\n+    for (int64_t i = 0; i < length_; ++i) {\n+      // TODO(wesm): How pedantic do we really want to be about checking for int32\n+      // overflow here?\n+      *date32_values++ = static_cast<int32_t>(*datetime64_values++);\n+    }\n+    *data = date32_buffer;\n+  } else {\n+    std::shared_ptr<DataType> input_type;\n+    RETURN_NOT_OK(NumPyDtypeToArrow(reinterpret_cast<PyObject*>(dtype_), &input_type));\n+    if (!input_type->Equals(*type_)) {\n+      RETURN_NOT_OK(CastBuffer(*data, length_, input_type, type_, pool_, data));\n+    }\n+  }\n+\n+  return Status::OK();\n+}\n+\n template <typename T>\n struct UnboxDate {};\n \ndiff --git a/cpp/src/arrow/python/util/datetime.h b/cpp/src/arrow/python/util/datetime.h\nindex c110bc64a..e76c2e0db 100644\n--- a/cpp/src/arrow/python/util/datetime.h\n+++ b/cpp/src/arrow/python/util/datetime.h\n@@ -235,6 +235,11 @@ static inline Status PyDateTime_from_int(int64_t val, const TimeUnit::type unit,\n   return Status::OK();\n }\n \n+static inline int64_t PyDate_to_s(PyDateTime_Date* pydate) {\n+  return get_days_from_date(PyDateTime_GET_YEAR(pydate), PyDateTime_GET_MONTH(pydate),\n+                            PyDateTime_GET_DAY(pydate));\n+}\n+\n static inline int64_t PyDate_to_ms(PyDateTime_Date* pydate) {\n   int64_t total_seconds = 0;\n   total_seconds += PyDateTime_DATE_GET_SECOND(pydate);\ndiff --git a/python/pyarrow/tests/test_convert_builtin.py b/python/pyarrow/tests/test_convert_builtin.py\nindex 414266ddb..c7a0d49b4 100644\n--- a/python/pyarrow/tests/test_convert_builtin.py\n+++ b/python/pyarrow/tests/test_convert_builtin.py\n@@ -178,6 +178,25 @@ def test_date(self):\n         assert arr[2].as_py() == datetime.date(1970, 1, 1)\n         assert arr[3].as_py() == datetime.date(2040, 2, 26)\n \n+    def test_date32(self):\n+        data = [datetime.date(2000, 1, 1), None]\n+        arr = pa.array(data, type=pa.date32())\n+\n+        data2 = [10957, None]\n+        arr2 = pa.array(data2, type=pa.date32())\n+\n+        for x in [arr, arr2]:\n+            assert len(x) == 2\n+            assert x.type == pa.date32()\n+            assert x.null_count == 1\n+            assert x[0].as_py() == datetime.date(2000, 1, 1)\n+            assert x[1] is pa.NA\n+\n+        # Overflow\n+        data3 = [2**32, None]\n+        with pytest.raises(pa.ArrowException):\n+            pa.array(data3, type=pa.date32())\n+\n     def test_timestamp(self):\n         data = [\n             datetime.datetime(2007, 7, 13, 1, 23, 34, 123456),\ndiff --git a/python/pyarrow/tests/test_convert_pandas.py b/python/pyarrow/tests/test_convert_pandas.py\nindex 8360dae54..e3f77c944 100644\n--- a/python/pyarrow/tests/test_convert_pandas.py\n+++ b/python/pyarrow/tests/test_convert_pandas.py\n@@ -522,6 +522,16 @@ def test_timestamps_with_timezone(self):\n \n         self._check_pandas_roundtrip(df)\n \n+    def test_datetime64_to_date32(self):\n+        # ARROW-1718\n+        arr = pa.array([date(2017, 10, 23), None])\n+        c = pa.Column.from_array(\"d\", arr)\n+        s = c.to_pandas()\n+\n+        arr2 = pa.Array.from_pandas(s, type=pa.date32())\n+\n+        assert arr2.equals(arr.cast('date32'))\n+\n     def test_date_infer(self):\n         df = pd.DataFrame({\n             'date': [date(2000, 1, 1),\n@@ -981,6 +991,7 @@ def test_numpy_datetime64_columns(self):\n                 dtype='datetime64[s]')\n         self._check_array_from_pandas_roundtrip(datetime64_s)\n \n+    def test_numpy_datetime64_day_unit(self):\n         datetime64_d = np.array([\n                 '2007-07-13',\n                 None,\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-30T07:50:51.321+0000",
                    "updated": "2017-10-30T07:50:51.321+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111559/comment/16224469",
                    "id": "16224469",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 1258\n[https://github.com/apache/arrow/pull/1258]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2017-10-30T07:51:11.607+0000",
                    "updated": "2017-10-30T07:51:11.607+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13111559/comment/16224980",
                    "id": "16224980",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on a change in pull request #1258: ARROW-1718: [C++/Python] Implement casts from timestamp to date32/64, properly handle NumPy datetime64[D] -> date32\nURL: https://github.com/apache/arrow/pull/1258#discussion_r147705474\n \n \n\n ##########\n File path: .travis.yml\n ##########\n @@ -51,12 +51,12 @@ matrix:\n     os: linux\n     group: deprecated\n     before_script:\n-    - export CC=\"gcc-4.9\"\n \n Review comment:\n   :+1:\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-10-30T13:45:44.439+0000",
                    "updated": "2017-10-30T13:45:44.439+0000"
                }
            ],
            "maxResults": 11,
            "total": 11,
            "startAt": 0
        },
        "customfield_12311820": "0|i3lm7b:",
        "customfield_12314139": null
    }
}