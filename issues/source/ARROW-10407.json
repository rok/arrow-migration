{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13337504",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337504",
    "key": "ARROW-10407",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=beiz",
            "name": "beiz",
            "key": "beiz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34050",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34050",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34050",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34050"
            },
            "displayName": "Bei Zhang",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=beiz",
            "name": "beiz",
            "key": "beiz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34050",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34050",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34050",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34050"
            },
            "displayName": "Bei Zhang",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=beiz",
            "name": "beiz",
            "key": "beiz",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34050",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34050",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34050",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34050"
            },
            "displayName": "Bei Zhang",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 24600,
            "total": 24600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 24600,
            "total": 24600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10407/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 41,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337504/worklog/505386",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8542:\nURL: https://github.com/apache/arrow/pull/8542#issuecomment-717494154\n\n\n   https://issues.apache.org/jira/browse/ARROW-10407\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-27T19:48:47.518+0000",
                    "updated": "2020-10-27T19:48:47.518+0000",
                    "started": "2020-10-27T19:48:47.518+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "505386",
                    "issueId": "13337504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337504/worklog/505414",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "MingyuZhong commented on a change in pull request #8542:\nURL: https://github.com/apache/arrow/pull/8542#discussion_r513015463\n\n\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -490,49 +501,59 @@ static void FixDivisionSigns(BasicDecimal128* result, BasicDecimal128* remainder\n   }\n }\n \n-/// \\brief Build a BasicDecimal128 from a list of ints.\n+/// \\brief Build a big endian array of uint64_t from a list of uint32_t.\n+template <size_t N>\n+static DecimalStatus BuildFromArray(std::array<uint64_t, N>* result_array,\n+                                    uint32_t* array, int64_t length) {\n+  for (int64_t i = length - 2 * N - 1; i >= 0; i--) {\n+    if (array[i] != 0) {\n+      return DecimalStatus::kOverflow;\n+    }\n+  }\n+  int64_t next_index = length - 1;\n+  for (int64_t i = N - 1; i >= 0; i--) {\n+    uint64_t lower_bits = (next_index < 0) ? 0 : array[next_index--];\n+    (*result_array)[i] =\n+        (next_index < 0)\n+            ? lower_bits\n+            : ((static_cast<uint64_t>(array[next_index--]) << 32) + lower_bits);\n+  }\n+  return DecimalStatus::kSuccess;\n+}\n+\n+/// \\brief Build a BasicDecimal128 from a list of uint32_t.\n static DecimalStatus BuildFromArray(BasicDecimal128* value, uint32_t* array,\n                                     int64_t length) {\n-  switch (length) {\n-    case 0:\n-      *value = {static_cast<int64_t>(0)};\n-      break;\n-    case 1:\n-      *value = {static_cast<int64_t>(array[0])};\n-      break;\n-    case 2:\n-      *value = {static_cast<int64_t>(0),\n-                (static_cast<uint64_t>(array[0]) << 32) + array[1]};\n-      break;\n-    case 3:\n-      *value = {static_cast<int64_t>(array[0]),\n-                (static_cast<uint64_t>(array[1]) << 32) + array[2]};\n-      break;\n-    case 4:\n-      *value = {(static_cast<int64_t>(array[0]) << 32) + array[1],\n-                (static_cast<uint64_t>(array[2]) << 32) + array[3]};\n-      break;\n-    case 5:\n-      if (array[0] != 0) {\n-        return DecimalStatus::kOverflow;\n-      }\n-      *value = {(static_cast<int64_t>(array[1]) << 32) + array[2],\n-                (static_cast<uint64_t>(array[3]) << 32) + array[4]};\n-      break;\n-    default:\n-      return DecimalStatus::kOverflow;\n+  std::array<uint64_t, 2> result_array;\n+  auto status = BuildFromArray(&result_array, array, length);\n+  if (status != DecimalStatus::kSuccess) {\n+    return status;\n   }\n+  *value = {static_cast<int64_t>(result_array[0]), result_array[1]};\n+  return DecimalStatus::kSuccess;\n+}\n \n+/// \\brief Build a BasicDecimal256 from a list of uint32_t.\n+static DecimalStatus BuildFromArray(BasicDecimal256* value, uint32_t* array,\n+                                    int64_t length) {\n+  std::array<uint64_t, 4> result_array;\n+  auto status = BuildFromArray(&result_array, array, length);\n+  if (status != DecimalStatus::kSuccess) {\n+    return status;\n+  }\n+  std::reverse(result_array.begin(), result_array.end());\n\nReview comment:\n       Cna you make BuildFromArray take little endian array so you don't need to reverse it?\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -549,24 +570,28 @@ static DecimalStatus SingleDivide(const uint32_t* dividend, int64_t dividend_len\n   return DecimalStatus::kSuccess;\n }\n \n-DecimalStatus BasicDecimal128::Divide(const BasicDecimal128& divisor,\n-                                      BasicDecimal128* result,\n-                                      BasicDecimal128* remainder) const {\n+/// \\brief Do a division where the divisor fits into a single 32 bit value.\n+template <class DecimalClass>\n+static DecimalStatus DecimalDivide(const DecimalClass& dividend,\n+                                   const DecimalClass& divisor, DecimalClass* result,\n+                                   DecimalClass* remainder) {\n+  static int64_t kDecimalArrayLength =\n+      std::is_same<DecimalClass, BasicDecimal128>::value ? 4 : 8;\n\nReview comment:\n       Use sizeof(DecimalClass) / sizeof(uint64_t)?\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -549,24 +570,28 @@ static DecimalStatus SingleDivide(const uint32_t* dividend, int64_t dividend_len\n   return DecimalStatus::kSuccess;\n }\n \n-DecimalStatus BasicDecimal128::Divide(const BasicDecimal128& divisor,\n-                                      BasicDecimal128* result,\n-                                      BasicDecimal128* remainder) const {\n+/// \\brief Do a division where the divisor fits into a single 32 bit value.\n+template <class DecimalClass>\n+static DecimalStatus DecimalDivide(const DecimalClass& dividend,\n+                                   const DecimalClass& divisor, DecimalClass* result,\n+                                   DecimalClass* remainder) {\n+  static int64_t kDecimalArrayLength =\n\nReview comment:\n       Please use constexpr\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -404,51 +432,33 @@ BasicDecimal128& BasicDecimal128::operator*=(const BasicDecimal128& right) {\n /// \\result the output length of the array\n static int64_t FillInArray(const BasicDecimal128& value, uint32_t* array,\n                            bool& was_negative) {\n-  uint64_t high;\n-  uint64_t low;\n-  const int64_t highbits = value.high_bits();\n-  const uint64_t lowbits = value.low_bits();\n-\n-  if (highbits < 0) {\n-    low = ~lowbits + 1;\n-    high = static_cast<uint64_t>(~highbits);\n-    if (low == 0) {\n-      ++high;\n-    }\n-    was_negative = true;\n-  } else {\n-    low = lowbits;\n-    high = static_cast<uint64_t>(highbits);\n-    was_negative = false;\n-  }\n-\n-  if (high != 0) {\n-    if (high > std::numeric_limits<uint32_t>::max()) {\n-      array[0] = static_cast<uint32_t>(high >> 32);\n-      array[1] = static_cast<uint32_t>(high);\n-      array[2] = static_cast<uint32_t>(low >> 32);\n-      array[3] = static_cast<uint32_t>(low);\n-      return 4;\n-    }\n-\n-    array[0] = static_cast<uint32_t>(high);\n-    array[1] = static_cast<uint32_t>(low >> 32);\n-    array[2] = static_cast<uint32_t>(low);\n-    return 3;\n-  }\n-\n-  if (low >= std::numeric_limits<uint32_t>::max()) {\n-    array[0] = static_cast<uint32_t>(low >> 32);\n-    array[1] = static_cast<uint32_t>(low);\n-    return 2;\n-  }\n+  BasicDecimal128 abs_value = BasicDecimal128::Abs(value);\n+  was_negative = value.Sign() < 0;\n\nReview comment:\n       value.high_bits() < 0?\n\n##########\nFile path: cpp/src/arrow/util/decimal_benchmark.cc\n##########\n@@ -158,6 +158,7 @@ static void BinaryMathOp256(benchmark::State& state) {  // NOLINT non-const refe\n   for (auto _ : state) {\n     for (int x = 0; x < kValueSize; x += 5) {\n       benchmark::DoNotOptimize(v1[x + 2] * v2[x + 2]);\n+      benchmark::DoNotOptimize(v1[x + 3] / v2[x + 3]);\n\nReview comment:\n       Did you verify that your change didn't make Decimal128 slower? What's the performance metrics for Decimal256 before and after your change (please add it to the PR description)?\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -395,6 +395,34 @@ BasicDecimal128& BasicDecimal128::operator*=(const BasicDecimal128& right) {\n   return *this;\n }\n \n+/// Expands the given big endian array of uint64_t into an array of uint32_t.\n+/// The value of input array is expected to be positive. The result_array will\n+/// remove leading zeros from the input array.\n+/// \\param value_array an big endian array to represent the value\n+/// \\param result_array an array of length N*2 to set with the value\n+/// \\result the output length of the array\n+template <size_t N>\n+static int64_t FillInArray(std::array<uint64_t, N>& value_array, uint32_t* result_array) {\n+  int64_t next_index = 0;\n+  for (size_t i = 0; i < N; i++) {\n+    if (value_array[i] == 0) {\n+      if (next_index != 0) {\n+        result_array[next_index++] = 0;\n+        result_array[next_index++] = 0;\n+      }\n+    } else if (value_array[i] <= std::numeric_limits<uint32_t>::max()) {\n\nReview comment:\n       Why do we need this special case?\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -479,7 +489,8 @@ static void ShiftArrayRight(uint32_t* array, int64_t length, int64_t bits) {\n \n /// \\brief Fix the signs of the result and remainder at the end of the division based on\n /// the signs of the dividend and divisor.\n-static void FixDivisionSigns(BasicDecimal128* result, BasicDecimal128* remainder,\n+template <class DecimalClass>\n+static void FixDivisionSigns(DecimalClass* result, DecimalClass* remainder,\n\nReview comment:\n       I think this method should be declared as inline.\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -395,6 +395,34 @@ BasicDecimal128& BasicDecimal128::operator*=(const BasicDecimal128& right) {\n   return *this;\n }\n \n+/// Expands the given big endian array of uint64_t into an array of uint32_t.\n+/// The value of input array is expected to be positive. The result_array will\n+/// remove leading zeros from the input array.\n+/// \\param value_array an big endian array to represent the value\n+/// \\param result_array an array of length N*2 to set with the value\n+/// \\result the output length of the array\n+template <size_t N>\n+static int64_t FillInArray(std::array<uint64_t, N>& value_array, uint32_t* result_array) {\n+  int64_t next_index = 0;\n+  for (size_t i = 0; i < N; i++) {\n+    if (value_array[i] == 0) {\n\nReview comment:\n       For efficiency, once we find a non-zero element, the subsequent iterations don't need to check zero again. So the following would be better:\r\n   ```\r\n   for (size_t i = 0; i < N; i++) {\r\n     if (value_array[i] != 0) {\r\n       for (size_t j = i; j < N; j++ ) {\r\n         ...\r\n       }\r\n       break;\r\n     }\r\n   }\r\n   ```\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-10-27T21:00:51.696+0000",
                    "updated": "2020-10-27T21:00:51.696+0000",
                    "started": "2020-10-27T21:00:51.696+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "505414",
                    "issueId": "13337504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337504/worklog/506749",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Bei-z commented on a change in pull request #8542:\nURL: https://github.com/apache/arrow/pull/8542#discussion_r516251296\n\n\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -395,6 +395,34 @@ BasicDecimal128& BasicDecimal128::operator*=(const BasicDecimal128& right) {\n   return *this;\n }\n \n+/// Expands the given big endian array of uint64_t into an array of uint32_t.\n+/// The value of input array is expected to be positive. The result_array will\n+/// remove leading zeros from the input array.\n+/// \\param value_array an big endian array to represent the value\n+/// \\param result_array an array of length N*2 to set with the value\n+/// \\result the output length of the array\n+template <size_t N>\n+static int64_t FillInArray(std::array<uint64_t, N>& value_array, uint32_t* result_array) {\n+  int64_t next_index = 0;\n+  for (size_t i = 0; i < N; i++) {\n+    if (value_array[i] == 0) {\n\nReview comment:\n       Changed accordingly, thanks!\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -549,24 +570,28 @@ static DecimalStatus SingleDivide(const uint32_t* dividend, int64_t dividend_len\n   return DecimalStatus::kSuccess;\n }\n \n-DecimalStatus BasicDecimal128::Divide(const BasicDecimal128& divisor,\n-                                      BasicDecimal128* result,\n-                                      BasicDecimal128* remainder) const {\n+/// \\brief Do a division where the divisor fits into a single 32 bit value.\n+template <class DecimalClass>\n+static DecimalStatus DecimalDivide(const DecimalClass& dividend,\n+                                   const DecimalClass& divisor, DecimalClass* result,\n+                                   DecimalClass* remainder) {\n+  static int64_t kDecimalArrayLength =\n+      std::is_same<DecimalClass, BasicDecimal128>::value ? 4 : 8;\n\nReview comment:\n       Done, thx!\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -490,49 +501,59 @@ static void FixDivisionSigns(BasicDecimal128* result, BasicDecimal128* remainder\n   }\n }\n \n-/// \\brief Build a BasicDecimal128 from a list of ints.\n+/// \\brief Build a big endian array of uint64_t from a list of uint32_t.\n+template <size_t N>\n+static DecimalStatus BuildFromArray(std::array<uint64_t, N>* result_array,\n+                                    uint32_t* array, int64_t length) {\n+  for (int64_t i = length - 2 * N - 1; i >= 0; i--) {\n+    if (array[i] != 0) {\n+      return DecimalStatus::kOverflow;\n+    }\n+  }\n+  int64_t next_index = length - 1;\n+  for (int64_t i = N - 1; i >= 0; i--) {\n+    uint64_t lower_bits = (next_index < 0) ? 0 : array[next_index--];\n+    (*result_array)[i] =\n+        (next_index < 0)\n+            ? lower_bits\n+            : ((static_cast<uint64_t>(array[next_index--]) << 32) + lower_bits);\n+  }\n+  return DecimalStatus::kSuccess;\n+}\n+\n+/// \\brief Build a BasicDecimal128 from a list of uint32_t.\n static DecimalStatus BuildFromArray(BasicDecimal128* value, uint32_t* array,\n                                     int64_t length) {\n-  switch (length) {\n-    case 0:\n-      *value = {static_cast<int64_t>(0)};\n-      break;\n-    case 1:\n-      *value = {static_cast<int64_t>(array[0])};\n-      break;\n-    case 2:\n-      *value = {static_cast<int64_t>(0),\n-                (static_cast<uint64_t>(array[0]) << 32) + array[1]};\n-      break;\n-    case 3:\n-      *value = {static_cast<int64_t>(array[0]),\n-                (static_cast<uint64_t>(array[1]) << 32) + array[2]};\n-      break;\n-    case 4:\n-      *value = {(static_cast<int64_t>(array[0]) << 32) + array[1],\n-                (static_cast<uint64_t>(array[2]) << 32) + array[3]};\n-      break;\n-    case 5:\n-      if (array[0] != 0) {\n-        return DecimalStatus::kOverflow;\n-      }\n-      *value = {(static_cast<int64_t>(array[1]) << 32) + array[2],\n-                (static_cast<uint64_t>(array[3]) << 32) + array[4]};\n-      break;\n-    default:\n-      return DecimalStatus::kOverflow;\n+  std::array<uint64_t, 2> result_array;\n+  auto status = BuildFromArray(&result_array, array, length);\n+  if (status != DecimalStatus::kSuccess) {\n+    return status;\n   }\n+  *value = {static_cast<int64_t>(result_array[0]), result_array[1]};\n+  return DecimalStatus::kSuccess;\n+}\n \n+/// \\brief Build a BasicDecimal256 from a list of uint32_t.\n+static DecimalStatus BuildFromArray(BasicDecimal256* value, uint32_t* array,\n+                                    int64_t length) {\n+  std::array<uint64_t, 4> result_array;\n+  auto status = BuildFromArray(&result_array, array, length);\n+  if (status != DecimalStatus::kSuccess) {\n+    return status;\n+  }\n+  std::reverse(result_array.begin(), result_array.end());\n\nReview comment:\n       done. Thank you!\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -395,6 +395,34 @@ BasicDecimal128& BasicDecimal128::operator*=(const BasicDecimal128& right) {\n   return *this;\n }\n \n+/// Expands the given big endian array of uint64_t into an array of uint32_t.\n+/// The value of input array is expected to be positive. The result_array will\n+/// remove leading zeros from the input array.\n+/// \\param value_array an big endian array to represent the value\n+/// \\param result_array an array of length N*2 to set with the value\n+/// \\result the output length of the array\n+template <size_t N>\n+static int64_t FillInArray(std::array<uint64_t, N>& value_array, uint32_t* result_array) {\n+  int64_t next_index = 0;\n+  for (size_t i = 0; i < N; i++) {\n+    if (value_array[i] == 0) {\n+      if (next_index != 0) {\n+        result_array[next_index++] = 0;\n+        result_array[next_index++] = 0;\n+      }\n+    } else if (value_array[i] <= std::numeric_limits<uint32_t>::max()) {\n\nReview comment:\n       This special case is needed here as we want to remove the leading zero in the result array of uint32_t, so that when the first non-zero uint64_t value is less than the max of uint32_t, we assign the value to the first element of the result array; when the non-zero uint64_t value is not the first value, we reserve the next element of the result array with 0;\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -479,7 +489,8 @@ static void ShiftArrayRight(uint32_t* array, int64_t length, int64_t bits) {\n \n /// \\brief Fix the signs of the result and remainder at the end of the division based on\n /// the signs of the dividend and divisor.\n-static void FixDivisionSigns(BasicDecimal128* result, BasicDecimal128* remainder,\n+template <class DecimalClass>\n+static void FixDivisionSigns(DecimalClass* result, DecimalClass* remainder,\n\nReview comment:\n       Done. Thank you!\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -549,24 +570,28 @@ static DecimalStatus SingleDivide(const uint32_t* dividend, int64_t dividend_len\n   return DecimalStatus::kSuccess;\n }\n \n-DecimalStatus BasicDecimal128::Divide(const BasicDecimal128& divisor,\n-                                      BasicDecimal128* result,\n-                                      BasicDecimal128* remainder) const {\n+/// \\brief Do a division where the divisor fits into a single 32 bit value.\n+template <class DecimalClass>\n+static DecimalStatus DecimalDivide(const DecimalClass& dividend,\n+                                   const DecimalClass& divisor, DecimalClass* result,\n+                                   DecimalClass* remainder) {\n+  static int64_t kDecimalArrayLength =\n\nReview comment:\n       Done, thx!\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -404,51 +432,33 @@ BasicDecimal128& BasicDecimal128::operator*=(const BasicDecimal128& right) {\n /// \\result the output length of the array\n static int64_t FillInArray(const BasicDecimal128& value, uint32_t* array,\n                            bool& was_negative) {\n-  uint64_t high;\n-  uint64_t low;\n-  const int64_t highbits = value.high_bits();\n-  const uint64_t lowbits = value.low_bits();\n-\n-  if (highbits < 0) {\n-    low = ~lowbits + 1;\n-    high = static_cast<uint64_t>(~highbits);\n-    if (low == 0) {\n-      ++high;\n-    }\n-    was_negative = true;\n-  } else {\n-    low = lowbits;\n-    high = static_cast<uint64_t>(highbits);\n-    was_negative = false;\n-  }\n-\n-  if (high != 0) {\n-    if (high > std::numeric_limits<uint32_t>::max()) {\n-      array[0] = static_cast<uint32_t>(high >> 32);\n-      array[1] = static_cast<uint32_t>(high);\n-      array[2] = static_cast<uint32_t>(low >> 32);\n-      array[3] = static_cast<uint32_t>(low);\n-      return 4;\n-    }\n-\n-    array[0] = static_cast<uint32_t>(high);\n-    array[1] = static_cast<uint32_t>(low >> 32);\n-    array[2] = static_cast<uint32_t>(low);\n-    return 3;\n-  }\n-\n-  if (low >= std::numeric_limits<uint32_t>::max()) {\n-    array[0] = static_cast<uint32_t>(low >> 32);\n-    array[1] = static_cast<uint32_t>(low);\n-    return 2;\n-  }\n+  BasicDecimal128 abs_value = BasicDecimal128::Abs(value);\n+  was_negative = value.Sign() < 0;\n\nReview comment:\n       Done. Thank you!\n\n##########\nFile path: cpp/src/arrow/util/decimal_benchmark.cc\n##########\n@@ -158,6 +158,7 @@ static void BinaryMathOp256(benchmark::State& state) {  // NOLINT non-const refe\n   for (auto _ : state) {\n     for (int x = 0; x < kValueSize; x += 5) {\n       benchmark::DoNotOptimize(v1[x + 2] * v2[x + 2]);\n+      benchmark::DoNotOptimize(v1[x + 3] / v2[x + 3]);\n\nReview comment:\n       The change did make Decimal128 a little bit slower:\r\n   Benchmark result after adding BasicDecimal256 Division support:\r\n   BinaryMathOp128 164 ns 164 ns 4134767 items_per_second=61.0451M/s\r\n   BinaryMathOp256 161 ns 161 ns 4197025 items_per_second=62.2226M/s\r\n   \r\n   Benchmark result before adding BasicDecimal256 Division support:\r\n   BinaryMathOp128 153 ns 153 ns 4380604 items_per_second=65.4108M/s\r\n   BinaryMathOp256 34.5 ns 34.5 ns 19945733 items_per_second=289.557M/s\r\n   \r\n   This metrics is also added to the pr description.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-03T13:42:04.075+0000",
                    "updated": "2020-11-03T13:42:04.075+0000",
                    "started": "2020-11-03T13:42:04.075+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "506749",
                    "issueId": "13337504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337504/worklog/506980",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "MingyuZhong commented on a change in pull request #8542:\nURL: https://github.com/apache/arrow/pull/8542#discussion_r516330879\n\n\n\n##########\nFile path: cpp/src/arrow/util/decimal_benchmark.cc\n##########\n@@ -158,6 +158,7 @@ static void BinaryMathOp256(benchmark::State& state) {  // NOLINT non-const refe\n   for (auto _ : state) {\n     for (int x = 0; x < kValueSize; x += 5) {\n       benchmark::DoNotOptimize(v1[x + 2] * v2[x + 2]);\n+      benchmark::DoNotOptimize(v1[x + 3] / v2[x + 3]);\n\nReview comment:\n       Can you find the functions that are called only once (e.g., DecimalDivide), make them inline and run the benchmarks again?\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -575,8 +572,7 @@ template <class DecimalClass>\n static DecimalStatus DecimalDivide(const DecimalClass& dividend,\n                                    const DecimalClass& divisor, DecimalClass* result,\n                                    DecimalClass* remainder) {\n-  static int64_t kDecimalArrayLength =\n-      std::is_same<DecimalClass, BasicDecimal128>::value ? 4 : 8;\n+  static constexpr int64_t kDecimalArrayLength = sizeof(DecimalClass) / sizeof(uint32_t);\n\nReview comment:\n       I don't think you need \"static\" here.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-03T14:07:11.487+0000",
                    "updated": "2020-11-03T14:07:11.487+0000",
                    "started": "2020-11-03T14:07:11.486+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "506980",
                    "issueId": "13337504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337504/worklog/507281",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Bei-z commented on a change in pull request #8542:\nURL: https://github.com/apache/arrow/pull/8542#discussion_r516900167\n\n\n\n##########\nFile path: cpp/src/arrow/util/decimal_benchmark.cc\n##########\n@@ -158,6 +158,7 @@ static void BinaryMathOp256(benchmark::State& state) {  // NOLINT non-const refe\n   for (auto _ : state) {\n     for (int x = 0; x < kValueSize; x += 5) {\n       benchmark::DoNotOptimize(v1[x + 2] * v2[x + 2]);\n+      benchmark::DoNotOptimize(v1[x + 3] / v2[x + 3]);\n\nReview comment:\n       Changed DecimalDivide, ShiftArrayRight, SingleDivide to inline, but the benchmark result did not change much...\r\n   \r\n   BinaryMathOp128                164 ns          164 ns      4199726 items_per_second=60.9518M/s\r\n   BinaryMathOp256                161 ns          161 ns      4239358 items_per_second=62.0223M/s\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-03T19:18:41.493+0000",
                    "updated": "2020-11-03T19:18:41.493+0000",
                    "started": "2020-11-03T19:18:41.492+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "507281",
                    "issueId": "13337504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337504/worklog/507285",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Bei-z commented on a change in pull request #8542:\nURL: https://github.com/apache/arrow/pull/8542#discussion_r516900753\n\n\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -575,8 +572,7 @@ template <class DecimalClass>\n static DecimalStatus DecimalDivide(const DecimalClass& dividend,\n                                    const DecimalClass& divisor, DecimalClass* result,\n                                    DecimalClass* remainder) {\n-  static int64_t kDecimalArrayLength =\n-      std::is_same<DecimalClass, BasicDecimal128>::value ? 4 : 8;\n+  static constexpr int64_t kDecimalArrayLength = sizeof(DecimalClass) / sizeof(uint32_t);\n\nReview comment:\n       Changed accordingly. Thank you for pointing out!\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-03T19:19:43.581+0000",
                    "updated": "2020-11-03T19:19:43.581+0000",
                    "started": "2020-11-03T19:19:43.581+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "507285",
                    "issueId": "13337504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337504/worklog/507297",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Bei-z commented on a change in pull request #8542:\nURL: https://github.com/apache/arrow/pull/8542#discussion_r516910756\n\n\n\n##########\nFile path: cpp/src/arrow/util/decimal_benchmark.cc\n##########\n@@ -158,6 +158,7 @@ static void BinaryMathOp256(benchmark::State& state) {  // NOLINT non-const refe\n   for (auto _ : state) {\n     for (int x = 0; x < kValueSize; x += 5) {\n       benchmark::DoNotOptimize(v1[x + 2] * v2[x + 2]);\n+      benchmark::DoNotOptimize(v1[x + 3] / v2[x + 3]);\n\nReview comment:\n       After several (10+) runs, the benchmark shows mostly consistent with the following result:\r\n   BinaryMathOp128                164 ns          164 ns      4054471 items_per_second=61.0408M/s\r\n   BinaryMathOp256                162 ns          162 ns      4059481 items_per_second=61.5496M/s\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-03T19:38:20.165+0000",
                    "updated": "2020-11-03T19:38:20.165+0000",
                    "started": "2020-11-03T19:38:20.164+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "507297",
                    "issueId": "13337504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337504/worklog/507768",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Bei-z commented on a change in pull request #8542:\nURL: https://github.com/apache/arrow/pull/8542#discussion_r517611814\n\n\n\n##########\nFile path: cpp/src/arrow/util/decimal_benchmark.cc\n##########\n@@ -158,6 +158,7 @@ static void BinaryMathOp256(benchmark::State& state) {  // NOLINT non-const refe\n   for (auto _ : state) {\n     for (int x = 0; x < kValueSize; x += 5) {\n       benchmark::DoNotOptimize(v1[x + 2] * v2[x + 2]);\n+      benchmark::DoNotOptimize(v1[x + 3] / v2[x + 3]);\n\nReview comment:\n       As discussed offline, moved back the if statement in FillInArray for BasicDecimal128, the that the current benchmark result is:\r\n   BinaryMathOp128                152 ns          152 ns      4284240 items_per_second=65.6334M/s\r\n   BinaryMathOp256                163 ns          163 ns      4186744 items_per_second=61.4706M/s\r\n   \r\n   Compared with the benchmark result without this pr:\r\n   BinaryMathOp128                154 ns          154 ns      4423113 items_per_second=64.9309M/s\r\n   BinaryMathOp256               35.4 ns         35.4 ns     18341932 items_per_second=282.487M/s\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-04T20:27:56.321+0000",
                    "updated": "2020-11-04T20:27:56.321+0000",
                    "started": "2020-11-04T20:27:56.321+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "507768",
                    "issueId": "13337504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337504/worklog/507769",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Bei-z commented on a change in pull request #8542:\nURL: https://github.com/apache/arrow/pull/8542#discussion_r517611814\n\n\n\n##########\nFile path: cpp/src/arrow/util/decimal_benchmark.cc\n##########\n@@ -158,6 +158,7 @@ static void BinaryMathOp256(benchmark::State& state) {  // NOLINT non-const refe\n   for (auto _ : state) {\n     for (int x = 0; x < kValueSize; x += 5) {\n       benchmark::DoNotOptimize(v1[x + 2] * v2[x + 2]);\n+      benchmark::DoNotOptimize(v1[x + 3] / v2[x + 3]);\n\nReview comment:\n       As discussed offline, moved back the if statements in FillInArray for BasicDecimal128, the that the current benchmark result is:\r\n   BinaryMathOp128                152 ns          152 ns      4284240 items_per_second=65.6334M/s\r\n   BinaryMathOp256                163 ns          163 ns      4186744 items_per_second=61.4706M/s\r\n   \r\n   Compared with the benchmark result without this pr:\r\n   BinaryMathOp128                154 ns          154 ns      4423113 items_per_second=64.9309M/s\r\n   BinaryMathOp256               35.4 ns         35.4 ns     18341932 items_per_second=282.487M/s\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-04T20:28:09.426+0000",
                    "updated": "2020-11-04T20:28:09.426+0000",
                    "started": "2020-11-04T20:28:09.426+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "507769",
                    "issueId": "13337504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337504/worklog/507831",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "MingyuZhong commented on a change in pull request #8542:\nURL: https://github.com/apache/arrow/pull/8542#discussion_r517062023\n\n\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -404,51 +429,33 @@ BasicDecimal128& BasicDecimal128::operator*=(const BasicDecimal128& right) {\n /// \\result the output length of the array\n static int64_t FillInArray(const BasicDecimal128& value, uint32_t* array,\n                            bool& was_negative) {\n-  uint64_t high;\n-  uint64_t low;\n-  const int64_t highbits = value.high_bits();\n-  const uint64_t lowbits = value.low_bits();\n-\n-  if (highbits < 0) {\n-    low = ~lowbits + 1;\n-    high = static_cast<uint64_t>(~highbits);\n-    if (low == 0) {\n-      ++high;\n-    }\n-    was_negative = true;\n-  } else {\n-    low = lowbits;\n-    high = static_cast<uint64_t>(highbits);\n-    was_negative = false;\n-  }\n-\n-  if (high != 0) {\n-    if (high > std::numeric_limits<uint32_t>::max()) {\n-      array[0] = static_cast<uint32_t>(high >> 32);\n-      array[1] = static_cast<uint32_t>(high);\n-      array[2] = static_cast<uint32_t>(low >> 32);\n-      array[3] = static_cast<uint32_t>(low);\n-      return 4;\n-    }\n-\n-    array[0] = static_cast<uint32_t>(high);\n-    array[1] = static_cast<uint32_t>(low >> 32);\n-    array[2] = static_cast<uint32_t>(low);\n-    return 3;\n-  }\n-\n-  if (low >= std::numeric_limits<uint32_t>::max()) {\n-    array[0] = static_cast<uint32_t>(low >> 32);\n-    array[1] = static_cast<uint32_t>(low);\n-    return 2;\n-  }\n+  BasicDecimal128 abs_value = BasicDecimal128::Abs(value);\n+  was_negative = value.high_bits() < 0;\n+  std::array<uint64_t, 2> abs_big_endian_array = {\n+      static_cast<uint64_t>(abs_value.high_bits()),\n+      static_cast<uint64_t>(abs_value.low_bits())};\n+  return FillInArray(abs_big_endian_array, array);\n+}\n \n-  if (low == 0) {\n-    return 0;\n+/// Expands the given value into an array of ints so that we can work on\n+/// it. The array will be converted to an absolute value and the wasNegative\n+/// flag will be set appropriately. The array will remove leading zeros from\n+/// the value.\n+/// \\param array an array of length 8 to set with the value\n+/// \\param was_negative a flag for whether the value was original negative\n+/// \\result the output length of the array\n+static int64_t FillInArray(const BasicDecimal256& value, uint32_t* array,\n+                           bool& was_negative) {\n+  BasicDecimal256 positive_value = value;\n+  was_negative = false;\n+  int64_t highest_bit = positive_value.little_endian_array()[3];\n+  if (highest_bit < 0) {\n+    positive_value.Negate();\n+    was_negative = true;\n   }\n-\n-  array[0] = static_cast<uint32_t>(low);\n-  return 1;\n+  std::array<uint64_t, 4> value_big_endian_array = positive_value.little_endian_array();\n+  std::reverse(value_big_endian_array.begin(), value_big_endian_array.end());\n\nReview comment:\n       Can FillInArray below take little-endian array so you don't need to call std::reverse?\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -451,6 +463,27 @@ static int64_t FillInArray(const BasicDecimal128& value, uint32_t* array,\n   return 1;\n }\n \n+/// Expands the given value into an array of ints so that we can work on\n\nReview comment:\n       Comment that the output array is in big-endian.\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -451,6 +463,27 @@ static int64_t FillInArray(const BasicDecimal128& value, uint32_t* array,\n   return 1;\n }\n \n+/// Expands the given value into an array of ints so that we can work on\n+/// it. The array will be converted to an absolute value and the wasNegative\n\nReview comment:\n       was_negative\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -404,23 +429,10 @@ BasicDecimal128& BasicDecimal128::operator*=(const BasicDecimal128& right) {\n /// \\result the output length of the array\n static int64_t FillInArray(const BasicDecimal128& value, uint32_t* array,\n                            bool& was_negative) {\n-  uint64_t high;\n-  uint64_t low;\n-  const int64_t highbits = value.high_bits();\n-  const uint64_t lowbits = value.low_bits();\n-\n-  if (highbits < 0) {\n-    low = ~lowbits + 1;\n-    high = static_cast<uint64_t>(~highbits);\n-    if (low == 0) {\n-      ++high;\n-    }\n-    was_negative = true;\n-  } else {\n-    low = lowbits;\n-    high = static_cast<uint64_t>(highbits);\n-    was_negative = false;\n-  }\n+  BasicDecimal128 abs_value = BasicDecimal128::Abs(value);\n+  was_negative = value.high_bits() < 0;\n+  uint64_t high = static_cast<uint64_t>(abs_value.high_bits());\n\nReview comment:\n       Please add a comment about why FillInArray is not called.\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -395,6 +395,31 @@ BasicDecimal128& BasicDecimal128::operator*=(const BasicDecimal128& right) {\n   return *this;\n }\n \n+/// Expands the given big endian array of uint64_t into an array of uint32_t.\n+/// The value of input array is expected to be positive. The result_array will\n\nReview comment:\n       positive -> non-negative?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-04T22:52:47.922+0000",
                    "updated": "2020-11-04T22:52:47.922+0000",
                    "started": "2020-11-04T22:52:47.922+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "507831",
                    "issueId": "13337504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337504/worklog/507860",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Bei-z commented on a change in pull request #8542:\nURL: https://github.com/apache/arrow/pull/8542#discussion_r517699593\n\n\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -404,51 +429,33 @@ BasicDecimal128& BasicDecimal128::operator*=(const BasicDecimal128& right) {\n /// \\result the output length of the array\n static int64_t FillInArray(const BasicDecimal128& value, uint32_t* array,\n                            bool& was_negative) {\n-  uint64_t high;\n-  uint64_t low;\n-  const int64_t highbits = value.high_bits();\n-  const uint64_t lowbits = value.low_bits();\n-\n-  if (highbits < 0) {\n-    low = ~lowbits + 1;\n-    high = static_cast<uint64_t>(~highbits);\n-    if (low == 0) {\n-      ++high;\n-    }\n-    was_negative = true;\n-  } else {\n-    low = lowbits;\n-    high = static_cast<uint64_t>(highbits);\n-    was_negative = false;\n-  }\n-\n-  if (high != 0) {\n-    if (high > std::numeric_limits<uint32_t>::max()) {\n-      array[0] = static_cast<uint32_t>(high >> 32);\n-      array[1] = static_cast<uint32_t>(high);\n-      array[2] = static_cast<uint32_t>(low >> 32);\n-      array[3] = static_cast<uint32_t>(low);\n-      return 4;\n-    }\n-\n-    array[0] = static_cast<uint32_t>(high);\n-    array[1] = static_cast<uint32_t>(low >> 32);\n-    array[2] = static_cast<uint32_t>(low);\n-    return 3;\n-  }\n-\n-  if (low >= std::numeric_limits<uint32_t>::max()) {\n-    array[0] = static_cast<uint32_t>(low >> 32);\n-    array[1] = static_cast<uint32_t>(low);\n-    return 2;\n-  }\n+  BasicDecimal128 abs_value = BasicDecimal128::Abs(value);\n+  was_negative = value.high_bits() < 0;\n+  std::array<uint64_t, 2> abs_big_endian_array = {\n+      static_cast<uint64_t>(abs_value.high_bits()),\n+      static_cast<uint64_t>(abs_value.low_bits())};\n+  return FillInArray(abs_big_endian_array, array);\n+}\n \n-  if (low == 0) {\n-    return 0;\n+/// Expands the given value into an array of ints so that we can work on\n+/// it. The array will be converted to an absolute value and the wasNegative\n+/// flag will be set appropriately. The array will remove leading zeros from\n+/// the value.\n+/// \\param array an array of length 8 to set with the value\n+/// \\param was_negative a flag for whether the value was original negative\n+/// \\result the output length of the array\n+static int64_t FillInArray(const BasicDecimal256& value, uint32_t* array,\n+                           bool& was_negative) {\n+  BasicDecimal256 positive_value = value;\n+  was_negative = false;\n+  int64_t highest_bit = positive_value.little_endian_array()[3];\n+  if (highest_bit < 0) {\n+    positive_value.Negate();\n+    was_negative = true;\n   }\n-\n-  array[0] = static_cast<uint32_t>(low);\n-  return 1;\n+  std::array<uint64_t, 4> value_big_endian_array = positive_value.little_endian_array();\n+  std::reverse(value_big_endian_array.begin(), value_big_endian_array.end());\n\nReview comment:\n       Updated accordingly. Thank you!\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-04T23:52:16.050+0000",
                    "updated": "2020-11-04T23:52:16.050+0000",
                    "started": "2020-11-04T23:52:16.049+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "507860",
                    "issueId": "13337504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337504/worklog/507861",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Bei-z commented on a change in pull request #8542:\nURL: https://github.com/apache/arrow/pull/8542#discussion_r517699770\n\n\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -404,23 +429,10 @@ BasicDecimal128& BasicDecimal128::operator*=(const BasicDecimal128& right) {\n /// \\result the output length of the array\n static int64_t FillInArray(const BasicDecimal128& value, uint32_t* array,\n                            bool& was_negative) {\n-  uint64_t high;\n-  uint64_t low;\n-  const int64_t highbits = value.high_bits();\n-  const uint64_t lowbits = value.low_bits();\n-\n-  if (highbits < 0) {\n-    low = ~lowbits + 1;\n-    high = static_cast<uint64_t>(~highbits);\n-    if (low == 0) {\n-      ++high;\n-    }\n-    was_negative = true;\n-  } else {\n-    low = lowbits;\n-    high = static_cast<uint64_t>(highbits);\n-    was_negative = false;\n-  }\n+  BasicDecimal128 abs_value = BasicDecimal128::Abs(value);\n+  was_negative = value.high_bits() < 0;\n+  uint64_t high = static_cast<uint64_t>(abs_value.high_bits());\n\nReview comment:\n       Comment added below. Thanks!\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-04T23:53:11.960+0000",
                    "updated": "2020-11-04T23:53:11.960+0000",
                    "started": "2020-11-04T23:53:11.960+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "507861",
                    "issueId": "13337504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337504/worklog/507862",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Bei-z commented on a change in pull request #8542:\nURL: https://github.com/apache/arrow/pull/8542#discussion_r517700007\n\n\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -395,6 +395,31 @@ BasicDecimal128& BasicDecimal128::operator*=(const BasicDecimal128& right) {\n   return *this;\n }\n \n+/// Expands the given big endian array of uint64_t into an array of uint32_t.\n+/// The value of input array is expected to be positive. The result_array will\n\nReview comment:\n       Done. Thank you!\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -451,6 +463,27 @@ static int64_t FillInArray(const BasicDecimal128& value, uint32_t* array,\n   return 1;\n }\n \n+/// Expands the given value into an array of ints so that we can work on\n+/// it. The array will be converted to an absolute value and the wasNegative\n\nReview comment:\n       Done. Thank you!\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-04T23:53:45.057+0000",
                    "updated": "2020-11-04T23:53:45.057+0000",
                    "started": "2020-11-04T23:53:45.057+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "507862",
                    "issueId": "13337504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337504/worklog/507867",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Bei-z commented on a change in pull request #8542:\nURL: https://github.com/apache/arrow/pull/8542#discussion_r517702346\n\n\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -451,6 +463,27 @@ static int64_t FillInArray(const BasicDecimal128& value, uint32_t* array,\n   return 1;\n }\n \n+/// Expands the given value into an array of ints so that we can work on\n\nReview comment:\n       Done. Thank you!\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-05T00:00:50.026+0000",
                    "updated": "2020-11-05T00:00:50.026+0000",
                    "started": "2020-11-05T00:00:50.025+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "507867",
                    "issueId": "13337504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337504/worklog/509205",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8542:\nURL: https://github.com/apache/arrow/pull/8542#discussion_r519873678\n\n\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -395,33 +395,49 @@ BasicDecimal128& BasicDecimal128::operator*=(const BasicDecimal128& right) {\n   return *this;\n }\n \n-/// Expands the given value into an array of ints so that we can work on\n-/// it. The array will be converted to an absolute value and the wasNegative\n+/// Expands the given little endian array of uint64_t into a big endian array of\n+/// uint32_t. The value of input array is expected to be non-negative. The result_array\n+/// will remove leading zeros from the input array.\n+/// \\param value_array a little endian array to represent the value\n+/// \\param result_array a big endian array of length N*2 to set with the value\n+/// \\result the output length of the array\n+template <size_t N>\n+static int64_t FillInArray(const std::array<uint64_t, N>& value_array,\n+                           uint32_t* result_array) {\n+  int64_t next_index = 0;\n+  for (int64_t i = N - 1; i >= 0; i--) {\n+    if (value_array[i] != 0) {\n+      if (value_array[i] <= std::numeric_limits<uint32_t>::max()) {\n+        result_array[next_index++] = static_cast<uint32_t>(value_array[i]);\n+        i--;\n+      }\n+      for (int64_t j = i; j >= 0; j--) {\n+        result_array[next_index++] = static_cast<uint32_t>(value_array[j] >> 32);\n+        result_array[next_index++] = static_cast<uint32_t>(value_array[j]);\n+      }\n+      break;\n+    }\n+  }\n+  return next_index;\n+}\n+\n+/// Expands the given value into a big endian array of ints so that we can work on\n+/// it. The array will be converted to an absolute value and the was_negative\n /// flag will be set appropriately. The array will remove leading zeros from\n /// the value.\n-/// \\param array an array of length 4 to set with the value\n+/// \\param array a big endian array of length 4 to set with the value\n /// \\param was_negative a flag for whether the value was original negative\n /// \\result the output length of the array\n static int64_t FillInArray(const BasicDecimal128& value, uint32_t* array,\n                            bool& was_negative) {\n-  uint64_t high;\n-  uint64_t low;\n-  const int64_t highbits = value.high_bits();\n-  const uint64_t lowbits = value.low_bits();\n-\n-  if (highbits < 0) {\n-    low = ~lowbits + 1;\n-    high = static_cast<uint64_t>(~highbits);\n-    if (low == 0) {\n-      ++high;\n-    }\n-    was_negative = true;\n-  } else {\n-    low = lowbits;\n-    high = static_cast<uint64_t>(highbits);\n-    was_negative = false;\n-  }\n-\n+  BasicDecimal128 abs_value = BasicDecimal128::Abs(value);\n+  was_negative = value.high_bits() < 0;\n+  uint64_t high = static_cast<uint64_t>(abs_value.high_bits());\n+  uint64_t low = abs_value.low_bits();\n+\n+  // FillInArray(std::array<uint64_t, N>& value_array, uint32_t* result_array) is not\n+  // called here as the following code has better performance, to avoid regression on\n+  // BasicDecimal128 Division.\n   if (high != 0) {\n     if (high > std::numeric_limits<uint32_t>::max()) {\n\nReview comment:\n       By the way, why do we have strict inequality here, but a non-strict one below for `low`?\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -451,6 +467,25 @@ static int64_t FillInArray(const BasicDecimal128& value, uint32_t* array,\n   return 1;\n }\n \n+/// Expands the given value into a big endian array of ints so that we can work on\n+/// it. The array will be converted to an absolute value and the was_negative\n+/// flag will be set appropriately. The array will remove leading zeros from\n+/// the value.\n+/// \\param array a big endian array of length 8 to set with the value\n+/// \\param was_negative a flag for whether the value was original negative\n+/// \\result the output length of the array\n+static int64_t FillInArray(const BasicDecimal256& value, uint32_t* array,\n+                           bool& was_negative) {\n+  BasicDecimal256 positive_value = value;\n+  was_negative = false;\n+  int64_t highest_bit = positive_value.little_endian_array()[3];\n+  if (highest_bit < 0) {\n\nReview comment:\n       Doesn't/shouldn't `BasicDecimal256` have a `sign` or `is_negative` method to factor out this pattern?\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -490,49 +527,60 @@ static void FixDivisionSigns(BasicDecimal128* result, BasicDecimal128* remainder\n   }\n }\n \n-/// \\brief Build a BasicDecimal128 from a list of ints.\n+/// \\brief Build a little endian array of uint64_t from a big endian array of uint32_t.\n+template <size_t N>\n+static DecimalStatus BuildFromArray(std::array<uint64_t, N>* result_array,\n+                                    uint32_t* array, int64_t length) {\n+  for (int64_t i = length - 2 * N - 1; i >= 0; i--) {\n+    if (array[i] != 0) {\n+      return DecimalStatus::kOverflow;\n+    }\n+  }\n+  int64_t next_index = length - 1;\n+  for (size_t i = 0; i < N; i++) {\n+    uint64_t lower_bits = (next_index < 0) ? 0 : array[next_index--];\n+    (*result_array)[i] =\n+        (next_index < 0)\n+            ? lower_bits\n+            : ((static_cast<uint64_t>(array[next_index--]) << 32) + lower_bits);\n+  }\n+  return DecimalStatus::kSuccess;\n+}\n+\n+/// \\brief Build a BasicDecimal128 from a big endian array of uint32_t.\n static DecimalStatus BuildFromArray(BasicDecimal128* value, uint32_t* array,\n\nReview comment:\n       `const uint32_t*`?\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -490,49 +527,60 @@ static void FixDivisionSigns(BasicDecimal128* result, BasicDecimal128* remainder\n   }\n }\n \n-/// \\brief Build a BasicDecimal128 from a list of ints.\n+/// \\brief Build a little endian array of uint64_t from a big endian array of uint32_t.\n+template <size_t N>\n+static DecimalStatus BuildFromArray(std::array<uint64_t, N>* result_array,\n+                                    uint32_t* array, int64_t length) {\n\nReview comment:\n       `const uint32_t* array`?\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -395,33 +395,49 @@ BasicDecimal128& BasicDecimal128::operator*=(const BasicDecimal128& right) {\n   return *this;\n }\n \n-/// Expands the given value into an array of ints so that we can work on\n-/// it. The array will be converted to an absolute value and the wasNegative\n+/// Expands the given little endian array of uint64_t into a big endian array of\n+/// uint32_t. The value of input array is expected to be non-negative. The result_array\n+/// will remove leading zeros from the input array.\n+/// \\param value_array a little endian array to represent the value\n+/// \\param result_array a big endian array of length N*2 to set with the value\n+/// \\result the output length of the array\n+template <size_t N>\n+static int64_t FillInArray(const std::array<uint64_t, N>& value_array,\n+                           uint32_t* result_array) {\n+  int64_t next_index = 0;\n+  for (int64_t i = N - 1; i >= 0; i--) {\n\nReview comment:\n       Nit, but the nested loop is a bit confusing. Two separate loops would make the intent more obvious (and might also help the compiler?).\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -490,49 +527,60 @@ static void FixDivisionSigns(BasicDecimal128* result, BasicDecimal128* remainder\n   }\n }\n \n-/// \\brief Build a BasicDecimal128 from a list of ints.\n+/// \\brief Build a little endian array of uint64_t from a big endian array of uint32_t.\n+template <size_t N>\n+static DecimalStatus BuildFromArray(std::array<uint64_t, N>* result_array,\n+                                    uint32_t* array, int64_t length) {\n+  for (int64_t i = length - 2 * N - 1; i >= 0; i--) {\n+    if (array[i] != 0) {\n+      return DecimalStatus::kOverflow;\n+    }\n+  }\n+  int64_t next_index = length - 1;\n+  for (size_t i = 0; i < N; i++) {\n+    uint64_t lower_bits = (next_index < 0) ? 0 : array[next_index--];\n+    (*result_array)[i] =\n+        (next_index < 0)\n\nReview comment:\n       The code would look clearer if you had one loop for the non-zero words, and one other loop for the excess (zeroed) words, IMHO.\n\n##########\nFile path: cpp/src/arrow/util/decimal_test.cc\n##########\n@@ -1296,6 +1296,56 @@ TEST(Decimal256Test, Multiply) {\n   }\n }\n \n+TEST(Decimal256Test, Divide) {\n+  ASSERT_EQ(Decimal256(33), Decimal256(100) / Decimal256(3));\n+  ASSERT_EQ(Decimal256(66), Decimal256(200) / Decimal256(3));\n+  ASSERT_EQ(Decimal256(66), Decimal256(20100) / Decimal256(301));\n+  ASSERT_EQ(Decimal256(-66), Decimal256(-20100) / Decimal256(301));\n+  ASSERT_EQ(Decimal256(-66), Decimal256(20100) / Decimal256(-301));\n+  ASSERT_EQ(Decimal256(66), Decimal256(-20100) / Decimal256(-301));\n+  ASSERT_EQ(Decimal256(\"-5192296858534827628530496329343552\"),\n+            Decimal256(\"-269599466671506397946670150910580797473777870509761363\"\n+                       \"24636208709184\") /\n+                Decimal256(\"5192296858534827628530496329874417\"));\n+  ASSERT_EQ(Decimal256(\"5192296858534827628530496329343552\"),\n+            Decimal256(\"-269599466671506397946670150910580797473777870509761363\"\n+                       \"24636208709184\") /\n+                Decimal256(\"-5192296858534827628530496329874417\"));\n+  ASSERT_EQ(Decimal256(\"5192296858534827628530496329343552\"),\n+            Decimal256(\"2695994666715063979466701509105807974737778705097613632\"\n+                       \"4636208709184\") /\n+                Decimal256(\"5192296858534827628530496329874417\"));\n+  ASSERT_EQ(Decimal256(\"-5192296858534827628530496329343552\"),\n+            Decimal256(\"2695994666715063979466701509105807974737778705097613632\"\n+                       \"4636208709184\") /\n+                Decimal256(\"-5192296858534827628530496329874417\"));\n+\n+  // Test some random numbers.\n+  for (auto x : GetRandomNumbers<Int32Type>(16)) {\n+    for (auto y : GetRandomNumbers<Int32Type>(16)) {\n+      if (y == 0) {\n+        continue;\n+      }\n+\n+      Decimal256 result = Decimal256(x) / Decimal256(y);\n+      ASSERT_EQ(Decimal256(static_cast<int64_t>(x) / y), result)\n+          << \" x: \" << x << \" y: \" << y;\n+    }\n+  }\n+\n+  // Test some edge cases\n+  for (auto x : std::vector<int128_t>{-INT64_MAX, -INT32_MAX, 0, INT32_MAX, INT64_MAX}) {\n+    for (auto y : std::vector<int128_t>{-INT32_MAX, -32, -2, -1, 1, 2, 32, INT32_MAX}) {\n\nReview comment:\n       Also, what about `-INT64_MAX - 1` and `-INT32_MAX - 1`? Are they expected to work as well? If so, test them.\n\n##########\nFile path: cpp/src/arrow/util/decimal_test.cc\n##########\n@@ -1296,6 +1296,56 @@ TEST(Decimal256Test, Multiply) {\n   }\n }\n \n+TEST(Decimal256Test, Divide) {\n+  ASSERT_EQ(Decimal256(33), Decimal256(100) / Decimal256(3));\n+  ASSERT_EQ(Decimal256(66), Decimal256(200) / Decimal256(3));\n+  ASSERT_EQ(Decimal256(66), Decimal256(20100) / Decimal256(301));\n+  ASSERT_EQ(Decimal256(-66), Decimal256(-20100) / Decimal256(301));\n+  ASSERT_EQ(Decimal256(-66), Decimal256(20100) / Decimal256(-301));\n+  ASSERT_EQ(Decimal256(66), Decimal256(-20100) / Decimal256(-301));\n+  ASSERT_EQ(Decimal256(\"-5192296858534827628530496329343552\"),\n+            Decimal256(\"-269599466671506397946670150910580797473777870509761363\"\n+                       \"24636208709184\") /\n+                Decimal256(\"5192296858534827628530496329874417\"));\n+  ASSERT_EQ(Decimal256(\"5192296858534827628530496329343552\"),\n+            Decimal256(\"-269599466671506397946670150910580797473777870509761363\"\n+                       \"24636208709184\") /\n+                Decimal256(\"-5192296858534827628530496329874417\"));\n+  ASSERT_EQ(Decimal256(\"5192296858534827628530496329343552\"),\n+            Decimal256(\"2695994666715063979466701509105807974737778705097613632\"\n+                       \"4636208709184\") /\n+                Decimal256(\"5192296858534827628530496329874417\"));\n+  ASSERT_EQ(Decimal256(\"-5192296858534827628530496329343552\"),\n+            Decimal256(\"2695994666715063979466701509105807974737778705097613632\"\n+                       \"4636208709184\") /\n+                Decimal256(\"-5192296858534827628530496329874417\"));\n+\n+  // Test some random numbers.\n+  for (auto x : GetRandomNumbers<Int32Type>(16)) {\n+    for (auto y : GetRandomNumbers<Int32Type>(16)) {\n+      if (y == 0) {\n+        continue;\n+      }\n+\n+      Decimal256 result = Decimal256(x) / Decimal256(y);\n+      ASSERT_EQ(Decimal256(static_cast<int64_t>(x) / y), result)\n+          << \" x: \" << x << \" y: \" << y;\n+    }\n+  }\n+\n+  // Test some edge cases\n+  for (auto x : std::vector<int128_t>{-INT64_MAX, -INT32_MAX, 0, INT32_MAX, INT64_MAX}) {\n+    for (auto y : std::vector<int128_t>{-INT32_MAX, -32, -2, -1, 1, 2, 32, INT32_MAX}) {\n\nReview comment:\n       Can we define a `INT128_MAX` constant and test it as well?\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -490,49 +527,60 @@ static void FixDivisionSigns(BasicDecimal128* result, BasicDecimal128* remainder\n   }\n }\n \n-/// \\brief Build a BasicDecimal128 from a list of ints.\n+/// \\brief Build a little endian array of uint64_t from a big endian array of uint32_t.\n+template <size_t N>\n+static DecimalStatus BuildFromArray(std::array<uint64_t, N>* result_array,\n+                                    uint32_t* array, int64_t length) {\n+  for (int64_t i = length - 2 * N - 1; i >= 0; i--) {\n+    if (array[i] != 0) {\n+      return DecimalStatus::kOverflow;\n+    }\n+  }\n+  int64_t next_index = length - 1;\n+  for (size_t i = 0; i < N; i++) {\n+    uint64_t lower_bits = (next_index < 0) ? 0 : array[next_index--];\n+    (*result_array)[i] =\n+        (next_index < 0)\n+            ? lower_bits\n+            : ((static_cast<uint64_t>(array[next_index--]) << 32) + lower_bits);\n+  }\n+  return DecimalStatus::kSuccess;\n+}\n+\n+/// \\brief Build a BasicDecimal128 from a big endian array of uint32_t.\n static DecimalStatus BuildFromArray(BasicDecimal128* value, uint32_t* array,\n                                     int64_t length) {\n-  switch (length) {\n-    case 0:\n-      *value = {static_cast<int64_t>(0)};\n-      break;\n-    case 1:\n-      *value = {static_cast<int64_t>(array[0])};\n-      break;\n-    case 2:\n-      *value = {static_cast<int64_t>(0),\n-                (static_cast<uint64_t>(array[0]) << 32) + array[1]};\n-      break;\n-    case 3:\n-      *value = {static_cast<int64_t>(array[0]),\n-                (static_cast<uint64_t>(array[1]) << 32) + array[2]};\n-      break;\n-    case 4:\n-      *value = {(static_cast<int64_t>(array[0]) << 32) + array[1],\n-                (static_cast<uint64_t>(array[2]) << 32) + array[3]};\n-      break;\n-    case 5:\n-      if (array[0] != 0) {\n-        return DecimalStatus::kOverflow;\n-      }\n-      *value = {(static_cast<int64_t>(array[1]) << 32) + array[2],\n-                (static_cast<uint64_t>(array[3]) << 32) + array[4]};\n-      break;\n-    default:\n-      return DecimalStatus::kOverflow;\n+  std::array<uint64_t, 2> result_array;\n+  auto status = BuildFromArray(&result_array, array, length);\n+  if (status != DecimalStatus::kSuccess) {\n+    return status;\n   }\n+  *value = {static_cast<int64_t>(result_array[1]), result_array[0]};\n+  return DecimalStatus::kSuccess;\n+}\n \n+/// \\brief Build a BasicDecimal256 from a big endian array of uint32_t.\n+static DecimalStatus BuildFromArray(BasicDecimal256* value, uint32_t* array,\n\nReview comment:\n       `const uint32_t* array`?\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-09T15:07:31.819+0000",
                    "updated": "2020-11-09T15:07:31.819+0000",
                    "started": "2020-11-09T15:07:31.819+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "509205",
                    "issueId": "13337504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337504/worklog/509206",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8542:\nURL: https://github.com/apache/arrow/pull/8542#issuecomment-724071921\n\n\n   I didn't find any performance regression on an AMD Zen 2 CPU.\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-09T15:08:16.240+0000",
                    "updated": "2020-11-09T15:08:16.240+0000",
                    "started": "2020-11-09T15:08:16.240+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "509206",
                    "issueId": "13337504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337504/worklog/509908",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Bei-z commented on a change in pull request #8542:\nURL: https://github.com/apache/arrow/pull/8542#discussion_r520841038\n\n\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -490,49 +527,60 @@ static void FixDivisionSigns(BasicDecimal128* result, BasicDecimal128* remainder\n   }\n }\n \n-/// \\brief Build a BasicDecimal128 from a list of ints.\n+/// \\brief Build a little endian array of uint64_t from a big endian array of uint32_t.\n+template <size_t N>\n+static DecimalStatus BuildFromArray(std::array<uint64_t, N>* result_array,\n+                                    uint32_t* array, int64_t length) {\n+  for (int64_t i = length - 2 * N - 1; i >= 0; i--) {\n+    if (array[i] != 0) {\n+      return DecimalStatus::kOverflow;\n+    }\n+  }\n+  int64_t next_index = length - 1;\n+  for (size_t i = 0; i < N; i++) {\n+    uint64_t lower_bits = (next_index < 0) ? 0 : array[next_index--];\n+    (*result_array)[i] =\n+        (next_index < 0)\n\nReview comment:\n       Thank you for your suggestion!\r\n   Changed this part of code to 2 loops, but there is a performance regression. Is there anything I can improve on the current code to help with the performance, or should we consider change back to one loop?\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -490,49 +527,60 @@ static void FixDivisionSigns(BasicDecimal128* result, BasicDecimal128* remainder\n   }\n }\n \n-/// \\brief Build a BasicDecimal128 from a list of ints.\n+/// \\brief Build a little endian array of uint64_t from a big endian array of uint32_t.\n+template <size_t N>\n+static DecimalStatus BuildFromArray(std::array<uint64_t, N>* result_array,\n+                                    uint32_t* array, int64_t length) {\n\nReview comment:\n       Changed accordingly, thank you!\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -451,6 +467,25 @@ static int64_t FillInArray(const BasicDecimal128& value, uint32_t* array,\n   return 1;\n }\n \n+/// Expands the given value into a big endian array of ints so that we can work on\n+/// it. The array will be converted to an absolute value and the was_negative\n+/// flag will be set appropriately. The array will remove leading zeros from\n+/// the value.\n+/// \\param array a big endian array of length 8 to set with the value\n+/// \\param was_negative a flag for whether the value was original negative\n+/// \\result the output length of the array\n+static int64_t FillInArray(const BasicDecimal256& value, uint32_t* array,\n+                           bool& was_negative) {\n+  BasicDecimal256 positive_value = value;\n+  was_negative = false;\n+  int64_t highest_bit = positive_value.little_endian_array()[3];\n+  if (highest_bit < 0) {\n\nReview comment:\n       BasicDecimal256 do have a sign method, but that method need shifting of int64_t value. Would you recommend adding a is_negatvie method?\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -395,33 +395,49 @@ BasicDecimal128& BasicDecimal128::operator*=(const BasicDecimal128& right) {\n   return *this;\n }\n \n-/// Expands the given value into an array of ints so that we can work on\n-/// it. The array will be converted to an absolute value and the wasNegative\n+/// Expands the given little endian array of uint64_t into a big endian array of\n+/// uint32_t. The value of input array is expected to be non-negative. The result_array\n+/// will remove leading zeros from the input array.\n+/// \\param value_array a little endian array to represent the value\n+/// \\param result_array a big endian array of length N*2 to set with the value\n+/// \\result the output length of the array\n+template <size_t N>\n+static int64_t FillInArray(const std::array<uint64_t, N>& value_array,\n+                           uint32_t* result_array) {\n+  int64_t next_index = 0;\n+  for (int64_t i = N - 1; i >= 0; i--) {\n+    if (value_array[i] != 0) {\n+      if (value_array[i] <= std::numeric_limits<uint32_t>::max()) {\n+        result_array[next_index++] = static_cast<uint32_t>(value_array[i]);\n+        i--;\n+      }\n+      for (int64_t j = i; j >= 0; j--) {\n+        result_array[next_index++] = static_cast<uint32_t>(value_array[j] >> 32);\n+        result_array[next_index++] = static_cast<uint32_t>(value_array[j]);\n+      }\n+      break;\n+    }\n+  }\n+  return next_index;\n+}\n+\n+/// Expands the given value into a big endian array of ints so that we can work on\n+/// it. The array will be converted to an absolute value and the was_negative\n /// flag will be set appropriately. The array will remove leading zeros from\n /// the value.\n-/// \\param array an array of length 4 to set with the value\n+/// \\param array a big endian array of length 4 to set with the value\n /// \\param was_negative a flag for whether the value was original negative\n /// \\result the output length of the array\n static int64_t FillInArray(const BasicDecimal128& value, uint32_t* array,\n                            bool& was_negative) {\n-  uint64_t high;\n-  uint64_t low;\n-  const int64_t highbits = value.high_bits();\n-  const uint64_t lowbits = value.low_bits();\n-\n-  if (highbits < 0) {\n-    low = ~lowbits + 1;\n-    high = static_cast<uint64_t>(~highbits);\n-    if (low == 0) {\n-      ++high;\n-    }\n-    was_negative = true;\n-  } else {\n-    low = lowbits;\n-    high = static_cast<uint64_t>(highbits);\n-    was_negative = false;\n-  }\n-\n+  BasicDecimal128 abs_value = BasicDecimal128::Abs(value);\n+  was_negative = value.high_bits() < 0;\n+  uint64_t high = static_cast<uint64_t>(abs_value.high_bits());\n+  uint64_t low = abs_value.low_bits();\n+\n+  // FillInArray(std::array<uint64_t, N>& value_array, uint32_t* result_array) is not\n+  // called here as the following code has better performance, to avoid regression on\n+  // BasicDecimal128 Division.\n   if (high != 0) {\n     if (high > std::numeric_limits<uint32_t>::max()) {\n\nReview comment:\n       This part of code is from the original version of Decimal128 division, to eliminate the leading zeros from the uint64_t value (high & low) and into uint32_t array.\r\n   So that to find the first non-negative uint32_t value, we check the high first, and then low value.\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -395,33 +395,49 @@ BasicDecimal128& BasicDecimal128::operator*=(const BasicDecimal128& right) {\n   return *this;\n }\n \n-/// Expands the given value into an array of ints so that we can work on\n-/// it. The array will be converted to an absolute value and the wasNegative\n+/// Expands the given little endian array of uint64_t into a big endian array of\n+/// uint32_t. The value of input array is expected to be non-negative. The result_array\n+/// will remove leading zeros from the input array.\n+/// \\param value_array a little endian array to represent the value\n+/// \\param result_array a big endian array of length N*2 to set with the value\n+/// \\result the output length of the array\n+template <size_t N>\n+static int64_t FillInArray(const std::array<uint64_t, N>& value_array,\n+                           uint32_t* result_array) {\n+  int64_t next_index = 0;\n+  for (int64_t i = N - 1; i >= 0; i--) {\n\nReview comment:\n       Thank you! Changed to use 2 separate loops.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-10T20:04:47.861+0000",
                    "updated": "2020-11-10T20:04:47.861+0000",
                    "started": "2020-11-10T20:04:47.861+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "509908",
                    "issueId": "13337504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337504/worklog/509909",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Bei-z commented on a change in pull request #8542:\nURL: https://github.com/apache/arrow/pull/8542#discussion_r520841038\n\n\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -490,49 +527,60 @@ static void FixDivisionSigns(BasicDecimal128* result, BasicDecimal128* remainder\n   }\n }\n \n-/// \\brief Build a BasicDecimal128 from a list of ints.\n+/// \\brief Build a little endian array of uint64_t from a big endian array of uint32_t.\n+template <size_t N>\n+static DecimalStatus BuildFromArray(std::array<uint64_t, N>* result_array,\n+                                    uint32_t* array, int64_t length) {\n+  for (int64_t i = length - 2 * N - 1; i >= 0; i--) {\n+    if (array[i] != 0) {\n+      return DecimalStatus::kOverflow;\n+    }\n+  }\n+  int64_t next_index = length - 1;\n+  for (size_t i = 0; i < N; i++) {\n+    uint64_t lower_bits = (next_index < 0) ? 0 : array[next_index--];\n+    (*result_array)[i] =\n+        (next_index < 0)\n\nReview comment:\n       Thank you for your suggestion!\r\n   Changed this part of code to 2 loops, but there is a little performance regression. Is there anything I can improve on the current code to help with the performance, or should we consider change back to one loop?\r\n   \r\n   Current benchmark:\r\n   BinaryMathOp128                156 ns          156 ns      4316716 items_per_second=64.2915M/s\r\n   BinaryMathOp256                152 ns          152 ns      4426239 items_per_second=65.7017M/s\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -490,49 +527,60 @@ static void FixDivisionSigns(BasicDecimal128* result, BasicDecimal128* remainder\n   }\n }\n \n-/// \\brief Build a BasicDecimal128 from a list of ints.\n+/// \\brief Build a little endian array of uint64_t from a big endian array of uint32_t.\n+template <size_t N>\n+static DecimalStatus BuildFromArray(std::array<uint64_t, N>* result_array,\n+                                    uint32_t* array, int64_t length) {\n+  for (int64_t i = length - 2 * N - 1; i >= 0; i--) {\n+    if (array[i] != 0) {\n+      return DecimalStatus::kOverflow;\n+    }\n+  }\n+  int64_t next_index = length - 1;\n+  for (size_t i = 0; i < N; i++) {\n+    uint64_t lower_bits = (next_index < 0) ? 0 : array[next_index--];\n+    (*result_array)[i] =\n+        (next_index < 0)\n+            ? lower_bits\n+            : ((static_cast<uint64_t>(array[next_index--]) << 32) + lower_bits);\n+  }\n+  return DecimalStatus::kSuccess;\n+}\n+\n+/// \\brief Build a BasicDecimal128 from a big endian array of uint32_t.\n static DecimalStatus BuildFromArray(BasicDecimal128* value, uint32_t* array,\n\nReview comment:\n       Changed accordingly, thank you!\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -490,49 +527,60 @@ static void FixDivisionSigns(BasicDecimal128* result, BasicDecimal128* remainder\n   }\n }\n \n-/// \\brief Build a BasicDecimal128 from a list of ints.\n+/// \\brief Build a little endian array of uint64_t from a big endian array of uint32_t.\n+template <size_t N>\n+static DecimalStatus BuildFromArray(std::array<uint64_t, N>* result_array,\n+                                    uint32_t* array, int64_t length) {\n+  for (int64_t i = length - 2 * N - 1; i >= 0; i--) {\n+    if (array[i] != 0) {\n+      return DecimalStatus::kOverflow;\n+    }\n+  }\n+  int64_t next_index = length - 1;\n+  for (size_t i = 0; i < N; i++) {\n+    uint64_t lower_bits = (next_index < 0) ? 0 : array[next_index--];\n+    (*result_array)[i] =\n+        (next_index < 0)\n+            ? lower_bits\n+            : ((static_cast<uint64_t>(array[next_index--]) << 32) + lower_bits);\n+  }\n+  return DecimalStatus::kSuccess;\n+}\n+\n+/// \\brief Build a BasicDecimal128 from a big endian array of uint32_t.\n static DecimalStatus BuildFromArray(BasicDecimal128* value, uint32_t* array,\n                                     int64_t length) {\n-  switch (length) {\n-    case 0:\n-      *value = {static_cast<int64_t>(0)};\n-      break;\n-    case 1:\n-      *value = {static_cast<int64_t>(array[0])};\n-      break;\n-    case 2:\n-      *value = {static_cast<int64_t>(0),\n-                (static_cast<uint64_t>(array[0]) << 32) + array[1]};\n-      break;\n-    case 3:\n-      *value = {static_cast<int64_t>(array[0]),\n-                (static_cast<uint64_t>(array[1]) << 32) + array[2]};\n-      break;\n-    case 4:\n-      *value = {(static_cast<int64_t>(array[0]) << 32) + array[1],\n-                (static_cast<uint64_t>(array[2]) << 32) + array[3]};\n-      break;\n-    case 5:\n-      if (array[0] != 0) {\n-        return DecimalStatus::kOverflow;\n-      }\n-      *value = {(static_cast<int64_t>(array[1]) << 32) + array[2],\n-                (static_cast<uint64_t>(array[3]) << 32) + array[4]};\n-      break;\n-    default:\n-      return DecimalStatus::kOverflow;\n+  std::array<uint64_t, 2> result_array;\n+  auto status = BuildFromArray(&result_array, array, length);\n+  if (status != DecimalStatus::kSuccess) {\n+    return status;\n   }\n+  *value = {static_cast<int64_t>(result_array[1]), result_array[0]};\n+  return DecimalStatus::kSuccess;\n+}\n \n+/// \\brief Build a BasicDecimal256 from a big endian array of uint32_t.\n+static DecimalStatus BuildFromArray(BasicDecimal256* value, uint32_t* array,\n\nReview comment:\n       Changed accordingly, thank you!\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-10T20:07:02.196+0000",
                    "updated": "2020-11-10T20:07:02.196+0000",
                    "started": "2020-11-10T20:07:02.195+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "509909",
                    "issueId": "13337504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337504/worklog/509992",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Bei-z commented on a change in pull request #8542:\nURL: https://github.com/apache/arrow/pull/8542#discussion_r520925174\n\n\n\n##########\nFile path: cpp/src/arrow/util/decimal_test.cc\n##########\n@@ -1296,6 +1296,56 @@ TEST(Decimal256Test, Multiply) {\n   }\n }\n \n+TEST(Decimal256Test, Divide) {\n+  ASSERT_EQ(Decimal256(33), Decimal256(100) / Decimal256(3));\n+  ASSERT_EQ(Decimal256(66), Decimal256(200) / Decimal256(3));\n+  ASSERT_EQ(Decimal256(66), Decimal256(20100) / Decimal256(301));\n+  ASSERT_EQ(Decimal256(-66), Decimal256(-20100) / Decimal256(301));\n+  ASSERT_EQ(Decimal256(-66), Decimal256(20100) / Decimal256(-301));\n+  ASSERT_EQ(Decimal256(66), Decimal256(-20100) / Decimal256(-301));\n+  ASSERT_EQ(Decimal256(\"-5192296858534827628530496329343552\"),\n+            Decimal256(\"-269599466671506397946670150910580797473777870509761363\"\n+                       \"24636208709184\") /\n+                Decimal256(\"5192296858534827628530496329874417\"));\n+  ASSERT_EQ(Decimal256(\"5192296858534827628530496329343552\"),\n+            Decimal256(\"-269599466671506397946670150910580797473777870509761363\"\n+                       \"24636208709184\") /\n+                Decimal256(\"-5192296858534827628530496329874417\"));\n+  ASSERT_EQ(Decimal256(\"5192296858534827628530496329343552\"),\n+            Decimal256(\"2695994666715063979466701509105807974737778705097613632\"\n+                       \"4636208709184\") /\n+                Decimal256(\"5192296858534827628530496329874417\"));\n+  ASSERT_EQ(Decimal256(\"-5192296858534827628530496329343552\"),\n+            Decimal256(\"2695994666715063979466701509105807974737778705097613632\"\n+                       \"4636208709184\") /\n+                Decimal256(\"-5192296858534827628530496329874417\"));\n+\n+  // Test some random numbers.\n+  for (auto x : GetRandomNumbers<Int32Type>(16)) {\n+    for (auto y : GetRandomNumbers<Int32Type>(16)) {\n+      if (y == 0) {\n+        continue;\n+      }\n+\n+      Decimal256 result = Decimal256(x) / Decimal256(y);\n+      ASSERT_EQ(Decimal256(static_cast<int64_t>(x) / y), result)\n+          << \" x: \" << x << \" y: \" << y;\n+    }\n+  }\n+\n+  // Test some edge cases\n+  for (auto x : std::vector<int128_t>{-INT64_MAX, -INT32_MAX, 0, INT32_MAX, INT64_MAX}) {\n+    for (auto y : std::vector<int128_t>{-INT32_MAX, -32, -2, -1, 1, 2, 32, INT32_MAX}) {\n\nReview comment:\n       Thank you for your suggestions! Added kInt128Max for testing, and also tested -INT64_MAX - 1 and -INT32_MAX - 1\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-10T22:52:12.281+0000",
                    "updated": "2020-11-10T22:52:12.281+0000",
                    "started": "2020-11-10T22:52:12.281+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "509992",
                    "issueId": "13337504"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337504/worklog/510011",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "Bei-z commented on a change in pull request #8542:\nURL: https://github.com/apache/arrow/pull/8542#discussion_r520841121\n\n\n\n##########\nFile path: cpp/src/arrow/util/basic_decimal.cc\n##########\n@@ -451,6 +467,25 @@ static int64_t FillInArray(const BasicDecimal128& value, uint32_t* array,\n   return 1;\n }\n \n+/// Expands the given value into a big endian array of ints so that we can work on\n+/// it. The array will be converted to an absolute value and the was_negative\n+/// flag will be set appropriately. The array will remove leading zeros from\n+/// the value.\n+/// \\param array a big endian array of length 8 to set with the value\n+/// \\param was_negative a flag for whether the value was original negative\n+/// \\result the output length of the array\n+static int64_t FillInArray(const BasicDecimal256& value, uint32_t* array,\n+                           bool& was_negative) {\n+  BasicDecimal256 positive_value = value;\n+  was_negative = false;\n+  int64_t highest_bit = positive_value.little_endian_array()[3];\n+  if (highest_bit < 0) {\n\nReview comment:\n       BasicDecimal256 do have a sign method, but that method need shifting of int64_t value. Added the IsNegavie method.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-11-10T23:59:25.105+0000",
                    "updated": "2020-11-10T23:59:25.105+0000",
                    "started": "2020-11-10T23:59:25.105+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "510011",
                    "issueId": "13337504"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 24600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@7c47de7f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7906e799[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@480eccb6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@67ac001[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@79f07c57[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@313d3916[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@fe828fb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@5fc28bcf[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@252a46a4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@7d073e9e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@33667e35[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@78311765[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 24600,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Nov 17 22:47:42 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-11-17T22:47:42.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10407/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2020-10-27T19:46:59.000+0000",
        "updated": "2020-11-17T22:48:27.000+0000",
        "timeoriginalestimate": null,
        "description": "Add Division Support in Decimal256",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 24600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Division Support in Decimal256",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": "https://github.com/apache/arrow/pull/8542/files",
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13337504/comment/17234068",
                    "id": "17234068",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 8696\n[https://github.com/apache/arrow/pull/8696]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-11-17T22:47:42.724+0000",
                    "updated": "2020-11-17T22:47:42.724+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0k20w:",
        "customfield_12314139": null
    }
}