{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13344011",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344011",
    "key": "ARROW-10796",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12348823",
                "id": "12348823",
                "description": "",
                "name": "3.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-01-25"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12604783",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12604783",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13345795",
                    "key": "ARROW-10898",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13345795",
                    "fields": {
                        "summary": "[C++] Investigate Table sort performance",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/5",
                            "id": "5",
                            "description": "General wishlist item.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Wish",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "aggregateprogress": {
            "progress": 3600,
            "total": 3600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 3600,
            "total": 3600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10796/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 6,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344011/worklog/522822",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #8890:\nURL: https://github.com/apache/arrow/pull/8890\n\n\n   Add two RecordBatch sorting implementations:\r\n   * A single-pass left-to-right radix sort that's fast up to ~8 sort keys\r\n   * A single-pass multiple-key-comparing sort that gives decent performance for large numbers of sort keys\r\n   \r\n   Both implementations benefit from direct indexed access into the contiguous RecordBatch columns (as opposed to table sorting, which must index into the chunks).\r\n   \r\n   Add some RecordBatch-sorting benchmarks.\r\n   \r\n   Also, add and improve tests; and fix a bug related to sorting of NaNs and nulls.\r\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-10T17:52:30.821+0000",
                    "updated": "2020-12-10T17:52:30.821+0000",
                    "started": "2020-12-10T17:52:30.821+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "522822",
                    "issueId": "13344011"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344011/worklog/522837",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #8890:\nURL: https://github.com/apache/arrow/pull/8890#issuecomment-742697603\n\n\n   cc @kou \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-10T18:09:45.796+0000",
                    "updated": "2020-12-10T18:09:45.796+0000",
                    "started": "2020-12-10T18:09:45.795+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "522837",
                    "issueId": "13344011"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344011/worklog/522842",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #8890:\nURL: https://github.com/apache/arrow/pull/8890#issuecomment-742715663\n\n\n   https://issues.apache.org/jira/browse/ARROW-10796\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-10T18:40:46.921+0000",
                    "updated": "2020-12-10T18:40:46.921+0000",
                    "started": "2020-12-10T18:40:46.921+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "522842",
                    "issueId": "13344011"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344011/worklog/522951",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kou commented on a change in pull request #8890:\nURL: https://github.com/apache/arrow/pull/8890#discussion_r540613034\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_sort.cc\n##########\n@@ -834,6 +1355,10 @@ class TableRadixSorter {\n // Sort a table using a single sort and multiple-key comparisons.\n class MultipleKeyTableSorter : public TypeVisitor {\n  private:\n+  // TODO instead of resolving chunks for each column independently, we could\n+  // split the table into RecordBatches and pay the cost of chunked indexing\n+  // at the first column only.\n\nReview comment:\n       Can we always do it?\r\n   My understanding that each chunked array in a table can have different number of chunks. For example, the table is valid:\r\n   \r\n   ```text\r\n   a: [[0, 1], [2, 3, 4]]\r\n   b: [[10], [11, 12], [13], [14]]\r\n   ```\r\n   \r\n   I'm not sure we can split the table into record batches efficiently.\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_sort.cc\n##########\n@@ -804,6 +814,517 @@ class ChunkedArraySorter : public TypeVisitor {\n   ExecContext* ctx_;\n };\n \n+// ----------------------------------------------------------------------\n+// Record batch sorting implementation(s)\n+\n+// Visit contiguous ranges of equal values.  All entries are assumed\n+// to be non-null.\n+template <typename ArrayType, typename Visitor>\n+void VisitConstantRanges(const ArrayType& array, uint64_t* indices_begin,\n+                         uint64_t* indices_end, Visitor&& visit) {\n+  if (indices_begin == indices_end) {\n+    return;\n+  }\n+  auto range_start = indices_begin;\n+  auto range_cur = range_start;\n+  auto last_value = array.GetView(*range_cur);\n+  while (++range_cur != indices_end) {\n+    auto v = array.GetView(*range_cur);\n+    if (v != last_value) {\n+      visit(range_start, range_cur);\n+      range_start = range_cur;\n+      last_value = v;\n+    }\n+  }\n+  if (range_start != range_cur) {\n+    visit(range_start, range_cur);\n+  }\n+}\n+\n+// A sorter for a single column of a RecordBatch, deferring to the next column\n+// for ranges of equal values.\n+class RecordBatchColumnSorter {\n+ public:\n+  explicit RecordBatchColumnSorter(RecordBatchColumnSorter* next_column = nullptr)\n+      : next_column_(next_column) {}\n+  virtual ~RecordBatchColumnSorter() {}\n+\n+  virtual void SortRange(uint64_t* indices_begin, uint64_t* indices_end) = 0;\n+\n+ protected:\n+  RecordBatchColumnSorter* next_column_;\n+};\n+\n+template <typename Type>\n+class ConcreteRecordBatchColumnSorter : public RecordBatchColumnSorter {\n+ public:\n+  using ArrayType = typename TypeTraits<Type>::ArrayType;\n+\n+  ConcreteRecordBatchColumnSorter(std::shared_ptr<Array> array, SortOrder order,\n+                                  RecordBatchColumnSorter* next_column = nullptr)\n+      : RecordBatchColumnSorter(next_column),\n+        owned_array_(std::move(array)),\n+        array_(checked_cast<const ArrayType&>(*owned_array_)),\n+        order_(order),\n+        null_count_(array_.null_count()) {}\n+\n+  void SortRange(uint64_t* indices_begin, uint64_t* indices_end) {\n+    constexpr int64_t offset = 0;\n+    uint64_t* nulls_begin;\n+    if (null_count_ == 0) {\n+      nulls_begin = indices_end;\n+    } else {\n+      // NOTE that null_count_ is merely an upper bound on the number of nulls\n+      // in this particular range.\n+      nulls_begin = PartitionNullsOnly<StablePartitioner>(indices_begin, indices_end,\n+                                                          array_, offset);\n+      DCHECK_LE(indices_end - nulls_begin, null_count_);\n+    }\n+    uint64_t* null_likes_begin = PartitionNullLikes<ArrayType, StablePartitioner>(\n+        indices_begin, nulls_begin, array_, offset);\n+\n+    // TODO This is roughly the same as ArrayCompareSorter.\n+    // Also, we would like to use a counting sort if possible.  This requires\n+    // a counting sort compatible with indirect indexing.\n+    if (order_ == SortOrder::Ascending) {\n+      std::stable_sort(\n+          indices_begin, null_likes_begin, [&](uint64_t left, uint64_t right) {\n+            return array_.GetView(left - offset) < array_.GetView(right - offset);\n+          });\n+    } else {\n+      std::stable_sort(\n+          indices_begin, null_likes_begin, [&](uint64_t left, uint64_t right) {\n+            // We don't use 'left > right' here to reduce required operator.\n+            // If we use 'right < left' here, '<' is only required.\n+            return array_.GetView(right - offset) < array_.GetView(left - offset);\n+          });\n+    }\n+\n+    if (next_column_ != nullptr) {\n+      // Visit all ranges of equal values in this column and sort them on\n+      // the next column.\n+      SortNextColumn(null_likes_begin, nulls_begin);\n+      SortNextColumn(nulls_begin, indices_end);\n+      VisitConstantRanges(array_, indices_begin, null_likes_begin,\n+                          [&](uint64_t* range_start, uint64_t* range_end) {\n+                            SortNextColumn(range_start, range_end);\n+                          });\n+    }\n+  }\n+\n+  void SortNextColumn(uint64_t* indices_begin, uint64_t* indices_end) {\n+    // Avoid the cost of a virtual method call in trivial cases\n+    if (indices_end - indices_begin > 1) {\n+      next_column_->SortRange(indices_begin, indices_end);\n+    }\n+  }\n+\n+ protected:\n+  const std::shared_ptr<Array> owned_array_;\n+  const ArrayType& array_;\n+  const SortOrder order_;\n+  const int64_t null_count_;\n+};\n+\n+// Sort a batch using a single-pass left-to-right radix sort.\n+class RadixRecordBatchSorter {\n+ public:\n+  RadixRecordBatchSorter(uint64_t* indices_begin, uint64_t* indices_end,\n+                         const RecordBatch& batch, const SortOptions& options)\n+      : batch_(batch),\n+        options_(options),\n+        indices_begin_(indices_begin),\n+        indices_end_(indices_end) {}\n+\n+  Status Sort() {\n+    ARROW_ASSIGN_OR_RAISE(const auto sort_keys,\n+                          ResolveSortKeys(batch_, options_.sort_keys));\n+\n+    // Create column sorters from right to left\n+    std::vector<std::unique_ptr<RecordBatchColumnSorter>> column_sorts(sort_keys.size());\n+    RecordBatchColumnSorter* next_column = nullptr;\n+    for (int64_t i = static_cast<int64_t>(sort_keys.size() - 1); i >= 0; --i) {\n+      ColumnSortFactory factory(sort_keys[i], next_column);\n+      ARROW_ASSIGN_OR_RAISE(column_sorts[i], factory.MakeColumnSort());\n+      next_column = column_sorts[i].get();\n+    }\n+\n+    // Sort from left to right\n+    column_sorts.front()->SortRange(indices_begin_, indices_end_);\n+    return Status::OK();\n+  }\n+\n+ protected:\n+  struct ResolvedSortKey {\n+    std::shared_ptr<Array> array;\n+    SortOrder order;\n+  };\n+\n+  struct ColumnSortFactory {\n+    ColumnSortFactory(const ResolvedSortKey& sort_key,\n+                      RecordBatchColumnSorter* next_column)\n+        : physical_type(GetPhysicalType(sort_key.array->type())),\n+          array(GetPhysicalArray(*sort_key.array, physical_type)),\n+          order(sort_key.order),\n+          next_column(next_column) {}\n+\n+    Result<std::unique_ptr<RecordBatchColumnSorter>> MakeColumnSort() {\n+      RETURN_NOT_OK(VisitTypeInline(*physical_type, this));\n+      DCHECK_NE(result, nullptr);\n+      return std::move(result);\n+    }\n+\n+#define VISIT(TYPE) \\\n+  Status Visit(const TYPE& type) { return VisitGeneric(type); }\n+\n+    VISIT_PHYSICAL_TYPES(VISIT)\n+\n+#undef VISIT\n+\n+    Status Visit(const DataType& type) {\n+      return Status::TypeError(\"Unsupported type for RecordBatch sorting: \",\n+                               type.ToString());\n+    }\n+\n+    template <typename Type>\n+    Status VisitGeneric(const Type&) {\n+      result.reset(new ConcreteRecordBatchColumnSorter<Type>(array, order, next_column));\n+      return Status::OK();\n+    }\n+\n+    std::shared_ptr<DataType> physical_type;\n+    std::shared_ptr<Array> array;\n+    SortOrder order;\n+    RecordBatchColumnSorter* next_column;\n+    std::unique_ptr<RecordBatchColumnSorter> result;\n+  };\n+\n+  static Result<std::vector<ResolvedSortKey>> ResolveSortKeys(\n+      const RecordBatch& batch, const std::vector<SortKey>& sort_keys) {\n+    std::vector<ResolvedSortKey> resolved;\n+    resolved.reserve(sort_keys.size());\n+    for (const auto& sort_key : sort_keys) {\n+      auto array = batch.GetColumnByName(sort_key.name);\n+      if (!array) {\n+        return Status::Invalid(\"Nonexistent sort key column: \", sort_key.name);\n+      }\n+      resolved.push_back({std::move(array), sort_key.order});\n+    }\n+    return resolved;\n+  }\n+\n+  const RecordBatch& batch_;\n+  const SortOptions& options_;\n+  uint64_t* indices_begin_;\n+  uint64_t* indices_end_;\n+};\n+\n+// Compare two records in the same RecordBatch or Table\n+// (indexing is handled through ResolvedSortKey)\n+template <typename ResolvedSortKey>\n+class MultipleKeyComparator {\n+ public:\n+  explicit MultipleKeyComparator(const std::vector<ResolvedSortKey>& sort_keys)\n+      : sort_keys_(sort_keys) {}\n+\n+  Status status() const { return status_; }\n+\n+  // Returns true if the left-th value should be ordered before the\n+  // right-th value, false otherwise. The start_sort_key_index-th\n+  // sort key and subsequent sort keys are used for comparison.\n+  bool Compare(uint64_t left, uint64_t right, size_t start_sort_key_index) {\n+    current_left_ = left;\n+    current_right_ = right;\n+    current_compared_ = 0;\n+    auto num_sort_keys = sort_keys_.size();\n+    for (size_t i = start_sort_key_index; i < num_sort_keys; ++i) {\n+      current_sort_key_index_ = i;\n+      status_ = VisitTypeInline(*sort_keys_[i].type, this);\n+      // If the left value equals to the right value, we need to\n+      // continue to sort.\n+      if (current_compared_ != 0) {\n+        break;\n+      }\n+    }\n+    return current_compared_ < 0;\n+  }\n+\n+#define VISIT(TYPE)                          \\\n+  Status Visit(const TYPE& type) {           \\\n+    current_compared_ = CompareType<TYPE>(); \\\n+    return Status::OK();                     \\\n+  }\n+\n+  VISIT_PHYSICAL_TYPES(VISIT)\n+\n+#undef VISIT\n+\n+  Status Visit(const DataType& type) {\n+    return Status::TypeError(\"Unsupported type for RecordBatch sorting: \",\n+                             type.ToString());\n+  }\n+\n+ private:\n+  // Compares two records in the same table and returns -1, 0 or 1.\n+  //\n+  // -1: The left is less than the right.\n+  // 0: The left equals to the right.\n+  // 1: The left is greater than the right.\n+  //\n+  // This supports null and NaN. Null is processed in this and NaN\n+  // is processed in CompareTypeValue().\n+  template <typename Type>\n+  int32_t CompareType() {\n+    using ArrayType = typename TypeTraits<Type>::ArrayType;\n+    const auto& sort_key = sort_keys_[current_sort_key_index_];\n+    auto order = sort_key.order;\n+    const auto chunk_left = sort_key.template GetChunk<ArrayType>(current_left_);\n+    const auto chunk_right = sort_key.template GetChunk<ArrayType>(current_right_);\n+    if (sort_key.null_count > 0) {\n+      auto is_null_left = chunk_left.IsNull();\n+      auto is_null_right = chunk_right.IsNull();\n+      if (is_null_left && is_null_right) {\n+        return 0;\n+      } else if (is_null_left) {\n+        return 1;\n+      } else if (is_null_right) {\n+        return -1;\n+      }\n+    }\n+    return CompareTypeValue<Type>(chunk_left, chunk_right, order);\n+  }\n+\n+  // For non-float types. Value is never NaN.\n+  template <typename Type>\n+  enable_if_t<!is_floating_type<Type>::value, int32_t> CompareTypeValue(\n+      const ResolvedChunk<typename TypeTraits<Type>::ArrayType>& chunk_left,\n+      const ResolvedChunk<typename TypeTraits<Type>::ArrayType>& chunk_right,\n+      const SortOrder order) {\n+    const auto left = chunk_left.GetView();\n+    const auto right = chunk_right.GetView();\n+    int32_t compared;\n+    if (left == right) {\n+      compared = 0;\n+    } else if (left > right) {\n+      compared = 1;\n+    } else {\n+      compared = -1;\n+    }\n+    if (order == SortOrder::Descending) {\n+      compared = -compared;\n+    }\n+    return compared;\n+  }\n+\n+  // For float types. Value may be NaN.\n+  template <typename Type>\n+  enable_if_t<is_floating_type<Type>::value, int32_t> CompareTypeValue(\n+      const ResolvedChunk<typename TypeTraits<Type>::ArrayType>& chunk_left,\n+      const ResolvedChunk<typename TypeTraits<Type>::ArrayType>& chunk_right,\n+      const SortOrder order) {\n+    const auto left = chunk_left.GetView();\n+    const auto right = chunk_right.GetView();\n+    auto is_nan_left = std::isnan(left);\n+    auto is_nan_right = std::isnan(right);\n+    if (is_nan_left && is_nan_right) {\n+      return 0;\n+    } else if (is_nan_left) {\n+      return 1;\n+    } else if (is_nan_right) {\n+      return -1;\n+    }\n+    int32_t compared;\n+    if (left == right) {\n+      compared = 0;\n+    } else if (left > right) {\n+      compared = 1;\n+    } else {\n+      compared = -1;\n+    }\n+    if (order == SortOrder::Descending) {\n+      compared = -compared;\n+    }\n+    return compared;\n+  }\n+\n+  const std::vector<ResolvedSortKey>& sort_keys_;\n+  Status status_;\n+  int64_t current_left_;\n+  int64_t current_right_;\n+  size_t current_sort_key_index_;\n+  int32_t current_compared_;\n+};\n+\n+// Sort a batch using a single sort and multiple-key comparisons.\n+class MultipleKeyRecordBatchSorter : public TypeVisitor {\n+ private:\n+  // Preprocessed sort key.\n+  struct ResolvedSortKey {\n+    ResolvedSortKey(const std::shared_ptr<Array>& array, const SortOrder order)\n+        : type(GetPhysicalType(array->type())),\n+          owned_array(GetPhysicalArray(*array, type)),\n+          array(*owned_array),\n+          order(order),\n+          null_count(array->null_count()) {}\n+\n+    template <typename ArrayType>\n+    ResolvedChunk<ArrayType> GetChunk(int64_t index) const {\n+      return {&checked_cast<const ArrayType&>(array), index};\n+    }\n+\n+    const std::shared_ptr<DataType> type;\n+    std::shared_ptr<Array> owned_array;\n+    const Array& array;\n+    SortOrder order;\n+    int64_t null_count;\n+  };\n+\n+  using Comparator = MultipleKeyComparator<ResolvedSortKey>;\n+\n+ public:\n+  MultipleKeyRecordBatchSorter(uint64_t* indices_begin, uint64_t* indices_end,\n+                               const RecordBatch& batch, const SortOptions& options)\n+      : indices_begin_(indices_begin),\n+        indices_end_(indices_end),\n+        sort_keys_(ResolveSortKeys(batch, options.sort_keys, &status_)),\n+        comparator_(sort_keys_) {}\n+\n+  // This is optimized for the first sort key. The first sort key sort\n+  // is processed in this class. The second and following sort keys\n+  // are processed in Comparator.\n+  Status Sort() {\n+    RETURN_NOT_OK(status_);\n+    return sort_keys_[0].type->Accept(this);\n+  }\n+\n+#define VISIT(TYPE) \\\n+  Status Visit(const TYPE& type) override { return SortInternal<TYPE>(); }\n+\n+  VISIT_PHYSICAL_TYPES(VISIT)\n+\n+#undef VISIT\n+\n+ private:\n+  static std::vector<ResolvedSortKey> ResolveSortKeys(\n+      const RecordBatch& batch, const std::vector<SortKey>& sort_keys, Status* status) {\n+    std::vector<ResolvedSortKey> resolved;\n+    for (const auto& sort_key : sort_keys) {\n+      auto array = batch.GetColumnByName(sort_key.name);\n+      if (!array) {\n+        *status = Status::Invalid(\"Nonexistent sort key column: \", sort_key.name);\n+        break;\n+      }\n+      resolved.emplace_back(array, sort_key.order);\n+    }\n+    return resolved;\n+  }\n+\n+  template <typename Type>\n+  Status SortInternal() {\n+    using ArrayType = typename TypeTraits<Type>::ArrayType;\n+\n+    auto& comparator = comparator_;\n+    const auto& first_sort_key = sort_keys_[0];\n+    const ArrayType& array = checked_cast<const ArrayType&>(first_sort_key.array);\n+    auto nulls_begin = indices_end_;\n+    nulls_begin = PartitionNullsInternal<Type>(first_sort_key);\n+    // Sort first-key non-nulls\n+    std::stable_sort(indices_begin_, nulls_begin, [&](uint64_t left, uint64_t right) {\n+      // Both values are never null nor NaN\n+      // (otherwise they've been partitioned away above).\n+      const auto value_left = array.GetView(left);\n+      const auto value_right = array.GetView(right);\n+      if (value_left != value_right) {\n+        bool compared = value_left < value_right;\n+        if (first_sort_key.order == SortOrder::Ascending) {\n+          return compared;\n+        } else {\n+          return !compared;\n+        }\n+      }\n+      // If the left value equals to the right value,\n+      // we need to compare the second and following\n+      // sort keys.\n+      return comparator.Compare(left, right, 1);\n+    });\n+    return comparator_.status();\n+  }\n+\n+  // Behaves like PatitionNulls() but this supports multiple sort keys.\n+  //\n+  // For non-float types.\n+  template <typename Type>\n+  enable_if_t<!is_floating_type<Type>::value, uint64_t*> PartitionNullsInternal(\n+      const ResolvedSortKey& first_sort_key) {\n+    using ArrayType = typename TypeTraits<Type>::ArrayType;\n+    if (first_sort_key.null_count == 0) {\n+      return indices_end_;\n+    }\n+    const ArrayType& array = checked_cast<const ArrayType&>(first_sort_key.array);\n+    StablePartitioner partitioner;\n+    auto nulls_begin = partitioner(indices_begin_, indices_end_,\n+                                   [&](uint64_t index) { return !array.IsNull(index); });\n+    // Sort all nulls by second and following sort keys\n+    // TODO: could we instead run an independent sort from the second key on\n+    // this slice?\n\nReview comment:\n       Like `ConcreteRecordBatchColumnSorter`'s `next_column_`?\r\n   It would work.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-11T01:04:09.249+0000",
                    "updated": "2020-12-11T01:04:09.249+0000",
                    "started": "2020-12-11T01:04:09.249+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "522951",
                    "issueId": "13344011"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344011/worklog/523738",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #8890:\nURL: https://github.com/apache/arrow/pull/8890#discussion_r542191830\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/vector_sort.cc\n##########\n@@ -834,6 +1355,10 @@ class TableRadixSorter {\n // Sort a table using a single sort and multiple-key comparisons.\n class MultipleKeyTableSorter : public TypeVisitor {\n  private:\n+  // TODO instead of resolving chunks for each column independently, we could\n+  // split the table into RecordBatches and pay the cost of chunked indexing\n+  // at the first column only.\n\nReview comment:\n       `TableBatchReader` can be used for that.\n\n\n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-14T08:23:44.474+0000",
                    "updated": "2020-12-14T08:23:44.474+0000",
                    "started": "2020-12-14T08:23:44.474+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "523738",
                    "issueId": "13344011"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344011/worklog/523739",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #8890:\nURL: https://github.com/apache/arrow/pull/8890\n\n\n   \n\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2020-12-14T08:24:27.674+0000",
                    "updated": "2020-12-14T08:24:27.674+0000",
                    "started": "2020-12-14T08:24:27.674+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "523739",
                    "issueId": "13344011"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/5",
            "id": "5",
            "description": "General wishlist item.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Wish",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 3600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@6fdc0b54[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@49975516[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3f7c1d4c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4cb0c050[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@12b54db5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@becd190[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@54a52bdc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1e5dd358[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@26bdedc3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@4b30d8d5[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@36b6f1a4[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@46813339[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 3600,
        "customfield_12312520": null,
        "customfield_12312521": "Mon Dec 14 08:24:14 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-12-14T08:24:14.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-10796/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2020-12-03T12:41:27.000+0000",
        "updated": "2020-12-14T08:26:28.000+0000",
        "timeoriginalestimate": null,
        "description": "A RecordBatch is currently sorted as a one-chunk Table. It is suboptimal as it's paying the chunk resolution cost even though it's not necessary.\r\n\r\nA dedicated RecordBatch sort may also form the basis for a faster Table sort (first sort individual batches, then use merge sort along the sorted batches).\r\n",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 3600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Investigate RecordBatch sort performance",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13344011/comment/17248796",
                    "id": "17248796",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 8890\n[https://github.com/apache/arrow/pull/8890]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2020-12-14T08:24:14.764+0000",
                    "updated": "2020-12-14T08:24:14.764+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0l64g:",
        "customfield_12314139": null
    }
}