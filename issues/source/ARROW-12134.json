{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13368402",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368402",
    "key": "ARROW-12134",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349493",
                "id": "12349493",
                "description": "",
                "name": "4.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-04-26"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12611751",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12611751",
                "type": {
                    "id": "12310460",
                    "name": "Child-Issue",
                    "inward": "is a child of",
                    "outward": "is a parent of",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310460"
                },
                "inwardIssue": {
                    "id": "13042654",
                    "key": "ARROW-555",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13042654",
                    "fields": {
                        "summary": "[C++] String algorithm library for StringArray/BinaryArray",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12611753",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12611753",
                "type": {
                    "id": "12310000",
                    "name": "Duplicate",
                    "inward": "is duplicated by",
                    "outward": "duplicates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"
                },
                "inwardIssue": {
                    "id": "13368403",
                    "key": "ARROW-12135",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368403",
                    "fields": {
                        "summary": "[C++] Add match_regex kernel",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12616697",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12616697",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13381934",
                    "key": "ARROW-12952",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381934",
                    "fields": {
                        "summary": "[C++] Add regex count kernel",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            },
            {
                "id": "12611768",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12611768",
                "type": {
                    "id": "10001",
                    "name": "dependent",
                    "inward": "is depended upon by",
                    "outward": "depends upon",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10001"
                },
                "inwardIssue": {
                    "id": "13368438",
                    "key": "ARROW-12141",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368438",
                    "fields": {
                        "summary": "[R] Bindings for grepl",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
                            "id": "2",
                            "description": "A new feature of the product, which has yet to be developed.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
                            "name": "New Feature",
                            "subtask": false,
                            "avatarId": 21141
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
            "name": "npr",
            "key": "npr",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
            },
            "displayName": "Neal Richardson",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 8400,
            "total": 8400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12134/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 14,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368402/worklog/573608",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm opened a new pull request #9838:\nURL: https://github.com/apache/arrow/pull/9838\n\n\n   For consistency with match_substring, this is the equivalent of Python's re.search(), not re.match().\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-29T17:07:32.236+0000",
                    "updated": "2021-03-29T17:07:32.236+0000",
                    "started": "2021-03-29T17:07:32.236+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "573608",
                    "issueId": "13368402"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368402/worklog/573819",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #9838:\nURL: https://github.com/apache/arrow/pull/9838#issuecomment-809823570\n\n\n   https://issues.apache.org/jira/browse/ARROW-12134\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-30T00:55:31.134+0000",
                    "updated": "2021-03-30T00:55:31.134+0000",
                    "started": "2021-03-30T00:55:31.133+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "573819",
                    "issueId": "13368402"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368402/worklog/573874",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #9838:\nURL: https://github.com/apache/arrow/pull/9838#discussion_r603769358\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -411,40 +411,104 @@ void TransformMatchSubstring(const uint8_t* pattern, int64_t pattern_length,\n \n using MatchSubstringState = OptionsWrapper<MatchSubstringOptions>;\n \n-template <typename Type>\n+template <typename Type, template <typename offset_type> class Matcher>\n struct MatchSubstring {\n   using offset_type = typename Type::offset_type;\n   static void Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n-    MatchSubstringOptions arg = MatchSubstringState::Get(ctx);\n-    const uint8_t* pat = reinterpret_cast<const uint8_t*>(arg.pattern.c_str());\n-    const int64_t pat_size = arg.pattern.length();\n+    // TODO Cache matcher accross invocations (for regex compilation)\n\nReview comment:\n       `accross` -> `across`?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-30T04:21:49.262+0000",
                    "updated": "2021-03-30T04:21:49.262+0000",
                    "started": "2021-03-30T04:21:49.261+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "573874",
                    "issueId": "13368402"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368402/worklog/573876",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #9838:\nURL: https://github.com/apache/arrow/pull/9838#discussion_r603771940\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -411,40 +411,104 @@ void TransformMatchSubstring(const uint8_t* pattern, int64_t pattern_length,\n \n using MatchSubstringState = OptionsWrapper<MatchSubstringOptions>;\n \n-template <typename Type>\n+template <typename Type, template <typename offset_type> class Matcher>\n struct MatchSubstring {\n   using offset_type = typename Type::offset_type;\n   static void Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n-    MatchSubstringOptions arg = MatchSubstringState::Get(ctx);\n-    const uint8_t* pat = reinterpret_cast<const uint8_t*>(arg.pattern.c_str());\n-    const int64_t pat_size = arg.pattern.length();\n+    // TODO Cache matcher accross invocations (for regex compilation)\n+    Matcher<offset_type> matcher(ctx, MatchSubstringState::Get(ctx));\n+    if (ctx->HasError()) return;\n     StringBoolTransform<Type>(\n         ctx, batch,\n-        [pat, pat_size](const void* offsets, const uint8_t* data, int64_t length,\n-                        int64_t output_offset, uint8_t* output) {\n-          TransformMatchSubstring<offset_type>(\n-              pat, pat_size, reinterpret_cast<const offset_type*>(offsets), data, length,\n-              output_offset, output);\n+        [&matcher](const void* offsets, const uint8_t* data, int64_t length,\n+                   int64_t output_offset, uint8_t* output) {\n+          matcher.Match(reinterpret_cast<const offset_type*>(offsets), data, length,\n+                        output_offset, output);\n         },\n         out);\n   }\n };\n \n+template <typename offset_type>\n+struct PlainSubstringMatcher {\n+  const MatchSubstringOptions& options_;\n+\n+  PlainSubstringMatcher(KernelContext* ctx, const MatchSubstringOptions& options)\n+      : options_(options) {}\n+\n+  void Match(const offset_type* offsets, const uint8_t* data, int64_t length,\n+             int64_t output_offset, uint8_t* output) {\n+    const uint8_t* pat = reinterpret_cast<const uint8_t*>(options_.pattern.c_str());\n+    const int64_t pat_size = options_.pattern.length();\n+    TransformMatchSubstring<offset_type>(pat, pat_size, offsets, data, length,\n+                                         output_offset, output);\n+  }\n+};\n+\n+template <typename offset_type>\n+struct RegexSubstringMatcher {\n+  const MatchSubstringOptions& options_;\n+  const RE2 regex_match_;\n+\n+  RegexSubstringMatcher(KernelContext* ctx, const MatchSubstringOptions& options)\n+      : options_(options), regex_match_(options_.pattern) {\n+    if (!regex_match_.ok()) {\n+      ctx->SetStatus(Status::Invalid(\"Regular expression error\"));\n+    }\n+  }\n+\n+  void Match(const offset_type* offsets, const uint8_t* data, int64_t length,\n+             int64_t output_offset, uint8_t* output) {\n+    FirstTimeBitmapWriter bitmap_writer(output, output_offset, length);\n+    for (int64_t i = 0; i < length; ++i) {\n+      const char* current_data = reinterpret_cast<const char*>(data + offsets[i]);\n+      int64_t current_length = offsets[i + 1] - offsets[i];\n+      auto piece = re2::StringPiece(current_data, current_length);\n+      if (re2::RE2::PartialMatch(piece, regex_match_)) {\n+        bitmap_writer.Set();\n+      }\n+      bitmap_writer.Next();\n+    }\n+    bitmap_writer.Finish();\n+  }\n+};\n+\n const FunctionDoc match_substring_doc(\n     \"Match strings against literal pattern\",\n     (\"For each string in `strings`, emit true iff it contains a given pattern.\\n\"\n      \"Null inputs emit null.  The pattern must be given in MatchSubstringOptions.\"),\n     {\"strings\"}, \"MatchSubstringOptions\");\n \n+const FunctionDoc match_substring_regex_doc(\n+    \"Match strings against regex pattern\",\n+    (\"For each string in `strings`, emit true iff it matches a given pattern at any \"\n+     \"position.\\n\"\n+     \"Null inputs emit null.  The pattern must be given in MatchSubstringOptions.\"),\n+    {\"strings\"}, \"MatchSubstringOptions\");\n+\n void AddMatchSubstring(FunctionRegistry* registry) {\n-  auto func = std::make_shared<ScalarFunction>(\"match_substring\", Arity::Unary(),\n-                                               &match_substring_doc);\n-  auto exec_32 = MatchSubstring<StringType>::Exec;\n-  auto exec_64 = MatchSubstring<LargeStringType>::Exec;\n-  DCHECK_OK(func->AddKernel({utf8()}, boolean(), exec_32, MatchSubstringState::Init));\n-  DCHECK_OK(\n-      func->AddKernel({large_utf8()}, boolean(), exec_64, MatchSubstringState::Init));\n-  DCHECK_OK(registry->AddFunction(std::move(func)));\n+  {\n+    auto func = std::make_shared<ScalarFunction>(\"match_substring\", Arity::Unary(),\n+                                                 &match_substring_doc);\n+    auto exec_32 = MatchSubstring<StringType, PlainSubstringMatcher>::Exec;\n+    auto exec_64 = MatchSubstring<LargeStringType, PlainSubstringMatcher>::Exec;\n+    DCHECK_OK(func->AddKernel({utf8()}, boolean(), exec_32, MatchSubstringState::Init));\n+    DCHECK_OK(\n+        func->AddKernel({large_utf8()}, boolean(), exec_64, MatchSubstringState::Init));\n+    DCHECK_OK(registry->AddFunction(std::move(func)));\n+  }\n+#ifdef ARROW_WITH_RE2\n+  {\n+    auto func = std::make_shared<ScalarFunction>(\"match_substring_regex\", Arity::Unary(),\n\nReview comment:\n       New functions need be documented in https://github.com/apache/arrow/blob/master/docs/source/cpp/compute.rst\r\n   \r\n   @pitrou , should we also document new functions in python api document?\r\n   https://github.com/apache/arrow/blob/master/docs/source/python/api/compute.rst\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-30T04:28:31.249+0000",
                    "updated": "2021-03-30T04:28:31.249+0000",
                    "started": "2021-03-30T04:28:31.249+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "573876",
                    "issueId": "13368402"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368402/worklog/573902",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9838:\nURL: https://github.com/apache/arrow/pull/9838#discussion_r603830221\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -411,40 +411,104 @@ void TransformMatchSubstring(const uint8_t* pattern, int64_t pattern_length,\n \n using MatchSubstringState = OptionsWrapper<MatchSubstringOptions>;\n \n-template <typename Type>\n+template <typename Type, template <typename offset_type> class Matcher>\n struct MatchSubstring {\n   using offset_type = typename Type::offset_type;\n   static void Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n-    MatchSubstringOptions arg = MatchSubstringState::Get(ctx);\n-    const uint8_t* pat = reinterpret_cast<const uint8_t*>(arg.pattern.c_str());\n-    const int64_t pat_size = arg.pattern.length();\n+    // TODO Cache matcher accross invocations (for regex compilation)\n+    Matcher<offset_type> matcher(ctx, MatchSubstringState::Get(ctx));\n+    if (ctx->HasError()) return;\n     StringBoolTransform<Type>(\n         ctx, batch,\n-        [pat, pat_size](const void* offsets, const uint8_t* data, int64_t length,\n-                        int64_t output_offset, uint8_t* output) {\n-          TransformMatchSubstring<offset_type>(\n-              pat, pat_size, reinterpret_cast<const offset_type*>(offsets), data, length,\n-              output_offset, output);\n+        [&matcher](const void* offsets, const uint8_t* data, int64_t length,\n+                   int64_t output_offset, uint8_t* output) {\n+          matcher.Match(reinterpret_cast<const offset_type*>(offsets), data, length,\n+                        output_offset, output);\n         },\n         out);\n   }\n };\n \n+template <typename offset_type>\n+struct PlainSubstringMatcher {\n+  const MatchSubstringOptions& options_;\n+\n+  PlainSubstringMatcher(KernelContext* ctx, const MatchSubstringOptions& options)\n+      : options_(options) {}\n+\n+  void Match(const offset_type* offsets, const uint8_t* data, int64_t length,\n+             int64_t output_offset, uint8_t* output) {\n+    const uint8_t* pat = reinterpret_cast<const uint8_t*>(options_.pattern.c_str());\n+    const int64_t pat_size = options_.pattern.length();\n+    TransformMatchSubstring<offset_type>(pat, pat_size, offsets, data, length,\n+                                         output_offset, output);\n+  }\n+};\n+\n+template <typename offset_type>\n+struct RegexSubstringMatcher {\n+  const MatchSubstringOptions& options_;\n+  const RE2 regex_match_;\n+\n+  RegexSubstringMatcher(KernelContext* ctx, const MatchSubstringOptions& options)\n+      : options_(options), regex_match_(options_.pattern) {\n+    if (!regex_match_.ok()) {\n+      ctx->SetStatus(Status::Invalid(\"Regular expression error\"));\n+    }\n+  }\n+\n+  void Match(const offset_type* offsets, const uint8_t* data, int64_t length,\n+             int64_t output_offset, uint8_t* output) {\n+    FirstTimeBitmapWriter bitmap_writer(output, output_offset, length);\n+    for (int64_t i = 0; i < length; ++i) {\n+      const char* current_data = reinterpret_cast<const char*>(data + offsets[i]);\n+      int64_t current_length = offsets[i + 1] - offsets[i];\n+      auto piece = re2::StringPiece(current_data, current_length);\n+      if (re2::RE2::PartialMatch(piece, regex_match_)) {\n+        bitmap_writer.Set();\n+      }\n+      bitmap_writer.Next();\n+    }\n+    bitmap_writer.Finish();\n+  }\n+};\n+\n const FunctionDoc match_substring_doc(\n     \"Match strings against literal pattern\",\n     (\"For each string in `strings`, emit true iff it contains a given pattern.\\n\"\n      \"Null inputs emit null.  The pattern must be given in MatchSubstringOptions.\"),\n     {\"strings\"}, \"MatchSubstringOptions\");\n \n+const FunctionDoc match_substring_regex_doc(\n+    \"Match strings against regex pattern\",\n+    (\"For each string in `strings`, emit true iff it matches a given pattern at any \"\n+     \"position.\\n\"\n+     \"Null inputs emit null.  The pattern must be given in MatchSubstringOptions.\"),\n+    {\"strings\"}, \"MatchSubstringOptions\");\n+\n void AddMatchSubstring(FunctionRegistry* registry) {\n-  auto func = std::make_shared<ScalarFunction>(\"match_substring\", Arity::Unary(),\n-                                               &match_substring_doc);\n-  auto exec_32 = MatchSubstring<StringType>::Exec;\n-  auto exec_64 = MatchSubstring<LargeStringType>::Exec;\n-  DCHECK_OK(func->AddKernel({utf8()}, boolean(), exec_32, MatchSubstringState::Init));\n-  DCHECK_OK(\n-      func->AddKernel({large_utf8()}, boolean(), exec_64, MatchSubstringState::Init));\n-  DCHECK_OK(registry->AddFunction(std::move(func)));\n+  {\n+    auto func = std::make_shared<ScalarFunction>(\"match_substring\", Arity::Unary(),\n+                                                 &match_substring_doc);\n+    auto exec_32 = MatchSubstring<StringType, PlainSubstringMatcher>::Exec;\n+    auto exec_64 = MatchSubstring<LargeStringType, PlainSubstringMatcher>::Exec;\n+    DCHECK_OK(func->AddKernel({utf8()}, boolean(), exec_32, MatchSubstringState::Init));\n+    DCHECK_OK(\n+        func->AddKernel({large_utf8()}, boolean(), exec_64, MatchSubstringState::Init));\n+    DCHECK_OK(registry->AddFunction(std::move(func)));\n+  }\n+#ifdef ARROW_WITH_RE2\n+  {\n+    auto func = std::make_shared<ScalarFunction>(\"match_substring_regex\", Arity::Unary(),\n\nReview comment:\n       Ah, good point! We should indeed add the names there to auto-generate the API docs. I keep forgetting about it, so there's probably more to add.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-30T06:58:05.460+0000",
                    "updated": "2021-03-30T06:58:05.460+0000",
                    "started": "2021-03-30T06:58:05.459+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "573902",
                    "issueId": "13368402"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368402/worklog/574514",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "cyb70289 commented on a change in pull request #9838:\nURL: https://github.com/apache/arrow/pull/9838#discussion_r604543823\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -411,40 +411,104 @@ void TransformMatchSubstring(const uint8_t* pattern, int64_t pattern_length,\n \n using MatchSubstringState = OptionsWrapper<MatchSubstringOptions>;\n \n-template <typename Type>\n+template <typename Type, template <typename offset_type> class Matcher>\n struct MatchSubstring {\n   using offset_type = typename Type::offset_type;\n   static void Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n-    MatchSubstringOptions arg = MatchSubstringState::Get(ctx);\n-    const uint8_t* pat = reinterpret_cast<const uint8_t*>(arg.pattern.c_str());\n-    const int64_t pat_size = arg.pattern.length();\n+    // TODO Cache matcher across invocations (for regex compilation)\n+    Matcher<offset_type> matcher(ctx, MatchSubstringState::Get(ctx));\n+    if (ctx->HasError()) return;\n     StringBoolTransform<Type>(\n         ctx, batch,\n-        [pat, pat_size](const void* offsets, const uint8_t* data, int64_t length,\n-                        int64_t output_offset, uint8_t* output) {\n-          TransformMatchSubstring<offset_type>(\n-              pat, pat_size, reinterpret_cast<const offset_type*>(offsets), data, length,\n-              output_offset, output);\n+        [&matcher](const void* offsets, const uint8_t* data, int64_t length,\n+                   int64_t output_offset, uint8_t* output) {\n+          matcher.Match(reinterpret_cast<const offset_type*>(offsets), data, length,\n+                        output_offset, output);\n         },\n         out);\n   }\n };\n \n+template <typename offset_type>\n+struct PlainSubstringMatcher {\n+  const MatchSubstringOptions& options_;\n+\n+  PlainSubstringMatcher(KernelContext* ctx, const MatchSubstringOptions& options)\n+      : options_(options) {}\n+\n+  void Match(const offset_type* offsets, const uint8_t* data, int64_t length,\n+             int64_t output_offset, uint8_t* output) {\n+    const uint8_t* pat = reinterpret_cast<const uint8_t*>(options_.pattern.c_str());\n+    const int64_t pat_size = options_.pattern.length();\n+    TransformMatchSubstring<offset_type>(pat, pat_size, offsets, data, length,\n+                                         output_offset, output);\n+  }\n+};\n+\n+template <typename offset_type>\n+struct RegexSubstringMatcher {\n\nReview comment:\n       Should this struct wrapped by `#ifdef ARROW_WITH_RE2`?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T02:04:30.691+0000",
                    "updated": "2021-03-31T02:04:30.691+0000",
                    "started": "2021-03-31T02:04:30.691+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "574514",
                    "issueId": "13368402"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368402/worklog/574775",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #9838:\nURL: https://github.com/apache/arrow/pull/9838#discussion_r604824849\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -411,40 +411,104 @@ void TransformMatchSubstring(const uint8_t* pattern, int64_t pattern_length,\n \n using MatchSubstringState = OptionsWrapper<MatchSubstringOptions>;\n \n-template <typename Type>\n+template <typename Type, template <typename offset_type> class Matcher>\n struct MatchSubstring {\n   using offset_type = typename Type::offset_type;\n   static void Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n-    MatchSubstringOptions arg = MatchSubstringState::Get(ctx);\n-    const uint8_t* pat = reinterpret_cast<const uint8_t*>(arg.pattern.c_str());\n-    const int64_t pat_size = arg.pattern.length();\n+    // TODO Cache matcher across invocations (for regex compilation)\n+    Matcher<offset_type> matcher(ctx, MatchSubstringState::Get(ctx));\n+    if (ctx->HasError()) return;\n     StringBoolTransform<Type>(\n         ctx, batch,\n-        [pat, pat_size](const void* offsets, const uint8_t* data, int64_t length,\n-                        int64_t output_offset, uint8_t* output) {\n-          TransformMatchSubstring<offset_type>(\n-              pat, pat_size, reinterpret_cast<const offset_type*>(offsets), data, length,\n-              output_offset, output);\n+        [&matcher](const void* offsets, const uint8_t* data, int64_t length,\n+                   int64_t output_offset, uint8_t* output) {\n+          matcher.Match(reinterpret_cast<const offset_type*>(offsets), data, length,\n+                        output_offset, output);\n         },\n         out);\n   }\n };\n \n+template <typename offset_type>\n+struct PlainSubstringMatcher {\n+  const MatchSubstringOptions& options_;\n+\n+  PlainSubstringMatcher(KernelContext* ctx, const MatchSubstringOptions& options)\n+      : options_(options) {}\n+\n+  void Match(const offset_type* offsets, const uint8_t* data, int64_t length,\n+             int64_t output_offset, uint8_t* output) {\n+    const uint8_t* pat = reinterpret_cast<const uint8_t*>(options_.pattern.c_str());\n+    const int64_t pat_size = options_.pattern.length();\n+    TransformMatchSubstring<offset_type>(pat, pat_size, offsets, data, length,\n+                                         output_offset, output);\n+  }\n+};\n+\n+template <typename offset_type>\n+struct RegexSubstringMatcher {\n\nReview comment:\n       You are right, good catch. \n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T11:45:42.767+0000",
                    "updated": "2021-03-31T11:45:42.767+0000",
                    "started": "2021-03-31T11:45:42.767+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "574775",
                    "issueId": "13368402"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368402/worklog/574816",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9838:\nURL: https://github.com/apache/arrow/pull/9838#discussion_r604870513\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -411,40 +411,106 @@ void TransformMatchSubstring(const uint8_t* pattern, int64_t pattern_length,\n \n using MatchSubstringState = OptionsWrapper<MatchSubstringOptions>;\n \n-template <typename Type>\n+template <typename Type, template <typename offset_type> class Matcher>\n struct MatchSubstring {\n   using offset_type = typename Type::offset_type;\n   static void Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n-    MatchSubstringOptions arg = MatchSubstringState::Get(ctx);\n-    const uint8_t* pat = reinterpret_cast<const uint8_t*>(arg.pattern.c_str());\n-    const int64_t pat_size = arg.pattern.length();\n+    // TODO Cache matcher across invocations (for regex compilation)\n+    Matcher<offset_type> matcher(ctx, MatchSubstringState::Get(ctx));\n+    if (ctx->HasError()) return;\n     StringBoolTransform<Type>(\n         ctx, batch,\n-        [pat, pat_size](const void* offsets, const uint8_t* data, int64_t length,\n-                        int64_t output_offset, uint8_t* output) {\n-          TransformMatchSubstring<offset_type>(\n-              pat, pat_size, reinterpret_cast<const offset_type*>(offsets), data, length,\n-              output_offset, output);\n+        [&matcher](const void* offsets, const uint8_t* data, int64_t length,\n+                   int64_t output_offset, uint8_t* output) {\n+          matcher.Match(reinterpret_cast<const offset_type*>(offsets), data, length,\n+                        output_offset, output);\n         },\n         out);\n   }\n };\n \n+template <typename offset_type>\n+struct PlainSubstringMatcher {\n+  const MatchSubstringOptions& options_;\n+\n+  PlainSubstringMatcher(KernelContext* ctx, const MatchSubstringOptions& options)\n+      : options_(options) {}\n+\n+  void Match(const offset_type* offsets, const uint8_t* data, int64_t length,\n+             int64_t output_offset, uint8_t* output) {\n+    const uint8_t* pat = reinterpret_cast<const uint8_t*>(options_.pattern.c_str());\n+    const int64_t pat_size = options_.pattern.length();\n+    TransformMatchSubstring<offset_type>(pat, pat_size, offsets, data, length,\n+                                         output_offset, output);\n+  }\n+};\n+\n const FunctionDoc match_substring_doc(\n     \"Match strings against literal pattern\",\n     (\"For each string in `strings`, emit true iff it contains a given pattern.\\n\"\n      \"Null inputs emit null.  The pattern must be given in MatchSubstringOptions.\"),\n     {\"strings\"}, \"MatchSubstringOptions\");\n \n+#ifdef ARROW_WITH_RE2\n+template <typename offset_type>\n\nReview comment:\n       There's no conceptual reason for matchers to be templated on offset type. The iteration loop on string values could be moved out of the matcher and into the calling `MatchSubstring` class. Then all a matcher does is take a `string_view` or similar and return the index where the pattern was found (or presumably -1 if not found).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T12:56:07.197+0000",
                    "updated": "2021-03-31T12:56:07.197+0000",
                    "started": "2021-03-31T12:56:07.196+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "574816",
                    "issueId": "13368402"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368402/worklog/574851",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #9838:\nURL: https://github.com/apache/arrow/pull/9838#discussion_r604902493\n\n\n\n##########\nFile path: cpp/src/arrow/compute/kernels/scalar_string.cc\n##########\n@@ -411,40 +411,106 @@ void TransformMatchSubstring(const uint8_t* pattern, int64_t pattern_length,\n \n using MatchSubstringState = OptionsWrapper<MatchSubstringOptions>;\n \n-template <typename Type>\n+template <typename Type, template <typename offset_type> class Matcher>\n struct MatchSubstring {\n   using offset_type = typename Type::offset_type;\n   static void Exec(KernelContext* ctx, const ExecBatch& batch, Datum* out) {\n-    MatchSubstringOptions arg = MatchSubstringState::Get(ctx);\n-    const uint8_t* pat = reinterpret_cast<const uint8_t*>(arg.pattern.c_str());\n-    const int64_t pat_size = arg.pattern.length();\n+    // TODO Cache matcher across invocations (for regex compilation)\n+    Matcher<offset_type> matcher(ctx, MatchSubstringState::Get(ctx));\n+    if (ctx->HasError()) return;\n     StringBoolTransform<Type>(\n         ctx, batch,\n-        [pat, pat_size](const void* offsets, const uint8_t* data, int64_t length,\n-                        int64_t output_offset, uint8_t* output) {\n-          TransformMatchSubstring<offset_type>(\n-              pat, pat_size, reinterpret_cast<const offset_type*>(offsets), data, length,\n-              output_offset, output);\n+        [&matcher](const void* offsets, const uint8_t* data, int64_t length,\n+                   int64_t output_offset, uint8_t* output) {\n+          matcher.Match(reinterpret_cast<const offset_type*>(offsets), data, length,\n+                        output_offset, output);\n         },\n         out);\n   }\n };\n \n+template <typename offset_type>\n+struct PlainSubstringMatcher {\n+  const MatchSubstringOptions& options_;\n+\n+  PlainSubstringMatcher(KernelContext* ctx, const MatchSubstringOptions& options)\n+      : options_(options) {}\n+\n+  void Match(const offset_type* offsets, const uint8_t* data, int64_t length,\n+             int64_t output_offset, uint8_t* output) {\n+    const uint8_t* pat = reinterpret_cast<const uint8_t*>(options_.pattern.c_str());\n+    const int64_t pat_size = options_.pattern.length();\n+    TransformMatchSubstring<offset_type>(pat, pat_size, offsets, data, length,\n+                                         output_offset, output);\n+  }\n+};\n+\n const FunctionDoc match_substring_doc(\n     \"Match strings against literal pattern\",\n     (\"For each string in `strings`, emit true iff it contains a given pattern.\\n\"\n      \"Null inputs emit null.  The pattern must be given in MatchSubstringOptions.\"),\n     {\"strings\"}, \"MatchSubstringOptions\");\n \n+#ifdef ARROW_WITH_RE2\n+template <typename offset_type>\n\nReview comment:\n       Got it, I refactored that part. The Knuth-Morris-Pratt implementation also had to be refactored as it was templated on offset_type, though it seems that was unnecessary.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T13:35:44.216+0000",
                    "updated": "2021-03-31T13:35:44.216+0000",
                    "started": "2021-03-31T13:35:44.216+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "574851",
                    "issueId": "13368402"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368402/worklog/574979",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #9838:\nURL: https://github.com/apache/arrow/pull/9838#discussion_r605053704\n\n\n\n##########\nFile path: docs/source/cpp/compute.rst\n##########\n@@ -522,26 +522,31 @@ These functions trim off characters on both sides (trim), or the left (ltrim) or\n Containment tests\n ~~~~~~~~~~~~~~~~~\n \n-+--------------------+------------+------------------------------------+---------------+----------------------------------------+\n-| Function name      | Arity      | Input types                        | Output type   | Options class                          |\n-+====================+============+====================================+===============+========================================+\n-| match_substring    | Unary      | String-like                        | Boolean (1)   | :struct:`MatchSubstringOptions`        |\n-+--------------------+------------+------------------------------------+---------------+----------------------------------------+\n-| index_in           | Unary      | Boolean, Null, Numeric, Temporal,  | Int32 (2)     | :struct:`SetLookupOptions`             |\n-|                    |            | Binary- and String-like            |               |                                        |\n-+--------------------+------------+------------------------------------+---------------+----------------------------------------+\n-| is_in              | Unary      | Boolean, Null, Numeric, Temporal,  | Boolean (3)   | :struct:`SetLookupOptions`             |\n-|                    |            | Binary- and String-like            |               |                                        |\n-+--------------------+------------+------------------------------------+---------------+----------------------------------------+\n++---------------------------+------------+------------------------------------+---------------+----------------------------------------+\n+| Function name             | Arity      | Input types                        | Output type   | Options class                          |\n++===========================+============+====================================+===============+========================================+\n+| match_substring           | Unary      | String-like                        | Boolean (1)   | :struct:`MatchSubstringOptions`        |\n++---------------------------+------------+------------------------------------+---------------+----------------------------------------+\n+| match_substring_regex     | Unary      | String-like                        | Boolean (1)   | :struct:`MatchSubstringOptions`        |\n\nReview comment:\n       You missed the renumbering of notes here (and below).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-03-31T16:39:47.210+0000",
                    "updated": "2021-03-31T16:39:47.210+0000",
                    "started": "2021-03-31T16:39:47.209+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "574979",
                    "issueId": "13368402"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368402/worklog/575424",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #9838:\nURL: https://github.com/apache/arrow/pull/9838#issuecomment-811804533\n\n\n   It looks like there's a failure on Windows in debug mode (see CI):\r\n   ```\r\n   [ RUN      ] TestStringKernels/0.MatchSubstring\r\n   C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Enterprise\\VC\\Tools\\MSVC\\14.28.29910\\include\\vector(1508) : Assertion failed: vector subscript out of range\r\n   ```\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-01T10:09:32.682+0000",
                    "updated": "2021-04-01T10:09:32.682+0000",
                    "started": "2021-04-01T10:09:32.682+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "575424",
                    "issueId": "13368402"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368402/worklog/575481",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #9838:\nURL: https://github.com/apache/arrow/pull/9838#issuecomment-811862423\n\n\n   It's reproducible on Linux by temporarily using .at() for array access. I incorrectly turned `vector<T> foo(N)` into `reserve(N)` when it should have been `resize(N)`.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-01T12:08:41.283+0000",
                    "updated": "2021-04-01T12:08:41.283+0000",
                    "started": "2021-04-01T12:08:41.282+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "575481",
                    "issueId": "13368402"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368402/worklog/577501",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #9838:\nURL: https://github.com/apache/arrow/pull/9838#issuecomment-814056149\n\n\n   This should be ready again (minus RTools 3.5/JNI which are known to be failing/flaky).\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-06T11:48:07.599+0000",
                    "updated": "2021-04-06T11:48:07.599+0000",
                    "started": "2021-04-06T11:48:07.599+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "577501",
                    "issueId": "13368402"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368402/worklog/577684",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou closed pull request #9838:\nURL: https://github.com/apache/arrow/pull/9838\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-04-06T15:30:50.538+0000",
                    "updated": "2021-04-06T15:30:50.538+0000",
                    "started": "2021-04-06T15:30:50.538+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "577684",
                    "issueId": "13368402"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 8400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@3c9dafb2[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@693a765b[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2f6ffbb2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@15ddc8aa[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@44a62e5e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@4ba82c35[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1bcaec99[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6029efd2[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1508e957[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1f4bb647[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@53a93f13[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7cd11dcb[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 8400,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Apr 06 15:30:53 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-04-06T15:30:53.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12134/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-03-29T15:20:39.000+0000",
        "updated": "2021-06-03T15:24:31.000+0000",
        "timeoriginalestimate": null,
        "description": "We have a basic {{match_substring}} kernel already but not a regular expression one.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "2h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 8400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add regex string match kernel",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13368402/comment/17315663",
                    "id": "17315663",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Issue resolved by pull request 9838\n[https://github.com/apache/arrow/pull/9838]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2021-04-06T15:30:53.376+0000",
                    "updated": "2021-04-06T15:30:53.376+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0pbxs:",
        "customfield_12314139": null
    }
}