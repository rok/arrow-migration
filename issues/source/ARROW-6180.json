{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13249730",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730",
    "key": "ARROW-6180",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12345978",
                "id": "12345978",
                "description": "",
                "name": "0.15.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-10-05"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12567337",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12567337",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13249673",
                    "key": "PARQUET-1636",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249673",
                    "fields": {
                        "summary": "[C++] Incompatibility due to moving from Parquet to Arrow IO interfaces",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 13200,
            "total": 13200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 13200,
            "total": 13200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6180/votes",
            "votes": 1,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 23,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/worklog/294795",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5085: ARROW-6180: [C++][Parquet] Add RandomAccessFile::GetStream that returns thread-safe InputStream reader of file segment, fix concurrent buffered Parquet column reads\nURL: https://github.com/apache/arrow/pull/5085\n \n \n   This enables different functions to read portions of a `RandomAccessFile` as an InputStream without interfering with each other. \r\n   \r\n   This also addresses PARQUET-1636 and adds a unit test for buffered column chunk reads. In the refactor to use the Arrow IO interfaces, I broke this by allowing the raw RandomAccessFile to be passed into multiple `BufferedInputStream` at once, so the file position was being manipulated by different column readers. We didn't catch the problem because we didn't have any unit tests, so this patch addresses that deficiency. \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-14T14:57:22.355+0000",
                    "updated": "2019-08-14T14:57:22.355+0000",
                    "started": "2019-08-14T14:57:22.347+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "294795",
                    "issueId": "13249730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/worklog/294796",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #5085: ARROW-6180: [C++][Parquet] Add RandomAccessFile::GetStream that returns thread-safe InputStream reader of file segment, fix concurrent buffered Parquet column reads\nURL: https://github.com/apache/arrow/pull/5085#issuecomment-521282939\n \n \n   cc @majetideepak @czxrrr \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-14T14:58:17.333+0000",
                    "updated": "2019-08-14T14:58:17.333+0000",
                    "started": "2019-08-14T14:58:17.332+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "294796",
                    "issueId": "13249730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/worklog/294797",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5085: ARROW-6180: [C++][Parquet] Add RandomAccessFile::GetStream that returns thread-safe InputStream reader of file segment, fix concurrent buffered Parquet column reads\nURL: https://github.com/apache/arrow/pull/5085#discussion_r313923290\n \n \n\n ##########\n File path: cpp/src/parquet/properties.cc\n ##########\n @@ -26,10 +26,14 @@ namespace parquet {\n std::shared_ptr<ArrowInputStream> ReaderProperties::GetStream(\n     std::shared_ptr<ArrowInputFile> source, int64_t start, int64_t num_bytes) {\n   if (buffered_stream_enabled_) {\n+    // ARROW-6180 / PARQUET-1636 Create thread-safe reader that references\n+    // segment of source\n+    std::shared_ptr<::arrow::io::InputStream> safe_stream;\n+    PARQUET_THROW_NOT_OK(\n+        ::arrow::io::RandomAccessFile::GetStream(source, start, num_bytes, &safe_stream));\n     std::shared_ptr<::arrow::io::BufferedInputStream> stream;\n-    PARQUET_THROW_NOT_OK(source->Seek(start));\n     PARQUET_THROW_NOT_OK(::arrow::io::BufferedInputStream::Create(\n-        buffer_size_, pool_, source, &stream, num_bytes));\n+        buffer_size_, pool_, safe_stream, &stream, num_bytes));\n \n Review comment:\n   Here is the fix for PARQUET-1636\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-14T14:59:27.934+0000",
                    "updated": "2019-08-14T14:59:27.934+0000",
                    "started": "2019-08-14T14:59:27.934+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "294797",
                    "issueId": "13249730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/worklog/294806",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #5085: ARROW-6180: [C++][Parquet] Add RandomAccessFile::GetStream that returns thread-safe InputStream reader of file segment, fix concurrent buffered Parquet column reads\nURL: https://github.com/apache/arrow/pull/5085#issuecomment-521291314\n \n \n   From a high-level POV, note that InputStreams are not supposed to be thread-safe. Abstractly, perhaps Parquet should use ReadAt. Well, anyway...\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-14T15:18:20.671+0000",
                    "updated": "2019-08-14T15:18:20.671+0000",
                    "started": "2019-08-14T15:18:20.670+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "294806",
                    "issueId": "13249730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/worklog/294814",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "majetideepak commented on pull request #5085: ARROW-6180: [C++][Parquet] Add RandomAccessFile::GetStream that returns thread-safe InputStream reader of file segment, fix concurrent buffered Parquet column reads\nURL: https://github.com/apache/arrow/pull/5085#discussion_r313951122\n \n \n\n ##########\n File path: cpp/src/arrow/io/interfaces.h\n ##########\n @@ -144,6 +144,15 @@ class ARROW_EXPORT RandomAccessFile : public InputStream, public Seekable {\n   /// Necessary because we hold a std::unique_ptr\n   ~RandomAccessFile() override;\n \n+  /// \\brief Create thread-safe InputStream that reads a segment of a\n+  /// RandomAccessFile\n+  /// \\param[in] file a file instance\n+  /// \\param[in] file_offset the starting position in the file\n+  /// \\param[in] nbytes the extent of bytes to read\n+  /// \\param[out] out the created stream\n+  static Status GetStream(std::shared_ptr<RandomAccessFile> file, int64_t file_offset,\n \n Review comment:\n   Thanks for this patch Wes. Should this be `virtual` instead to make this more flexible? Clients can create custom `RandomAccessFile` and `InputStream` implementations.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-14T15:52:01.857+0000",
                    "updated": "2019-08-14T15:52:01.857+0000",
                    "started": "2019-08-14T15:52:01.857+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "294814",
                    "issueId": "13249730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/worklog/294818",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5085: ARROW-6180: [C++][Parquet] Add RandomAccessFile::GetStream that returns thread-safe InputStream reader of file segment, fix concurrent buffered Parquet column reads\nURL: https://github.com/apache/arrow/pull/5085#discussion_r313953762\n \n \n\n ##########\n File path: cpp/src/arrow/io/interfaces.cc\n ##########\n @@ -70,5 +74,55 @@ Status Writable::Write(const std::string& data) {\n \n Status Writable::Flush() { return Status::OK(); }\n \n+class FileSegmentReader : public InputStream {\n+ public:\n+  FileSegmentReader(std::shared_ptr<RandomAccessFile> file, int64_t file_offset,\n+                    int64_t nbytes)\n+      : file_(std::move(file)), position_(0), file_offset_(file_offset), nbytes_(nbytes) {\n+    FileInterface::set_mode(FileMode::READ);\n+  }\n+\n+  Status Close() override { return Status::OK(); }\n \n Review comment:\n   Not required, but for sanity I prefer if `Close()` sets a flag that then prevents from calling other methods.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-14T15:59:01.234+0000",
                    "updated": "2019-08-14T15:59:01.234+0000",
                    "started": "2019-08-14T15:59:01.234+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "294818",
                    "issueId": "13249730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/worklog/294819",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5085: ARROW-6180: [C++][Parquet] Add RandomAccessFile::GetStream that returns thread-safe InputStream reader of file segment, fix concurrent buffered Parquet column reads\nURL: https://github.com/apache/arrow/pull/5085#discussion_r313952875\n \n \n\n ##########\n File path: cpp/src/arrow/io/interfaces.h\n ##########\n @@ -144,6 +144,15 @@ class ARROW_EXPORT RandomAccessFile : public InputStream, public Seekable {\n   /// Necessary because we hold a std::unique_ptr\n   ~RandomAccessFile() override;\n \n+  /// \\brief Create thread-safe InputStream that reads a segment of a\n \n Review comment:\n   Hmm. I think the docstring would deserve clarifying. The InputStream itself isn't thread-safe (it doesn't have a mutex inside), but you can create multiple InputStreams pointing to the same RandomAccessFile and use them concurrently (assuming each InputStream is used from a single thread).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-14T15:59:01.236+0000",
                    "updated": "2019-08-14T15:59:01.236+0000",
                    "started": "2019-08-14T15:59:01.236+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "294819",
                    "issueId": "13249730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/worklog/294820",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5085: ARROW-6180: [C++][Parquet] Add RandomAccessFile::GetStream that returns thread-safe InputStream reader of file segment, fix concurrent buffered Parquet column reads\nURL: https://github.com/apache/arrow/pull/5085#discussion_r313952306\n \n \n\n ##########\n File path: cpp/src/arrow/io/interfaces.cc\n ##########\n @@ -70,5 +74,55 @@ Status Writable::Write(const std::string& data) {\n \n Status Writable::Flush() { return Status::OK(); }\n \n+class FileSegmentReader : public InputStream {\n+ public:\n+  FileSegmentReader(std::shared_ptr<RandomAccessFile> file, int64_t file_offset,\n+                    int64_t nbytes)\n+      : file_(std::move(file)), position_(0), file_offset_(file_offset), nbytes_(nbytes) {\n+    FileInterface::set_mode(FileMode::READ);\n+  }\n+\n+  Status Close() override { return Status::OK(); }\n+\n+  Status Tell(int64_t* position) const override {\n+    *position = position_;\n+    return Status::OK();\n+  }\n+\n+  bool closed() const override { return false; }\n+\n+  Status Read(int64_t nbytes, int64_t* bytes_read, void* out) override {\n+    int64_t bytes_to_read = std::min(nbytes, nbytes_ - position_);\n+    RETURN_NOT_OK(\n+        file_->ReadAt(file_offset_ + position_, bytes_to_read, bytes_read, out));\n+    position_ += *bytes_read;\n+    return Status::OK();\n+  }\n+\n+  Status Read(int64_t nbytes, std::shared_ptr<Buffer>* out) override {\n+    int64_t bytes_to_read = std::min(nbytes, nbytes_ - position_);\n+    RETURN_NOT_OK(file_->ReadAt(file_offset_ + position_, bytes_to_read, out));\n+    position_ += (*out)->size();\n+    return Status::OK();\n+  }\n+\n+ private:\n+  std::shared_ptr<RandomAccessFile> file_;\n+  int64_t position_;\n+  int64_t file_offset_;\n+  int64_t nbytes_;\n+};\n+\n+Status RandomAccessFile::GetStream(std::shared_ptr<RandomAccessFile> file,\n+                                   int64_t file_offset, int64_t nbytes,\n+                                   std::shared_ptr<InputStream>* out) {\n+  DCHECK_GE(file_offset, 0);\n+  int64_t size = -1;\n+  RETURN_NOT_OK(file->GetSize(&size));\n \n Review comment:\n   I'm not sure why you want to do this. The caller should IMHO pass the right `nbytes` (and call `GetSize` themselves if necessary).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-14T15:59:01.274+0000",
                    "updated": "2019-08-14T15:59:01.274+0000",
                    "started": "2019-08-14T15:59:01.274+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "294820",
                    "issueId": "13249730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/worklog/294821",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #5085: ARROW-6180: [C++][Parquet] Add RandomAccessFile::GetStream that returns thread-safe InputStream reader of file segment, fix concurrent buffered Parquet column reads\nURL: https://github.com/apache/arrow/pull/5085#discussion_r313954453\n \n \n\n ##########\n File path: cpp/src/parquet/properties.cc\n ##########\n @@ -26,10 +26,14 @@ namespace parquet {\n std::shared_ptr<ArrowInputStream> ReaderProperties::GetStream(\n     std::shared_ptr<ArrowInputFile> source, int64_t start, int64_t num_bytes) {\n   if (buffered_stream_enabled_) {\n+    // ARROW-6180 / PARQUET-1636 Create thread-safe reader that references\n+    // segment of source\n+    std::shared_ptr<::arrow::io::InputStream> safe_stream;\n+    PARQUET_THROW_NOT_OK(\n+        ::arrow::io::RandomAccessFile::GetStream(source, start, num_bytes, &safe_stream));\n     std::shared_ptr<::arrow::io::BufferedInputStream> stream;\n-    PARQUET_THROW_NOT_OK(source->Seek(start));\n     PARQUET_THROW_NOT_OK(::arrow::io::BufferedInputStream::Create(\n \n Review comment:\n   Have you evaluated whether `BufferedInputStream` helps performance? If Parquet reads large enough chunks that may not be the case.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-14T15:59:01.339+0000",
                    "updated": "2019-08-14T15:59:01.339+0000",
                    "started": "2019-08-14T15:59:01.338+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "294821",
                    "issueId": "13249730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/worklog/294837",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5085: ARROW-6180: [C++][Parquet] Add RandomAccessFile::GetStream that returns thread-safe InputStream reader of file segment, fix concurrent buffered Parquet column reads\nURL: https://github.com/apache/arrow/pull/5085#discussion_r313966933\n \n \n\n ##########\n File path: cpp/src/arrow/io/interfaces.h\n ##########\n @@ -144,6 +144,15 @@ class ARROW_EXPORT RandomAccessFile : public InputStream, public Seekable {\n   /// Necessary because we hold a std::unique_ptr\n   ~RandomAccessFile() override;\n \n+  /// \\brief Create thread-safe InputStream that reads a segment of a\n+  /// RandomAccessFile\n+  /// \\param[in] file a file instance\n+  /// \\param[in] file_offset the starting position in the file\n+  /// \\param[in] nbytes the extent of bytes to read\n+  /// \\param[out] out the created stream\n+  static Status GetStream(std::shared_ptr<RandomAccessFile> file, int64_t file_offset,\n \n Review comment:\n   It's a static function\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-14T16:24:20.771+0000",
                    "updated": "2019-08-14T16:24:20.771+0000",
                    "started": "2019-08-14T16:24:20.770+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "294837",
                    "issueId": "13249730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/worklog/294838",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5085: ARROW-6180: [C++][Parquet] Add RandomAccessFile::GetStream that returns thread-safe InputStream reader of file segment, fix concurrent buffered Parquet column reads\nURL: https://github.com/apache/arrow/pull/5085#discussion_r313967068\n \n \n\n ##########\n File path: cpp/src/arrow/io/interfaces.h\n ##########\n @@ -144,6 +144,15 @@ class ARROW_EXPORT RandomAccessFile : public InputStream, public Seekable {\n   /// Necessary because we hold a std::unique_ptr\n   ~RandomAccessFile() override;\n \n+  /// \\brief Create thread-safe InputStream that reads a segment of a\n \n Review comment:\n   Right, I'll change the language\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-14T16:24:43.926+0000",
                    "updated": "2019-08-14T16:24:43.926+0000",
                    "started": "2019-08-14T16:24:43.926+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "294838",
                    "issueId": "13249730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/worklog/294839",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5085: ARROW-6180: [C++][Parquet] Add RandomAccessFile::GetStream that returns thread-safe InputStream reader of file segment, fix concurrent buffered Parquet column reads\nURL: https://github.com/apache/arrow/pull/5085#discussion_r313967425\n \n \n\n ##########\n File path: cpp/src/parquet/properties.cc\n ##########\n @@ -26,10 +26,14 @@ namespace parquet {\n std::shared_ptr<ArrowInputStream> ReaderProperties::GetStream(\n     std::shared_ptr<ArrowInputFile> source, int64_t start, int64_t num_bytes) {\n   if (buffered_stream_enabled_) {\n+    // ARROW-6180 / PARQUET-1636 Create thread-safe reader that references\n+    // segment of source\n+    std::shared_ptr<::arrow::io::InputStream> safe_stream;\n+    PARQUET_THROW_NOT_OK(\n+        ::arrow::io::RandomAccessFile::GetStream(source, start, num_bytes, &safe_stream));\n     std::shared_ptr<::arrow::io::BufferedInputStream> stream;\n-    PARQUET_THROW_NOT_OK(source->Seek(start));\n     PARQUET_THROW_NOT_OK(::arrow::io::BufferedInputStream::Create(\n \n Review comment:\n   It's not a performance issue, it's a memory use issue. Column chunks in Parquet can be quite large, so if you instantiate all column readers at once you might be loading 1GB or more into memory. Databases find that to be unacceptable\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-14T16:25:35.587+0000",
                    "updated": "2019-08-14T16:25:35.587+0000",
                    "started": "2019-08-14T16:25:35.587+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "294839",
                    "issueId": "13249730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/worklog/294840",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5085: ARROW-6180: [C++][Parquet] Add RandomAccessFile::GetStream that returns thread-safe InputStream reader of file segment, fix concurrent buffered Parquet column reads\nURL: https://github.com/apache/arrow/pull/5085#discussion_r313966933\n \n \n\n ##########\n File path: cpp/src/arrow/io/interfaces.h\n ##########\n @@ -144,6 +144,15 @@ class ARROW_EXPORT RandomAccessFile : public InputStream, public Seekable {\n   /// Necessary because we hold a std::unique_ptr\n   ~RandomAccessFile() override;\n \n+  /// \\brief Create thread-safe InputStream that reads a segment of a\n+  /// RandomAccessFile\n+  /// \\param[in] file a file instance\n+  /// \\param[in] file_offset the starting position in the file\n+  /// \\param[in] nbytes the extent of bytes to read\n+  /// \\param[out] out the created stream\n+  static Status GetStream(std::shared_ptr<RandomAccessFile> file, int64_t file_offset,\n \n Review comment:\n   It's a static function -- the implementation only depends on the virtual RandomAccessFile interface\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-14T16:26:33.768+0000",
                    "updated": "2019-08-14T16:26:33.768+0000",
                    "started": "2019-08-14T16:26:33.767+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "294840",
                    "issueId": "13249730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/worklog/294842",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5085: ARROW-6180: [C++][Parquet] Add RandomAccessFile::GetStream that returns thread-safe InputStream reader of file segment, fix concurrent buffered Parquet column reads\nURL: https://github.com/apache/arrow/pull/5085#discussion_r313968343\n \n \n\n ##########\n File path: cpp/src/arrow/io/interfaces.cc\n ##########\n @@ -70,5 +74,55 @@ Status Writable::Write(const std::string& data) {\n \n Status Writable::Flush() { return Status::OK(); }\n \n+class FileSegmentReader : public InputStream {\n+ public:\n+  FileSegmentReader(std::shared_ptr<RandomAccessFile> file, int64_t file_offset,\n+                    int64_t nbytes)\n+      : file_(std::move(file)), position_(0), file_offset_(file_offset), nbytes_(nbytes) {\n+    FileInterface::set_mode(FileMode::READ);\n+  }\n+\n+  Status Close() override { return Status::OK(); }\n+\n+  Status Tell(int64_t* position) const override {\n+    *position = position_;\n+    return Status::OK();\n+  }\n+\n+  bool closed() const override { return false; }\n+\n+  Status Read(int64_t nbytes, int64_t* bytes_read, void* out) override {\n+    int64_t bytes_to_read = std::min(nbytes, nbytes_ - position_);\n+    RETURN_NOT_OK(\n+        file_->ReadAt(file_offset_ + position_, bytes_to_read, bytes_read, out));\n+    position_ += *bytes_read;\n+    return Status::OK();\n+  }\n+\n+  Status Read(int64_t nbytes, std::shared_ptr<Buffer>* out) override {\n+    int64_t bytes_to_read = std::min(nbytes, nbytes_ - position_);\n+    RETURN_NOT_OK(file_->ReadAt(file_offset_ + position_, bytes_to_read, out));\n+    position_ += (*out)->size();\n+    return Status::OK();\n+  }\n+\n+ private:\n+  std::shared_ptr<RandomAccessFile> file_;\n+  int64_t position_;\n+  int64_t file_offset_;\n+  int64_t nbytes_;\n+};\n+\n+Status RandomAccessFile::GetStream(std::shared_ptr<RandomAccessFile> file,\n+                                   int64_t file_offset, int64_t nbytes,\n+                                   std::shared_ptr<InputStream>* out) {\n+  DCHECK_GE(file_offset, 0);\n+  int64_t size = -1;\n+  RETURN_NOT_OK(file->GetSize(&size));\n \n Review comment:\n   Hmm, okay. I don't have a strong opinion about this\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-14T16:27:31.686+0000",
                    "updated": "2019-08-14T16:27:31.686+0000",
                    "started": "2019-08-14T16:27:31.686+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "294842",
                    "issueId": "13249730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/worklog/294843",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5085: ARROW-6180: [C++][Parquet] Add RandomAccessFile::GetStream that returns thread-safe InputStream reader of file segment, fix concurrent buffered Parquet column reads\nURL: https://github.com/apache/arrow/pull/5085#discussion_r313968589\n \n \n\n ##########\n File path: cpp/src/arrow/io/interfaces.cc\n ##########\n @@ -70,5 +74,55 @@ Status Writable::Write(const std::string& data) {\n \n Status Writable::Flush() { return Status::OK(); }\n \n+class FileSegmentReader : public InputStream {\n+ public:\n+  FileSegmentReader(std::shared_ptr<RandomAccessFile> file, int64_t file_offset,\n+                    int64_t nbytes)\n+      : file_(std::move(file)), position_(0), file_offset_(file_offset), nbytes_(nbytes) {\n+    FileInterface::set_mode(FileMode::READ);\n+  }\n+\n+  Status Close() override { return Status::OK(); }\n \n Review comment:\n   Sure, I'll add that.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-14T16:28:05.137+0000",
                    "updated": "2019-08-14T16:28:05.137+0000",
                    "started": "2019-08-14T16:28:05.136+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "294843",
                    "issueId": "13249730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/worklog/294851",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #5085: ARROW-6180: [C++][Parquet] Add RandomAccessFile::GetStream that returns InputStream that reads a file segment independent of the file's state, fix concurrent buffered Parquet column reads\nURL: https://github.com/apache/arrow/pull/5085#issuecomment-521322017\n \n \n   I'm removing all notions of \"thread-safe\" so we aren't haggling about that, it's really about \"isolation\" so that the columns can buffer a file segment without interfering with each other\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-14T16:36:09.251+0000",
                    "updated": "2019-08-14T16:36:09.251+0000",
                    "started": "2019-08-14T16:36:09.251+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "294851",
                    "issueId": "13249730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/worklog/294864",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on pull request #5085: ARROW-6180: [C++][Parquet] Add RandomAccessFile::GetStream that returns InputStream that reads a file segment independent of the file's state, fix concurrent buffered Parquet column reads\nURL: https://github.com/apache/arrow/pull/5085#discussion_r313967425\n \n \n\n ##########\n File path: cpp/src/parquet/properties.cc\n ##########\n @@ -26,10 +26,14 @@ namespace parquet {\n std::shared_ptr<ArrowInputStream> ReaderProperties::GetStream(\n     std::shared_ptr<ArrowInputFile> source, int64_t start, int64_t num_bytes) {\n   if (buffered_stream_enabled_) {\n+    // ARROW-6180 / PARQUET-1636 Create thread-safe reader that references\n+    // segment of source\n+    std::shared_ptr<::arrow::io::InputStream> safe_stream;\n+    PARQUET_THROW_NOT_OK(\n+        ::arrow::io::RandomAccessFile::GetStream(source, start, num_bytes, &safe_stream));\n     std::shared_ptr<::arrow::io::BufferedInputStream> stream;\n-    PARQUET_THROW_NOT_OK(source->Seek(start));\n     PARQUET_THROW_NOT_OK(::arrow::io::BufferedInputStream::Create(\n \n Review comment:\n   It's not a performance issue, it's a memory use issue. Column chunks in Parquet can be quite large, so if you instantiate all column readers at once you might be loading 1GB or more into memory (if you aren't using buffering). You can see in the other branch here that the entire serialized column chunk is read into memory. Databases find that to be unacceptable\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-14T16:51:08.816+0000",
                    "updated": "2019-08-14T16:51:08.816+0000",
                    "started": "2019-08-14T16:51:08.815+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "294864",
                    "issueId": "13249730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/worklog/294911",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #5085: ARROW-6180: [C++][Parquet] Add RandomAccessFile::GetStream that returns InputStream that reads a file segment independent of the file's state, fix concurrent buffered Parquet column reads\nURL: https://github.com/apache/arrow/pull/5085#issuecomment-521322017\n \n \n   I'm removing all notions of \"thread-safe\" so we aren't haggling about that, it's really about \"isolation\" so that the columns can buffer their respective file segment without interfering with each other\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-14T18:15:40.277+0000",
                    "updated": "2019-08-14T18:15:40.277+0000",
                    "started": "2019-08-14T18:15:40.276+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "294911",
                    "issueId": "13249730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/worklog/294955",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on issue #5085: ARROW-6180: [C++][Parquet] Add RandomAccessFile::GetStream that returns InputStream that reads a file segment independent of the file's state, fix concurrent buffered Parquet column reads\nURL: https://github.com/apache/arrow/pull/5085#issuecomment-521382943\n \n \n   @ursabot build\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-14T19:22:25.461+0000",
                    "updated": "2019-08-14T19:22:25.461+0000",
                    "started": "2019-08-14T19:22:25.460+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "294955",
                    "issueId": "13249730"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/worklog/295230",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #5085: ARROW-6180: [C++][Parquet] Add RandomAccessFile::GetStream that returns InputStream that reads a file segment independent of the file's state, fix concurrent buffered Parquet column reads\nURL: https://github.com/apache/arrow/pull/5085#issuecomment-521523744\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/5085?src=pr&el=h1) Report\n   > Merging [#5085](https://codecov.io/gh/apache/arrow/pull/5085?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/cef7e80b527523b01a13bffbe9b36a547c3d74a9?src=pr&el=desc) will **increase** coverage by `1.62%`.\n   > The diff coverage is `100%`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/5085/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/5085?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #5085      +/-   ##\n   ==========================================\n   + Coverage   87.63%   89.25%   +1.62%     \n   ==========================================\n     Files        1013      731     -282     \n     Lines      144891   104130   -40761     \n     Branches     1418        0    -1418     \n   ==========================================\n   - Hits       126971    92944   -34027     \n   + Misses      17558    11186    -6372     \n   + Partials      362        0     -362\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/5085?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [cpp/src/parquet/properties.h](https://codecov.io/gh/apache/arrow/pull/5085/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L3Byb3BlcnRpZXMuaA==) | `97.67% <\u00f8> (+0.11%)` | :arrow_up: |\n   | [cpp/src/arrow/io/interfaces.h](https://codecov.io/gh/apache/arrow/pull/5085/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pby9pbnRlcmZhY2VzLmg=) | `90% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/testing/random.h](https://codecov.io/gh/apache/arrow/pull/5085/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy90ZXN0aW5nL3JhbmRvbS5o) | `100% <\u00f8> (\u00f8)` | :arrow_up: |\n   | [cpp/src/parquet/properties.cc](https://codecov.io/gh/apache/arrow/pull/5085/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L3Byb3BlcnRpZXMuY2M=) | `100% <100%> (+26.66%)` | :arrow_up: |\n   | [cpp/src/arrow/io/memory-test.cc](https://codecov.io/gh/apache/arrow/pull/5085/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pby9tZW1vcnktdGVzdC5jYw==) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/io/interfaces.cc](https://codecov.io/gh/apache/arrow/pull/5085/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9pby9pbnRlcmZhY2VzLmNj) | `82.69% <100%> (+27.69%)` | :arrow_up: |\n   | [cpp/src/parquet/reader-test.cc](https://codecov.io/gh/apache/arrow/pull/5085/diff?src=pr&el=tree#diff-Y3BwL3NyYy9wYXJxdWV0L3JlYWRlci10ZXN0LmNj) | `100% <100%> (\u00f8)` | :arrow_up: |\n   | [cpp/src/arrow/csv/column-builder.cc](https://codecov.io/gh/apache/arrow/pull/5085/diff?src=pr&el=tree#diff-Y3BwL3NyYy9hcnJvdy9jc3YvY29sdW1uLWJ1aWxkZXIuY2M=) | `95.54% <0%> (-1.49%)` | :arrow_down: |\n   | [js/src/util/fn.ts](https://codecov.io/gh/apache/arrow/pull/5085/diff?src=pr&el=tree#diff-anMvc3JjL3V0aWwvZm4udHM=) | | |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/5085/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | | |\n   | ... and [284 more](https://codecov.io/gh/apache/arrow/pull/5085/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/5085?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/5085?src=pr&el=footer). Last update [cef7e80...5da050c](https://codecov.io/gh/apache/arrow/pull/5085?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-08-15T05:54:06.225+0000",
                    "updated": "2019-08-15T05:54:06.225+0000",
                    "started": "2019-08-15T05:54:06.224+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "295230",
                    "issueId": "13249730"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 13200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2d37e6f1[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@492fa539[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@f9721d0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3b254b76[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1be33b48[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@2cb6eeff[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1a99d318[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@b7645c6[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@9cd069b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1297c04b[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@46c2d012[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@7f23f579[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 13200,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Aug 15 16:45:31 UTC 2019",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2019-08-15T16:45:31.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-6180/watchers",
            "watchCount": 4,
            "isWatching": false
        },
        "created": "2019-08-08T19:09:40.000+0000",
        "updated": "2019-08-15T16:45:43.000+0000",
        "timeoriginalestimate": null,
        "description": "If different threads wants to do buffered reads over different portions of a file (and they are unable to create their own separate file handles), they may clobber each other. I would propose creating an object that keeps the RandomAccessFile internally and implements the InputStream API in a way that is safe from other threads changing the file position",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3h 40m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 13200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Create InputStream that is an isolated reader of a segment of a RandomAccessFile",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/comment/16904683",
                    "id": "16904683",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "The way I would do this is as follows:\r\n\r\n* Add {{RandomAccessFile::GetStream(int64_t offset, int64_t length, std::shared_ptr<InputStream>* out)}} (or similarly named -- might need to be a top-level function so that it can retain a shared_ptr to the parent file)\r\n* Implement the object returned by this method privately. So no need to add any new class to public headers",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-08-11T15:43:23.872+0000",
                    "updated": "2019-08-13T20:23:47.203+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/comment/16905155",
                    "id": "16905155",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "I don't really understand what this does concretely. Is it some kind of BufferReader over some area of memory maintained by the RandomAccessFile itself?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-08-12T12:54:20.826+0000",
                    "updated": "2019-08-12T12:54:20.826+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/comment/16906584",
                    "id": "16906584",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "[~pitrou] the problem is that multiple threads are creating their own {{BufferedInputStream}} that references different segments of a {{RandomAccessFile}} that was passed into say {{ParquetFileReader}}\r\n\r\nSuppose you have a file that's 100MB and contains 10 10MB chunks. And you have different threads that do buffered processing of each chunk. If you naively pass {{RandomAccessFile}} into {{BufferedInputStream}} in different threads then the threads will clobber each other",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-08-13T20:20:35.119+0000",
                    "updated": "2019-08-13T20:20:35.119+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/comment/16906614",
                    "id": "16906614",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=czxrrr",
                        "name": "czxrrr",
                        "key": "czxrrr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Zherui Cao",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "[~wesmckinn] If I don't change BufferedInputStream, I need to make every BufferedInputStream has their own copy of raw_ (RadomAccessFile) rather than just have a shared pointer, it this what you mean?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=czxrrr",
                        "name": "czxrrr",
                        "key": "czxrrr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Zherui Cao",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-08-13T21:06:14.600+0000",
                    "updated": "2019-08-13T21:06:14.600+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/comment/16906643",
                    "id": "16906643",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "The idea is to have an private implementation of {{InputStream}} like this:\r\n\r\n{code}\r\n/// \\brief Reads a segment of a RandomAccessFile in a thread-safe manner\r\nclass FileSegmentReader : public InputStream {\r\n public:\r\n   FileSegmentReader(std::shared_ptr<RandomAccessFile> file, int64_t offset, int64_t length) ...\r\n\r\n   ...\r\n\r\n private:\r\n  std::shared_ptr<RandomAccessFile> file_;\r\n  int64_t position_;\r\n  int64_t file_offset_;\r\n  int64_t total_length_;\r\n}\r\n{code}\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-08-13T21:48:55.897+0000",
                    "updated": "2019-08-13T21:48:55.897+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/comment/16906647",
                    "id": "16906647",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "I see. That sounds reasonable to me.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2019-08-13T21:50:01.886+0000",
                    "updated": "2019-08-13T21:50:01.886+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/comment/16906653",
                    "id": "16906653",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=mdeepak",
                        "name": "mdeepak",
                        "key": "mdeepak",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=mdeepak&avatarId=28236",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mdeepak&avatarId=28236",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mdeepak&avatarId=28236",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mdeepak&avatarId=28236"
                        },
                        "displayName": "Deepak Majeti",
                        "active": true,
                        "timeZone": "America/Indiana/Indianapolis"
                    },
                    "body": "[~wesmckinn], [~pitrou]\u00a0looks like the issue can also happen in a single-threaded application when you read multiple column chunks in a row-by-row fashion from each chunk. You end up creating a BufferedInputStream for each\u00a0chunk and all these InputStreams share the same RandomAccessFile and thereby getting clobbered.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=mdeepak",
                        "name": "mdeepak",
                        "key": "mdeepak",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=mdeepak&avatarId=28236",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=mdeepak&avatarId=28236",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=mdeepak&avatarId=28236",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=mdeepak&avatarId=28236"
                        },
                        "displayName": "Deepak Majeti",
                        "active": true,
                        "timeZone": "America/Indiana/Indianapolis"
                    },
                    "created": "2019-08-13T21:56:39.175+0000",
                    "updated": "2019-08-13T21:56:39.175+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/comment/16906659",
                    "id": "16906659",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "You can let me take care of this so we aren't going back and forth over the details. ",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-08-13T22:05:31.016+0000",
                    "updated": "2019-08-13T22:05:31.016+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/comment/16907344",
                    "id": "16907344",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=czxrrr",
                        "name": "czxrrr",
                        "key": "czxrrr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Zherui Cao",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "I saw your patch, and Thanks for that.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=czxrrr",
                        "name": "czxrrr",
                        "key": "czxrrr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Zherui Cao",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-08-14T15:12:08.313+0000",
                    "updated": "2019-08-14T15:12:08.313+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13249730/comment/16908277",
                    "id": "16908277",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 5085\n[https://github.com/apache/arrow/pull/5085]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-08-15T16:45:31.214+0000",
                    "updated": "2019-08-15T16:45:31.214+0000"
                }
            ],
            "maxResults": 10,
            "total": 10,
            "startAt": 0
        },
        "customfield_12311820": "0|z05h9s:",
        "customfield_12314139": null
    }
}