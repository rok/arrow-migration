{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13189496",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13189496",
    "key": "ARROW-3442",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 5400,
            "total": 5400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3442/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 9,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13189496/worklog/153482",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #2744: ARROW-3442: [C++] Allow dynamic linking of (most) unit tests\nURL: https://github.com/apache/arrow/pull/2744\n \n \n   Use dynamic linking in preference for tests, as it reduces the disk footprint and probably makes linking faster too.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-11T11:12:33.053+0000",
                    "updated": "2018-10-11T11:12:33.053+0000",
                    "started": "2018-10-11T11:12:33.053+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "153482",
                    "issueId": "13189496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13189496/worklog/153492",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on a change in pull request #2744: ARROW-3442: [C++] Allow dynamic linking of (most) unit tests\nURL: https://github.com/apache/arrow/pull/2744#discussion_r224414909\n \n \n\n ##########\n File path: cpp/src/parquet/statistics-test.cc\n ##########\n @@ -381,26 +385,16 @@ TEST(CorrectStatistics, Basics) {\n   node = schema::GroupNode::Make(\"schema\", Repetition::REQUIRED, fields);\n   schema.Init(node);\n \n-  format::ColumnChunk col_chunk;\n-  col_chunk.meta_data.__isset.statistics = true;\n-  auto column_chunk1 = ColumnChunkMetaData::Make(\n-      reinterpret_cast<const uint8_t*>(&col_chunk), schema.Column(0), &version);\n-  ASSERT_TRUE(column_chunk1->is_stats_set());\n-  auto column_chunk2 = ColumnChunkMetaData::Make(\n-      reinterpret_cast<const uint8_t*>(&col_chunk), schema.Column(1), &version);\n-  ASSERT_TRUE(column_chunk2->is_stats_set());\n-  auto column_chunk3 = ColumnChunkMetaData::Make(\n-      reinterpret_cast<const uint8_t*>(&col_chunk), schema.Column(2), &version);\n-  ASSERT_TRUE(column_chunk3->is_stats_set());\n-  auto column_chunk4 = ColumnChunkMetaData::Make(\n-      reinterpret_cast<const uint8_t*>(&col_chunk), schema.Column(3), &version);\n-  ASSERT_TRUE(column_chunk4->is_stats_set());\n-  auto column_chunk5 = ColumnChunkMetaData::Make(\n-      reinterpret_cast<const uint8_t*>(&col_chunk), schema.Column(4), &version);\n-  ASSERT_FALSE(column_chunk5->is_stats_set());\n-  auto column_chunk6 = ColumnChunkMetaData::Make(\n-      reinterpret_cast<const uint8_t*>(&col_chunk), schema.Column(5), &version);\n-  ASSERT_TRUE(column_chunk6->is_stats_set());\n+  parquet::WriterProperties::Builder builder;\n+  builder.created_by(created_by);\n+  std::shared_ptr<parquet::WriterProperties> props = builder.build();\n+\n+  AssertStatsSet(version, props, schema.Column(0), true);\n+  AssertStatsSet(version, props, schema.Column(1), true);\n+  AssertStatsSet(version, props, schema.Column(2), true);\n+  AssertStatsSet(version, props, schema.Column(3), true);\n+  AssertStatsSet(version, props, schema.Column(4), false);\n+  AssertStatsSet(version, props, schema.Column(5), true);\n \n Review comment:\n   Nice simplification\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-11T11:43:00.662+0000",
                    "updated": "2018-10-11T11:43:00.662+0000",
                    "started": "2018-10-11T11:43:00.662+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "153492",
                    "issueId": "13189496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13189496/worklog/153493",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2744: ARROW-3442: [C++] Allow dynamic linking of (most) unit tests\nURL: https://github.com/apache/arrow/pull/2744#issuecomment-428925438\n \n \n   There is a problem, though: the Plasma Java client tests are broken:\r\n   https://travis-ci.org/apache/arrow/jobs/440089184#L3463\r\n   \r\n   This is because `plasma_store_server` is now dynamically linked, and for some reason an rpath doesn't seem set for `libplasma.so.12` and `libarrow.so.12`. I don't understand how that happens, as it does have an rpath when I build it here.\r\n   \r\n   We could work around this by building `plasma_store_server`, but it would be nice to understand what happens. Unfortunately I don't know much about the rpath mechanisms. @xhochy \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-11T11:48:10.964+0000",
                    "updated": "2018-10-11T11:48:10.964+0000",
                    "started": "2018-10-11T11:48:10.964+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "153493",
                    "issueId": "13189496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13189496/worklog/153494",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2744: ARROW-3442: [C++] Allow dynamic linking of (most) unit tests\nURL: https://github.com/apache/arrow/pull/2744#issuecomment-428926782\n \n \n   Ah, it seems we set LD_LIBRARY_PATH at the beginning of `travis_script_python.sh`. We could do the same at the beginning of `travis_script_plasma_java_client.sh`. Does that sound ok?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-11T11:53:18.331+0000",
                    "updated": "2018-10-11T11:53:18.331+0000",
                    "started": "2018-10-11T11:53:18.330+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "153494",
                    "issueId": "13189496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13189496/worklog/153495",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2744: ARROW-3442: [C++] Allow dynamic linking of (most) unit tests\nURL: https://github.com/apache/arrow/pull/2744#issuecomment-428929389\n \n \n   Yes, that's OK!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-11T12:03:19.124+0000",
                    "updated": "2018-10-11T12:03:19.124+0000",
                    "started": "2018-10-11T12:03:19.123+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "153495",
                    "issueId": "13189496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13189496/worklog/153496",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2744: ARROW-3442: [C++] Allow dynamic linking of (most) unit tests\nURL: https://github.com/apache/arrow/pull/2744#issuecomment-428934053\n \n \n   Since we have static libs in the toolchain I re-enabled re2 here. Everything looks good for me except that the build doesn't work with gcc 4.8.5 on account of Gandiva libraries using `-static-libstdc++ -static-libgcc` for which there is already a JIRA to fix\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-11T12:20:08.559+0000",
                    "updated": "2018-10-11T12:20:08.559+0000",
                    "started": "2018-10-11T12:20:08.558+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "153496",
                    "issueId": "13189496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13189496/worklog/153497",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy commented on issue #2744: ARROW-3442: [C++] Allow dynamic linking of (most) unit tests\nURL: https://github.com/apache/arrow/pull/2744#issuecomment-428938642\n \n \n   That's ok for now. I would prefer not have `LD_LIBRARY` in the tests but I can look into that some time. We should though never require `LD_LIBRARY_PATH` in installed executables.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-11T12:36:43.615+0000",
                    "updated": "2018-10-11T12:36:43.615+0000",
                    "started": "2018-10-11T12:36:43.614+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "153497",
                    "issueId": "13189496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13189496/worklog/153681",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on issue #2744: ARROW-3442: [C++] Allow dynamic linking of (most) unit tests\nURL: https://github.com/apache/arrow/pull/2744#issuecomment-429100451\n \n \n   AppVeyor build at https://ci.appveyor.com/project/pitrou/arrow/builds/19438131\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-11T20:08:44.709+0000",
                    "updated": "2018-10-11T20:08:44.709+0000",
                    "started": "2018-10-11T20:08:44.708+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "153681",
                    "issueId": "13189496"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13189496/worklog/153702",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm closed pull request #2744: ARROW-3442: [C++] Allow dynamic linking of (most) unit tests\nURL: https://github.com/apache/arrow/pull/2744\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/ci/travis_script_plasma_java_client.sh b/ci/travis_script_plasma_java_client.sh\nindex d7dc3bc6b7..927a239120 100755\n--- a/ci/travis_script_plasma_java_client.sh\n+++ b/ci/travis_script_plasma_java_client.sh\n@@ -19,12 +19,20 @@\n \n set -e\n \n+source $TRAVIS_BUILD_DIR/ci/travis_env_common.sh\n+\n PLASMA_JAVA_DIR=${TRAVIS_BUILD_DIR}/java/plasma\n \n+\n pushd $PLASMA_JAVA_DIR\n \n mvn clean install\n-export PLASMA_STORE=${TRAVIS_BUILD_DIR}/cpp-install/bin/plasma_store_server\n+\n+export LD_LIBRARY_PATH=${ARROW_CPP_INSTALL}/lib:$LD_LIBRARY_PATH\n+export PLASMA_STORE=${ARROW_CPP_INSTALL}/bin/plasma_store_server\n+\n+ldd $PLASMA_STORE\n+\n java -cp target/test-classes:target/classes -Djava.library.path=${TRAVIS_BUILD_DIR}/cpp-build/debug/ org.apache.arrow.plasma.PlasmaClientTest\n \n popd\ndiff --git a/cpp/CMakeLists.txt b/cpp/CMakeLists.txt\nindex 5f7d2caed4..691c307d42 100644\n--- a/cpp/CMakeLists.txt\n+++ b/cpp/CMakeLists.txt\n@@ -308,9 +308,6 @@ Always OFF if building binaries\"\n endif()\n \n if(ARROW_BUILD_TESTS OR ARROW_BUILD_BENCHMARKS)\n-  if (NOT MSVC AND NOT ARROW_BUILD_STATIC)\n-    message(FATAL_ERROR \"ARROW_BUILD_TESTS needs ARROW_BUILD_STATIC\")\n-  endif ()\n   set(ARROW_WITH_BROTLI ON)\n   set(ARROW_WITH_LZ4 ON)\n   set(ARROW_WITH_SNAPPY ON)\n@@ -406,20 +403,7 @@ include(san-config)\n \n # Code coverage\n if (\"${ARROW_GENERATE_COVERAGE}\")\n-  if(\"${CMAKE_CXX_COMPILER}\" MATCHES \".*clang.*\")\n-    # There appears to be some bugs in clang 3.3 which cause code coverage\n-    # to have link errors, not locating the llvm_gcda_* symbols.\n-    # This should be fixed in llvm 3.4 with http://llvm.org/viewvc/llvm-project?view=revision&revision=184666\n-    message(SEND_ERROR \"Cannot currently generate coverage with clang\")\n-  endif()\n   set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} --coverage -DCOVERAGE_BUILD\")\n-\n-  # For coverage to work properly, we need to use static linkage. Otherwise,\n-  # __gcov_flush() doesn't properly flush coverage from every module.\n-  # See http://stackoverflow.com/questions/28164543/using-gcov-flush-within-a-library-doesnt-force-the-other-modules-to-yield-gc\n-  if(NOT ARROW_BUILD_STATIC)\n-    message(SEND_ERROR \"Coverage requires the static lib to be built\")\n-  endif()\n endif()\n \n # CMAKE_CXX_FLAGS now fully assembled\n@@ -714,17 +698,12 @@ if (ARROW_JEMALLOC)\n   add_definitions(-DARROW_JEMALLOC)\n   add_definitions(-DARROW_JEMALLOC_INCLUDE_DIR=${JEMALLOC_INCLUDE_DIR})\n \n-  # If using gcc or clang on Linux, we need to link pthread for older Linuxes,\n-  # including distros as new as Ubuntu 14.04\n-  if ((CMAKE_COMPILER_IS_GNUCXX OR\n-        (NOT APPLE AND CMAKE_CXX_COMPILER_ID MATCHES \"Clang\"))\n-      AND PTHREAD_LIBRARY)\n+  if (NOT WIN32 AND NOT APPLE)\n     set(ARROW_JEMALLOC_LINK_LIBS\n       jemalloc_static\n       # For glibc <2.17 we need to link to librt.\n       # As we compile with --as-needed by default, the linker will omit this\n       # dependency if not required.\n-      ${PTHREAD_LIBRARY}\n       rt\n       )\n   else()\n@@ -738,9 +717,9 @@ if (ARROW_JEMALLOC)\n   set(ARROW_STATIC_LINK_LIBS\n     ${ARROW_STATIC_LINK_LIBS}\n     ${ARROW_JEMALLOC_LINK_LIBS})\n-elseif (PTHREAD_LIBRARY)\n-  # We need to separate this as otherwise CMake would mess with the library\n-  # linking order.\n+endif(ARROW_JEMALLOC)\n+\n+if (PTHREAD_LIBRARY)\n   set(ARROW_LINK_LIBS\n     ${ARROW_LINK_LIBS}\n     ${PTHREAD_LIBRARY})\ndiff --git a/cpp/cmake_modules/ThirdpartyToolchain.cmake b/cpp/cmake_modules/ThirdpartyToolchain.cmake\nindex d8142293ba..fcafb45ee8 100644\n--- a/cpp/cmake_modules/ThirdpartyToolchain.cmake\n+++ b/cpp/cmake_modules/ThirdpartyToolchain.cmake\n@@ -42,8 +42,8 @@ if (NOT \"$ENV{ARROW_BUILD_TOOLCHAIN}\" STREQUAL \"\")\n   # set(ORC_HOME \"$ENV{ARROW_BUILD_TOOLCHAIN}\")\n   set(PROTOBUF_HOME \"$ENV{ARROW_BUILD_TOOLCHAIN}\")\n   set(RAPIDJSON_HOME \"$ENV{ARROW_BUILD_TOOLCHAIN}\")\n-  # conda-forge doesn't have a static re2.\n-  #set(RE2_HOME \"$ENV{ARROW_BUILD_TOOLCHAIN}\")\n+  # ARROW-3494: conda-forge re2 does not work yet\n+  # set(RE2_HOME \"$ENV{ARROW_BUILD_TOOLCHAIN}\")\n   set(SNAPPY_HOME \"$ENV{ARROW_BUILD_TOOLCHAIN}\")\n   set(THRIFT_HOME \"$ENV{ARROW_BUILD_TOOLCHAIN}\")\n   set(ZLIB_HOME \"$ENV{ARROW_BUILD_TOOLCHAIN}\")\ndiff --git a/cpp/src/arrow/gpu/CMakeLists.txt b/cpp/src/arrow/gpu/CMakeLists.txt\nindex a5b11e5a91..465977aa58 100644\n--- a/cpp/src/arrow/gpu/CMakeLists.txt\n+++ b/cpp/src/arrow/gpu/CMakeLists.txt\n@@ -80,8 +80,7 @@ install(\n   DESTINATION \"${CMAKE_INSTALL_LIBDIR}/pkgconfig/\")\n \n set(ARROW_GPU_TEST_LINK_LIBS\n-  # ARROW-2561: Must link statically against arrow and arrow_gpu to avoid double free\n-  arrow_gpu_static\n+  arrow_gpu_shared\n   ${ARROW_TEST_LINK_LIBS})\n \n if (ARROW_BUILD_TESTS)\ndiff --git a/cpp/src/parquet/CMakeLists.txt b/cpp/src/parquet/CMakeLists.txt\nindex 3d46674aca..1b2e72a20a 100644\n--- a/cpp/src/parquet/CMakeLists.txt\n+++ b/cpp/src/parquet/CMakeLists.txt\n@@ -26,7 +26,7 @@ endif()\n add_custom_target(parquet)\n \n function(ADD_PARQUET_TEST REL_TEST_NAME)\n-  set(options NO_VALGRIND)\n+  set(options USE_STATIC_LINKING)\n   set(one_value_args)\n   set(multi_value_args EXTRA_DEPENDENCIES LABELS)\n   cmake_parse_arguments(ARG \"${options}\" \"${one_value_args}\" \"${multi_value_args}\" ${ARGN})\n@@ -34,10 +34,20 @@ function(ADD_PARQUET_TEST REL_TEST_NAME)\n     message(SEND_ERROR \"Error: unrecognized arguments: ${ARG_UNPARSED_ARGUMENTS}\")\n   endif()\n \n-  ADD_ARROW_TEST(${REL_TEST_NAME}\n-    STATIC_LINK_LIBS ${PARQUET_TEST_LINK_LIBS}\n-    PREFIX \"parquet\"\n-    LABELS \"unittest;parquet\")\n+  # By default we prefer shared linking with libparquet, as it's faster\n+  # and uses less disk space, but in some cases we need to force static\n+  # linking (see rationale below).\n+  if (ARG_USE_STATIC_LINKING)\n+    ADD_ARROW_TEST(${REL_TEST_NAME}\n+      STATIC_LINK_LIBS ${PARQUET_STATIC_TEST_LINK_LIBS}\n+      PREFIX \"parquet\"\n+      LABELS \"unittest;parquet\")\n+  else()\n+    ADD_ARROW_TEST(${REL_TEST_NAME}\n+      STATIC_LINK_LIBS ${PARQUET_SHARED_TEST_LINK_LIBS}\n+      PREFIX \"parquet\"\n+      LABELS \"unittest;parquet\")\n+  endif()\n endfunction()\n \n # ----------------------------------------------------------------------\n@@ -85,7 +95,13 @@ elseif(NOT MSVC)\n     ${CMAKE_DL_LIBS})\n endif()\n \n-set(PARQUET_TEST_LINK_LIBS\n+set(PARQUET_SHARED_TEST_LINK_LIBS\n+  ${PARQUET_MIN_TEST_LIBS}\n+  ${PARQUET_ARROW_LINK_LIBS}\n+  parquet_shared\n+  thriftstatic)\n+\n+set(PARQUET_STATIC_TEST_LINK_LIBS\n   ${PARQUET_MIN_TEST_LIBS}\n   ${PARQUET_ARROW_LINK_LIBS}\n   parquet_static\n@@ -257,7 +273,6 @@ ADD_PARQUET_TEST(bloom_filter-test)\n ADD_PARQUET_TEST(column_reader-test)\n ADD_PARQUET_TEST(column_scanner-test)\n ADD_PARQUET_TEST(column_writer-test)\n-ADD_PARQUET_TEST(file-deserialize-test)\n ADD_PARQUET_TEST(file-serialize-test)\n ADD_PARQUET_TEST(properties-test)\n ADD_PARQUET_TEST(statistics-test)\n@@ -266,7 +281,11 @@ ADD_PARQUET_TEST(metadata-test)\n ADD_PARQUET_TEST(public-api-test)\n ADD_PARQUET_TEST(types-test)\n ADD_PARQUET_TEST(reader-test)\n-ADD_PARQUET_TEST(schema-test)\n+\n+# Those tests need to use static linking as they access thrift-generated\n+# symbols which are not exported by parquet.dll on Windows (PARQUET-1420).\n+ADD_PARQUET_TEST(file-deserialize-test USE_STATIC_LINKING)\n+ADD_PARQUET_TEST(schema-test USE_STATIC_LINKING)\n \n #############################################################\n # Benchmark linking\ndiff --git a/cpp/src/parquet/arrow/schema.h b/cpp/src/parquet/arrow/schema.h\nindex 8e920850c1..649fe86120 100644\n--- a/cpp/src/parquet/arrow/schema.h\n+++ b/cpp/src/parquet/arrow/schema.h\n@@ -91,6 +91,7 @@ ::arrow::Status PARQUET_EXPORT ToParquetSchema(const ::arrow::Schema* arrow_sche\n                                                const WriterProperties& properties,\n                                                std::shared_ptr<SchemaDescriptor>* out);\n \n+PARQUET_EXPORT\n int32_t DecimalSize(int32_t precision);\n \n }  // namespace arrow\ndiff --git a/cpp/src/parquet/column_writer-test.cc b/cpp/src/parquet/column_writer-test.cc\nindex 8c20a6e4da..b81f3ed815 100644\n--- a/cpp/src/parquet/column_writer-test.cc\n+++ b/cpp/src/parquet/column_writer-test.cc\n@@ -89,8 +89,7 @@ class TestPrimitiveWriter : public PrimitiveTypedTest<TestType> {\n     wp_builder.max_statistics_size(column_properties.max_statistics_size());\n     writer_properties_ = wp_builder.build();\n \n-    metadata_ = ColumnChunkMetaDataBuilder::Make(\n-        writer_properties_, this->descr_, reinterpret_cast<uint8_t*>(&thrift_metadata_));\n+    metadata_ = ColumnChunkMetaDataBuilder::Make(writer_properties_, this->descr_);\n     std::unique_ptr<PageWriter> pager =\n         PageWriter::Open(sink_.get(), column_properties.compression(), metadata_.get());\n     std::shared_ptr<ColumnWriter> writer =\n@@ -177,8 +176,8 @@ class TestPrimitiveWriter : public PrimitiveTypedTest<TestType> {\n     // Metadata accessor must be created lazily.\n     // This is because the ColumnChunkMetaData semantics dictate the metadata object is\n     // complete (no changes to the metadata buffer can be made after instantiation)\n-    auto metadata_accessor = ColumnChunkMetaData::Make(\n-        reinterpret_cast<const uint8_t*>(&thrift_metadata_), this->descr_);\n+    auto metadata_accessor =\n+        ColumnChunkMetaData::Make(metadata_->contents(), this->descr_);\n     return metadata_accessor->num_values();\n   }\n \n@@ -187,8 +186,8 @@ class TestPrimitiveWriter : public PrimitiveTypedTest<TestType> {\n     // This is because the ColumnChunkMetaData semantics dictate the metadata object is\n     // complete (no changes to the metadata buffer can be made after instantiation)\n     ApplicationVersion app_version(this->writer_properties_->created_by());\n-    auto metadata_accessor = ColumnChunkMetaData::Make(\n-        reinterpret_cast<const uint8_t*>(&thrift_metadata_), this->descr_, &app_version);\n+    auto metadata_accessor =\n+        ColumnChunkMetaData::Make(metadata_->contents(), this->descr_, &app_version);\n     return metadata_accessor->is_stats_set();\n   }\n \n@@ -196,8 +195,8 @@ class TestPrimitiveWriter : public PrimitiveTypedTest<TestType> {\n     // Metadata accessor must be created lazily.\n     // This is because the ColumnChunkMetaData semantics dictate the metadata object is\n     // complete (no changes to the metadata buffer can be made after instantiation)\n-    auto metadata_accessor = ColumnChunkMetaData::Make(\n-        reinterpret_cast<const uint8_t*>(&thrift_metadata_), this->descr_);\n+    auto metadata_accessor =\n+        ColumnChunkMetaData::Make(metadata_->contents(), this->descr_);\n     return metadata_accessor->encodings();\n   }\n \n@@ -213,7 +212,6 @@ class TestPrimitiveWriter : public PrimitiveTypedTest<TestType> {\n   const ColumnDescriptor* descr_;\n \n  private:\n-  format::ColumnChunk thrift_metadata_;\n   std::unique_ptr<ColumnChunkMetaDataBuilder> metadata_;\n   std::unique_ptr<InMemoryOutputStream> sink_;\n   std::shared_ptr<WriterProperties> writer_properties_;\ndiff --git a/cpp/src/parquet/column_writer.h b/cpp/src/parquet/column_writer.h\nindex 457c532bb2..41bc7bd3bf 100644\n--- a/cpp/src/parquet/column_writer.h\n+++ b/cpp/src/parquet/column_writer.h\n@@ -76,7 +76,7 @@ class PARQUET_EXPORT LevelEncoder {\n   std::unique_ptr<::arrow::BitUtil::BitWriter> bit_packed_encoder_;\n };\n \n-class PageWriter {\n+class PARQUET_EXPORT PageWriter {\n  public:\n   virtual ~PageWriter() {}\n \ndiff --git a/cpp/src/parquet/file_reader.h b/cpp/src/parquet/file_reader.h\nindex 6836bb1a20..4730305c93 100644\n--- a/cpp/src/parquet/file_reader.h\n+++ b/cpp/src/parquet/file_reader.h\n@@ -68,10 +68,10 @@ class PARQUET_EXPORT RowGroupReader {\n \n class PARQUET_EXPORT ParquetFileReader {\n  public:\n-  // Forward declare a virtual class 'Contents' to aid dependency injection and more\n+  // Declare a virtual class 'Contents' to aid dependency injection and more\n   // easily create test fixtures\n   // An implementation of the Contents class is defined in the .cc file\n-  struct Contents {\n+  struct PARQUET_EXPORT Contents {\n     static std::unique_ptr<Contents> Open(\n         std::unique_ptr<RandomAccessSource> source,\n         const ReaderProperties& props = default_reader_properties(),\ndiff --git a/cpp/src/parquet/metadata.cc b/cpp/src/parquet/metadata.cc\nindex f49393b60f..cf63b0f662 100644\n--- a/cpp/src/parquet/metadata.cc\n+++ b/cpp/src/parquet/metadata.cc\n@@ -579,18 +579,27 @@ bool ApplicationVersion::HasCorrectStatistics(Type::type col_type,\n // row-group metadata\n class ColumnChunkMetaDataBuilder::ColumnChunkMetaDataBuilderImpl {\n  public:\n+  explicit ColumnChunkMetaDataBuilderImpl(const std::shared_ptr<WriterProperties>& props,\n+                                          const ColumnDescriptor* column)\n+      : owned_column_chunk_(new format::ColumnChunk),\n+        properties_(props),\n+        column_(column) {\n+    Init(owned_column_chunk_.get());\n+  }\n+\n   explicit ColumnChunkMetaDataBuilderImpl(const std::shared_ptr<WriterProperties>& props,\n                                           const ColumnDescriptor* column,\n-                                          uint8_t* contents)\n+                                          format::ColumnChunk* column_chunk)\n       : properties_(props), column_(column) {\n-    column_chunk_ = reinterpret_cast<format::ColumnChunk*>(contents);\n-    column_chunk_->meta_data.__set_type(ToThrift(column->physical_type()));\n-    column_chunk_->meta_data.__set_path_in_schema(column->path()->ToDotVector());\n-    column_chunk_->meta_data.__set_codec(\n-        ToThrift(properties_->compression(column->path())));\n+    Init(column_chunk);\n   }\n+\n   ~ColumnChunkMetaDataBuilderImpl() {}\n \n+  const uint8_t* contents() const {\n+    return reinterpret_cast<const uint8_t*>(column_chunk_);\n+  }\n+\n   // column chunk\n   void set_file_path(const std::string& val) { column_chunk_->__set_file_path(val); }\n \n@@ -662,7 +671,16 @@ class ColumnChunkMetaDataBuilder::ColumnChunkMetaDataBuilderImpl {\n   const ColumnDescriptor* descr() const { return column_; }\n \n  private:\n+  void Init(format::ColumnChunk* column_chunk) {\n+    column_chunk_ = column_chunk;\n+    column_chunk_->meta_data.__set_type(ToThrift(column_->physical_type()));\n+    column_chunk_->meta_data.__set_path_in_schema(column_->path()->ToDotVector());\n+    column_chunk_->meta_data.__set_codec(\n+        ToThrift(properties_->compression(column_->path())));\n+  }\n+\n   format::ColumnChunk* column_chunk_;\n+  std::unique_ptr<format::ColumnChunk> owned_column_chunk_;\n   const std::shared_ptr<WriterProperties> properties_;\n   const ColumnDescriptor* column_;\n };\n@@ -674,14 +692,28 @@ std::unique_ptr<ColumnChunkMetaDataBuilder> ColumnChunkMetaDataBuilder::Make(\n       new ColumnChunkMetaDataBuilder(props, column, contents));\n }\n \n+std::unique_ptr<ColumnChunkMetaDataBuilder> ColumnChunkMetaDataBuilder::Make(\n+    const std::shared_ptr<WriterProperties>& props, const ColumnDescriptor* column) {\n+  return std::unique_ptr<ColumnChunkMetaDataBuilder>(\n+      new ColumnChunkMetaDataBuilder(props, column));\n+}\n+\n+ColumnChunkMetaDataBuilder::ColumnChunkMetaDataBuilder(\n+    const std::shared_ptr<WriterProperties>& props, const ColumnDescriptor* column)\n+    : impl_{std::unique_ptr<ColumnChunkMetaDataBuilderImpl>(\n+          new ColumnChunkMetaDataBuilderImpl(props, column))} {}\n+\n ColumnChunkMetaDataBuilder::ColumnChunkMetaDataBuilder(\n     const std::shared_ptr<WriterProperties>& props, const ColumnDescriptor* column,\n     uint8_t* contents)\n     : impl_{std::unique_ptr<ColumnChunkMetaDataBuilderImpl>(\n-          new ColumnChunkMetaDataBuilderImpl(props, column, contents))} {}\n+          new ColumnChunkMetaDataBuilderImpl(\n+              props, column, reinterpret_cast<format::ColumnChunk*>(contents)))} {}\n \n ColumnChunkMetaDataBuilder::~ColumnChunkMetaDataBuilder() {}\n \n+const uint8_t* ColumnChunkMetaDataBuilder::contents() const { return impl_->contents(); }\n+\n void ColumnChunkMetaDataBuilder::set_file_path(const std::string& path) {\n   impl_->set_file_path(path);\n }\ndiff --git a/cpp/src/parquet/metadata.h b/cpp/src/parquet/metadata.h\nindex 7e29fe91a8..706e980711 100644\n--- a/cpp/src/parquet/metadata.h\n+++ b/cpp/src/parquet/metadata.h\n@@ -37,7 +37,7 @@ namespace parquet {\n \n using KeyValueMetadata = ::arrow::KeyValueMetadata;\n \n-class ApplicationVersion {\n+class PARQUET_EXPORT ApplicationVersion {\n  public:\n   // Known Versions with Issues\n   static const ApplicationVersion& PARQUET_251_FIXED_VERSION();\n@@ -194,6 +194,9 @@ class PARQUET_EXPORT FileMetaData {\n class PARQUET_EXPORT ColumnChunkMetaDataBuilder {\n  public:\n   // API convenience to get a MetaData reader\n+  static std::unique_ptr<ColumnChunkMetaDataBuilder> Make(\n+      const std::shared_ptr<WriterProperties>& props, const ColumnDescriptor* column);\n+\n   static std::unique_ptr<ColumnChunkMetaDataBuilder> Make(\n       const std::shared_ptr<WriterProperties>& props, const ColumnDescriptor* column,\n       uint8_t* contents);\n@@ -213,10 +216,15 @@ class PARQUET_EXPORT ColumnChunkMetaDataBuilder {\n               int64_t compressed_size, int64_t uncompressed_size, bool has_dictionary,\n               bool dictionary_fallback);\n \n+  // The metadata contents, suitable for passing to ColumnChunkMetaData::Make\n+  const uint8_t* contents() const;\n+\n   // For writing metadata at end of column chunk\n   void WriteTo(OutputStream* sink);\n \n  private:\n+  explicit ColumnChunkMetaDataBuilder(const std::shared_ptr<WriterProperties>& props,\n+                                      const ColumnDescriptor* column);\n   explicit ColumnChunkMetaDataBuilder(const std::shared_ptr<WriterProperties>& props,\n                                       const ColumnDescriptor* column, uint8_t* contents);\n   // PIMPL Idiom\ndiff --git a/cpp/src/parquet/schema-test.cc b/cpp/src/parquet/schema-test.cc\nindex 5d2af285a4..3d7eb0ed12 100644\n--- a/cpp/src/parquet/schema-test.cc\n+++ b/cpp/src/parquet/schema-test.cc\n@@ -42,11 +42,11 @@ namespace schema {\n \n static inline SchemaElement NewPrimitive(const std::string& name,\n                                          FieldRepetitionType::type repetition,\n-                                         format::Type::type type, int id = 0) {\n+                                         Type::type type, int id = 0) {\n   SchemaElement result;\n   result.__set_name(name);\n   result.__set_repetition_type(repetition);\n-  result.__set_type(type);\n+  result.__set_type(static_cast<format::Type::type>(type));\n \n   return result;\n }\n@@ -138,8 +138,7 @@ TEST_F(TestPrimitiveNode, Attrs) {\n }\n \n TEST_F(TestPrimitiveNode, FromParquet) {\n-  SchemaElement elt =\n-      NewPrimitive(name_, FieldRepetitionType::OPTIONAL, format::Type::INT32, 0);\n+  SchemaElement elt = NewPrimitive(name_, FieldRepetitionType::OPTIONAL, Type::INT32, 0);\n   ASSERT_NO_FATAL_FAILURE(Convert(&elt));\n   ASSERT_EQ(name_, prim_node_->name());\n   ASSERT_EQ(id_, prim_node_->id());\n@@ -148,7 +147,7 @@ TEST_F(TestPrimitiveNode, FromParquet) {\n   ASSERT_EQ(LogicalType::NONE, prim_node_->logical_type());\n \n   // Test a logical type\n-  elt = NewPrimitive(name_, FieldRepetitionType::REQUIRED, format::Type::BYTE_ARRAY, 0);\n+  elt = NewPrimitive(name_, FieldRepetitionType::REQUIRED, Type::BYTE_ARRAY, 0);\n   elt.__set_converted_type(ConvertedType::UTF8);\n \n   ASSERT_NO_FATAL_FAILURE(Convert(&elt));\n@@ -157,8 +156,7 @@ TEST_F(TestPrimitiveNode, FromParquet) {\n   ASSERT_EQ(LogicalType::UTF8, prim_node_->logical_type());\n \n   // FIXED_LEN_BYTE_ARRAY\n-  elt = NewPrimitive(name_, FieldRepetitionType::OPTIONAL,\n-                     format::Type::FIXED_LEN_BYTE_ARRAY, 0);\n+  elt = NewPrimitive(name_, FieldRepetitionType::OPTIONAL, Type::FIXED_LEN_BYTE_ARRAY, 0);\n   elt.__set_type_length(16);\n \n   ASSERT_NO_FATAL_FAILURE(Convert(&elt));\n@@ -169,8 +167,7 @@ TEST_F(TestPrimitiveNode, FromParquet) {\n   ASSERT_EQ(16, prim_node_->type_length());\n \n   // ConvertedType::Decimal\n-  elt = NewPrimitive(name_, FieldRepetitionType::OPTIONAL,\n-                     format::Type::FIXED_LEN_BYTE_ARRAY, 0);\n+  elt = NewPrimitive(name_, FieldRepetitionType::OPTIONAL, Type::FIXED_LEN_BYTE_ARRAY, 0);\n   elt.__set_converted_type(ConvertedType::DECIMAL);\n   elt.__set_type_length(6);\n   elt.__set_scale(2);\n@@ -419,8 +416,7 @@ TEST_F(TestSchemaConverter, NestedExample) {\n   elements.push_back(NewGroup(name_, FieldRepetitionType::REPEATED, 2, 0));\n \n   // A primitive one\n-  elements.push_back(\n-      NewPrimitive(\"a\", FieldRepetitionType::REQUIRED, format::Type::INT32, 1));\n+  elements.push_back(NewPrimitive(\"a\", FieldRepetitionType::REQUIRED, Type::INT32, 1));\n \n   // A group\n   elements.push_back(NewGroup(\"bag\", FieldRepetitionType::OPTIONAL, 1, 2));\n@@ -429,8 +425,7 @@ TEST_F(TestSchemaConverter, NestedExample) {\n   elt = NewGroup(\"b\", FieldRepetitionType::REPEATED, 1, 3);\n   elt.__set_converted_type(ConvertedType::LIST);\n   elements.push_back(elt);\n-  elements.push_back(\n-      NewPrimitive(\"item\", FieldRepetitionType::OPTIONAL, format::Type::INT64, 4));\n+  elements.push_back(NewPrimitive(\"item\", FieldRepetitionType::OPTIONAL, Type::INT64, 4));\n \n   ASSERT_NO_FATAL_FAILURE(Convert(&elements[0], static_cast<int>(elements.size())));\n \n@@ -461,7 +456,7 @@ TEST_F(TestSchemaConverter, InvalidRoot) {\n \n   SchemaElement elements[2];\n   elements[0] =\n-      NewPrimitive(\"not-a-group\", FieldRepetitionType::REQUIRED, format::Type::INT32, 0);\n+      NewPrimitive(\"not-a-group\", FieldRepetitionType::REQUIRED, Type::INT32, 0);\n   ASSERT_THROW(Convert(elements, 2), ParquetException);\n \n   // While the Parquet spec indicates that the root group should have REPEATED\n@@ -469,7 +464,7 @@ TEST_F(TestSchemaConverter, InvalidRoot) {\n   // groups as the first element. These tests check that this is okay as a\n   // practicality matter.\n   elements[0] = NewGroup(\"not-repeated\", FieldRepetitionType::REQUIRED, 1, 0);\n-  elements[1] = NewPrimitive(\"a\", FieldRepetitionType::REQUIRED, format::Type::INT32, 1);\n+  elements[1] = NewPrimitive(\"a\", FieldRepetitionType::REQUIRED, Type::INT32, 1);\n   ASSERT_NO_FATAL_FAILURE(Convert(elements, 2));\n \n   elements[0] = NewGroup(\"not-repeated\", FieldRepetitionType::OPTIONAL, 1, 0);\n@@ -525,8 +520,7 @@ TEST_F(TestSchemaFlatten, NestedExample) {\n   elements.push_back(NewGroup(name_, FieldRepetitionType::REPEATED, 2, 0));\n \n   // A primitive one\n-  elements.push_back(\n-      NewPrimitive(\"a\", FieldRepetitionType::REQUIRED, format::Type::INT32, 1));\n+  elements.push_back(NewPrimitive(\"a\", FieldRepetitionType::REQUIRED, Type::INT32, 1));\n \n   // A group\n   elements.push_back(NewGroup(\"bag\", FieldRepetitionType::OPTIONAL, 1, 2));\n@@ -535,8 +529,7 @@ TEST_F(TestSchemaFlatten, NestedExample) {\n   elt = NewGroup(\"b\", FieldRepetitionType::REPEATED, 1, 3);\n   elt.__set_converted_type(ConvertedType::LIST);\n   elements.push_back(elt);\n-  elements.push_back(\n-      NewPrimitive(\"item\", FieldRepetitionType::OPTIONAL, format::Type::INT64, 4));\n+  elements.push_back(NewPrimitive(\"item\", FieldRepetitionType::OPTIONAL, Type::INT64, 4));\n \n   // Construct the schema\n   NodeVector fields;\ndiff --git a/cpp/src/parquet/statistics-test.cc b/cpp/src/parquet/statistics-test.cc\nindex d2ecede85c..e1926a36b6 100644\n--- a/cpp/src/parquet/statistics-test.cc\n+++ b/cpp/src/parquet/statistics-test.cc\n@@ -311,9 +311,22 @@ TYPED_TEST(TestNumericRowGroupStatistics, Merge) {\n   ASSERT_NO_FATAL_FAILURE(this->TestMerge());\n }\n \n+// Helper for basic statistics tests below\n+void AssertStatsSet(const ApplicationVersion& version,\n+                    std::shared_ptr<parquet::WriterProperties> props,\n+                    const ColumnDescriptor* column, bool expected_is_set) {\n+  auto metadata_builder = ColumnChunkMetaDataBuilder::Make(props, column);\n+  auto column_chunk =\n+      ColumnChunkMetaData::Make(metadata_builder->contents(), column, &version);\n+  EncodedStatistics stats;\n+  metadata_builder->SetStatistics(false /* is_signed */, stats);\n+  ASSERT_EQ(column_chunk->is_stats_set(), expected_is_set);\n+}\n+\n // Statistics are restricted for few types in older parquet version\n TEST(CorruptStatistics, Basics) {\n-  ApplicationVersion version(\"parquet-mr version 1.8.0\");\n+  std::string created_by = \"parquet-mr version 1.8.0\";\n+  ApplicationVersion version(created_by);\n   SchemaDescriptor schema;\n   schema::NodePtr node;\n   std::vector<schema::NodePtr> fields;\n@@ -335,31 +348,22 @@ TEST(CorruptStatistics, Basics) {\n   node = schema::GroupNode::Make(\"schema\", Repetition::REQUIRED, fields);\n   schema.Init(node);\n \n-  format::ColumnChunk col_chunk;\n-  col_chunk.meta_data.__isset.statistics = true;\n-  auto column_chunk1 = ColumnChunkMetaData::Make(\n-      reinterpret_cast<const uint8_t*>(&col_chunk), schema.Column(0), &version);\n-  ASSERT_TRUE(column_chunk1->is_stats_set());\n-  auto column_chunk2 = ColumnChunkMetaData::Make(\n-      reinterpret_cast<const uint8_t*>(&col_chunk), schema.Column(1), &version);\n-  ASSERT_FALSE(column_chunk2->is_stats_set());\n-  auto column_chunk3 = ColumnChunkMetaData::Make(\n-      reinterpret_cast<const uint8_t*>(&col_chunk), schema.Column(2), &version);\n-  ASSERT_TRUE(column_chunk3->is_stats_set());\n-  auto column_chunk4 = ColumnChunkMetaData::Make(\n-      reinterpret_cast<const uint8_t*>(&col_chunk), schema.Column(3), &version);\n-  ASSERT_FALSE(column_chunk4->is_stats_set());\n-  auto column_chunk5 = ColumnChunkMetaData::Make(\n-      reinterpret_cast<const uint8_t*>(&col_chunk), schema.Column(4), &version);\n-  ASSERT_FALSE(column_chunk5->is_stats_set());\n-  auto column_chunk6 = ColumnChunkMetaData::Make(\n-      reinterpret_cast<const uint8_t*>(&col_chunk), schema.Column(5), &version);\n-  ASSERT_FALSE(column_chunk6->is_stats_set());\n+  parquet::WriterProperties::Builder builder;\n+  builder.created_by(created_by);\n+  std::shared_ptr<parquet::WriterProperties> props = builder.build();\n+\n+  AssertStatsSet(version, props, schema.Column(0), true);\n+  AssertStatsSet(version, props, schema.Column(1), false);\n+  AssertStatsSet(version, props, schema.Column(2), true);\n+  AssertStatsSet(version, props, schema.Column(3), false);\n+  AssertStatsSet(version, props, schema.Column(4), false);\n+  AssertStatsSet(version, props, schema.Column(5), false);\n }\n \n // Statistics for all types have no restrictions in newer parquet version\n TEST(CorrectStatistics, Basics) {\n-  ApplicationVersion version(\"parquet-cpp version 1.3.0\");\n+  std::string created_by = \"parquet-cpp version 1.3.0\";\n+  ApplicationVersion version(created_by);\n   SchemaDescriptor schema;\n   schema::NodePtr node;\n   std::vector<schema::NodePtr> fields;\n@@ -381,26 +385,16 @@ TEST(CorrectStatistics, Basics) {\n   node = schema::GroupNode::Make(\"schema\", Repetition::REQUIRED, fields);\n   schema.Init(node);\n \n-  format::ColumnChunk col_chunk;\n-  col_chunk.meta_data.__isset.statistics = true;\n-  auto column_chunk1 = ColumnChunkMetaData::Make(\n-      reinterpret_cast<const uint8_t*>(&col_chunk), schema.Column(0), &version);\n-  ASSERT_TRUE(column_chunk1->is_stats_set());\n-  auto column_chunk2 = ColumnChunkMetaData::Make(\n-      reinterpret_cast<const uint8_t*>(&col_chunk), schema.Column(1), &version);\n-  ASSERT_TRUE(column_chunk2->is_stats_set());\n-  auto column_chunk3 = ColumnChunkMetaData::Make(\n-      reinterpret_cast<const uint8_t*>(&col_chunk), schema.Column(2), &version);\n-  ASSERT_TRUE(column_chunk3->is_stats_set());\n-  auto column_chunk4 = ColumnChunkMetaData::Make(\n-      reinterpret_cast<const uint8_t*>(&col_chunk), schema.Column(3), &version);\n-  ASSERT_TRUE(column_chunk4->is_stats_set());\n-  auto column_chunk5 = ColumnChunkMetaData::Make(\n-      reinterpret_cast<const uint8_t*>(&col_chunk), schema.Column(4), &version);\n-  ASSERT_FALSE(column_chunk5->is_stats_set());\n-  auto column_chunk6 = ColumnChunkMetaData::Make(\n-      reinterpret_cast<const uint8_t*>(&col_chunk), schema.Column(5), &version);\n-  ASSERT_TRUE(column_chunk6->is_stats_set());\n+  parquet::WriterProperties::Builder builder;\n+  builder.created_by(created_by);\n+  std::shared_ptr<parquet::WriterProperties> props = builder.build();\n+\n+  AssertStatsSet(version, props, schema.Column(0), true);\n+  AssertStatsSet(version, props, schema.Column(1), true);\n+  AssertStatsSet(version, props, schema.Column(2), true);\n+  AssertStatsSet(version, props, schema.Column(3), true);\n+  AssertStatsSet(version, props, schema.Column(4), false);\n+  AssertStatsSet(version, props, schema.Column(5), true);\n }\n \n // Test SortOrder class\ndiff --git a/cpp/src/plasma/CMakeLists.txt b/cpp/src/plasma/CMakeLists.txt\nindex 116d534769..152190f944 100644\n--- a/cpp/src/plasma/CMakeLists.txt\n+++ b/cpp/src/plasma/CMakeLists.txt\n@@ -81,7 +81,7 @@ set(PLASMA_SRCS\n   thirdparty/ae/ae.c\n   thirdparty/xxhash.cc)\n \n-set(PLASMA_LINK_LIBS arrow_static)\n+set(PLASMA_LINK_LIBS arrow_shared)\n \n if (ARROW_GPU)\n   set(PLASMA_LINK_LIBS ${PLASMA_LINK_LIBS} arrow_gpu_shared)\n@@ -129,7 +129,7 @@ if (\"${COMPILER_FAMILY}\" STREQUAL \"gcc\")\n endif()\n \n add_executable(plasma_store_server store.cc)\n-target_link_libraries(plasma_store_server plasma_static ${PLASMA_LINK_LIBS})\n+target_link_libraries(plasma_store_server plasma_shared ${PLASMA_LINK_LIBS})\n \n if (ARROW_RPATH_ORIGIN)\n   if (APPLE)\n@@ -192,9 +192,9 @@ if(ARROW_PLASMA_JAVA_CLIENT)\n     ${PLASMA_LIBRARY_EXT_java_SRC})\n \n   if(APPLE)\n-    target_link_libraries(plasma_java plasma_static ${PLASMA_LINK_LIBS} \"-undefined dynamic_lookup\" -Wl,-force_load,${FLATBUFFERS_STATIC_LIB} ${FLATBUFFERS_STATIC_LIB} ${PTHREAD_LIBRARY})\n+    target_link_libraries(plasma_java plasma_shared ${PLASMA_LINK_LIBS} \"-undefined dynamic_lookup\" -Wl,-force_load,${FLATBUFFERS_STATIC_LIB} ${FLATBUFFERS_STATIC_LIB} ${PTHREAD_LIBRARY})\n   else(APPLE)\n-    target_link_libraries(plasma_java plasma_static ${PLASMA_LINK_LIBS} -Wl,--whole-archive ${FLATBUFFERS_STATIC_LIB} -Wl,--no-whole-archive ${FLATBUFFERS_STATIC_LIB} ${PTHREAD_LIBRARY})\n+    target_link_libraries(plasma_java plasma_shared ${PLASMA_LINK_LIBS} -Wl,--whole-archive ${FLATBUFFERS_STATIC_LIB} -Wl,--no-whole-archive ${FLATBUFFERS_STATIC_LIB} ${PTHREAD_LIBRARY})\n   endif(APPLE)\n endif()\n #######################################\n@@ -202,7 +202,7 @@ endif()\n #######################################\n \n ADD_ARROW_TEST(test/serialization_tests\n-  EXTRA_LINK_LIBS plasma_static ${PLASMA_LINK_LIBS})\n+  EXTRA_LINK_LIBS plasma_shared ${PLASMA_LINK_LIBS})\n ADD_ARROW_TEST(test/client_tests\n-  EXTRA_LINK_LIBS plasma_static ${PLASMA_LINK_LIBS}\n+  EXTRA_LINK_LIBS plasma_shared ${PLASMA_LINK_LIBS}\n   EXTRA_DEPENDENCIES plasma_store_server)\ndiff --git a/java/plasma/src/test/java/org/apache/arrow/plasma/PlasmaClientTest.java b/java/plasma/src/test/java/org/apache/arrow/plasma/PlasmaClientTest.java\nindex eb771faed9..cd132d5e3c 100644\n--- a/java/plasma/src/test/java/org/apache/arrow/plasma/PlasmaClientTest.java\n+++ b/java/plasma/src/test/java/org/apache/arrow/plasma/PlasmaClientTest.java\n@@ -57,6 +57,7 @@ private Process startProcess(String[] cmd) {\n     ProcessBuilder builder;\n     List<String> newCmd = Arrays.stream(cmd).filter(s -> s.length() > 0).collect(Collectors.toList());\n     builder = new ProcessBuilder(newCmd);\n+    builder.inheritIO();\n     Process p = null;\n     try {\n       p = builder.start();\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-11T21:24:22.266+0000",
                    "updated": "2018-10-11T21:24:22.266+0000",
                    "started": "2018-10-11T21:24:22.266+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "153702",
                    "issueId": "13189496"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 5400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5df82bfc[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e9166b4[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@80c92c9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@4d6df1ba[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@46392977[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6dc6c964[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@13094cf[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@23724572[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2c8fa2fa[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@77d9d3e6[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@724aa73e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@43a225d0[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 5400,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Oct 11 21:24:09 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-10-11T21:24:09.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3442/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-10-04T17:18:25.000+0000",
        "updated": "2018-10-11T21:24:22.000+0000",
        "timeoriginalestimate": null,
        "description": "See experience around this in Apache Kudu\r\nhttps://github.com/apache/kudu/commit/48799d3fed53c79a5163fd9c4cd9cbae80a9f2d6",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 5400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Use dynamic linking for unit tests, ensure coverage working properly with clang",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13189496/comment/16643581",
                    "id": "16643581",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "I started looking into this.\r\n* with a modern gcc (gcc 7.3.0 on Ubuntu 18.04), coverage info is generated properly through .so files (but perhaps the gcc version on Travis is too old?)\r\n* collecting coverage generated with clang needs a small hack: http://logan.tw/posts/2015/04/28/check-code-coverage-with-clang-and-lcov/\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-10-09T15:02:15.186+0000",
                    "updated": "2018-10-09T15:02:15.186+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13189496/comment/16643651",
                    "id": "16643651",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "Ok, it seems coverage works fine with the gcc version on Travis too. See example stats here:\r\nhttps://travis-ci.org/pitrou/arrow/jobs/439186839#L3865\r\n\r\nI think the reference in CMakeLists.txt to https://stackoverflow.com/questions/28164543/using-gcov-flush-within-a-library-doesnt-force-the-other-modules-to-yield-gc is a red herring: that SO question is about the case where you want to cover a daemon that gets abruptly killed. When a test file exits gracefully, coverage info seems flushed properly for all compilation units.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-10-09T15:41:29.785+0000",
                    "updated": "2018-10-09T15:41:29.785+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13189496/comment/16643670",
                    "id": "16643670",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "See the llvm gcov wrapper in Kudu https://github.com/apache/kudu/blob/master/build-support/llvm-gcov-wrapper. I think we should use clang for the coverage, since Clang also gives us higher quality warning checks",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-10-09T15:57:03.462+0000",
                    "updated": "2018-10-09T15:57:03.462+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13189496/comment/16643672",
                    "id": "16643672",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "We already use clang in another CI matrix entries, though, so we may keep gcc for coverage if it works.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-10-09T15:59:26.636+0000",
                    "updated": "2018-10-09T15:59:26.636+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13189496/comment/16643793",
                    "id": "16643793",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "PARQUET-1420 will probably be a dependency for this.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-10-09T17:39:17.712+0000",
                    "updated": "2018-10-09T17:39:17.712+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13189496/comment/16644978",
                    "id": "16644978",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "I think we can use dynamic linking for all unit tests that do not require access to non-exported symbols. If there are couple unit tests that use static linking I think that's ok",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-10-10T13:49:01.858+0000",
                    "updated": "2018-10-10T13:49:01.858+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13189496/comment/16645066",
                    "id": "16645066",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "I guess that's a good interim compromise, if I manage to make it succeed :)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-10-10T14:42:42.009+0000",
                    "updated": "2018-10-10T14:42:42.009+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13189496/comment/16647048",
                    "id": "16647048",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 2744\n[https://github.com/apache/arrow/pull/2744]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-10-11T21:24:09.993+0000",
                    "updated": "2018-10-11T21:24:09.993+0000"
                }
            ],
            "maxResults": 8,
            "total": 8,
            "startAt": 0
        },
        "customfield_12311820": "0|i3yucf:",
        "customfield_12314139": null
    }
}