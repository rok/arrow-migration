{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13170658",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170658",
    "key": "ARROW-2808",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343858",
                "id": "12343858",
                "description": "",
                "name": "0.12.0",
                "archived": false,
                "released": true,
                "releaseDate": "2019-01-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
            "name": "apitrou",
            "key": "pitrou",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
            },
            "displayName": "Antoine Pitrou",
            "active": true,
            "timeZone": "Europe/Paris"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 1800,
            "total": 1800,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 1800,
            "total": 1800,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2808/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 3,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170658/worklog/152294",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou opened a new pull request #2725: ARROW-2808: [Python] Add MemoryPool tests\nURL: https://github.com/apache/arrow/pull/2725\n \n \n   Also expand the exposed API a bit.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-08T15:38:41.915+0000",
                    "updated": "2018-10-08T15:38:41.915+0000",
                    "started": "2018-10-08T15:38:41.914+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "152294",
                    "issueId": "13170658"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170658/worklog/152298",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "kszucs commented on a change in pull request #2725: ARROW-2808: [Python] Add MemoryPool tests\nURL: https://github.com/apache/arrow/pull/2725#discussion_r223422995\n \n \n\n ##########\n File path: python/pyarrow/tests/test_memory.py\n ##########\n @@ -0,0 +1,98 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import contextlib\n+\n+import pytest\n+\n+import pyarrow as pa\n+\n+\n+@contextlib.contextmanager\n+def allocate_bytes(pool, nbytes):\n+    \"\"\"\n+    Temporarily allocate *nbytes* from the given *pool*.\n+    \"\"\"\n+    arr = pa.array([b\"x\" * nbytes], type=pa.binary(), memory_pool=pool)\n+    # Fetch the values buffer from the varbinary array and release the rest,\n+    # to get the desired allocation amount\n+    buf = arr.buffers()[2]\n+    arr = None\n+    assert len(buf) == nbytes\n+    try:\n+        yield\n+    finally:\n+        buf = None\n+\n+\n+def check_allocated_bytes(pool):\n+    \"\"\"\n+    Check allocation stats on *pool*.\n+    \"\"\"\n+    allocated_before = pool.bytes_allocated()\n+    max_mem_before = pool.max_memory()\n+    with allocate_bytes(pool, 512):\n+        assert pool.bytes_allocated() == allocated_before + 512\n+        new_max_memory = pool.max_memory()\n+        assert pool.max_memory() >= max_mem_before\n+    assert pool.bytes_allocated() == allocated_before\n+    assert pool.max_memory() == new_max_memory\n+\n+\n+def test_cannot_use_constructors():\n \n Review comment:\n   Could You use [this test case](https://github.com/apache/arrow/blob/master/python/pyarrow/tests/test_misc.py#L122) instead?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-08T16:20:14.293+0000",
                    "updated": "2018-10-08T16:20:14.293+0000",
                    "started": "2018-10-08T16:20:14.293+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "152298",
                    "issueId": "13170658"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170658/worklog/153106",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "xhochy closed pull request #2725: ARROW-2808: [Python] Add MemoryPool tests\nURL: https://github.com/apache/arrow/pull/2725\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/python/pyarrow/__init__.py b/python/pyarrow/__init__.py\nindex 12d78c8075..54ee3a0a58 100644\n--- a/python/pyarrow/__init__.py\n+++ b/python/pyarrow/__init__.py\n@@ -96,9 +96,10 @@ def parse_git(root, **kwargs):\n from pyarrow.lib import (Buffer, ResizableBuffer, foreign_buffer, py_buffer,\n                          compress, decompress, allocate_buffer)\n \n-from pyarrow.lib import (MemoryPool, ProxyMemoryPool, total_allocated_bytes,\n-                         set_memory_pool, default_memory_pool,\n-                         log_memory_allocations)\n+from pyarrow.lib import (MemoryPool, LoggingMemoryPool, ProxyMemoryPool,\n+                         total_allocated_bytes, set_memory_pool,\n+                         default_memory_pool, logging_memory_pool,\n+                         proxy_memory_pool, log_memory_allocations)\n \n from pyarrow.lib import (HdfsFile, NativeFile, PythonFile,\n                          FixedSizeBufferWriter,\ndiff --git a/python/pyarrow/includes/libarrow.pxd b/python/pyarrow/includes/libarrow.pxd\nindex 94aa41d908..e4090b2925 100644\n--- a/python/pyarrow/includes/libarrow.pxd\n+++ b/python/pyarrow/includes/libarrow.pxd\n@@ -187,6 +187,7 @@ cdef extern from \"arrow/api.h\" namespace \"arrow\" nogil:\n \n     cdef cppclass CMemoryPool\" arrow::MemoryPool\":\n         int64_t bytes_allocated()\n+        int64_t max_memory()\n \n     cdef cppclass CLoggingMemoryPool\" arrow::LoggingMemoryPool\"(CMemoryPool):\n         CLoggingMemoryPool(CMemoryPool*)\ndiff --git a/python/pyarrow/memory.pxi b/python/pyarrow/memory.pxi\nindex e99955cf7d..7fa6d79a37 100644\n--- a/python/pyarrow/memory.pxi\n+++ b/python/pyarrow/memory.pxi\n@@ -23,15 +23,31 @@\n cdef class MemoryPool:\n \n     def __init__(self):\n-        raise TypeError(\"Do not call {}'s constructor directly\"\n+        raise TypeError(\"Do not call {}'s constructor directly, \"\n+                        \"use pyarrow.*_memory_pool instead.\"\n                         .format(self.__class__.__name__))\n \n     cdef void init(self, CMemoryPool* pool):\n         self.pool = pool\n \n     def bytes_allocated(self):\n+        \"\"\"\n+        Return the number of bytes that are currently allocated from this\n+        memory pool.\n+        \"\"\"\n         return self.pool.bytes_allocated()\n \n+    def max_memory(self):\n+        \"\"\"\n+        Return the peak memory allocation in this memory pool.\n+        This can be an approximate number in multi-threaded applications.\n+\n+        None is returned if the pool implementation doesn't know how to\n+        compute this number.\n+        \"\"\"\n+        ret = self.pool.max_memory()\n+        return ret if ret >= 0 else None\n+\n \n cdef CMemoryPool* maybe_unbox_memory_pool(MemoryPool memory_pool):\n     if memory_pool is None:\n@@ -45,13 +61,10 @@ cdef class LoggingMemoryPool(MemoryPool):\n         unique_ptr[CLoggingMemoryPool] logging_pool\n \n     def __init__(self):\n-        raise TypeError(\"Do not call {}'s constructor directly\"\n+        raise TypeError(\"Do not call {}'s constructor directly, \"\n+                        \"use pyarrow.logging_memory_pool instead.\"\n                         .format(self.__class__.__name__))\n \n-    def __cinit__(self, MemoryPool pool):\n-        self.logging_pool.reset(new CLoggingMemoryPool(pool.pool))\n-        self.init(self.logging_pool.get())\n-\n \n cdef class ProxyMemoryPool(MemoryPool):\n     \"\"\"\n@@ -62,8 +75,8 @@ cdef class ProxyMemoryPool(MemoryPool):\n         unique_ptr[CProxyMemoryPool] proxy_pool\n \n     def __init__(self):\n-        raise TypeError(\"Do not call {}'s constructor directly. \"\n-                        \"Use pyarrow.proxy_memory_pool instead.\"\n+        raise TypeError(\"Do not call {}'s constructor directly, \"\n+                        \"use pyarrow.proxy_memory_pool instead.\"\n                         .format(self.__class__.__name__))\n \n \n@@ -76,8 +89,8 @@ def default_memory_pool():\n \n def proxy_memory_pool(MemoryPool parent):\n     \"\"\"\n-    Derived MemoryPool class that tracks the number of bytes and\n-    maximum memory allocated through its direct calls.\n+    Create and return a MemoryPool instance that redirects to the\n+    *parent*, but with separate allocation statistics.\n     \"\"\"\n     cdef ProxyMemoryPool out = ProxyMemoryPool.__new__(ProxyMemoryPool)\n     out.proxy_pool.reset(new CProxyMemoryPool(parent.pool))\n@@ -85,13 +98,25 @@ def proxy_memory_pool(MemoryPool parent):\n     return out\n \n \n+def logging_memory_pool(MemoryPool parent):\n+    \"\"\"\n+    Create and return a MemoryPool instance that redirects to the\n+    *parent*, but also dumps allocation logs on stderr.\n+    \"\"\"\n+    cdef LoggingMemoryPool out = LoggingMemoryPool.__new__(\n+        LoggingMemoryPool, parent)\n+    out.logging_pool.reset(new CLoggingMemoryPool(parent.pool))\n+    out.init(out.logging_pool.get())\n+    return out\n+\n+\n def set_memory_pool(MemoryPool pool):\n     c_set_default_memory_pool(pool.pool)\n \n \n cdef MemoryPool _default_memory_pool = default_memory_pool()\n-cdef LoggingMemoryPool _logging_memory_pool = LoggingMemoryPool.__new__(\n-    LoggingMemoryPool, _default_memory_pool)\n+cdef LoggingMemoryPool _logging_memory_pool = logging_memory_pool(\n+    _default_memory_pool)\n \n \n def log_memory_allocations(enable=True):\n@@ -110,5 +135,9 @@ def log_memory_allocations(enable=True):\n \n \n def total_allocated_bytes():\n+    \"\"\"\n+    Return the currently allocated bytes from the default memory pool.\n+    Other memory pools may not be accounted for.\n+    \"\"\"\n     cdef CMemoryPool* pool = c_get_memory_pool()\n     return pool.bytes_allocated()\ndiff --git a/python/pyarrow/tests/test_io.py b/python/pyarrow/tests/test_io.py\nindex f5e5339db9..490825044f 100644\n--- a/python/pyarrow/tests/test_io.py\n+++ b/python/pyarrow/tests/test_io.py\n@@ -256,18 +256,6 @@ def test_python_file_closing():\n     assert bio.closed\n \n \n-# ----------------------------------------------------------------------\n-# MemoryPool\n-\n-\n-def test_memory_pool_cannot_use_ctor():\n-    with pytest.raises(TypeError):\n-        pa.MemoryPool()\n-\n-    with pytest.raises(TypeError):\n-        pa.ProxyMemoryPool()\n-\n-\n # ----------------------------------------------------------------------\n # Buffers\n \ndiff --git a/python/pyarrow/tests/test_memory.py b/python/pyarrow/tests/test_memory.py\nnew file mode 100644\nindex 0000000000..14b8703e14\n--- /dev/null\n+++ b/python/pyarrow/tests/test_memory.py\n@@ -0,0 +1,85 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+import contextlib\n+\n+import pyarrow as pa\n+\n+\n+@contextlib.contextmanager\n+def allocate_bytes(pool, nbytes):\n+    \"\"\"\n+    Temporarily allocate *nbytes* from the given *pool*.\n+    \"\"\"\n+    arr = pa.array([b\"x\" * nbytes], type=pa.binary(), memory_pool=pool)\n+    # Fetch the values buffer from the varbinary array and release the rest,\n+    # to get the desired allocation amount\n+    buf = arr.buffers()[2]\n+    arr = None\n+    assert len(buf) == nbytes\n+    try:\n+        yield\n+    finally:\n+        buf = None\n+\n+\n+def check_allocated_bytes(pool):\n+    \"\"\"\n+    Check allocation stats on *pool*.\n+    \"\"\"\n+    allocated_before = pool.bytes_allocated()\n+    max_mem_before = pool.max_memory()\n+    with allocate_bytes(pool, 512):\n+        assert pool.bytes_allocated() == allocated_before + 512\n+        new_max_memory = pool.max_memory()\n+        assert pool.max_memory() >= max_mem_before\n+    assert pool.bytes_allocated() == allocated_before\n+    assert pool.max_memory() == new_max_memory\n+\n+\n+def test_default_allocated_bytes():\n+    pool = pa.default_memory_pool()\n+    with allocate_bytes(pool, 1024):\n+        check_allocated_bytes(pool)\n+        assert pool.bytes_allocated() == pa.total_allocated_bytes()\n+\n+\n+def test_proxy_memory_pool():\n+    pool = pa.proxy_memory_pool(pa.default_memory_pool())\n+    check_allocated_bytes(pool)\n+\n+\n+def test_logging_memory_pool(capfd):\n+    pool = pa.logging_memory_pool(pa.default_memory_pool())\n+    check_allocated_bytes(pool)\n+    out, err = capfd.readouterr()\n+    assert err == \"\"\n+    assert out.count(\"Allocate:\") > 0\n+    assert out.count(\"Allocate:\") == out.count(\"Free:\")\n+\n+\n+def test_set_memory_pool():\n+    old_pool = pa.default_memory_pool()\n+    pool = pa.proxy_memory_pool(old_pool)\n+    pa.set_memory_pool(pool)\n+    try:\n+        allocated_before = pool.bytes_allocated()\n+        with allocate_bytes(None, 512):\n+            assert pool.bytes_allocated() == allocated_before + 512\n+        assert pool.bytes_allocated() == allocated_before\n+    finally:\n+        pa.set_memory_pool(old_pool)\ndiff --git a/python/pyarrow/tests/test_misc.py b/python/pyarrow/tests/test_misc.py\nindex 58d5f7dd56..1c384f35d7 100644\n--- a/python/pyarrow/tests/test_misc.py\n+++ b/python/pyarrow/tests/test_misc.py\n@@ -117,7 +117,10 @@ def test_cpu_count():\n     pa.StructValue,\n     pa.DictionaryValue,\n     pa.ipc.Message,\n-    pa.ipc.MessageReader\n+    pa.ipc.MessageReader,\n+    pa.MemoryPool,\n+    pa.LoggingMemoryPool,\n+    pa.ProxyMemoryPool,\n ])\n def test_extension_type_constructor_errors(klass):\n     # ARROW-2638: prevent calling extension class constructors directly\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-10-10T11:27:16.099+0000",
                    "updated": "2018-10-10T11:27:16.099+0000",
                    "started": "2018-10-10T11:27:16.098+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "153106",
                    "issueId": "13170658"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 1800,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@2460d008[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@15102fd0[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@77137cb3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@63e9a32e[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@881a3f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@5db0f121[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@312af8c0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@1ff4cd18[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@5f6d653b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@50eae0e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6304ba97[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@5aa137e2[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 1800,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Oct 10 11:27:04 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-10-10T11:27:04.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-2808/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2018-07-07T22:09:45.000+0000",
        "updated": "2018-10-10T11:27:16.000+0000",
        "timeoriginalestimate": null,
        "description": "I could not find unit tests for ProxyMemoryPool",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "0.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 1800
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python] Add unit tests for ProxyMemoryPool, enable new default MemoryPool to be constructed",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170658/comment/16628676",
                    "id": "16628676",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "There is a single test ({{ProxyMemoryPool::Logging}}) in {{memory_pool-test.cc}}.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-09-26T12:26:11.365+0000",
                    "updated": "2018-09-26T12:26:11.365+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170658/comment/16628683",
                    "id": "16628683",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "body": "As for changing the default MemoryPool, unfortunately this may be dangerous. Objects may hold a non-owned pointer to the old default MemoryPool (a {{MemoryPool*}}). Imagine the following sequence:\r\n\r\n- default MemoryPool is changed once\r\n- an object A is created which holds a pointer to the default MemoryPool\r\n- default MemoryPool is changed a second time\r\n\r\nWhat has the MemoryPool pointer held by A become? Presumably the underlying object is destroyed.\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=apitrou",
                        "name": "apitrou",
                        "key": "pitrou",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=pitrou&avatarId=35049",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=pitrou&avatarId=35049",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=pitrou&avatarId=35049",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=pitrou&avatarId=35049"
                        },
                        "displayName": "Antoine Pitrou",
                        "active": true,
                        "timeZone": "Europe/Paris"
                    },
                    "created": "2018-09-26T12:33:05.576+0000",
                    "updated": "2018-09-26T12:33:05.576+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170658/comment/16628691",
                    "id": "16628691",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "There are Python bindings for the proxy pool but no tests to check whether they work. There are no APIs to construct a new MemoryPool in Python AFAICT",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2018-09-26T12:41:09.442+0000",
                    "updated": "2018-09-26T12:41:09.442+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13170658/comment/16644846",
                    "id": "16644846",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "Issue resolved by pull request 2725\n[https://github.com/apache/arrow/pull/2725]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-10-10T11:27:04.869+0000",
                    "updated": "2018-10-10T11:27:04.869+0000"
                }
            ],
            "maxResults": 4,
            "total": 4,
            "startAt": 0
        },
        "customfield_12311820": "0|i3vn53:",
        "customfield_12314139": null
    }
}