{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13120287",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120287",
    "key": "ARROW-1844",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12341352",
                "id": "12341352",
                "name": "0.8.0",
                "archived": false,
                "released": true,
                "releaseDate": "2017-12-18"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1844/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@1d07f92c[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@72275ae2[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@7a3c777b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3204d294[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2fa4a567[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@76f335dc[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6f6d13d6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7be9fcdd[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@716ce15a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@1ede677e[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@192a24d0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@2d112c3c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Nov 29 15:54:19 UTC 2017",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2017-11-29T15:54:19.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1844/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2017-11-22T17:51:08.000+0000",
        "updated": "2017-11-29T15:54:19.000+0000",
        "timeoriginalestimate": null,
        "description": "* Integers, small cardinality and large cardinality\r\n* Short strings, small/large cardinality\r\n* Long strings, small/large cardinality\r\n\r\nThese benchmarks will enable us to refactor without fear, and to experiment with faster hash functions",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Basic benchmark suite for hash kernels",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120287/comment/16269706",
                    "id": "16269706",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm opened a new pull request #1370: ARROW-1844: [C++] Add initial Unique benchmarks for int64, variable-length strings\nURL: https://github.com/apache/arrow/pull/1370\n \n \n   I also fixed a bug this surfaced in the hash table resize (unit test coverage was not adequate)\r\n   \r\n   Now we have\r\n   \r\n   ```\r\n   $ ./release/compute-benchmark \r\n   Run on (8 X 4174.84 MHz CPU s)\r\n   2017-11-28 18:18:26\r\n   Benchmark                                                           Time           CPU Iterations\r\n   -------------------------------------------------------------------------------------------------\r\n   BM_BuildDictionary/min_time:1.000                                1451 us       1451 us        959   2.68974GB/s\r\n   BM_BuildStringDictionary/min_time:1.000                          4005 us       4005 us        350   75.3785MB/s\r\n   BM_UniqueInt64NoNulls/16M/50/min_time:1.000/real_time           35940 us      35942 us         39   91.3192MB/s\r\n   BM_UniqueInt64NoNulls/16M/1024/min_time:1.000/real_time        120002 us     120006 us         12   88.8877MB/s\r\n   BM_UniqueInt64NoNulls/16M/10k/min_time:1.000/real_time         175855 us     175862 us          8   90.9838MB/s\r\n   BM_UniqueInt64NoNulls/16M/1024k/min_time:1.000/real_time       452242 us     452257 us          3   94.3449MB/s\r\n   BM_UniqueInt64WithNulls/16M/50/min_time:1.000/real_time         58632 us      58634 us         29   75.2797MB/s\r\n   BM_UniqueInt64WithNulls/16M/1024/min_time:1.000/real_time      134079 us     134084 us         10   95.4661MB/s\r\n   BM_UniqueInt64WithNulls/16M/10k/min_time:1.000/real_time       183846 us     183851 us          8   87.0295MB/s\r\n   BM_UniqueInt64WithNulls/16M/1024k/min_time:1.000/real_time     528790 us     528808 us          3   80.6873MB/s\r\n   BM_UniqueString10bytes/16M/50/min_time:1.000/real_time         152207 us     152212 us          9     116.8MB/s\r\n   BM_UniqueString10bytes/16M/1024/min_time:1.000/real_time       260047 us     260056 us          5   123.055MB/s\r\n   BM_UniqueString10bytes/16M/10k/min_time:1.000/real_time        426539 us     426552 us          3   125.038MB/s\r\n   BM_UniqueString10bytes/16M/1024k/min_time:1.000/real_time     1716739 us    1716791 us          1      93.2MB/s\r\n   BM_UniqueString100bytes/16M/50/min_time:1.000/real_time        556145 us     556165 us          3   958.982MB/s\r\n   BM_UniqueString100bytes/16M/1024/min_time:1.000/real_time      693922 us     693943 us          2   1.12585GB/s\r\n   BM_UniqueString100bytes/16M/10k/min_time:1.000/real_time      1000449 us    1000484 us          1    1.5618GB/s\r\n   BM_UniqueString100bytes/16M/1024k/min_time:1.000/real_time    3591215 us    3591314 us          1   445.532MB/s\r\n   ```\r\n   \r\n   This suggests quite a lot of room for improvement -- it's counter-intuitive to me that hashing strings seems optically faster than hashing integers, so we should figure out what's going on there.\r\n   \r\n   We can also refactor the hash table implementations without worrying too much about whether we're making things slower\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-28T23:28:49.699+0000",
                    "updated": "2017-11-28T23:28:49.699+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120287/comment/16269728",
                    "id": "16269728",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1370: ARROW-1844: [C++] Add initial Unique benchmarks for int64, variable-length strings\nURL: https://github.com/apache/arrow/pull/1370#issuecomment-347702136\n \n \n   Using 0.5 for the load factor threshold for resizing makes things a lot faster for smaller cardinality tables, with minimal impact on large cardinality tables:\r\n   \r\n   ```\r\n   $ ./release/compute-benchmark \r\n   Run on (8 X 4185.31 MHz CPU s)\r\n   2017-11-28 18:38:38\r\n   Benchmark                                                           Time           CPU Iterations\r\n   -------------------------------------------------------------------------------------------------\r\n   BM_BuildDictionary/min_time:1.000                                1328 us       1328 us       1083   2.93863GB/s\r\n   BM_BuildStringDictionary/min_time:1.000                          3143 us       3143 us        446   96.0677MB/s\r\n   BM_UniqueInt64NoNulls/16M/50/min_time:1.000/real_time           35761 us      35762 us         39   3.49545GB/s\r\n   BM_UniqueInt64NoNulls/16M/1024/min_time:1.000/real_time         69412 us      69414 us         20   1.80085GB/s\r\n   BM_UniqueInt64NoNulls/16M/10k/min_time:1.000/real_time          97227 us      97231 us         14   1.28565GB/s\r\n   BM_UniqueInt64NoNulls/16M/1024k/min_time:1.000/real_time       457800 us     457806 us          3   279.598MB/s\r\n   BM_UniqueInt64WithNulls/16M/50/min_time:1.000/real_time         48785 us      48786 us         29   2.56228GB/s\r\n   BM_UniqueInt64WithNulls/16M/1024/min_time:1.000/real_time       82978 us      82981 us         17   1.50642GB/s\r\n   BM_UniqueInt64WithNulls/16M/10k/min_time:1.000/real_time       111961 us     111965 us         13   1.11646GB/s\r\n   BM_UniqueInt64WithNulls/16M/1024k/min_time:1.000/real_time     531226 us     531244 us          3   240.952MB/s\r\n   BM_UniqueString10bytes/16M/50/min_time:1.000/real_time         150719 us     150724 us          9   1061.58MB/s\r\n   BM_UniqueString10bytes/16M/1024/min_time:1.000/real_time       193408 us     193413 us          7   827.266MB/s\r\n   BM_UniqueString10bytes/16M/10k/min_time:1.000/real_time        278841 us     278851 us          5   573.803MB/s\r\n   BM_UniqueString10bytes/16M/1024k/min_time:1.000/real_time     1700923 us    1700978 us          1   94.0666MB/s\r\n   BM_UniqueString100bytes/16M/50/min_time:1.000/real_time        563184 us     563204 us          2    2.7744GB/s\r\n   BM_UniqueString100bytes/16M/1024/min_time:1.000/real_time      636416 us     636436 us          2   2.45515GB/s\r\n   BM_UniqueString100bytes/16M/10k/min_time:1.000/real_time       861909 us     861941 us          2   1.81284GB/s\r\n   BM_UniqueString100bytes/16M/1024k/min_time:1.000/real_time    3651238 us    3651359 us          1   438.208MB/s\r\n   ```\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-28T23:41:44.719+0000",
                    "updated": "2017-11-28T23:41:44.719+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120287/comment/16270967",
                    "id": "16270967",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm commented on issue #1370: ARROW-1844: [C++] Add initial Unique benchmarks for int64, variable-length strings\nURL: https://github.com/apache/arrow/pull/1370#issuecomment-347900408\n \n \n   +1, we can try different hash functions in a follow-up PR\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-29T15:42:59.039+0000",
                    "updated": "2017-11-29T15:42:59.039+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120287/comment/16270968",
                    "id": "16270968",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "wesm closed pull request #1370: ARROW-1844: [C++] Add initial Unique benchmarks for int64, variable-length strings\nURL: https://github.com/apache/arrow/pull/1370\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/cpp/src/arrow/compute/compute-benchmark.cc b/cpp/src/arrow/compute/compute-benchmark.cc\nindex 974fffcd6..aa7d899c8 100644\n--- a/cpp/src/arrow/compute/compute-benchmark.cc\n+++ b/cpp/src/arrow/compute/compute-benchmark.cc\n@@ -81,8 +81,131 @@ static void BM_BuildStringDictionary(\n   state.SetBytesProcessed(state.iterations() * total_bytes);\n }\n \n-BENCHMARK(BM_BuildDictionary)->Repetitions(3)->Unit(benchmark::kMicrosecond);\n-BENCHMARK(BM_BuildStringDictionary)->Repetitions(3)->Unit(benchmark::kMicrosecond);\n+template <typename Type>\n+struct HashParams {\n+  using T = typename Type::c_type;\n+\n+  double null_percent;\n+\n+  void GenerateTestData(const int64_t length, const int64_t num_unique,\n+                        std::shared_ptr<Array>* arr) const {\n+    std::vector<int64_t> draws;\n+    std::vector<T> values;\n+    std::vector<bool> is_valid;\n+    test::randint<int64_t>(length, 0, num_unique, &draws);\n+    for (int64_t draw : draws) {\n+      values.push_back(draw);\n+    }\n+\n+    if (this->null_percent > 0) {\n+      test::random_is_valid(length, this->null_percent, &is_valid);\n+      ArrayFromVector<Type, T>(is_valid, values, arr);\n+    } else {\n+      ArrayFromVector<Type, T>(values, arr);\n+    }\n+  }\n+\n+  int64_t GetBytesProcessed(int64_t length) const { return length * sizeof(T); }\n+};\n+\n+template <>\n+struct HashParams<StringType> {\n+  double null_percent;\n+  int32_t byte_width;\n+  void GenerateTestData(const int64_t length, const int64_t num_unique,\n+                        std::shared_ptr<Array>* arr) const {\n+    std::vector<int64_t> draws;\n+    test::randint<int64_t>(length, 0, num_unique, &draws);\n+\n+    const int64_t total_bytes = this->byte_width * num_unique;\n+    std::vector<uint8_t> uniques(total_bytes);\n+    const uint32_t seed = 0;\n+    test::random_bytes(total_bytes, seed, uniques.data());\n+\n+    std::vector<bool> is_valid;\n+    if (this->null_percent > 0) {\n+      test::random_is_valid(length, this->null_percent, &is_valid);\n+    }\n+\n+    StringBuilder builder;\n+    for (int64_t i = 0; i < length; ++i) {\n+      if (this->null_percent == 0 || is_valid[i]) {\n+        ABORT_NOT_OK(builder.Append(uniques.data() + this->byte_width * draws[i],\n+                                    this->byte_width));\n+      } else {\n+        ABORT_NOT_OK(builder.AppendNull());\n+      }\n+    }\n+    ABORT_NOT_OK(builder.Finish(arr));\n+  }\n+\n+  int64_t GetBytesProcessed(int64_t length) const { return length * byte_width; }\n+};\n+\n+template <typename ParamType>\n+void BenchUnique(benchmark::State& state, const ParamType& params, int64_t length,\n+                 int64_t num_unique) {\n+  std::shared_ptr<Array> arr;\n+  params.GenerateTestData(length, num_unique, &arr);\n+\n+  FunctionContext ctx;\n+  while (state.KeepRunning()) {\n+    std::shared_ptr<Array> out;\n+    ABORT_NOT_OK(Unique(&ctx, Datum(arr), &out));\n+  }\n+  state.SetBytesProcessed(state.iterations() * params.GetBytesProcessed(length));\n+}\n+\n+template <typename ParamType>\n+void BenchDictionaryEncode(benchmark::State& state, const ParamType& params,\n+                           int64_t length, int64_t num_unique) {\n+  std::shared_ptr<Array> arr;\n+  params.GenerateTestData(length, num_unique, &arr);\n+\n+  FunctionContext ctx;\n+  while (state.KeepRunning()) {\n+    Datum out;\n+    ABORT_NOT_OK(DictionaryEncode(&ctx, Datum(arr), &out));\n+  }\n+  state.SetBytesProcessed(state.iterations() * params.GetBytesProcessed(length));\n+}\n+\n+static void BM_UniqueInt64NoNulls(benchmark::State& state) {\n+  BenchUnique(state, HashParams<Int64Type>{0}, state.range(0), state.range(1));\n+}\n+\n+static void BM_UniqueInt64WithNulls(benchmark::State& state) {\n+  BenchUnique(state, HashParams<Int64Type>{0.05}, state.range(0), state.range(1));\n+}\n+\n+static void BM_UniqueString10bytes(benchmark::State& state) {\n+  // Byte strings with 10 bytes each\n+  BenchUnique(state, HashParams<StringType>{0.05, 10}, state.range(0), state.range(1));\n+}\n+\n+static void BM_UniqueString100bytes(benchmark::State& state) {\n+  // Byte strings with 100 bytes each\n+  BenchUnique(state, HashParams<StringType>{0.05, 100}, state.range(0), state.range(1));\n+}\n+\n+BENCHMARK(BM_BuildDictionary)->MinTime(1.0)->Unit(benchmark::kMicrosecond);\n+BENCHMARK(BM_BuildStringDictionary)->MinTime(1.0)->Unit(benchmark::kMicrosecond);\n+\n+constexpr int64_t kHashBenchmarkLength = 1 << 24;\n+\n+#define ADD_HASH_ARGS(WHAT)                        \\\n+  WHAT->Args({kHashBenchmarkLength, 50})           \\\n+      ->Args({kHashBenchmarkLength, 1 << 10})      \\\n+      ->Args({kHashBenchmarkLength, 10 * 1 << 10}) \\\n+      ->Args({kHashBenchmarkLength, 1 << 20})      \\\n+      ->MinTime(1.0)                               \\\n+      ->Unit(benchmark::kMicrosecond)              \\\n+      ->UseRealTime()\n+\n+ADD_HASH_ARGS(BENCHMARK(BM_UniqueInt64NoNulls));\n+ADD_HASH_ARGS(BENCHMARK(BM_UniqueInt64WithNulls));\n+ADD_HASH_ARGS(BENCHMARK(BM_UniqueString10bytes));\n+ADD_HASH_ARGS(BENCHMARK(BM_UniqueString100bytes));\n \n }  // namespace compute\n }  // namespace arrow\ndiff --git a/cpp/src/arrow/compute/compute-test.cc b/cpp/src/arrow/compute/compute-test.cc\nindex c73bfa309..84af8f7c6 100644\n--- a/cpp/src/arrow/compute/compute-test.cc\n+++ b/cpp/src/arrow/compute/compute-test.cc\n@@ -869,8 +869,8 @@ TYPED_TEST(TestHashKernelPrimitive, PrimitiveResizeTable) {\n     return;\n   }\n \n-  const int64_t kTotalValues = 10000;\n-  const int64_t kRepeats = 10;\n+  const int64_t kTotalValues = 1000000;\n+  const int64_t kRepeats = 5;\n \n   vector<T> values;\n   vector<T> uniques;\ndiff --git a/cpp/src/arrow/compute/kernels/hash.cc b/cpp/src/arrow/compute/kernels/hash.cc\nindex 66c907369..750f1d36a 100644\n--- a/cpp/src/arrow/compute/kernels/hash.cc\n+++ b/cpp/src/arrow/compute/kernels/hash.cc\n@@ -43,7 +43,7 @@ typedef int32_t hash_slot_t;\n static constexpr hash_slot_t kHashSlotEmpty = std::numeric_limits<int32_t>::max();\n \n // The maximum load factor for the hash table before resizing.\n-static constexpr double kMaxHashTableLoad = 0.7;\n+static constexpr double kMaxHashTableLoad = 0.5;\n \n enum class SIMDMode : char { NOSIMD, SSE4, AVX2 };\n \n@@ -260,7 +260,7 @@ struct HashDictionary<Type, enable_if_has_c_type<Type>> {\n       COMPUTE_HASH;                                                              \\\n       while (kHashSlotEmpty != new_hash_slots[j]) {                              \\\n         ++j;                                                                     \\\n-        if (ARROW_PREDICT_FALSE(j == hash_table_size_)) {                        \\\n+        if (ARROW_PREDICT_FALSE(j == new_size)) {                                \\\n           j = 0;                                                                 \\\n         }                                                                        \\\n       }                                                                          \\\n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2017-11-29T15:43:28.702+0000",
                    "updated": "2017-11-29T15:43:28.702+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13120287/comment/16270984",
                    "id": "16270984",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 1370\n[https://github.com/apache/arrow/pull/1370]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2017-11-29T15:54:19.925+0000",
                    "updated": "2017-11-29T15:54:19.925+0000"
                }
            ],
            "maxResults": 5,
            "total": 5,
            "startAt": 0
        },
        "customfield_12311820": "0|i3n3xb:",
        "customfield_12314139": null
    }
}