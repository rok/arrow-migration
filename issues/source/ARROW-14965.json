{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13415047",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415047",
    "key": "ARROW-14965",
    "fields": {
        "fixVersions": [],
        "resolution": null,
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/4",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/minor.svg",
            "name": "Minor",
            "id": "4"
        },
        "labels": [],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": null,
        "customfield_12312330": null,
        "versions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12350323",
                "id": "12350323",
                "description": "",
                "name": "6.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-10-26"
            }
        ],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": null,
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
            "description": "The issue is open and ready for the assignee to start work on it.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
            "name": "Open",
            "id": "1",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                "id": 2,
                "key": "new",
                "colorName": "blue-gray",
                "name": "To Do"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            },
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328936",
                "id": "12328936",
                "name": "Python"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": null,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=gatesn",
            "name": "gatesn",
            "key": "JIRAUSER281116",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Nick Gates",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=gatesn",
            "name": "gatesn",
            "key": "JIRAUSER281116",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Nick Gates",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 0,
            "total": 0
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14965/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 0,
            "worklogs": []
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": null,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@418a1e4a[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@531a7f5[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1ed91d3[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@9eb8014[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@767fafcd[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@43e00648[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e6e74ee[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@7b50ba17[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@70da6377[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@33cbf962[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6e5f22f1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@10a1bd2f[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": null,
        "customfield_12312520": null,
        "customfield_12312521": "Wed Dec 08 21:52:49 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": [
            "Python"
        ],
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": null,
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-14965/watchers",
            "watchCount": 3,
            "isWatching": false
        },
        "created": "2021-12-02T13:17:16.000+0000",
        "updated": "2021-12-08T21:52:49.000+0000",
        "timeoriginalestimate": null,
        "description": "I'm attempting to read a table from multiple Parquet files where I already know which row_groups I want to read from each file. I also want to apply a filter expression while reading. To do this my code looks roughly like this:\r\n\r\n\u00a0\r\n{code:java}\r\ndef read_file(filepath):\r\n\u00a0 \u00a0 format = ds.ParquetFileFormat(...)\r\n\u00a0 \u00a0 fragment = format.make_fragment(filepath, row_groups=[0, 1, 2, ...])\r\n\u00a0 \u00a0 scanner = ds.Scanner.from_fragment(\r\n        fragment, \r\n        use_threads=True,\r\n        use_async=False,\r\n        filter=...\r\n    )\r\n\u00a0 \u00a0 return scanner.to_reader().read_all()\r\n\r\nwith ThreadPoolExecutor() as pool:\r\n\u00a0 \u00a0 pa.concat_tables(pool.map(read_file, file_paths)) {code}\r\nRunning with a ProcessPoolExecutor, each of my 13 read_file calls takes at most 2 seconds. However, with a ThreadPoolExecutor some of the read_file calls take 20+ seconds.\r\n\r\n\u00a0\r\n\r\nI've tried running this with various combinations of use_threads and use_async to try and see what's happening. The code blocks are sourced from py-spy, and identifying contention was done with viztracer.\r\n\r\n\u00a0\r\n\r\n*use_threads: False, use_async: False*\r\n * It looks like pyarrow._dataset.Scanner.to_reader doesn't release the GIL: [https://github.com/apache/arrow/blob/be9a22b9b76d9cd83d85d52ffc2844056d90f367/python/pyarrow/_dataset.pyx#L3278-L3283]\r\n * pyarrow._dataset.from_fragment seems to be contended. Py-spy suggests this is around getting the physical_schema from the fragment?\r\n\r\n\u00a0\r\n{code:java}\r\nfrom_fragment (pyarrow/_dataset.cpython-37m-x86_64-linux-gnu.so)\r\n__pyx_getprop_7pyarrow_8_dataset_8Fragment_physical_schema (pyarrow/_dataset.cpython-37m-x86_64-linux-gnu.so)\r\n__pthread_cond_timedwait (libpthread-2.17.so) {code}\r\n\u00a0\r\n\r\n*use_threads: False, use_async: True*\r\n * There's no longer any contention for pyarrow._dataset.from_fragment\r\n * But there's lots of contention for pyarrow.lib.RecordBatchReader.read_all\r\n\r\n\u00a0\r\n{code:java}\r\narrow::RecordBatchReader::ReadAll (pyarrow/libarrow.so.600)\r\narrow::dataset::(anonymous namespace)::ScannerRecordBatchReader::ReadNext (pyarrow/libarrow_dataset.so.600)\r\narrow::Iterator<arrow::dataset::TaggedRecordBatch>::Next<arrow::GeneratorIterator<arrow::dataset::TaggedRecordBatch> > (pyarrow/libarrow_dataset.so.600)\r\narrow::FutureImpl::Wait (pyarrow/libarrow.so.600) \r\nstd::condition_variable::wait (libstdc++.so.6.0.19){code}\r\n*use_threads: True, use_async: False*\r\n * Appears to be some contention on Scanner.to_reader\r\n * But most contention remains for RecordBatchReader.read_all\r\n\r\n{code:java}\r\narrow::RecordBatchReader::ReadAll (pyarrow/libarrow.so.600)\r\narrow::dataset::(anonymous namespace)::ScannerRecordBatchReader::ReadNext (pyarrow/libarrow_dataset.so.600)\r\narrow::Iterator<arrow::dataset::TaggedRecordBatch>::Next<arrow::FunctionIterator<arrow::dataset::(anonymous namespace)::SyncScanner::ScanBatches(arrow::Iterator<std::shared_ptr<arrow::dataset::ScanTask> >)::{lambda()#1}, arrow::dataset::TaggedRecordBatch> > (pyarrow/libarrow_dataset.so.600)\r\nstd::condition_variable::wait (libstdc++.so.6.0.19)\r\n__pthread_cond_wait (libpthread-2.17.so) {code}\r\n*use_threads: True, use_async: True*\r\n * Contention again mostly for RecordBatchReader.read_all, but seems to complete in ~12 seconds rather than 20\r\n\r\n{code:java}\r\narrow::RecordBatchReader::ReadAll (pyarrow/libarrow.so.600)\r\narrow::dataset::(anonymous namespace)::ScannerRecordBatchReader::ReadNext (pyarrow/libarrow_dataset.so.600)\r\narrow::Iterator<arrow::dataset::TaggedRecordBatch>::Next<arrow::GeneratorIterator<arrow::dataset::TaggedRecordBatch> > (pyarrow/libarrow_dataset.so.600)\r\narrow::FutureImpl::Wait (pyarrow/libarrow.so.600)\r\nstd::condition_variable::wait (libstdc++.so.6.0.19)\r\n__pthread_cond_wait (libpthread-2.17.so) {code}\r\nIs this expected behaviour? Or should it be possible to achieve the same performance from multi-threading as from multi-processing?\r\n\r\n\u00a0\r\n\r\n\u00a0",
        "customfield_10010": null,
        "timetracking": {},
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Python][C++] Contention when reading Parquet files with multi-threading",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415047/comment/17452563",
                    "id": "17452563",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "I'm not sure that contention is the right word here.  ReadAll is indeed a long blocking method but it should be releasing the GIL and should not be holding any locks during this operation.  Do you think that is not happening?  I will try and play with this some more later today.\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-12-02T19:01:35.874+0000",
                    "updated": "2021-12-02T19:01:35.874+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415047/comment/17452707",
                    "id": "17452707",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "> It looks like pyarrow._dataset.Scanner.to_reader doesn't release the GIL: https://github.com/apache/arrow/blob/be9a22b9b76d9cd83d85d52ffc2844056d90f367/python/pyarrow/_dataset.pyx#L3278-L3283\r\n\r\nThis is a fast operation.  I see no reason to release the GIL here.\r\n\r\n> XYZ seems to be contended\r\n\r\nArrow has its own internal thread pool.  Typically what happens is thread tasks are added to the thread pool and the calling thread is blocked until all the necessary tasks are finished.  So this contention is expected.  As long as we aren't holding the GIL this should be relatively harmless.\r\n\r\n> Running with a ProcessPoolExecutor, each of my 13 read_file calls takes at most 2 seconds. However, with a ThreadPoolExecutor some of the read_file calls take 20+ seconds.\r\n...\r\n> Contention again mostly for RecordBatchReader.read_all, but seems to complete in ~12 seconds rather than 20\r\n\r\nAre you saying that all 13 read_file calls run in parallel and complete in 2 seconds?  This is an issue if ProcessPoolExecutor can read all 13 files in 2 seconds but ThreadPoolExecutor requires 12 seconds.\r\n\r\nHowever, there could certainly be reasons for it.  For example, ARROW-14974.  Using ThreadPoolExecutor means you are sharing a single CPU thread pool.  Using ProcessPoolExecutor means each process will have its own CPU thread pool.  In theory this shouldn't be a problem, we defer slow I/O tasks to the I/O thread pool and so we should only put compute tasks on the CPU thread pool.  Since the CPU thread pool is the same size as the # of compute units on the system there wouldn't be much advantage to having multiple CPU thread pools (e.g. it doesn't matter if I number crunch on 10 threads or 20 threads if I only have 8 cores).  In practice we could certainly have mistakes.\r\n\r\nI tried to run a number of experiments myself.  I created 13 parquet files, each 12MB.  I tried reading them with a ThreadPoolExecutor, a ProcessPoolExecutor, and a dataset.  I didn't use a filter or limit the row groups (I'll experiment with these later) but just read in the entire dataset.\r\n\r\nWith cold-I/O I had a lot of variability and the three approaches performed more or less the same (ProcessPoolExecutor seemed a bit slower but I didn't run enough experiments to verify).\r\n\r\nWith hot-I/O the ProcessPoolExecutor performed much worse than the other two approaches (which performed similarly).\r\n\r\nSo, basically, I am not reproducing the same behavior yet.  I will try adding a filter.\r\n\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-12-03T02:59:25.796+0000",
                    "updated": "2021-12-03T02:59:25.796+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415047/comment/17452712",
                    "id": "17452712",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Adding a filter (~50% selectivity) didn't seem to have much effect.  The hot-I/O path slowed down slightly for threads & dataset and it sped up for process (presumably because less data has to be copied to the main process) but it wasn't enough to close the gap between the two.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-12-03T03:07:33.232+0000",
                    "updated": "2021-12-03T03:07:33.232+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415047/comment/17452843",
                    "id": "17452843",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=gatesn",
                        "name": "gatesn",
                        "key": "JIRAUSER281116",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Nick Gates",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Really appreciate you looking into this - I will work to extract a minimal reproduction of this with executable code rather than the psuedo code above.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=gatesn",
                        "name": "gatesn",
                        "key": "JIRAUSER281116",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Nick Gates",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-12-03T09:08:38.689+0000",
                    "updated": "2021-12-03T09:08:38.689+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415047/comment/17454007",
                    "id": "17454007",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=gatesn",
                        "name": "gatesn",
                        "key": "JIRAUSER281116",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Nick Gates",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "So I've done some more digging today and I can only seem to reproduce this against S3.\u00a0\r\n\r\nMy best guess is that the S3 maxConnections parameter which defaults to 25 is too low for the bandwidth I have when running with multi-threading. Multi-processing presumably forks / creates separate S3 clients so I get process count * 25 connections to S3.\r\n\r\nWould it be possible to expose that parameter through the S3FileSystem constructor?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=gatesn",
                        "name": "gatesn",
                        "key": "JIRAUSER281116",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Nick Gates",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-12-06T13:15:44.271+0000",
                    "updated": "2021-12-06T13:15:44.271+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415047/comment/17454174",
                    "id": "17454174",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "That makes a lot of sense.  I didn't realize you were using S3.  There is another throttle before you even get to the maxConnections throttle which is the I/O thread pool size.  Although, since this is parquet, it might be the CPU thread pool size.  Can you try modifying the CPU and I/O thread pool sizes to see if they have an effect on performance?  We should also bump that maxConnections parameter up too.\r\n\r\nThe python calls are:\r\n\r\n[pyarrow.set_cpu_count|https://arrow.apache.org/docs/python/generated/pyarrow.set_cpu_count.html]\r\npyarrow.set_io_thread_count (which appears to be missing from the docs, I'll open a ticket on that)\r\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-12-06T18:28:03.920+0000",
                    "updated": "2021-12-06T18:28:03.920+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415047/comment/17455078",
                    "id": "17455078",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=gatesn",
                        "name": "gatesn",
                        "key": "JIRAUSER281116",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Nick Gates",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Initially cpu=8, and io=8.\r\n\r\nCPU count didn't seem to make a difference when I bumped that.\r\n\r\nBut as expected, IO threads made a big difference. From ~30 seconds with 8 threads to ~8 seconds with 32 threads. Although any higher and I didn't see any improvement.\r\n\r\n\u00a0\r\n\r\nSo to summarise:\r\n* When running with multi-processing the maximum duration of Scanner.to_table is ~2 seconds.\r\n* When running with multi-threading, the Scanner.to_table max is ~25 seconds\r\n* When running with multi-threading, and set_io_thread_count(32), the Scanner.to_table is ~5 seconds\r\n\r\n\r\nShould the default io thread pool be set to 5 * cpu_count, as per Python's ThreadPoolExecutor?\r\nAnd it seems like it would also be helpful to be able to configure S3 SDK max connections (not sure if they're threaded or non-blocking?) to capture that last bit of performance.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=gatesn",
                        "name": "gatesn",
                        "key": "JIRAUSER281116",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Nick Gates",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2021-12-08T09:30:21.448+0000",
                    "updated": "2021-12-08T09:30:21.448+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13415047/comment/17456009",
                    "id": "17456009",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "The latest default value is actually min(32, os.cpu_count() + 4) which would be too small in this case.  It's hard to say that there is a good single default for this.  5*cpu_count would be too high for an HDD (and probably even an SSD).  There is some prerequisite work to allow the thread pool to be configured per-filesystem which might help us come up with better defaults.  I've created ARROW-15035 as a placeholder to finish that work.  However, I don't know when someone will have time to get to it.  Being able to change the global thread pool size is probably \"good enough\" for some time.\r\n\r\nAlso, it seems like we are not quite reaching the peak multi-process performance.  I agree it would be interesting to test a higher max connections.  I've created ARROW-15036 for this.\r\n\r\nThis issue we can leave open in case there is some other factor preventing us from reaching that 2 seconds.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=westonpace",
                        "name": "westonpace",
                        "key": "westonpace",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Weston Pace",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-12-08T21:52:49.803+0000",
                    "updated": "2021-12-08T21:52:49.803+0000"
                }
            ],
            "maxResults": 8,
            "total": 8,
            "startAt": 0
        },
        "customfield_12311820": "0|z0xan4:",
        "customfield_12314139": null
    }
}