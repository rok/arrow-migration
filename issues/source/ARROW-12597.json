{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13375829",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375829",
    "key": "ARROW-12597",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12349983",
                "id": "12349983",
                "description": "",
                "name": "5.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2021-07-28"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12616974",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12616974",
                "type": {
                    "id": "12310000",
                    "name": "Duplicate",
                    "inward": "is duplicated by",
                    "outward": "duplicates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"
                },
                "inwardIssue": {
                    "id": "13381461",
                    "key": "ARROW-12916",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13381461",
                    "fields": {
                        "summary": "[C++][Parquet] Always transfer to executor in Parquet AsyncGenerator",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12616975",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12616975",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "outwardIssue": {
                    "id": "13361955",
                    "key": "ARROW-11843",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13361955",
                    "fields": {
                        "summary": "[C++] Add asynchronous read to parquet::arrow::FileReader",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                            "name": "Resolved",
                            "id": "5",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
                            "id": "7",
                            "description": "The sub-task of the issue",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
                            "name": "Sub-task",
                            "subtask": true,
                            "avatarId": 21146
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
            "name": "lidavidm",
            "key": "lidavidm",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "David Li",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 6600,
            "total": 6600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12597/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 11,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375829/worklog/608468",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm opened a new pull request #10482:\nURL: https://github.com/apache/arrow/pull/10482\n\n\n   This adds an OptionalParallelForAsync which lets us have per-row-group parallelism without nested parallelism in the async Parquet reader. This also uses TransferAlways, taking care of ARROW-12916. `enable_parallel_column_conversion` is kept as it still affects the threaded scanner.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-08T13:53:37.962+0000",
                    "updated": "2021-06-08T13:53:37.962+0000",
                    "started": "2021-06-08T13:53:37.962+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "608468",
                    "issueId": "13375829"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375829/worklog/608469",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #10482:\nURL: https://github.com/apache/arrow/pull/10482#issuecomment-856788618\n\n\n   https://issues.apache.org/jira/browse/ARROW-12597\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-08T13:53:58.386+0000",
                    "updated": "2021-06-08T13:53:58.386+0000",
                    "started": "2021-06-08T13:53:58.386+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "608469",
                    "issueId": "13375829"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375829/worklog/608480",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on pull request #10482:\nURL: https://github.com/apache/arrow/pull/10482#issuecomment-856796494\n\n\n   ![S3 Median Scan Time (s)(2)](https://user-images.githubusercontent.com/327919/121199002-8df46b80-c840-11eb-99e4-a7141cd49ce8.png)\r\n   \r\n   Not much difference in a benchmark; the most pronounced change is when files << cores (this was a 4 vcpu machine), which I think makes sense since with many files, file-level parallelism takes hold.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-08T14:03:03.913+0000",
                    "updated": "2021-06-08T14:03:03.913+0000",
                    "started": "2021-06-08T14:03:03.912+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "608480",
                    "issueId": "13375829"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375829/worklog/609564",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10482:\nURL: https://github.com/apache/arrow/pull/10482#discussion_r648968980\n\n\n\n##########\nFile path: cpp/src/arrow/util/parallel.h\n##########\n@@ -44,6 +45,25 @@ Status ParallelFor(int num_tasks, FUNCTION&& func,\n   return st;\n }\n \n+template <class FUNCTION, typename T,\n+          typename R = typename internal::call_traits::return_type<FUNCTION>::ValueType>\n+Future<std::vector<R>> ParallelForAsync(\n+    std::vector<T> inputs, FUNCTION&& func,\n\nReview comment:\n       Is there a particular reason for taking a vector of input instead of a `num_tasks` such as above?\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -1024,31 +1027,32 @@ class RowGroupGenerator {\n       ::arrow::internal::Executor* cpu_executor, std::shared_ptr<FileReaderImpl> self,\n       const int row_group, const std::vector<int>& column_indices) {\n     if (!cpu_executor) {\n-      return Future<RecordBatchGenerator>::MakeFinished(\n-          ReadOneRowGroup(self, row_group, column_indices));\n+      return ReadOneRowGroup(cpu_executor, self, row_group, column_indices);\n     }\n     // If we have an executor, then force transfer (even if I/O was complete)\n-    return ::arrow::DeferNotOk(\n-        cpu_executor->Submit(ReadOneRowGroup, self, row_group, column_indices));\n+    return ::arrow::DeferNotOk(cpu_executor->Submit(ReadOneRowGroup, cpu_executor, self,\n+                                                    row_group, column_indices));\n   }\n \n-  static ::arrow::Result<RecordBatchGenerator> ReadOneRowGroup(\n-      std::shared_ptr<FileReaderImpl> self, const int row_group,\n-      const std::vector<int>& column_indices) {\n-    std::shared_ptr<::arrow::Table> table;\n+  static ::arrow::Future<RecordBatchGenerator> ReadOneRowGroup(\n+      ::arrow::internal::Executor* cpu_executor, std::shared_ptr<FileReaderImpl> self,\n+      const int row_group, const std::vector<int>& column_indices) {\n     // Skips bound checks/pre-buffering, since we've done that already\n-    RETURN_NOT_OK(self->DecodeRowGroups({row_group}, column_indices, &table));\n-    auto table_reader = std::make_shared<::arrow::TableBatchReader>(*table);\n-    ::arrow::RecordBatchVector batches;\n-    while (true) {\n-      std::shared_ptr<::arrow::RecordBatch> batch;\n-      RETURN_NOT_OK(table_reader->ReadNext(&batch));\n-      if (!batch) {\n-        break;\n-      }\n-      batches.push_back(batch);\n-    }\n-    return ::arrow::MakeVectorGenerator(std::move(batches));\n+    return self->DecodeRowGroups(self, {row_group}, column_indices, cpu_executor)\n+        .Then([](const std::shared_ptr<Table>& table)\n+                  -> ::arrow::Result<RecordBatchGenerator> {\n+          auto table_reader = std::make_shared<::arrow::TableBatchReader>(*table);\n+          ::arrow::RecordBatchVector batches;\n+          while (true) {\n\nReview comment:\n       Can use `table_reader->ReadAll(&batches)`?\n\n##########\nFile path: cpp/src/arrow/util/parallel.h\n##########\n@@ -44,6 +45,25 @@ Status ParallelFor(int num_tasks, FUNCTION&& func,\n   return st;\n }\n \n+template <class FUNCTION, typename T,\n+          typename R = typename internal::call_traits::return_type<FUNCTION>::ValueType>\n+Future<std::vector<R>> ParallelForAsync(\n+    std::vector<T> inputs, FUNCTION&& func,\n+    Executor* executor = internal::GetCpuThreadPool()) {\n+  std::vector<Future<R>> futures(inputs.size());\n+  for (size_t i = 0; i < inputs.size(); ++i) {\n+    ARROW_ASSIGN_OR_RAISE(futures[i], executor->Submit(func, i, std::move(inputs[i])));\n+  }\n+  return All(std::move(futures))\n+      .Then([](const std::vector<Result<R>>& results) -> Result<std::vector<R>> {\n\nReview comment:\n       or `CollectResults`\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -1024,31 +1027,32 @@ class RowGroupGenerator {\n       ::arrow::internal::Executor* cpu_executor, std::shared_ptr<FileReaderImpl> self,\n       const int row_group, const std::vector<int>& column_indices) {\n     if (!cpu_executor) {\n-      return Future<RecordBatchGenerator>::MakeFinished(\n-          ReadOneRowGroup(self, row_group, column_indices));\n+      return ReadOneRowGroup(cpu_executor, self, row_group, column_indices);\n     }\n     // If we have an executor, then force transfer (even if I/O was complete)\n-    return ::arrow::DeferNotOk(\n-        cpu_executor->Submit(ReadOneRowGroup, self, row_group, column_indices));\n+    return ::arrow::DeferNotOk(cpu_executor->Submit(ReadOneRowGroup, cpu_executor, self,\n+                                                    row_group, column_indices));\n   }\n \n-  static ::arrow::Result<RecordBatchGenerator> ReadOneRowGroup(\n-      std::shared_ptr<FileReaderImpl> self, const int row_group,\n-      const std::vector<int>& column_indices) {\n-    std::shared_ptr<::arrow::Table> table;\n+  static ::arrow::Future<RecordBatchGenerator> ReadOneRowGroup(\n+      ::arrow::internal::Executor* cpu_executor, std::shared_ptr<FileReaderImpl> self,\n+      const int row_group, const std::vector<int>& column_indices) {\n     // Skips bound checks/pre-buffering, since we've done that already\n-    RETURN_NOT_OK(self->DecodeRowGroups({row_group}, column_indices, &table));\n-    auto table_reader = std::make_shared<::arrow::TableBatchReader>(*table);\n-    ::arrow::RecordBatchVector batches;\n-    while (true) {\n-      std::shared_ptr<::arrow::RecordBatch> batch;\n-      RETURN_NOT_OK(table_reader->ReadNext(&batch));\n-      if (!batch) {\n-        break;\n-      }\n-      batches.push_back(batch);\n-    }\n-    return ::arrow::MakeVectorGenerator(std::move(batches));\n+    return self->DecodeRowGroups(self, {row_group}, column_indices, cpu_executor)\n+        .Then([](const std::shared_ptr<Table>& table)\n+                  -> ::arrow::Result<RecordBatchGenerator> {\n+          auto table_reader = std::make_shared<::arrow::TableBatchReader>(*table);\n\nReview comment:\n       It doesn't look like `make_shared` is useful, just construct the `TableBatchReader` directly.\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -1134,6 +1138,42 @@ Status FileReaderImpl::DecodeRowGroups(const std::vector<int>& row_groups,\n   return (*out)->Validate();\n }\n \n+Future<std::shared_ptr<Table>> FileReaderImpl::DecodeRowGroups(\n\nReview comment:\n       Is there a way to reconcile this with the sync `DecodeRowGroups` version?\n\n##########\nFile path: cpp/src/arrow/util/parallel.h\n##########\n@@ -44,6 +45,25 @@ Status ParallelFor(int num_tasks, FUNCTION&& func,\n   return st;\n }\n \n+template <class FUNCTION, typename T,\n+          typename R = typename internal::call_traits::return_type<FUNCTION>::ValueType>\n+Future<std::vector<R>> ParallelForAsync(\n+    std::vector<T> inputs, FUNCTION&& func,\n+    Executor* executor = internal::GetCpuThreadPool()) {\n+  std::vector<Future<R>> futures(inputs.size());\n+  for (size_t i = 0; i < inputs.size(); ++i) {\n+    ARROW_ASSIGN_OR_RAISE(futures[i], executor->Submit(func, i, std::move(inputs[i])));\n+  }\n+  return All(std::move(futures))\n+      .Then([](const std::vector<Result<R>>& results) -> Result<std::vector<R>> {\n\nReview comment:\n       Perhaps we want to expose a `Result<std::vector<T>> GatherResults(const std::vector<Result<T>>&)` somewhere?\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -1134,6 +1138,42 @@ Status FileReaderImpl::DecodeRowGroups(const std::vector<int>& row_groups,\n   return (*out)->Validate();\n }\n \n+Future<std::shared_ptr<Table>> FileReaderImpl::DecodeRowGroups(\n+    std::shared_ptr<FileReaderImpl> self, const std::vector<int>& row_groups,\n+    const std::vector<int>& column_indices, ::arrow::internal::Executor* cpu_executor) {\n+  std::vector<std::shared_ptr<ColumnReaderImpl>> readers;\n+  std::shared_ptr<::arrow::Schema> result_schema;\n+  RETURN_NOT_OK(GetFieldReaders(column_indices, row_groups, &readers, &result_schema));\n+\n+  // OptionalParallelForAsync requires an executor\n+  if (!cpu_executor) cpu_executor = ::arrow::internal::GetCpuThreadPool();\n+  return ::arrow::internal::OptionalParallelForAsync(\n+             reader_properties_.use_threads(), std::move(readers),\n+             [row_groups, self](int i, std::shared_ptr<ColumnReaderImpl> reader)\n+                 -> ::arrow::Result<std::shared_ptr<::arrow::ChunkedArray>> {\n+               std::shared_ptr<::arrow::ChunkedArray> column;\n+               RETURN_NOT_OK(self->ReadColumn(static_cast<int>(i), row_groups,\n+                                              reader.get(), &column));\n+               return column;\n+             },\n+             cpu_executor)\n\nReview comment:\n       For readability, can you factor out those two callbacks as separate lambdas?\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -1024,31 +1027,32 @@ class RowGroupGenerator {\n       ::arrow::internal::Executor* cpu_executor, std::shared_ptr<FileReaderImpl> self,\n       const int row_group, const std::vector<int>& column_indices) {\n     if (!cpu_executor) {\n-      return Future<RecordBatchGenerator>::MakeFinished(\n-          ReadOneRowGroup(self, row_group, column_indices));\n+      return ReadOneRowGroup(cpu_executor, self, row_group, column_indices);\n     }\n     // If we have an executor, then force transfer (even if I/O was complete)\n-    return ::arrow::DeferNotOk(\n-        cpu_executor->Submit(ReadOneRowGroup, self, row_group, column_indices));\n+    return ::arrow::DeferNotOk(cpu_executor->Submit(ReadOneRowGroup, cpu_executor, self,\n+                                                    row_group, column_indices));\n   }\n \n-  static ::arrow::Result<RecordBatchGenerator> ReadOneRowGroup(\n-      std::shared_ptr<FileReaderImpl> self, const int row_group,\n-      const std::vector<int>& column_indices) {\n-    std::shared_ptr<::arrow::Table> table;\n+  static ::arrow::Future<RecordBatchGenerator> ReadOneRowGroup(\n+      ::arrow::internal::Executor* cpu_executor, std::shared_ptr<FileReaderImpl> self,\n+      const int row_group, const std::vector<int>& column_indices) {\n     // Skips bound checks/pre-buffering, since we've done that already\n-    RETURN_NOT_OK(self->DecodeRowGroups({row_group}, column_indices, &table));\n-    auto table_reader = std::make_shared<::arrow::TableBatchReader>(*table);\n-    ::arrow::RecordBatchVector batches;\n-    while (true) {\n-      std::shared_ptr<::arrow::RecordBatch> batch;\n-      RETURN_NOT_OK(table_reader->ReadNext(&batch));\n-      if (!batch) {\n-        break;\n-      }\n-      batches.push_back(batch);\n-    }\n-    return ::arrow::MakeVectorGenerator(std::move(batches));\n+    return self->DecodeRowGroups(self, {row_group}, column_indices, cpu_executor)\n+        .Then([](const std::shared_ptr<Table>& table)\n+                  -> ::arrow::Result<RecordBatchGenerator> {\n\nReview comment:\n       Hmm... so this is reading an entire table and then creates a generator out of that (already read) table? Is there a point or could you just return a `Future<RecordBatchVector>`?\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-10T08:41:53.920+0000",
                    "updated": "2021-06-10T08:41:53.920+0000",
                    "started": "2021-06-10T08:41:53.920+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "609564",
                    "issueId": "13375829"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375829/worklog/609786",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10482:\nURL: https://github.com/apache/arrow/pull/10482#discussion_r649318943\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -1134,6 +1138,42 @@ Status FileReaderImpl::DecodeRowGroups(const std::vector<int>& row_groups,\n   return (*out)->Validate();\n }\n \n+Future<std::shared_ptr<Table>> FileReaderImpl::DecodeRowGroups(\n\nReview comment:\n       It would be a little awkward since the async one holds a shared_ptr to self and the sync one has no need to, and given the class is often used as a unique_ptr, we also can't add enable_shared_from_this. Hmm, but we could probably do some branching and combine them into one implementation again (and just have the sync version wait on the future).\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-10T15:57:49.348+0000",
                    "updated": "2021-06-10T15:57:49.348+0000",
                    "started": "2021-06-10T15:57:49.348+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "609786",
                    "issueId": "13375829"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375829/worklog/609789",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10482:\nURL: https://github.com/apache/arrow/pull/10482#discussion_r649320187\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -1024,31 +1027,32 @@ class RowGroupGenerator {\n       ::arrow::internal::Executor* cpu_executor, std::shared_ptr<FileReaderImpl> self,\n       const int row_group, const std::vector<int>& column_indices) {\n     if (!cpu_executor) {\n-      return Future<RecordBatchGenerator>::MakeFinished(\n-          ReadOneRowGroup(self, row_group, column_indices));\n+      return ReadOneRowGroup(cpu_executor, self, row_group, column_indices);\n     }\n     // If we have an executor, then force transfer (even if I/O was complete)\n-    return ::arrow::DeferNotOk(\n-        cpu_executor->Submit(ReadOneRowGroup, self, row_group, column_indices));\n+    return ::arrow::DeferNotOk(cpu_executor->Submit(ReadOneRowGroup, cpu_executor, self,\n+                                                    row_group, column_indices));\n   }\n \n-  static ::arrow::Result<RecordBatchGenerator> ReadOneRowGroup(\n-      std::shared_ptr<FileReaderImpl> self, const int row_group,\n-      const std::vector<int>& column_indices) {\n-    std::shared_ptr<::arrow::Table> table;\n+  static ::arrow::Future<RecordBatchGenerator> ReadOneRowGroup(\n+      ::arrow::internal::Executor* cpu_executor, std::shared_ptr<FileReaderImpl> self,\n+      const int row_group, const std::vector<int>& column_indices) {\n     // Skips bound checks/pre-buffering, since we've done that already\n-    RETURN_NOT_OK(self->DecodeRowGroups({row_group}, column_indices, &table));\n-    auto table_reader = std::make_shared<::arrow::TableBatchReader>(*table);\n-    ::arrow::RecordBatchVector batches;\n-    while (true) {\n-      std::shared_ptr<::arrow::RecordBatch> batch;\n-      RETURN_NOT_OK(table_reader->ReadNext(&batch));\n-      if (!batch) {\n-        break;\n-      }\n-      batches.push_back(batch);\n-    }\n-    return ::arrow::MakeVectorGenerator(std::move(batches));\n+    return self->DecodeRowGroups(self, {row_group}, column_indices, cpu_executor)\n+        .Then([](const std::shared_ptr<Table>& table)\n+                  -> ::arrow::Result<RecordBatchGenerator> {\n\nReview comment:\n       There's not really a big difference, no, except that MakeConcatenatedGenerator makes it easy to go from `AsyncGenerator<AsyncGenerator<T>>` to `AsyncGenerator<T>` and we don't have anything for `AsyncGenerator<vector<T>>`.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-10T15:59:20.085+0000",
                    "updated": "2021-06-10T15:59:20.085+0000",
                    "started": "2021-06-10T15:59:20.085+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "609789",
                    "issueId": "13375829"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375829/worklog/609813",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10482:\nURL: https://github.com/apache/arrow/pull/10482#discussion_r649348454\n\n\n\n##########\nFile path: cpp/src/arrow/util/parallel.h\n##########\n@@ -44,6 +45,25 @@ Status ParallelFor(int num_tasks, FUNCTION&& func,\n   return st;\n }\n \n+template <class FUNCTION, typename T,\n+          typename R = typename internal::call_traits::return_type<FUNCTION>::ValueType>\n+Future<std::vector<R>> ParallelForAsync(\n+    std::vector<T> inputs, FUNCTION&& func,\n\nReview comment:\n       Yes: the callback of the sync version can safely and easily capture references to local stack variables. But the async version cannot. Rather than mess around with wrapping state in a shared_ptr, it's easier to just pass a vector. I can rename this to `ParallelForEachAsync` though to make it clearer.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-10T16:34:14.700+0000",
                    "updated": "2021-06-10T16:34:14.700+0000",
                    "started": "2021-06-10T16:34:14.700+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "609813",
                    "issueId": "13375829"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375829/worklog/611343",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on a change in pull request #10482:\nURL: https://github.com/apache/arrow/pull/10482#discussion_r651814489\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -1134,6 +1138,42 @@ Status FileReaderImpl::DecodeRowGroups(const std::vector<int>& row_groups,\n   return (*out)->Validate();\n }\n \n+Future<std::shared_ptr<Table>> FileReaderImpl::DecodeRowGroups(\n\nReview comment:\n       I see you finally did it :-) Great, thank you!\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-15T13:53:37.668+0000",
                    "updated": "2021-06-15T13:53:37.668+0000",
                    "started": "2021-06-15T13:53:37.667+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611343",
                    "issueId": "13375829"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375829/worklog/611344",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "pitrou commented on pull request #10482:\nURL: https://github.com/apache/arrow/pull/10482#issuecomment-861518915\n\n\n   Rebased, can merge if green.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-15T13:54:30.753+0000",
                    "updated": "2021-06-15T13:54:30.753+0000",
                    "started": "2021-06-15T13:54:30.753+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611344",
                    "issueId": "13375829"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375829/worklog/611345",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm commented on a change in pull request #10482:\nURL: https://github.com/apache/arrow/pull/10482#discussion_r651815704\n\n\n\n##########\nFile path: cpp/src/parquet/arrow/reader.cc\n##########\n@@ -1134,6 +1138,42 @@ Status FileReaderImpl::DecodeRowGroups(const std::vector<int>& row_groups,\n   return (*out)->Validate();\n }\n \n+Future<std::shared_ptr<Table>> FileReaderImpl::DecodeRowGroups(\n\nReview comment:\n       Sorry, I should probably have pinged you when I updated the PR.\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-15T13:54:53.888+0000",
                    "updated": "2021-06-15T13:54:53.888+0000",
                    "started": "2021-06-15T13:54:53.887+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611345",
                    "issueId": "13375829"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375829/worklog/611392",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "lidavidm closed pull request #10482:\nURL: https://github.com/apache/arrow/pull/10482\n\n\n   \n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2021-06-15T15:22:50.550+0000",
                    "updated": "2021-06-15T15:22:50.550+0000",
                    "started": "2021-06-15T15:22:50.550+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "611392",
                    "issueId": "13375829"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 6600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@477eac5[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4791127f[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@362b055a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@7966fb0a[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@43e77dc[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@6b2c68f[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@685d02d6[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@262d1a7c[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@51da19f2[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@414c3bf8[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4187dab5[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@fb7d603[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 6600,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Jun 15 15:22:44 UTC 2021",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2021-06-15T15:22:44.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-12597/watchers",
            "watchCount": 2,
            "isWatching": false
        },
        "created": "2021-04-29T12:02:59.000+0000",
        "updated": "2021-06-15T15:22:51.000+0000",
        "timeoriginalestimate": null,
        "description": "In ARROW-11843 we found that we still can't enable parallel column conversion for Parquet datasets because the Arrow Parquet reader uses OptionalParallelFor, which does a parallel wait. We should provide an async version to avoid nested parallelism.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "1h 50m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 6600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Implement OptionalParallelForAsync",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13375829/comment/17363706",
                    "id": "17363706",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 10482\n[https://github.com/apache/arrow/pull/10482]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-06-15T15:22:44.822+0000",
                    "updated": "2021-06-15T15:22:44.822+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z0ql20:",
        "customfield_12314139": null
    }
}