{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13484963",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13484963",
    "key": "ARROW-17960",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12352360",
                "id": "12352360",
                "description": "",
                "name": "11.0.0",
                "archived": false,
                "released": false
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12651050",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12651050",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13499348",
                    "key": "ARROW-18280",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13499348",
                    "fields": {
                        "summary": "[C++][Python] Support slicing to arbitrary end in list_slice kernel",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            },
            {
                "id": "12651051",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12651051",
                "type": {
                    "id": "10030",
                    "name": "Reference",
                    "inward": "is related to",
                    "outward": "relates to",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/10030"
                },
                "inwardIssue": {
                    "id": "13499357",
                    "key": "ARROW-18281",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13499357",
                    "fields": {
                        "summary": "[C++][Python] Support start == stop in list_slice kernel",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/1",
                            "description": "The issue is open and ready for the assignee to start work on it.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/open.png",
                            "name": "Open",
                            "id": "1",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/2",
                                "id": 2,
                                "key": "new",
                                "colorName": "blue-gray",
                                "name": "To Do"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=milesgranger",
            "name": "milesgranger",
            "key": "JIRAUSER293894",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34052",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34052",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34052",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34052"
            },
            "displayName": "Miles Granger",
            "active": true,
            "timeZone": "Europe/Oslo"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=jorisvandenbossche",
            "name": "jorisvandenbossche",
            "key": "jorisvandenbossche",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Joris Van den Bossche",
            "active": true,
            "timeZone": "Europe/Brussels"
        },
        "aggregateprogress": {
            "progress": 51600,
            "total": 51600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 51600,
            "total": 51600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17960/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 86,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13484963/worklog/816425",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger opened a new pull request, #14395:\nURL: https://github.com/apache/arrow/pull/14395\n\n   Will fix [ARROW-17960](https://issues.apache.org/jira/browse/ARROW-17960)\n\n\n",
                    "created": "2022-10-13T04:20:14.660+0000",
                    "updated": "2022-10-13T04:20:14.660+0000",
                    "started": "2022-10-13T04:20:14.660+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816425",
                    "issueId": "13484963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13484963/worklog/816426",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on PR #14395:\nURL: https://github.com/apache/arrow/pull/14395#issuecomment-1277007932\n\n   https://issues.apache.org/jira/browse/ARROW-17960\n\n\n",
                    "created": "2022-10-13T04:20:38.456+0000",
                    "updated": "2022-10-13T04:20:38.456+0000",
                    "started": "2022-10-13T04:20:38.456+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816426",
                    "issueId": "13484963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13484963/worklog/816498",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #14395:\nURL: https://github.com/apache/arrow/pull/14395#discussion_r994425662\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested_test.cc:\n##########\n@@ -116,6 +117,64 @@ TEST(TestScalarNested, ListElementInvalid) {\n               Raises(StatusCode::Invalid));\n }\n \n+void CheckListSlice(std::shared_ptr<Array> input, std::shared_ptr<Array> expected,\n+                    SliceOptions& args) {\n+  ASSERT_OK_AND_ASSIGN(auto result, CallFunction(\"list_slice\", {input}, &args));\n+  ASSERT_EQ(result, expected);\n+}\n+\n+TEST(TestScalarNested, ListSlice) {\n+  const auto value_types = {float32(), int32()};\n+  for (auto value_type : value_types) {\n+    auto inputs = {ArrayFromJSON(list(value_type), \"[[1, 2, 3], [4, 5], [6]]\"),\n+                   ArrayFromJSON(fixed_size_list(value_type, 3),\n+                                 \"[[1, 2, 3], [4, 5, null], [6, null, null]]\")};\n+    for (auto input : inputs) {\n+      SliceOptions args(0, 2);\n+      auto expected =\n+          ArrayFromJSON(fixed_size_list(value_type, 2), \"[[1, 2], [4, 5], [6, null]]\");\n\nReview Comment:\n   I _think_ I would expect an output of `[[1, 2], [4, 5], [6]]` for the variable sized list case. (like slicing a python list until after the end, eg `[1, 2][:4] == [1, 2]`.\r\n   \r\n   Since slicing a variable sized list still results in a variable sized list type, we can make use of that and don't require to fill with nulls when the list is shorter than the slice we asked for?\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested_test.cc:\n##########\n@@ -116,6 +117,64 @@ TEST(TestScalarNested, ListElementInvalid) {\n               Raises(StatusCode::Invalid));\n }\n \n+void CheckListSlice(std::shared_ptr<Array> input, std::shared_ptr<Array> expected,\n+                    SliceOptions& args) {\n+  ASSERT_OK_AND_ASSIGN(auto result, CallFunction(\"list_slice\", {input}, &args));\n+  ASSERT_EQ(result, expected);\n+}\n+\n+TEST(TestScalarNested, ListSlice) {\n+  const auto value_types = {float32(), int32()};\n+  for (auto value_type : value_types) {\n+    auto inputs = {ArrayFromJSON(list(value_type), \"[[1, 2, 3], [4, 5], [6]]\"),\n+                   ArrayFromJSON(fixed_size_list(value_type, 3),\n+                                 \"[[1, 2, 3], [4, 5, null], [6, null, null]]\")};\n\nReview Comment:\n   Can you also add a top-level null? (assuming the ArrayFromJSON can handle that)\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested.cc:\n##########\n@@ -87,6 +87,119 @@ Status GetListElementIndex(const ExecValue& value, T* out) {\n   return Status::OK();\n }\n \n+template <typename Type, typename IndexType>\n+struct ListSlice {\n+  using offset_type = typename Type::offset_type;\n+\n+  static Status Exec(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+    const auto start = OptionsWrapper<SliceOptions>::Get(ctx).start;\n+    const auto stop = OptionsWrapper<SliceOptions>::Get(ctx).stop;\n+    if (start < 0 || start >= stop) {\n+      return Status::Invalid(\"`start`(\", start,\n+                             \") should be greater than 0 and greater than `stop`(\", stop,\n\nReview Comment:\n   ```suggestion\r\n                                \") should be greater than 0 and smaller than `stop`(\", stop,\r\n   ```\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested_test.cc:\n##########\n@@ -116,6 +117,64 @@ TEST(TestScalarNested, ListElementInvalid) {\n               Raises(StatusCode::Invalid));\n }\n \n+void CheckListSlice(std::shared_ptr<Array> input, std::shared_ptr<Array> expected,\n+                    SliceOptions& args) {\n+  ASSERT_OK_AND_ASSIGN(auto result, CallFunction(\"list_slice\", {input}, &args));\n+  ASSERT_EQ(result, expected);\n+}\n+\n+TEST(TestScalarNested, ListSlice) {\n+  const auto value_types = {float32(), int32()};\n+  for (auto value_type : value_types) {\n+    auto inputs = {ArrayFromJSON(list(value_type), \"[[1, 2, 3], [4, 5], [6]]\"),\n+                   ArrayFromJSON(fixed_size_list(value_type, 3),\n+                                 \"[[1, 2, 3], [4, 5, null], [6, null, null]]\")};\n+    for (auto input : inputs) {\n+      SliceOptions args(0, 2);\n+      auto expected =\n+          ArrayFromJSON(fixed_size_list(value_type, 2), \"[[1, 2], [4, 5], [6, null]]\");\n+      CheckListSlice(input, expected, args);\n+\n+      args.start = 1;\n+      expected = ArrayFromJSON(fixed_size_list(value_type, 1), \"[[2], [5], [null]]\");\n+      CheckListSlice(input, expected, args);\n+\n+      args.start = 2;\n+      args.stop = 4;\n\nReview Comment:\n   Another corner case to test: start and stop being equal (so getting empty lists)\r\n   \r\n   \n\n\n\n",
                    "created": "2022-10-13T10:05:15.814+0000",
                    "updated": "2022-10-13T10:05:15.814+0000",
                    "started": "2022-10-13T10:05:15.813+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816498",
                    "issueId": "13484963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13484963/worklog/816499",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #14395:\nURL: https://github.com/apache/arrow/pull/14395#discussion_r994425662\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested_test.cc:\n##########\n@@ -116,6 +117,64 @@ TEST(TestScalarNested, ListElementInvalid) {\n               Raises(StatusCode::Invalid));\n }\n \n+void CheckListSlice(std::shared_ptr<Array> input, std::shared_ptr<Array> expected,\n+                    SliceOptions& args) {\n+  ASSERT_OK_AND_ASSIGN(auto result, CallFunction(\"list_slice\", {input}, &args));\n+  ASSERT_EQ(result, expected);\n+}\n+\n+TEST(TestScalarNested, ListSlice) {\n+  const auto value_types = {float32(), int32()};\n+  for (auto value_type : value_types) {\n+    auto inputs = {ArrayFromJSON(list(value_type), \"[[1, 2, 3], [4, 5], [6]]\"),\n+                   ArrayFromJSON(fixed_size_list(value_type, 3),\n+                                 \"[[1, 2, 3], [4, 5, null], [6, null, null]]\")};\n+    for (auto input : inputs) {\n+      SliceOptions args(0, 2);\n+      auto expected =\n+          ArrayFromJSON(fixed_size_list(value_type, 2), \"[[1, 2], [4, 5], [6, null]]\");\n\nReview Comment:\n   I _think_ I would expect an output of `[[1, 2], [4, 5], [6]]` for the variable sized list case. (like slicing a python list until after the end, eg `[1, 2][:4] == [1, 2]`.\r\n   \r\n   Since slicing a variable sized list still results in a variable sized list type, we can make use of that and don't require to fill with nulls when the list is shorter than the slice we asked for?\r\n   \r\n   EDIT: I see that the code actually results in fixed size list, in which case we indeed have to fill with nulls. But so it's also an option to return variable sized lists.\n\n\n\n",
                    "created": "2022-10-13T10:06:15.807+0000",
                    "updated": "2022-10-13T10:06:15.807+0000",
                    "started": "2022-10-13T10:06:15.807+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816499",
                    "issueId": "13484963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13484963/worklog/816500",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #14395:\nURL: https://github.com/apache/arrow/pull/14395#discussion_r994425662\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested_test.cc:\n##########\n@@ -116,6 +117,64 @@ TEST(TestScalarNested, ListElementInvalid) {\n               Raises(StatusCode::Invalid));\n }\n \n+void CheckListSlice(std::shared_ptr<Array> input, std::shared_ptr<Array> expected,\n+                    SliceOptions& args) {\n+  ASSERT_OK_AND_ASSIGN(auto result, CallFunction(\"list_slice\", {input}, &args));\n+  ASSERT_EQ(result, expected);\n+}\n+\n+TEST(TestScalarNested, ListSlice) {\n+  const auto value_types = {float32(), int32()};\n+  for (auto value_type : value_types) {\n+    auto inputs = {ArrayFromJSON(list(value_type), \"[[1, 2, 3], [4, 5], [6]]\"),\n+                   ArrayFromJSON(fixed_size_list(value_type, 3),\n+                                 \"[[1, 2, 3], [4, 5, null], [6, null, null]]\")};\n+    for (auto input : inputs) {\n+      SliceOptions args(0, 2);\n+      auto expected =\n+          ArrayFromJSON(fixed_size_list(value_type, 2), \"[[1, 2], [4, 5], [6, null]]\");\n\nReview Comment:\n   I _think_ I would expect an output of `[[1, 2], [4, 5], [6]]` for the variable sized list case. (like slicing a python list until after the end, eg `[1, 2][:4] == [1, 2]`).\r\n   \r\n   Since slicing a variable sized list still results in a variable sized list type, we can make use of that and don't require to fill with nulls when the list is shorter than the slice we asked for?\r\n   \r\n   EDIT: I see that the code actually results in fixed size list, in which case we indeed have to fill with nulls. But so it's also an option to return variable sized lists.\n\n\n\n",
                    "created": "2022-10-13T10:06:35.842+0000",
                    "updated": "2022-10-13T10:06:35.842+0000",
                    "started": "2022-10-13T10:06:35.841+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816500",
                    "issueId": "13484963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13484963/worklog/816535",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14395:\nURL: https://github.com/apache/arrow/pull/14395#discussion_r994533597\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested_test.cc:\n##########\n@@ -116,6 +117,64 @@ TEST(TestScalarNested, ListElementInvalid) {\n               Raises(StatusCode::Invalid));\n }\n \n+void CheckListSlice(std::shared_ptr<Array> input, std::shared_ptr<Array> expected,\n+                    SliceOptions& args) {\n+  ASSERT_OK_AND_ASSIGN(auto result, CallFunction(\"list_slice\", {input}, &args));\n+  ASSERT_EQ(result, expected);\n+}\n+\n+TEST(TestScalarNested, ListSlice) {\n+  const auto value_types = {float32(), int32()};\n+  for (auto value_type : value_types) {\n+    auto inputs = {ArrayFromJSON(list(value_type), \"[[1, 2, 3], [4, 5], [6]]\"),\n+                   ArrayFromJSON(fixed_size_list(value_type, 3),\n+                                 \"[[1, 2, 3], [4, 5, null], [6, null, null]]\")};\n+    for (auto input : inputs) {\n+      SliceOptions args(0, 2);\n+      auto expected =\n+          ArrayFromJSON(fixed_size_list(value_type, 2), \"[[1, 2], [4, 5], [6, null]]\");\n\nReview Comment:\n   I saw the comment in the JIRA about maybe a fixed sized list would be an option and found myself liking that; but yes, I don't think it should take that much work to have an option to return fixed or variable sized lists from the slice. \r\n   \r\n   Need a different or extension to `SliceOptions` and update resolving the output type; then we can just bypass the filling of nulls in the loop. Shall I go about doing that?\n\n\n\n",
                    "created": "2022-10-13T11:40:54.461+0000",
                    "updated": "2022-10-13T11:40:54.461+0000",
                    "started": "2022-10-13T11:40:54.460+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816535",
                    "issueId": "13484963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13484963/worklog/816536",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14395:\nURL: https://github.com/apache/arrow/pull/14395#discussion_r994536958\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested_test.cc:\n##########\n@@ -116,6 +117,64 @@ TEST(TestScalarNested, ListElementInvalid) {\n               Raises(StatusCode::Invalid));\n }\n \n+void CheckListSlice(std::shared_ptr<Array> input, std::shared_ptr<Array> expected,\n+                    SliceOptions& args) {\n+  ASSERT_OK_AND_ASSIGN(auto result, CallFunction(\"list_slice\", {input}, &args));\n+  ASSERT_EQ(result, expected);\n+}\n+\n+TEST(TestScalarNested, ListSlice) {\n+  const auto value_types = {float32(), int32()};\n+  for (auto value_type : value_types) {\n+    auto inputs = {ArrayFromJSON(list(value_type), \"[[1, 2, 3], [4, 5], [6]]\"),\n+                   ArrayFromJSON(fixed_size_list(value_type, 3),\n+                                 \"[[1, 2, 3], [4, 5, null], [6, null, null]]\")};\n+    for (auto input : inputs) {\n+      SliceOptions args(0, 2);\n+      auto expected =\n+          ArrayFromJSON(fixed_size_list(value_type, 2), \"[[1, 2], [4, 5], [6, null]]\");\n+      CheckListSlice(input, expected, args);\n+\n+      args.start = 1;\n+      expected = ArrayFromJSON(fixed_size_list(value_type, 1), \"[[2], [5], [null]]\");\n+      CheckListSlice(input, expected, args);\n+\n+      args.start = 2;\n+      args.stop = 4;\n\nReview Comment:\n   It'll currently result in an error about `start` needing to be less than `stop`. Should it be adapted to allow `start == stop` to result in empty lists?\n\n\n\n",
                    "created": "2022-10-13T11:44:25.266+0000",
                    "updated": "2022-10-13T11:44:25.266+0000",
                    "started": "2022-10-13T11:44:25.265+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816536",
                    "issueId": "13484963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13484963/worklog/816540",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #14395:\nURL: https://github.com/apache/arrow/pull/14395#discussion_r994544870\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested_test.cc:\n##########\n@@ -116,6 +117,64 @@ TEST(TestScalarNested, ListElementInvalid) {\n               Raises(StatusCode::Invalid));\n }\n \n+void CheckListSlice(std::shared_ptr<Array> input, std::shared_ptr<Array> expected,\n+                    SliceOptions& args) {\n+  ASSERT_OK_AND_ASSIGN(auto result, CallFunction(\"list_slice\", {input}, &args));\n+  ASSERT_EQ(result, expected);\n+}\n+\n+TEST(TestScalarNested, ListSlice) {\n+  const auto value_types = {float32(), int32()};\n+  for (auto value_type : value_types) {\n+    auto inputs = {ArrayFromJSON(list(value_type), \"[[1, 2, 3], [4, 5], [6]]\"),\n+                   ArrayFromJSON(fixed_size_list(value_type, 3),\n+                                 \"[[1, 2, 3], [4, 5, null], [6, null, null]]\")};\n+    for (auto input : inputs) {\n+      SliceOptions args(0, 2);\n+      auto expected =\n+          ArrayFromJSON(fixed_size_list(value_type, 2), \"[[1, 2], [4, 5], [6, null]]\");\n\nReview Comment:\n   Unless we think there are not that much use cases for filling with nulls? In which case we could also not make it an option, and just always have \"list -> list\" / \"fixed_size_list -> fixed_size_list\". \r\n   (or still add an option later if users ask for it)\n\n\n\n",
                    "created": "2022-10-13T11:52:30.797+0000",
                    "updated": "2022-10-13T11:52:30.797+0000",
                    "started": "2022-10-13T11:52:30.797+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816540",
                    "issueId": "13484963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13484963/worklog/816542",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #14395:\nURL: https://github.com/apache/arrow/pull/14395#discussion_r994547601\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested_test.cc:\n##########\n@@ -116,6 +117,64 @@ TEST(TestScalarNested, ListElementInvalid) {\n               Raises(StatusCode::Invalid));\n }\n \n+void CheckListSlice(std::shared_ptr<Array> input, std::shared_ptr<Array> expected,\n+                    SliceOptions& args) {\n+  ASSERT_OK_AND_ASSIGN(auto result, CallFunction(\"list_slice\", {input}, &args));\n+  ASSERT_EQ(result, expected);\n+}\n+\n+TEST(TestScalarNested, ListSlice) {\n+  const auto value_types = {float32(), int32()};\n+  for (auto value_type : value_types) {\n+    auto inputs = {ArrayFromJSON(list(value_type), \"[[1, 2, 3], [4, 5], [6]]\"),\n+                   ArrayFromJSON(fixed_size_list(value_type, 3),\n+                                 \"[[1, 2, 3], [4, 5, null], [6, null, null]]\")};\n+    for (auto input : inputs) {\n+      SliceOptions args(0, 2);\n+      auto expected =\n+          ArrayFromJSON(fixed_size_list(value_type, 2), \"[[1, 2], [4, 5], [6, null]]\");\n+      CheckListSlice(input, expected, args);\n+\n+      args.start = 1;\n+      expected = ArrayFromJSON(fixed_size_list(value_type, 1), \"[[2], [5], [null]]\");\n+      CheckListSlice(input, expected, args);\n+\n+      args.start = 2;\n+      args.stop = 4;\n\nReview Comment:\n   Ah, sorry, I interpreted the equal in `start >= stop` the wrong way around (it's the check when to error, not when to allow it). \r\n   \r\n   I think it is fine to error for now. In general, slicing (at least with Python semantics) allows this. But eg also negative values to start counting from the end can be useful, and that's also something that doesn't yet work right now I assume. Let's maybe first try to get the basics right.\n\n\n\n",
                    "created": "2022-10-13T11:55:31.341+0000",
                    "updated": "2022-10-13T11:55:31.341+0000",
                    "started": "2022-10-13T11:55:31.341+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816542",
                    "issueId": "13484963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13484963/worklog/816548",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14395:\nURL: https://github.com/apache/arrow/pull/14395#discussion_r994554094\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested_test.cc:\n##########\n@@ -116,6 +117,64 @@ TEST(TestScalarNested, ListElementInvalid) {\n               Raises(StatusCode::Invalid));\n }\n \n+void CheckListSlice(std::shared_ptr<Array> input, std::shared_ptr<Array> expected,\n+                    SliceOptions& args) {\n+  ASSERT_OK_AND_ASSIGN(auto result, CallFunction(\"list_slice\", {input}, &args));\n+  ASSERT_EQ(result, expected);\n+}\n+\n+TEST(TestScalarNested, ListSlice) {\n+  const auto value_types = {float32(), int32()};\n+  for (auto value_type : value_types) {\n+    auto inputs = {ArrayFromJSON(list(value_type), \"[[1, 2, 3], [4, 5], [6]]\"),\n+                   ArrayFromJSON(fixed_size_list(value_type, 3),\n+                                 \"[[1, 2, 3], [4, 5, null], [6, null, null]]\")};\n+    for (auto input : inputs) {\n+      SliceOptions args(0, 2);\n+      auto expected =\n+          ArrayFromJSON(fixed_size_list(value_type, 2), \"[[1, 2], [4, 5], [6, null]]\");\n\nReview Comment:\n   I like the idea of enhancing the kernel, and maybe better suited for a second PR:\r\n   - Allow `start == stop` to get empty lists\r\n   - Allow negative `stop` to indicate \"slice until end\" (would imply variable sized lists output then I believe)\r\n   - Allow option to get fixed or variable sized list output\r\n   - ??\n\n\n\n",
                    "created": "2022-10-13T12:02:31.902+0000",
                    "updated": "2022-10-13T12:02:31.902+0000",
                    "started": "2022-10-13T12:02:31.902+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816548",
                    "issueId": "13484963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13484963/worklog/816551",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14395:\nURL: https://github.com/apache/arrow/pull/14395#discussion_r994556313\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested_test.cc:\n##########\n@@ -116,6 +117,64 @@ TEST(TestScalarNested, ListElementInvalid) {\n               Raises(StatusCode::Invalid));\n }\n \n+void CheckListSlice(std::shared_ptr<Array> input, std::shared_ptr<Array> expected,\n+                    SliceOptions& args) {\n+  ASSERT_OK_AND_ASSIGN(auto result, CallFunction(\"list_slice\", {input}, &args));\n+  ASSERT_EQ(result, expected);\n+}\n+\n+TEST(TestScalarNested, ListSlice) {\n+  const auto value_types = {float32(), int32()};\n+  for (auto value_type : value_types) {\n+    auto inputs = {ArrayFromJSON(list(value_type), \"[[1, 2, 3], [4, 5], [6]]\"),\n+                   ArrayFromJSON(fixed_size_list(value_type, 3),\n+                                 \"[[1, 2, 3], [4, 5, null], [6, null, null]]\")};\n+    for (auto input : inputs) {\n+      SliceOptions args(0, 2);\n+      auto expected =\n+          ArrayFromJSON(fixed_size_list(value_type, 2), \"[[1, 2], [4, 5], [6, null]]\");\n\nReview Comment:\n   > not that much use cases for filling with nulls\r\n   \r\n   I liked the FixSizedList return type, b/c given a slice range, the user can be confident they can index into the results; and not add any more logic for padding or checking if they would have indexing errors. \n\n\n\n",
                    "created": "2022-10-13T12:04:57.040+0000",
                    "updated": "2022-10-13T12:04:57.040+0000",
                    "started": "2022-10-13T12:04:57.039+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816551",
                    "issueId": "13484963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13484963/worklog/816552",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14395:\nURL: https://github.com/apache/arrow/pull/14395#discussion_r994554094\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested_test.cc:\n##########\n@@ -116,6 +117,64 @@ TEST(TestScalarNested, ListElementInvalid) {\n               Raises(StatusCode::Invalid));\n }\n \n+void CheckListSlice(std::shared_ptr<Array> input, std::shared_ptr<Array> expected,\n+                    SliceOptions& args) {\n+  ASSERT_OK_AND_ASSIGN(auto result, CallFunction(\"list_slice\", {input}, &args));\n+  ASSERT_EQ(result, expected);\n+}\n+\n+TEST(TestScalarNested, ListSlice) {\n+  const auto value_types = {float32(), int32()};\n+  for (auto value_type : value_types) {\n+    auto inputs = {ArrayFromJSON(list(value_type), \"[[1, 2, 3], [4, 5], [6]]\"),\n+                   ArrayFromJSON(fixed_size_list(value_type, 3),\n+                                 \"[[1, 2, 3], [4, 5, null], [6, null, null]]\")};\n+    for (auto input : inputs) {\n+      SliceOptions args(0, 2);\n+      auto expected =\n+          ArrayFromJSON(fixed_size_list(value_type, 2), \"[[1, 2], [4, 5], [6, null]]\");\n\nReview Comment:\n   I like the idea of enhancing the kernel, and maybe better suited for a second PR:\r\n   - Allow `start == stop` to get empty lists\r\n   - Allow negative `stop` to indicate \"slice until end\" (would imply variable sized lists output then I believe, unless we do two passes to find the largest slice to get fixed size(?))\r\n   - Allow option to get fixed or variable sized list output\r\n   - ??\n\n\n\n",
                    "created": "2022-10-13T12:06:22.511+0000",
                    "updated": "2022-10-13T12:06:22.511+0000",
                    "started": "2022-10-13T12:06:22.510+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816552",
                    "issueId": "13484963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13484963/worklog/816553",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14395:\nURL: https://github.com/apache/arrow/pull/14395#discussion_r994556313\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested_test.cc:\n##########\n@@ -116,6 +117,64 @@ TEST(TestScalarNested, ListElementInvalid) {\n               Raises(StatusCode::Invalid));\n }\n \n+void CheckListSlice(std::shared_ptr<Array> input, std::shared_ptr<Array> expected,\n+                    SliceOptions& args) {\n+  ASSERT_OK_AND_ASSIGN(auto result, CallFunction(\"list_slice\", {input}, &args));\n+  ASSERT_EQ(result, expected);\n+}\n+\n+TEST(TestScalarNested, ListSlice) {\n+  const auto value_types = {float32(), int32()};\n+  for (auto value_type : value_types) {\n+    auto inputs = {ArrayFromJSON(list(value_type), \"[[1, 2, 3], [4, 5], [6]]\"),\n+                   ArrayFromJSON(fixed_size_list(value_type, 3),\n+                                 \"[[1, 2, 3], [4, 5, null], [6, null, null]]\")};\n+    for (auto input : inputs) {\n+      SliceOptions args(0, 2);\n+      auto expected =\n+          ArrayFromJSON(fixed_size_list(value_type, 2), \"[[1, 2], [4, 5], [6, null]]\");\n\nReview Comment:\n   > ...not that much use cases for filling with nulls?\r\n   \r\n   I liked the FixSizedList return type, b/c given a slice range, the user can be confident they can index into the results; and not add any more logic for padding or checking if they would have indexing errors. \n\n\n\n",
                    "created": "2022-10-13T12:07:07.552+0000",
                    "updated": "2022-10-13T12:07:07.552+0000",
                    "started": "2022-10-13T12:07:07.551+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "816553",
                    "issueId": "13484963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13484963/worklog/817627",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14395:\nURL: https://github.com/apache/arrow/pull/14395#discussion_r997091320\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested_test.cc:\n##########\n@@ -116,6 +117,64 @@ TEST(TestScalarNested, ListElementInvalid) {\n               Raises(StatusCode::Invalid));\n }\n \n+void CheckListSlice(std::shared_ptr<Array> input, std::shared_ptr<Array> expected,\n+                    SliceOptions& args) {\n+  ASSERT_OK_AND_ASSIGN(auto result, CallFunction(\"list_slice\", {input}, &args));\n+  ASSERT_EQ(result, expected);\n+}\n+\n+TEST(TestScalarNested, ListSlice) {\n+  const auto value_types = {float32(), int32()};\n+  for (auto value_type : value_types) {\n+    auto inputs = {ArrayFromJSON(list(value_type), \"[[1, 2, 3], [4, 5], [6]]\"),\n+                   ArrayFromJSON(fixed_size_list(value_type, 3),\n+                                 \"[[1, 2, 3], [4, 5, null], [6, null, null]]\")};\n+    for (auto input : inputs) {\n+      SliceOptions args(0, 2);\n+      auto expected =\n+          ArrayFromJSON(fixed_size_list(value_type, 2), \"[[1, 2], [4, 5], [6, null]]\");\n\nReview Comment:\n   Went ahead and hooked up a new `ListSliceOptions`; but thinking the other items (`start == stop` and negative stop) ought to wait for a separate PR, is that good for you?\n\n\n\n",
                    "created": "2022-10-17T13:53:30.832+0000",
                    "updated": "2022-10-17T13:53:30.832+0000",
                    "started": "2022-10-17T13:53:30.832+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "817627",
                    "issueId": "13484963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13484963/worklog/818428",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14395:\nURL: https://github.com/apache/arrow/pull/14395#discussion_r999293320\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested_test.cc:\n##########\n@@ -116,6 +117,64 @@ TEST(TestScalarNested, ListElementInvalid) {\n               Raises(StatusCode::Invalid));\n }\n \n+void CheckListSlice(std::shared_ptr<Array> input, std::shared_ptr<Array> expected,\n+                    SliceOptions& args) {\n+  ASSERT_OK_AND_ASSIGN(auto result, CallFunction(\"list_slice\", {input}, &args));\n+  ASSERT_EQ(result, expected);\n+}\n+\n+TEST(TestScalarNested, ListSlice) {\n+  const auto value_types = {float32(), int32()};\n+  for (auto value_type : value_types) {\n+    auto inputs = {ArrayFromJSON(list(value_type), \"[[1, 2, 3], [4, 5], [6]]\"),\n+                   ArrayFromJSON(fixed_size_list(value_type, 3),\n+                                 \"[[1, 2, 3], [4, 5, null], [6, null, null]]\")};\n+    for (auto input : inputs) {\n+      SliceOptions args(0, 2);\n+      auto expected =\n+          ArrayFromJSON(fixed_size_list(value_type, 2), \"[[1, 2], [4, 5], [6, null]]\");\n\nReview Comment:\n   Super, then I think this is ready for another review round as time permits. Kept `[skip ci]` in the last commit as I'd guess it needs some adjustments, but the tests pass locally.\n\n\n\n",
                    "created": "2022-10-19T11:05:10.394+0000",
                    "updated": "2022-10-19T11:05:10.394+0000",
                    "started": "2022-10-19T11:05:10.394+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818428",
                    "issueId": "13484963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13484963/worklog/818855",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on PR #14395:\nURL: https://github.com/apache/arrow/pull/14395#issuecomment-1285866050\n\n   @jorisvandenbossche Switched to using the list builders; think that's for the better. Ready for another look. :)\r\n   \r\n   There are three TODOs, (as noted in the code as well) let me know if you think any should be done on this PR:\r\n   - `start==stop` should give an array of empy lists\r\n   - `step>1` support step in slicing\r\n   - `stop==-1` slice to arbitrary end.\n\n\n",
                    "created": "2022-10-20T16:50:40.359+0000",
                    "updated": "2022-10-20T16:50:40.359+0000",
                    "started": "2022-10-20T16:50:40.358+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "818855",
                    "issueId": "13484963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13484963/worklog/820931",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on code in PR #14395:\nURL: https://github.com/apache/arrow/pull/14395#discussion_r1006722884\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested.cc:\n##########\n@@ -87,6 +89,206 @@ Status GetListElementIndex(const ExecValue& value, T* out) {\n   return Status::OK();\n }\n \n+template <typename Type, typename IndexType>\n+struct ListSlice {\n+  using offset_type = typename Type::offset_type;\n+\n+  static Status Exec(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+    const auto opts = OptionsWrapper<ListSliceOptions>::Get(ctx);\n+\n+    // Invariants\n+    if (opts.start < 0 || (opts.start >= opts.stop && opts.stop != -1)) {\n+      // TODO: support start == stop which should give empty lists\n+      return Status::Invalid(\"`start`(\", opts.start,\n+                             \") should be greater than 0 and smaller than `stop`(\",\n+                             opts.stop, \")\");\n+    }\n+    if (opts.step != 1) {\n+      // TODO: support step in slicing\n+      return Status::NotImplemented(\n+          \"Setting `step` to anything other than 1 is not supported; got step=\",\n+          opts.step);\n+    }\n+    if (opts.stop == -1) {\n+      // TODO: Support slicing to arbitrary end\n+      // For variable size list, this would be the largest difference in offsets\n+      // For fixed size list, this would be the fixed size.\n+      return Status::NotImplemented(\n+          \"Setting `stop==-1` to signify slicing to end, not yet implemented.\");\n+    }\n+\n+    const ArraySpan& list_ = batch[0].array;\n+    const Type* list_type = checked_cast<const Type*>(list_.type);\n+    const auto value_type = list_type->value_type();\n+\n+    // construct builder\n+    std::unique_ptr<ArrayBuilder> builder;\n+    if (opts.return_fixed_size_list) {\n+      RETURN_NOT_OK(MakeBuilder(\n+          ctx->memory_pool(),\n+          fixed_size_list(value_type, static_cast<int32_t>(opts.stop - opts.start)),\n+          &builder));\n+    } else {\n+      if constexpr (std::is_same_v<Type, LargeListType>) {\n+        RETURN_NOT_OK(MakeBuilder(ctx->memory_pool(), large_list(value_type), &builder));\n+      } else {\n+        RETURN_NOT_OK(MakeBuilder(ctx->memory_pool(), list(value_type), &builder));\n+      }\n+    }\n+    RETURN_NOT_OK(builder->Reserve(list_.length - 1));\n+\n+    // construct array values\n+    if constexpr (std::is_same_v<Type, FixedSizeListType>) {\n+      if (opts.return_fixed_size_list) {\n+        RETURN_NOT_OK(\n+            BuildArrayFromFixedSizeListType<FixedSizeListBuilder>(batch, opts, *builder));\n+      } else {\n+        return Status::Invalid(\n+            \"Requesting ListArray when slicing a FixedSizeList array would always \"\n+            \"result in a FixedSizeList. Please set `return_fixed_size_list=true` when \"\n+            \"slicing a FixedSizeList.\");\n+      }\n+    } else {\n+      if (opts.return_fixed_size_list) {\n+        RETURN_NOT_OK(\n+            BuildArrayFromListType<FixedSizeListBuilder>(batch, opts, *builder));\n+      } else {\n+        if (std::is_same_v<Type, LargeListType>) {\n+          RETURN_NOT_OK(BuildArrayFromListType<LargeListBuilder>(batch, opts, *builder));\n+        } else {\n+          RETURN_NOT_OK(BuildArrayFromListType<ListBuilder>(batch, opts, *builder));\n+        }\n+      }\n+    }\n+\n+    // build output arrays and set result\n+    ARROW_ASSIGN_OR_RAISE(auto result, builder->Finish());\n+    out->value = result->data();\n+    return Status::OK();\n+  }\n+  template <typename BuilderType>\n+  static Status BuildArrayFromFixedSizeListType(const ExecSpan& batch,\n+                                                const ListSliceOptions opts,\n+                                                ArrayBuilder& builder) {\n+    const auto list_size =\n+        checked_cast<const FixedSizeListType&>(*batch[0].type()).list_size();\n+    const ArraySpan& list_ = batch[0].array;\n+    const ArraySpan& list_values = list_.child_data[0];\n+    const offset_type n_offsets = list_values.length / list_size;\n+\n+    auto list_builder = checked_cast<BuilderType*>(&builder);\n+    for (offset_type offset = 0; offset < n_offsets * list_size;\n+         offset = offset + list_size) {\n+      auto next_offset = offset + list_size;\n+      if (list_values.IsNull(offset)) {\n\nReview Comment:\n   The top-level validity of the ListArray lives in `list_` and not `list_values`, so we should we check `list_` instead?\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested_test.cc:\n##########\n@@ -116,6 +117,100 @@ TEST(TestScalarNested, ListElementInvalid) {\n               Raises(StatusCode::Invalid));\n }\n \n+void CheckListSlice(std::shared_ptr<Array> input, std::shared_ptr<Array> expected,\n+                    const ListSliceOptions& args) {\n+  ASSERT_OK_AND_ASSIGN(auto result, CallFunction(\"list_slice\", {input}, &args));\n+  ASSERT_EQ(result, expected);\n+}\n+\n+TEST(TestScalarNested, ListSliceVariableOutput) {\n\nReview Comment:\n   Can you also add a case with top-level nulls? (so not only with nulls inside the list elements)\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested.cc:\n##########\n@@ -87,6 +89,206 @@ Status GetListElementIndex(const ExecValue& value, T* out) {\n   return Status::OK();\n }\n \n+template <typename Type, typename IndexType>\n+struct ListSlice {\n+  using offset_type = typename Type::offset_type;\n+\n+  static Status Exec(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+    const auto opts = OptionsWrapper<ListSliceOptions>::Get(ctx);\n+\n+    // Invariants\n+    if (opts.start < 0 || (opts.start >= opts.stop && opts.stop != -1)) {\n+      // TODO: support start == stop which should give empty lists\n+      return Status::Invalid(\"`start`(\", opts.start,\n+                             \") should be greater than 0 and smaller than `stop`(\",\n+                             opts.stop, \")\");\n+    }\n+    if (opts.step != 1) {\n+      // TODO: support step in slicing\n+      return Status::NotImplemented(\n+          \"Setting `step` to anything other than 1 is not supported; got step=\",\n+          opts.step);\n+    }\n+    if (opts.stop == -1) {\n+      // TODO: Support slicing to arbitrary end\n\nReview Comment:\n   For the existing SliceOptions we use the max int64 value for this, at least in the Python constructor of the options. But I suppose we don't have special handling for that on the C++ side, and it just works (because a string can never actually have that slice, so you always slice until the end in practice). \r\n   \r\n   Of course, for supporting this for fixed size list output, we would need to special case this to replace it with the actual length of the input fixed size list? (and if we special case, it might be better to special case -1 instead of max int64?)\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested.cc:\n##########\n@@ -87,6 +89,206 @@ Status GetListElementIndex(const ExecValue& value, T* out) {\n   return Status::OK();\n }\n \n+template <typename Type, typename IndexType>\n+struct ListSlice {\n+  using offset_type = typename Type::offset_type;\n+\n+  static Status Exec(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+    const auto opts = OptionsWrapper<ListSliceOptions>::Get(ctx);\n+\n+    // Invariants\n+    if (opts.start < 0 || (opts.start >= opts.stop && opts.stop != -1)) {\n+      // TODO: support start == stop which should give empty lists\n+      return Status::Invalid(\"`start`(\", opts.start,\n+                             \") should be greater than 0 and smaller than `stop`(\",\n+                             opts.stop, \")\");\n+    }\n+    if (opts.step != 1) {\n+      // TODO: support step in slicing\n+      return Status::NotImplemented(\n+          \"Setting `step` to anything other than 1 is not supported; got step=\",\n+          opts.step);\n+    }\n+    if (opts.stop == -1) {\n+      // TODO: Support slicing to arbitrary end\n+      // For variable size list, this would be the largest difference in offsets\n+      // For fixed size list, this would be the fixed size.\n+      return Status::NotImplemented(\n+          \"Setting `stop==-1` to signify slicing to end, not yet implemented.\");\n+    }\n+\n+    const ArraySpan& list_ = batch[0].array;\n+    const Type* list_type = checked_cast<const Type*>(list_.type);\n+    const auto value_type = list_type->value_type();\n+\n+    // construct builder\n+    std::unique_ptr<ArrayBuilder> builder;\n+    if (opts.return_fixed_size_list) {\n+      RETURN_NOT_OK(MakeBuilder(\n+          ctx->memory_pool(),\n+          fixed_size_list(value_type, static_cast<int32_t>(opts.stop - opts.start)),\n+          &builder));\n+    } else {\n+      if constexpr (std::is_same_v<Type, LargeListType>) {\n+        RETURN_NOT_OK(MakeBuilder(ctx->memory_pool(), large_list(value_type), &builder));\n+      } else {\n+        RETURN_NOT_OK(MakeBuilder(ctx->memory_pool(), list(value_type), &builder));\n+      }\n+    }\n+    RETURN_NOT_OK(builder->Reserve(list_.length - 1));\n\nReview Comment:\n   Why the -1? (I would think that a builder starts with capacity of 0?)\n\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested.cc:\n##########\n@@ -87,6 +89,206 @@ Status GetListElementIndex(const ExecValue& value, T* out) {\n   return Status::OK();\n }\n \n+template <typename Type, typename IndexType>\n+struct ListSlice {\n+  using offset_type = typename Type::offset_type;\n+\n+  static Status Exec(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+    const auto opts = OptionsWrapper<ListSliceOptions>::Get(ctx);\n+\n+    // Invariants\n+    if (opts.start < 0 || (opts.start >= opts.stop && opts.stop != -1)) {\n+      // TODO: support start == stop which should give empty lists\n+      return Status::Invalid(\"`start`(\", opts.start,\n+                             \") should be greater than 0 and smaller than `stop`(\",\n+                             opts.stop, \")\");\n+    }\n+    if (opts.step != 1) {\n+      // TODO: support step in slicing\n+      return Status::NotImplemented(\n+          \"Setting `step` to anything other than 1 is not supported; got step=\",\n+          opts.step);\n+    }\n+    if (opts.stop == -1) {\n+      // TODO: Support slicing to arbitrary end\n\nReview Comment:\n   Although that also raises the question: for fixed size list input, if you slice until after the end, does it also get filled with nulls, or do we automatically slice until the end (like how Python slicing works)?\n\n\n\n",
                    "created": "2022-10-27T11:09:42.729+0000",
                    "updated": "2022-10-27T11:09:42.729+0000",
                    "started": "2022-10-27T11:09:42.729+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "820931",
                    "issueId": "13484963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13484963/worklog/820933",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jorisvandenbossche commented on PR #14395:\nURL: https://github.com/apache/arrow/pull/14395#issuecomment-1293369447\n\n   > There are three TODOs, (as noted in the code as well) let me know if you think any should be done on this PR:\r\n   \r\n   I think those are certainly fine to leave as a follow-up.\r\n   \r\n   For me, I think API wise I still have the questions:\r\n   \r\n   - What do we want to use as the default return type for slicing a variable size list? Return a fixed size list (padding with nulls to get the correct length), or keep a variable size list (not padding with nulls, just slice until the end if stop > size of a list element)\r\n   - For slicing fixed size list arrays, what do we want to do when slicing until after the end (stop > list size)? Padding with nulls and always return a fixed size list of size `stop - start`, or slice until the end (Python slice semantics) and return a fixed size list of size `min(list_size, stop -start)`\n\n\n",
                    "created": "2022-10-27T11:13:38.301+0000",
                    "updated": "2022-10-27T11:13:38.301+0000",
                    "started": "2022-10-27T11:13:38.300+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "820933",
                    "issueId": "13484963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13484963/worklog/821314",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14395:\nURL: https://github.com/apache/arrow/pull/14395#discussion_r1007723825\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested.cc:\n##########\n@@ -87,6 +89,206 @@ Status GetListElementIndex(const ExecValue& value, T* out) {\n   return Status::OK();\n }\n \n+template <typename Type, typename IndexType>\n+struct ListSlice {\n+  using offset_type = typename Type::offset_type;\n+\n+  static Status Exec(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+    const auto opts = OptionsWrapper<ListSliceOptions>::Get(ctx);\n+\n+    // Invariants\n+    if (opts.start < 0 || (opts.start >= opts.stop && opts.stop != -1)) {\n+      // TODO: support start == stop which should give empty lists\n+      return Status::Invalid(\"`start`(\", opts.start,\n+                             \") should be greater than 0 and smaller than `stop`(\",\n+                             opts.stop, \")\");\n+    }\n+    if (opts.step != 1) {\n+      // TODO: support step in slicing\n+      return Status::NotImplemented(\n+          \"Setting `step` to anything other than 1 is not supported; got step=\",\n+          opts.step);\n+    }\n+    if (opts.stop == -1) {\n+      // TODO: Support slicing to arbitrary end\n\nReview Comment:\n   I did see the default `None` of SliceOptions then is represented as the max int64. I think this doesn't match for this case for at least two reasons:\r\n   - If user wanted fixed size output, then it's ambiguous if they literally put in the max int value, or if this is slice to end of the largest list item; `-1` makes that distinction.\r\n   - `-1` is a fairly common flag to say \"use everything\", from how many cpu cores to use or similar.\r\n   \r\n    > ... if you slice until after the end, does it also get filled with nulls, or do we automatically slice until the end (like how Python slicing works)?\r\n    \r\n    I think this would depend on the value of `return_fixed_size_list`\n\n\n\n",
                    "created": "2022-10-28T07:08:48.257+0000",
                    "updated": "2022-10-28T07:08:48.257+0000",
                    "started": "2022-10-28T07:08:48.256+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "821314",
                    "issueId": "13484963"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13484963/worklog/821316",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "milesgranger commented on code in PR #14395:\nURL: https://github.com/apache/arrow/pull/14395#discussion_r1007723825\n\n\n##########\ncpp/src/arrow/compute/kernels/scalar_nested.cc:\n##########\n@@ -87,6 +89,206 @@ Status GetListElementIndex(const ExecValue& value, T* out) {\n   return Status::OK();\n }\n \n+template <typename Type, typename IndexType>\n+struct ListSlice {\n+  using offset_type = typename Type::offset_type;\n+\n+  static Status Exec(KernelContext* ctx, const ExecSpan& batch, ExecResult* out) {\n+    const auto opts = OptionsWrapper<ListSliceOptions>::Get(ctx);\n+\n+    // Invariants\n+    if (opts.start < 0 || (opts.start >= opts.stop && opts.stop != -1)) {\n+      // TODO: support start == stop which should give empty lists\n+      return Status::Invalid(\"`start`(\", opts.start,\n+                             \") should be greater than 0 and smaller than `stop`(\",\n+                             opts.stop, \")\");\n+    }\n+    if (opts.step != 1) {\n+      // TODO: support step in slicing\n+      return Status::NotImplemented(\n+          \"Setting `step` to anything other than 1 is not supported; got step=\",\n+          opts.step);\n+    }\n+    if (opts.stop == -1) {\n+      // TODO: Support slicing to arbitrary end\n\nReview Comment:\n   I did see the default `None` of SliceOptions then is represented as the max int64. I think this doesn't match for this case for at least two reasons:\r\n   - If user wanted fixed size output, then it's ambiguous if they literally put in the max int value, or if this is slice to end of the largest list item; `-1` makes that distinction.\r\n   - `-1` is a fairly common flag to say \"use everything / go to end\", from how many cpu cores to use or similar.\r\n   \r\n    > ... if you slice until after the end, does it also get filled with nulls, or do we automatically slice until the end (like how Python slicing works)?\r\n    \r\n    I think this would depend on the value of `return_fixed_size_list`\n\n\n\n",
                    "created": "2022-10-28T07:13:38.819+0000",
                    "updated": "2022-10-28T07:13:38.819+0000",
                    "started": "2022-10-28T07:13:38.819+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "821316",
                    "issueId": "13484963"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
            "id": "4",
            "description": "An improvement or enhancement to an existing feature or task.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
            "name": "Improvement",
            "subtask": false,
            "avatarId": 21140
        },
        "timespent": 51600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@5bfa4a1f[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@23457504[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@341217eb[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@3c77a938[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3dabdb8d[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@8e8b240[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2ce151f9[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@2dde1334[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e4ac2b1[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@37d038a[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@25b5f485[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@78af14b4[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 51600,
        "customfield_12312520": null,
        "customfield_12312521": "Tue Nov 15 17:56:20 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-11-15T17:56:20.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-17960/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2022-10-07T08:18:11.000+0000",
        "updated": "2022-11-16T02:43:10.000+0000",
        "timeoriginalestimate": null,
        "description": "This would be a scalar kernel \"List<T> -> List<T>\" (or to fixed size list?), where you can subset the values in each list element. \r\n\r\nSo for example, giving the list array:\r\n\r\n{code}\r\narr = pa.array([[1, 2, 3], [4, 5, 6, 7], [8, 9]])\r\n{code}\r\n\r\nwe could do something like the following to get the first two elements of each list:\r\n\r\n{code}\r\npc.list_slice(arr, start=0, stop=2)\r\n->  pa.array([[1, 2], [4, 5], [8, 9]])\r\n{code}\r\n\r\nThis would supplement the existing {{list_element}} kernel.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "14h 20m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 51600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Add kernel for slicing list values",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13484963/comment/17634463",
                    "id": "17634463",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 14395\n[https://github.com/apache/arrow/pull/14395]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=lidavidm",
                        "name": "lidavidm",
                        "key": "lidavidm",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "David Li",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2022-11-15T17:56:20.090+0000",
                    "updated": "2022-11-15T17:56:20.090+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|z1953s:",
        "customfield_12314139": null
    }
}