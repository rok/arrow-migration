{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13103397",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397",
    "key": "ARROW-1560",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12346687",
                "id": "12346687",
                "description": "",
                "name": "0.17.0",
                "archived": false,
                "released": true,
                "releaseDate": "2020-04-20"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "Analytics",
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=preeti_suman",
            "name": "preeti_suman",
            "key": "preeti_suman",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
            },
            "displayName": "Preeti Suman",
            "active": true,
            "timeZone": "America/Chicago"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328935",
                "id": "12328935",
                "name": "C++"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
            "name": "wesm",
            "key": "wesmckinn",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
            },
            "displayName": "Wes McKinney",
            "active": true,
            "timeZone": "America/New_York"
        },
        "aggregateprogress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 14400,
            "total": 14400,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1560/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 28,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/worklog/328809",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "psuman65 commented on pull request #5665: ARROW-1560: [C++] Kernel implementations for \"match\" function\nURL: https://github.com/apache/arrow/pull/5665\n \n \n   \n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-15T22:18:03.823+0000",
                    "updated": "2019-10-15T22:18:03.823+0000",
                    "started": "2019-10-15T22:18:03.822+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "328809",
                    "issueId": "13103397"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/worklog/328813",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on issue #5665: ARROW-1560: [C++] Kernel implementations for \"match\" function\nURL: https://github.com/apache/arrow/pull/5665#issuecomment-542432334\n \n \n   https://issues.apache.org/jira/browse/ARROW-1560\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-15T22:30:55.341+0000",
                    "updated": "2019-10-15T22:30:55.341+0000",
                    "started": "2019-10-15T22:30:55.341+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "328813",
                    "issueId": "13103397"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/worklog/328996",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5665: ARROW-1560: [C++] Kernel implementations for \"match\" function\nURL: https://github.com/apache/arrow/pull/5665#discussion_r335304400\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/match.h\n ##########\n @@ -0,0 +1,49 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+/// \\brief Match returns position index of first occurence\n+// of a value from left array in right array.\n+///\n+/// If null occurs in left and right,\n+/// it returns the index, else returns null.\n+///\n+/// \\param[in] context the FunctionContext\n+/// \\param[in] left array-like input\n+/// \\param[in] right array-like input\n+/// \\param[out] out resulting datum\n+///\n+/// \\since 2.0.0\n \n Review comment:\n   1.0.0\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-16T06:56:29.885+0000",
                    "updated": "2019-10-16T06:56:29.885+0000",
                    "started": "2019-10-16T06:56:29.885+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "328996",
                    "issueId": "13103397"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/worklog/328997",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "emkornfield commented on pull request #5665: ARROW-1560: [C++] Kernel implementations for \"match\" function\nURL: https://github.com/apache/arrow/pull/5665#discussion_r335305049\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/match_test.cc\n ##########\n @@ -0,0 +1,407 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <cstdio>\n+#include <functional>\n+#include <locale>\n+#include <memory>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/match.h\"\n+#include \"arrow/compute/kernels/util_internal.h\"\n+#include \"arrow/compute/test_util.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/testing/gtest_common.h\"\n+#include \"arrow/testing/util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/decimal.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+// ----------------------------------------------------------------------\n+// Match tests\n+\n+template <typename Type, typename T = typename TypeTraits<Type>::c_type>\n+void CheckMatch(FunctionContext* ctx, const std::shared_ptr<DataType>& type,\n+                const std::vector<T>& in_values, const std::vector<bool>& in_is_valid,\n+                const std::vector<T>& member_set_values,\n+                const std::vector<bool>& member_set_is_valid,\n+                const std::vector<int32_t>& out_values,\n+                const std::vector<bool>& out_is_valid) {\n+  std::shared_ptr<Array> input = _MakeArray<Type, T>(type, in_values, in_is_valid);\n+  std::shared_ptr<Array> member_set =\n+      _MakeArray<Type, T>(type, member_set_values, member_set_is_valid);\n+  std::shared_ptr<Array> expected =\n+      _MakeArray<Int32Type, int32_t>(int32(), out_values, out_is_valid);\n+\n+  Datum datum_out;\n+  ASSERT_OK(Match(ctx, input, member_set, &datum_out));\n+  std::shared_ptr<Array> result = datum_out.make_array();\n+  ASSERT_ARRAYS_EQUAL(*expected, *result);\n+}\n+\n+class TestMatchKernel : public ComputeFixture, public TestBase {};\n+\n+template <typename Type>\n+class TestMatchKernelPrimitive : public ComputeFixture, public TestBase {};\n+\n+typedef ::testing::Types<Int8Type, UInt8Type, Int16Type, UInt16Type, Int32Type,\n+                         UInt32Type, Int64Type, UInt64Type, FloatType, DoubleType,\n+                         Date32Type, Date64Type>\n+    PrimitiveDictionaries;\n+\n+TYPED_TEST_CASE(TestMatchKernelPrimitive, PrimitiveDictionaries);\n+\n+TYPED_TEST(TestMatchKernelPrimitive, Match) {\n+  using T = typename TypeParam::c_type;\n+  auto type = TypeTraits<TypeParam>::type_singleton();\n+\n+  // No Nulls\n+  CheckMatch<TypeParam, T>(&this->ctx_, type, {2, 1, 2, 1, 2, 3},\n \n Review comment:\n   with methods that have this many parameters it is very helpful to have comments lke\r\n   /*in_values=*/, /*in_is_valid=*/, etc so readers don't need to memory the call ording.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-10-16T06:58:37.723+0000",
                    "updated": "2019-10-16T06:58:37.723+0000",
                    "started": "2019-10-16T06:58:37.723+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "328997",
                    "issueId": "13103397"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/worklog/338255",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "psuman65 commented on pull request #5665: ARROW-1560: [C++] Kernel implementations for \"match\" function\nURL: https://github.com/apache/arrow/pull/5665#discussion_r342191369\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/match.h\n ##########\n @@ -0,0 +1,49 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+/// \\brief Match returns position index of first occurence\n+// of a value from left array in right array.\n+///\n+/// If null occurs in left and right,\n+/// it returns the index, else returns null.\n+///\n+/// \\param[in] context the FunctionContext\n+/// \\param[in] left array-like input\n+/// \\param[in] right array-like input\n+/// \\param[out] out resulting datum\n+///\n+/// \\since 2.0.0\n \n Review comment:\n   fixed\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-04T18:06:41.507+0000",
                    "updated": "2019-11-04T18:06:41.507+0000",
                    "started": "2019-11-04T18:06:41.507+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "338255",
                    "issueId": "13103397"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/worklog/338256",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "psuman65 commented on pull request #5665: ARROW-1560: [C++] Kernel implementations for \"match\" function\nURL: https://github.com/apache/arrow/pull/5665#discussion_r342191413\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/match_test.cc\n ##########\n @@ -0,0 +1,407 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <cstdio>\n+#include <functional>\n+#include <locale>\n+#include <memory>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/match.h\"\n+#include \"arrow/compute/kernels/util_internal.h\"\n+#include \"arrow/compute/test_util.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/testing/gtest_common.h\"\n+#include \"arrow/testing/util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/decimal.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+// ----------------------------------------------------------------------\n+// Match tests\n+\n+template <typename Type, typename T = typename TypeTraits<Type>::c_type>\n+void CheckMatch(FunctionContext* ctx, const std::shared_ptr<DataType>& type,\n+                const std::vector<T>& in_values, const std::vector<bool>& in_is_valid,\n+                const std::vector<T>& member_set_values,\n+                const std::vector<bool>& member_set_is_valid,\n+                const std::vector<int32_t>& out_values,\n+                const std::vector<bool>& out_is_valid) {\n+  std::shared_ptr<Array> input = _MakeArray<Type, T>(type, in_values, in_is_valid);\n+  std::shared_ptr<Array> member_set =\n+      _MakeArray<Type, T>(type, member_set_values, member_set_is_valid);\n+  std::shared_ptr<Array> expected =\n+      _MakeArray<Int32Type, int32_t>(int32(), out_values, out_is_valid);\n+\n+  Datum datum_out;\n+  ASSERT_OK(Match(ctx, input, member_set, &datum_out));\n+  std::shared_ptr<Array> result = datum_out.make_array();\n+  ASSERT_ARRAYS_EQUAL(*expected, *result);\n+}\n+\n+class TestMatchKernel : public ComputeFixture, public TestBase {};\n+\n+template <typename Type>\n+class TestMatchKernelPrimitive : public ComputeFixture, public TestBase {};\n+\n+typedef ::testing::Types<Int8Type, UInt8Type, Int16Type, UInt16Type, Int32Type,\n+                         UInt32Type, Int64Type, UInt64Type, FloatType, DoubleType,\n+                         Date32Type, Date64Type>\n+    PrimitiveDictionaries;\n+\n+TYPED_TEST_CASE(TestMatchKernelPrimitive, PrimitiveDictionaries);\n+\n+TYPED_TEST(TestMatchKernelPrimitive, Match) {\n+  using T = typename TypeParam::c_type;\n+  auto type = TypeTraits<TypeParam>::type_singleton();\n+\n+  // No Nulls\n+  CheckMatch<TypeParam, T>(&this->ctx_, type, {2, 1, 2, 1, 2, 3},\n \n Review comment:\n   fixed\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-04T18:06:47.710+0000",
                    "updated": "2019-11-04T18:06:47.710+0000",
                    "started": "2019-11-04T18:06:47.709+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "338256",
                    "issueId": "13103397"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/worklog/340824",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on issue #5665: ARROW-1560: [C++] Kernel implementations for \"match\" function\nURL: https://github.com/apache/arrow/pull/5665#issuecomment-552036666\n \n \n   @psuman65 if you think this is ready to merge, could you please rebase on master and see if that resolve the Appveyor failure (and if not, then see about fixing that)?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-08T23:59:27.117+0000",
                    "updated": "2019-11-08T23:59:27.117+0000",
                    "started": "2019-11-08T23:59:27.117+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "340824",
                    "issueId": "13103397"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/worklog/340825",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on issue #5665: ARROW-1560: [C++] Kernel implementations for \"match\" function\nURL: https://github.com/apache/arrow/pull/5665#issuecomment-552036666\n \n \n   @psuman65 if you think this is ready to merge, could you please rebase on master and see if that resolves the Appveyor failure (and if not, then see about fixing that)?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-08T23:59:45.232+0000",
                    "updated": "2019-11-08T23:59:45.232+0000",
                    "started": "2019-11-08T23:59:45.232+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "340825",
                    "issueId": "13103397"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/worklog/342217",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on issue #5665: ARROW-1560: [C++] Kernel implementations for \"match\" function\nURL: https://github.com/apache/arrow/pull/5665#issuecomment-553132910\n \n \n   CI is \"green\" now (Appveyor is still backed up, but I saw it pass before the most recent rebase). @emkornfield do you have any further concerns with this PR?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-12T21:52:10.400+0000",
                    "updated": "2019-11-12T21:52:10.400+0000",
                    "started": "2019-11-12T21:52:10.400+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342217",
                    "issueId": "13103397"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/worklog/342667",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5665: ARROW-1560: [C++] Kernel implementations for \"match\" function\nURL: https://github.com/apache/arrow/pull/5665#discussion_r345816348\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/match.h\n ##########\n @@ -0,0 +1,49 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+/// \\brief Match returns position index of first occurence\n+// of a value from left array in right array.\n+///\n+/// If null occurs in left and right,\n+/// it returns the index, else returns null.\n \n Review comment:\n   Please include a concrete example in the comment, see compute::Filter for an example\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T15:41:17.580+0000",
                    "updated": "2019-11-13T15:41:17.580+0000",
                    "started": "2019-11-13T15:41:17.580+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342667",
                    "issueId": "13103397"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/worklog/342668",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5665: ARROW-1560: [C++] Kernel implementations for \"match\" function\nURL: https://github.com/apache/arrow/pull/5665#discussion_r345820396\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/match_test.cc\n ##########\n @@ -0,0 +1,457 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <cstdio>\n+#include <functional>\n+#include <locale>\n+#include <memory>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/match.h\"\n+#include \"arrow/compute/kernels/util_internal.h\"\n+#include \"arrow/compute/test_util.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/testing/gtest_common.h\"\n+#include \"arrow/testing/util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/decimal.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+// ----------------------------------------------------------------------\n+// Match tests\n+\n+template <typename Type, typename T = typename TypeTraits<Type>::c_type>\n+void CheckMatch(FunctionContext* ctx, const std::shared_ptr<DataType>& type,\n+                const std::vector<T>& in_values, const std::vector<bool>& in_is_valid,\n+                const std::vector<T>& member_set_values,\n+                const std::vector<bool>& member_set_is_valid,\n+                const std::vector<int32_t>& out_values,\n+                const std::vector<bool>& out_is_valid) {\n+  std::shared_ptr<Array> input = _MakeArray<Type, T>(type, in_values, in_is_valid);\n+  std::shared_ptr<Array> member_set =\n+      _MakeArray<Type, T>(type, member_set_values, member_set_is_valid);\n+  std::shared_ptr<Array> expected =\n+      _MakeArray<Int32Type, int32_t>(int32(), out_values, out_is_valid);\n+\n+  Datum datum_out;\n+  ASSERT_OK(Match(ctx, input, member_set, &datum_out));\n+  std::shared_ptr<Array> result = datum_out.make_array();\n+  ASSERT_ARRAYS_EQUAL(*expected, *result);\n+}\n+\n+class TestMatchKernel : public ComputeFixture, public TestBase {};\n+\n+template <typename Type>\n+class TestMatchKernelPrimitive : public ComputeFixture, public TestBase {};\n+\n+typedef ::testing::Types<Int8Type, UInt8Type, Int16Type, UInt16Type, Int32Type,\n+                         UInt32Type, Int64Type, UInt64Type, FloatType, DoubleType,\n+                         Date32Type, Date64Type>\n+    PrimitiveDictionaries;\n+\n+TYPED_TEST_CASE(TestMatchKernelPrimitive, PrimitiveDictionaries);\n+\n+TYPED_TEST(TestMatchKernelPrimitive, Match) {\n+  using T = typename TypeParam::c_type;\n+  auto type = TypeTraits<TypeParam>::type_singleton();\n+\n+  // No Nulls\n+  CheckMatch<TypeParam, T>(&this->ctx_, type,\n+                           /* in_values= */ {2, 1, 2, 1, 2, 3},\n+                           /* in_is_valid= */ {},\n+                           /* member_set_values= */ {2, 1, 2, 3},\n+                           /* member_set_is_valid= */ {},\n+                           /* out_values= */ {0, 1, 0, 1, 0, 2},\n+                           /* out_is_valid= */ {});\n+  // Nulls in left array\n \n Review comment:\n   Testing behavior with an all-null array is valuable, but please also include more tests for partially null arrays.\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T15:41:17.900+0000",
                    "updated": "2019-11-13T15:41:17.900+0000",
                    "started": "2019-11-13T15:41:17.899+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342668",
                    "issueId": "13103397"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/worklog/342669",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5665: ARROW-1560: [C++] Kernel implementations for \"match\" function\nURL: https://github.com/apache/arrow/pull/5665#discussion_r345824571\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/match.h\n ##########\n @@ -0,0 +1,49 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+/// \\brief Match returns position index of first occurence\n+// of a value from left array in right array.\n+///\n+/// If null occurs in left and right,\n+/// it returns the index, else returns null.\n \n Review comment:\n   Also, please explicitly state that if no match is found then null is yielded\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T15:41:17.915+0000",
                    "updated": "2019-11-13T15:41:17.915+0000",
                    "started": "2019-11-13T15:41:17.915+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342669",
                    "issueId": "13103397"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/worklog/342670",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5665: ARROW-1560: [C++] Kernel implementations for \"match\" function\nURL: https://github.com/apache/arrow/pull/5665#discussion_r345826653\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/match.h\n ##########\n @@ -0,0 +1,49 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#pragma once\n+\n+#include <memory>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/util/visibility.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+/// \\brief Match returns position index of first occurence\n+// of a value from left array in right array.\n \n Review comment:\n   Could you rename the arguments from `left/right` to something more informative? For example, `searched/set`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T15:41:17.966+0000",
                    "updated": "2019-11-13T15:41:17.966+0000",
                    "started": "2019-11-13T15:41:17.966+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342670",
                    "issueId": "13103397"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/worklog/342671",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5665: ARROW-1560: [C++] Kernel implementations for \"match\" function\nURL: https://github.com/apache/arrow/pull/5665#discussion_r345821353\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/match_test.cc\n ##########\n @@ -0,0 +1,457 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <cstdio>\n+#include <functional>\n+#include <locale>\n+#include <memory>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/match.h\"\n+#include \"arrow/compute/kernels/util_internal.h\"\n+#include \"arrow/compute/test_util.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/testing/gtest_common.h\"\n+#include \"arrow/testing/util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/decimal.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+// ----------------------------------------------------------------------\n+// Match tests\n+\n+template <typename Type, typename T = typename TypeTraits<Type>::c_type>\n+void CheckMatch(FunctionContext* ctx, const std::shared_ptr<DataType>& type,\n+                const std::vector<T>& in_values, const std::vector<bool>& in_is_valid,\n+                const std::vector<T>& member_set_values,\n+                const std::vector<bool>& member_set_is_valid,\n+                const std::vector<int32_t>& out_values,\n+                const std::vector<bool>& out_is_valid) {\n+  std::shared_ptr<Array> input = _MakeArray<Type, T>(type, in_values, in_is_valid);\n \n Review comment:\n   Your tests would be significantly more readable if you used `ArrayFromJSON`\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T15:41:18.242+0000",
                    "updated": "2019-11-13T15:41:18.242+0000",
                    "started": "2019-11-13T15:41:18.241+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342671",
                    "issueId": "13103397"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/worklog/342672",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5665: ARROW-1560: [C++] Kernel implementations for \"match\" function\nURL: https://github.com/apache/arrow/pull/5665#discussion_r345832098\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/match.cc\n ##########\n @@ -0,0 +1,317 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/match.h\"\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <cstring>\n+#include <memory>\n+#include <sstream>\n+#include <string>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/array/dict_internal.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/util_internal.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit_util.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/hashing.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+using internal::DictionaryTraits;\n+using internal::HashTraits;\n+\n+namespace compute {\n+\n+class MatchKernelImpl : public UnaryKernel {\n+  virtual Status Compute(FunctionContext* ctx, const Datum& left, Datum* out) = 0;\n+\n+ public:\n+  // \\brief Check if value in both arrays or not and returns integer values/null\n+  Status Call(FunctionContext* ctx, const Datum& left, Datum* out) override {\n+    DCHECK_EQ(Datum::ARRAY, left.kind());\n+    RETURN_NOT_OK(Compute(ctx, left, out));\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<DataType> out_type() const override { return int32(); }\n+\n+  virtual Status ConstructRight(FunctionContext* ctx, const Datum& right) = 0;\n+};\n+\n+// ----------------------------------------------------------------------\n+// Using a visitor create a memo_table_ for the right array\n+// TODO: Implement for small lists\n+\n+template <typename T, typename Scalar>\n+struct MatchMemoTableRight {\n+  Status VisitNull() {\n+    memo_table_->GetOrInsertNull();\n+    return Status::OK();\n+  }\n+\n+  Status VisitValue(const Scalar& value) {\n+    memo_table_->GetOrInsert(value);\n+    return Status::OK();\n+  }\n+\n+  Status Reset(MemoryPool* pool) {\n+    memo_table_.reset(new MemoTable(pool, 0));\n+    return Status::OK();\n+  }\n+\n+  Status Append(FunctionContext* ctx, const Datum& right) {\n+    const ArrayData& right_data = *right.array();\n+    return ArrayDataVisitor<T>::Visit(right_data, this);\n+  }\n+\n+  using MemoTable = typename HashTraits<T>::MemoTableType;\n+  std::unique_ptr<MemoTable> memo_table_;\n+};\n+\n+// ----------------------------------------------------------------------\n+\n+template <typename Type, typename Scalar>\n+class MatchKernel : public MatchKernelImpl {\n+ public:\n+  MatchKernel(const std::shared_ptr<DataType>& type, MemoryPool* pool)\n+      : type_(type), pool_(pool) {}\n+\n+  // \\brief if left array has a null and right array has null,\n+  // return the index, else null\n+  Status VisitNull() {\n+    if (memo_table_->GetNull() != -1) {\n+      indices_builder_.UnsafeAppend(memo_table_->GetNull());\n+    } else {\n+      indices_builder_.UnsafeAppendNull();\n+    }\n+    return Status::OK();\n+  }\n+\n+  // \\brief Iterate over the left array using another visitor.\n+  // In VisitValue, use the memo_table_ (for right array) and check if value\n+  // in left array is in the memo_table_. Return the index if condition satisfied,\n+  // else null.\n+  Status VisitValue(const Scalar& value) {\n+    if (memo_table_->Get(value) != -1) {\n+      indices_builder_.UnsafeAppend(memo_table_->Get(value));\n+    } else {\n+      indices_builder_.UnsafeAppendNull();\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Compute(FunctionContext* ctx, const Datum& left, Datum* out) override {\n+    const ArrayData& left_data = *left.array();\n+\n+    indices_builder_.Reset();\n+    RETURN_NOT_OK(indices_builder_.Reserve(left_data.length));\n+\n+    RETURN_NOT_OK(ArrayDataVisitor<Type>::Visit(left_data, this));\n+\n+    RETURN_NOT_OK(indices_builder_.FinishInternal(&output));\n+    out->value = std::move(output);\n+    return Status::OK();\n+  }\n+\n+  Status ConstructRight(FunctionContext* ctx, const Datum& right) override {\n+    MatchMemoTableRight<Type, Scalar> func;\n+    RETURN_NOT_OK(func.Reset(pool_));\n+\n+    if (right.kind() == Datum::ARRAY) {\n+      RETURN_NOT_OK(func.Append(ctx, right));\n+    } else if (right.kind() == Datum::CHUNKED_ARRAY) {\n+      const ChunkedArray& right_array = *right.chunked_array();\n+      for (int i = 0; i < right_array.num_chunks(); i++) {\n+        RETURN_NOT_OK(func.Append(ctx, right_array.chunk(i)));\n+      }\n+    } else {\n+      return Status::Invalid(\"Input Datum was not array-like\");\n+    }\n+\n+    memo_table_ = std::move(func.memo_table_);\n+    return Status::OK();\n+  }\n+\n+ protected:\n+  using MemoTable = typename HashTraits<Type>::MemoTableType;\n+  std::unique_ptr<MemoTable> memo_table_;\n+  std::shared_ptr<DataType> type_;\n+  MemoryPool* pool_;\n+\n+ private:\n+  std::shared_ptr<ArrayData> output;\n+  Int32Builder indices_builder_;\n+};\n+\n+// ----------------------------------------------------------------------\n+// (NullType has a separate implementation)\n+\n+class NullMatchKernel : public MatchKernelImpl {\n+ public:\n+  NullMatchKernel(const std::shared_ptr<DataType>& type, MemoryPool* pool) {}\n+\n+  // \\brief When array is NullType, based on the null count for the arrays,\n+  // return index, else nulls\n+  Status Compute(FunctionContext* ctx, const Datum& left, Datum* out) override {\n+    const ArrayData& left_data = *left.array();\n+    left_null_count = left_data.GetNullCount();\n+    indices_builder_.Reset();\n+    RETURN_NOT_OK(indices_builder_.Reserve(left_data.length));\n+\n+    if (left_null_count != 0 && right_null_count == 0) {\n+      for (int64_t i = 0; i < left_data.length; ++i) {\n+        indices_builder_.UnsafeAppendNull();\n+      }\n+    } else {\n+      for (int64_t i = 0; i < left_data.length; ++i) {\n+        indices_builder_.UnsafeAppend(0);\n+      }\n+    }\n+    RETURN_NOT_OK(indices_builder_.FinishInternal(&output));\n+    out->value = std::move(output);\n+    return Status::OK();\n+  }\n+\n+  Status ConstructRight(FunctionContext* ctx, const Datum& right) override {\n+    if (right.kind() == Datum::ARRAY) {\n+      const ArrayData& right_data = *right.array();\n+      right_null_count = right_data.GetNullCount();\n+    } else if (right.kind() == Datum::CHUNKED_ARRAY) {\n+      const ChunkedArray& right_array = *right.chunked_array();\n+      for (int i = 0; i < right_array.num_chunks(); i++) {\n+        right_null_count += right_array.chunk(i)->null_count();\n+      }\n \n Review comment:\n   ```suggestion\r\n         }\r\n         right_null_count = right.chunked_array()->null_count();\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T15:41:18.313+0000",
                    "updated": "2019-11-13T15:41:18.313+0000",
                    "started": "2019-11-13T15:41:18.313+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342672",
                    "issueId": "13103397"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/worklog/342673",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5665: ARROW-1560: [C++] Kernel implementations for \"match\" function\nURL: https://github.com/apache/arrow/pull/5665#discussion_r345832373\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/match.cc\n ##########\n @@ -0,0 +1,317 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/match.h\"\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <cstring>\n+#include <memory>\n+#include <sstream>\n+#include <string>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/array/dict_internal.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/util_internal.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit_util.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/hashing.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+using internal::DictionaryTraits;\n+using internal::HashTraits;\n+\n+namespace compute {\n+\n+class MatchKernelImpl : public UnaryKernel {\n+  virtual Status Compute(FunctionContext* ctx, const Datum& left, Datum* out) = 0;\n+\n+ public:\n+  // \\brief Check if value in both arrays or not and returns integer values/null\n+  Status Call(FunctionContext* ctx, const Datum& left, Datum* out) override {\n+    DCHECK_EQ(Datum::ARRAY, left.kind());\n+    RETURN_NOT_OK(Compute(ctx, left, out));\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<DataType> out_type() const override { return int32(); }\n+\n+  virtual Status ConstructRight(FunctionContext* ctx, const Datum& right) = 0;\n+};\n+\n+// ----------------------------------------------------------------------\n+// Using a visitor create a memo_table_ for the right array\n+// TODO: Implement for small lists\n+\n+template <typename T, typename Scalar>\n+struct MatchMemoTableRight {\n+  Status VisitNull() {\n+    memo_table_->GetOrInsertNull();\n+    return Status::OK();\n+  }\n+\n+  Status VisitValue(const Scalar& value) {\n+    memo_table_->GetOrInsert(value);\n+    return Status::OK();\n+  }\n+\n+  Status Reset(MemoryPool* pool) {\n+    memo_table_.reset(new MemoTable(pool, 0));\n+    return Status::OK();\n+  }\n+\n+  Status Append(FunctionContext* ctx, const Datum& right) {\n+    const ArrayData& right_data = *right.array();\n+    return ArrayDataVisitor<T>::Visit(right_data, this);\n+  }\n+\n+  using MemoTable = typename HashTraits<T>::MemoTableType;\n+  std::unique_ptr<MemoTable> memo_table_;\n+};\n+\n+// ----------------------------------------------------------------------\n+\n+template <typename Type, typename Scalar>\n+class MatchKernel : public MatchKernelImpl {\n+ public:\n+  MatchKernel(const std::shared_ptr<DataType>& type, MemoryPool* pool)\n+      : type_(type), pool_(pool) {}\n+\n+  // \\brief if left array has a null and right array has null,\n+  // return the index, else null\n+  Status VisitNull() {\n+    if (memo_table_->GetNull() != -1) {\n+      indices_builder_.UnsafeAppend(memo_table_->GetNull());\n+    } else {\n+      indices_builder_.UnsafeAppendNull();\n+    }\n+    return Status::OK();\n+  }\n+\n+  // \\brief Iterate over the left array using another visitor.\n+  // In VisitValue, use the memo_table_ (for right array) and check if value\n+  // in left array is in the memo_table_. Return the index if condition satisfied,\n+  // else null.\n+  Status VisitValue(const Scalar& value) {\n+    if (memo_table_->Get(value) != -1) {\n+      indices_builder_.UnsafeAppend(memo_table_->Get(value));\n+    } else {\n+      indices_builder_.UnsafeAppendNull();\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Compute(FunctionContext* ctx, const Datum& left, Datum* out) override {\n+    const ArrayData& left_data = *left.array();\n+\n+    indices_builder_.Reset();\n+    RETURN_NOT_OK(indices_builder_.Reserve(left_data.length));\n+\n+    RETURN_NOT_OK(ArrayDataVisitor<Type>::Visit(left_data, this));\n+\n+    RETURN_NOT_OK(indices_builder_.FinishInternal(&output));\n+    out->value = std::move(output);\n+    return Status::OK();\n+  }\n+\n+  Status ConstructRight(FunctionContext* ctx, const Datum& right) override {\n+    MatchMemoTableRight<Type, Scalar> func;\n+    RETURN_NOT_OK(func.Reset(pool_));\n+\n+    if (right.kind() == Datum::ARRAY) {\n+      RETURN_NOT_OK(func.Append(ctx, right));\n+    } else if (right.kind() == Datum::CHUNKED_ARRAY) {\n+      const ChunkedArray& right_array = *right.chunked_array();\n+      for (int i = 0; i < right_array.num_chunks(); i++) {\n+        RETURN_NOT_OK(func.Append(ctx, right_array.chunk(i)));\n+      }\n+    } else {\n+      return Status::Invalid(\"Input Datum was not array-like\");\n+    }\n+\n+    memo_table_ = std::move(func.memo_table_);\n+    return Status::OK();\n+  }\n+\n+ protected:\n+  using MemoTable = typename HashTraits<Type>::MemoTableType;\n+  std::unique_ptr<MemoTable> memo_table_;\n+  std::shared_ptr<DataType> type_;\n+  MemoryPool* pool_;\n+\n+ private:\n+  std::shared_ptr<ArrayData> output;\n+  Int32Builder indices_builder_;\n+};\n+\n+// ----------------------------------------------------------------------\n+// (NullType has a separate implementation)\n+\n+class NullMatchKernel : public MatchKernelImpl {\n+ public:\n+  NullMatchKernel(const std::shared_ptr<DataType>& type, MemoryPool* pool) {}\n+\n+  // \\brief When array is NullType, based on the null count for the arrays,\n+  // return index, else nulls\n+  Status Compute(FunctionContext* ctx, const Datum& left, Datum* out) override {\n+    const ArrayData& left_data = *left.array();\n+    left_null_count = left_data.GetNullCount();\n+    indices_builder_.Reset();\n+    RETURN_NOT_OK(indices_builder_.Reserve(left_data.length));\n+\n+    if (left_null_count != 0 && right_null_count == 0) {\n+      for (int64_t i = 0; i < left_data.length; ++i) {\n+        indices_builder_.UnsafeAppendNull();\n+      }\n+    } else {\n+      for (int64_t i = 0; i < left_data.length; ++i) {\n+        indices_builder_.UnsafeAppend(0);\n+      }\n+    }\n+    RETURN_NOT_OK(indices_builder_.FinishInternal(&output));\n+    out->value = std::move(output);\n+    return Status::OK();\n+  }\n+\n+  Status ConstructRight(FunctionContext* ctx, const Datum& right) override {\n+    if (right.kind() == Datum::ARRAY) {\n+      const ArrayData& right_data = *right.array();\n+      right_null_count = right_data.GetNullCount();\n+    } else if (right.kind() == Datum::CHUNKED_ARRAY) {\n+      const ChunkedArray& right_array = *right.chunked_array();\n+      for (int i = 0; i < right_array.num_chunks(); i++) {\n+        right_null_count += right_array.chunk(i)->null_count();\n+      }\n+    } else {\n+      return Status::Invalid(\"Input Datum was not array-like\");\n+    }\n+    return Status::OK();\n+  }\n+\n+ private:\n+  int64_t left_null_count{};\n \n Review comment:\n   ```suggestion\r\n     int64_t left_null_count = 0;\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T15:41:18.347+0000",
                    "updated": "2019-11-13T15:41:18.347+0000",
                    "started": "2019-11-13T15:41:18.346+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342673",
                    "issueId": "13103397"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/worklog/342674",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5665: ARROW-1560: [C++] Kernel implementations for \"match\" function\nURL: https://github.com/apache/arrow/pull/5665#discussion_r345831775\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/match.cc\n ##########\n @@ -0,0 +1,317 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/match.h\"\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <cstring>\n+#include <memory>\n+#include <sstream>\n+#include <string>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/array/dict_internal.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/util_internal.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit_util.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/hashing.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+using internal::DictionaryTraits;\n+using internal::HashTraits;\n+\n+namespace compute {\n+\n+class MatchKernelImpl : public UnaryKernel {\n+  virtual Status Compute(FunctionContext* ctx, const Datum& left, Datum* out) = 0;\n+\n+ public:\n+  // \\brief Check if value in both arrays or not and returns integer values/null\n+  Status Call(FunctionContext* ctx, const Datum& left, Datum* out) override {\n+    DCHECK_EQ(Datum::ARRAY, left.kind());\n+    RETURN_NOT_OK(Compute(ctx, left, out));\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<DataType> out_type() const override { return int32(); }\n+\n+  virtual Status ConstructRight(FunctionContext* ctx, const Datum& right) = 0;\n+};\n+\n+// ----------------------------------------------------------------------\n+// Using a visitor create a memo_table_ for the right array\n+// TODO: Implement for small lists\n+\n+template <typename T, typename Scalar>\n+struct MatchMemoTableRight {\n+  Status VisitNull() {\n+    memo_table_->GetOrInsertNull();\n+    return Status::OK();\n+  }\n+\n+  Status VisitValue(const Scalar& value) {\n+    memo_table_->GetOrInsert(value);\n+    return Status::OK();\n+  }\n+\n+  Status Reset(MemoryPool* pool) {\n+    memo_table_.reset(new MemoTable(pool, 0));\n+    return Status::OK();\n+  }\n+\n+  Status Append(FunctionContext* ctx, const Datum& right) {\n+    const ArrayData& right_data = *right.array();\n+    return ArrayDataVisitor<T>::Visit(right_data, this);\n+  }\n+\n+  using MemoTable = typename HashTraits<T>::MemoTableType;\n+  std::unique_ptr<MemoTable> memo_table_;\n+};\n+\n+// ----------------------------------------------------------------------\n+\n+template <typename Type, typename Scalar>\n+class MatchKernel : public MatchKernelImpl {\n+ public:\n+  MatchKernel(const std::shared_ptr<DataType>& type, MemoryPool* pool)\n+      : type_(type), pool_(pool) {}\n+\n+  // \\brief if left array has a null and right array has null,\n+  // return the index, else null\n+  Status VisitNull() {\n+    if (memo_table_->GetNull() != -1) {\n+      indices_builder_.UnsafeAppend(memo_table_->GetNull());\n+    } else {\n+      indices_builder_.UnsafeAppendNull();\n+    }\n+    return Status::OK();\n+  }\n+\n+  // \\brief Iterate over the left array using another visitor.\n+  // In VisitValue, use the memo_table_ (for right array) and check if value\n+  // in left array is in the memo_table_. Return the index if condition satisfied,\n+  // else null.\n+  Status VisitValue(const Scalar& value) {\n+    if (memo_table_->Get(value) != -1) {\n+      indices_builder_.UnsafeAppend(memo_table_->Get(value));\n+    } else {\n+      indices_builder_.UnsafeAppendNull();\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Compute(FunctionContext* ctx, const Datum& left, Datum* out) override {\n+    const ArrayData& left_data = *left.array();\n+\n+    indices_builder_.Reset();\n+    RETURN_NOT_OK(indices_builder_.Reserve(left_data.length));\n+\n+    RETURN_NOT_OK(ArrayDataVisitor<Type>::Visit(left_data, this));\n+\n+    RETURN_NOT_OK(indices_builder_.FinishInternal(&output));\n+    out->value = std::move(output);\n+    return Status::OK();\n+  }\n+\n+  Status ConstructRight(FunctionContext* ctx, const Datum& right) override {\n+    MatchMemoTableRight<Type, Scalar> func;\n+    RETURN_NOT_OK(func.Reset(pool_));\n+\n+    if (right.kind() == Datum::ARRAY) {\n+      RETURN_NOT_OK(func.Append(ctx, right));\n+    } else if (right.kind() == Datum::CHUNKED_ARRAY) {\n+      const ChunkedArray& right_array = *right.chunked_array();\n+      for (int i = 0; i < right_array.num_chunks(); i++) {\n+        RETURN_NOT_OK(func.Append(ctx, right_array.chunk(i)));\n+      }\n+    } else {\n+      return Status::Invalid(\"Input Datum was not array-like\");\n+    }\n+\n+    memo_table_ = std::move(func.memo_table_);\n+    return Status::OK();\n+  }\n+\n+ protected:\n+  using MemoTable = typename HashTraits<Type>::MemoTableType;\n+  std::unique_ptr<MemoTable> memo_table_;\n+  std::shared_ptr<DataType> type_;\n+  MemoryPool* pool_;\n+\n+ private:\n+  std::shared_ptr<ArrayData> output;\n+  Int32Builder indices_builder_;\n+};\n+\n+// ----------------------------------------------------------------------\n+// (NullType has a separate implementation)\n+\n+class NullMatchKernel : public MatchKernelImpl {\n+ public:\n+  NullMatchKernel(const std::shared_ptr<DataType>& type, MemoryPool* pool) {}\n+\n+  // \\brief When array is NullType, based on the null count for the arrays,\n+  // return index, else nulls\n+  Status Compute(FunctionContext* ctx, const Datum& left, Datum* out) override {\n+    const ArrayData& left_data = *left.array();\n+    left_null_count = left_data.GetNullCount();\n+    indices_builder_.Reset();\n+    RETURN_NOT_OK(indices_builder_.Reserve(left_data.length));\n+\n+    if (left_null_count != 0 && right_null_count == 0) {\n+      for (int64_t i = 0; i < left_data.length; ++i) {\n+        indices_builder_.UnsafeAppendNull();\n+      }\n+    } else {\n+      for (int64_t i = 0; i < left_data.length; ++i) {\n+        indices_builder_.UnsafeAppend(0);\n+      }\n+    }\n+    RETURN_NOT_OK(indices_builder_.FinishInternal(&output));\n+    out->value = std::move(output);\n+    return Status::OK();\n+  }\n+\n+  Status ConstructRight(FunctionContext* ctx, const Datum& right) override {\n+    if (right.kind() == Datum::ARRAY) {\n+      const ArrayData& right_data = *right.array();\n+      right_null_count = right_data.GetNullCount();\n \n Review comment:\n   ```suggestion\r\n         right_null_count = right.array()->GetNullCount();\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T15:41:18.395+0000",
                    "updated": "2019-11-13T15:41:18.395+0000",
                    "started": "2019-11-13T15:41:18.395+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342674",
                    "issueId": "13103397"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/worklog/342675",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5665: ARROW-1560: [C++] Kernel implementations for \"match\" function\nURL: https://github.com/apache/arrow/pull/5665#discussion_r345828458\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/match_test.cc\n ##########\n @@ -0,0 +1,457 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <cstdio>\n+#include <functional>\n+#include <locale>\n+#include <memory>\n+#include <stdexcept>\n+#include <string>\n+#include <vector>\n+\n+#include <gtest/gtest.h>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/match.h\"\n+#include \"arrow/compute/kernels/util_internal.h\"\n+#include \"arrow/compute/test_util.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/status.h\"\n+#include \"arrow/table.h\"\n+#include \"arrow/testing/gtest_common.h\"\n+#include \"arrow/testing/util.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/decimal.h\"\n+\n+namespace arrow {\n+namespace compute {\n+\n+// ----------------------------------------------------------------------\n+// Match tests\n+\n+template <typename Type, typename T = typename TypeTraits<Type>::c_type>\n+void CheckMatch(FunctionContext* ctx, const std::shared_ptr<DataType>& type,\n+                const std::vector<T>& in_values, const std::vector<bool>& in_is_valid,\n+                const std::vector<T>& member_set_values,\n+                const std::vector<bool>& member_set_is_valid,\n+                const std::vector<int32_t>& out_values,\n+                const std::vector<bool>& out_is_valid) {\n+  std::shared_ptr<Array> input = _MakeArray<Type, T>(type, in_values, in_is_valid);\n+  std::shared_ptr<Array> member_set =\n+      _MakeArray<Type, T>(type, member_set_values, member_set_is_valid);\n+  std::shared_ptr<Array> expected =\n+      _MakeArray<Int32Type, int32_t>(int32(), out_values, out_is_valid);\n+\n+  Datum datum_out;\n+  ASSERT_OK(Match(ctx, input, member_set, &datum_out));\n+  std::shared_ptr<Array> result = datum_out.make_array();\n+  ASSERT_ARRAYS_EQUAL(*expected, *result);\n+}\n+\n+class TestMatchKernel : public ComputeFixture, public TestBase {};\n+\n+template <typename Type>\n+class TestMatchKernelPrimitive : public ComputeFixture, public TestBase {};\n+\n+typedef ::testing::Types<Int8Type, UInt8Type, Int16Type, UInt16Type, Int32Type,\n+                         UInt32Type, Int64Type, UInt64Type, FloatType, DoubleType,\n+                         Date32Type, Date64Type>\n+    PrimitiveDictionaries;\n+\n+TYPED_TEST_CASE(TestMatchKernelPrimitive, PrimitiveDictionaries);\n+\n+TYPED_TEST(TestMatchKernelPrimitive, Match) {\n+  using T = typename TypeParam::c_type;\n+  auto type = TypeTraits<TypeParam>::type_singleton();\n+\n+  // No Nulls\n+  CheckMatch<TypeParam, T>(&this->ctx_, type,\n+                           /* in_values= */ {2, 1, 2, 1, 2, 3},\n+                           /* in_is_valid= */ {},\n+                           /* member_set_values= */ {2, 1, 2, 3},\n+                           /* member_set_is_valid= */ {},\n+                           /* out_values= */ {0, 1, 0, 1, 0, 2},\n+                           /* out_is_valid= */ {});\n+  // Nulls in left array\n+  CheckMatch<TypeParam, T>(\n+      &this->ctx_, type,\n+      /* in_values= */ {2, 1, 2, 1, 2, 3},\n+      /* in_is_valid= */ {false, false, false, false, false, false},\n+      /* member_set_values= */ {2, 1, 3},\n+      /* member_set_is_valid= */ {},\n+      /* out_values= */ {0, 0, 0, 0, 0, 0},\n+      /* out_is_valid= */ {false, false, false, false, false, false});\n+  // Nulls in right array\n+  CheckMatch<TypeParam, T>(\n+      &this->ctx_, type,\n+      /* in_values= */ {2, 1, 2, 1, 2, 3},\n+      /* in_is_valid= */ {},\n+      /* member_set_values= */ {2, 1, 2, 3},\n+      /* member_set_is_valid= */ {false, false, false, false},\n+      /* out_values= */ {0, 0, 0, 0, 0, 0},\n+      /* out_is_valid= */ {false, false, false, false, false, false});\n+  // Nulls in both the arrays\n+  CheckMatch<TypeParam, T>(&this->ctx_, type, {2, 1, 2, 3}, {false, false, false, false},\n+                           {2, 1}, {false, false}, {0, 0, 0, 0}, {});\n+  // No Match\n+  CheckMatch<TypeParam, T>(\n+      &this->ctx_, type,\n+      /* in_values= */ {2, 1, 7, 3, 8},\n+      /* in_is_valid= */ {true, false, true, true, true},\n+      /* member_set_values= */ {2, 1, 2, 1, 6, 3, 3},\n+      /* member_set_is_valid= */ {true, false, true, false, true, true, true},\n+      /* out_values= */ {0, 1, 1, 3, 3},\n+      /* out_is_valid= */ {true, true, false, true, false});\n+\n+  // Empty Arrays\n+  CheckMatch<TypeParam, T>(&this->ctx_, type, {}, {}, {}, {}, {}, {});\n+}\n+\n+TYPED_TEST(TestMatchKernelPrimitive, PrimitiveResizeTable) {\n+  using T = typename TypeParam::c_type;\n+\n+  const int64_t kTotalValues = std::min<int64_t>(INT16_MAX, 1UL << sizeof(T) / 2);\n+  const int64_t kRepeats = 5;\n+\n+  std::vector<T> values;\n+  std::vector<T> member_set;\n+  std::vector<int32_t> expected;\n+  for (int64_t i = 0; i < kTotalValues * kRepeats; i++) {\n+    const auto val = static_cast<T>(i % kTotalValues);\n+    values.push_back(val);\n+    member_set.push_back(val);\n+    expected.push_back(static_cast<int32_t>(i % kTotalValues));\n+  }\n+\n+  auto type = TypeTraits<TypeParam>::type_singleton();\n+  CheckMatch<TypeParam, T>(&this->ctx_, type, values, {}, member_set, {}, expected, {});\n+}\n+\n+TEST_F(TestMatchKernel, MatchNull) {\n+  CheckMatch<NullType, std::nullptr_t>(&this->ctx_, null(), {0, 0, 0},\n+                                       {false, false, false}, {0, 0}, {false, false},\n+                                       {0, 0, 0}, {});\n+\n+  CheckMatch<NullType, std::nullptr_t>(&this->ctx_, null(), {NULL, NULL}, {},\n+                                       {NULL, NULL, NULL, NULL}, {}, {0, 0}, {});\n+\n+  CheckMatch<NullType, std::nullptr_t>(&this->ctx_, null(), {nullptr, nullptr, nullptr},\n+                                       {}, {nullptr}, {}, {0, 0, 0}, {});\n+\n+  // Empty left array\n+  CheckMatch<NullType, std::nullptr_t>(&this->ctx_, null(), {}, {},\n+                                       {nullptr, nullptr, nullptr}, {}, {}, {});\n+\n+  // Empty right array\n+  CheckMatch<NullType, std::nullptr_t>(&this->ctx_, null(), {nullptr, nullptr, nullptr},\n+                                       {}, {}, {}, {0, 0, 0}, {false, false, false});\n+\n+  // Empty arrays\n+  CheckMatch<NullType, std::nullptr_t>(&this->ctx_, null(), {}, {}, {}, {}, {}, {});\n+}\n+\n+TEST_F(TestMatchKernel, MatchTimeTimestamp) {\n+  CheckMatch<Time32Type, int32_t>(&this->ctx_, time32(TimeUnit::SECOND),\n+                                  /* in_values= */ {1, 2, 5, 1, 2},\n+                                  /* in_is_valid= */ {true, false, true, true, true},\n+                                  /* member_set_values= */ {2, 1, 2, 1},\n+                                  /* member_set_is_valid= */ {true, true, false, true},\n+                                  /* out_values= */ {1, 2, 2, 1, 0},\n+                                  /* out_is_valid= */ {true, true, false, true, true});\n+\n+  // Right array has no Nulls\n+  CheckMatch<Time32Type, int32_t>(\n+      &this->ctx_, time32(TimeUnit::SECOND), {2, 1, 5, 1}, {true, false, true, true},\n+      {2, 1, 1}, {true, true, true}, {0, 1, 1, 1}, {true, false, false, true});\n+\n+  // No match\n+  CheckMatch<Time32Type, int32_t>(&this->ctx_, time32(TimeUnit::SECOND), {3, 5, 5, 3},\n+                                  {true, false, true, true}, {2, 1, 2, 1, 2}, {},\n+                                  {0, 0, 0, 0}, {false, false, false, false});\n+\n+  // Empty arrays\n+  CheckMatch<Time32Type, int32_t>(&this->ctx_, time32(TimeUnit::SECOND), {}, {}, {}, {},\n+                                  {}, {});\n+\n+  CheckMatch<Time64Type, int64_t>(&this->ctx_, time64(TimeUnit::NANO), {2, 1, 2, 1},\n+                                  {true, false, true, true}, {2, 1, 1},\n+                                  {true, false, true}, {0, 1, 0, 2}, {});\n+\n+  CheckMatch<TimestampType, int64_t>(&this->ctx_, timestamp(TimeUnit::NANO), {2, 1, 2, 1},\n+                                     {true, false, true, true}, {2, 1, 2, 1},\n+                                     {true, false, true, true}, {0, 1, 0, 2}, {});\n+\n+  // Empty left array\n+  CheckMatch<TimestampType, int64_t>(&this->ctx_, timestamp(TimeUnit::NANO), {}, {},\n+                                     {2, 1, 2, 1}, {true, false, true, true}, {}, {});\n+\n+  // Empty right array\n+  CheckMatch<TimestampType, int64_t>(&this->ctx_, timestamp(TimeUnit::NANO), {2, 1, 2, 1},\n+                                     {true, false, true, true}, {}, {}, {0, 0, 0, 0},\n+                                     {false, false, false, false});\n+\n+  // Both array have Nulls\n+  CheckMatch<Time32Type, int32_t>(&this->ctx_, time32(TimeUnit::SECOND), {2, 1, 2, 1},\n+                                  {false, false, false, false}, {2, 1}, {false, false},\n+                                  {0, 0, 0, 0}, {});\n+}\n+\n+TEST_F(TestMatchKernel, MatchBoolean) {\n+  CheckMatch<BooleanType, bool>(&this->ctx_, boolean(),\n+                                /* in_values= */ {false, true, false, true},\n+                                /* in_is_valid= */ {true, false, true, true},\n+                                /* member_set_values= */ {true, false, true},\n+                                /* member_set_is_valid= */ {false, true, true},\n+                                /* out_values= */ {1, 0, 1, 2}, /* out_is_valid= */ {});\n+\n+  CheckMatch<BooleanType, bool>(&this->ctx_, boolean(), {false, true, false, true},\n+                                {true, false, true, true},\n+                                {false, true, false, true, false},\n+                                {true, true, false, true, false}, {0, 2, 0, 1}, {});\n+\n+  // No Nulls\n+  CheckMatch<BooleanType, bool>(&this->ctx_, boolean(), {true, true, false, true}, {},\n+                                {false, true}, {}, {1, 1, 0, 1}, {});\n+\n+  CheckMatch<BooleanType, bool>(&this->ctx_, boolean(), {false, true, false, true}, {},\n+                                {true, true, true, true}, {}, {0, 0, 0, 0},\n+                                {false, true, false, true});\n+\n+  // No match\n+  CheckMatch<BooleanType, bool>(&this->ctx_, boolean(), {true, true, true, true}, {},\n+                                {false, false, false}, {}, {0, 0, 0, 0},\n+                                {false, false, false, false});\n+\n+  // Nulls in left array\n+  CheckMatch<BooleanType, bool>(&this->ctx_, boolean(), {false, true, false, true},\n+                                {false, false, false, false}, {true, true}, {},\n+                                {0, 0, 0, 0}, {false, false, false, false});\n+\n+  // Nulls in right array\n+  CheckMatch<BooleanType, bool>(&this->ctx_, boolean(), {true, true, false, true}, {},\n+                                {true, true, false, true, true},\n+                                {false, false, false, false, false}, {0, 0, 0, 0},\n+                                {false, false, false, false});\n+\n+  // Both array have Nulls\n+  CheckMatch<BooleanType, bool>(&this->ctx_, boolean(), {false, true, false, true},\n+                                {false, false, false, false}, {true, true, true, true},\n+                                {false, false, false, false}, {0, 0, 0, 0}, {});\n+}\n+\n+template <typename Type>\n+class TestMatchKernelBinary : public ComputeFixture, public TestBase {};\n+\n+using BinaryTypes = ::testing::Types<BinaryType, StringType>;\n+TYPED_TEST_CASE(TestMatchKernelBinary, BinaryTypes);\n+\n+TYPED_TEST(TestMatchKernelBinary, MatchBinary) {\n+  auto type = TypeTraits<TypeParam>::type_singleton();\n+  CheckMatch<TypeParam, std::string>(&this->ctx_, type, {\"test\", \"\", \"test2\", \"test\"},\n+                                     {true, false, true, true}, {\"test\", \"\", \"test2\"},\n+                                     {true, false, true}, {0, 1, 2, 0}, {});\n+\n+  // No match\n+  CheckMatch<TypeParam, std::string>(\n+      &this->ctx_, type,\n+      /* in_values= */ {\"test\", \"\", \"test2\", \"test\"},\n+      /* in_is_valid= */ {true, false, true, true},\n+      /* member_set_values= */ {\"test3\", \"test4\", \"test3\", \"test4\"},\n+      /* member_set_is_valid= */ {true, true, true, true},\n+      /* out_values= */ {0, 0, 0, 0},\n+      /* out_is_valid= */ {false, false, false, false});\n+\n+  // Nulls in left array\n+  CheckMatch<TypeParam, std::string>(&this->ctx_, type,\n+                                     /* in_values= */ {\"test\", \"\", \"test2\", \"test\"},\n+                                     /* in_is_valid= */ {false, false, false, false},\n+                                     /* member_set_values= */ {\"test\", \"test2\", \"test\"},\n+                                     /* member_set_is_valid= */ {true, true, true},\n+                                     /* out_values= */ {0, 0, 0, 0},\n+                                     /* out_is_valid= */ {false, false, false, false});\n+\n+  // Nulls in right array\n+  CheckMatch<TypeParam, std::string>(\n+      &this->ctx_, type, {\"test\", \"test2\", \"test\"}, {true, true, true},\n+      {\"test\", \"\", \"test2\"}, {false, false, false}, {0, 0, 0}, {false, false, false});\n+\n+  // Both array have Nulls\n+  CheckMatch<TypeParam, std::string>(\n+      &this->ctx_, type,\n+      /* in_values= */ {\"test\", \"\", \"test2\", \"test\"},\n+      /* in_is_valid= */ {false, false, false, false},\n+      /* member_set_values= */ {\"test\", \"\", \"test2\", \"test\"},\n+      /* member_set_is_valid= */ {false, false, false, false},\n+      /* out_values= */ {0, 0, 0, 0}, /* out_is_valid= */ {});\n+\n+  // Empty arrays\n+  CheckMatch<TypeParam, std::string>(&this->ctx_, type, {}, {}, {}, {}, {}, {});\n+\n+  // Empty left array\n+  CheckMatch<TypeParam, std::string>(&this->ctx_, type, {}, {},\n+                                     {\"test\", \"\", \"test2\", \"test\"},\n+                                     {true, false, true, false}, {}, {});\n+\n+  // Empty right array\n+  CheckMatch<TypeParam, std::string>(&this->ctx_, type, {\"test\", \"\", \"test2\", \"test\"},\n+                                     {true, false, true, true}, {}, {}, {0, 0, 0, 0},\n+                                     {false, false, false, false});\n+}\n+\n+TEST_F(TestMatchKernel, BinaryResizeTable) {\n+  const int32_t kTotalValues = 10000;\n+#if !defined(ARROW_VALGRIND)\n+  const int32_t kRepeats = 10;\n+#else\n+  // Mitigate Valgrind's slowness\n+  const int32_t kRepeats = 3;\n+#endif\n+\n+  std::vector<std::string> values;\n+  std::vector<std::string> member_set;\n+  std::vector<int32_t> expected;\n+  char buf[20] = \"test\";\n+\n+  for (int32_t i = 0; i < kTotalValues * kRepeats; i++) {\n+    int32_t index = i % kTotalValues;\n+\n+    ASSERT_GE(snprintf(buf + 4, sizeof(buf) - 4, \"%d\", index), 0);\n+    values.emplace_back(buf);\n+    member_set.emplace_back(buf);\n+    expected.push_back(index);\n+  }\n+\n+  CheckMatch<BinaryType, std::string>(&this->ctx_, binary(), values, {}, member_set, {},\n+                                      expected, {});\n+\n+  CheckMatch<StringType, std::string>(&this->ctx_, utf8(), values, {}, member_set, {},\n+                                      expected, {});\n+}\n+\n+TEST_F(TestMatchKernel, MatchFixedSizeBinary) {\n+  CheckMatch<FixedSizeBinaryType, std::string>(\n+      &this->ctx_, fixed_size_binary(5),\n+      /* in_values= */ {\"bbbbb\", \"\", \"aaaaa\", \"ccccc\"},\n+      /* in_is_valid= */ {true, false, true, true},\n+      /* member_set_values= */ {\"bbbbb\", \"\", \"bbbbb\", \"aaaaa\", \"ccccc\"},\n+      /* member_set_is_valid= */ {true, false, true, true, true},\n+      /* out_values= */ {0, 1, 2, 3}, /* out_is_valid*/ {});\n+\n+  // Nulls in left\n+  CheckMatch<FixedSizeBinaryType, std::string>(\n+      &this->ctx_, fixed_size_binary(5),\n+      /* in_values= */ {\"bbbbb\", \"\", \"bbbbb\", \"aaaaa\", \"ccccc\"},\n+      /* in_is_valid= */ {false, false, false, false, false},\n+      /* member_set_values= */ {\"bbbbb\", \"aabbb\", \"bbbbb\", \"aaaaa\", \"ccccc\"},\n+      /* member_set_is_valid= */ {true, true, true, true, true},\n+      /* out_values= */ {0, 0, 0, 0, 0},\n+      /* out_is_valid= */ {false, false, false, false, false});\n+\n+  // Nulls in right\n+  CheckMatch<FixedSizeBinaryType, std::string>(\n+      &this->ctx_, fixed_size_binary(5),\n+      /* in_values= */ {\"bbbbb\", \"\", \"bbbbb\", \"aaaaa\", \"ccccc\"},\n+      /* in_is_valid= */ {true, false, true, true, true},\n+      /* member_set_values= */ {\"bbbbb\", \"\", \"bbbbb\"},\n+      /* member_set_is_valid= */ {false, false, false},\n+      /* out_values= */ {0, 0, 0, 0, 0},\n+      /* out_is_valid= */ {false, true, false, false, false});\n+\n+  // Both array have Nulls\n+  CheckMatch<FixedSizeBinaryType, std::string>(\n+      &this->ctx_, fixed_size_binary(5),\n+      /* in_values= */ {\"bbbbb\", \"\", \"bbbbb\", \"aaaaa\", \"ccccc\"},\n+      /* in_is_valid= */ {false, false, false, false, false},\n+      /* member_set_values= */ {\"\", \"\", \"bbbbb\", \"aaaaa\"},\n+      /* member_set_is_valid= */ {false, false, false, false},\n+      /* out_values= */ {0, 0, 0, 0, 0}, /* out_is_valid= */ {});\n+\n+  // No match\n+  CheckMatch<FixedSizeBinaryType, std::string>(\n+      &this->ctx_, fixed_size_binary(5),\n+      /* in_values= */ {\"bbbbc\", \"bbbbc\", \"aaaad\", \"cccca\"},\n+      /* in_is_valid= */ {},\n+      /* member_set_values= */ {\"bbbbb\", \"\", \"bbbbb\", \"aaaaa\", \"ddddd\"},\n+      /* member_set_is_valid= */ {true, false, true, true, true},\n+      /* out_values= */ {0, 0, 0, 0},\n+      /* out_is_valid= */ {false, false, false, false});\n+\n+  // Empty left array\n+  CheckMatch<FixedSizeBinaryType, std::string>(&this->ctx_, fixed_size_binary(5), {}, {},\n+                                               {\"bbbbb\", \"\", \"bbbbb\", \"aaaaa\", \"ccccc\"},\n+                                               {true, false, true, true, true}, {}, {});\n+\n+  // Empty right array\n+  CheckMatch<FixedSizeBinaryType, std::string>(\n+      &this->ctx_, fixed_size_binary(5), {\"bbbbb\", \"\", \"bbbbb\", \"aaaaa\", \"ccccc\"},\n+      {true, false, true, true, true}, {}, {}, {0, 0, 0, 0, 0},\n+      {false, false, false, false, false});\n+\n+  // Empty arrays\n+  CheckMatch<FixedSizeBinaryType, std::string>(&this->ctx_, fixed_size_binary(0), {}, {},\n+                                               {}, {}, {}, {});\n+}\n+\n+TEST_F(TestMatchKernel, MatchDecimal) {\n+  std::vector<Decimal128> input{12, 12, 11, 12};\n+  std::vector<Decimal128> member_set{12, 12, 11, 12};\n+  std::vector<int32_t> expected{0, 1, 2, 0};\n+\n+  CheckMatch<Decimal128Type, Decimal128>(&this->ctx_, decimal(2, 0), input,\n+                                         {true, false, true, true}, member_set,\n+                                         {true, false, true, true}, expected, {});\n+}\n+\n+TEST_F(TestMatchKernel, MatchChunkedArrayInvoke) {\n+  std::vector<std::string> values1 = {\"foo\", \"bar\", \"foo\"};\n+  std::vector<std::string> values2 = {\"bar\", \"baz\", \"quuux\", \"foo\"};\n+  std::vector<std::string> values3 = {\"foo\", \"bar\", \"foo\"};\n+  std::vector<std::string> values4 = {\"bar\", \"baz\", \"barr\", \"foo\"};\n+\n+  auto type = utf8();\n+  auto a1 = _MakeArray<StringType, std::string>(type, values1, {});\n+  auto a2 = _MakeArray<StringType, std::string>(type, values2, {true, true, true, false});\n+  auto a3 = _MakeArray<StringType, std::string>(type, values3, {});\n+  auto a4 = _MakeArray<StringType, std::string>(type, values4, {});\n+\n+  ArrayVector array1 = {a1, a2};\n+  auto carr = std::make_shared<ChunkedArray>(array1);\n+  ArrayVector array2 = {a3, a4};\n+  auto member_set = std::make_shared<ChunkedArray>(array2);\n+\n+  auto i1 = _MakeArray<Int32Type, int32_t>(int32(), {0, 1, 0}, {});\n+  auto i2 =\n+      _MakeArray<Int32Type, int32_t>(int32(), {1, 2, 2, 2}, {true, true, false, false});\n+\n+  ArrayVector expected = {i1, i2};\n+  auto expected_carr = std::make_shared<ChunkedArray>(expected);\n+\n+  Datum encoded_out;\n+  ASSERT_OK(Match(&this->ctx_, carr, member_set, &encoded_out));\n+  ASSERT_EQ(Datum::CHUNKED_ARRAY, encoded_out.kind());\n+\n+  AssertChunkedEqual(*expected_carr, *encoded_out.chunked_array());\n+}\n+\n \n Review comment:\n   Please add tests against larger, randomly generated inputs (at least for the basic numeric types).\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T15:41:18.399+0000",
                    "updated": "2019-11-13T15:41:18.399+0000",
                    "started": "2019-11-13T15:41:18.399+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342675",
                    "issueId": "13103397"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/worklog/342676",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5665: ARROW-1560: [C++] Kernel implementations for \"match\" function\nURL: https://github.com/apache/arrow/pull/5665#discussion_r345830868\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/match.cc\n ##########\n @@ -0,0 +1,317 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/match.h\"\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <cstring>\n+#include <memory>\n+#include <sstream>\n+#include <string>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/array/dict_internal.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/util_internal.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit_util.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/hashing.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+using internal::DictionaryTraits;\n+using internal::HashTraits;\n+\n+namespace compute {\n+\n+class MatchKernelImpl : public UnaryKernel {\n+  virtual Status Compute(FunctionContext* ctx, const Datum& left, Datum* out) = 0;\n+\n+ public:\n+  // \\brief Check if value in both arrays or not and returns integer values/null\n+  Status Call(FunctionContext* ctx, const Datum& left, Datum* out) override {\n+    DCHECK_EQ(Datum::ARRAY, left.kind());\n+    RETURN_NOT_OK(Compute(ctx, left, out));\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<DataType> out_type() const override { return int32(); }\n+\n+  virtual Status ConstructRight(FunctionContext* ctx, const Datum& right) = 0;\n+};\n+\n+// ----------------------------------------------------------------------\n+// Using a visitor create a memo_table_ for the right array\n+// TODO: Implement for small lists\n+\n+template <typename T, typename Scalar>\n+struct MatchMemoTableRight {\n+  Status VisitNull() {\n+    memo_table_->GetOrInsertNull();\n+    return Status::OK();\n+  }\n+\n+  Status VisitValue(const Scalar& value) {\n+    memo_table_->GetOrInsert(value);\n+    return Status::OK();\n+  }\n+\n+  Status Reset(MemoryPool* pool) {\n+    memo_table_.reset(new MemoTable(pool, 0));\n+    return Status::OK();\n+  }\n+\n+  Status Append(FunctionContext* ctx, const Datum& right) {\n+    const ArrayData& right_data = *right.array();\n+    return ArrayDataVisitor<T>::Visit(right_data, this);\n+  }\n+\n+  using MemoTable = typename HashTraits<T>::MemoTableType;\n+  std::unique_ptr<MemoTable> memo_table_;\n+};\n+\n+// ----------------------------------------------------------------------\n+\n+template <typename Type, typename Scalar>\n+class MatchKernel : public MatchKernelImpl {\n+ public:\n+  MatchKernel(const std::shared_ptr<DataType>& type, MemoryPool* pool)\n+      : type_(type), pool_(pool) {}\n+\n+  // \\brief if left array has a null and right array has null,\n+  // return the index, else null\n+  Status VisitNull() {\n+    if (memo_table_->GetNull() != -1) {\n+      indices_builder_.UnsafeAppend(memo_table_->GetNull());\n+    } else {\n+      indices_builder_.UnsafeAppendNull();\n+    }\n+    return Status::OK();\n+  }\n+\n+  // \\brief Iterate over the left array using another visitor.\n+  // In VisitValue, use the memo_table_ (for right array) and check if value\n+  // in left array is in the memo_table_. Return the index if condition satisfied,\n+  // else null.\n+  Status VisitValue(const Scalar& value) {\n+    if (memo_table_->Get(value) != -1) {\n+      indices_builder_.UnsafeAppend(memo_table_->Get(value));\n+    } else {\n+      indices_builder_.UnsafeAppendNull();\n+    }\n+    return Status::OK();\n+  }\n+\n+  Status Compute(FunctionContext* ctx, const Datum& left, Datum* out) override {\n+    const ArrayData& left_data = *left.array();\n+\n+    indices_builder_.Reset();\n+    RETURN_NOT_OK(indices_builder_.Reserve(left_data.length));\n+\n+    RETURN_NOT_OK(ArrayDataVisitor<Type>::Visit(left_data, this));\n+\n+    RETURN_NOT_OK(indices_builder_.FinishInternal(&output));\n+    out->value = std::move(output);\n+    return Status::OK();\n+  }\n+\n+  Status ConstructRight(FunctionContext* ctx, const Datum& right) override {\n+    MatchMemoTableRight<Type, Scalar> func;\n+    RETURN_NOT_OK(func.Reset(pool_));\n+\n+    if (right.kind() == Datum::ARRAY) {\n+      RETURN_NOT_OK(func.Append(ctx, right));\n+    } else if (right.kind() == Datum::CHUNKED_ARRAY) {\n+      const ChunkedArray& right_array = *right.chunked_array();\n+      for (int i = 0; i < right_array.num_chunks(); i++) {\n+        RETURN_NOT_OK(func.Append(ctx, right_array.chunk(i)));\n+      }\n+    } else {\n+      return Status::Invalid(\"Input Datum was not array-like\");\n+    }\n+\n+    memo_table_ = std::move(func.memo_table_);\n+    return Status::OK();\n+  }\n+\n+ protected:\n+  using MemoTable = typename HashTraits<Type>::MemoTableType;\n+  std::unique_ptr<MemoTable> memo_table_;\n+  std::shared_ptr<DataType> type_;\n+  MemoryPool* pool_;\n+\n+ private:\n+  std::shared_ptr<ArrayData> output;\n+  Int32Builder indices_builder_;\n+};\n+\n+// ----------------------------------------------------------------------\n+// (NullType has a separate implementation)\n+\n+class NullMatchKernel : public MatchKernelImpl {\n+ public:\n+  NullMatchKernel(const std::shared_ptr<DataType>& type, MemoryPool* pool) {}\n+\n+  // \\brief When array is NullType, based on the null count for the arrays,\n+  // return index, else nulls\n+  Status Compute(FunctionContext* ctx, const Datum& left, Datum* out) override {\n+    const ArrayData& left_data = *left.array();\n+    left_null_count = left_data.GetNullCount();\n+    indices_builder_.Reset();\n+    RETURN_NOT_OK(indices_builder_.Reserve(left_data.length));\n+\n+    if (left_null_count != 0 && right_null_count == 0) {\n+      for (int64_t i = 0; i < left_data.length; ++i) {\n+        indices_builder_.UnsafeAppendNull();\n \n Review comment:\n   ```suggestion\r\n           indices_builder_.AppendNulls(left_data.length);\r\n   ```\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T15:41:18.442+0000",
                    "updated": "2019-11-13T15:41:18.442+0000",
                    "started": "2019-11-13T15:41:18.442+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342676",
                    "issueId": "13103397"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/worklog/342677",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "bkietz commented on pull request #5665: ARROW-1560: [C++] Kernel implementations for \"match\" function\nURL: https://github.com/apache/arrow/pull/5665#discussion_r345830217\n \n \n\n ##########\n File path: cpp/src/arrow/compute/kernels/match.cc\n ##########\n @@ -0,0 +1,317 @@\n+// Licensed to the Apache Software Foundation (ASF) under one\n+// or more contributor license agreements.  See the NOTICE file\n+// distributed with this work for additional information\n+// regarding copyright ownership.  The ASF licenses this file\n+// to you under the Apache License, Version 2.0 (the\n+// \"License\"); you may not use this file except in compliance\n+// with the License.  You may obtain a copy of the License at\n+//\n+//   http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+#include \"arrow/compute/kernels/match.h\"\n+\n+#include <algorithm>\n+#include <cstdint>\n+#include <cstring>\n+#include <memory>\n+#include <sstream>\n+#include <string>\n+#include <type_traits>\n+#include <utility>\n+#include <vector>\n+\n+#include \"arrow/array.h\"\n+#include \"arrow/array/dict_internal.h\"\n+#include \"arrow/buffer.h\"\n+#include \"arrow/builder.h\"\n+#include \"arrow/compute/context.h\"\n+#include \"arrow/compute/kernel.h\"\n+#include \"arrow/compute/kernels/util_internal.h\"\n+#include \"arrow/memory_pool.h\"\n+#include \"arrow/type.h\"\n+#include \"arrow/type_traits.h\"\n+#include \"arrow/util/bit_util.h\"\n+#include \"arrow/util/checked_cast.h\"\n+#include \"arrow/util/hashing.h\"\n+#include \"arrow/util/logging.h\"\n+#include \"arrow/util/macros.h\"\n+#include \"arrow/util/string_view.h\"\n+#include \"arrow/visitor_inline.h\"\n+\n+namespace arrow {\n+\n+using internal::checked_cast;\n+using internal::DictionaryTraits;\n+using internal::HashTraits;\n+\n+namespace compute {\n+\n+class MatchKernelImpl : public UnaryKernel {\n+  virtual Status Compute(FunctionContext* ctx, const Datum& left, Datum* out) = 0;\n+\n+ public:\n+  // \\brief Check if value in both arrays or not and returns integer values/null\n+  Status Call(FunctionContext* ctx, const Datum& left, Datum* out) override {\n+    DCHECK_EQ(Datum::ARRAY, left.kind());\n+    RETURN_NOT_OK(Compute(ctx, left, out));\n+    return Status::OK();\n+  }\n+\n+  std::shared_ptr<DataType> out_type() const override { return int32(); }\n+\n+  virtual Status ConstructRight(FunctionContext* ctx, const Datum& right) = 0;\n+};\n+\n+// ----------------------------------------------------------------------\n+// Using a visitor create a memo_table_ for the right array\n+// TODO: Implement for small lists\n+\n+template <typename T, typename Scalar>\n \n Review comment:\n   Match's implementation appears to share a lot of code with IsIn. Could you consolidate them by putting shared classes like MemoTableRight into match_internal.h?\n \n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2019-11-13T15:41:18.446+0000",
                    "updated": "2019-11-13T15:41:18.446+0000",
                    "started": "2019-11-13T15:41:18.445+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "342677",
                    "issueId": "13103397"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 14400,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@308f8bfc[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@134a8663[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@477a1e3e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@44f12c[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@29981d96[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@17e644fc[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@fa33d0[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@27106f72[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e8db2ab[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@6be9ce22[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3a5c143c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@1e9397fa[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 14400,
        "customfield_12312520": null,
        "customfield_12312521": "Thu Mar 12 21:54:08 UTC 2020",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2020-03-12T21:54:08.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-1560/watchers",
            "watchCount": 7,
            "isWatching": false
        },
        "created": "2017-09-19T21:51:44.000+0000",
        "updated": "2020-03-12T21:54:08.000+0000",
        "timeoriginalestimate": null,
        "description": "Match computes a position index array from an array values into a set of categories\n\n{code}\nmatch(['a', 'b', 'a', null, 'b', 'a', 'b'], ['b', 'a'])\n\nreturn [1, 0, 1, null, 0, 1, 0]\n{code}",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "4h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 14400
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[C++] Kernel implementations for \"match\" function",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/comment/16616405",
                    "id": "16616405",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=atris",
                        "name": "atris",
                        "key": "atris",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Atri Sharma",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Can someone please assign this to me?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=atris",
                        "name": "atris",
                        "key": "atris",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Atri Sharma",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-09-15T17:19:55.091+0000",
                    "updated": "2018-09-15T17:19:55.091+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/comment/16616411",
                    "id": "16616411",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "[~atris] Assigned you",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2018-09-15T17:35:24.570+0000",
                    "updated": "2018-09-15T17:35:24.570+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/comment/16616710",
                    "id": "16616710",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=atris",
                        "name": "atris",
                        "key": "atris",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Atri Sharma",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Thanks!",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=atris",
                        "name": "atris",
                        "key": "atris",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Atri Sharma",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2018-09-16T13:08:30.320+0000",
                    "updated": "2018-09-16T13:08:30.320+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/comment/16748453",
                    "id": "16748453",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Is the intended output an array of the smallest numeric type capable of holding the index (or some fixed size)?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-01-22T07:27:27.448+0000",
                    "updated": "2019-01-22T07:27:27.448+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/comment/16748530",
                    "id": "16748530",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "body": "[~emkornfield@gmail.com] This could also be an array of {{int64}}\u00a0for simplicity/as a start.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=uwe",
                        "name": "uwe",
                        "key": "xhochy",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=xhochy&avatarId=30652",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=xhochy&avatarId=30652",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=xhochy&avatarId=30652",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=xhochy&avatarId=30652"
                        },
                        "displayName": "Uwe Korn",
                        "active": true,
                        "timeZone": "Europe/Berlin"
                    },
                    "created": "2019-01-22T09:22:04.785+0000",
                    "updated": "2019-01-22T09:22:04.785+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/comment/16748849",
                    "id": "16748849",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "What should it return when it doesn't match?",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=fsaintjacques",
                        "name": "fsaintjacques",
                        "key": "fsaintjacques",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=fsaintjacques&avatarId=37276",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=fsaintjacques&avatarId=37276",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=fsaintjacques&avatarId=37276",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=fsaintjacques&avatarId=37276"
                        },
                        "displayName": "Francois Saint-Jacques",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-01-22T15:46:38.152+0000",
                    "updated": "2019-01-22T15:46:38.152+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/comment/16748852",
                    "id": "16748852",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "R returns null by default\r\n\r\n{code}\r\n> match(c(1, 2, 3), c(2, 3, 4))\r\n[1] NA  1  2\r\n{code}\r\n\r\nIt's configurable though\r\n\r\n{code}\r\n> match(c(1, 2, 3), c(2, 3, 4), nomatch=-1)\r\n[1] -1  1  2\r\n{code}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-01-22T15:48:42.257+0000",
                    "updated": "2019-01-22T15:48:42.257+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/comment/16772409",
                    "id": "16772409",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=preeti_suman",
                        "name": "preeti_suman",
                        "key": "preeti_suman",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Preeti Suman",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "body": "Can someone assign this to me?\u00a0",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=preeti_suman",
                        "name": "preeti_suman",
                        "key": "preeti_suman",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Preeti Suman",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "created": "2019-02-19T22:47:46.604+0000",
                    "updated": "2019-02-19T22:47:46.604+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/comment/16772439",
                    "id": "16772439",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Just made you a Contributor and assigned the issue to you.\r\n\r\nCould you describe your implementation approach before you go too far down the rabbit hole? We want to make use of the existing hashing machinery that we are using for the {{Unique}} and {{DictionaryEncode}} functions",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-02-19T23:28:49.062+0000",
                    "updated": "2019-02-19T23:28:49.062+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/comment/16772447",
                    "id": "16772447",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Should there be two implementations?  One for small lists (linear scan) and\none with hashtable ?\n\n\n",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=emkornfield%40gmail.com",
                        "name": "emkornfield@gmail.com",
                        "key": "emkornfield@gmail.com",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Micah Kornfield",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2019-02-19T23:54:00.051+0000",
                    "updated": "2019-02-19T23:54:00.051+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/comment/16791243",
                    "id": "16791243",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Yes that sounds right to me",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-03-13T02:50:28.348+0000",
                    "updated": "2019-03-13T02:50:28.348+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/comment/16809983",
                    "id": "16809983",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=preeti_suman",
                        "name": "preeti_suman",
                        "key": "preeti_suman",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Preeti Suman",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "body": "For match (and isin) compute kernel , in left and right array, if there are nulls in the input,\r\n\r\na) Do we need to match null with null or ignore null completely?\r\n\r\n\u00a0 \u00a0 Example:\r\n\r\n\u00a0 \u00a0 match(['a', 'b', null], ['a', 'c', null])\r\n\r\n\u00a0 \u00a0 Expected output [0, null, 2]\r\n\r\nb) If we need to compare, what will be the suggested way to traverse nulls if we use the VisitValue and VisitNull (using\u00a0[ArrayDataVisitor|https://github.com/apache/arrow/blob/master/cpp/src/arrow/visitor_inline.h]{color:#000000}) for the array?{color}",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=preeti_suman",
                        "name": "preeti_suman",
                        "key": "preeti_suman",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "Preeti Suman",
                        "active": true,
                        "timeZone": "America/Chicago"
                    },
                    "created": "2019-04-04T15:33:37.941+0000",
                    "updated": "2019-04-04T15:33:37.941+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/comment/16810185",
                    "id": "16810185",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "R does match NA (null-ish values) so that should probably be the default\r\n\r\n{code}\r\n> match(c(NA, NA, NA, NA), NA)\r\n[1] 1 1 1 1\r\n{code}\r\n\r\nOn the second question, I'm not sure. We aren't accounting for nulls in other hash-related functions like ValueCounts. See ARROW-4787. When you populate the hash table with the right-hand-side values, you can set a flag whether null was present or not (and at what position) and then use this when VisitNull is invoked (if using ArrayDataVisitor turns out to be the most efficient method for this, which I'm also not sure about)",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=wesm",
                        "name": "wesm",
                        "key": "wesmckinn",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=wesmckinn&avatarId=29931",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=wesmckinn&avatarId=29931",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=wesmckinn&avatarId=29931",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=wesmckinn&avatarId=29931"
                        },
                        "displayName": "Wes McKinney",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2019-04-04T18:44:24.951+0000",
                    "updated": "2019-04-04T18:44:24.951+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13103397/comment/17058263",
                    "id": "17058263",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Issue resolved by pull request 5665\n[https://github.com/apache/arrow/pull/5665]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bkietz",
                        "name": "bkietz",
                        "key": "bkietz",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bkietz&avatarId=37277",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bkietz&avatarId=37277",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bkietz&avatarId=37277",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bkietz&avatarId=37277"
                        },
                        "displayName": "Ben Kietzman",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2020-03-12T21:54:08.536+0000",
                    "updated": "2020-03-12T21:54:08.536+0000"
                }
            ],
            "maxResults": 14,
            "total": 14,
            "startAt": 0
        },
        "customfield_12311820": "0|i3k9gn:",
        "customfield_12314139": null
    }
}