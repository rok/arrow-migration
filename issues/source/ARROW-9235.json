{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13313700",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313700",
    "key": "ARROW-9235",
    "fields": {
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12351051",
                "id": "12351051",
                "description": "",
                "name": "8.0.0",
                "archived": false,
                "released": true,
                "releaseDate": "2022-05-06"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [
            {
                "id": "12643159",
                "self": "https://issues.apache.org/jira/rest/api/2/issueLink/12643159",
                "type": {
                    "id": "12310000",
                    "name": "Duplicate",
                    "inward": "is duplicated by",
                    "outward": "duplicates",
                    "self": "https://issues.apache.org/jira/rest/api/2/issueLinkType/12310000"
                },
                "inwardIssue": {
                    "id": "13214529",
                    "key": "ARROW-4512",
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13214529",
                    "fields": {
                        "summary": "[R] Stream reader/writer API that takes socket stream",
                        "status": {
                            "self": "https://issues.apache.org/jira/rest/api/2/status/6",
                            "description": "The issue is considered finished, the resolution is correct. Issues which are not closed can be reopened.",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/closed.png",
                            "name": "Closed",
                            "id": "6",
                            "statusCategory": {
                                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                                "id": 3,
                                "key": "done",
                                "colorName": "green",
                                "name": "Done"
                            }
                        },
                        "priority": {
                            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                            "name": "Major",
                            "id": "3"
                        },
                        "issuetype": {
                            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                            "id": "4",
                            "description": "An improvement or enhancement to an existing feature or task.",
                            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                            "name": "Improvement",
                            "subtask": false,
                            "avatarId": 21140
                        }
                    }
                }
            }
        ],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
            "name": "paleolimbot",
            "key": "paleolimbot",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
            },
            "displayName": "Dewey Dunnington",
            "active": true,
            "timeZone": "America/Halifax"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12333008",
                "id": "12333008",
                "name": "R"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=msquinn2",
            "name": "msquinn2",
            "key": "msquinn2",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34060",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34060",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34060",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34060"
            },
            "displayName": "Michael Quinn",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=msquinn2",
            "name": "msquinn2",
            "key": "msquinn2",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34060",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34060",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34060",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34060"
            },
            "displayName": "Michael Quinn",
            "active": true,
            "timeZone": "Etc/UTC"
        },
        "aggregateprogress": {
            "progress": 22200,
            "total": 22200,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 22200,
            "total": 22200,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9235/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 37,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313700/worklog/719535",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot opened a new pull request #12323:\nURL: https://github.com/apache/arrow/pull/12323\n\n\n   This is a PR to support arbitrary R \"connection\" objects as Input and Output streams. In particular, this adds support for sockets (), URLs, and some other IO operations that are implemented as R connections (e.g., in the [archive](https://github.com/r-lib/archive#archive) package). The gist of it is that you should be able to do this:\r\n   \r\n   ``` r\r\n   # remotes::install_github(\"paleolimbot/arrow/r@r-connections\")\r\n   library(arrow, warn.conflicts = FALSE)\r\n   \r\n   addr <- \"https://github.com/apache/arrow/raw/master/r/inst/v0.7.1.parquet\"\r\n   \r\n   stream <- arrow:::make_readable_file(addr)\r\n   rawToChar(as.raw(stream$Read(4)))\r\n   #> [1] \"PAR1\"\r\n   stream$close()\r\n   \r\n   stream <- arrow:::make_readable_file(url(addr, open = \"rb\"))\r\n   rawToChar(as.raw(stream$Read(4)))\r\n   #> [1] \"PAR1\"\r\n   stream$close()\r\n   ```\r\n   \r\n   There are two serious issues that prevent this PR from being useful. First, it uses functions that R considers \"non-API\" functions from the C API.\r\n   \r\n       > checking compiled code ... NOTE\r\n         File \u2018arrow/libs/arrow.so\u2019:\r\n           Found non-API calls to R: \u2018R_GetConnection\u2019, \u2018R_ReadConnection\u2019,\r\n             \u2018R_WriteConnection\u2019\r\n         \r\n         Compiled code should not call non-API entry points in R.\r\n   \r\n   We can get around this by calling back into R (in the same way this PR implements `Tell()` and `Close()`). We could also go all out and implement the other half (exposing `InputStream`/`OutputStream`s as R connections) and ask for an exemption (at least one R package, curl, does this). The archive package seems to expose connections without a NOTE on the CRAN check page, so perhaps there is also a workaround.\r\n   \r\n   Second, we get a crash when passing the input stream to most functions. I think this is because the `Read()` method is getting called from another thread but it also could be an error in my implementation. If the issue is threading, we would have to arrange a way to queue jobs for the R main thread (e.g., how the [later](https://github.com/r-lib/later#background-tasks) package does it) and a way to ping it occasionally to fetch the results. This is complicated but might be useful for other reasons (supporting evaluation of R functions in more places). It also might be more work than it's worth.\r\n   \r\n   ``` r\r\n   # remotes::install_github(\"paleolimbot/arrow/r@r-connections\")\r\n   library(arrow, warn.conflicts = FALSE)\r\n   \r\n   addr <- \"https://github.com/apache/arrow/raw/master/r/inst/v0.7.1.parquet\"\r\n   read_parquet(addr)\r\n   ```\r\n   \r\n   ```\r\n   *** caught segfault ***\r\n   address 0x28, cause 'invalid permissions'\r\n   \r\n   Traceback:\r\n    1: parquet___arrow___FileReader__OpenFile(file, props)\r\n   ```\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-02T17:49:28.961+0000",
                    "updated": "2022-02-02T17:49:28.961+0000",
                    "started": "2022-02-02T17:49:28.961+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "719535",
                    "issueId": "13313700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313700/worklog/719536",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "github-actions[bot] commented on pull request #12323:\nURL: https://github.com/apache/arrow/pull/12323#issuecomment-1028195927\n\n\n\n\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-02T17:49:41.711+0000",
                    "updated": "2022-02-02T17:49:41.711+0000",
                    "started": "2022-02-02T17:49:41.710+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "719536",
                    "issueId": "13313700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313700/worklog/719795",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #12323:\nURL: https://github.com/apache/arrow/pull/12323#issuecomment-1028491499\n\n\n   Without having looked closely at the code, I suspect you're right about threading. IIUC R's memory allocation is not thread safe, so we can't call R functions that allocate in R with multithreading. In the conversion code, @romainfrancois did something clever to distinguish the things that could run in parallel from the things that could not. Another option to explore here, perhaps to confirm the issue, would be to do all of the things to disable multithreading (thread pools to 1, arrow.use_threads = FALSE) and see if that makes the crash go away.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-03T00:38:50.219+0000",
                    "updated": "2022-02-03T00:38:50.219+0000",
                    "started": "2022-02-03T00:38:50.219+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "719795",
                    "issueId": "13313700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313700/worklog/722283",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on pull request #12323:\nURL: https://github.com/apache/arrow/pull/12323#issuecomment-1031882761\n\n\n   The Parquet error was, fortunately, not a concurrency issue, but an assumption that the input would be a `RandomAccessFile` (the tests indicate that this was also a problem for the `FeatherReader` in the past). I've added a test so that this case fails in the same way:\r\n   \r\n   ``` r\r\n   # remotes::install_github(\"paleolimbot/arrow/r@r-connections\")\r\n   library(arrow, warn.conflicts = FALSE)\r\n   addr <- \"https://github.com/apache/arrow/raw/master/r/inst/v0.7.1.parquet\"\r\n   read_parquet(addr)\r\n   #> Error: file must be a \"RandomAccessFile\"\r\n   ```\r\n   \r\n   I've also removed references to the R_ext/Connections.h header that was causing the CMD check issue...no need to poke that bear yet.\r\n   \r\n   Tomorrow I'll implement `RandomAccessFile`, which should theoretically be possible for `file()` connections and check the other readers for segfaults/threading issues.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-07T20:20:54.824+0000",
                    "updated": "2022-02-07T20:20:54.824+0000",
                    "started": "2022-02-07T20:20:54.824+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "722283",
                    "issueId": "13313700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313700/worklog/727149",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on pull request #12323:\nURL: https://github.com/apache/arrow/pull/12323#issuecomment-1040523056\n\n\n   OK, I think this is ready for review.\r\n   \r\n   There is a threading issue that cause `read_feather()` and `read_csv_arrow()` to fail, although I *think* I implemented this such that there will not be any calls into R from another thread (we get an `IOError` instead). There was a point where I had both of those working on MacOS and Windows, but there were crashes on Linux (and in all cases R was getting called from another thread, so it *might* have crashed). Interestingly, `read_parquet()` seems to be fine, but maybe this is only because it's a very small file. I am well out of my depth in dealing with concurrency and perhaps I am missing how we have dealt with this in other parts of the R package.\r\n   \r\n   In general, all writers work and any readers work that don't call the stream's `Read()` method from another thread. One of the original tickets for this requested support to stream tables over a `socketConnection()` (ARROW-4512), which should work with this PR in both directions. The other ticket requested support for Parquet reading and writing, which also seems to work.\r\n   \r\n   Reprex:\r\n   \r\n   ``` r\r\n   # remotes::install_github(\"paleolimbot/arrow/r@r-connections\")\r\n   library(arrow, warn.conflicts = FALSE)\r\n   tbl <- tibble::tibble(x = 1:5)\r\n   \r\n   # all the writers I know about just work\r\n   tf_parquet <- tempfile()\r\n   write_parquet(tbl, file(tf_parquet))\r\n   \r\n   tf_ipc <- tempfile()\r\n   write_ipc_stream(tbl, file(tf_ipc))\r\n   \r\n   tf_feather <- tempfile()\r\n   write_feather(tbl, file(tf_feather))\r\n   \r\n   tf_csv <- tempfile()\r\n   write_csv_arrow(tbl, file(tf_csv))\r\n   \r\n   # some readers work...\r\n   read_parquet(file(tf_parquet))\r\n   #> # A tibble: 5 \u00d7 1\r\n   #>       x\r\n   #>   <int>\r\n   #> 1     1\r\n   #> 2     2\r\n   #> 3     3\r\n   #> 4     4\r\n   #> 5     5\r\n   read_ipc_stream(file(tf_ipc))\r\n   #> # A tibble: 5 \u00d7 1\r\n   #>       x\r\n   #>   <int>\r\n   #> 1     1\r\n   #> 2     2\r\n   #> 3     3\r\n   #> 4     4\r\n   #> 5     5\r\n   \r\n   # ...except the ones that read from other threads\r\n   read_feather(file(tf_feather))\r\n   #> Error: IOError: Attempt to call into R from a non-R thread\r\n   #> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/io/interfaces.cc:157  Seek(position)\r\n   #> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/ipc/reader.cc:1233  ReadFooter()\r\n   #> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/ipc/reader.cc:1720  result->Open(file, footer_offset, options)\r\n   #> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/ipc/feather.cc:713  RecordBatchFileReader::Open(source_, options_)\r\n   #> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/ipc/feather.cc:793  result->Open(source, options)\r\n   read_csv_arrow(file(tf_parquet))\r\n   #> Error in `handle_csv_read_error()` at r/R/csv.R:198:6:\r\n   #> ! IOError: Attempt to call into R from a non-R thread\r\n   #> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/io/interfaces.cc:86  stream_->Read(block_size_)\r\n   \r\n   # ...even with use_threads = FALSE\r\n   options(arrow.use_threads = FALSE)\r\n   read_feather(file(tf_feather))\r\n   #> Error: IOError: Attempt to call into R from a non-R thread\r\n   #> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/io/interfaces.cc:157  Seek(position)\r\n   #> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/ipc/reader.cc:1233  ReadFooter()\r\n   #> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/ipc/reader.cc:1720  result->Open(file, footer_offset, options)\r\n   #> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/ipc/feather.cc:713  RecordBatchFileReader::Open(source_, options_)\r\n   #> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/ipc/feather.cc:793  result->Open(source, options)\r\n   read_csv_arrow(file(tf_parquet))\r\n   #> Error in `handle_csv_read_error()` at r/R/csv.R:198:6:\r\n   #> ! IOError: Attempt to call into R from a non-R thread\r\n   #> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/io/interfaces.cc:86  stream_->Read(block_size_)\r\n   #> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/util/iterator.h:270  it_.Next()\r\n   #> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/csv/reader.cc:996  buffer_iterator_.Next()\r\n   ```\r\n   \r\n   <sup>Created on 2022-02-15 by the [reprex package](https://reprex.tidyverse.org) (v2.0.1)</sup>\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-15T16:55:59.256+0000",
                    "updated": "2022-02-15T16:55:59.256+0000",
                    "started": "2022-02-15T16:55:59.255+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "727149",
                    "issueId": "13313700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313700/worklog/727640",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on pull request #12323:\nURL: https://github.com/apache/arrow/pull/12323#issuecomment-1040523056\n\n\n   OK, I think this is ready for review.\r\n   \r\n   There is a threading issue that cause `read_feather()` and `read_csv_arrow()` to fail, although I *think* I implemented this such that there will not be any calls into R from another thread (we get an `IOError` instead). There was a point where I had both of those working on MacOS and Windows, but there were crashes on Linux (and in all cases R was getting called from another thread, so it *might* have crashed). Interestingly, `read_parquet()` seems to be fine, but maybe this is only because it's a very small file. I am well out of my depth in dealing with concurrency and perhaps I am missing how we have dealt with this in other parts of the R package.\r\n   \r\n   In general, all writers work and any readers work that don't call the stream's `Read()` method from another thread. One of the original tickets for this requested support to stream tables over a `socketConnection()` (ARROW-4512), which should work with this PR in both directions. The other ticket requested support for Parquet reading and writing, which also seems to work.\r\n   \r\n   Reprex:\r\n   \r\n   ``` r\r\n   # remotes::install_github(\"paleolimbot/arrow/r@r-connections\")\r\n   library(arrow, warn.conflicts = FALSE)\r\n   tbl <- tibble::tibble(x = 1:5)\r\n   \r\n   # all the writers I know about just work\r\n   tf_parquet <- tempfile()\r\n   write_parquet(tbl, file(tf_parquet))\r\n   \r\n   tf_ipc <- tempfile()\r\n   write_ipc_stream(tbl, file(tf_ipc))\r\n   \r\n   tf_feather <- tempfile()\r\n   write_feather(tbl, file(tf_feather))\r\n   \r\n   tf_csv <- tempfile()\r\n   write_csv_arrow(tbl, file(tf_csv))\r\n   \r\n   # some readers work...\r\n   read_parquet(file(tf_parquet))\r\n   #> # A tibble: 5 \u00d7 1\r\n   #>       x\r\n   #>   <int>\r\n   #> 1     1\r\n   #> 2     2\r\n   #> 3     3\r\n   #> 4     4\r\n   #> 5     5\r\n   read_ipc_stream(file(tf_ipc))\r\n   #> # A tibble: 5 \u00d7 1\r\n   #>       x\r\n   #>   <int>\r\n   #> 1     1\r\n   #> 2     2\r\n   #> 3     3\r\n   #> 4     4\r\n   #> 5     5\r\n   \r\n   # ...except the ones that read from other threads\r\n   read_feather(file(tf_feather))\r\n   #> Error: IOError: Attempt to call into R from a non-R thread\r\n   #> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/io/interfaces.cc:157  Seek(position)\r\n   #> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/ipc/reader.cc:1233  ReadFooter()\r\n   #> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/ipc/reader.cc:1720  result->Open(file, footer_offset, options)\r\n   #> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/ipc/feather.cc:713  RecordBatchFileReader::Open(source_, options_)\r\n   #> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/ipc/feather.cc:793  result->Open(source, options)\r\n   read_csv_arrow(file(tf_parquet))\r\n   #> Error in `handle_csv_read_error()` at r/R/csv.R:198:6:\r\n   #> ! IOError: Attempt to call into R from a non-R thread\r\n   #> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/io/interfaces.cc:86  stream_->Read(block_size_)\r\n   \r\n   # ...even with use_threads = FALSE\r\n   options(arrow.use_threads = FALSE)\r\n   read_feather(file(tf_feather))\r\n   #> Error: IOError: Attempt to call into R from a non-R thread\r\n   #> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/io/interfaces.cc:157  Seek(position)\r\n   #> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/ipc/reader.cc:1233  ReadFooter()\r\n   #> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/ipc/reader.cc:1720  result->Open(file, footer_offset, options)\r\n   #> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/ipc/feather.cc:713  RecordBatchFileReader::Open(source_, options_)\r\n   #> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/ipc/feather.cc:793  result->Open(source, options)\r\n   read_csv_arrow(file(tf_parquet))\r\n   #> Error in `handle_csv_read_error()` at r/R/csv.R:198:6:\r\n   #> ! IOError: Attempt to call into R from a non-R thread\r\n   #> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/io/interfaces.cc:86  stream_->Read(block_size_)\r\n   #> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/util/iterator.h:270  it_.Next()\r\n   #> /Users/deweydunnington/Desktop/rscratch/arrow/cpp/src/arrow/csv/reader.cc:996  buffer_iterator_.Next()\r\n   ```\r\n   \r\n   <sup>Created on 2022-02-15 by the [reprex package](https://reprex.tidyverse.org) (v2.0.1)</sup>\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-15T19:07:07.431+0000",
                    "updated": "2022-02-15T19:07:07.431+0000",
                    "started": "2022-02-15T19:07:07.431+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "727640",
                    "issueId": "13313700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313700/worklog/731210",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on pull request #12323:\nURL: https://github.com/apache/arrow/pull/12323#issuecomment-1048259048\n\n\n   @westonpace can you take a look at this threading issue? I *believe* the constraint is that we can't call any R function that will allocate memory from other threads, so it would not surprise me that the Read methods would have to be called single-threaded. But surely that's something we should have the ability to control.\r\n   \r\n   cc @romainfrancois since I know you've fought with this in the past.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-22T22:09:17.724+0000",
                    "updated": "2022-02-22T22:09:17.724+0000",
                    "started": "2022-02-22T22:09:17.723+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "731210",
                    "issueId": "13313700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313700/worklog/734148",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on pull request #12323:\nURL: https://github.com/apache/arrow/pull/12323#issuecomment-1054610919\n\n\n   Just leaving a ping here since I'm back from vacation an am ready to pick this up with some feedback on whether or not what I've done here is a reasonable approach to the concurrency limitations in Arrow (or whether or not anything can be done about the concurrency limitations from the Arrow end of things).\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-28T19:59:08.002+0000",
                    "updated": "2022-02-28T19:59:08.002+0000",
                    "started": "2022-02-28T19:59:08.002+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "734148",
                    "issueId": "13313700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313700/worklog/734228",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on pull request #12323:\nURL: https://github.com/apache/arrow/pull/12323#issuecomment-1054726309\n\n\n   TL;DR: We can solve this, we probably want to solve this, but it will involve some C++ effort.\r\n   \r\n   Sorry for the delay in looking at this.  We certainly have some options here.  This is a great chance to start putting some scaffolding we've laid down to good use.  The fact that the parquet reader works here is actually a fluke that we will someday fix (:laughing:) with [ARROW-14974](https://issues.apache.org/jira/browse/ARROW-14974).\r\n   \r\n   There are two thread pools in Arrow.  The CPU thread pool and the I/O thread pool.  The CPU thread pool has one thread per core and these threads are expected to do lots of heavy CPU work.  The I/O thread pool may have few threads (e.g. if using a hard disk) or it may have many threads (e.g. if using S3) and these threads are expected to spend most of their time in the waiting state.\r\n   \r\n   CPU threads should generally not block for long periods of time.  So when they have to do something slow (like read from disk) they put the task on the I/O thread pool and add a callback on the CPU thread pool to deal with the result.\r\n   \r\n   When use_threads is false we typically interpret that as \"don't use up a bunch of CPU for this task\" and we limit the CPU thread pool.  Ideally we limit it to the calling thread.  In some cases (e.g. execution engine) we limit it to one CPU thread and the calling thread (though I'm working on that as we speak).\r\n   \r\n   What we don't usually do is limit the I/O thread pool in any way.  We have the tooling to do this (basically the queue that you mentioned) but will need to do some work to wire everything up.  We can probably come up with a \"limit all CPU and I/O tasks to the R thread\" solution more easily than a \"use the CPU thread pool for CPU tasks but limit all I/O tasks to the R thread\" but the latter should probably be possible.  It will also be easier to support the whole-table readers & writers initially and then later add support for  streaming APIs.\r\n   \r\n   Also, this will have some performance impact when reading multiple files.  For example, if you were to read a multi-file dataset from curl you would generally want to issue parallel HTTP reads but if we're only allowed to use a single thread for the read then that will not work.  Although, we could probably address that particular performance impact if the underlying technology has support for an asynchronous API (as it seems that R's curl package does) so we can have three thread pools! (:dizzy:)\r\n   \r\n   What's the timing on this?  I'm a little busy at the moment but I should be able to find some time this week to sketch a solution for the read_feather call (which could be adapted for read_csv or I could sketch the solution for read_csv first).\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-02-28T22:32:10.934+0000",
                    "updated": "2022-02-28T22:32:10.934+0000",
                    "started": "2022-02-28T22:32:10.934+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "734228",
                    "issueId": "13313700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313700/worklog/734583",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on pull request #12323:\nURL: https://github.com/apache/arrow/pull/12323#issuecomment-1055461092\n\n\n   Thanks!\r\n   \r\n   > What's the timing on this?\r\n   \r\n   There is no particular rush on `read_feather()` and `read_csv_arrow()` working with R connections. It doesn't have to be solved for this PR, either, although if this PR is merged it would be best to fix before the next CRAN release.\r\n   \r\n   > We can probably come up with a \"limit all CPU and I/O tasks to the R thread\" solution more easily than a \"use the CPU thread pool for CPU tasks but limit all I/O tasks to the R thread\" but the latter should probably be possible.\r\n   \r\n   I'm still wrapping my head around the specifics here, but because they might be related I'll list the \"calling the R thread\" possibilities I've run into recently in case any of them makes one of those options more obvious to pursue.\r\n   \r\n   - This PR, when a user wants to use some Arrow machinery but needs to implement the `InputStream` or `OutputStream` as R functions because for whatever reason the filesystem/input stream type isn't implemented in Arrow C++ or the R bindings\r\n   - A user has a `RecordBatchReader` where calling the get next batch method is an R function. I haven't had time to look into it properly but this crashes every time I've tried to put it into the query engine (works for read_table(), though). Possibly related is a `RecordBatchReader.from_batches()` that was imported from Python via the C interface, which also crashes when put into the query engine (but not read_table()).\r\n   - An extension type implemented in R that has a custom `ExtensionEquals()` method (just starting this in #12467).\r\n   - A compute function that wraps an R function (e.g., for things like geospatial operators whose external dependencies are impractical or impossible to include in the arrow R package)\r\n   \r\n   From the R end, I know there is a way to request the evaluation of something on the main thread from elsewhere; however, there needs to be an event loop on the main thread checking for tasks for that to work. I don't know much about it but I do know it has been used elsewhere for packages like Shiny and plumber that accept HTTP requests and funnel them to R functions.\r\n   \r\n   > Although, we could probably address that particular performance impact if the underlying technology has support for an asynchronous API (as it seems that R's curl package does)\r\n   \r\n   In my mind, supporting R connections is more about providing a (possibly slow) workaround for things that Arrow C++ or the R bindings can't do yet (e.g., URLs). I do know that the async API for curl from the R end is along the lines of `open_async(url, function(chunk, is_last_chunk))`. R connections are a pain and if there are more use-cases along these lines it might be worth investing in some C struct definitions where its clear that callable members must be thread safe.\n\n\n-- \nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on to GitHub and use the\nURL above to go to the specific comment.\n\nTo unsubscribe, e-mail: github-unsubscribe@arrow.apache.org\n\nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2022-03-01T13:50:05.094+0000",
                    "updated": "2022-03-01T13:50:05.094+0000",
                    "started": "2022-03-01T13:50:05.094+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "734583",
                    "issueId": "13313700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313700/worklog/755342",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on code in PR #12323:\nURL: https://github.com/apache/arrow/pull/12323#discussion_r847573544\n\n\n##########\nr/src/csv.cpp:\n##########\n@@ -162,7 +164,19 @@ std::shared_ptr<arrow::csv::TableReader> csv___TableReader__Make(\n // [[arrow::export]]\n std::shared_ptr<arrow::Table> csv___TableReader__Read(\n     const std::shared_ptr<arrow::csv::TableReader>& table_reader) {\n-  return ValueOrStop(table_reader->Read());\n+  std::thread* thread_ptr;\n+  auto result = RunWithCapturedR<std::shared_ptr<arrow::Table>>([&]() {\n+    auto fut = arrow::Future<std::shared_ptr<arrow::Table>>::Make();\n+\n+    thread_ptr = new std::thread([&] { fut.MarkFinished(table_reader->Read()); });\n+\n+    return fut;\n+  });\n+\n+  thread_ptr->join();\n+  delete thread_ptr;\n+\n+  return ValueOrStop(result);\n }\n\nReview Comment:\n   In order for the connection thing to work for `read_csv_arrow()`, we need to wrap `table_reader->Read()` with `RunWithCapturedR()`, but we need a cleaner way to do it than what I have here!\n\n\n\n##########\nr/src/feather.cpp:\n##########\n@@ -48,34 +51,63 @@ int ipc___feather___Reader__version(\n \n // [[arrow::export]]\n std::shared_ptr<arrow::Table> ipc___feather___Reader__Read(\n-    const std::shared_ptr<arrow::ipc::feather::Reader>& reader, SEXP columns) {\n-  std::shared_ptr<arrow::Table> table;\n-\n-  switch (TYPEOF(columns)) {\n-    case STRSXP: {\n-      R_xlen_t n = XLENGTH(columns);\n-      std::vector<std::string> names(n);\n-      for (R_xlen_t i = 0; i < n; i++) {\n-        names[i] = CHAR(STRING_ELT(columns, i));\n-      }\n-      StopIfNotOk(reader->Read(names, &table));\n-      break;\n+    const std::shared_ptr<arrow::ipc::feather::Reader>& reader, cpp11::sexp columns) {\n+  bool use_names = columns != R_NilValue;\n+  std::vector<std::string> names;\n+  if (use_names) {\n+    cpp11::strings columns_chr(columns);\n+    names.reserve(columns_chr.size());\n+    for (const auto& name : columns_chr) {\n+      names.push_back(name);\n     }\n-    case NILSXP:\n-      StopIfNotOk(reader->Read(&table));\n-      break;\n-    default:\n-      cpp11::stop(\"incompatible column specification\");\n-      break;\n   }\n \n-  return table;\n+  std::thread* thread_ptr;\n+  auto result = RunWithCapturedR<std::shared_ptr<arrow::Table>>([&]() {\n+    auto fut = arrow::Future<std::shared_ptr<arrow::Table>>::Make();\n+\n+    thread_ptr = new std::thread([&] {\n+      std::shared_ptr<arrow::Table> table;\n+      arrow::Status read_result;\n+      if (use_names) {\n+        read_result = reader->Read(names, &table);\n+      } else {\n+        read_result = reader->Read(&table);\n+      }\n+\n+      if (read_result.ok()) {\n+        fut.MarkFinished(table);\n+      } else {\n+        fut.MarkFinished(read_result);\n+      }\n+    });\n+\n+    return fut;\n+  });\n+\n+  thread_ptr->join();\n+  delete thread_ptr;\n+\n+  return ValueOrStop(result);\n }\n \n // [[arrow::export]]\n std::shared_ptr<arrow::ipc::feather::Reader> ipc___feather___Reader__Open(\n     const std::shared_ptr<arrow::io::RandomAccessFile>& stream) {\n-  return ValueOrStop(arrow::ipc::feather::Reader::Open(stream));\n+  std::thread* thread_ptr;\n+  auto result = RunWithCapturedR<std::shared_ptr<arrow::ipc::feather::Reader>>([&]() {\n+    auto fut = arrow::Future<std::shared_ptr<arrow::ipc::feather::Reader>>::Make();\n+\n+    thread_ptr = new std::thread(\n+        [&] { fut.MarkFinished(arrow::ipc::feather::Reader::Open(stream)); });\n+\n+    return fut;\n+  });\n+\n+  thread_ptr->join();\n+  delete thread_ptr;\n\nReview Comment:\n   In order for the connection thing to work for `read_csv_arrow()`, we need to wrap `arrow::ipc::feather::Reader::Open(stream))` with `RunWithCapturedR()`, but we need a cleaner way to do it than what I have here!\n\n\n\n##########\nr/src/feather.cpp:\n##########\n@@ -48,34 +51,63 @@ int ipc___feather___Reader__version(\n \n // [[arrow::export]]\n std::shared_ptr<arrow::Table> ipc___feather___Reader__Read(\n-    const std::shared_ptr<arrow::ipc::feather::Reader>& reader, SEXP columns) {\n-  std::shared_ptr<arrow::Table> table;\n-\n-  switch (TYPEOF(columns)) {\n-    case STRSXP: {\n-      R_xlen_t n = XLENGTH(columns);\n-      std::vector<std::string> names(n);\n-      for (R_xlen_t i = 0; i < n; i++) {\n-        names[i] = CHAR(STRING_ELT(columns, i));\n-      }\n-      StopIfNotOk(reader->Read(names, &table));\n-      break;\n+    const std::shared_ptr<arrow::ipc::feather::Reader>& reader, cpp11::sexp columns) {\n+  bool use_names = columns != R_NilValue;\n+  std::vector<std::string> names;\n+  if (use_names) {\n+    cpp11::strings columns_chr(columns);\n+    names.reserve(columns_chr.size());\n+    for (const auto& name : columns_chr) {\n+      names.push_back(name);\n     }\n-    case NILSXP:\n-      StopIfNotOk(reader->Read(&table));\n-      break;\n-    default:\n-      cpp11::stop(\"incompatible column specification\");\n-      break;\n   }\n \n-  return table;\n+  std::thread* thread_ptr;\n+  auto result = RunWithCapturedR<std::shared_ptr<arrow::Table>>([&]() {\n+    auto fut = arrow::Future<std::shared_ptr<arrow::Table>>::Make();\n+\n+    thread_ptr = new std::thread([&] {\n+      std::shared_ptr<arrow::Table> table;\n+      arrow::Status read_result;\n+      if (use_names) {\n+        read_result = reader->Read(names, &table);\n+      } else {\n+        read_result = reader->Read(&table);\n+      }\n+\n+      if (read_result.ok()) {\n+        fut.MarkFinished(table);\n+      } else {\n+        fut.MarkFinished(read_result);\n+      }\n+    });\n+\n+    return fut;\n+  });\n+\n+  thread_ptr->join();\n+  delete thread_ptr;\n\nReview Comment:\n   In order for the connection thing to work for `read_csv_arrow()`, we need to wrap `reader->Read()` with `RunWithCapturedR()`, but we need a cleaner way to do it than what I have here!\n\n\n\n",
                    "created": "2022-04-11T17:38:39.338+0000",
                    "updated": "2022-04-11T17:38:39.338+0000",
                    "started": "2022-04-11T17:38:39.332+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "755342",
                    "issueId": "13313700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313700/worklog/755382",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "nealrichardson commented on code in PR #12323:\nURL: https://github.com/apache/arrow/pull/12323#discussion_r847644873\n\n\n##########\nr/tests/testthat/test-feather.R:\n##########\n@@ -181,6 +181,17 @@ test_that(\"read_feather requires RandomAccessFile and errors nicely otherwise (A\n   )\n })\n \n+test_that(\"read_feather() and write_feather() accept connection objects\", {\n+  tf <- tempfile()\n+  on.exit(unlink(tf))\n+  write_feather(tibble::tibble(x = 1:5), file(tf))\n\nReview Comment:\n   Given that we do multithreaded handling of columns (right?) do we need to test with data that has more than one column, just to confirm that we aren't tripping over multiple threads calling the same connection concurrently?\n\n\n\n",
                    "created": "2022-04-11T19:01:11.049+0000",
                    "updated": "2022-04-11T19:01:11.049+0000",
                    "started": "2022-04-11T19:01:11.049+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "755382",
                    "issueId": "13313700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313700/worklog/755562",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "westonpace commented on code in PR #12323:\nURL: https://github.com/apache/arrow/pull/12323#discussion_r847893866\n\n\n##########\nr/R/io.R:\n##########\n@@ -244,32 +245,59 @@ make_readable_file <- function(file, mmap = TRUE, compression = NULL, filesystem\n   }\n   if (is.string(file)) {\n     if (is_url(file)) {\n-      fs_and_path <- FileSystem$from_uri(file)\n-      filesystem <- fs_and_path$fs\n-      file <- fs_and_path$path\n+      file <- tryCatch({\n+        fs_and_path <- FileSystem$from_uri(file)\n+        filesystem <- fs_and_path$fs\n+        fs_and_path$path\n+      }, error = function(e) {\n+        MakeRConnectionInputStream(url(file, open = \"rb\"))\n\nReview Comment:\n   What does it look like if this call fails?  For example, if I'm a user and I mistakenly pass the wrong URI to `make_readable_file` will the error look reasonable?\n\n\n\n##########\nr/R/io.R:\n##########\n@@ -244,32 +245,59 @@ make_readable_file <- function(file, mmap = TRUE, compression = NULL, filesystem\n   }\n   if (is.string(file)) {\n     if (is_url(file)) {\n-      fs_and_path <- FileSystem$from_uri(file)\n-      filesystem <- fs_and_path$fs\n-      file <- fs_and_path$path\n+      file <- tryCatch({\n+        fs_and_path <- FileSystem$from_uri(file)\n+        filesystem <- fs_and_path$fs\n+        fs_and_path$path\n+      }, error = function(e) {\n+        MakeRConnectionInputStream(url(file, open = \"rb\"))\n+      })\n     }\n+\n     if (is.null(compression)) {\n       # Infer compression from the file path\n       compression <- detect_compression(file)\n     }\n+\n     if (!is.null(filesystem)) {\n       file <- filesystem$OpenInputFile(file)\n-    } else if (isTRUE(mmap)) {\n+    } else if (is.string(file) && isTRUE(mmap)) {\n       file <- mmap_open(file)\n-    } else {\n+    } else if (is.string(file)) {\n       file <- ReadableFile$create(file)\n     }\n+\n     if (!identical(compression, \"uncompressed\")) {\n       file <- CompressedInputStream$create(file, compression)\n     }\n   } else if (inherits(file, c(\"raw\", \"Buffer\"))) {\n     file <- BufferReader$create(file)\n+  } else if (inherits(file, \"connection\")) {\n+    if (!isOpen(file)) {\n+      open(file, \"rb\")\n+    }\n+\n+    # isSeekable() is not sufficient to check for seekability\n+    # because we rely on seek(whence = \"end\") to get the size\n+    # of the stream and a gzfile() is \"seekable\".\n\nReview Comment:\n   I assume this comment is related to the \"seek to the end and back\" behavior of RConnectionRandomAccessFile's constructor.  Should you move it there?  I'm not sure this comment makes sense where it is.\n\n\n\n##########\nr/src/io.cpp:\n##########\n@@ -207,7 +209,209 @@ void io___BufferOutputStream__Write(\n   StopIfNotOk(stream->Write(RAW(bytes), bytes.size()));\n }\n \n-// TransformInputStream::TransformFunc wrapper\n+// ----",
                    "created": "2022-04-12T03:21:21.060+0000",
                    "updated": "2022-04-12T03:21:21.060+0000",
                    "started": "2022-04-12T03:21:21.059+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "755562",
                    "issueId": "13313700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313700/worklog/755693",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on code in PR #12323:\nURL: https://github.com/apache/arrow/pull/12323#discussion_r848300434\n\n\n##########\nr/R/io.R:\n##########\n@@ -244,32 +245,59 @@ make_readable_file <- function(file, mmap = TRUE, compression = NULL, filesystem\n   }\n   if (is.string(file)) {\n     if (is_url(file)) {\n-      fs_and_path <- FileSystem$from_uri(file)\n-      filesystem <- fs_and_path$fs\n-      file <- fs_and_path$path\n+      file <- tryCatch({\n+        fs_and_path <- FileSystem$from_uri(file)\n+        filesystem <- fs_and_path$fs\n+        fs_and_path$path\n+      }, error = function(e) {\n+        MakeRConnectionInputStream(url(file, open = \"rb\"))\n\nReview Comment:\n   It's not winning any awards, but it's not bad!\r\n   \r\n   ``` r\r\n   arrow::read_ipc_stream(\"https://httpbin.org/status/404\")\r\n   #> Warning in url(file, open = \"rb\"): cannot open URL 'https://httpbin.org/status/\r\n   #> 404': HTTP status was '404 Not Found'\r\n   #> Error in url(file, open = \"rb\"): cannot open the connection to 'https://httpbin.org/status/404'\r\n   ```\n\n\n\n",
                    "created": "2022-04-12T10:58:13.646+0000",
                    "updated": "2022-04-12T10:58:13.646+0000",
                    "started": "2022-04-12T10:58:13.645+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "755693",
                    "issueId": "13313700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313700/worklog/755792",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on code in PR #12323:\nURL: https://github.com/apache/arrow/pull/12323#discussion_r848520733\n\n\n##########\nr/src/io.cpp:\n##########\n@@ -207,7 +209,209 @@ void io___BufferOutputStream__Write(\n   StopIfNotOk(stream->Write(RAW(bytes), bytes.size()));\n }\n \n-// TransformInputStream::TransformFunc wrapper\n+// ----",
                    "created": "2022-04-12T14:41:34.031+0000",
                    "updated": "2022-04-12T14:41:34.031+0000",
                    "started": "2022-04-12T14:41:34.031+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "755792",
                    "issueId": "13313700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313700/worklog/755793",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on code in PR #12323:\nURL: https://github.com/apache/arrow/pull/12323#discussion_r848522035\n\n\n##########\nr/src/io.cpp:\n##########\n@@ -207,7 +209,209 @@ void io___BufferOutputStream__Write(\n   StopIfNotOk(stream->Write(RAW(bytes), bytes.size()));\n }\n \n-// TransformInputStream::TransformFunc wrapper\n+// ----",
                    "created": "2022-04-12T14:42:39.052+0000",
                    "updated": "2022-04-12T14:42:39.052+0000",
                    "started": "2022-04-12T14:42:39.051+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "755793",
                    "issueId": "13313700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313700/worklog/755795",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on code in PR #12323:\nURL: https://github.com/apache/arrow/pull/12323#discussion_r848525477\n\n\n##########\nr/tests/testthat/test-feather.R:\n##########\n@@ -181,6 +181,17 @@ test_that(\"read_feather requires RandomAccessFile and errors nicely otherwise (A\n   )\n })\n \n+test_that(\"read_feather() and write_feather() accept connection objects\", {\n+  tf <- tempfile()\n+  on.exit(unlink(tf))\n+  write_feather(tibble::tibble(x = 1:5), file(tf))\n\nReview Comment:\n   I added a test with a bigger `data` with a few columns that's more along the lines of what Neal described (and used it for all four reader tests).\n\n\n\n",
                    "created": "2022-04-12T14:45:44.499+0000",
                    "updated": "2022-04-12T14:45:44.499+0000",
                    "started": "2022-04-12T14:45:44.499+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "755795",
                    "issueId": "13313700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313700/worklog/755796",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on code in PR #12323:\nURL: https://github.com/apache/arrow/pull/12323#discussion_r848530032\n\n\n##########\nr/src/csv.cpp:\n##########\n@@ -162,7 +164,19 @@ std::shared_ptr<arrow::csv::TableReader> csv___TableReader__Make(\n // [[arrow::export]]\n std::shared_ptr<arrow::Table> csv___TableReader__Read(\n     const std::shared_ptr<arrow::csv::TableReader>& table_reader) {\n-  return ValueOrStop(table_reader->Read());\n+  std::thread* thread_ptr;\n+  auto result = RunWithCapturedR<std::shared_ptr<arrow::Table>>([&]() {\n+    auto fut = arrow::Future<std::shared_ptr<arrow::Table>>::Make();\n+\n+    thread_ptr = new std::thread([&] { fut.MarkFinished(table_reader->Read()); });\n+\n+    return fut;\n+  });\n+\n+  thread_ptr->join();\n+  delete thread_ptr;\n+\n+  return ValueOrStop(result);\n }\n\nReview Comment:\n   This collapses things down nicely!\n\n\n\n",
                    "created": "2022-04-12T14:49:49.613+0000",
                    "updated": "2022-04-12T14:49:49.613+0000",
                    "started": "2022-04-12T14:49:49.612+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "755796",
                    "issueId": "13313700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313700/worklog/755797",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on code in PR #12323:\nURL: https://github.com/apache/arrow/pull/12323#discussion_r848530431\n\n\n##########\nr/src/feather.cpp:\n##########\n@@ -48,34 +51,63 @@ int ipc___feather___Reader__version(\n \n // [[arrow::export]]\n std::shared_ptr<arrow::Table> ipc___feather___Reader__Read(\n-    const std::shared_ptr<arrow::ipc::feather::Reader>& reader, SEXP columns) {\n-  std::shared_ptr<arrow::Table> table;\n-\n-  switch (TYPEOF(columns)) {\n-    case STRSXP: {\n-      R_xlen_t n = XLENGTH(columns);\n-      std::vector<std::string> names(n);\n-      for (R_xlen_t i = 0; i < n; i++) {\n-        names[i] = CHAR(STRING_ELT(columns, i));\n-      }\n-      StopIfNotOk(reader->Read(names, &table));\n-      break;\n+    const std::shared_ptr<arrow::ipc::feather::Reader>& reader, cpp11::sexp columns) {\n+  bool use_names = columns != R_NilValue;\n+  std::vector<std::string> names;\n+  if (use_names) {\n+    cpp11::strings columns_chr(columns);\n+    names.reserve(columns_chr.size());\n+    for (const auto& name : columns_chr) {\n+      names.push_back(name);\n     }\n-    case NILSXP:\n-      StopIfNotOk(reader->Read(&table));\n-      break;\n-    default:\n-      cpp11::stop(\"incompatible column specification\");\n-      break;\n   }\n \n-  return table;\n+  std::thread* thread_ptr;\n+  auto result = RunWithCapturedR<std::shared_ptr<arrow::Table>>([&]() {\n+    auto fut = arrow::Future<std::shared_ptr<arrow::Table>>::Make();\n+\n+    thread_ptr = new std::thread([&] {\n+      std::shared_ptr<arrow::Table> table;\n+      arrow::Status read_result;\n+      if (use_names) {\n+        read_result = reader->Read(names, &table);\n+      } else {\n+        read_result = reader->Read(&table);\n+      }\n+\n+      if (read_result.ok()) {\n+        fut.MarkFinished(table);\n+      } else {\n+        fut.MarkFinished(read_result);\n+      }\n+    });\n+\n+    return fut;\n+  });\n+\n+  thread_ptr->join();\n+  delete thread_ptr;\n\nReview Comment:\n   This is much better!\n\n\n\n",
                    "created": "2022-04-12T14:50:14.719+0000",
                    "updated": "2022-04-12T14:50:14.719+0000",
                    "started": "2022-04-12T14:50:14.718+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "755797",
                    "issueId": "13313700"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313700/worklog/755805",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "paleolimbot commented on code in PR #12323:\nURL: https://github.com/apache/arrow/pull/12323#discussion_r848533304\n\n\n##########\nr/R/io.R:\n##########\n@@ -244,32 +245,59 @@ make_readable_file <- function(file, mmap = TRUE, compression = NULL, filesystem\n   }\n   if (is.string(file)) {\n     if (is_url(file)) {\n-      fs_and_path <- FileSystem$from_uri(file)\n-      filesystem <- fs_and_path$fs\n-      file <- fs_and_path$path\n+      file <- tryCatch({\n+        fs_and_path <- FileSystem$from_uri(file)\n+        filesystem <- fs_and_path$fs\n+        fs_and_path$path\n+      }, error = function(e) {\n+        MakeRConnectionInputStream(url(file, open = \"rb\"))\n+      })\n     }\n+\n     if (is.null(compression)) {\n       # Infer compression from the file path\n       compression <- detect_compression(file)\n     }\n+\n     if (!is.null(filesystem)) {\n       file <- filesystem$OpenInputFile(file)\n-    } else if (isTRUE(mmap)) {\n+    } else if (is.string(file) && isTRUE(mmap)) {\n       file <- mmap_open(file)\n-    } else {\n+    } else if (is.string(file)) {\n       file <- ReadableFile$create(file)\n     }\n+\n     if (!identical(compression, \"uncompressed\")) {\n       file <- CompressedInputStream$create(file, compression)\n     }\n   } else if (inherits(file, c(\"raw\", \"Buffer\"))) {\n     file <- BufferReader$create(file)\n+  } else if (inherits(file, \"connection\")) {\n+    if (!isOpen(file)) {\n+      open(file, \"rb\")\n+    }\n+\n+    # isSeekable() is not sufficient to check for seekability\n+    # because we rely on seek(whence = \"end\") to get the size\n+    # of the stream and a gzfile() is \"seekable\".\n\nReview Comment:\n   I clarified this comment to be more relevant to its surrounding since.\n\n\n\n",
                    "created": "2022-04-12T14:52:39.842+0000",
                    "updated": "2022-04-12T14:52:39.842+0000",
                    "started": "2022-04-12T14:52:39.841+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "755805",
                    "issueId": "13313700"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/2",
            "id": "2",
            "description": "A new feature of the product, which has yet to be developed.",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21141&avatarType=issuetype",
            "name": "New Feature",
            "subtask": false,
            "avatarId": 21141
        },
        "timespent": 22200,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@73303d24[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6294d062[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@25e6e051[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@61b5334f[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3531912b[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@b36982a[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@19c00575[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@51277249[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@68a6098f[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@576e3b79[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@4e1c774c[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@24c3e1fc[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 22200,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Apr 22 16:59:00 UTC 2022",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2022-04-22T16:59:00.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-9235/watchers",
            "watchCount": 6,
            "isWatching": false
        },
        "created": "2020-06-26T23:05:57.000+0000",
        "updated": "2022-07-02T18:45:11.000+0000",
        "timeoriginalestimate": null,
        "description": "We have an internal filesystem that we interact with through objects that inherit from the connection class. These files aren't necessarily local, making it slightly more complicated to read and write parquet files, for example.\r\n\r\nFor now, we're generating raw vectors and using that to create the file. For example, to read files\r\n\r\n{noformat}\r\nReadParquet <- function(filename, ...) {}}\r\n\u00a0\u00a0 file <-file(filename,\"rb\")\r\n\u00a0\u00a0 on.exit(close(file))\r\n\u00a0\u00a0 raw <- readBin(file, \"raw\", FileInfo(filename)$size)\r\n\u00a0\u00a0 return(arrow::read_parquet(raw, ...))\r\n}\r\n{noformat}\r\n\r\nAnd to write,\r\n\r\n{noformat}\r\nWriteParquet <- function(df, filepath, ...) {\r\n\u00a0\u00a0 stream <- BufferOutputStream$create()\r\n\u00a0\u00a0 write_parquet(df, stream, ...)\r\n\u00a0\u00a0 raw <- stream$finish()$data()\r\n   file <- file(filepath, \"wb\")\r\n\u00a0\u00a0 on.exit(close(file)\r\n\u00a0\u00a0 writeBin(raw, file)\r\n\u00a0\u00a0 return(invisible())\r\n}\r\n{noformat}\r\n\r\nAt the C++ level, we are interacting with ` R_new_custom_connection` defined here:\r\n [https://github.com/wch/r-source/blob/trunk/src/include/R_ext/Connections.h]\r\n\r\nI've been very impressed with how feature-rich arrow is. It would be nice to see this API supported as well.",
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "6h 10m",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 22200
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[R] Support for `connection` class when reading and writing files",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313700/comment/17146999",
                    "id": "17146999",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Sounds similar to ARROW-4512.\r\n\r\nWould you be interested in submitting a pull request? Seems like you're familiar with the terrain.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2020-06-27T15:24:15.771+0000",
                    "updated": "2020-06-27T15:24:15.771+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313700/comment/17148072",
                    "id": "17148072",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=msquinn2",
                        "name": "msquinn2",
                        "key": "msquinn2",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34060",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34060",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34060",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34060"
                        },
                        "displayName": "Michael Quinn",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "body": "Yeah. It's fundamentally the same issue. They are both instances of R's \"connection\" class.\r\nhttps://stat.ethz.ch/R-manual/R-devel/library/base/html/connections.html\r\n\r\nUnfortunately, I don't really understand enough about arrow to implement something like this.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=msquinn2",
                        "name": "msquinn2",
                        "key": "msquinn2",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34060",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34060",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34060",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34060"
                        },
                        "displayName": "Michael Quinn",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "created": "2020-06-29T18:36:58.129+0000",
                    "updated": "2020-06-29T18:36:58.129+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313700/comment/17148079",
                    "id": "17148079",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "And I don't understand enough of R_new_custom_connection to implement this either :) But maybe we can put our heads together. I'm happy to help with the arrow bits if you can get something started.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2020-06-29T19:00:03.145+0000",
                    "updated": "2020-06-29T19:00:03.145+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313700/comment/17275737",
                    "id": "17275737",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Looks like {{readr}} reads from connections by dumping their contents to a temp file and then reading the file: https://github.com/tidyverse/readr/blob/master/src/connection.cpp",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2021-01-30T22:21:26.183+0000",
                    "updated": "2021-01-30T22:21:26.183+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313700/comment/17331019",
                    "id": "17331019",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
                        "name": "icook",
                        "key": "icook",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
                        },
                        "displayName": "Ian Cook",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "body": "Since Arrow does not yet support HTTP URIs in file reading functions (ARROW-7594), if we do implement support for connections in the R package, we should consider detecting HTTP URI strings and using connections to handle them.",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=icook",
                        "name": "icook",
                        "key": "icook",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=icook&avatarId=29388",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=icook&avatarId=29388",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=icook&avatarId=29388",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=icook&avatarId=29388"
                        },
                        "displayName": "Ian Cook",
                        "active": true,
                        "timeZone": "America/New_York"
                    },
                    "created": "2021-04-23T20:30:06.969+0000",
                    "updated": "2021-04-23T20:35:22.552+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313700/comment/17482657",
                    "id": "17482657",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "body": "I'll take a look at this since I just did an {{InputStream}} ticket. Reading and writing from a connection uses a similar API to the current {{InputStream}} and {{OutputStream}}, so in theory it's not too bad (with the caveat that connections probably aren't safe to be called from other threads).\r\n\r\nhttps://github.com/wch/r-source/blob/trunk/src/include/R_ext/Connections.h#L91-L94",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=paleolimbot",
                        "name": "paleolimbot",
                        "key": "paleolimbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=paleolimbot&avatarId=47795",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=paleolimbot&avatarId=47795",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=paleolimbot&avatarId=47795",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=paleolimbot&avatarId=47795"
                        },
                        "displayName": "Dewey Dunnington",
                        "active": true,
                        "timeZone": "America/Halifax"
                    },
                    "created": "2022-01-26T18:13:14.294+0000",
                    "updated": "2022-01-26T18:13:14.294+0000"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13313700/comment/17526566",
                    "id": "17526566",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 12323\n[https://github.com/apache/arrow/pull/12323]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=npr",
                        "name": "npr",
                        "key": "npr",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=34045",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=34045",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=34045",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=34045"
                        },
                        "displayName": "Neal Richardson",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2022-04-22T16:59:00.576+0000",
                    "updated": "2022-04-22T16:59:00.576+0000"
                }
            ],
            "maxResults": 7,
            "total": 7,
            "startAt": 0
        },
        "customfield_12311820": "0|z0g8io:",
        "customfield_12314139": null
    }
}