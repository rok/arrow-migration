{
    "expand": "operations,versionedRepresentations,editmeta,changelog,renderedFields",
    "id": "13182995",
    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182995",
    "key": "ARROW-3171",
    "fields": {
        "parent": {
            "id": "13110540",
            "key": "ARROW-1688",
            "self": "https://issues.apache.org/jira/rest/api/2/issue/13110540",
            "fields": {
                "summary": "[Java] Fail build on checkstyle warnings",
                "status": {
                    "self": "https://issues.apache.org/jira/rest/api/2/status/5",
                    "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
                    "name": "Resolved",
                    "id": "5",
                    "statusCategory": {
                        "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                        "id": 3,
                        "key": "done",
                        "colorName": "green",
                        "name": "Done"
                    }
                },
                "priority": {
                    "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
                    "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
                    "name": "Major",
                    "id": "3"
                },
                "issuetype": {
                    "self": "https://issues.apache.org/jira/rest/api/2/issuetype/4",
                    "id": "4",
                    "description": "An improvement or enhancement to an existing feature or task.",
                    "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21140&avatarType=issuetype",
                    "name": "Improvement",
                    "subtask": false,
                    "avatarId": 21140
                }
            }
        },
        "fixVersions": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/version/12343066",
                "id": "12343066",
                "description": "",
                "name": "0.11.0",
                "archived": false,
                "released": true,
                "releaseDate": "2018-10-08"
            }
        ],
        "resolution": {
            "self": "https://issues.apache.org/jira/rest/api/2/resolution/1",
            "id": "1",
            "description": "A fix for this issue is checked into the tree and tested.",
            "name": "Fixed"
        },
        "customfield_12312322": null,
        "customfield_12312323": null,
        "customfield_12312320": null,
        "customfield_12310420": "9223372036854775807",
        "customfield_12312321": null,
        "customfield_12312328": null,
        "customfield_12312329": null,
        "customfield_12312326": null,
        "customfield_12310300": null,
        "customfield_12312327": null,
        "customfield_12312324": null,
        "customfield_12312720": null,
        "customfield_12312325": null,
        "lastViewed": null,
        "priority": {
            "self": "https://issues.apache.org/jira/rest/api/2/priority/3",
            "iconUrl": "https://issues.apache.org/jira/images/icons/priorities/major.svg",
            "name": "Major",
            "id": "3"
        },
        "labels": [
            "pull-request-available"
        ],
        "customfield_12312333": null,
        "customfield_12312334": null,
        "customfield_12313422": "false",
        "customfield_12310310": "0.0",
        "customfield_12312331": null,
        "customfield_12312332": null,
        "aggregatetimeoriginalestimate": null,
        "timeestimate": 0,
        "customfield_12312330": null,
        "versions": [],
        "customfield_12311120": null,
        "customfield_12313826": null,
        "customfield_12312339": null,
        "issuelinks": [],
        "customfield_12313825": null,
        "assignee": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
            "name": "bryanc",
            "key": "bryanc",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
            },
            "displayName": "Bryan Cutler",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "customfield_12312337": null,
        "customfield_12313823": null,
        "customfield_12312338": null,
        "customfield_12311920": null,
        "customfield_12313822": null,
        "customfield_12312335": null,
        "customfield_12313821": null,
        "customfield_12312336": null,
        "customfield_12313820": null,
        "status": {
            "self": "https://issues.apache.org/jira/rest/api/2/status/5",
            "description": "A resolution has been taken, and it is awaiting verification by reporter. From here issues are either reopened, or are closed.",
            "iconUrl": "https://issues.apache.org/jira/images/icons/statuses/resolved.png",
            "name": "Resolved",
            "id": "5",
            "statusCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/statuscategory/3",
                "id": 3,
                "key": "done",
                "colorName": "green",
                "name": "Done"
            }
        },
        "components": [
            {
                "self": "https://issues.apache.org/jira/rest/api/2/component/12328933",
                "id": "12328933",
                "name": "Java"
            }
        ],
        "customfield_12312026": null,
        "customfield_12312023": null,
        "customfield_12312024": null,
        "aggregatetimeestimate": 0,
        "customfield_12312022": null,
        "customfield_12310921": null,
        "customfield_12310920": "9223372036854775807",
        "customfield_12312823": null,
        "creator": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
            "name": "bryanc",
            "key": "bryanc",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
            },
            "displayName": "Bryan Cutler",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "subtasks": [],
        "reporter": {
            "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
            "name": "bryanc",
            "key": "bryanc",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
            },
            "displayName": "Bryan Cutler",
            "active": true,
            "timeZone": "America/Los_Angeles"
        },
        "aggregateprogress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313520": null,
        "customfield_12310250": null,
        "progress": {
            "progress": 12600,
            "total": 12600,
            "percent": 100
        },
        "customfield_12313924": null,
        "votes": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3171/votes",
            "votes": 0,
            "hasVoted": false
        },
        "worklog": {
            "startAt": 0,
            "maxResults": 20,
            "total": 21,
            "worklogs": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182995/worklog/141082",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler opened a new pull request #2512: [WIP] ARROW-3171: [Java] Enable checkstyle for line length\nURL: https://github.com/apache/arrow/pull/2512\n \n \n   This change enables checkstyle line length set at 100 columns.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-05T00:43:35.784+0000",
                    "updated": "2018-09-05T00:43:35.784+0000",
                    "started": "2018-09-05T00:43:35.783+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "141082",
                    "issueId": "13182995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182995/worklog/141083",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2512: [WIP] ARROW-3171: [Java] Enable checkstyle for line length\nURL: https://github.com/apache/arrow/pull/2512#discussion_r215107919\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/types/pojo/Field.java\n ##########\n @@ -84,12 +84,18 @@ public Field(String name, boolean nullable, ArrowType type, List<Field> children\n \n   // deprecated, use FieldType or static constructor instead\n   @Deprecated\n-  public Field(String name, boolean nullable, ArrowType type, DictionaryEncoding dictionary, List<Field> children) {\n+  public Field(\n+      String name,\n+      boolean nullable,\n+      ArrowType type,\n+      DictionaryEncoding dictionary,\n+      List<Field> children) {\n     this(name, new FieldType(nullable, type, dictionary, null), children);\n \n Review comment:\n   I'm not sure if this specific style of indentation is enforced by our checkstyle, but wanted to bring it up in case others had different preferences.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-05T00:47:01.343+0000",
                    "updated": "2018-09-05T00:47:01.343+0000",
                    "started": "2018-09-05T00:47:01.342+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "141083",
                    "issueId": "13182995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182995/worklog/141084",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jacques-n commented on issue #2512: [WIP] ARROW-3171: [Java] Enable checkstyle for line length\nURL: https://github.com/apache/arrow/pull/2512#issuecomment-418563055\n \n \n   I vote for 140 or 160. 100 is so short on these widescreens.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-05T00:49:08.812+0000",
                    "updated": "2018-09-05T00:49:08.812+0000",
                    "started": "2018-09-05T00:49:08.810+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "141084",
                    "issueId": "13182995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182995/worklog/141085",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on issue #2512: [WIP] ARROW-3171: [Java] Enable checkstyle for line length\nURL: https://github.com/apache/arrow/pull/2512#issuecomment-418563067\n \n \n   cc @icexelloss @jacques-n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-05T00:49:12.425+0000",
                    "updated": "2018-09-05T00:49:12.425+0000",
                    "started": "2018-09-05T00:49:12.425+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "141085",
                    "issueId": "13182995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182995/worklog/141264",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on a change in pull request #2512: [WIP] ARROW-3171: [Java] Enable checkstyle for line length\nURL: https://github.com/apache/arrow/pull/2512#discussion_r215283715\n \n \n\n ##########\n File path: java/dev/checkstyle/suppressions.xml\n ##########\n @@ -33,5 +33,7 @@\n   <suppress checks=\"Javadoc.*\" files=\".*\" />\n \n   <!-- TODO: Temporarily suppress all but certain checks to fix in increments -->\n-  <suppress checks=\"^(?!.*(ImportOrder)).*\" files=\".*\" />\n+  <suppress\n \n Review comment:\n   Can you remind me why are we suppressing checks here?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-05T14:05:25.817+0000",
                    "updated": "2018-09-05T14:05:25.817+0000",
                    "started": "2018-09-05T14:05:25.816+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "141264",
                    "issueId": "13182995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182995/worklog/141308",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jacques-n commented on a change in pull request #2512: [WIP] ARROW-3171: [Java] Enable checkstyle for line length\nURL: https://github.com/apache/arrow/pull/2512#discussion_r215306922\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/types/pojo/Field.java\n ##########\n @@ -84,12 +84,18 @@ public Field(String name, boolean nullable, ArrowType type, List<Field> children\n \n   // deprecated, use FieldType or static constructor instead\n   @Deprecated\n-  public Field(String name, boolean nullable, ArrowType type, DictionaryEncoding dictionary, List<Field> children) {\n+  public Field(\n+      String name,\n+      boolean nullable,\n+      ArrowType type,\n+      DictionaryEncoding dictionary,\n+      List<Field> children) {\n     this(name, new FieldType(nullable, type, dictionary, null), children);\n \n Review comment:\n   I prefer this format. FYI I believe intellij does a different one where arguments hang off the opening parenthesis but I much prefer this pattern. +1 on enforcing it.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-05T15:00:36.521+0000",
                    "updated": "2018-09-05T15:00:36.521+0000",
                    "started": "2018-09-05T15:00:36.517+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "141308",
                    "issueId": "13182995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182995/worklog/141357",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2512: [WIP] ARROW-3171: [Java] Enable checkstyle for line length\nURL: https://github.com/apache/arrow/pull/2512#discussion_r215328727\n \n \n\n ##########\n File path: java/dev/checkstyle/suppressions.xml\n ##########\n @@ -33,5 +33,7 @@\n   <suppress checks=\"Javadoc.*\" files=\".*\" />\n \n   <!-- TODO: Temporarily suppress all but certain checks to fix in increments -->\n-  <suppress checks=\"^(?!.*(ImportOrder)).*\" files=\".*\" />\n+  <suppress\n \n Review comment:\n   I'm suppressing all but the ones I have fixed so far, so I can do this incrementally. Eventually, this will be removed when the build passes all checks.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-05T15:54:28.408+0000",
                    "updated": "2018-09-05T15:54:28.408+0000",
                    "started": "2018-09-05T15:54:28.407+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "141357",
                    "issueId": "13182995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182995/worklog/141362",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on issue #2512: [WIP] ARROW-3171: [Java] Enable checkstyle for line length\nURL: https://github.com/apache/arrow/pull/2512#issuecomment-418784641\n \n \n   >I vote for 140 or 160. 100 is so short on these widescreens.\r\n   \r\n   I'm fine with going above 100, although having it too long makes it hard to read. I would probably prefer 120, but I'm ok with 140.  So +1 for 140.  Any opinion on this @icexelloss ?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-05T15:58:04.407+0000",
                    "updated": "2018-09-05T15:58:04.407+0000",
                    "started": "2018-09-05T15:58:04.406+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "141362",
                    "issueId": "13182995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182995/worklog/141364",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on a change in pull request #2512: [WIP] ARROW-3171: [Java] Enable checkstyle for line length\nURL: https://github.com/apache/arrow/pull/2512#discussion_r215330648\n \n \n\n ##########\n File path: java/vector/src/main/java/org/apache/arrow/vector/types/pojo/Field.java\n ##########\n @@ -84,12 +84,18 @@ public Field(String name, boolean nullable, ArrowType type, List<Field> children\n \n   // deprecated, use FieldType or static constructor instead\n   @Deprecated\n-  public Field(String name, boolean nullable, ArrowType type, DictionaryEncoding dictionary, List<Field> children) {\n+  public Field(\n+      String name,\n+      boolean nullable,\n+      ArrowType type,\n+      DictionaryEncoding dictionary,\n+      List<Field> children) {\n     this(name, new FieldType(nullable, type, dictionary, null), children);\n \n Review comment:\n   Sounds good, I'll try to see if I can figure out how to enforce it. It's hard to tell right now because there are so many other warnings.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-05T15:59:46.501+0000",
                    "updated": "2018-09-05T15:59:46.501+0000",
                    "started": "2018-09-05T15:59:46.501+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "141364",
                    "issueId": "13182995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182995/worklog/141394",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "icexelloss commented on issue #2512: [WIP] ARROW-3171: [Java] Enable checkstyle for line length\nURL: https://github.com/apache/arrow/pull/2512#issuecomment-418794437\n \n \n   I am +1 for 120 but ok with 140 too.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-05T16:27:39.898+0000",
                    "updated": "2018-09-05T16:27:39.898+0000",
                    "started": "2018-09-05T16:27:39.897+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "141394",
                    "issueId": "13182995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182995/worklog/141437",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2512: [WIP] ARROW-3171: [Java] Enable checkstyle for line length\nURL: https://github.com/apache/arrow/pull/2512#issuecomment-418806449\n \n \n   FWIW In C++ we are 90 chars (Google limits to 80). But I guess Java devs mostly look at one file at a time? =) \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-05T17:04:47.535+0000",
                    "updated": "2018-09-05T17:04:47.535+0000",
                    "started": "2018-09-05T17:04:47.534+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "141437",
                    "issueId": "13182995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182995/worklog/141438",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "wesm commented on issue #2512: [WIP] ARROW-3171: [Java] Enable checkstyle for line length\nURL: https://github.com/apache/arrow/pull/2512#issuecomment-418806603\n \n \n   https://google.github.io/styleguide/javaguide.html#s4.4-column-limit\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-05T17:05:19.729+0000",
                    "updated": "2018-09-05T17:05:19.729+0000",
                    "started": "2018-09-05T17:05:19.728+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "141438",
                    "issueId": "13182995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182995/worklog/141485",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on issue #2512: [WIP] ARROW-3171: [Java] Enable checkstyle for line length\nURL: https://github.com/apache/arrow/pull/2512#issuecomment-418833682\n \n \n   @jacques-n would you be ok with trying out 120 for the line length? It's always easier to make it bigger if it becomes too cumbersome \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-05T18:30:18.745+0000",
                    "updated": "2018-09-05T18:30:18.745+0000",
                    "started": "2018-09-05T18:30:18.745+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "141485",
                    "issueId": "13182995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182995/worklog/141505",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jacques-n commented on issue #2512: [WIP] ARROW-3171: [Java] Enable checkstyle for line length\nURL: https://github.com/apache/arrow/pull/2512#issuecomment-418851194\n \n \n   I'm okay with 120.\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-05T19:22:40.890+0000",
                    "updated": "2018-09-05T19:22:40.890+0000",
                    "started": "2018-09-05T19:22:40.886+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "141505",
                    "issueId": "13182995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182995/worklog/141561",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on issue #2512: ARROW-3171: [Java] Enable checkstyle for line length and indentation\nURL: https://github.com/apache/arrow/pull/2512#issuecomment-418912653\n \n \n   Ok, I'm done with line length at 120 and indentation checks, please take another look - thanks!\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-05T23:22:43.078+0000",
                    "updated": "2018-09-05T23:22:43.078+0000",
                    "started": "2018-09-05T23:22:43.077+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "141561",
                    "issueId": "13182995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182995/worklog/141589",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io commented on issue #2512: ARROW-3171: [Java] Enable checkstyle for line length and indentation\nURL: https://github.com/apache/arrow/pull/2512#issuecomment-418929654\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2512?src=pr&el=h1) Report\n   > Merging [#2512](https://codecov.io/gh/apache/arrow/pull/2512?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/21ef18bb6a2aeec47c0725efea81bbae298f63ba?src=pr&el=desc) will **increase** coverage by `1.15%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2512/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2512?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2512      +/-   ##\n   ==========================================\n   + Coverage   86.33%   87.49%   +1.15%     \n   ==========================================\n     Files         308      259      -49     \n     Lines       47120    44797    -2323     \n   ==========================================\n   - Hits        40682    39194    -1488     \n   + Misses       6366     5603     -763     \n   + Partials       72        0      -72\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2512?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/2512/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | | |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2512/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | | |\n   | [go/arrow/internal/testing/tools/bool.go](https://codecov.io/gh/apache/arrow/pull/2512/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvdGVzdGluZy90b29scy9ib29sLmdv) | | |\n   | [go/arrow/internal/bitutil/bitutil.go](https://codecov.io/gh/apache/arrow/pull/2512/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvYml0dXRpbC9iaXR1dGlsLmdv) | | |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2512/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | | |\n   | [go/arrow/array/null.go](https://codecov.io/gh/apache/arrow/pull/2512/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVsbC5nbw==) | | |\n   | [go/arrow/math/uint64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2512/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYXZ4Ml9hbWQ2NC5nbw==) | | |\n   | [go/arrow/array/builder.go](https://codecov.io/gh/apache/arrow/pull/2512/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVpbGRlci5nbw==) | | |\n   | [go/arrow/array/binary.go](https://codecov.io/gh/apache/arrow/pull/2512/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYmluYXJ5Lmdv) | | |\n   | [go/arrow/array/numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2512/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVtZXJpYy5nZW4uZ28=) | | |\n   | ... and [39 more](https://codecov.io/gh/apache/arrow/pull/2512/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2512?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2512?src=pr&el=footer). Last update [21ef18b...59396db](https://codecov.io/gh/apache/arrow/pull/2512?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-06T01:03:53.870+0000",
                    "updated": "2018-09-06T01:03:53.870+0000",
                    "started": "2018-09-06T01:03:53.869+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "141589",
                    "issueId": "13182995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182995/worklog/141592",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "codecov-io edited a comment on issue #2512: ARROW-3171: [Java] Enable checkstyle for line length and indentation\nURL: https://github.com/apache/arrow/pull/2512#issuecomment-418929654\n \n \n   # [Codecov](https://codecov.io/gh/apache/arrow/pull/2512?src=pr&el=h1) Report\n   > Merging [#2512](https://codecov.io/gh/apache/arrow/pull/2512?src=pr&el=desc) into [master](https://codecov.io/gh/apache/arrow/commit/21ef18bb6a2aeec47c0725efea81bbae298f63ba?src=pr&el=desc) will **increase** coverage by `1.15%`.\n   > The diff coverage is `n/a`.\n   \n   [![Impacted file tree graph](https://codecov.io/gh/apache/arrow/pull/2512/graphs/tree.svg?width=650&token=LpTCFbqVT1&height=150&src=pr)](https://codecov.io/gh/apache/arrow/pull/2512?src=pr&el=tree)\n   \n   ```diff\n   @@            Coverage Diff             @@\n   ##           master    #2512      +/-   ##\n   ==========================================\n   + Coverage   86.33%   87.49%   +1.15%     \n   ==========================================\n     Files         308      259      -49     \n     Lines       47120    44797    -2323     \n   ==========================================\n   - Hits        40682    39194    -1488     \n   + Misses       6366     5603     -763     \n   + Partials       72        0      -72\n   ```\n   \n   \n   | [Impacted Files](https://codecov.io/gh/apache/arrow/pull/2512?src=pr&el=tree) | Coverage \u0394 | |\n   |---|---|---|\n   | [go/arrow/datatype\\_nested.go](https://codecov.io/gh/apache/arrow/pull/2512/diff?src=pr&el=tree#diff-Z28vYXJyb3cvZGF0YXR5cGVfbmVzdGVkLmdv) | | |\n   | [go/arrow/math/uint64\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2512/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYW1kNjQuZ28=) | | |\n   | [go/arrow/internal/testing/tools/bool.go](https://codecov.io/gh/apache/arrow/pull/2512/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvdGVzdGluZy90b29scy9ib29sLmdv) | | |\n   | [go/arrow/internal/bitutil/bitutil.go](https://codecov.io/gh/apache/arrow/pull/2512/diff?src=pr&el=tree#diff-Z28vYXJyb3cvaW50ZXJuYWwvYml0dXRpbC9iaXR1dGlsLmdv) | | |\n   | [go/arrow/memory/memory\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2512/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWVtb3J5L21lbW9yeV9hdngyX2FtZDY0Lmdv) | | |\n   | [go/arrow/array/null.go](https://codecov.io/gh/apache/arrow/pull/2512/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVsbC5nbw==) | | |\n   | [go/arrow/math/uint64\\_avx2\\_amd64.go](https://codecov.io/gh/apache/arrow/pull/2512/diff?src=pr&el=tree#diff-Z28vYXJyb3cvbWF0aC91aW50NjRfYXZ4Ml9hbWQ2NC5nbw==) | | |\n   | [go/arrow/array/builder.go](https://codecov.io/gh/apache/arrow/pull/2512/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYnVpbGRlci5nbw==) | | |\n   | [go/arrow/array/binary.go](https://codecov.io/gh/apache/arrow/pull/2512/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvYmluYXJ5Lmdv) | | |\n   | [go/arrow/array/numeric.gen.go](https://codecov.io/gh/apache/arrow/pull/2512/diff?src=pr&el=tree#diff-Z28vYXJyb3cvYXJyYXkvbnVtZXJpYy5nZW4uZ28=) | | |\n   | ... and [39 more](https://codecov.io/gh/apache/arrow/pull/2512/diff?src=pr&el=tree-more) | |\n   \n   ------\n   \n   [Continue to review full report at Codecov](https://codecov.io/gh/apache/arrow/pull/2512?src=pr&el=continue).\n   > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)\n   > `\u0394 = absolute <relative> (impact)`, `\u00f8 = not affected`, `? = missing data`\n   > Powered by [Codecov](https://codecov.io/gh/apache/arrow/pull/2512?src=pr&el=footer). Last update [21ef18b...59396db](https://codecov.io/gh/apache/arrow/pull/2512?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).\n   \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-06T01:20:49.032+0000",
                    "updated": "2018-09-06T01:20:49.032+0000",
                    "started": "2018-09-06T01:20:49.031+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "141592",
                    "issueId": "13182995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182995/worklog/142251",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler commented on issue #2512: ARROW-3171: [Java] Enable checkstyle for line length and indentation\nURL: https://github.com/apache/arrow/pull/2512#issuecomment-419505374\n \n \n   ping @icexelloss @jacques-n , look ok to merge?\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-07T17:09:08.736+0000",
                    "updated": "2018-09-07T17:09:08.736+0000",
                    "started": "2018-09-07T17:09:08.736+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "142251",
                    "issueId": "13182995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182995/worklog/142355",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "jacques-n commented on issue #2512: ARROW-3171: [Java] Enable checkstyle for line length and indentation\nURL: https://github.com/apache/arrow/pull/2512#issuecomment-419587308\n \n \n   lgtm +1\n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-07T22:55:06.788+0000",
                    "updated": "2018-09-07T22:55:06.788+0000",
                    "started": "2018-09-07T22:55:06.787+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "142355",
                    "issueId": "13182995"
                },
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182995/worklog/142365",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=githubbot",
                        "name": "githubbot",
                        "key": "githubbot",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?avatarId=10452",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&avatarId=10452",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&avatarId=10452",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&avatarId=10452"
                        },
                        "displayName": "ASF GitHub Bot",
                        "active": true,
                        "timeZone": "Etc/UTC"
                    },
                    "comment": "BryanCutler closed pull request #2512: ARROW-3171: [Java] Enable checkstyle for line length and indentation\nURL: https://github.com/apache/arrow/pull/2512\n \n \n   \n\nThis is a PR merged from a forked repository.\nAs GitHub hides the original diff on merge, it is displayed below for\nthe sake of provenance:\n\nAs this is a foreign pull request (from a fork), the diff is supplied\nbelow (as it won't show otherwise due to GitHub magic):\n\ndiff --git a/java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrow.java b/java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrow.java\nindex a9d6e44bd3..1fe5ef1dfe 100644\n--- a/java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrow.java\n+++ b/java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrow.java\n@@ -75,14 +75,17 @@\n    * If you wish to use specific TimeZone or Locale for any Date, Time and Timestamp datasets, you may want use\n    * overloaded API that taken Calendar object instance.\n    *\n-   * @param connection Database connection to be used. This method will not close the passed connection object. Since hte caller has passed\n-   *                   the connection object it's the responsibility of the caller to close or return the connection to the pool.\n+   * @param connection Database connection to be used. This method will not close the passed connection object. Since\n+   *                   the caller has passed the connection object it's the responsibility of the caller to close or\n+   *                   return the connection to the pool.\n    * @param query      The DB Query to fetch the data.\n    * @param allocator  Memory allocator\n    * @return Arrow Data Objects {@link VectorSchemaRoot}\n-   * @throws SQLException Propagate any SQL Exceptions to the caller after closing any resources opened such as ResultSet and Statement objects.\n+   * @throws SQLException Propagate any SQL Exceptions to the caller after closing any resources opened such as\n+   *                      ResultSet and Statement objects.\n    */\n-  public static VectorSchemaRoot sqlToArrow(Connection connection, String query, BaseAllocator allocator) throws SQLException, IOException {\n+  public static VectorSchemaRoot sqlToArrow(Connection connection, String query, BaseAllocator allocator)\n+      throws SQLException, IOException {\n     Preconditions.checkNotNull(connection, \"JDBC connection object can not be null\");\n     Preconditions.checkArgument(query != null && query.length() > 0, \"SQL query can not be null or empty\");\n     Preconditions.checkNotNull(allocator, \"Memory allocator object can not be null\");\n@@ -93,15 +96,21 @@ public static VectorSchemaRoot sqlToArrow(Connection connection, String query, B\n   /**\n    * For the given SQL query, execute and fetch the data from Relational DB and convert it to Arrow objects.\n    *\n-   * @param connection Database connection to be used. This method will not close the passed connection object. Since hte caller has passed\n-   *                   the connection object it's the responsibility of the caller to close or return the connection to the pool.\n+   * @param connection Database connection to be used. This method will not close the passed connection object. Since\n+   *                   the caller has passed the connection object it's the responsibility of the caller to close or\n+   *                   return the connection to the pool.\n    * @param query      The DB Query to fetch the data.\n    * @param allocator  Memory allocator\n    * @param calendar   Calendar object to use to handle Date, Time and Timestamp datasets.\n    * @return Arrow Data Objects {@link VectorSchemaRoot}\n-   * @throws SQLException Propagate any SQL Exceptions to the caller after closing any resources opened such as ResultSet and Statement objects.\n+   * @throws SQLException Propagate any SQL Exceptions to the caller after closing any resources opened such as\n+   *                      ResultSet and Statement objects.\n    */\n-  public static VectorSchemaRoot sqlToArrow(Connection connection, String query, BaseAllocator allocator, Calendar calendar) throws SQLException, IOException {\n+  public static VectorSchemaRoot sqlToArrow(\n+      Connection connection,\n+      String query,\n+      BaseAllocator allocator,\n+      Calendar calendar) throws SQLException, IOException {\n     Preconditions.checkNotNull(connection, \"JDBC connection object can not be null\");\n     Preconditions.checkArgument(query != null && query.length() > 0, \"SQL query can not be null or empty\");\n     Preconditions.checkNotNull(allocator, \"Memory allocator object can not be null\");\n@@ -113,8 +122,8 @@ public static VectorSchemaRoot sqlToArrow(Connection connection, String query, B\n   }\n \n   /**\n-   * For the given JDBC {@link ResultSet}, fetch the data from Relational DB and convert it to Arrow objects. This method\n-   * uses the default RootAllocator and Calendar object.\n+   * For the given JDBC {@link ResultSet}, fetch the data from Relational DB and convert it to Arrow objects. This\n+   * method uses the default RootAllocator and Calendar object.\n    *\n    * @param resultSet\n    * @return Arrow Data Objects {@link VectorSchemaRoot}\n@@ -134,7 +143,8 @@ public static VectorSchemaRoot sqlToArrow(ResultSet resultSet) throws SQLExcepti\n    * @return Arrow Data Objects {@link VectorSchemaRoot}\n    * @throws SQLException\n    */\n-  public static VectorSchemaRoot sqlToArrow(ResultSet resultSet, BaseAllocator allocator) throws SQLException, IOException {\n+  public static VectorSchemaRoot sqlToArrow(ResultSet resultSet, BaseAllocator allocator)\n+      throws SQLException, IOException {\n     Preconditions.checkNotNull(resultSet, \"JDBC ResultSet object can not be null\");\n     Preconditions.checkNotNull(allocator, \"Memory Allocator object can not be null\");\n \n@@ -168,7 +178,8 @@ public static VectorSchemaRoot sqlToArrow(ResultSet resultSet, Calendar calendar\n    * @return Arrow Data Objects {@link VectorSchemaRoot}\n    * @throws SQLException\n    */\n-  public static VectorSchemaRoot sqlToArrow(ResultSet resultSet, BaseAllocator allocator, Calendar calendar) throws SQLException, IOException {\n+  public static VectorSchemaRoot sqlToArrow(ResultSet resultSet, BaseAllocator allocator, Calendar calendar)\n+      throws SQLException, IOException {\n     Preconditions.checkNotNull(resultSet, \"JDBC ResultSet object can not be null\");\n     Preconditions.checkNotNull(allocator, \"Memory Allocator object can not be null\");\n     Preconditions.checkNotNull(calendar, \"Calendar object can not be null\");\ndiff --git a/java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrowUtils.java b/java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrowUtils.java\nindex 407e8ebf0b..4169ec5cfb 100644\n--- a/java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrowUtils.java\n+++ b/java/adapter/jdbc/src/main/java/org/apache/arrow/adapter/jdbc/JdbcToArrowUtils.java\n@@ -179,7 +179,8 @@ public static Schema jdbcToArrowSchema(ResultSetMetaData rsmd, Calendar calendar\n           fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Time(TimeUnit.MILLISECOND, 32)), null));\n           break;\n         case Types.TIMESTAMP:\n-          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Timestamp(TimeUnit.MILLISECOND, calendar.getTimeZone().getID())), null));\n+          fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Timestamp(TimeUnit.MILLISECOND,\n+              calendar.getTimeZone().getID())), null));\n           break;\n         case Types.BINARY:\n         case Types.VARBINARY:\n@@ -187,8 +188,8 @@ public static Schema jdbcToArrowSchema(ResultSetMetaData rsmd, Calendar calendar\n           fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Binary()), null));\n           break;\n         case Types.ARRAY:\n-// TODO Need to handle this type\n-//        fields.add(new Field(\"list\", FieldType.nullable(new ArrowType.List()), null));\n+          // TODO Need to handle this type\n+          // fields.add(new Field(\"list\", FieldType.nullable(new ArrowType.List()), null));\n           break;\n         case Types.CLOB:\n           fields.add(new Field(columnName, FieldType.nullable(new ArrowType.Utf8()), null));\n@@ -226,7 +227,8 @@ private static void allocateVectors(VectorSchemaRoot root, int size) {\n    * @param root Arrow {@link VectorSchemaRoot} object to populate\n    * @throws SQLException\n    */\n-  public static void jdbcToArrowVectors(ResultSet rs, VectorSchemaRoot root, Calendar calendar) throws SQLException, IOException {\n+  public static void jdbcToArrowVectors(ResultSet rs, VectorSchemaRoot root, Calendar calendar)\n+      throws SQLException, IOException {\n \n     Preconditions.checkNotNull(rs, \"JDBC ResultSet object can't be null\");\n     Preconditions.checkNotNull(root, \"JDBC ResultSet object can't be null\");\n@@ -449,7 +451,11 @@ private static void updateVector(TimeMilliVector timeMilliVector, Time time, boo\n     timeMilliVector.setValueCount(rowCount + 1);\n   }\n \n-  private static void updateVector(TimeStampVector timeStampVector, Timestamp timestamp, boolean isNonNull, int rowCount) {\n+  private static void updateVector(\n+      TimeStampVector timeStampVector,\n+      Timestamp timestamp,\n+      boolean isNonNull,\n+      int rowCount) {\n     //TODO: Need to handle precision such as milli, micro, nano\n     timeStampVector.setValueCount(rowCount + 1);\n     if (timestamp != null) {\n@@ -459,7 +465,11 @@ private static void updateVector(TimeStampVector timeStampVector, Timestamp time\n     }\n   }\n \n-  private static void updateVector(VarBinaryVector varBinaryVector, InputStream is, boolean isNonNull, int rowCount) throws IOException {\n+  private static void updateVector(\n+      VarBinaryVector varBinaryVector,\n+      InputStream is,\n+      boolean isNonNull,\n+      int rowCount) throws IOException {\n     varBinaryVector.setValueCount(rowCount + 1);\n     if (isNonNull && is != null) {\n       VarBinaryHolder holder = new VarBinaryHolder();\n@@ -484,7 +494,11 @@ private static void updateVector(VarBinaryVector varBinaryVector, InputStream is\n     }\n   }\n \n-  private static void updateVector(VarCharVector varcharVector, Clob clob, boolean isNonNull, int rowCount) throws SQLException, IOException {\n+  private static void updateVector(\n+      VarCharVector varcharVector,\n+      Clob clob,\n+      boolean isNonNull,\n+      int rowCount) throws SQLException, IOException {\n     varcharVector.setValueCount(rowCount + 1);\n     if (isNonNull && clob != null) {\n       VarCharHolder holder = new VarCharHolder();\n@@ -510,7 +524,8 @@ private static void updateVector(VarCharVector varcharVector, Clob clob, boolean\n     }\n   }\n \n-  private static void updateVector(VarBinaryVector varBinaryVector, Blob blob, boolean isNonNull, int rowCount) throws SQLException, IOException {\n+  private static void updateVector(VarBinaryVector varBinaryVector, Blob blob, boolean isNonNull, int rowCount)\n+      throws SQLException, IOException {\n     updateVector(varBinaryVector, blob != null ? blob.getBinaryStream() : null, isNonNull, rowCount);\n   }\n \ndiff --git a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/AbstractJdbcToArrowTest.java b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/AbstractJdbcToArrowTest.java\nindex d02638e8f5..16c88cab94 100644\n--- a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/AbstractJdbcToArrowTest.java\n+++ b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/AbstractJdbcToArrowTest.java\n@@ -93,7 +93,8 @@ public void destroy() throws SQLException {\n    * @throws ClassNotFoundException\n    * @throws IOException\n    */\n-  public static Object[][] prepareTestData(String[] testFiles, Class clss) throws SQLException, ClassNotFoundException, IOException {\n+  public static Object[][] prepareTestData(String[] testFiles, Class clss)\n+      throws SQLException, ClassNotFoundException, IOException {\n     Object[][] tableArr = new Object[testFiles.length][];\n     int i = 0;\n     for (String testFile : testFiles) {\ndiff --git a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowCharSetTest.java b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowCharSetTest.java\nindex 9e54252874..404daff7a1 100644\n--- a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowCharSetTest.java\n+++ b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowCharSetTest.java\n@@ -42,8 +42,8 @@\n import org.junit.runners.Parameterized.Parameters;\n \n /**\n- * JUnit Test Class which contains methods to test JDBC to Arrow data conversion functionality with UTF-8 Charset, including\n- * the multi-byte CJK characters for H2 database\n+ * JUnit Test Class which contains methods to test JDBC to Arrow data conversion functionality with UTF-8 Charset,\n+ * including the multi-byte CJK characters for H2 database\n  */\n @RunWith(Parameterized.class)\n public class JdbcToArrowCharSetTest extends AbstractJdbcToArrowTest {\n@@ -52,10 +52,10 @@\n   private static final String CLOB = \"CLOB_FIELD15\";\n \n   private static final String[] testFiles = {\n-          \"h2/test1_charset_h2.yml\",\n-          \"h2/test1_charset_ch_h2.yml\",\n-          \"h2/test1_charset_jp_h2.yml\",\n-          \"h2/test1_charset_kr_h2.yml\"\n+    \"h2/test1_charset_h2.yml\",\n+    \"h2/test1_charset_ch_h2.yml\",\n+    \"h2/test1_charset_jp_h2.yml\",\n+    \"h2/test1_charset_kr_h2.yml\"\n   };\n \n   /**\n@@ -106,13 +106,16 @@ public void setUp() throws SQLException, ClassNotFoundException {\n    */\n   @Test\n   public void testJdbcToArroValues() throws SQLException, IOException {\n-    testDataSets(JdbcToArrow.sqlToArrow(conn, table.getQuery(), new RootAllocator(Integer.MAX_VALUE), Calendar.getInstance()));\n+    testDataSets(JdbcToArrow.sqlToArrow(conn, table.getQuery(), new RootAllocator(Integer.MAX_VALUE),\n+        Calendar.getInstance()));\n     testDataSets(JdbcToArrow.sqlToArrow(conn, table.getQuery(), new RootAllocator(Integer.MAX_VALUE)));\n-    testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery()), new RootAllocator(Integer.MAX_VALUE),\n-            Calendar.getInstance()));\n+    testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery()),\n+        new RootAllocator(Integer.MAX_VALUE), Calendar.getInstance()));\n     testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery())));\n-    testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery()), new RootAllocator(Integer.MAX_VALUE)));\n-    testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery()), Calendar.getInstance()));\n+    testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery()),\n+        new RootAllocator(Integer.MAX_VALUE)));\n+    testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery()),\n+        Calendar.getInstance()));\n   }\n \n   /**\n@@ -122,12 +125,12 @@ public void testJdbcToArroValues() throws SQLException, IOException {\n    */\n   public void testDataSets(VectorSchemaRoot root) {\n     assertVarcharVectorValues((VarCharVector) root.getVector(CLOB), table.getRowCount(),\n-            getCharArrayWithCharSet(table.getValues(), CLOB, StandardCharsets.UTF_8));\n+        getCharArrayWithCharSet(table.getValues(), CLOB, StandardCharsets.UTF_8));\n \n     assertVarcharVectorValues((VarCharVector) root.getVector(VARCHAR), table.getRowCount(),\n-            getCharArrayWithCharSet(table.getValues(), VARCHAR, StandardCharsets.UTF_8));\n+        getCharArrayWithCharSet(table.getValues(), VARCHAR, StandardCharsets.UTF_8));\n \n     assertVarcharVectorValues((VarCharVector) root.getVector(CHAR), table.getRowCount(),\n-            getCharArrayWithCharSet(table.getValues(), CHAR, StandardCharsets.UTF_8));\n+        getCharArrayWithCharSet(table.getValues(), CHAR, StandardCharsets.UTF_8));\n   }\n }\ndiff --git a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowDataTypesTest.java b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowDataTypesTest.java\nindex 3e533adb38..9a54305848 100644\n--- a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowDataTypesTest.java\n+++ b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowDataTypesTest.java\n@@ -62,8 +62,8 @@\n import org.junit.runners.Parameterized.Parameters;\n \n /**\n- * JUnit Test Class which contains methods to test JDBC to Arrow data conversion functionality with various data types for H2 database\n- * using multiple test data files\n+ * JUnit Test Class which contains methods to test JDBC to Arrow data conversion functionality with various data types\n+ * for H2 database using multiple test data files\n  */\n @RunWith(Parameterized.class)\n public class JdbcToArrowDataTypesTest extends AbstractJdbcToArrowTest {\n@@ -87,23 +87,23 @@\n   private static final String VARCHAR = \"varchar\";\n \n   private static final String[] testFiles = {\n-          \"h2/test1_bigint_h2.yml\",\n-          \"h2/test1_binary_h2.yml\",\n-          \"h2/test1_bit_h2.yml\",\n-          \"h2/test1_blob_h2.yml\",\n-          \"h2/test1_bool_h2.yml\",\n-          \"h2/test1_char_h2.yml\",\n-          \"h2/test1_clob_h2.yml\",\n-          \"h2/test1_date_h2.yml\",\n-          \"h2/test1_decimal_h2.yml\",\n-          \"h2/test1_double_h2.yml\",\n-          \"h2/test1_int_h2.yml\",\n-          \"h2/test1_real_h2.yml\",\n-          \"h2/test1_smallint_h2.yml\",\n-          \"h2/test1_time_h2.yml\",\n-          \"h2/test1_timestamp_h2.yml\",\n-          \"h2/test1_tinyint_h2.yml\",\n-          \"h2/test1_varchar_h2.yml\"\n+    \"h2/test1_bigint_h2.yml\",\n+    \"h2/test1_binary_h2.yml\",\n+    \"h2/test1_bit_h2.yml\",\n+    \"h2/test1_blob_h2.yml\",\n+    \"h2/test1_bool_h2.yml\",\n+    \"h2/test1_char_h2.yml\",\n+    \"h2/test1_clob_h2.yml\",\n+    \"h2/test1_date_h2.yml\",\n+    \"h2/test1_decimal_h2.yml\",\n+    \"h2/test1_double_h2.yml\",\n+    \"h2/test1_int_h2.yml\",\n+    \"h2/test1_real_h2.yml\",\n+    \"h2/test1_smallint_h2.yml\",\n+    \"h2/test1_time_h2.yml\",\n+    \"h2/test1_timestamp_h2.yml\",\n+    \"h2/test1_tinyint_h2.yml\",\n+    \"h2/test1_varchar_h2.yml\"\n   };\n \n   /**\n@@ -133,12 +133,14 @@ public JdbcToArrowDataTypesTest(Table table) {\n    */\n   @Test\n   public void testJdbcToArroValues() throws SQLException, IOException {\n-    testDataSets(JdbcToArrow.sqlToArrow(conn, table.getQuery(), new RootAllocator(Integer.MAX_VALUE), Calendar.getInstance()));\n+    testDataSets(JdbcToArrow.sqlToArrow(conn, table.getQuery(), new RootAllocator(Integer.MAX_VALUE),\n+        Calendar.getInstance()));\n     testDataSets(JdbcToArrow.sqlToArrow(conn, table.getQuery(), new RootAllocator(Integer.MAX_VALUE)));\n-    testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery()), new RootAllocator(Integer.MAX_VALUE),\n-            Calendar.getInstance()));\n+    testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery()),\n+        new RootAllocator(Integer.MAX_VALUE), Calendar.getInstance()));\n     testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery())));\n-    testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery()), new RootAllocator(Integer.MAX_VALUE)));\n+    testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery()),\n+        new RootAllocator(Integer.MAX_VALUE)));\n     testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery()), Calendar.getInstance()));\n   }\n \n@@ -150,49 +152,63 @@ public void testJdbcToArroValues() throws SQLException, IOException {\n   public void testDataSets(VectorSchemaRoot root) {\n     switch (table.getType()) {\n       case BIGINT:\n-        assertBigIntVectorValues((BigIntVector) root.getVector(table.getVector()), table.getValues().length, table.getLongValues());\n+        assertBigIntVectorValues((BigIntVector) root.getVector(table.getVector()), table.getValues().length,\n+            table.getLongValues());\n         break;\n       case BINARY:\n       case BLOB:\n-        assertVarBinaryVectorValues((VarBinaryVector) root.getVector(table.getVector()), table.getValues().length, table.getBinaryValues());\n+        assertVarBinaryVectorValues((VarBinaryVector) root.getVector(table.getVector()), table.getValues().length,\n+            table.getBinaryValues());\n         break;\n       case BIT:\n-        assertBitVectorValues((BitVector) root.getVector(table.getVector()), table.getValues().length, table.getIntValues());\n+        assertBitVectorValues((BitVector) root.getVector(table.getVector()), table.getValues().length,\n+            table.getIntValues());\n         break;\n       case BOOL:\n-        assertBooleanVectorValues((BitVector) root.getVector(table.getVector()), table.getValues().length, table.getBoolValues());\n+        assertBooleanVectorValues((BitVector) root.getVector(table.getVector()), table.getValues().length,\n+            table.getBoolValues());\n         break;\n       case CHAR:\n       case VARCHAR:\n       case CLOB:\n-        assertVarcharVectorValues((VarCharVector) root.getVector(table.getVector()), table.getValues().length, table.getCharValues());\n+        assertVarcharVectorValues((VarCharVector) root.getVector(table.getVector()), table.getValues().length,\n+            table.getCharValues());\n         break;\n       case DATE:\n-        assertDateVectorValues((DateMilliVector) root.getVector(table.getVector()), table.getValues().length, table.getLongValues());\n+        assertDateVectorValues((DateMilliVector) root.getVector(table.getVector()), table.getValues().length,\n+            table.getLongValues());\n         break;\n       case TIME:\n-        assertTimeVectorValues((TimeMilliVector) root.getVector(table.getVector()), table.getValues().length, table.getLongValues());\n+        assertTimeVectorValues((TimeMilliVector) root.getVector(table.getVector()), table.getValues().length,\n+            table.getLongValues());\n         break;\n       case TIMESTAMP:\n-        assertTimeStampVectorValues((TimeStampVector) root.getVector(table.getVector()), table.getValues().length, table.getLongValues());\n+        assertTimeStampVectorValues((TimeStampVector) root.getVector(table.getVector()), table.getValues().length,\n+            table.getLongValues());\n         break;\n       case DECIMAL:\n-        assertDecimalVectorValues((DecimalVector) root.getVector(table.getVector()), table.getValues().length, table.getBigDecimalValues());\n+        assertDecimalVectorValues((DecimalVector) root.getVector(table.getVector()), table.getValues().length,\n+            table.getBigDecimalValues());\n         break;\n       case DOUBLE:\n-        assertFloat8VectorValues((Float8Vector) root.getVector(table.getVector()), table.getValues().length, table.getDoubleValues());\n+        assertFloat8VectorValues((Float8Vector) root.getVector(table.getVector()), table.getValues().length,\n+            table.getDoubleValues());\n         break;\n       case INT:\n-        assertIntVectorValues((IntVector) root.getVector(table.getVector()), table.getValues().length, table.getIntValues());\n+        assertIntVectorValues((IntVector) root.getVector(table.getVector()), table.getValues().length,\n+            table.getIntValues());\n         break;\n       case SMALLINT:\n-        assertSmallIntVectorValues((SmallIntVector) root.getVector(table.getVector()), table.getValues().length, table.getIntValues());\n+        assertSmallIntVectorValues((SmallIntVector) root.getVector(table.getVector()), table.getValues().length,\n+            table.getIntValues());\n         break;\n       case TINYINT:\n-        assertTinyIntVectorValues((TinyIntVector) root.getVector(table.getVector()), table.getValues().length, table.getIntValues());\n+        assertTinyIntVectorValues((TinyIntVector) root.getVector(table.getVector()), table.getValues().length,\n+            table.getIntValues());\n         break;\n       case REAL:\n-        assertFloat4VectorValues((Float4Vector) root.getVector(table.getVector()), table.getValues().length, table.getFloatValues());\n+        assertFloat4VectorValues((Float4Vector) root.getVector(table.getVector()), table.getValues().length,\n+            table.getFloatValues());\n         break;\n     }\n   }\ndiff --git a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowNullTest.java b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowNullTest.java\nindex 7df5278288..96939875a2 100644\n--- a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowNullTest.java\n+++ b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowNullTest.java\n@@ -49,7 +49,8 @@\n import org.junit.runners.Parameterized.Parameters;\n \n /**\n- * JUnit Test Class which contains methods to test JDBC to Arrow data conversion functionality with null values for H2 database\n+ * JUnit Test Class which contains methods to test JDBC to Arrow data conversion functionality with null values for\n+ * H2 database\n  */\n @RunWith(Parameterized.class)\n public class JdbcToArrowNullTest extends AbstractJdbcToArrowTest {\n@@ -58,8 +59,8 @@\n   private static final String SELECTED_NULL_COLUMN = \"selected_null_column\";\n \n   private static final String[] testFiles = {\n-          \"h2/test1_all_datatypes_null_h2.yml\",\n-          \"h2/test1_selected_datatypes_null_h2.yml\"\n+    \"h2/test1_all_datatypes_null_h2.yml\",\n+    \"h2/test1_selected_datatypes_null_h2.yml\"\n   };\n \n   /**\n@@ -89,12 +90,14 @@ public JdbcToArrowNullTest(Table table) {\n    */\n   @Test\n   public void testJdbcToArroValues() throws SQLException, IOException {\n-    testDataSets(JdbcToArrow.sqlToArrow(conn, table.getQuery(), new RootAllocator(Integer.MAX_VALUE), Calendar.getInstance()));\n+    testDataSets(JdbcToArrow.sqlToArrow(conn, table.getQuery(), new RootAllocator(Integer.MAX_VALUE),\n+        Calendar.getInstance()));\n     testDataSets(JdbcToArrow.sqlToArrow(conn, table.getQuery(), new RootAllocator(Integer.MAX_VALUE)));\n-    testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery()), new RootAllocator(Integer.MAX_VALUE),\n-            Calendar.getInstance()));\n+    testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery()),\n+        new RootAllocator(Integer.MAX_VALUE), Calendar.getInstance()));\n     testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery())));\n-    testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery()), new RootAllocator(Integer.MAX_VALUE)));\n+    testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery()),\n+        new RootAllocator(Integer.MAX_VALUE)));\n     testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery()), Calendar.getInstance()));\n   }\n \ndiff --git a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowTest.java b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowTest.java\nindex f2751d9111..381ace46c3 100644\n--- a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowTest.java\n+++ b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowTest.java\n@@ -71,8 +71,8 @@\n import org.junit.runners.Parameterized.Parameters;\n \n /**\n- * JUnit Test Class which contains methods to test JDBC to Arrow data conversion functionality with various data types for H2 database\n- * using single test data file\n+ * JUnit Test Class which contains methods to test JDBC to Arrow data conversion functionality with various data types\n+ * for H2 database using single test data file\n  */\n @RunWith(Parameterized.class)\n public class JdbcToArrowTest extends AbstractJdbcToArrowTest {\n@@ -124,13 +124,16 @@ public JdbcToArrowTest(Table table) {\n    */\n   @Test\n   public void testJdbcToArroValues() throws SQLException, IOException {\n-    testDataSets(JdbcToArrow.sqlToArrow(conn, table.getQuery(), new RootAllocator(Integer.MAX_VALUE), Calendar.getInstance()));\n+    testDataSets(JdbcToArrow.sqlToArrow(conn, table.getQuery(), new RootAllocator(Integer.MAX_VALUE),\n+        Calendar.getInstance()));\n     testDataSets(JdbcToArrow.sqlToArrow(conn, table.getQuery(), new RootAllocator(Integer.MAX_VALUE)));\n-    testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery()), new RootAllocator(Integer.MAX_VALUE),\n-            Calendar.getInstance()));\n+    testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery()),\n+        new RootAllocator(Integer.MAX_VALUE), Calendar.getInstance()));\n     testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery())));\n-    testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery()), new RootAllocator(Integer.MAX_VALUE)));\n-    testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery()), Calendar.getInstance()));\n+    testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery()),\n+        new RootAllocator(Integer.MAX_VALUE)));\n+    testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery()),\n+        Calendar.getInstance()));\n   }\n \n   /**\ndiff --git a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowTimeZoneTest.java b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowTimeZoneTest.java\nindex 87003d001e..559288ee1a 100644\n--- a/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowTimeZoneTest.java\n+++ b/java/adapter/jdbc/src/test/java/org/apache/arrow/adapter/jdbc/h2/JdbcToArrowTimeZoneTest.java\n@@ -60,15 +60,15 @@\n   private static final String PST_TIMESTAMP = \"pst_timestamp\";\n \n   private static final String[] testFiles = {\n-          \"h2/test1_est_date_h2.yml\",\n-          \"h2/test1_est_time_h2.yml\",\n-          \"h2/test1_est_timestamp_h2.yml\",\n-          \"h2/test1_gmt_date_h2.yml\",\n-          \"h2/test1_gmt_time_h2.yml\",\n-          \"h2/test1_gmt_timestamp_h2.yml\",\n-          \"h2/test1_pst_date_h2.yml\",\n-          \"h2/test1_pst_time_h2.yml\",\n-          \"h2/test1_pst_timestamp_h2.yml\"\n+    \"h2/test1_est_date_h2.yml\",\n+    \"h2/test1_est_time_h2.yml\",\n+    \"h2/test1_est_timestamp_h2.yml\",\n+    \"h2/test1_gmt_date_h2.yml\",\n+    \"h2/test1_gmt_time_h2.yml\",\n+    \"h2/test1_gmt_timestamp_h2.yml\",\n+    \"h2/test1_pst_date_h2.yml\",\n+    \"h2/test1_pst_time_h2.yml\",\n+    \"h2/test1_pst_timestamp_h2.yml\"\n   };\n \n   /**\n@@ -100,11 +100,11 @@ public JdbcToArrowTimeZoneTest(Table table) {\n   @Test\n   public void testJdbcToArroValues() throws SQLException, IOException {\n     testDataSets(JdbcToArrow.sqlToArrow(conn, table.getQuery(), new RootAllocator(Integer.MAX_VALUE),\n-            Calendar.getInstance(TimeZone.getTimeZone(table.getTimezone()))));\n-    testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery()), new RootAllocator(Integer.MAX_VALUE),\n-            Calendar.getInstance(TimeZone.getTimeZone(table.getTimezone()))));\n+        Calendar.getInstance(TimeZone.getTimeZone(table.getTimezone()))));\n     testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery()),\n-            Calendar.getInstance(TimeZone.getTimeZone(table.getTimezone()))));\n+        new RootAllocator(Integer.MAX_VALUE), Calendar.getInstance(TimeZone.getTimeZone(table.getTimezone()))));\n+    testDataSets(JdbcToArrow.sqlToArrow(conn.createStatement().executeQuery(table.getQuery()),\n+        Calendar.getInstance(TimeZone.getTimeZone(table.getTimezone()))));\n   }\n \n   /**\n@@ -117,17 +117,20 @@ public void testDataSets(VectorSchemaRoot root) {\n       case EST_DATE:\n       case GMT_DATE:\n       case PST_DATE:\n-        assertDateVectorValues((DateMilliVector) root.getVector(table.getVector()), table.getValues().length, table.getLongValues());\n+        assertDateVectorValues((DateMilliVector) root.getVector(table.getVector()), table.getValues().length,\n+            table.getLongValues());\n         break;\n       case EST_TIME:\n       case GMT_TIME:\n       case PST_TIME:\n-        assertTimeVectorValues((TimeMilliVector) root.getVector(table.getVector()), table.getValues().length, table.getLongValues());\n+        assertTimeVectorValues((TimeMilliVector) root.getVector(table.getVector()), table.getValues().length,\n+            table.getLongValues());\n         break;\n       case EST_TIMESTAMP:\n       case GMT_TIMESTAMP:\n       case PST_TIMESTAMP:\n-        assertTimeStampVectorValues((TimeStampVector) root.getVector(table.getVector()), table.getValues().length, table.getLongValues());\n+        assertTimeStampVectorValues((TimeStampVector) root.getVector(table.getVector()), table.getValues().length,\n+            table.getLongValues());\n         break;\n     }\n   }\ndiff --git a/java/dev/checkstyle/checkstyle.xml b/java/dev/checkstyle/checkstyle.xml\nindex 62132e50d8..1efd4d39de 100644\n--- a/java/dev/checkstyle/checkstyle.xml\n+++ b/java/dev/checkstyle/checkstyle.xml\n@@ -84,7 +84,7 @@\n             <property name=\"allowNonPrintableEscapes\" value=\"true\"/>\n         </module>\n         <module name=\"LineLength\">\n-            <property name=\"max\" value=\"100\"/>\n+            <property name=\"max\" value=\"120\"/>\n             <property name=\"ignorePattern\" value=\"^package.*|^import.*|a href|href|http://|https://|ftp://\"/>\n         </module>\n         <module name=\"OneTopLevelClass\"/>\ndiff --git a/java/dev/checkstyle/suppressions.xml b/java/dev/checkstyle/suppressions.xml\nindex c3a7ffdcb3..cda80921bb 100644\n--- a/java/dev/checkstyle/suppressions.xml\n+++ b/java/dev/checkstyle/suppressions.xml\n@@ -33,5 +33,7 @@\n   <suppress checks=\"Javadoc.*\" files=\".*\" />\n \n   <!-- TODO: Temporarily suppress all but certain checks to fix in increments -->\n-  <suppress checks=\"^(?!.*(ImportOrder)).*\" files=\".*\" />\n+  <suppress\n+    checks=\"^(?!.*(ImportOrder|LineLength|Indentation)).*\"\n+    files=\".*\" />\n </suppressions>\ndiff --git a/java/memory/src/main/java/io/netty/buffer/UnsafeDirectLittleEndian.java b/java/memory/src/main/java/io/netty/buffer/UnsafeDirectLittleEndian.java\nindex ebf0dc96d9..424bc76b62 100644\n--- a/java/memory/src/main/java/io/netty/buffer/UnsafeDirectLittleEndian.java\n+++ b/java/memory/src/main/java/io/netty/buffer/UnsafeDirectLittleEndian.java\n@@ -76,7 +76,7 @@ private long addr(int index) {\n \n   @Override\n   public long getLong(int index) {\n-//        wrapped.checkIndex(index, 8);\n+    // wrapped.checkIndex(index, 8);\n     long v = PlatformDependent.getLong(addr(index));\n     return v;\n   }\ndiff --git a/java/memory/src/main/java/org/apache/arrow/memory/Accountant.java b/java/memory/src/main/java/org/apache/arrow/memory/Accountant.java\nindex 7a2531e4ae..4cc2f6d4c6 100644\n--- a/java/memory/src/main/java/org/apache/arrow/memory/Accountant.java\n+++ b/java/memory/src/main/java/org/apache/arrow/memory/Accountant.java\n@@ -31,8 +31,6 @@\n  */\n @ThreadSafe\n class Accountant implements AutoCloseable {\n-  // private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(Accountant\n-  // .class);\n \n   /**\n    * The parent allocator\n@@ -155,8 +153,7 @@ boolean forceAllocate(long size) {\n    * @param forceAllocation    Whether we should force the allocation.\n    * @return The outcome of the allocation.\n    */\n-  private AllocationOutcome allocate(final long size, final boolean incomingUpdatePeak, final\n-  boolean forceAllocation) {\n+  private AllocationOutcome allocate(final long size, final boolean incomingUpdatePeak, final boolean forceAllocation) {\n     final long newLocal = locallyHeldMemory.addAndGet(size);\n     final long beyondReservation = newLocal - reservation;\n     final boolean beyondLimit = newLocal > allocationLimit.get();\ndiff --git a/java/memory/src/main/java/org/apache/arrow/memory/AllocationListener.java b/java/memory/src/main/java/org/apache/arrow/memory/AllocationListener.java\nindex 67a7b9c63c..f7f89e0a21 100644\n--- a/java/memory/src/main/java/org/apache/arrow/memory/AllocationListener.java\n+++ b/java/memory/src/main/java/org/apache/arrow/memory/AllocationListener.java\n@@ -45,9 +45,9 @@ public boolean onFailedAllocation(long size, AllocationOutcome outcome) {\n   void onAllocation(long size);\n \n   /**\n-   * Called whenever an allocation failed, giving the caller a chance to create some space in the allocator\n-   * (either by freeing some resource, or by changing the limit), and, if successful, allowing the allocator\n-   * to retry the allocation.\n+   * Called whenever an allocation failed, giving the caller a chance to create some space in the\n+   * allocator (either by freeing some resource, or by changing the limit), and, if successful,\n+   * allowing the allocator to retry the allocation.\n    *\n    * @param size     the buffer size that was being allocated\n    * @param outcome  the outcome of the failed allocation. Carries information of what failed\ndiff --git a/java/memory/src/main/java/org/apache/arrow/memory/AllocationManager.java b/java/memory/src/main/java/org/apache/arrow/memory/AllocationManager.java\nindex e1149774cf..6c2c25dee5 100644\n--- a/java/memory/src/main/java/org/apache/arrow/memory/AllocationManager.java\n+++ b/java/memory/src/main/java/org/apache/arrow/memory/AllocationManager.java\n@@ -60,8 +60,6 @@\n  * contention of acquiring a lock on AllocationManager should be very low.\n  */\n public class AllocationManager {\n-  // private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger\n-  // (AllocationManager.class);\n \n   private static final AtomicLong MANAGER_ID_GENERATOR = new AtomicLong(0);\n   private static final AtomicLong LEDGER_ID_GENERATOR = new AtomicLong(0);\n@@ -210,10 +208,8 @@ private void release(final BufferLedger ledger) {\n     // correctly\n     private final long lCreationTime = System.nanoTime();\n     private final BaseAllocator allocator;\n-    private final HistoricalLog historicalLog = BaseAllocator.DEBUG ? new HistoricalLog\n-        (BaseAllocator.DEBUG_LOG_LENGTH,\n-            \"BufferLedger[%d]\", 1)\n-        : null;\n+    private final HistoricalLog historicalLog =\n+        BaseAllocator.DEBUG ? new HistoricalLog(BaseAllocator.DEBUG_LOG_LENGTH, \"BufferLedger[%d]\", 1) : null;\n     private volatile long lDestructionTime = 0;\n \n     private BufferLedger(BaseAllocator allocator) {\ndiff --git a/java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java b/java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java\nindex ba2a275aee..c5efb269d0 100644\n--- a/java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java\n+++ b/java/memory/src/main/java/org/apache/arrow/memory/BaseAllocator.java\n@@ -59,11 +59,12 @@\n   /**\n    * Initialize an allocator\n    * @param parentAllocator   parent allocator. null if defining a root allocator\n-   * @param listener          listener callback. Must be non-null -- use {@link AllocationListener#NOOP} if no listener\n-   *                          desired\n+   * @param listener          listener callback. Must be non-null -- use\n+   *                          {@link AllocationListener#NOOP} if no listener desired\n    * @param name              name of this allocator\n    * @param initReservation   initial reservation. Cannot be modified after construction\n-   * @param maxAllocation     limit. Allocations past the limit fail. Can be modified after construction\n+   * @param maxAllocation     limit. Allocations past the limit fail. Can be modified after\n+   *                          construction\n    */\n   protected BaseAllocator(\n           final BaseAllocator parentAllocator,\n@@ -106,17 +107,15 @@ protected BaseAllocator(\n \n   }\n \n-  private static String createErrorMsg(final BufferAllocator allocator, final int rounded, final\n-  int requested) {\n+  private static String createErrorMsg(final BufferAllocator allocator, final int rounded, final int requested) {\n     if (rounded != requested) {\n       return String.format(\n-          \"Unable to allocate buffer of size %d (rounded from %d) due to memory limit. Current \" +\n-              \"allocation: %d\",\n-          rounded, requested, allocator.getAllocatedMemory());\n+        \"Unable to allocate buffer of size %d (rounded from %d) due to memory limit. Current \" +\n+          \"allocation: %d\", rounded, requested, allocator.getAllocatedMemory());\n     } else {\n-      return String.format(\"Unable to allocate buffer of size %d due to memory limit. Current \" +\n-              \"allocation: %d\",\n-          rounded, allocator.getAllocatedMemory());\n+      return String.format(\n+        \"Unable to allocate buffer of size %d due to memory limit. Current \" +\n+           \"allocation: %d\", rounded, allocator.getAllocatedMemory());\n     }\n   }\n \n@@ -286,9 +285,10 @@ public ArrowBuf buffer(final int initialRequestSize, BufferManager manager) {\n       return buffer;\n     } catch (OutOfMemoryError e) {\n       /*\n-       * OutOfDirectMemoryError is thrown by Netty when we exceed the direct memory limit defined by -XX:MaxDirectMemorySize.\n-       * OutOfMemoryError with \"Direct buffer memory\" message is thrown by java.nio.Bits when we exceed the direct memory limit.\n-       *   This should never be hit in practice as Netty is expected to throw an OutOfDirectMemoryError first.\n+       * OutOfDirectMemoryError is thrown by Netty when we exceed the direct memory limit defined by\n+       * -XX:MaxDirectMemorySize. OutOfMemoryError with \"Direct buffer memory\" message is thrown by\n+       * java.nio.Bits when we exceed the direct memory limit. This should never be hit in practice\n+       * as Netty is expected to throw an OutOfDirectMemoryError first.\n        */\n       if (e instanceof OutOfDirectMemoryError || \"Direct buffer memory\".equals(e.getMessage())) {\n         throw new OutOfMemoryException(e);\ndiff --git a/java/memory/src/main/java/org/apache/arrow/memory/BufferAllocator.java b/java/memory/src/main/java/org/apache/arrow/memory/BufferAllocator.java\nindex 94ea62e6aa..67eb94ca56 100644\n--- a/java/memory/src/main/java/org/apache/arrow/memory/BufferAllocator.java\n+++ b/java/memory/src/main/java/org/apache/arrow/memory/BufferAllocator.java\n@@ -77,7 +77,11 @@\n    * @param maxAllocation   maximum amount of space the new allocator can allocate\n    * @return the new allocator, or null if it can't be created\n    */\n-  public BufferAllocator newChildAllocator(String name, AllocationListener listener, long initReservation, long maxAllocation);\n+  public BufferAllocator newChildAllocator(\n+      String name,\n+      AllocationListener listener,\n+      long initReservation,\n+      long maxAllocation);\n \n   /**\n    * Close and release all buffers generated from this buffer pool.\ndiff --git a/java/memory/src/main/java/org/apache/arrow/memory/ValueWithKeyIncluded.java b/java/memory/src/main/java/org/apache/arrow/memory/ValueWithKeyIncluded.java\nindex 7bd9cecf97..7a91be3243 100644\n--- a/java/memory/src/main/java/org/apache/arrow/memory/ValueWithKeyIncluded.java\n+++ b/java/memory/src/main/java/org/apache/arrow/memory/ValueWithKeyIncluded.java\n@@ -22,5 +22,5 @@\n  * key is part of the value\n  */\n public interface ValueWithKeyIncluded<K> {\n-    K getKey();\n+  K getKey();\n }\ndiff --git a/java/memory/src/test/java/org/apache/arrow/memory/TestBaseAllocator.java b/java/memory/src/test/java/org/apache/arrow/memory/TestBaseAllocator.java\nindex b826d168a6..7d5008a393 100644\n--- a/java/memory/src/test/java/org/apache/arrow/memory/TestBaseAllocator.java\n+++ b/java/memory/src/test/java/org/apache/arrow/memory/TestBaseAllocator.java\n@@ -31,11 +31,10 @@\n import io.netty.buffer.ArrowBuf.TransferResult;\n \n public class TestBaseAllocator {\n-  // private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(TestBaseAllocator.class);\n \n   private final static int MAX_ALLOCATION = 8 * 1024;\n \n-/*\n+  /*\n   // ---------------------------------------- DEBUG -----------------------------------\n \n   @After\n@@ -49,13 +48,13 @@ public void checkBuffers() {\n     assertEquals(0, bufferCount);\n   }\n \n-//  @AfterClass\n-//  public static void dumpBuffers() {\n-//    UnsafeDirectLittleEndian.logBuffers(logger);\n-//  }\n+  //  @AfterClass\n+  //  public static void dumpBuffers() {\n+  //    UnsafeDirectLittleEndian.logBuffers(logger);\n+  //  }\n \n   // ---------------------------------------- DEBUG ------------------------------------\n-*/\n+  */\n \n \n   @Test\n@@ -89,13 +88,13 @@ public void testRootAllocator_closeWithOutstanding() throws Exception {\n        * We expect there to be one unreleased underlying buffer because we're closing\n        * without releasing it.\n        */\n-/*\n+      /*\n       // ------------------------------- DEBUG ---------------------------------\n       final int bufferCount = UnsafeDirectLittleEndian.getBufferCount();\n       UnsafeDirectLittleEndian.releaseBuffers();\n       assertEquals(1, bufferCount);\n       // ------------------------------- DEBUG ---------------------------------\n-*/\n+      */\n     }\n   }\n \n@@ -149,8 +148,10 @@ public void testAllocator_transferOwnership() throws Exception {\n   @Test\n   public void testAllocator_shareOwnership() throws Exception {\n     try (final RootAllocator rootAllocator = new RootAllocator(MAX_ALLOCATION)) {\n-      final BufferAllocator childAllocator1 = rootAllocator.newChildAllocator(\"shareOwnership1\", 0, MAX_ALLOCATION);\n-      final BufferAllocator childAllocator2 = rootAllocator.newChildAllocator(\"shareOwnership2\", 0, MAX_ALLOCATION);\n+      final BufferAllocator childAllocator1 = rootAllocator.newChildAllocator(\"shareOwnership1\", 0,\n+          MAX_ALLOCATION);\n+      final BufferAllocator childAllocator2 = rootAllocator.newChildAllocator(\"shareOwnership2\", 0,\n+          MAX_ALLOCATION);\n       final ArrowBuf arrowBuf1 = childAllocator1.buffer(MAX_ALLOCATION / 4);\n       rootAllocator.verify();\n \n@@ -161,13 +162,15 @@ public void testAllocator_shareOwnership() throws Exception {\n       assertNotEquals(arrowBuf2, arrowBuf1);\n       assertEquiv(arrowBuf1, arrowBuf2);\n \n-      // release original buffer (thus transferring ownership to allocator 2. (should leave allocator 1 in empty state)\n+      // release original buffer (thus transferring ownership to allocator 2. (should leave\n+      // allocator 1 in empty state)\n       arrowBuf1.release();\n       rootAllocator.verify();\n       childAllocator1.close();\n       rootAllocator.verify();\n \n-      final BufferAllocator childAllocator3 = rootAllocator.newChildAllocator(\"shareOwnership3\", 0, MAX_ALLOCATION);\n+      final BufferAllocator childAllocator3 = rootAllocator.newChildAllocator(\"shareOwnership3\", 0,\n+          MAX_ALLOCATION);\n       final ArrowBuf arrowBuf3 = arrowBuf1.retain(childAllocator3);\n       assertNotNull(arrowBuf3);\n       assertNotEquals(arrowBuf3, arrowBuf1);\n@@ -189,8 +192,8 @@ public void testAllocator_shareOwnership() throws Exception {\n   @Test\n   public void testRootAllocator_createChildAndUse() throws Exception {\n     try (final RootAllocator rootAllocator = new RootAllocator(MAX_ALLOCATION)) {\n-      try (final BufferAllocator childAllocator = rootAllocator.newChildAllocator(\"createChildAndUse\", 0,\n-          MAX_ALLOCATION)) {\n+      try (final BufferAllocator childAllocator = rootAllocator.newChildAllocator(\n+        \"createChildAndUse\", 0, MAX_ALLOCATION)) {\n         final ArrowBuf arrowBuf = childAllocator.buffer(512);\n         assertNotNull(\"allocation failed\", arrowBuf);\n         arrowBuf.release();\n@@ -202,8 +205,8 @@ public void testRootAllocator_createChildAndUse() throws Exception {\n   public void testRootAllocator_createChildDontClose() throws Exception {\n     try {\n       try (final RootAllocator rootAllocator = new RootAllocator(MAX_ALLOCATION)) {\n-        final BufferAllocator childAllocator = rootAllocator.newChildAllocator(\"createChildDontClose\", 0,\n-            MAX_ALLOCATION);\n+        final BufferAllocator childAllocator = rootAllocator.newChildAllocator(\n+            \"createChildDontClose\", 0, MAX_ALLOCATION);\n         final ArrowBuf arrowBuf = childAllocator.buffer(512);\n         assertNotNull(\"allocation failed\", arrowBuf);\n       }\n@@ -212,13 +215,13 @@ public void testRootAllocator_createChildDontClose() throws Exception {\n        * We expect one underlying buffer because we closed a child allocator without\n        * releasing the buffer allocated from it.\n        */\n-/*\n+      /*\n       // ------------------------------- DEBUG ---------------------------------\n       final int bufferCount = UnsafeDirectLittleEndian.getBufferCount();\n       UnsafeDirectLittleEndian.releaseBuffers();\n       assertEquals(1, bufferCount);\n       // ------------------------------- DEBUG ---------------------------------\n-*/\n+      */\n     }\n   }\n \n@@ -314,10 +317,12 @@ public void testRootAllocator_listenerAllocationFail() throws Exception {\n     TestAllocationListener l1 = new TestAllocationListener();\n     assertEquals(0, l1.getNumCalls());\n     assertEquals(0, l1.getTotalMem());\n-    // Test attempts to allocate too much from a child whose limit is set to half of the max allocation\n-    // The listener's callback triggers, expanding the child allocator's limit, so then the allocation succeeds\n+    // Test attempts to allocate too much from a child whose limit is set to half of the max\n+    // allocation. The listener's callback triggers, expanding the child allocator's limit, so then\n+    // the allocation succeeds.\n     try (final RootAllocator rootAllocator = new RootAllocator(MAX_ALLOCATION)) {\n-      try (final BufferAllocator c1 = rootAllocator.newChildAllocator(\"c1\", l1,0, MAX_ALLOCATION / 2)) {\n+      try (final BufferAllocator c1 = rootAllocator.newChildAllocator(\"c1\", l1, 0,\n+        MAX_ALLOCATION / 2)) {\n         try {\n           c1.buffer(MAX_ALLOCATION);\n           fail(\"allocated memory beyond max allowed\");\n@@ -337,7 +342,7 @@ public void testRootAllocator_listenerAllocationFail() throws Exception {\n     }\n   }\n \n-    private static void allocateAndFree(final BufferAllocator allocator) {\n+  private static void allocateAndFree(final BufferAllocator allocator) {\n     final ArrowBuf arrowBuf = allocator.buffer(512);\n     assertNotNull(\"allocation failed\", arrowBuf);\n     arrowBuf.release();\n@@ -433,14 +438,16 @@ public void testAllocator_createSlices() throws Exception {\n     try (final RootAllocator rootAllocator = new RootAllocator(MAX_ALLOCATION)) {\n       testAllocator_sliceUpBufferAndRelease(rootAllocator, rootAllocator);\n \n-      try (final BufferAllocator childAllocator = rootAllocator.newChildAllocator(\"createSlices\", 0, MAX_ALLOCATION)) {\n+      try (final BufferAllocator childAllocator = rootAllocator.newChildAllocator(\"createSlices\", 0,\n+        MAX_ALLOCATION)) {\n         testAllocator_sliceUpBufferAndRelease(rootAllocator, childAllocator);\n       }\n       rootAllocator.verify();\n \n       testAllocator_sliceUpBufferAndRelease(rootAllocator, rootAllocator);\n \n-      try (final BufferAllocator childAllocator = rootAllocator.newChildAllocator(\"createSlices\", 0, MAX_ALLOCATION)) {\n+      try (final BufferAllocator childAllocator = rootAllocator.newChildAllocator(\"createSlices\", 0,\n+        MAX_ALLOCATION)) {\n         try (final BufferAllocator childAllocator2 =\n                  childAllocator.newChildAllocator(\"createSlices\", 0, MAX_ALLOCATION)) {\n           final ArrowBuf arrowBuf1 = childAllocator2.buffer(MAX_ALLOCATION / 8);\n@@ -460,7 +467,7 @@ public void testAllocator_createSlices() throws Exception {\n \n   @Test\n   public void testAllocator_sliceRanges() throws Exception {\n-//    final AllocatorOwner allocatorOwner = new NamedOwner(\"sliceRanges\");\n+    // final AllocatorOwner allocatorOwner = new NamedOwner(\"sliceRanges\");\n     try (final RootAllocator rootAllocator =\n              new RootAllocator(MAX_ALLOCATION)) {\n       // Populate a buffer with byte values corresponding to their indices.\n@@ -475,8 +482,8 @@ public void testAllocator_sliceRanges() throws Exception {\n       assertEquals(0, slice3.readerIndex());\n       assertEquals(0, slice3.readableBytes());\n       assertEquals(0, slice3.writerIndex());\n-//      assertEquals(256, slice3.capacity());\n-//      assertEquals(256, slice3.writableBytes());\n+      // assertEquals(256, slice3.capacity());\n+      // assertEquals(256, slice3.writableBytes());\n \n       for (int i = 0; i < 256; ++i) {\n         arrowBuf.writeByte(i);\n@@ -504,22 +511,22 @@ public void testAllocator_sliceRanges() throws Exception {\n         assertEquals(i, slice2.readByte());\n       }\n \n-/*\n+      /*\n       for(int i = 256; i > 0; --i) {\n         slice3.writeByte(i - 1);\n       }\n       for(int i = 0; i < 256; ++i) {\n         assertEquals(255 - i, slice1.getByte(i));\n       }\n-*/\n+      */\n \n-      arrowBuf.release(); // all the derived buffers share this fate\n+      arrowBuf.release();  // all the derived buffers share this fate\n     }\n   }\n \n   @Test\n   public void testAllocator_slicesOfSlices() throws Exception {\n-//    final AllocatorOwner allocatorOwner = new NamedOwner(\"slicesOfSlices\");\n+    // final AllocatorOwner allocatorOwner = new NamedOwner(\"slicesOfSlices\");\n     try (final RootAllocator rootAllocator =\n              new RootAllocator(MAX_ALLOCATION)) {\n       // Populate a buffer with byte values corresponding to their indices.\n@@ -685,8 +692,8 @@ public void testAllocator_unclaimedReservation() throws Exception {\n   public void testAllocator_claimedReservation() throws Exception {\n     try (final RootAllocator rootAllocator = new RootAllocator(MAX_ALLOCATION)) {\n \n-      try (final BufferAllocator childAllocator1 = rootAllocator.newChildAllocator(\"claimedReservation\", 0,\n-          MAX_ALLOCATION)) {\n+      try (final BufferAllocator childAllocator1 = rootAllocator.newChildAllocator(\n+        \"claimedReservation\", 0, MAX_ALLOCATION)) {\n \n         try (final AllocationReservation reservation = childAllocator1.newReservation()) {\n           assertTrue(reservation.add(32));\ndiff --git a/java/memory/src/test/java/org/apache/arrow/memory/TestLowCostIdentityHashMap.java b/java/memory/src/test/java/org/apache/arrow/memory/TestLowCostIdentityHashMap.java\nindex 0237b38048..766407ee46 100644\n--- a/java/memory/src/test/java/org/apache/arrow/memory/TestLowCostIdentityHashMap.java\n+++ b/java/memory/src/test/java/org/apache/arrow/memory/TestLowCostIdentityHashMap.java\n@@ -62,7 +62,7 @@ public void testIdentityHashMap() throws Exception {\n     assertNotNull(nextValue);\n \n     assertTrue((hashMap.get(\"s1key\") == nextValue || hashMap.get(\"s2key\") == nextValue ||\n-      hashMap.get(\"s5key\") == nextValue));\n+        hashMap.get(\"s5key\") == nextValue));\n \n     assertTrue(hashMap.containsValue(obj4));\n     assertTrue(hashMap.containsValue(obj2));\ndiff --git a/java/plasma/src/test/java/org/apache/arrow/plasma/PlasmaClientTest.java b/java/plasma/src/test/java/org/apache/arrow/plasma/PlasmaClientTest.java\nindex 6b67fc8c93..c6df572267 100644\n--- a/java/plasma/src/test/java/org/apache/arrow/plasma/PlasmaClientTest.java\n+++ b/java/plasma/src/test/java/org/apache/arrow/plasma/PlasmaClientTest.java\n@@ -26,148 +26,148 @@\n \n public class PlasmaClientTest {\n \n-    private String storeSuffix = \"/tmp/store\";\n+  private String storeSuffix = \"/tmp/store\";\n \n-    private Process storeProcess;\n+  private Process storeProcess;\n \n-    private int storePort;\n+  private int storePort;\n \n-    private ObjectStoreLink pLink;\n+  private ObjectStoreLink pLink;\n \n \n-    public PlasmaClientTest() throws Exception{\n-        try {\n-            String plasmaStorePath = System.getenv(\"PLASMA_STORE\");\n-            if(plasmaStorePath == null) {\n-                throw new Exception(\"Please set plasma store path in env PLASMA_STORE\");\n-            }\n-\n-            this.startObjectStore(plasmaStorePath);\n-            System.loadLibrary(\"plasma_java\");\n-            pLink = new PlasmaClient(this.getStoreAddress(), \"\", 0);\n-        }\n-        catch (Throwable t) {\n-            cleanup();\n-            throw t;\n-        }\n+  public PlasmaClientTest() throws Exception{\n+    try {\n+      String plasmaStorePath = System.getenv(\"PLASMA_STORE\");\n+      if(plasmaStorePath == null) {\n+        throw new Exception(\"Please set plasma store path in env PLASMA_STORE\");\n+      }\n \n+      this.startObjectStore(plasmaStorePath);\n+      System.loadLibrary(\"plasma_java\");\n+      pLink = new PlasmaClient(this.getStoreAddress(), \"\", 0);\n     }\n-\n-    private Process startProcess(String[] cmd) {\n-        ProcessBuilder builder;\n-        List<String> newCmd = Arrays.stream(cmd).filter(s -> s.length() > 0).collect(Collectors.toList());\n-        builder = new ProcessBuilder(newCmd);\n-        Process p = null;\n-        try {\n-            p = builder.start();\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-            return null;\n-        }\n-        System.out.println(\"Start process \" + p.hashCode() + \" OK, cmd = \" + Arrays.toString(cmd).replace(',', ' '));\n-        return p;\n+    catch (Throwable t) {\n+      cleanup();\n+      throw t;\n     }\n \n-    private void startObjectStore(String plasmaStorePath) {\n-        int occupiedMemoryMB = 10;\n-        long memoryBytes = occupiedMemoryMB * 1000000;\n-        int numRetries = 10;\n-        Process p = null;\n-        while (numRetries-- > 0) {\n-            int currentPort = java.util.concurrent.ThreadLocalRandom.current().nextInt(0, 100000);\n-            String name = storeSuffix + currentPort;\n-            String cmd = plasmaStorePath + \" -s \" + name + \" -m \" + memoryBytes;\n-\n-            p = startProcess(cmd.split(\" \"));\n-\n-            if (p != null && p.isAlive()) {\n-                try {\n-                    TimeUnit.MILLISECONDS.sleep(100);\n-                } catch (InterruptedException e) {\n-                    e.printStackTrace();\n-                }\n-                if (p.isAlive()) {\n-                    storePort = currentPort;\n-                    break;\n-                }\n-            }\n-        }\n-\n-\n-        if (p == null || !p.isAlive()) {\n-            throw new RuntimeException(\"Start object store failed ...\");\n-        } else {\n-            storeProcess = p;\n-            System.out.println(\"Start object store success\");\n-        }\n+  }\n+\n+  private Process startProcess(String[] cmd) {\n+    ProcessBuilder builder;\n+    List<String> newCmd = Arrays.stream(cmd).filter(s -> s.length() > 0).collect(Collectors.toList());\n+    builder = new ProcessBuilder(newCmd);\n+    Process p = null;\n+    try {\n+      p = builder.start();\n+    } catch (IOException e) {\n+      e.printStackTrace();\n+      return null;\n     }\n-\n-    private void cleanup() {\n-        if (storeProcess != null && killProcess(storeProcess)) {\n-            System.out.println(\"Kill plasma store process forcely\");\n+    System.out.println(\"Start process \" + p.hashCode() + \" OK, cmd = \" + Arrays.toString(cmd).replace(',', ' '));\n+    return p;\n+  }\n+\n+  private void startObjectStore(String plasmaStorePath) {\n+    int occupiedMemoryMB = 10;\n+    long memoryBytes = occupiedMemoryMB * 1000000;\n+    int numRetries = 10;\n+    Process p = null;\n+    while (numRetries-- > 0) {\n+      int currentPort = java.util.concurrent.ThreadLocalRandom.current().nextInt(0, 100000);\n+      String name = storeSuffix + currentPort;\n+      String cmd = plasmaStorePath + \" -s \" + name + \" -m \" + memoryBytes;\n+\n+      p = startProcess(cmd.split(\" \"));\n+\n+      if (p != null && p.isAlive()) {\n+        try {\n+          TimeUnit.MILLISECONDS.sleep(100);\n+        } catch (InterruptedException e) {\n+          e.printStackTrace();\n         }\n-    }\n-\n-    private static boolean killProcess(Process p) {\n         if (p.isAlive()) {\n-            p.destroyForcibly();\n-            return true;\n-        } else {\n-            return false;\n+          storePort = currentPort;\n+          break;\n         }\n+      }\n     }\n \n-    public void doTest() {\n-        System.out.println(\"Start test.\");\n-        int timeoutMs = 3000;\n-        byte[] id1 =  new byte[20];\n-        Arrays.fill(id1, (byte)1);\n-        byte[] value1 =  new byte[20];\n-        Arrays.fill(value1, (byte)11);\n-        pLink.put(id1, value1, null);\n-\n-        byte[] id2 =  new byte[20];\n-        Arrays.fill(id2, (byte)2);\n-        byte[] value2 =  new byte[20];\n-        Arrays.fill(value2, (byte)12);\n-        pLink.put(id2, value2, null);\n-        System.out.println(\"Plasma java client put test success.\");\n-        byte[] getValue1 = pLink.get(id1, timeoutMs, false);\n-        assert Arrays.equals(value1, getValue1);\n-\n-        byte[] getValue2 = pLink.get(id2, timeoutMs, false);\n-        assert Arrays.equals(value2, getValue2);\n-        System.out.println(\"Plasma java client get single object test success.\");\n-        byte[][] ids = {id1, id2};\n-        List<byte[]> values = pLink.get(ids, timeoutMs, false);\n-        assert Arrays.equals(values.get(0), value1);\n-        assert Arrays.equals(values.get(1), value2);\n-        System.out.println(\"Plasma java client get multi-object test success.\");\n-        pLink.put(id1, value1, null);\n-        System.out.println(\"Plasma java client put same object twice exception test success.\");\n-        byte[] id1Hash = pLink.hash(id1);\n-        assert id1Hash != null;\n-        System.out.println(\"Plasma java client hash test success.\");\n-        boolean exsit = pLink.contains(id2);\n-        assert exsit;\n-        byte[] id3 =  new byte[20];\n-        Arrays.fill(id3, (byte)3);\n-        boolean notExsit = pLink.contains(id3);\n-        assert !notExsit;\n-        System.out.println(\"Plasma java client contains test success.\");\n-        cleanup();\n-        System.out.println(\"All test success.\");\n \n+    if (p == null || !p.isAlive()) {\n+      throw new RuntimeException(\"Start object store failed ...\");\n+    } else {\n+      storeProcess = p;\n+      System.out.println(\"Start object store success\");\n     }\n+  }\n \n-    public String getStoreAddress() {\n-        return storeSuffix+storePort;\n+  private void cleanup() {\n+    if (storeProcess != null && killProcess(storeProcess)) {\n+      System.out.println(\"Kill plasma store process forcely\");\n     }\n-    public static void main(String[] args) throws Exception {\n-\n-        PlasmaClientTest plasmaClientTest = new PlasmaClientTest();\n-        plasmaClientTest.doTest();\n-\n+  }\n+\n+  private static boolean killProcess(Process p) {\n+    if (p.isAlive()) {\n+      p.destroyForcibly();\n+      return true;\n+    } else {\n+      return false;\n     }\n+  }\n+\n+  public void doTest() {\n+    System.out.println(\"Start test.\");\n+    int timeoutMs = 3000;\n+    byte[] id1 =  new byte[20];\n+    Arrays.fill(id1, (byte)1);\n+    byte[] value1 =  new byte[20];\n+    Arrays.fill(value1, (byte)11);\n+    pLink.put(id1, value1, null);\n+\n+    byte[] id2 =  new byte[20];\n+    Arrays.fill(id2, (byte)2);\n+    byte[] value2 =  new byte[20];\n+    Arrays.fill(value2, (byte)12);\n+    pLink.put(id2, value2, null);\n+    System.out.println(\"Plasma java client put test success.\");\n+    byte[] getValue1 = pLink.get(id1, timeoutMs, false);\n+    assert Arrays.equals(value1, getValue1);\n+\n+    byte[] getValue2 = pLink.get(id2, timeoutMs, false);\n+    assert Arrays.equals(value2, getValue2);\n+    System.out.println(\"Plasma java client get single object test success.\");\n+    byte[][] ids = {id1, id2};\n+    List<byte[]> values = pLink.get(ids, timeoutMs, false);\n+    assert Arrays.equals(values.get(0), value1);\n+    assert Arrays.equals(values.get(1), value2);\n+    System.out.println(\"Plasma java client get multi-object test success.\");\n+    pLink.put(id1, value1, null);\n+    System.out.println(\"Plasma java client put same object twice exception test success.\");\n+    byte[] id1Hash = pLink.hash(id1);\n+    assert id1Hash != null;\n+    System.out.println(\"Plasma java client hash test success.\");\n+    boolean exsit = pLink.contains(id2);\n+    assert exsit;\n+    byte[] id3 =  new byte[20];\n+    Arrays.fill(id3, (byte)3);\n+    boolean notExsit = pLink.contains(id3);\n+    assert !notExsit;\n+    System.out.println(\"Plasma java client contains test success.\");\n+    cleanup();\n+    System.out.println(\"All test success.\");\n+\n+  }\n+\n+  public String getStoreAddress() {\n+    return storeSuffix+storePort;\n+  }\n+  public static void main(String[] args) throws Exception {\n+\n+    PlasmaClientTest plasmaClientTest = new PlasmaClientTest();\n+    plasmaClientTest.doTest();\n+\n+  }\n \n }\ndiff --git a/java/tools/src/test/java/org/apache/arrow/tools/EchoServerTest.java b/java/tools/src/test/java/org/apache/arrow/tools/EchoServerTest.java\nindex 47b5541d17..b62a9651fa 100644\n--- a/java/tools/src/test/java/org/apache/arrow/tools/EchoServerTest.java\n+++ b/java/tools/src/test/java/org/apache/arrow/tools/EchoServerTest.java\n@@ -186,8 +186,8 @@ public void testFlatDictionary() throws IOException {\n       List<FieldVector> vectors = ImmutableList.of((FieldVector) writeVector);\n       VectorSchemaRoot root = new VectorSchemaRoot(fields, vectors, 6);\n \n-      DictionaryProvider writeProvider = new MapDictionaryProvider(new Dictionary\n-          (writeDictionaryVector, writeEncoding));\n+      DictionaryProvider writeProvider = new MapDictionaryProvider(\n+          new Dictionary(writeDictionaryVector, writeEncoding));\n \n       try (Socket socket = new Socket(\"localhost\", serverPort);\n            ArrowStreamWriter writer = new ArrowStreamWriter(root, writeProvider, socket\n@@ -262,8 +262,8 @@ public void testNestedDictionary() throws IOException {\n       List<FieldVector> vectors = ImmutableList.of((FieldVector) writeVector);\n       VectorSchemaRoot root = new VectorSchemaRoot(fields, vectors, 3);\n \n-      DictionaryProvider writeProvider = new MapDictionaryProvider(new Dictionary\n-          (writeDictionaryVector, writeEncoding));\n+      DictionaryProvider writeProvider = new MapDictionaryProvider(\n+          new Dictionary(writeDictionaryVector, writeEncoding));\n \n       try (Socket socket = new Socket(\"localhost\", serverPort);\n            ArrowStreamWriter writer = new ArrowStreamWriter(root, writeProvider, socket\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/AllocationHelper.java b/java/vector/src/main/java/org/apache/arrow/vector/AllocationHelper.java\nindex 2a0f39d0cb..7b173be446 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/AllocationHelper.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/AllocationHelper.java\n@@ -22,13 +22,16 @@\n import org.apache.arrow.vector.complex.RepeatedVariableWidthVectorLike;\n \n public class AllocationHelper {\n-//  private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(AllocationHelper.class);\n \n   public static void allocate(ValueVector v, int valueCount, int bytesPerValue) {\n     allocate(v, valueCount, bytesPerValue, 5);\n   }\n \n-  public static void allocatePrecomputedChildCount(ValueVector v, int valueCount, int bytesPerValue, int childValCount) {\n+  public static void allocatePrecomputedChildCount(\n+      ValueVector v,\n+      int valueCount,\n+      int bytesPerValue,\n+      int childValCount) {\n     if (v instanceof FixedWidthVector) {\n       ((FixedWidthVector) v).allocateNew(valueCount);\n     } else if (v instanceof VariableWidthVector) {\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java b/java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java\nindex 6ae78b1f76..a13b4a80ad 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/BaseFixedWidthVector.java\n@@ -275,7 +275,7 @@ public boolean allocateNewSafe() {\n       throw new OversizedAllocationException(\"Requested amount of memory exceeds limit\");\n     }\n \n-      /* we are doing a new allocation -- release the current buffers */\n+    /* we are doing a new allocation -- release the current buffers */\n     clear();\n \n     try {\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java b/java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java\nindex bddb018d87..3eb315beaf 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/BaseVariableWidthVector.java\n@@ -571,7 +571,7 @@ public int getByteCapacity() {\n \n   @Override\n   public int getCurrentSizeInBytes() {\n-      /* TODO */\n+    /* TODO */\n     return 0;\n   }\n \n@@ -599,7 +599,7 @@ public int getBufferSizeFor(final int valueCount) {\n \n     final int validityBufferSize = getValidityBufferSizeFromCount(valueCount);\n     final int offsetBufferSize = (valueCount + 1) * OFFSET_WIDTH;\n-      /* get the end offset for this valueCount */\n+    /* get the end offset for this valueCount */\n     final int dataBufferSize = offsetBuffer.getInt(valueCount * OFFSET_WIDTH);\n     return validityBufferSize + offsetBufferSize + dataBufferSize;\n   }\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/BigIntVector.java b/java/vector/src/main/java/org/apache/arrow/vector/BigIntVector.java\nindex 2ba3690dcf..fa9db5360f 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/BigIntVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/BigIntVector.java\n@@ -254,9 +254,8 @@ public void setSafe(int index, BigIntHolder holder) {\n    */\n   public void setNull(int index) {\n     handleSafe(index);\n-      /* not really needed to set the bit to 0 as long as\n-       * the buffer always starts from 0.\n-       */\n+    // not really needed to set the bit to 0 as long as\n+    // the buffer always starts from 0.\n     BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n   }\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/BitVector.java b/java/vector/src/main/java/org/apache/arrow/vector/BitVector.java\nindex 87def99866..822041c35f 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/BitVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/BitVector.java\n@@ -143,8 +143,7 @@ public int getBufferSize() {\n    * @param length     length of the split.\n    * @param target     destination vector\n    */\n-  public void splitAndTransferTo(int startIndex, int length,\n-                                 BaseFixedWidthVector target) {\n+  public void splitAndTransferTo(int startIndex, int length, BaseFixedWidthVector target) {\n     compareTypes(target, \"splitAndTransferTo\");\n     target.clear();\n     target.validityBuffer = splitAndTransferBuffer(startIndex, length, target,\n@@ -155,9 +154,12 @@ public void splitAndTransferTo(int startIndex, int length,\n     target.setValueCount(length);\n   }\n \n-  private ArrowBuf splitAndTransferBuffer(int startIndex, int length,\n-                                          BaseFixedWidthVector target,\n-                                          ArrowBuf sourceBuffer, ArrowBuf destBuffer) {\n+  private ArrowBuf splitAndTransferBuffer(\n+      int startIndex,\n+      int length,\n+      BaseFixedWidthVector target,\n+      ArrowBuf sourceBuffer,\n+      ArrowBuf destBuffer) {\n     assert startIndex + length <= valueCount;\n     int firstByteSource = BitVectorHelper.byteIndex(startIndex);\n     int lastByteSource = BitVectorHelper.byteIndex(valueCount - 1);\n@@ -166,19 +168,19 @@ private ArrowBuf splitAndTransferBuffer(int startIndex, int length,\n \n     if (length > 0) {\n       if (offset == 0) {\n-            /* slice */\n+        /* slice */\n         if (destBuffer != null) {\n           destBuffer.release();\n         }\n         destBuffer = sourceBuffer.slice(firstByteSource, byteSizeTarget);\n         destBuffer.retain(1);\n       } else {\n-            /* Copy data\n-             * When the first bit starts from the middle of a byte (offset != 0),\n-             * copy data from src BitVector.\n-             * Each byte in the target is composed by a part in i-th byte,\n-             * another part in (i+1)-th byte.\n-             */\n+        /* Copy data\n+         * When the first bit starts from the middle of a byte (offset != 0),\n+         * copy data from src BitVector.\n+         * Each byte in the target is composed by a part in i-th byte,\n+         * another part in (i+1)-th byte.\n+         */\n         destBuffer = allocator.buffer(byteSizeTarget);\n         destBuffer.readerIndex(0);\n         destBuffer.setZero(0, destBuffer.capacity());\n@@ -190,15 +192,15 @@ private ArrowBuf splitAndTransferBuffer(int startIndex, int length,\n           destBuffer.setByte(i, (b1 + b2));\n         }\n \n-            /* Copying the last piece is done in the following manner:\n-             * if the source vector has 1 or more bytes remaining, we copy\n-             * the last piece as a byte formed by shifting data\n-             * from the current byte and the next byte.\n-             *\n-             * if the source vector has no more bytes remaining\n-             * (we are at the last byte), we copy the last piece as a byte\n-             * by shifting data from the current byte.\n-             */\n+        /* Copying the last piece is done in the following manner:\n+         * if the source vector has 1 or more bytes remaining, we copy\n+         * the last piece as a byte formed by shifting data\n+         * from the current byte and the next byte.\n+         *\n+         * if the source vector has no more bytes remaining\n+         * (we are at the last byte), we copy the last piece as a byte\n+         * by shifting data from the current byte.\n+         */\n         if ((firstByteSource + byteSizeTarget - 1) < lastByteSource) {\n           byte b1 = BitVectorHelper.getBitsFromCurrentByte(sourceBuffer,\n                   firstByteSource + byteSizeTarget - 1, offset);\n@@ -408,9 +410,8 @@ public void setSafe(int index, BitHolder holder) {\n    */\n   public void setNull(int index) {\n     handleSafe(index);\n-      /* not really needed to set the bit to 0 as long as\n-       * the buffer always starts from 0.\n-       */\n+    // not really needed to set the bit to 0 as long as\n+    // the buffer always starts from 0.\n     BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n   }\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/DateDayVector.java b/java/vector/src/main/java/org/apache/arrow/vector/DateDayVector.java\nindex 7a55a1fcc8..ce541a33e3 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/DateDayVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/DateDayVector.java\n@@ -255,9 +255,8 @@ public void setSafe(int index, DateDayHolder holder) {\n    */\n   public void setNull(int index) {\n     handleSafe(index);\n-      /* not really needed to set the bit to 0 as long as\n-       * the buffer always starts from 0.\n-       */\n+    // not really needed to set the bit to 0 as long as\n+    // the buffer always starts from 0.\n     BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n   }\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/DateMilliVector.java b/java/vector/src/main/java/org/apache/arrow/vector/DateMilliVector.java\nindex aadc6c0f9d..19753652ab 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/DateMilliVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/DateMilliVector.java\n@@ -259,9 +259,8 @@ public void setSafe(int index, DateMilliHolder holder) {\n    */\n   public void setNull(int index) {\n     handleSafe(index);\n-      /* not really needed to set the bit to 0 as long as\n-       * the buffer always starts from 0.\n-       */\n+    // not really needed to set the bit to 0 as long as\n+    // the buffer always starts from 0.\n     BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n   }\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/DecimalVector.java b/java/vector/src/main/java/org/apache/arrow/vector/DecimalVector.java\nindex 1b3550b5db..1678027654 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/DecimalVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/DecimalVector.java\n@@ -26,6 +26,7 @@\n import org.apache.arrow.vector.holders.DecimalHolder;\n import org.apache.arrow.vector.holders.NullableDecimalHolder;\n import org.apache.arrow.vector.types.Types.MinorType;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n import org.apache.arrow.vector.types.pojo.FieldType;\n import org.apache.arrow.vector.util.DecimalUtility;\n import org.apache.arrow.vector.util.TransferPair;\n@@ -52,8 +53,8 @@\n    */\n   public DecimalVector(String name, BufferAllocator allocator,\n                                int precision, int scale) {\n-    this(name, FieldType.nullable(new org.apache.arrow.vector.types.pojo.ArrowType.Decimal(precision, scale)),\n-            allocator);\n+    this(name, FieldType.nullable(\n+      new ArrowType.Decimal(precision, scale)), allocator);\n   }\n \n   /**\n@@ -65,7 +66,7 @@ public DecimalVector(String name, BufferAllocator allocator,\n    */\n   public DecimalVector(String name, FieldType fieldType, BufferAllocator allocator) {\n     super(name, allocator, fieldType, TYPE_WIDTH);\n-    org.apache.arrow.vector.types.pojo.ArrowType.Decimal arrowType = (org.apache.arrow.vector.types.pojo.ArrowType.Decimal) fieldType.getType();\n+    ArrowType.Decimal arrowType = (ArrowType.Decimal) fieldType.getType();\n     reader = new DecimalReaderImpl(DecimalVector.this);\n     this.precision = arrowType.getPrecision();\n     this.scale = arrowType.getScale();\n@@ -388,9 +389,8 @@ public void setSafe(int index, DecimalHolder holder) {\n    */\n   public void setNull(int index) {\n     handleSafe(index);\n-      /* not really needed to set the bit to 0 as long as\n-       * the buffer always starts from 0.\n-       */\n+    // not really needed to set the bit to 0 as long as\n+    // the buffer always starts from 0.\n     BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n   }\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/Float4Vector.java b/java/vector/src/main/java/org/apache/arrow/vector/Float4Vector.java\nindex 5670827990..138ea3378e 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/Float4Vector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/Float4Vector.java\n@@ -255,9 +255,8 @@ public void setSafe(int index, Float4Holder holder) {\n    */\n   public void setNull(int index) {\n     handleSafe(index);\n-      /* not really needed to set the bit to 0 as long as\n-       * the buffer always starts from 0.\n-       */\n+    // not really needed to set the bit to 0 as long as\n+    // the buffer always starts from 0.\n     BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n   }\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/Float8Vector.java b/java/vector/src/main/java/org/apache/arrow/vector/Float8Vector.java\nindex cc36b05b61..6d9c20efe0 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/Float8Vector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/Float8Vector.java\n@@ -255,9 +255,8 @@ public void setSafe(int index, Float8Holder holder) {\n    */\n   public void setNull(int index) {\n     handleSafe(index);\n-      /* not really needed to set the bit to 0 as long as\n-       * the buffer always starts from 0.\n-       */\n+    // not really needed to set the bit to 0 as long as\n+    // the buffer always starts from 0.\n     BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n   }\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/IntVector.java b/java/vector/src/main/java/org/apache/arrow/vector/IntVector.java\nindex f3e4305424..fb1ce60a05 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/IntVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/IntVector.java\n@@ -261,9 +261,8 @@ public void setSafe(int index, IntHolder holder) {\n    */\n   public void setNull(int index) {\n     handleSafe(index);\n-      /* not really needed to set the bit to 0 as long as\n-       * the buffer always starts from 0.\n-       */\n+    // not really needed to set the bit to 0 as long as\n+    // the buffer always starts from 0.\n     BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n   }\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/IntervalDayVector.java b/java/vector/src/main/java/org/apache/arrow/vector/IntervalDayVector.java\nindex 8303b74c2a..583c18fa91 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/IntervalDayVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/IntervalDayVector.java\n@@ -325,9 +325,8 @@ public void setSafe(int index, IntervalDayHolder holder) {\n    */\n   public void setNull(int index) {\n     handleSafe(index);\n-      /* not really needed to set the bit to 0 as long as\n-       * the buffer always starts from 0.\n-       */\n+    // not really needed to set the bit to 0 as long as\n+    // the buffer always starts from 0.\n     BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n   }\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/IntervalYearVector.java b/java/vector/src/main/java/org/apache/arrow/vector/IntervalYearVector.java\nindex ed627bbc72..db97748205 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/IntervalYearVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/IntervalYearVector.java\n@@ -286,9 +286,8 @@ public void setSafe(int index, IntervalYearHolder holder) {\n    */\n   public void setNull(int index) {\n     handleSafe(index);\n-      /* not really needed to set the bit to 0 as long as\n-       * the buffer always starts from 0.\n-       */\n+    // not really needed to set the bit to 0 as long as\n+    // the buffer always starts from 0.\n     BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n   }\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/SmallIntVector.java b/java/vector/src/main/java/org/apache/arrow/vector/SmallIntVector.java\nindex 09ffd1c5fd..a66025266f 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/SmallIntVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/SmallIntVector.java\n@@ -283,9 +283,8 @@ public void setSafe(int index, SmallIntHolder holder) {\n    */\n   public void setNull(int index) {\n     handleSafe(index);\n-      /* not really needed to set the bit to 0 as long as\n-       * the buffer always starts from 0.\n-       */\n+    // not really needed to set the bit to 0 as long as\n+    // the buffer always starts from 0.\n     BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n   }\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeMicroVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeMicroVector.java\nindex f861755775..ae9f26cd62 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeMicroVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/TimeMicroVector.java\n@@ -255,9 +255,8 @@ public void setSafe(int index, TimeMicroHolder holder) {\n    */\n   public void setNull(int index) {\n     handleSafe(index);\n-      /* not really needed to set the bit to 0 as long as\n-       * the buffer always starts from 0.\n-       */\n+    // not really needed to set the bit to 0 as long as\n+    // the buffer always starts from 0.\n     BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n   }\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeMilliVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeMilliVector.java\nindex a843c5c48c..4ea23a302a 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeMilliVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/TimeMilliVector.java\n@@ -256,9 +256,8 @@ public void setSafe(int index, TimeMilliHolder holder) {\n    */\n   public void setNull(int index) {\n     handleSafe(index);\n-      /* not really needed to set the bit to 0 as long as\n-       * the buffer always starts from 0.\n-       */\n+    // not really needed to set the bit to 0 as long as\n+    // the buffer always starts from 0.\n     BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n   }\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeNanoVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeNanoVector.java\nindex 23d764f420..aeeff00c31 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeNanoVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/TimeNanoVector.java\n@@ -255,9 +255,8 @@ public void setSafe(int index, TimeNanoHolder holder) {\n    */\n   public void setNull(int index) {\n     handleSafe(index);\n-      /* not really needed to set the bit to 0 as long as\n-       * the buffer always starts from 0.\n-       */\n+    // not really needed to set the bit to 0 as long as\n+    // the buffer always starts from 0.\n     BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n   }\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeSecVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeSecVector.java\nindex 3662aec34e..81669f00b3 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeSecVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/TimeSecVector.java\n@@ -255,9 +255,8 @@ public void setSafe(int index, TimeSecHolder holder) {\n    */\n   public void setNull(int index) {\n     handleSafe(index);\n-      /* not really needed to set the bit to 0 as long as\n-       * the buffer always starts from 0.\n-       */\n+    // not really needed to set the bit to 0 as long as\n+    // the buffer always starts from 0.\n     BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n   }\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMicroTZVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMicroTZVector.java\nindex daeda40339..b3b0a32a29 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMicroTZVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMicroTZVector.java\n@@ -25,6 +25,7 @@\n import org.apache.arrow.vector.holders.TimeStampMicroTZHolder;\n import org.apache.arrow.vector.types.TimeUnit;\n import org.apache.arrow.vector.types.Types.MinorType;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n import org.apache.arrow.vector.types.pojo.FieldType;\n import org.apache.arrow.vector.util.TransferPair;\n \n@@ -44,8 +45,7 @@\n    * @param allocator allocator for memory management.\n    */\n   public TimeStampMicroTZVector(String name, BufferAllocator allocator, String timeZone) {\n-    this(name, FieldType.nullable(new org.apache.arrow.vector.types.pojo.ArrowType.Timestamp(TimeUnit.MICROSECOND, timeZone)),\n-            allocator);\n+    this(name, FieldType.nullable(new ArrowType.Timestamp(TimeUnit.MICROSECOND, timeZone)), allocator);\n   }\n \n   /**\n@@ -57,7 +57,7 @@ public TimeStampMicroTZVector(String name, BufferAllocator allocator, String tim\n    */\n   public TimeStampMicroTZVector(String name, FieldType fieldType, BufferAllocator allocator) {\n     super(name, fieldType, allocator);\n-    org.apache.arrow.vector.types.pojo.ArrowType.Timestamp arrowType = (org.apache.arrow.vector.types.pojo.ArrowType.Timestamp) fieldType.getType();\n+    ArrowType.Timestamp arrowType = (ArrowType.Timestamp) fieldType.getType();\n     timeZone = arrowType.getTimezone();\n     reader = new TimeStampMicroTZReaderImpl(TimeStampMicroTZVector.this);\n   }\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMicroVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMicroVector.java\nindex b8db2d4d1c..7821910236 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMicroVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMicroVector.java\n@@ -111,7 +111,7 @@ public LocalDateTime getObject(int index) {\n     if (isSet(index) == 0) {\n       return null;\n     } else {\n-         /* value is truncated when converting microseconds to milliseconds in order to use DateTime type */\n+      /* value is truncated when converting microseconds to milliseconds in order to use DateTime type */\n       final long micros = valueBuffer.getLong(index * TYPE_WIDTH);\n       final long millis = java.util.concurrent.TimeUnit.MICROSECONDS.toMillis(micros);\n       final org.joda.time.LocalDateTime localDateTime = new org.joda.time.LocalDateTime(millis,\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMilliTZVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMilliTZVector.java\nindex f98bcfe308..665bfb3743 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMilliTZVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampMilliTZVector.java\n@@ -25,6 +25,7 @@\n import org.apache.arrow.vector.holders.TimeStampMilliTZHolder;\n import org.apache.arrow.vector.types.TimeUnit;\n import org.apache.arrow.vector.types.Types.MinorType;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n import org.apache.arrow.vector.types.pojo.FieldType;\n import org.apache.arrow.vector.util.TransferPair;\n \n@@ -44,8 +45,7 @@\n    * @param allocator allocator for memory management.\n    */\n   public TimeStampMilliTZVector(String name, BufferAllocator allocator, String timeZone) {\n-    this(name, FieldType.nullable(new org.apache.arrow.vector.types.pojo.ArrowType.Timestamp(TimeUnit.MILLISECOND, timeZone)),\n-            allocator);\n+    this(name, FieldType.nullable(new ArrowType.Timestamp(TimeUnit.MILLISECOND, timeZone)), allocator);\n   }\n \n   /**\n@@ -57,7 +57,7 @@ public TimeStampMilliTZVector(String name, BufferAllocator allocator, String tim\n    */\n   public TimeStampMilliTZVector(String name, FieldType fieldType, BufferAllocator allocator) {\n     super(name, fieldType, allocator);\n-    org.apache.arrow.vector.types.pojo.ArrowType.Timestamp arrowType = (org.apache.arrow.vector.types.pojo.ArrowType.Timestamp) fieldType.getType();\n+    ArrowType.Timestamp arrowType = (ArrowType.Timestamp) fieldType.getType();\n     timeZone = arrowType.getTimezone();\n     reader = new TimeStampMilliTZReaderImpl(TimeStampMilliTZVector.this);\n   }\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampNanoTZVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampNanoTZVector.java\nindex 9ced90596e..0c6b0a409f 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampNanoTZVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampNanoTZVector.java\n@@ -25,6 +25,7 @@\n import org.apache.arrow.vector.holders.TimeStampNanoTZHolder;\n import org.apache.arrow.vector.types.TimeUnit;\n import org.apache.arrow.vector.types.Types.MinorType;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n import org.apache.arrow.vector.types.pojo.FieldType;\n import org.apache.arrow.vector.util.TransferPair;\n \n@@ -44,8 +45,7 @@\n    * @param allocator allocator for memory management.\n    */\n   public TimeStampNanoTZVector(String name, BufferAllocator allocator, String timeZone) {\n-    this(name, FieldType.nullable(new org.apache.arrow.vector.types.pojo.ArrowType.Timestamp(TimeUnit.NANOSECOND, timeZone)),\n-            allocator);\n+    this(name, FieldType.nullable(new ArrowType.Timestamp(TimeUnit.NANOSECOND, timeZone)), allocator);\n   }\n \n   /**\n@@ -57,7 +57,7 @@ public TimeStampNanoTZVector(String name, BufferAllocator allocator, String time\n    */\n   public TimeStampNanoTZVector(String name, FieldType fieldType, BufferAllocator allocator) {\n     super(name, fieldType, allocator);\n-    org.apache.arrow.vector.types.pojo.ArrowType.Timestamp arrowType = (org.apache.arrow.vector.types.pojo.ArrowType.Timestamp) fieldType.getType();\n+    ArrowType.Timestamp arrowType = (ArrowType.Timestamp) fieldType.getType();\n     timeZone = arrowType.getTimezone();\n     reader = new TimeStampNanoTZReaderImpl(TimeStampNanoTZVector.this);\n   }\n@@ -165,7 +165,9 @@ public void set(int index, TimeStampNanoTZHolder holder) {\n    * @param index   position of element\n    * @param holder  nullable data holder for value of element\n    */\n-  public void setSafe(int index, NullableTimeStampNanoTZHolder holder) throws IllegalArgumentException {\n+  public void setSafe(\n+      int index,\n+      NullableTimeStampNanoTZHolder holder) throws IllegalArgumentException {\n     handleSafe(index);\n     set(index, holder);\n   }\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampSecTZVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampSecTZVector.java\nindex d06564e3d1..ec514e8a64 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampSecTZVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampSecTZVector.java\n@@ -23,7 +23,9 @@\n import org.apache.arrow.vector.complex.reader.FieldReader;\n import org.apache.arrow.vector.holders.NullableTimeStampSecTZHolder;\n import org.apache.arrow.vector.holders.TimeStampSecTZHolder;\n+import org.apache.arrow.vector.types.TimeUnit;\n import org.apache.arrow.vector.types.Types.MinorType;\n+import org.apache.arrow.vector.types.pojo.ArrowType;\n import org.apache.arrow.vector.types.pojo.FieldType;\n import org.apache.arrow.vector.util.TransferPair;\n \n@@ -43,8 +45,7 @@\n    * @param allocator allocator for memory management.\n    */\n   public TimeStampSecTZVector(String name, BufferAllocator allocator, String timeZone) {\n-    this(name, FieldType.nullable(new org.apache.arrow.vector.types.pojo.ArrowType.Timestamp(org.apache.arrow.vector.types.TimeUnit.SECOND, timeZone)),\n-            allocator);\n+    this(name, FieldType.nullable(new ArrowType.Timestamp(TimeUnit.SECOND, timeZone)), allocator);\n   }\n \n   /**\n@@ -56,7 +57,7 @@ public TimeStampSecTZVector(String name, BufferAllocator allocator, String timeZ\n    */\n   public TimeStampSecTZVector(String name, FieldType fieldType, BufferAllocator allocator) {\n     super(name, fieldType, allocator);\n-    org.apache.arrow.vector.types.pojo.ArrowType.Timestamp arrowType = (org.apache.arrow.vector.types.pojo.ArrowType.Timestamp) fieldType.getType();\n+    ArrowType.Timestamp arrowType = (ArrowType.Timestamp) fieldType.getType();\n     timeZone = arrowType.getTimezone();\n     reader = new TimeStampSecTZReaderImpl(TimeStampSecTZVector.this);\n   }\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampVector.java\nindex c970d30381..680812ec1f 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TimeStampVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/TimeStampVector.java\n@@ -132,9 +132,8 @@ public void setSafe(int index, long value) {\n    */\n   public void setNull(int index) {\n     handleSafe(index);\n-      /* not really needed to set the bit to 0 as long as\n-       * the buffer always starts from 0.\n-       */\n+    // not really needed to set the bit to 0 as long as\n+    // the buffer always starts from 0.\n     BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n   }\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TinyIntVector.java b/java/vector/src/main/java/org/apache/arrow/vector/TinyIntVector.java\nindex ac390b895f..e10a63c41a 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TinyIntVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/TinyIntVector.java\n@@ -282,9 +282,8 @@ public void setSafe(int index, TinyIntHolder holder) {\n    */\n   public void setNull(int index) {\n     handleSafe(index);\n-      /* not really needed to set the bit to 0 as long as\n-       * the buffer always starts from 0.\n-       */\n+    // not really needed to set the bit to 0 as long as\n+    // the buffer always starts from 0.\n     BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n   }\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/TypeLayout.java b/java/vector/src/main/java/org/apache/arrow/vector/TypeLayout.java\nindex 4c05b97b4a..cccb3b2c3a 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/TypeLayout.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/TypeLayout.java\n@@ -158,7 +158,8 @@ public TypeLayout visit(Utf8 type) {\n       }\n \n       private TypeLayout newVariableWidthTypeLayout() {\n-        return newPrimitiveTypeLayout(BufferLayout.validityVector(), BufferLayout.offsetBuffer(), BufferLayout.byteVector());\n+        return newPrimitiveTypeLayout(BufferLayout.validityVector(), BufferLayout.offsetBuffer(),\n+          BufferLayout.byteVector());\n       }\n \n       private TypeLayout newPrimitiveTypeLayout(BufferLayout... vectors) {\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/UInt1Vector.java b/java/vector/src/main/java/org/apache/arrow/vector/UInt1Vector.java\nindex fa93372cb8..c83f8309fb 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/UInt1Vector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/UInt1Vector.java\n@@ -244,9 +244,8 @@ public void setSafe(int index, UInt1Holder holder) {\n    */\n   public void setNull(int index) {\n     handleSafe(index);\n-      /* not really needed to set the bit to 0 as long as\n-       * the buffer always starts from 0.\n-       */\n+    // not really needed to set the bit to 0 as long as\n+    // the buffer always starts from 0.\n     BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n   }\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/UInt2Vector.java b/java/vector/src/main/java/org/apache/arrow/vector/UInt2Vector.java\nindex e4550b17e9..9c6dbcb99a 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/UInt2Vector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/UInt2Vector.java\n@@ -244,9 +244,8 @@ public void setSafe(int index, UInt2Holder holder) {\n    */\n   public void setNull(int index) {\n     handleSafe(index);\n-      /* not really needed to set the bit to 0 as long as\n-       * the buffer always starts from 0.\n-       */\n+    // not really needed to set the bit to 0 as long as\n+    // the buffer always starts from 0.\n     BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n   }\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/UInt4Vector.java b/java/vector/src/main/java/org/apache/arrow/vector/UInt4Vector.java\nindex cce1bd493f..cf2ad8c6e8 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/UInt4Vector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/UInt4Vector.java\n@@ -216,9 +216,8 @@ public void setSafe(int index, UInt4Holder holder) {\n    */\n   public void setNull(int index) {\n     handleSafe(index);\n-      /* not really needed to set the bit to 0 as long as\n-       * the buffer always starts from 0.\n-       */\n+    // not really needed to set the bit to 0 as long as\n+    // the buffer always starts from 0.\n     BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n   }\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/UInt8Vector.java b/java/vector/src/main/java/org/apache/arrow/vector/UInt8Vector.java\nindex c981048ab3..ea5bd20cd4 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/UInt8Vector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/UInt8Vector.java\n@@ -216,9 +216,8 @@ public void setSafe(int index, UInt8Holder holder) {\n    */\n   public void setNull(int index) {\n     handleSafe(index);\n-      /* not really needed to set the bit to 0 as long as\n-       * the buffer always starts from 0.\n-       */\n+    // not really needed to set the bit to 0 as long as\n+    // the buffer always starts from 0.\n     BitVectorHelper.setValidityBit(validityBuffer, index, 0);\n   }\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/VectorLoader.java b/java/vector/src/main/java/org/apache/arrow/vector/VectorLoader.java\nindex c933d149f8..06f3ec649d 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/VectorLoader.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/VectorLoader.java\n@@ -62,11 +62,16 @@ public void load(ArrowRecordBatch recordBatch) {\n     }\n     root.setRowCount(recordBatch.getLength());\n     if (nodes.hasNext() || buffers.hasNext()) {\n-      throw new IllegalArgumentException(\"not all nodes and buffers were consumed. nodes: \" + Iterators.toString(nodes) + \" buffers: \" + Iterators.toString(buffers));\n+      throw new IllegalArgumentException(\"not all nodes and buffers were consumed. nodes: \" +\n+        Iterators.toString(nodes) + \" buffers: \" + Iterators.toString(buffers));\n     }\n   }\n \n-  private void loadBuffers(FieldVector vector, Field field, Iterator<ArrowBuf> buffers, Iterator<ArrowFieldNode> nodes) {\n+  private void loadBuffers(\n+      FieldVector vector,\n+      Field field,\n+      Iterator<ArrowBuf> buffers,\n+      Iterator<ArrowFieldNode> nodes) {\n     checkArgument(nodes.hasNext(),\n         \"no more field nodes for for field \" + field + \" and vector \" + vector);\n     ArrowFieldNode fieldNode = nodes.next();\n@@ -84,7 +89,8 @@ private void loadBuffers(FieldVector vector, Field field, Iterator<ArrowBuf> buf\n     List<Field> children = field.getChildren();\n     if (children.size() > 0) {\n       List<FieldVector> childrenFromFields = vector.getChildrenFromFields();\n-      checkArgument(children.size() == childrenFromFields.size(), \"should have as many children as in the schema: found \" + childrenFromFields.size() + \" expected \" + children.size());\n+      checkArgument(children.size() == childrenFromFields.size(), \"should have as many children as in the schema: \" +\n+          \"found \" + childrenFromFields.size() + \" expected \" + children.size());\n       for (int i = 0; i < childrenFromFields.size(); i++) {\n         Field child = children.get(i);\n         FieldVector fieldVector = childrenFromFields.get(i);\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/complex/AbstractContainerVector.java b/java/vector/src/main/java/org/apache/arrow/vector/complex/AbstractContainerVector.java\nindex d2a3c4a62e..b9d0dc75a6 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/complex/AbstractContainerVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/complex/AbstractContainerVector.java\n@@ -82,7 +82,8 @@ public void close() {\n     if (clazz.isAssignableFrom(v.getClass())) {\n       return clazz.cast(v);\n     }\n-    throw new IllegalStateException(String.format(\"Vector requested [%s] was different than type stored [%s]. Arrow doesn't yet support heterogenous types.\", clazz.getSimpleName(), v.getClass().getSimpleName()));\n+    throw new IllegalStateException(String.format(\"Vector requested [%s] was different than type stored [%s]. Arrow \" +\n+      \"doesn't yet support heterogenous types.\", clazz.getSimpleName(), v.getClass().getSimpleName()));\n   }\n \n   protected boolean supportsDirectRead() {\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/complex/AbstractStructVector.java b/java/vector/src/main/java/org/apache/arrow/vector/complex/AbstractStructVector.java\nindex 8ea8b379f9..e38492e8ae 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/complex/AbstractStructVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/complex/AbstractStructVector.java\n@@ -136,7 +136,8 @@ public void reAlloc() {\n       }\n       return vector;\n     }\n-    final String message = \"Arrow does not support schema change yet. Existing[%s] and desired[%s] vector types mismatch\";\n+    final String message = \"Arrow does not support schema change yet. Existing[%s] and desired[%s] vector types \" +\n+        \"mismatch\";\n     throw new IllegalStateException(String.format(message, existing.getClass().getSimpleName(), clazz.getSimpleName()));\n   }\n \n@@ -179,7 +180,8 @@ public ValueVector getChildByOrdinal(int id) {\n   protected ValueVector add(String childName, FieldType fieldType) {\n     final ValueVector existing = getChild(childName);\n     if (existing != null) {\n-      throw new IllegalStateException(String.format(\"Vector already exists: Existing[%s], Requested[%s] \", existing.getClass().getSimpleName(), fieldType));\n+      throw new IllegalStateException(String.format(\"Vector already exists: Existing[%s], Requested[%s] \",\n+        existing.getClass().getSimpleName(), fieldType));\n     }\n     FieldVector vector = fieldType.createNewSingleVector(childName, allocator, callBack);\n     putChild(childName, vector);\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/complex/NonNullableStructVector.java b/java/vector/src/main/java/org/apache/arrow/vector/complex/NonNullableStructVector.java\nindex 621024f02a..b18767d32d 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/complex/NonNullableStructVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/complex/NonNullableStructVector.java\n@@ -278,6 +278,7 @@ public Object getObject(int index) {\n \n   @Override\n   public boolean isNull(int index) { return false; }\n+\n   @Override\n   public int getNullCount() { return 0; }\n \n@@ -292,8 +293,8 @@ public int getValueCount() {\n   }\n \n   public ValueVector getVectorById(int id) {\n-  return getChildByOrdinal(id);\n-}\n+    return getChildByOrdinal(id);\n+  }\n \n   @Override\n   public void setValueCount(int valueCount) {\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/complex/RepeatedValueVector.java b/java/vector/src/main/java/org/apache/arrow/vector/complex/RepeatedValueVector.java\nindex a7f6d43937..3660bb61fa 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/complex/RepeatedValueVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/complex/RepeatedValueVector.java\n@@ -25,9 +25,9 @@\n /**\n  * An abstraction representing repeated value vectors.\n  *\n- * A repeated vector contains values that may either be flat or nested. A value consists of zero or more cells(inner values).\n- * Current design maintains data and offsets vectors. Each cell is stored in the data vector. Repeated vector\n- * uses the offset vector to determine the sequence of cells pertaining to an individual value.\n+ * A repeated vector contains values that may either be flat or nested. A value consists of zero or more\n+ * cells(inner values). Current design maintains data and offsets vectors. Each cell is stored in the data vector.\n+ * Repeated vector uses the offset vector to determine the sequence of cells pertaining to an individual value.\n  */\n public interface RepeatedValueVector extends ValueVector, DensityAwareVector {\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/complex/StateTool.java b/java/vector/src/main/java/org/apache/arrow/vector/complex/StateTool.java\nindex 627998045c..c443324fac 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/complex/StateTool.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/complex/StateTool.java\n@@ -29,7 +29,8 @@\n         return;\n       }\n     }\n-    throw new IllegalArgumentException(String.format(\"Expected to be in one of these states %s but was actually in state %s\", Arrays.toString(expectedStates), currentState));\n+    throw new IllegalArgumentException(String.format(\"Expected to be in one of these states %s but was actually in \" +\n+      \"state %s\", Arrays.toString(expectedStates), currentState));\n   }\n \n }\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/complex/StructVector.java b/java/vector/src/main/java/org/apache/arrow/vector/complex/StructVector.java\nindex 29464e0c09..cef51ebdae 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/complex/StructVector.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/complex/StructVector.java\n@@ -71,7 +71,8 @@ public StructVector(String name, BufferAllocator allocator, DictionaryEncoding d\n   public StructVector(String name, BufferAllocator allocator, FieldType fieldType, CallBack callBack) {\n     super(name, checkNotNull(allocator), fieldType, callBack);\n     this.validityBuffer = allocator.getEmpty();\n-    this.validityAllocationSizeInBytes = BitVectorHelper.getValidityBufferSize(BaseValueVector.INITIAL_VALUE_ALLOCATION);\n+    this.validityAllocationSizeInBytes =\n+      BitVectorHelper.getValidityBufferSize(BaseValueVector.INITIAL_VALUE_ALLOCATION);\n   }\n \n   @Override\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/ComplexWriterImpl.java b/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/ComplexWriterImpl.java\nindex 4169adb6cb..603178f738 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/ComplexWriterImpl.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/ComplexWriterImpl.java\n@@ -28,7 +28,6 @@\n import com.google.common.base.Preconditions;\n \n public class ComplexWriterImpl extends AbstractFieldWriter implements ComplexWriter {\n-//  private static final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(ComplexWriterImpl.class);\n \n   private NullableStructWriter structRoot;\n   private UnionListWriter listRoot;\n@@ -41,14 +40,17 @@\n \n   private enum Mode {INIT, STRUCT, LIST}\n \n-  ;\n-\n-  public ComplexWriterImpl(String name, NonNullableStructVector container, boolean unionEnabled, boolean caseSensitive) {\n+  public ComplexWriterImpl(\n+      String name,\n+      NonNullableStructVector container,\n+      boolean unionEnabled,\n+      boolean caseSensitive) {\n     this.name = name;\n     this.container = container;\n     this.unionEnabled = unionEnabled;\n-    nullableStructWriterFactory = caseSensitive ? NullableStructWriterFactory.getNullableCaseSensitiveStructWriterFactoryInstance() :\n-        NullableStructWriterFactory.getNullableStructWriterFactoryInstance();\n+    nullableStructWriterFactory = caseSensitive ?\n+      NullableStructWriterFactory.getNullableCaseSensitiveStructWriterFactoryInstance() :\n+      NullableStructWriterFactory.getNullableStructWriterFactoryInstance();\n   }\n \n   public ComplexWriterImpl(String name, NonNullableStructVector container, boolean unionEnabled) {\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/NullableStructWriterFactory.java b/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/NullableStructWriterFactory.java\nindex 7499687c94..0da98a2003 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/NullableStructWriterFactory.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/NullableStructWriterFactory.java\n@@ -22,8 +22,10 @@\n \n public class NullableStructWriterFactory {\n   private final boolean caseSensitive;\n-  private static final NullableStructWriterFactory nullableStructWriterFactory = new NullableStructWriterFactory(false);\n-  private static final NullableStructWriterFactory nullableCaseSensitiveWriterFactory = new NullableStructWriterFactory(true);\n+  private static final NullableStructWriterFactory nullableStructWriterFactory =\n+      new NullableStructWriterFactory(false);\n+  private static final NullableStructWriterFactory nullableCaseSensitiveWriterFactory =\n+      new NullableStructWriterFactory(true);\n \n   public NullableStructWriterFactory(boolean caseSensitive) {\n     this.caseSensitive = caseSensitive;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/PromotableWriter.java b/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/PromotableWriter.java\nindex 4b25c86206..0338017668 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/PromotableWriter.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/complex/impl/PromotableWriter.java\n@@ -39,9 +39,9 @@\n \n /**\n  * This FieldWriter implementation delegates all FieldWriter API calls to an inner FieldWriter. This inner field writer\n- * can start as a specific type, and this class will promote the writer to a UnionWriter if a call is made that the specifically\n- * typed writer cannot handle. A new UnionVector is created, wrapping the original vector, and replaces the original vector\n- * in the parent vector, which can be either an AbstractStructVector or a ListVector.\n+ * can start as a specific type, and this class will promote the writer to a UnionWriter if a call is made that the\n+ * specifically typed writer cannot handle. A new UnionVector is created, wrapping the original vector, and replaces the\n+ * original vector in the parent vector, which can be either an AbstractStructVector or a ListVector.\n  */\n public class PromotableWriter extends AbstractPromotableFieldWriter {\n \n@@ -66,7 +66,10 @@ public PromotableWriter(ValueVector v, AbstractStructVector parentContainer) {\n     this(v, parentContainer, NullableStructWriterFactory.getNullableStructWriterFactoryInstance());\n   }\n \n-  public PromotableWriter(ValueVector v, AbstractStructVector parentContainer, NullableStructWriterFactory nullableStructWriterFactory) {\n+  public PromotableWriter(\n+      ValueVector v,\n+      AbstractStructVector parentContainer,\n+      NullableStructWriterFactory nullableStructWriterFactory) {\n     this.parentContainer = parentContainer;\n     this.listVector = null;\n     this.nullableStructWriterFactory = nullableStructWriterFactory;\n@@ -77,7 +80,10 @@ public PromotableWriter(ValueVector v, ListVector listVector) {\n     this(v, listVector, NullableStructWriterFactory.getNullableStructWriterFactoryInstance());\n   }\n \n-  public PromotableWriter(ValueVector v, ListVector listVector, NullableStructWriterFactory nullableStructWriterFactory) {\n+  public PromotableWriter(\n+      ValueVector v,\n+      ListVector listVector,\n+      NullableStructWriterFactory nullableStructWriterFactory) {\n     this.listVector = listVector;\n     this.parentContainer = null;\n     this.nullableStructWriterFactory = nullableStructWriterFactory;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/dictionary/DictionaryEncoder.java b/java/vector/src/main/java/org/apache/arrow/vector/dictionary/DictionaryEncoder.java\nindex eb28ab604b..e59f385f0f 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/dictionary/DictionaryEncoder.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/dictionary/DictionaryEncoder.java\n@@ -136,7 +136,8 @@ public static ValueVector decode(ValueVector indices, Dictionary dictionary) {\n   private static void validateType(MinorType type) {\n     // byte arrays don't work as keys in our dictionary map - we could wrap them with something to\n     // implement equals and hashcode if we want that functionality\n-    if (type == MinorType.VARBINARY || type == MinorType.FIXEDSIZEBINARY || type == MinorType.LIST || type == MinorType.STRUCT || type == MinorType.UNION) {\n+    if (type == MinorType.VARBINARY || type == MinorType.FIXEDSIZEBINARY || type == MinorType.LIST ||\n+        type == MinorType.STRUCT || type == MinorType.UNION) {\n       throw new IllegalArgumentException(\"Dictionary encoding for complex types not implemented: type \" + type);\n     }\n   }\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowWriter.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowWriter.java\nindex 93f2521ac1..43f1698df5 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowWriter.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/ArrowWriter.java\n@@ -84,7 +84,8 @@ protected ArrowWriter(VectorSchemaRoot root, DictionaryProvider provider, Writab\n       Dictionary dictionary = provider.lookup(id);\n       FieldVector vector = dictionary.getVector();\n       int count = vector.getValueCount();\n-      VectorSchemaRoot dictRoot = new VectorSchemaRoot(ImmutableList.of(vector.getField()), ImmutableList.of(vector), count);\n+      VectorSchemaRoot dictRoot = new VectorSchemaRoot(ImmutableList.of(vector.getField()), ImmutableList.of(vector),\n+          count);\n       VectorUnloader unloader = new VectorUnloader(dictRoot);\n       ArrowRecordBatch batch = unloader.getRecordBatch();\n       this.dictionaries.add(new ArrowDictionaryBatch(id, batch));\n@@ -107,14 +108,14 @@ public void writeBatch() throws IOException {\n   protected ArrowBlock writeDictionaryBatch(ArrowDictionaryBatch batch) throws IOException {\n     ArrowBlock block = MessageSerializer.serialize(out, batch);\n     LOGGER.debug(String.format(\"DictionaryRecordBatch at %d, metadata: %d, body: %d\",\n-      block.getOffset(), block.getMetadataLength(), block.getBodyLength()));\n+        block.getOffset(), block.getMetadataLength(), block.getBodyLength()));\n     return block;\n   }\n \n   protected ArrowBlock writeRecordBatch(ArrowRecordBatch batch) throws IOException {\n     ArrowBlock block = MessageSerializer.serialize(out, batch);\n     LOGGER.debug(String.format(\"RecordBatch at %d, metadata: %d, body: %d\",\n-      block.getOffset(), block.getMetadataLength(), block.getBodyLength()));\n+        block.getOffset(), block.getMetadataLength(), block.getBodyLength()));\n     return block;\n   }\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileReader.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileReader.java\nindex 64170173f6..e4f4e57ced 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileReader.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileReader.java\n@@ -136,7 +136,8 @@ private void readDictionaryBatches() throws JsonParseException, IOException {\n     }\n \n     if (token != END_ARRAY) {\n-      throw new IllegalArgumentException(\"Invalid token: \" + token + \" expected end of array at \" + parser.getTokenLocation());\n+      throw new IllegalArgumentException(\"Invalid token: \" + token + \" expected end of array at \" +\n+        parser.getTokenLocation());\n     }\n   }\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileWriter.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileWriter.java\nindex 6d099b6997..e6f12753d8 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileWriter.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/JsonFileWriter.java\n@@ -113,7 +113,8 @@ public void start(Schema schema, DictionaryProvider provider) throws IOException\n     generator.writeArrayFieldStart(\"batches\");\n   }\n \n-  private void writeDictionaryBatches(JsonGenerator generator, Set<Long> dictionaryIdsUsed, DictionaryProvider provider) throws IOException {\n+  private void writeDictionaryBatches(JsonGenerator generator, Set<Long> dictionaryIdsUsed, DictionaryProvider provider)\n+      throws IOException {\n     generator.writeArrayFieldStart(\"dictionaries\");\n     for (Long id : dictionaryIdsUsed) {\n       generator.writeStartObject();\n@@ -157,7 +158,8 @@ private void writeFromVectorIntoJson(Field field, FieldVector vector) throws IOE\n     List<BufferType> vectorTypes = TypeLayout.getTypeLayout(field.getType()).getBufferTypes();\n     List<ArrowBuf> vectorBuffers = vector.getFieldBuffers();\n     if (vectorTypes.size() != vectorBuffers.size()) {\n-      throw new IllegalArgumentException(\"vector types and inner vector buffers are not the same size: \" + vectorTypes.size() + \" != \" + vectorBuffers.size());\n+      throw new IllegalArgumentException(\"vector types and inner vector buffers are not the same size: \" +\n+        vectorTypes.size() + \" != \" + vectorBuffers.size());\n     }\n     generator.writeStartObject();\n     {\n@@ -183,7 +185,8 @@ private void writeFromVectorIntoJson(Field field, FieldVector vector) throws IOE\n       List<Field> fields = field.getChildren();\n       List<FieldVector> children = vector.getChildrenFromFields();\n       if (fields.size() != children.size()) {\n-        throw new IllegalArgumentException(\"fields and children are not the same size: \" + fields.size() + \" != \" + children.size());\n+        throw new IllegalArgumentException(\"fields and children are not the same size: \" + fields.size() + \" != \" +\n+          children.size());\n       }\n       if (fields.size() > 0) {\n         generator.writeArrayFieldStart(\"children\");\n@@ -198,9 +201,12 @@ private void writeFromVectorIntoJson(Field field, FieldVector vector) throws IOE\n     generator.writeEndObject();\n   }\n \n-  private void writeValueToGenerator(BufferType bufferType, ArrowBuf buffer,\n-                                     ArrowBuf offsetBuffer, FieldVector vector,\n-                                     final int index) throws IOException {\n+  private void writeValueToGenerator(\n+      BufferType bufferType,\n+      ArrowBuf buffer,\n+      ArrowBuf offsetBuffer,\n+      FieldVector vector,\n+      final int index) throws IOException {\n     if (bufferType.equals(TYPE)) {\n       generator.writeNumber(buffer.getByte(index * TinyIntVector.TYPE_WIDTH));\n     } else if (bufferType.equals(OFFSET)) {\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/ArrowRecordBatch.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/ArrowRecordBatch.java\nindex 6c6481e74d..83d7c0654a 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/ArrowRecordBatch.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/ArrowRecordBatch.java\n@@ -141,8 +141,8 @@ public void close() {\n \n   @Override\n   public String toString() {\n-    return \"ArrowRecordBatch [length=\" + length + \", nodes=\" + nodes + \", #buffers=\" + buffers.size() + \", buffersLayout=\"\n-        + buffersLayout + \", closed=\" + closed + \"]\";\n+    return \"ArrowRecordBatch [length=\" + length + \", nodes=\" + nodes + \", #buffers=\" + buffers.size() +\n+      \", buffersLayout=\" + buffersLayout + \", closed=\" + closed + \"]\";\n   }\n \n   /**\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageSerializer.java b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageSerializer.java\nindex 5aace0c6d4..5d69ee2c7d 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageSerializer.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/ipc/message/MessageSerializer.java\n@@ -94,7 +94,8 @@ public static void intToBytes(int value, byte[] bytes) {\n    * @return Number of bytes written\n    * @throws IOException\n    */\n-  public static int writeMessageBuffer(WriteChannel out, int messageLength, ByteBuffer messageBuffer) throws IOException {\n+  public static int writeMessageBuffer(WriteChannel out, int messageLength, ByteBuffer messageBuffer)\n+      throws IOException {\n \n     // ensure that message aligns to 8 byte padding - 4 bytes for size, then message body\n     if ((messageLength + 4) % 8 != 0) {\n@@ -169,8 +170,7 @@ public static Schema deserializeSchema(ReadChannel in) throws IOException {\n    * @return the serialized block metadata\n    * @throws IOException if something went wrong\n    */\n-  public static ArrowBlock serialize(WriteChannel out, ArrowRecordBatch batch)\n-      throws IOException {\n+  public static ArrowBlock serialize(WriteChannel out, ArrowRecordBatch batch) throws IOException {\n \n     long start = out.getCurrentPosition();\n     int bodyLength = batch.computeBodyLength();\n@@ -278,8 +278,8 @@ public static ArrowRecordBatch deserializeRecordBatch(ReadChannel in, BufferAllo\n    * @return the deserialized ArrowRecordBatch\n    * @throws IOException if something went wrong\n    */\n-  public static ArrowRecordBatch deserializeRecordBatch(ReadChannel in, ArrowBlock block,\n-                                                        BufferAllocator alloc) throws IOException {\n+  public static ArrowRecordBatch deserializeRecordBatch(ReadChannel in, ArrowBlock block, BufferAllocator alloc)\n+      throws IOException {\n     // Metadata length contains integer prefix plus byte padding\n     long totalLen = block.getMetadataLength() + block.getBodyLength();\n \n@@ -313,8 +313,7 @@ public static ArrowRecordBatch deserializeRecordBatch(ReadChannel in, ArrowBlock\n    * @return ArrowRecordBatch from metadata and in-memory body\n    * @throws IOException\n    */\n-  public static ArrowRecordBatch deserializeRecordBatch(RecordBatch recordBatchFB,\n-                                                        ArrowBuf body) throws IOException {\n+  public static ArrowRecordBatch deserializeRecordBatch(RecordBatch recordBatchFB, ArrowBuf body) throws IOException {\n     // Now read the body\n     int nodesLength = recordBatchFB.nodesLength();\n     List<ArrowFieldNode> nodes = new ArrayList<>();\n@@ -391,7 +390,8 @@ public static ArrowBlock serialize(WriteChannel out, ArrowDictionaryBatch batch)\n    * @return the deserialized ArrowDictionaryBatch\n    * @throws IOException if something went wrong\n    */\n-  public static ArrowDictionaryBatch deserializeDictionaryBatch(Message message, ArrowBuf bodyBuffer) throws IOException {\n+  public static ArrowDictionaryBatch deserializeDictionaryBatch(Message message, ArrowBuf bodyBuffer)\n+      throws IOException {\n     DictionaryBatch dictionaryBatchFB = (DictionaryBatch) message.header(new DictionaryBatch());\n     ArrowRecordBatch recordBatch = deserializeRecordBatch(dictionaryBatchFB.data(), bodyBuffer);\n     return new ArrowDictionaryBatch(dictionaryBatchFB.id(), recordBatch);\n@@ -406,7 +406,8 @@ public static ArrowDictionaryBatch deserializeDictionaryBatch(Message message, A\n    * @return the deserialized ArrowDictionaryBatch\n    * @throws IOException\n    */\n-  public static ArrowDictionaryBatch deserializeDictionaryBatch(ReadChannel in, BufferAllocator allocator) throws IOException {\n+  public static ArrowDictionaryBatch deserializeDictionaryBatch(ReadChannel in, BufferAllocator allocator)\n+      throws IOException {\n     MessageMetadataResult result = readMessage(in);\n     if (result == null) {\n       throw new IOException(\"Unexpected end of input when reading a DictionaryBatch\");\n@@ -429,9 +430,10 @@ public static ArrowDictionaryBatch deserializeDictionaryBatch(ReadChannel in, Bu\n    * @return the deserialized ArrowDictionaryBatch\n    * @throws IOException if something went wrong\n    */\n-  public static ArrowDictionaryBatch deserializeDictionaryBatch(ReadChannel in,\n-                                                                ArrowBlock block,\n-                                                                BufferAllocator alloc) throws IOException {\n+  public static ArrowDictionaryBatch deserializeDictionaryBatch(\n+      ReadChannel in,\n+      ArrowBlock block,\n+      BufferAllocator alloc) throws IOException {\n     // Metadata length contains integer prefix plus byte padding\n     long totalLen = block.getMetadataLength() + block.getBodyLength();\n \n@@ -508,8 +510,11 @@ public static ArrowMessage deserializeMessageBatch(ReadChannel in, BufferAllocat\n    * @param bodyLength   body length field\n    * @return the corresponding ByteBuffer\n    */\n-  public static ByteBuffer serializeMessage(FlatBufferBuilder builder, byte headerType,\n-                                            int headerOffset, int bodyLength) {\n+  public static ByteBuffer serializeMessage(\n+      FlatBufferBuilder builder,\n+      byte headerType,\n+      int headerOffset,\n+      int bodyLength) {\n     Message.startMessage(builder);\n     Message.addHeaderType(builder, headerType);\n     Message.addHeader(builder, headerOffset);\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/types/FloatingPointPrecision.java b/java/vector/src/main/java/org/apache/arrow/vector/types/FloatingPointPrecision.java\nindex ec253287b2..2b76052aa7 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/types/FloatingPointPrecision.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/types/FloatingPointPrecision.java\n@@ -25,7 +25,8 @@\n   SINGLE(Precision.SINGLE),\n   DOUBLE(Precision.DOUBLE);\n \n-  private static final FloatingPointPrecision[] valuesByFlatbufId = new FloatingPointPrecision[FloatingPointPrecision.values().length];\n+  private static final FloatingPointPrecision[] valuesByFlatbufId =\n+    new FloatingPointPrecision[FloatingPointPrecision.values().length];\n \n   static {\n     for (FloatingPointPrecision v : FloatingPointPrecision.values()) {\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/types/Types.java b/java/vector/src/main/java/org/apache/arrow/vector/types/Types.java\nindex d79f72f61e..04ed5f5333 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/types/Types.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/types/Types.java\n@@ -122,7 +122,11 @@\n   public enum MinorType {\n     NULL(Null.INSTANCE) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return ZeroVector.INSTANCE;\n       }\n \n@@ -133,7 +137,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     },\n     STRUCT(Struct.INSTANCE) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new StructVector(name, allocator, fieldType, schemaChangeCallback);\n       }\n \n@@ -144,7 +152,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     },\n     TINYINT(new Int(8, true)) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new TinyIntVector(name, fieldType, allocator);\n       }\n \n@@ -155,7 +167,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     },\n     SMALLINT(new Int(16, true)) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new SmallIntVector(name, fieldType, allocator);\n       }\n \n@@ -166,7 +182,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     },\n     INT(new Int(32, true)) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new IntVector(name, fieldType, allocator);\n       }\n \n@@ -177,7 +197,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     },\n     BIGINT(new Int(64, true)) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new BigIntVector(name, fieldType, allocator);\n       }\n \n@@ -188,7 +212,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     },\n     DATEDAY(new Date(DateUnit.DAY)) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new DateDayVector(name, fieldType, allocator);\n       }\n \n@@ -199,7 +227,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     },\n     DATEMILLI(new Date(DateUnit.MILLISECOND)) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new DateMilliVector(name, fieldType, allocator);\n       }\n \n@@ -210,7 +242,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     },\n     TIMESEC(new Time(TimeUnit.SECOND, 32)) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new TimeSecVector(name, fieldType, allocator);\n       }\n \n@@ -221,7 +257,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     },\n     TIMEMILLI(new Time(TimeUnit.MILLISECOND, 32)) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new TimeMilliVector(name, fieldType, allocator);\n       }\n \n@@ -232,7 +272,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     },\n     TIMEMICRO(new Time(TimeUnit.MICROSECOND, 64)) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new TimeMicroVector(name, fieldType, allocator);\n       }\n \n@@ -243,7 +287,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     },\n     TIMENANO(new Time(TimeUnit.NANOSECOND, 64)) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new TimeNanoVector(name, fieldType, allocator);\n       }\n \n@@ -255,7 +303,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     // time in second from the Unix epoch, 00:00:00.000000 on 1 January 1970, UTC.\n     TIMESTAMPSEC(new Timestamp(org.apache.arrow.vector.types.TimeUnit.SECOND, null)) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new TimeStampSecVector(name, fieldType, allocator);\n       }\n \n@@ -267,7 +319,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     // time in millis from the Unix epoch, 00:00:00.000 on 1 January 1970, UTC.\n     TIMESTAMPMILLI(new Timestamp(org.apache.arrow.vector.types.TimeUnit.MILLISECOND, null)) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new TimeStampMilliVector(name, fieldType, allocator);\n       }\n \n@@ -279,7 +335,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     // time in microsecond from the Unix epoch, 00:00:00.000000 on 1 January 1970, UTC.\n     TIMESTAMPMICRO(new Timestamp(org.apache.arrow.vector.types.TimeUnit.MICROSECOND, null)) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new TimeStampMicroVector(name, fieldType, allocator);\n       }\n \n@@ -291,7 +351,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     // time in nanosecond from the Unix epoch, 00:00:00.000000000 on 1 January 1970, UTC.\n     TIMESTAMPNANO(new Timestamp(org.apache.arrow.vector.types.TimeUnit.NANOSECOND, null)) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new TimeStampNanoVector(name, fieldType, allocator);\n       }\n \n@@ -302,7 +366,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     },\n     INTERVALDAY(new Interval(IntervalUnit.DAY_TIME)) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new IntervalDayVector(name, fieldType, allocator);\n       }\n \n@@ -313,7 +381,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     },\n     INTERVALYEAR(new Interval(IntervalUnit.YEAR_MONTH)) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new IntervalYearVector(name, fieldType, allocator);\n       }\n \n@@ -325,7 +397,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     //  4 byte ieee 754\n     FLOAT4(new FloatingPoint(SINGLE)) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new Float4Vector(name, fieldType, allocator);\n       }\n \n@@ -337,7 +413,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     //  8 byte ieee 754\n     FLOAT8(new FloatingPoint(DOUBLE)) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new Float8Vector(name, fieldType, allocator);\n       }\n \n@@ -348,7 +428,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     },\n     BIT(Bool.INSTANCE) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new BitVector(name, fieldType, allocator);\n       }\n \n@@ -359,7 +443,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     },\n     VARCHAR(Utf8.INSTANCE) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new VarCharVector(name, fieldType, allocator);\n       }\n \n@@ -370,7 +458,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     },\n     VARBINARY(Binary.INSTANCE) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new VarBinaryVector(name, fieldType, allocator);\n       }\n \n@@ -381,7 +473,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     },\n     DECIMAL(null) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new DecimalVector(name, fieldType, allocator);\n       }\n \n@@ -392,7 +488,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     },\n     FIXEDSIZEBINARY(null) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new FixedSizeBinaryVector(name, fieldType, allocator);\n       }\n \n@@ -403,7 +503,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     },\n     UINT1(new Int(8, false)) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new UInt1Vector(name, fieldType, allocator);\n       }\n \n@@ -414,7 +518,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     },\n     UINT2(new Int(16, false)) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new UInt2Vector(name, fieldType, allocator);\n       }\n \n@@ -425,7 +533,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     },\n     UINT4(new Int(32, false)) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new UInt4Vector(name, fieldType, allocator);\n       }\n \n@@ -436,7 +548,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     },\n     UINT8(new Int(64, false)) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new UInt8Vector(name, fieldType, allocator);\n       }\n \n@@ -447,7 +563,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     },\n     LIST(List.INSTANCE) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new ListVector(name, allocator, fieldType, schemaChangeCallback);\n       }\n \n@@ -458,20 +578,30 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     },\n     FIXED_SIZE_LIST(null) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new FixedSizeListVector(name, allocator, fieldType, schemaChangeCallback);\n       }\n \n       @Override\n       public FieldWriter getNewFieldWriter(ValueVector vector) {\n-        throw new UnsupportedOperationException(\"FieldWriter not implemented for FixedSizeList type\");\n+        throw new UnsupportedOperationException(\"FieldWriter not implemented for FixedSizeList \" +\n+          \"type\");\n       }\n     },\n     UNION(new Union(Sparse, null)) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         if (fieldType.getDictionary() != null) {\n-          throw new UnsupportedOperationException(\"Dictionary encoding not supported for complex types\");\n+          throw new UnsupportedOperationException(\"Dictionary encoding not supported for complex \" +\n+            \"types\");\n         }\n         return new UnionVector(name, allocator, schemaChangeCallback);\n       }\n@@ -483,7 +613,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     },\n     TIMESTAMPSECTZ(null) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new TimeStampSecTZVector(name, fieldType, allocator);\n       }\n \n@@ -494,7 +628,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     },\n     TIMESTAMPMILLITZ(null) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new TimeStampMilliTZVector(name, fieldType, allocator);\n       }\n \n@@ -505,7 +643,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     },\n     TIMESTAMPMICROTZ(null) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new TimeStampMicroTZVector(name, fieldType, allocator);\n       }\n \n@@ -516,7 +658,11 @@ public FieldWriter getNewFieldWriter(ValueVector vector) {\n     },\n     TIMESTAMPNANOTZ(null) {\n       @Override\n-      public FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback) {\n+      public FieldVector getNewVector(\n+          String name,\n+          FieldType fieldType,\n+          BufferAllocator allocator,\n+          CallBack schemaChangeCallback) {\n         return new TimeStampNanoTZVector(name, fieldType, allocator);\n       }\n \n@@ -539,7 +685,11 @@ public final ArrowType getType() {\n       return type;\n     }\n \n-    public abstract FieldVector getNewVector(String name, FieldType fieldType, BufferAllocator allocator, CallBack schemaChangeCallback);\n+    public abstract FieldVector getNewVector(\n+        String name,\n+        FieldType fieldType,\n+        BufferAllocator allocator,\n+        CallBack schemaChangeCallback);\n \n     public abstract FieldWriter getNewFieldWriter(ValueVector vector);\n   }\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/types/pojo/Field.java b/java/vector/src/main/java/org/apache/arrow/vector/types/pojo/Field.java\nindex 860cf432a3..355ac025d2 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/types/pojo/Field.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/types/pojo/Field.java\n@@ -131,6 +131,7 @@ public static Field convertField(org.apache.arrow.flatbuf.Field field) {\n \n   /**\n    * Helper method to ensure backward compatibility with schemas generated prior to ARROW-1347, ARROW-1663\n+   *\n    * @param field\n    * @param originalChildField original field which name might be mutated\n    * @return original or mutated field\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/util/ByteFunctionHelpers.java b/java/vector/src/main/java/org/apache/arrow/vector/util/ByteFunctionHelpers.java\nindex 42401c554d..67ce99b0d5 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/util/ByteFunctionHelpers.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/util/ByteFunctionHelpers.java\n@@ -94,7 +94,13 @@ private static final int memEqual(final long laddr, int lStart, int lEnd, final\n    * @param rEnd   end offset in the buffer\n    * @return 1 if left input is greater, -1 if left input is smaller, 0 otherwise\n    */\n-  public static final int compare(final ArrowBuf left, int lStart, int lEnd, final ArrowBuf right, int rStart, int rEnd) {\n+  public static final int compare(\n+      final ArrowBuf left,\n+      int lStart,\n+      int lEnd,\n+      final ArrowBuf right,\n+      int rStart,\n+      int rEnd) {\n     if (BoundsChecking.BOUNDS_CHECKING_ENABLED) {\n       left.checkBytes(lStart, lEnd);\n       right.checkBytes(rStart, rEnd);\n@@ -102,7 +108,13 @@ public static final int compare(final ArrowBuf left, int lStart, int lEnd, final\n     return memcmp(left.memoryAddress(), lStart, lEnd, right.memoryAddress(), rStart, rEnd);\n   }\n \n-  private static final int memcmp(final long laddr, int lStart, int lEnd, final long raddr, int rStart, final int rEnd) {\n+  private static final int memcmp(\n+      final long laddr,\n+      int lStart,\n+      int lEnd,\n+      final long raddr,\n+      int rStart,\n+      final int rEnd) {\n     int lLen = lEnd - lStart;\n     int rLen = rEnd - rStart;\n     int n = Math.min(rLen, lLen);\n@@ -149,7 +161,13 @@ private static final int memcmp(final long laddr, int lStart, int lEnd, final lo\n    * @param rEnd   end offset in the byte array\n    * @return 1 if left input is greater, -1 if left input is smaller, 0 otherwise\n    */\n-  public static final int compare(final ArrowBuf left, int lStart, int lEnd, final byte[] right, int rStart, final int rEnd) {\n+  public static final int compare(\n+      final ArrowBuf left,\n+      int lStart,\n+      int lEnd,\n+      final byte[] right,\n+      int rStart,\n+      final int rEnd) {\n     if (BoundsChecking.BOUNDS_CHECKING_ENABLED) {\n       left.checkBytes(lStart, lEnd);\n     }\n@@ -157,7 +175,13 @@ public static final int compare(final ArrowBuf left, int lStart, int lEnd, final\n   }\n \n \n-  private static final int memcmp(final long laddr, int lStart, int lEnd, final byte[] right, int rStart, final int rEnd) {\n+  private static final int memcmp(\n+      final long laddr,\n+      int lStart,\n+      int lEnd,\n+      final byte[] right,\n+      int rStart,\n+      final int rEnd) {\n     int lLen = lEnd - lStart;\n     int rLen = rEnd - rStart;\n     int n = Math.min(rLen, lLen);\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/util/DateUtility.java b/java/vector/src/main/java/org/apache/arrow/vector/util/DateUtility.java\nindex 3dd169b823..95d6ad00c9 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/util/DateUtility.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/util/DateUtility.java\n@@ -655,7 +655,8 @@ public static DateTimeFormatter getDateTimeFormatter() {\n       DateTimeParser optionalSec = DateTimeFormat.forPattern(\".SSS\").getParser();\n       DateTimeParser optionalZone = DateTimeFormat.forPattern(\" ZZZ\").getParser();\n \n-      dateTimeTZFormat = new DateTimeFormatterBuilder().append(dateFormatter).appendOptional(optionalTime).appendOptional(optionalSec).appendOptional(optionalZone).toFormatter();\n+      dateTimeTZFormat = new DateTimeFormatterBuilder().append(dateFormatter).appendOptional(optionalTime)\n+        .appendOptional(optionalSec).appendOptional(optionalZone).toFormatter();\n     }\n \n     return dateTimeTZFormat;\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/util/DecimalUtility.java b/java/vector/src/main/java/org/apache/arrow/vector/util/DecimalUtility.java\nindex 510211a835..e6750dae90 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/util/DecimalUtility.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/util/DecimalUtility.java\n@@ -188,8 +188,8 @@ public static boolean checkPrecisionAndScale(BigDecimal value, int vectorPrecisi\n           value.scale() + \" != \" + vectorScale);\n     }\n     if (value.precision() > vectorPrecision) {\n-      throw new UnsupportedOperationException(\"BigDecimal precision can not be greater than that in the Arrow vector: \" +\n-          value.precision() + \" > \" + vectorPrecision);\n+      throw new UnsupportedOperationException(\"BigDecimal precision can not be greater than that in the Arrow \" +\n+        \"vector: \" + value.precision() + \" > \" + vectorPrecision);\n     }\n     return true;\n   }\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/util/DictionaryUtility.java b/java/vector/src/main/java/org/apache/arrow/vector/util/DictionaryUtility.java\nindex 6b46dbae38..aa5b6210f4 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/util/DictionaryUtility.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/util/DictionaryUtility.java\n@@ -69,7 +69,8 @@ public static Field toMessageFormat(Field field, DictionaryProvider provider, Se\n       dictionaryIdsUsed.add(id);\n     }\n \n-    return new Field(field.getName(), new FieldType(field.isNullable(), type, encoding, field.getMetadata()), updatedChildren);\n+    return new Field(field.getName(), new FieldType(field.isNullable(), type, encoding, field.getMetadata()),\n+      updatedChildren);\n   }\n \n   /**\n@@ -108,6 +109,7 @@ public static Field toMemoryFormat(Field field, BufferAllocator allocator, Map<L\n       }\n     }\n \n-    return new Field(field.getName(), new FieldType(field.isNullable(), type, encoding, field.getMetadata()), updatedChildren);\n+    return new Field(field.getName(), new FieldType(field.isNullable(), type, encoding, field.getMetadata()),\n+      updatedChildren);\n   }\n }\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/util/MapWithOrdinal.java b/java/vector/src/main/java/org/apache/arrow/vector/util/MapWithOrdinal.java\nindex b863fa8af8..8e35979949 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/util/MapWithOrdinal.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/util/MapWithOrdinal.java\n@@ -134,22 +134,24 @@ public void clear() {\n \n     @Override\n     public Collection<V> values() {\n-      return Lists.newArrayList(Iterables.transform(secondary.entries(), new Function<IntObjectMap.PrimitiveEntry<V>, V>() {\n-        @Override\n-        public V apply(IntObjectMap.PrimitiveEntry<V> entry) {\n-          return Preconditions.checkNotNull(entry).value();\n-        }\n-      }));\n+      return Lists.newArrayList(Iterables.transform(secondary.entries(),\n+        new Function<IntObjectMap.PrimitiveEntry<V>, V>() {\n+          @Override\n+          public V apply(IntObjectMap.PrimitiveEntry<V> entry) {\n+            return Preconditions.checkNotNull(entry).value();\n+          }\n+        }));\n     }\n \n     @Override\n     public Set<Entry<K, V>> entrySet() {\n-      return Sets.newHashSet(Iterables.transform(primary.entrySet(), new Function<Entry<K, Entry<Integer, V>>, Entry<K, V>>() {\n-        @Override\n-        public Entry<K, V> apply(Entry<K, Entry<Integer, V>> entry) {\n-          return new AbstractMap.SimpleImmutableEntry<>(entry.getKey(), entry.getValue().getValue());\n-        }\n-      }));\n+      return Sets.newHashSet(Iterables.transform(primary.entrySet(),\n+        new Function<Entry<K, Entry<Integer, V>>, Entry<K, V>>() {\n+          @Override\n+          public Entry<K, V> apply(Entry<K, Entry<Integer, V>> entry) {\n+            return new AbstractMap.SimpleImmutableEntry<>(entry.getKey(), entry.getValue().getValue());\n+          }\n+        }));\n     }\n   };\n \n@@ -220,9 +222,10 @@ public boolean containsValue(Object value) {\n   }\n \n   /**\n-   * Removes the element corresponding to the key if exists extending the semantics of {@link java.util.Map#remove} with ordinal\n-   * re-cycling. The ordinal corresponding to the given key may be re-assigned to another tuple. It is important that\n-   * consumer checks the ordinal value via {@link org.apache.arrow.vector.util.MapWithOrdinal#getOrdinal(Object)} before attempting to look-up by ordinal.\n+   * Removes the element corresponding to the key if exists extending the semantics of {@link java.util.Map#remove}\n+   * with ordinal re-cycling. The ordinal corresponding to the given key may be re-assigned to another tuple. It is\n+   * important that consumer checks the ordinal value via\n+   * {@link org.apache.arrow.vector.util.MapWithOrdinal#getOrdinal(Object)} before attempting to look-up by ordinal.\n    *\n    * @see java.util.Map#remove\n    */\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/util/OversizedAllocationException.java b/java/vector/src/main/java/org/apache/arrow/vector/util/OversizedAllocationException.java\nindex b4ff2522da..3a6cd6a307 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/util/OversizedAllocationException.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/util/OversizedAllocationException.java\n@@ -23,14 +23,19 @@\n  * An exception that is used to signal that allocation request in bytes is greater than the maximum allowed by\n  * {@link org.apache.arrow.memory.BufferAllocator#buffer(int) allocator}.\n  *\n- * <p>Operators should handle this exception to split the batch and later resume the execution on the next iteration.</p>\n+ * <p>Operators should handle this exception to split the batch and later resume the execution on the next\n+ * iteration.</p>\n  */\n public class OversizedAllocationException extends RuntimeException {\n   public OversizedAllocationException() {\n     super();\n   }\n \n-  public OversizedAllocationException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\n+  public OversizedAllocationException(\n+      String message,\n+      Throwable cause,\n+      boolean enableSuppression,\n+      boolean writableStackTrace) {\n     super(message, cause, enableSuppression, writableStackTrace);\n   }\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/util/SchemaChangeRuntimeException.java b/java/vector/src/main/java/org/apache/arrow/vector/util/SchemaChangeRuntimeException.java\nindex ddfea948a8..1378b4cbce 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/util/SchemaChangeRuntimeException.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/util/SchemaChangeRuntimeException.java\n@@ -24,7 +24,11 @@ public SchemaChangeRuntimeException() {\n     super();\n   }\n \n-  public SchemaChangeRuntimeException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {\n+  public SchemaChangeRuntimeException(\n+      String message,\n+      Throwable cause,\n+      boolean enableSuppression,\n+      boolean writableStackTrace) {\n     super(message, cause, enableSuppression, writableStackTrace);\n   }\n \ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/util/Text.java b/java/vector/src/main/java/org/apache/arrow/vector/util/Text.java\nindex 50037bf92d..7821435b72 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/util/Text.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/util/Text.java\n@@ -39,7 +39,8 @@\n import com.fasterxml.jackson.databind.ser.std.StdSerializer;\n \n /**\n- * A simplified byte wrapper similar to Hadoop's Text class without all the dependencies. Lifted from Hadoop 2.7.1\n+ * A simplified byte wrapper similar to Hadoop's Text class without all the dependencies.\n+ * Lifted from Hadoop 2.7.1\n  */\n @JsonSerialize(using = Text.TextSerializer.class)\n public class Text {\n@@ -101,8 +102,8 @@ public Text(byte[] utf8) {\n   }\n \n   /**\n-   * Get a copy of the bytes that is exactly the length of the data. See {@link #getBytes()} for faster access to the\n-   * underlying array.\n+   * Get a copy of the bytes that is exactly the length of the data. See {@link #getBytes()} for\n+   * faster access to the underlying array.\n    *\n    * @return a copy of the underlying array\n    */\n@@ -113,8 +114,8 @@ public Text(byte[] utf8) {\n   }\n \n   /**\n-   * Returns the raw bytes; however, only data up to {@link #getLength()} is valid. Please use {@link #copyBytes()} if\n-   * you need the returned array to be precisely the length of the data.\n+   * Returns the raw bytes; however, only data up to {@link #getLength()} is valid. Please use\n+   * {@link #copyBytes()} if you need the returned array to be precisely the length of the data.\n    *\n    * @return the underlying array\n    */\n@@ -130,11 +131,13 @@ public int getLength() {\n   }\n \n   /**\n-   * Returns the Unicode Scalar Value (32-bit integer value) for the character at <code>position</code>. Note that this\n-   * method avoids using the converter or doing String instantiation\n+   * Returns the Unicode Scalar Value (32-bit integer value) for the character at\n+   * <code>position</code>. Note that this method avoids using the converter or doing String\n+   * instantiation\n    *\n    * @param position the index of the char we want to retrieve\n-   * @return the Unicode scalar value at position or -1 if the position is invalid or points to a trailing byte\n+   * @return the Unicode scalar value at position or -1 if the position is invalid or points to a\n+   * trailing byte\n    */\n   public int charAt(int position) {\n     if (position > this.length) {\n@@ -153,13 +156,15 @@ public int find(String what) {\n   }\n \n   /**\n-   * Finds any occurrence of <code>what</code> in the backing buffer, starting as position <code>start</code>. The\n-   * starting position is measured in bytes and the return value is in terms of byte position in the buffer. The backing\n-   * buffer is not converted to a string for this operation.\n+   * Finds any occurrence of <code>what</code> in the backing buffer, starting as position\n+   * <code>start</code>. The starting position is measured in bytes and the return value is in terms\n+   * of byte position in the buffer. The backing buffer is not converted to a string for this\n+   * operation.\n    *\n    * @param what  the string to search for\n    * @param start where to start from\n-   * @return byte position of the first occurrence of the search string in the UTF-8 buffer or -1 if not found\n+   * @return byte position of the first occurrence of the search string in the UTF-8 buffer or -1\n+   * if not found\n    */\n   public int find(String what, int start) {\n     try {\n@@ -263,18 +268,19 @@ public void append(byte[] utf8, int start, int len) {\n   /**\n    * Clear the string to empty.\n    *\n-   * <em>Note</em>: For performance reasons, this call does not clear the underlying byte array that is retrievable via\n-   * {@link #getBytes()}. In order to free the byte-array memory, call {@link #set(byte[])} with an empty byte array\n-   * (For example, <code>new byte[0]</code>).\n+   * <em>Note</em>: For performance reasons, this call does not clear the underlying byte array that\n+   * is retrievable via {@link #getBytes()}. In order to free the byte-array memory, call\n+   * {@link #set(byte[])} with an empty byte array (For example, <code>new byte[0]</code>).\n    */\n   public void clear() {\n     length = 0;\n   }\n \n   /**\n-   * Sets the capacity of this Text object to <em>at least</em> <code>len</code> bytes. If the current buffer is longer,\n-   * then the capacity and existing content of the buffer are unchanged. If <code>len</code> is larger than the current\n-   * capacity, the Text object's capacity is increased to match.\n+   * Sets the capacity of this Text object to <em>at least</em> <code>len</code> bytes. If the\n+   * current buffer is longer, then the capacity and existing content of the buffer are unchanged.\n+   * If <code>len</code> is larger than the current capacity, the Text object's capacity is\n+   * increased to match.\n    *\n    * @param len      the number of bytes we need\n    * @param keepData should the old data be kept\n@@ -299,8 +305,8 @@ public String toString() {\n   }\n \n   /**\n-   * Read a Text object whose length is already known. This allows creating Text from a stream which uses a different\n-   * serialization format.\n+   * Read a Text object whose length is already known. This allows creating Text from a stream which\n+   * uses a different serialization format.\n    *\n    * @param in  the input to initialize from\n    * @param len how many bytes to read from in\n@@ -360,8 +366,8 @@ public int hashCode() {\n   // / STATIC UTILITIES FROM HERE DOWN\n \n   /**\n-   * Converts the provided byte array to a String using the UTF-8 encoding. If the input is malformed, replace by a\n-   * default value.\n+   * Converts the provided byte array to a String using the UTF-8 encoding. If the input is\n+   * malformed, replace by a default value.\n    *\n    * @param utf8 bytes to decode\n    * @return the decoded string\n@@ -377,9 +383,9 @@ public static String decode(byte[] utf8, int start, int length)\n   }\n \n   /**\n-   * Converts the provided byte array to a String using the UTF-8 encoding. If <code>replace</code> is true, then\n-   * malformed input is replaced with the substitution character, which is U+FFFD. Otherwise the method throws a\n-   * MalformedInputException.\n+   * Converts the provided byte array to a String using the UTF-8 encoding. If <code>replace</code>\n+   * is true, then malformed input is replaced with the substitution character, which is U+FFFD.\n+   * Otherwise the method throws a MalformedInputException.\n    *\n    * @param utf8    the bytes to decode\n    * @param start   where to start from\n@@ -411,8 +417,8 @@ private static String decode(ByteBuffer utf8, boolean replace)\n   }\n \n   /**\n-   * Converts the provided String to bytes using the UTF-8 encoding. If the input is malformed, invalid chars are\n-   * replaced by a default value.\n+   * Converts the provided String to bytes using the UTF-8 encoding. If the input is malformed,\n+   * invalid chars are replaced by a default value.\n    *\n    * @param string the string to encode\n    * @return ByteBuffer: bytes stores at ByteBuffer.array() and length is ByteBuffer.limit()\n@@ -424,9 +430,9 @@ public static ByteBuffer encode(String string)\n   }\n \n   /**\n-   * Converts the provided String to bytes using the UTF-8 encoding. If <code>replace</code> is true, then malformed\n-   * input is replaced with the substitution character, which is U+FFFD. Otherwise the method throws a\n-   * MalformedInputException.\n+   * Converts the provided String to bytes using the UTF-8 encoding. If <code>replace</code> is\n+   * true, then malformed input is replaced with the substitution character, which is U+FFFD.\n+   * Otherwise the method throws a MalformedInputException.\n    *\n    * @param string  the string to encode\n    * @param replace whether to replace malformed characters with U+FFFD\n@@ -554,9 +560,9 @@ public static void validateUTF8(byte[] utf8, int start, int len)\n   }\n \n   /**\n-   * Magic numbers for UTF-8. These are the number of bytes that <em>follow</em> a given lead byte. Trailing bytes have\n-   * the value -1. The values 4 and 5 are presented in this table, even though valid UTF-8 cannot include the five and\n-   * six byte sequences.\n+   * Magic numbers for UTF-8. These are the number of bytes that <em>follow</em> a given lead byte.\n+   * Trailing bytes have the value -1. The values 4 and 5 are presented in this table, even though\n+   * valid UTF-8 cannot include the five and six byte sequences.\n    */\n   static final int[] bytesFromUTF8 =\n       {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n@@ -576,8 +582,8 @@ public static void validateUTF8(byte[] utf8, int start, int len)\n           3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5};\n \n   /**\n-   * Returns the next code point at the current position in the buffer. The buffer's position will be incremented. Any\n-   * mark set on this buffer will be changed by this method!\n+   * Returns the next code point at the current position in the buffer. The buffer's position will\n+   * be incremented. Any mark set on this buffer will be changed by this method!\n    *\n    * @param bytes the incoming bytes\n    * @return the corresponding unicode codepoint\n@@ -662,8 +668,10 @@ public TextSerializer() {\n     }\n \n     @Override\n-    public void serialize(Text text, JsonGenerator jsonGenerator, SerializerProvider serializerProvider)\n-        throws IOException, JsonGenerationException {\n+    public void serialize(\n+        Text text,\n+        JsonGenerator jsonGenerator,\n+        SerializerProvider serializerProvider) throws IOException, JsonGenerationException {\n       jsonGenerator.writeString(text.toString());\n     }\n   }\ndiff --git a/java/vector/src/main/java/org/apache/arrow/vector/util/Validator.java b/java/vector/src/main/java/org/apache/arrow/vector/util/Validator.java\nindex c27634a7ed..624ea1beaa 100644\n--- a/java/vector/src/main/java/org/apache/arrow/vector/util/Validator.java\n+++ b/java/vector/src/main/java/org/apache/arrow/vector/util/Validator.java\n@@ -53,15 +53,21 @@ public static void compareSchemas(Schema schema1, Schema schema2) {\n   /**\n    * Validate two Dictionary encodings and dictionaries with id's from the encodings\n    */\n-  public static void compareDictionaries(List<DictionaryEncoding> encodings1, List<DictionaryEncoding> encodings2, DictionaryProvider provider1, DictionaryProvider provider2) {\n+  public static void compareDictionaries(\n+      List<DictionaryEncoding> encodings1,\n+      List<DictionaryEncoding> encodings2,\n+      DictionaryProvider provider1,\n+      DictionaryProvider provider2) {\n \n     if (encodings1.size() != encodings2.size()) {\n-      throw new IllegalArgumentException(\"Different dictionary encoding count:\\n\" + encodings1.size() + \"\\n\" + encodings2.size());\n+      throw new IllegalArgumentException(\"Different dictionary encoding count:\\n\" +\n+        encodings1.size() + \"\\n\" + encodings2.size());\n     }\n \n     for (int i = 0; i < encodings1.size(); i++) {\n       if (!encodings1.get(i).equals(encodings2.get(i))) {\n-        throw new IllegalArgumentException(\"Different dictionary encodings:\\n\" + encodings1.get(i) + \"\\n\" + encodings2.get(i));\n+        throw new IllegalArgumentException(\"Different dictionary encodings:\\n\" + encodings1.get(i) +\n+          \"\\n\" + encodings2.get(i));\n       }\n \n       long id = encodings1.get(i).getId();\n@@ -69,7 +75,8 @@ public static void compareDictionaries(List<DictionaryEncoding> encodings1, List\n       Dictionary dict2 = provider2.lookup(id);\n \n       if (dict1 == null || dict2 == null) {\n-        throw new IllegalArgumentException(\"The DictionaryProvider did not contain the required dictionary with id: \" + id + \"\\n\" + dict1 + \"\\n\" + dict2);\n+        throw new IllegalArgumentException(\"The DictionaryProvider did not contain the required \" +\n+          \"dictionary with id: \" + id + \"\\n\" + dict1 + \"\\n\" + dict2);\n       }\n \n       try {\n@@ -95,7 +102,8 @@ public static void compareVectorSchemaRoot(VectorSchemaRoot root1, VectorSchemaR\n     List<FieldVector> vectors1 = root1.getFieldVectors();\n     List<FieldVector> vectors2 = root2.getFieldVectors();\n     if (vectors1.size() != vectors2.size()) {\n-      throw new IllegalArgumentException(\"Different column count:\\n\" + vectors1.toString() + \"\\n!=\\n\" + vectors2.toString());\n+      throw new IllegalArgumentException(\"Different column count:\\n\" + vectors1.toString() +\n+        \"\\n!=\\n\" + vectors2.toString());\n     }\n     for (int i = 0; i < vectors1.size(); i++) {\n       compareFieldVectors(vectors1.get(i), vectors2.get(i));\n@@ -112,11 +120,13 @@ public static void compareVectorSchemaRoot(VectorSchemaRoot root1, VectorSchemaR\n   public static void compareFieldVectors(FieldVector vector1, FieldVector vector2) {\n     Field field1 = vector1.getField();\n     if (!field1.equals(vector2.getField())) {\n-      throw new IllegalArgumentException(\"Different Fields:\\n\" + field1 + \"\\n!=\\n\" + vector2.getField());\n+      throw new IllegalArgumentException(\"Different Fields:\\n\" + field1 + \"\\n!=\\n\" +\n+        vector2.getField());\n     }\n     int valueCount = vector1.getValueCount();\n     if (valueCount != vector2.getValueCount()) {\n-      throw new IllegalArgumentException(\"Different value count for field \" + field1 + \" : \" + valueCount + \" != \" + vector2.getValueCount());\n+      throw new IllegalArgumentException(\"Different value count for field \" + field1 + \" : \" +\n+        valueCount + \" != \" + vector2.getValueCount());\n     }\n     for (int j = 0; j < valueCount; j++) {\n       Object obj1 = vector1.getObject(j);\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestBitVector.java b/java/vector/src/test/java/org/apache/arrow/vector/TestBitVector.java\nindex 64da343d41..2c03bfa997 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestBitVector.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestBitVector.java\n@@ -120,8 +120,8 @@ public void testSplitAndTransfer() throws Exception {\n           for (int i = 0; i < length; i++) {\n             int actual = toVector.get(i);\n             int expected = sourceVector.get(start + i);\n-            assertEquals(\"different data values not expected --> sourceVector index: \" + (start + i) + \" toVector index: \" + i,\n-                    expected, actual);\n+            assertEquals(\"different data values not expected --> sourceVector index: \" + (start + i) +\n+                \" toVector index: \" + i, expected, actual);\n           }\n         }\n       }\n@@ -163,8 +163,8 @@ public void testSplitAndTransfer1() throws Exception {\n           for (int i = 0; i < length; i++) {\n             int actual = toVector.get(i);\n             int expected = sourceVector.get(start + i);\n-            assertEquals(\"different data values not expected --> sourceVector index: \" + (start + i) + \" toVector index: \" + i,\n-                    expected, actual);\n+            assertEquals(\"different data values not expected --> sourceVector index: \" + (start + i) +\n+                \" toVector index: \" + i, expected, actual);\n           }\n         }\n       }\n@@ -214,8 +214,8 @@ public void testSplitAndTransfer2() throws Exception {\n           for (int i = 0; i < length; i++) {\n             int actual = toVector.get(i);\n             int expected = sourceVector.get(start + i);\n-            assertEquals(\"different data values not expected --> sourceVector index: \" + (start + i) + \" toVector index: \" + i,\n-                    expected, actual);\n+            assertEquals(\"different data values not expected --> sourceVector index: \" + (start + i) +\n+                \" toVector index: \" + i, expected, actual);\n           }\n         }\n       }\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestBitVectorHelper.java b/java/vector/src/test/java/org/apache/arrow/vector/TestBitVectorHelper.java\nindex bcad284811..49dc22572b 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestBitVectorHelper.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestBitVectorHelper.java\n@@ -26,45 +26,45 @@\n import io.netty.buffer.PooledByteBufAllocatorL;\n \n public class TestBitVectorHelper {\n-    @Test\n-    public void testGetNullCount() throws Exception {\n-        // test case 1, 1 null value for 0b110\n-        ArrowBuf validityBuffer = new ArrowBuf(\n-                null, null, new PooledByteBufAllocatorL().empty,\n-                null, null, 0, 3, true);\n-        // we set validity buffer to be 0b10110, but only have 3 items with 1st item is null\n-        validityBuffer.setByte(0, 0b10110);\n+  @Test\n+  public void testGetNullCount() throws Exception {\n+    // test case 1, 1 null value for 0b110\n+    ArrowBuf validityBuffer = new ArrowBuf(\n+        null, null, new PooledByteBufAllocatorL().empty,\n+        null, null, 0, 3, true);\n+    // we set validity buffer to be 0b10110, but only have 3 items with 1st item is null\n+    validityBuffer.setByte(0, 0b10110);\n \n-        // we will only consider 0b110 here, since we only 3 items and only one is null\n-        int count = BitVectorHelper.getNullCount(validityBuffer, 3);\n-        assertEquals(count, 1);\n+    // we will only consider 0b110 here, since we only 3 items and only one is null\n+    int count = BitVectorHelper.getNullCount(validityBuffer, 3);\n+    assertEquals(count, 1);\n \n-        // test case 2, no null value for 0xFF\n-        validityBuffer = new ArrowBuf(\n-                null, null, new PooledByteBufAllocatorL().empty,\n-                null, null, 0, 8, true);\n-        validityBuffer.setByte(0, 0xFF);\n+    // test case 2, no null value for 0xFF\n+    validityBuffer = new ArrowBuf(\n+        null, null, new PooledByteBufAllocatorL().empty,\n+        null, null, 0, 8, true);\n+    validityBuffer.setByte(0, 0xFF);\n \n-        count = BitVectorHelper.getNullCount(validityBuffer, 8);\n-        assertEquals(count, 0);\n+    count = BitVectorHelper.getNullCount(validityBuffer, 8);\n+    assertEquals(count, 0);\n \n-        // test case 3, 1 null value for 0x7F\n-        validityBuffer = new ArrowBuf(\n-                null, null, new PooledByteBufAllocatorL().empty,\n-                null, null, 0, 8, true);\n-        validityBuffer.setByte(0, 0x7F);\n+    // test case 3, 1 null value for 0x7F\n+    validityBuffer = new ArrowBuf(\n+        null, null, new PooledByteBufAllocatorL().empty,\n+        null, null, 0, 8, true);\n+    validityBuffer.setByte(0, 0x7F);\n \n-        count = BitVectorHelper.getNullCount(validityBuffer, 8);\n-        assertEquals(count, 1);\n+    count = BitVectorHelper.getNullCount(validityBuffer, 8);\n+    assertEquals(count, 1);\n \n-        // test case 4, validity buffer has multiple bytes, 11 items\n-        validityBuffer = new ArrowBuf(\n-                null, null, new PooledByteBufAllocatorL().empty,\n-                null, null, 0, 11, true);\n-        validityBuffer.setByte(0, 0b10101010);\n-        validityBuffer.setByte(1, 0b01010101);\n+    // test case 4, validity buffer has multiple bytes, 11 items\n+    validityBuffer = new ArrowBuf(\n+        null, null, new PooledByteBufAllocatorL().empty,\n+        null, null, 0, 11, true);\n+    validityBuffer.setByte(0, 0b10101010);\n+    validityBuffer.setByte(1, 0b01010101);\n \n-        count = BitVectorHelper.getNullCount(validityBuffer, 11);\n-        assertEquals(count, 5);\n-    }\n+    count = BitVectorHelper.getNullCount(validityBuffer, 11);\n+    assertEquals(count, 5);\n+  }\n }\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestCopyFrom.java b/java/vector/src/test/java/org/apache/arrow/vector/TestCopyFrom.java\nindex 427aba9914..db920f812e 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestCopyFrom.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestCopyFrom.java\n@@ -71,8 +71,8 @@ public void terminate() throws Exception {\n   @Test /* NullableVarChar */\n   public void testCopyFromWithNulls() {\n     try (final VarCharVector vector = newVector(VarCharVector.class, EMPTY_SCHEMA_PATH, MinorType.VARCHAR, allocator);\n-         final VarCharVector vector2 = newVector(VarCharVector.class, EMPTY_SCHEMA_PATH, MinorType.VARCHAR, allocator)) {\n-\n+         final VarCharVector vector2 = newVector(VarCharVector.class, EMPTY_SCHEMA_PATH, MinorType.VARCHAR, allocator))\n+    {\n       vector.allocateNew();\n       int capacity = vector.getValueCapacity();\n       assertEquals(4095, capacity);\n@@ -131,8 +131,8 @@ public void testCopyFromWithNulls() {\n   @Test /* NullableVarChar */\n   public void testCopyFromWithNulls1() {\n     try (final VarCharVector vector = newVector(VarCharVector.class, EMPTY_SCHEMA_PATH, MinorType.VARCHAR, allocator);\n-         final VarCharVector vector2 = newVector(VarCharVector.class, EMPTY_SCHEMA_PATH, MinorType.VARCHAR, allocator)) {\n-\n+         final VarCharVector vector2 = newVector(VarCharVector.class, EMPTY_SCHEMA_PATH, MinorType.VARCHAR, allocator))\n+    {\n       vector.allocateNew();\n       int capacity = vector.getValueCapacity();\n       assertEquals(4095, capacity);\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestDecimalVector.java b/java/vector/src/test/java/org/apache/arrow/vector/TestDecimalVector.java\nindex 25bcf2be98..f27a7bdc83 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestDecimalVector.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestDecimalVector.java\n@@ -61,7 +61,8 @@ public void terminate() throws Exception {\n \n   @Test\n   public void testValuesWriteRead() {\n-    try (DecimalVector decimalVector = TestUtils.newVector(DecimalVector.class, \"decimal\", new ArrowType.Decimal(10, scale), allocator);) {\n+    try (DecimalVector decimalVector = TestUtils.newVector(DecimalVector.class, \"decimal\",\n+      new ArrowType.Decimal(10, scale), allocator);) {\n \n       try (DecimalVector oldConstructor = new DecimalVector(\"decimal\", allocator, 10, scale);) {\n         assertEquals(decimalVector.getField().getType(), oldConstructor.getField().getType());\n@@ -86,7 +87,8 @@ public void testValuesWriteRead() {\n \n   @Test\n   public void testBigDecimalDifferentScaleAndPrecision() {\n-    try (DecimalVector decimalVector = TestUtils.newVector(DecimalVector.class, \"decimal\", new ArrowType.Decimal(4, 2), allocator);) {\n+    try (DecimalVector decimalVector = TestUtils.newVector(DecimalVector.class, \"decimal\",\n+      new ArrowType.Decimal(4, 2), allocator);) {\n       decimalVector.allocateNew();\n \n       // test BigDecimal with different scale\n@@ -115,7 +117,8 @@ public void testBigDecimalDifferentScaleAndPrecision() {\n \n   @Test\n   public void testWriteBigEndian() {\n-    try (DecimalVector decimalVector = TestUtils.newVector(DecimalVector.class, \"decimal\", new ArrowType.Decimal(38, 9), allocator);) {\n+    try (DecimalVector decimalVector = TestUtils.newVector(DecimalVector.class, \"decimal\",\n+      new ArrowType.Decimal(38, 9), allocator);) {\n       decimalVector.allocateNew();\n       BigDecimal decimal1 = new BigDecimal(\"123456789.000000000\");\n       BigDecimal decimal2 = new BigDecimal(\"11.123456789\");\n@@ -159,7 +162,8 @@ public void testWriteBigEndian() {\n \n   @Test\n   public void testBigDecimalReadWrite() {\n-    try (DecimalVector decimalVector = TestUtils.newVector(DecimalVector.class, \"decimal\", new ArrowType.Decimal(38, 9), allocator);) {\n+    try (DecimalVector decimalVector = TestUtils.newVector(DecimalVector.class, \"decimal\",\n+      new ArrowType.Decimal(38, 9), allocator);) {\n       decimalVector.allocateNew();\n       BigDecimal decimal1 = new BigDecimal(\"123456789.000000000\");\n       BigDecimal decimal2 = new BigDecimal(\"11.123456789\");\n@@ -198,7 +202,8 @@ public void testBigDecimalReadWrite() {\n    */\n   @Test\n   public void decimalBE2LE() {\n-    try (DecimalVector decimalVector = TestUtils.newVector(DecimalVector.class, \"decimal\", new ArrowType.Decimal(21, 2), allocator)) {\n+    try (DecimalVector decimalVector = TestUtils.newVector(DecimalVector.class, \"decimal\",\n+      new ArrowType.Decimal(21, 2), allocator)) {\n       decimalVector.allocateNew();\n \n       BigInteger[] testBigInts = new BigInteger[] {\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestFixedSizeListVector.java b/java/vector/src/test/java/org/apache/arrow/vector/TestFixedSizeListVector.java\nindex 6c01c884bd..0d6f975be5 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestFixedSizeListVector.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestFixedSizeListVector.java\n@@ -79,7 +79,8 @@ public void testIntType() {\n   @Test\n   public void testFloatTypeNullable() {\n     try (FixedSizeListVector vector = FixedSizeListVector.empty(\"list\", 2, allocator)) {\n-      Float4Vector nested = (Float4Vector) vector.addOrGetVector(FieldType.nullable(MinorType.FLOAT4.getType())).getVector();\n+      Float4Vector nested = (Float4Vector) vector.addOrGetVector(FieldType.nullable(MinorType.FLOAT4.getType()))\n+          .getVector();\n       vector.allocateNew();\n \n       for (int i = 0; i < 10; i++) {\n@@ -113,8 +114,10 @@ public void testFloatTypeNullable() {\n   @Test\n   public void testNestedInList() {\n     try (ListVector vector = ListVector.empty(\"list\", allocator)) {\n-      FixedSizeListVector tuples = (FixedSizeListVector) vector.addOrGetVector(FieldType.nullable(new ArrowType.FixedSizeList(2))).getVector();\n-      IntVector innerVector = (IntVector) tuples.addOrGetVector(FieldType.nullable(MinorType.INT.getType())).getVector();\n+      FixedSizeListVector tuples = (FixedSizeListVector) vector.addOrGetVector(\n+          FieldType.nullable(new ArrowType.FixedSizeList(2))).getVector();\n+      IntVector innerVector = (IntVector) tuples.addOrGetVector(FieldType.nullable(MinorType.INT.getType()))\n+          .getVector();\n       vector.allocateNew();\n \n       for (int i = 0; i < 10; i++) {\n@@ -156,7 +159,8 @@ public void testNestedInList() {\n   public void testTransferPair() {\n     try (FixedSizeListVector from = new FixedSizeListVector(\"from\", allocator, 2, null, null);\n          FixedSizeListVector to = new FixedSizeListVector(\"to\", allocator, 2, null, null)) {\n-      Float4Vector nested = (Float4Vector) from.addOrGetVector(FieldType.nullable(MinorType.FLOAT4.getType())).getVector();\n+      Float4Vector nested = (Float4Vector) from.addOrGetVector(FieldType.nullable(MinorType.FLOAT4.getType()))\n+          .getVector();\n       from.allocateNew();\n \n       for (int i = 0; i < 10; i++) {\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestListVector.java b/java/vector/src/test/java/org/apache/arrow/vector/TestListVector.java\nindex e0c6bd0141..82c417086d 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestListVector.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestListVector.java\n@@ -515,7 +515,7 @@ public void testNestedListVector() throws Exception {\n \n       assertEquals(2, resultSet.size());              /* 2 inner lists at index 0 */\n       assertEquals(3, resultSet.get(0).size());       /* size of first inner list */\n-      assertEquals(4, resultSet.get(1).size());      /* size of second inner list */\n+      assertEquals(4, resultSet.get(1).size());       /* size of second inner list */\n \n       list = resultSet.get(0);\n       assertEquals(new Long(50), list.get(0));\n@@ -528,13 +528,13 @@ public void testNestedListVector() throws Exception {\n       assertEquals(new Long(150), list.get(2));\n       assertEquals(new Long(175), list.get(3));\n \n-       /* get listVector value at index 1 -- the value itself is a listvector */\n+      /* get listVector value at index 1 -- the value itself is a listvector */\n       result = listVector.getObject(1);\n       resultSet = (ArrayList<ArrayList<Long>>) result;\n \n       assertEquals(3, resultSet.size());              /* 3 inner lists at index 1 */\n       assertEquals(1, resultSet.get(0).size());       /* size of first inner list */\n-      assertEquals(2, resultSet.get(1).size());      /* size of second inner list */\n+      assertEquals(2, resultSet.get(1).size());       /* size of second inner list */\n       assertEquals(3, resultSet.get(2).size());       /* size of third inner list */\n \n       list = resultSet.get(0);\n@@ -649,7 +649,7 @@ public void testNestedListVector2() throws Exception {\n \n       assertEquals(2, resultSet.size());              /* 2 inner lists at index 0 */\n       assertEquals(3, resultSet.get(0).size());       /* size of first inner list */\n-      assertEquals(2, resultSet.get(1).size());      /* size of second inner list */\n+      assertEquals(2, resultSet.get(1).size());       /* size of second inner list */\n \n       list = resultSet.get(0);\n       assertEquals(new Long(50), list.get(0));\n@@ -660,13 +660,13 @@ public void testNestedListVector2() throws Exception {\n       assertEquals(new Long(75), list.get(0));\n       assertEquals(new Long(125), list.get(1));\n \n-       /* get listVector value at index 1 -- the value itself is a listvector */\n+      /* get listVector value at index 1 -- the value itself is a listvector */\n       result = listVector.getObject(1);\n       resultSet = (ArrayList<ArrayList<Long>>) result;\n \n       assertEquals(2, resultSet.size());              /* 3 inner lists at index 1 */\n       assertEquals(2, resultSet.get(0).size());       /* size of first inner list */\n-      assertEquals(3, resultSet.get(1).size());      /* size of second inner list */\n+      assertEquals(3, resultSet.get(1).size());       /* size of second inner list */\n \n       list = resultSet.get(0);\n       assertEquals(new Long(15), list.get(0));\n@@ -830,7 +830,8 @@ public void testSetInitialCapacity() {\n   @Test\n   public void testClearAndReuse() {\n     try (final ListVector vector = ListVector.empty(\"list\", allocator)) {\n-      BigIntVector bigIntVector = (BigIntVector) vector.addOrGetVector(FieldType.nullable(MinorType.BIGINT.getType())).getVector();\n+      BigIntVector bigIntVector =\n+          (BigIntVector) vector.addOrGetVector(FieldType.nullable(MinorType.BIGINT.getType())).getVector();\n       vector.setInitialCapacity(10);\n       vector.allocateNew();\n \ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestSplitAndTransfer.java b/java/vector/src/test/java/org/apache/arrow/vector/TestSplitAndTransfer.java\nindex 80d5fe1970..dc8abfa605 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestSplitAndTransfer.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestSplitAndTransfer.java\n@@ -32,55 +32,54 @@\n import org.junit.Test;\n \n public class TestSplitAndTransfer {\n+  private BufferAllocator allocator;\n \n-    private BufferAllocator allocator;\n-\n-    @Before\n-    public void init() {\n-        allocator = new RootAllocator(Long.MAX_VALUE);\n-    }\n-\n-    @After\n-    public void terminate() throws Exception {\n-        allocator.close();\n-    }\n-\n-    @Test /* VarCharVector */\n-    public void test() throws Exception {\n-        try(final VarCharVector varCharVector = new VarCharVector(\"myvector\", allocator)) {\n-            varCharVector.allocateNew(10000, 1000);\n-\n-            final int valueCount = 500;\n-            final String[] compareArray = new String[valueCount];\n-\n-            for (int i = 0; i < valueCount; i += 3) {\n-                final String s = String.format(\"%010d\", i);\n-                varCharVector.set(i, s.getBytes());\n-                compareArray[i] = s;\n-            }\n-            varCharVector.setValueCount(valueCount);\n-\n-            final TransferPair tp = varCharVector.getTransferPair(allocator);\n-            final VarCharVector newVarCharVector = (VarCharVector) tp.getTo();\n-            final int[][] startLengths = {{0, 201}, {201, 200}, {401, 99}};\n-\n-            for (final int[] startLength : startLengths) {\n-                final int start = startLength[0];\n-                final int length = startLength[1];\n-                tp.splitAndTransfer(start, length);\n-                newVarCharVector.setValueCount(length);\n-                for (int i = 0; i < length; i++) {\n-                    final boolean expectedSet = ((start + i) % 3) == 0;\n-                    if (expectedSet) {\n-                        final byte[] expectedValue = compareArray[start + i].getBytes();\n-                        assertFalse(newVarCharVector.isNull(i));\n-                        assertArrayEquals(expectedValue, newVarCharVector.get(i));\n-                    } else {\n-                        assertTrue(newVarCharVector.isNull(i));\n-                    }\n-                }\n-                newVarCharVector.clear();\n-            }\n+  @Before\n+  public void init() {\n+    allocator = new RootAllocator(Long.MAX_VALUE);\n+  }\n+  \n+  @After\n+  public void terminate() throws Exception {\n+    allocator.close();\n+  }\n+  \n+  @Test /* VarCharVector */\n+  public void test() throws Exception {\n+    try(final VarCharVector varCharVector = new VarCharVector(\"myvector\", allocator)) {\n+      varCharVector.allocateNew(10000, 1000);\n+  \n+      final int valueCount = 500;\n+      final String[] compareArray = new String[valueCount];\n+  \n+      for (int i = 0; i < valueCount; i += 3) {\n+        final String s = String.format(\"%010d\", i);\n+        varCharVector.set(i, s.getBytes());\n+        compareArray[i] = s;\n+      }\n+      varCharVector.setValueCount(valueCount);\n+  \n+      final TransferPair tp = varCharVector.getTransferPair(allocator);\n+      final VarCharVector newVarCharVector = (VarCharVector) tp.getTo();\n+      final int[][] startLengths = {{0, 201}, {201, 200}, {401, 99}};\n+  \n+      for (final int[] startLength : startLengths) {\n+        final int start = startLength[0];\n+        final int length = startLength[1];\n+        tp.splitAndTransfer(start, length);\n+        newVarCharVector.setValueCount(length);\n+        for (int i = 0; i < length; i++) {\n+          final boolean expectedSet = ((start + i) % 3) == 0;\n+          if (expectedSet) {\n+            final byte[] expectedValue = compareArray[start + i].getBytes();\n+            assertFalse(newVarCharVector.isNull(i));\n+            assertArrayEquals(expectedValue, newVarCharVector.get(i));\n+          } else {\n+            assertTrue(newVarCharVector.isNull(i));\n+          }\n         }\n+        newVarCharVector.clear();\n+      }\n     }\n+  }\n }\n\\ No newline at end of file\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestValueVector.java b/java/vector/src/test/java/org/apache/arrow/vector/TestValueVector.java\nindex 60240f2bcc..9550aa5695 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestValueVector.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestValueVector.java\n@@ -476,7 +476,8 @@ public void testFixedType4() {\n   public void testNullableFixedType1() {\n \n     // Create a new value vector for 1024 integers.\n-    try (final UInt4Vector vector = newVector(UInt4Vector.class, EMPTY_SCHEMA_PATH, new ArrowType.Int(32, false), allocator);) {\n+    try (final UInt4Vector vector = newVector(UInt4Vector.class, EMPTY_SCHEMA_PATH, new ArrowType.Int(32, false),\n+      allocator);) {\n       boolean error = false;\n       int initialCapacity = 1024;\n \n@@ -564,7 +565,7 @@ public void testNullableFixedType1() {\n       /* reset the vector */\n       vector.reset();\n \n-       /* capacity shouldn't change after reset */\n+      /* capacity shouldn't change after reset */\n       assertEquals(initialCapacity * 2, vector.getValueCapacity());\n \n       /* vector data should be zeroed out */\n@@ -815,7 +816,7 @@ public void testNullableFixedType4() {\n       vector.zeroVector();\n \n       for (int i = 0; i < vector.getValueCapacity(); i+=2) {\n-          vector.set(i, baseValue + i);\n+        vector.set(i, baseValue + i);\n       }\n \n       for (int i = 0; i < vector.getValueCapacity(); i++) {\n@@ -845,7 +846,7 @@ public void testNullableFixedType4() {\n       /* reset the vector */\n       vector.reset();\n \n-       /* capacity shouldn't change after reset */\n+      /* capacity shouldn't change after reset */\n       assertEquals(valueCapacity * 4, vector.getValueCapacity());\n \n       /* vector data should be zeroed out */\n@@ -1413,7 +1414,8 @@ public void testFillEmptiesNotOverfill() {\n   @Test\n   public void testCopyFromWithNulls() {\n     try (final VarCharVector vector = newVector(VarCharVector.class, EMPTY_SCHEMA_PATH, MinorType.VARCHAR, allocator);\n-         final VarCharVector vector2 = newVector(VarCharVector.class, EMPTY_SCHEMA_PATH, MinorType.VARCHAR, allocator)) {\n+         final VarCharVector vector2 = newVector(VarCharVector.class, EMPTY_SCHEMA_PATH, MinorType.VARCHAR, allocator))\n+    {\n \n       vector.allocateNew();\n       int capacity = vector.getValueCapacity();\n@@ -1473,7 +1475,8 @@ public void testCopyFromWithNulls() {\n   @Test\n   public void testCopyFromWithNulls1() {\n     try (final VarCharVector vector = newVector(VarCharVector.class, EMPTY_SCHEMA_PATH, MinorType.VARCHAR, allocator);\n-         final VarCharVector vector2 = newVector(VarCharVector.class, EMPTY_SCHEMA_PATH, MinorType.VARCHAR, allocator)) {\n+         final VarCharVector vector2 = newVector(VarCharVector.class, EMPTY_SCHEMA_PATH, MinorType.VARCHAR, allocator))\n+    {\n \n       vector.allocateNew();\n       int capacity = vector.getValueCapacity();\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestVectorReset.java b/java/vector/src/test/java/org/apache/arrow/vector/TestVectorReset.java\nindex 9ad4677b84..969f420510 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestVectorReset.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestVectorReset.java\n@@ -94,8 +94,10 @@ public void testVariableTypeReset() {\n \n   @Test\n   public void testListTypeReset() {\n-    try (final ListVector variableList = new ListVector(\"VarList\", allocator, FieldType.nullable(MinorType.INT.getType()), null);\n-         final FixedSizeListVector fixedList = new FixedSizeListVector(\"FixedList\", allocator, FieldType.nullable(new FixedSizeList(2)), null)\n+    try (final ListVector variableList =\n+           new ListVector(\"VarList\", allocator, FieldType.nullable(MinorType.INT.getType()), null);\n+         final FixedSizeListVector fixedList =\n+           new FixedSizeListVector(\"FixedList\", allocator, FieldType.nullable(new FixedSizeList(2)), null)\n     ) {\n       // ListVector\n       variableList.allocateNewSafe();\n@@ -115,12 +117,15 @@ public void testListTypeReset() {\n \n   @Test\n   public void testStructTypeReset() {\n-    try (final NonNullableStructVector nonNullableStructVector = new NonNullableStructVector(\"Struct\", allocator, FieldType.nullable(MinorType.INT.getType()), null);\n-         final StructVector structVector = new StructVector(\"NullableStruct\", allocator, FieldType.nullable(MinorType.INT.getType()), null)\n+    try (final NonNullableStructVector nonNullableStructVector =\n+           new NonNullableStructVector(\"Struct\", allocator, FieldType.nullable(MinorType.INT.getType()), null);\n+         final StructVector structVector =\n+           new StructVector(\"NullableStruct\", allocator, FieldType.nullable(MinorType.INT.getType()), null)\n     ) {\n       // NonNullableStructVector\n       nonNullableStructVector.allocateNewSafe();\n-      IntVector structChild = nonNullableStructVector.addOrGet(\"child\", FieldType.nullable(new Int(32, true)), IntVector.class);\n+      IntVector structChild = nonNullableStructVector\n+          .addOrGet(\"child\", FieldType.nullable(new Int(32, true)), IntVector.class);\n       structChild.setNull(0);\n       nonNullableStructVector.setValueCount(1);\n       resetVectorAndVerify(nonNullableStructVector, nonNullableStructVector.getBuffers(false));\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/TestVectorUnloadLoad.java b/java/vector/src/test/java/org/apache/arrow/vector/TestVectorUnloadLoad.java\nindex f4deeb88a4..5d5f52ba71 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/TestVectorUnloadLoad.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/TestVectorUnloadLoad.java\n@@ -68,7 +68,8 @@ public void testUnloadLoad() throws IOException {\n     Schema schema;\n \n     try (\n-        BufferAllocator originalVectorsAllocator = allocator.newChildAllocator(\"original vectors\", 0, Integer.MAX_VALUE);\n+        BufferAllocator originalVectorsAllocator =\n+          allocator.newChildAllocator(\"original vectors\", 0, Integer.MAX_VALUE);\n         NonNullableStructVector parent = NonNullableStructVector.empty(\"parent\", originalVectorsAllocator)) {\n \n       // write some data\n@@ -116,7 +117,8 @@ public void testUnloadLoadAddPadding() throws IOException {\n     int count = 10000;\n     Schema schema;\n     try (\n-        BufferAllocator originalVectorsAllocator = allocator.newChildAllocator(\"original vectors\", 0, Integer.MAX_VALUE);\n+        BufferAllocator originalVectorsAllocator =\n+          allocator.newChildAllocator(\"original vectors\", 0, Integer.MAX_VALUE);\n         NonNullableStructVector parent = NonNullableStructVector.empty(\"parent\", originalVectorsAllocator)) {\n \n       // write some data\n@@ -160,7 +162,8 @@ public void testUnloadLoadAddPadding() throws IOException {\n           newBuffers.add(newBuffer);\n         }\n \n-        try (ArrowRecordBatch newBatch = new ArrowRecordBatch(recordBatch.getLength(), recordBatch.getNodes(), newBuffers);) {\n+        try (ArrowRecordBatch newBatch =\n+               new ArrowRecordBatch(recordBatch.getLength(), recordBatch.getNodes(), newBuffers);) {\n           // load it\n           VectorLoader vectorLoader = new VectorLoader(newRoot);\n \n@@ -227,7 +230,8 @@ public void testLoadValidityBuffer() throws IOException {\n      */\n \n     try (\n-        ArrowRecordBatch recordBatch = new ArrowRecordBatch(count, asList(new ArrowFieldNode(count, 0), new ArrowFieldNode(count, count)), asList(values[0], values[1], values[2], values[3]));\n+        ArrowRecordBatch recordBatch = new ArrowRecordBatch(count, asList(new ArrowFieldNode(count, 0),\n+          new ArrowFieldNode(count, count)), asList(values[0], values[1], values[2], values[3]));\n         BufferAllocator finalVectorsAllocator = allocator.newChildAllocator(\"final vectors\", 0, Integer.MAX_VALUE);\n         VectorSchemaRoot newRoot = VectorSchemaRoot.create(schema, finalVectorsAllocator);\n     ) {\n@@ -277,7 +281,8 @@ public void testUnloadLoadDuplicates() throws IOException {\n     ));\n \n     try (\n-        BufferAllocator originalVectorsAllocator = allocator.newChildAllocator(\"original vectors\", 0, Integer.MAX_VALUE);\n+        BufferAllocator originalVectorsAllocator =\n+          allocator.newChildAllocator(\"original vectors\", 0, Integer.MAX_VALUE);\n     ) {\n       List<FieldVector> sources = new ArrayList<>();\n       for (Field field : schema.getFields()) {\n@@ -294,7 +299,8 @@ public void testUnloadLoadDuplicates() throws IOException {\n       try (VectorSchemaRoot root = new VectorSchemaRoot(schema.getFields(), sources, count)) {\n         VectorUnloader vectorUnloader = new VectorUnloader(root);\n         try (ArrowRecordBatch recordBatch = vectorUnloader.getRecordBatch();\n-             BufferAllocator finalVectorsAllocator = allocator.newChildAllocator(\"final vectors\", 0, Integer.MAX_VALUE);\n+             BufferAllocator finalVectorsAllocator =\n+               allocator.newChildAllocator(\"final vectors\", 0, Integer.MAX_VALUE);\n              VectorSchemaRoot newRoot = VectorSchemaRoot.create(schema, finalVectorsAllocator);) {\n           // load it\n           VectorLoader vectorLoader = new VectorLoader(newRoot);\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/complex/impl/TestPromotableWriter.java b/java/vector/src/test/java/org/apache/arrow/vector/complex/impl/TestPromotableWriter.java\nindex 40b2b0d173..992c937449 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/complex/impl/TestPromotableWriter.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/complex/impl/TestPromotableWriter.java\n@@ -110,8 +110,10 @@ public void testPromoteToUnion() throws Exception {\n \n       Field childField1 = container.getField().getChildren().get(0).getChildren().get(0);\n       Field childField2 = container.getField().getChildren().get(0).getChildren().get(1);\n-      assertEquals(\"Child field should be union type: \" + childField1.getName(), ArrowTypeID.Union, childField1.getType().getTypeID());\n-      assertEquals(\"Child field should be decimal type: \" + childField2.getName(), ArrowTypeID.Decimal, childField2.getType().getTypeID());\n+      assertEquals(\"Child field should be union type: \" +\n+          childField1.getName(), ArrowTypeID.Union, childField1.getType().getTypeID());\n+      assertEquals(\"Child field should be decimal type: \" +\n+          childField2.getName(), ArrowTypeID.Decimal, childField2.getType().getTypeID());\n     }\n   }\n }\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/complex/writer/TestComplexWriter.java b/java/vector/src/test/java/org/apache/arrow/vector/complex/writer/TestComplexWriter.java\nindex 6b9989951e..ce5acc644e 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/complex/writer/TestComplexWriter.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/complex/writer/TestComplexWriter.java\n@@ -116,7 +116,8 @@ public void transferPairSchemaChange() {\n   }\n \n   private NonNullableStructVector populateStructVector(CallBack callBack) {\n-    NonNullableStructVector parent = new NonNullableStructVector(\"parent\", allocator, new FieldType(false, Struct.INSTANCE, null, null), callBack);\n+    NonNullableStructVector parent =\n+        new NonNullableStructVector(\"parent\", allocator, new FieldType(false, Struct.INSTANCE, null, null), callBack);\n     ComplexWriter writer = new ComplexWriterImpl(\"root\", parent);\n     StructWriter rootWriter = writer.rootAsStruct();\n     IntWriter intWriter = rootWriter.integer(\"int\");\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/ipc/BaseFileTest.java b/java/vector/src/test/java/org/apache/arrow/vector/ipc/BaseFileTest.java\nindex dfb579bd0d..80da8e7331 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/ipc/BaseFileTest.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/ipc/BaseFileTest.java\n@@ -236,7 +236,9 @@ protected void validateDateTimeContent(int count, VectorSchemaRoot root) {\n     }\n   }\n \n-  protected VectorSchemaRoot writeFlatDictionaryData(BufferAllocator bufferAllocator, DictionaryProvider.MapDictionaryProvider provider) {\n+  protected VectorSchemaRoot writeFlatDictionaryData(\n+      BufferAllocator bufferAllocator,\n+      DictionaryProvider.MapDictionaryProvider provider) {\n \n     // Define dictionaries and add to provider\n     VarCharVector dictionary1Vector = newVarCharVector(\"D1\", bufferAllocator);\n@@ -293,7 +295,8 @@ protected VectorSchemaRoot writeFlatDictionaryData(BufferAllocator bufferAllocat\n     FieldVector encodedVector2 = (FieldVector) DictionaryEncoder.encode(vector2, dictionary2);\n     vector2.close();  // Done with this vector after encoding\n \n-    List<Field> fields = ImmutableList.of(encodedVector1A.getField(), encodedVector1B.getField(), encodedVector2.getField());\n+    List<Field> fields = ImmutableList.of(encodedVector1A.getField(), encodedVector1B.getField(),\n+        encodedVector2.getField());\n     List<FieldVector> vectors = ImmutableList.of(encodedVector1A, encodedVector1B, encodedVector2);\n \n     return new VectorSchemaRoot(fields, vectors, encodedVector1A.getValueCount());\n@@ -363,7 +366,9 @@ protected void validateFlatDictionary(VectorSchemaRoot root, DictionaryProvider\n     Assert.assertEquals(new Text(\"large\"), dictionaryVector.getObject(2));\n   }\n \n-  protected VectorSchemaRoot writeNestedDictionaryData(BufferAllocator bufferAllocator, DictionaryProvider.MapDictionaryProvider provider) {\n+  protected VectorSchemaRoot writeNestedDictionaryData(\n+      BufferAllocator bufferAllocator,\n+      DictionaryProvider.MapDictionaryProvider provider) {\n \n     // Define the dictionary and add to the provider\n     VarCharVector dictionaryVector = newVarCharVector(\"D2\", bufferAllocator);\n@@ -442,7 +447,8 @@ protected VectorSchemaRoot writeDecimalData(BufferAllocator bufferAllocator) {\n     decimalVector2.setValueCount(count);\n     decimalVector3.setValueCount(count);\n \n-    List<Field> fields = ImmutableList.of(decimalVector1.getField(), decimalVector2.getField(), decimalVector3.getField());\n+    List<Field> fields = ImmutableList.of(decimalVector1.getField(), decimalVector2.getField(),\n+        decimalVector3.getField());\n     List<FieldVector> vectors = ImmutableList.<FieldVector>of(decimalVector1, decimalVector2, decimalVector3);\n     return new VectorSchemaRoot(fields, vectors, count);\n   }\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowFile.java b/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowFile.java\nindex 1200a38eec..ec4aadbdd8 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowFile.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowFile.java\n@@ -99,7 +99,8 @@ public void testWriteRead() throws IOException {\n     int count = COUNT;\n \n     // write\n-    try (BufferAllocator originalVectorAllocator = allocator.newChildAllocator(\"original vectors\", 0, Integer.MAX_VALUE);\n+    try (BufferAllocator originalVectorAllocator =\n+           allocator.newChildAllocator(\"original vectors\", 0, Integer.MAX_VALUE);\n          StructVector parent = StructVector.empty(\"parent\", originalVectorAllocator)) {\n       writeData(count, parent);\n       write(parent.getChild(\"root\"), file, stream);\n@@ -155,7 +156,8 @@ public void testWriteReadComplex() throws IOException {\n     int count = COUNT;\n \n     // write\n-    try (BufferAllocator originalVectorAllocator = allocator.newChildAllocator(\"original vectors\", 0, Integer.MAX_VALUE);\n+    try (BufferAllocator originalVectorAllocator =\n+           allocator.newChildAllocator(\"original vectors\", 0, Integer.MAX_VALUE);\n          StructVector parent = StructVector.empty(\"parent\", originalVectorAllocator)) {\n       writeComplexData(count, parent);\n       write(parent.getChild(\"root\"), file, stream);\n@@ -196,7 +198,8 @@ public void testWriteReadMultipleRBs() throws IOException {\n     int[] counts = {10, 5};\n \n     // write\n-    try (BufferAllocator originalVectorAllocator = allocator.newChildAllocator(\"original vectors\", 0, Integer.MAX_VALUE);\n+    try (BufferAllocator originalVectorAllocator =\n+           allocator.newChildAllocator(\"original vectors\", 0, Integer.MAX_VALUE);\n          StructVector parent = StructVector.empty(\"parent\", originalVectorAllocator);\n          FileOutputStream fileOutputStream = new FileOutputStream(file)) {\n       writeData(counts[0], parent);\n@@ -211,7 +214,8 @@ public void testWriteReadMultipleRBs() throws IOException {\n         streamWriter.writeBatch();\n \n         parent.allocateNew();\n-        writeData(counts[1], parent); // if we write the same data we don't catch that the metadata is stored in the wrong order.\n+        // if we write the same data we don't catch that the metadata is stored in the wrong order.\n+        writeData(counts[1], parent);\n         root.setRowCount(counts[1]);\n \n         fileWriter.writeBatch();\n@@ -371,7 +375,8 @@ public void testWriteReadMetadata() throws IOException {\n \n     List<Field> childFields = new ArrayList<Field>();\n     childFields.add(new Field(\"varchar-child\", new FieldType(true, ArrowType.Utf8.INSTANCE, null, metadata(1)), null));\n-    childFields.add(new Field(\"float-child\", new FieldType(true, new ArrowType.FloatingPoint(FloatingPointPrecision.SINGLE), null, metadata(2)), null));\n+    childFields.add(new Field(\"float-child\",\n+        new FieldType(true, new ArrowType.FloatingPoint(FloatingPointPrecision.SINGLE), null, metadata(2)), null));\n     childFields.add(new Field(\"int-child\", new FieldType(false, new ArrowType.Int(32, true), null, metadata(3)), null));\n     childFields.add(new Field(\"list-child\", new FieldType(true, ArrowType.List.INSTANCE, null, metadata(4)),\n         ImmutableList.of(new Field(\"l1\", FieldType.nullable(new ArrowType.Int(16, true)), null))));\n@@ -383,7 +388,8 @@ public void testWriteReadMetadata() throws IOException {\n     Assert.assertEquals(metadata, originalSchema.getCustomMetadata());\n \n     // write\n-    try (BufferAllocator originalVectorAllocator = allocator.newChildAllocator(\"original vectors\", 0, Integer.MAX_VALUE);\n+    try (BufferAllocator originalVectorAllocator =\n+           allocator.newChildAllocator(\"original vectors\", 0, Integer.MAX_VALUE);\n          StructVector vector = (StructVector) field.createVector(originalVectorAllocator)) {\n       vector.allocateNewSafe();\n       vector.setValueCount(0);\n@@ -448,7 +454,8 @@ public void testWriteReadDictionary() throws IOException {\n     int numDictionaryBlocksWritten = 0;\n \n     // write\n-    try (BufferAllocator originalVectorAllocator = allocator.newChildAllocator(\"original vectors\", 0, Integer.MAX_VALUE)) {\n+    try (BufferAllocator originalVectorAllocator =\n+           allocator.newChildAllocator(\"original vectors\", 0, Integer.MAX_VALUE)) {\n \n       MapDictionaryProvider provider = new MapDictionaryProvider();\n \n@@ -569,9 +576,11 @@ public void testWriteReadFixedSizeBinary() throws IOException {\n     }\n \n     // write\n-    try (BufferAllocator originalVectorAllocator = allocator.newChildAllocator(\"original vectors\", 0, Integer.MAX_VALUE);\n+    try (BufferAllocator originalVectorAllocator =\n+           allocator.newChildAllocator(\"original vectors\", 0, Integer.MAX_VALUE);\n          StructVector parent = StructVector.empty(\"parent\", originalVectorAllocator)) {\n-      FixedSizeBinaryVector fixedSizeBinaryVector = parent.addOrGet(\"fixed-binary\", FieldType.nullable(new FixedSizeBinary(typeWidth)), FixedSizeBinaryVector.class);\n+      FixedSizeBinaryVector fixedSizeBinaryVector = parent.addOrGet(\"fixed-binary\",\n+          FieldType.nullable(new FixedSizeBinary(typeWidth)), FixedSizeBinaryVector.class);\n       parent.allocateNew();\n       for (int i=0; i<numValues; i++) {\n         fixedSizeBinaryVector.set(i, byteValues[i]);\n@@ -619,10 +628,13 @@ public void testWriteReadFixedSizeList() throws IOException {\n     int count = COUNT;\n \n     // write\n-    try (BufferAllocator originalVectorAllocator = allocator.newChildAllocator(\"original vectors\", 0, Integer.MAX_VALUE);\n+    try (BufferAllocator originalVectorAllocator =\n+           allocator.newChildAllocator(\"original vectors\", 0, Integer.MAX_VALUE);\n          StructVector parent = StructVector.empty(\"parent\", originalVectorAllocator)) {\n-      FixedSizeListVector tuples = parent.addOrGet(\"float-pairs\", FieldType.nullable(new FixedSizeList(2)), FixedSizeListVector.class);\n-      Float4Vector floats = (Float4Vector) tuples.addOrGetVector(FieldType.nullable(MinorType.FLOAT4.getType())).getVector();\n+      FixedSizeListVector tuples = parent.addOrGet(\"float-pairs\",\n+          FieldType.nullable(new FixedSizeList(2)), FixedSizeListVector.class);\n+      Float4Vector floats = (Float4Vector) tuples.addOrGetVector(FieldType.nullable(MinorType.FLOAT4.getType()))\n+          .getVector();\n       IntVector ints = parent.addOrGet(\"ints\", FieldType.nullable(new Int(32, true)), IntVector.class);\n       parent.allocateNew();\n \n@@ -720,7 +732,8 @@ public void testReadWriteMultipleBatches() throws IOException {\n     try (IntVector vector = new IntVector(\"foo\", allocator);) {\n       Schema schema = new Schema(Collections.singletonList(vector.getField()), null);\n       try (FileOutputStream fileOutputStream = new FileOutputStream(file);\n-           VectorSchemaRoot root = new VectorSchemaRoot(schema, Collections.singletonList((FieldVector) vector), vector.getValueCount());\n+           VectorSchemaRoot root =\n+             new VectorSchemaRoot(schema, Collections.singletonList((FieldVector) vector), vector.getValueCount());\n            ArrowFileWriter writer = new ArrowFileWriter(root, null, fileOutputStream.getChannel());) {\n         writeBatchData(writer, vector, root);\n         numBlocksWritten = writer.getRecordBlocks().size();\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowFooter.java b/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowFooter.java\nindex 235e8c1646..ad9310c4f1 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowFooter.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowFooter.java\n@@ -44,7 +44,8 @@ public void test() {\n     Schema schema = new Schema(asList(\n         new Field(\"a\", FieldType.nullable(new ArrowType.Int(8, true)), Collections.<Field>emptyList())\n     ));\n-    ArrowFooter footer = new ArrowFooter(schema, Collections.<ArrowBlock>emptyList(), Collections.<ArrowBlock>emptyList());\n+    ArrowFooter footer =\n+        new ArrowFooter(schema, Collections.<ArrowBlock>emptyList(), Collections.<ArrowBlock>emptyList());\n     ArrowFooter newFooter = roundTrip(footer);\n     assertEquals(footer, newFooter);\n \ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowReaderWriter.java b/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowReaderWriter.java\nindex bf42fbb83c..d2dd503b90 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowReaderWriter.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowReaderWriter.java\n@@ -79,7 +79,8 @@ ArrowBuf buf(byte[] bytes) {\n \n   @Test\n   public void test() throws IOException {\n-    Schema schema = new Schema(asList(new Field(\"testField\", FieldType.nullable(new ArrowType.Int(8, true)), Collections.<Field>emptyList())));\n+    Schema schema = new Schema(asList(new Field(\"testField\", FieldType.nullable(new ArrowType.Int(8, true)),\n+        Collections.<Field>emptyList())));\n     ArrowType type = schema.getFields().get(0).getType();\n     FieldVector vector = TestUtils.newVector(FieldVector.class, \"testField\", type, allocator);\n     vector.initializeChildrenFromFields(schema.getFields().get(0).getChildren());\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowStream.java b/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowStream.java\nindex f1f5c000d8..3b0ba27d48 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowStream.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestArrowStream.java\n@@ -65,7 +65,8 @@ public void testStreamZeroLengthBatch() throws IOException {\n \n     try (IntVector vector = new IntVector(\"foo\", allocator);) {\n       Schema schema = new Schema(Collections.singletonList(vector.getField()), null);\n-      try (VectorSchemaRoot root = new VectorSchemaRoot(schema, Collections.singletonList(vector), vector.getValueCount());\n+      try (VectorSchemaRoot root =\n+             new VectorSchemaRoot(schema, Collections.singletonList(vector), vector.getValueCount());\n            ArrowStreamWriter writer = new ArrowStreamWriter(root, null, Channels.newChannel(os));) {\n         vector.setValueCount(0);\n         root.setRowCount(0);\n@@ -131,7 +132,8 @@ public void testReadWriteMultipleBatches() throws IOException {\n \n     try (IntVector vector = new IntVector(\"foo\", allocator);) {\n       Schema schema = new Schema(Collections.singletonList(vector.getField()), null);\n-      try (VectorSchemaRoot root = new VectorSchemaRoot(schema, Collections.singletonList(vector), vector.getValueCount());\n+      try (VectorSchemaRoot root =\n+             new VectorSchemaRoot(schema, Collections.singletonList(vector), vector.getValueCount());\n            ArrowStreamWriter writer = new ArrowStreamWriter(root, null, Channels.newChannel(os));) {\n         writeBatchData(writer, vector, root);\n       }\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestJSONFile.java b/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestJSONFile.java\nindex 3545f4519e..c223e9c854 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestJSONFile.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/ipc/TestJSONFile.java\n@@ -43,7 +43,8 @@ public void testWriteRead() throws IOException {\n     int count = COUNT;\n \n     // write\n-    try (BufferAllocator originalVectorAllocator = allocator.newChildAllocator(\"original vectors\", 0, Integer.MAX_VALUE);\n+    try (BufferAllocator originalVectorAllocator =\n+           allocator.newChildAllocator(\"original vectors\", 0, Integer.MAX_VALUE);\n          StructVector parent = StructVector.empty(\"parent\", originalVectorAllocator)) {\n       writeData(count, parent);\n       writeJSON(file, new VectorSchemaRoot(parent.getChild(\"root\")), null);\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/pojo/TestConvert.java b/java/vector/src/test/java/org/apache/arrow/vector/pojo/TestConvert.java\nindex bac79a10c8..2c4cf36966 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/pojo/TestConvert.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/pojo/TestConvert.java\n@@ -98,7 +98,8 @@ public void list() throws Exception {\n \n     Schema tempSchema = Schema.fromJSON(modifiedSchema);\n     FlatBufferBuilder schemaBuilder = new FlatBufferBuilder();\n-    org.apache.arrow.vector.types.pojo.Schema schema = new org.apache.arrow.vector.types.pojo.Schema(tempSchema.getFields());\n+    org.apache.arrow.vector.types.pojo.Schema schema =\n+        new org.apache.arrow.vector.types.pojo.Schema(tempSchema.getFields());\n     schemaBuilder.finish(schema.getSchema(schemaBuilder));\n     Schema finalSchema = Schema.deserialize(ByteBuffer.wrap(schemaBuilder.sizedByteArray()));\n     assertFalse(finalSchema.toString().contains(\"[DEFAULT]\"));\n@@ -137,11 +138,13 @@ public void nestedSchema() {\n     childrenBuilder.add(new Field(\"child4\", FieldType.nullable(new List()), ImmutableList.<Field>of(\n         new Field(\"child4.1\", FieldType.nullable(Utf8.INSTANCE), null)\n     )));\n-    childrenBuilder.add(new Field(\"child5\", FieldType.nullable(new Union(UnionMode.Sparse, new int[] {MinorType.TIMESTAMPMILLI.ordinal(), MinorType.FLOAT8.ordinal()})), ImmutableList.<Field>of(\n-        new Field(\"child5.1\", FieldType.nullable(new Timestamp(TimeUnit.MILLISECOND, null)), null),\n-        new Field(\"child5.2\", FieldType.nullable(new FloatingPoint(DOUBLE)), ImmutableList.<Field>of()),\n-        new Field(\"child5.3\", true, new Timestamp(TimeUnit.MILLISECOND, \"UTC\"), null)\n-    )));\n+    childrenBuilder.add(new Field(\"child5\", FieldType.nullable(\n+        new Union(UnionMode.Sparse, new int[] {MinorType.TIMESTAMPMILLI.ordinal(), MinorType.FLOAT8.ordinal()})),\n+          ImmutableList.<Field>of(\n+            new Field(\"child5.1\", FieldType.nullable(new Timestamp(TimeUnit.MILLISECOND, null)), null),\n+            new Field(\"child5.2\", FieldType.nullable(new FloatingPoint(DOUBLE)), ImmutableList.<Field>of()),\n+            new Field(\"child5.3\", true, new Timestamp(TimeUnit.MILLISECOND, \"UTC\"), null)\n+          )));\n     Schema initialSchema = new Schema(childrenBuilder.build());\n     run(initialSchema);\n   }\n@@ -157,7 +160,8 @@ private void run(Field initialField) {\n   private void run(Schema initialSchema) {\n     FlatBufferBuilder builder = new FlatBufferBuilder();\n     builder.finish(initialSchema.getSchema(builder));\n-    org.apache.arrow.flatbuf.Schema flatBufSchema = org.apache.arrow.flatbuf.Schema.getRootAsSchema(builder.dataBuffer());\n+    org.apache.arrow.flatbuf.Schema flatBufSchema =\n+        org.apache.arrow.flatbuf.Schema.getRootAsSchema(builder.dataBuffer());\n     Schema finalSchema = Schema.convertSchema(flatBufSchema);\n     assertEquals(initialSchema, finalSchema);\n   }\ndiff --git a/java/vector/src/test/java/org/apache/arrow/vector/types/pojo/TestSchema.java b/java/vector/src/test/java/org/apache/arrow/vector/types/pojo/TestSchema.java\nindex 42cf2ee20f..3d468aaa79 100644\n--- a/java/vector/src/test/java/org/apache/arrow/vector/types/pojo/TestSchema.java\n+++ b/java/vector/src/test/java/org/apache/arrow/vector/types/pojo/TestSchema.java\n@@ -71,7 +71,9 @@ public void testComplex() throws IOException {\n     ));\n     roundTrip(schema);\n     assertEquals(\n-        \"Schema<a: Int(8, true) not null, b: Struct<c: Int(16, true), d: Utf8>, e: List<Date(MILLISECOND)>, f: FloatingPoint(SINGLE), g: Timestamp(MILLISECOND, UTC), h: Timestamp(MICROSECOND, null), i: Interval(DAY_TIME)>\",\n+        \"Schema<a: Int(8, true) not null, b: Struct<c: Int(16, true), d: Utf8>, e: List<Date(MILLISECOND)>, \" +\n+          \"f: FloatingPoint(SINGLE), g: Timestamp(MILLISECOND, UTC), h: Timestamp(MICROSECOND, null), \" +\n+          \"i: Interval(DAY_TIME)>\",\n         schema.toString());\n   }\n \n@@ -151,7 +153,9 @@ public void testTS() throws IOException {\n     ));\n     roundTrip(schema);\n     assertEquals(\n-        \"Schema<a: Timestamp(SECOND, UTC), b: Timestamp(MILLISECOND, UTC), c: Timestamp(MICROSECOND, UTC), d: Timestamp(NANOSECOND, UTC), e: Timestamp(SECOND, null), f: Timestamp(MILLISECOND, null), g: Timestamp(MICROSECOND, null), h: Timestamp(NANOSECOND, null)>\",\n+        \"Schema<a: Timestamp(SECOND, UTC), b: Timestamp(MILLISECOND, UTC), c: Timestamp(MICROSECOND, UTC), \" +\n+          \"d: Timestamp(NANOSECOND, UTC), e: Timestamp(SECOND, null), f: Timestamp(MILLISECOND, null), \" +\n+          \"g: Timestamp(MICROSECOND, null), h: Timestamp(NANOSECOND, null)>\",\n         schema.toString());\n   }\n \n\n\n \n\n----------------------------------------------------------------\nThis is an automated message from the Apache Git Service.\nTo respond to the message, please log on GitHub and use the\nURL above to go to the specific comment.\n \nFor queries about this service, please contact Infrastructure at:\nusers@infra.apache.org\n",
                    "created": "2018-09-07T23:24:35.862+0000",
                    "updated": "2018-09-07T23:24:35.862+0000",
                    "started": "2018-09-07T23:24:35.861+0000",
                    "timeSpent": "10m",
                    "timeSpentSeconds": 600,
                    "id": "142365",
                    "issueId": "13182995"
                }
            ]
        },
        "customfield_12313920": null,
        "issuetype": {
            "self": "https://issues.apache.org/jira/rest/api/2/issuetype/7",
            "id": "7",
            "description": "The sub-task of the issue",
            "iconUrl": "https://issues.apache.org/jira/secure/viewavatar?size=xsmall&avatarId=21146&avatarType=issuetype",
            "name": "Sub-task",
            "subtask": true,
            "avatarId": 21146
        },
        "timespent": 12600,
        "customfield_12314020": "{summaryBean=com.atlassian.jira.plugin.devstatus.rest.SummaryBean@fee9cb4[summary={pullrequest=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@1efcb436[overall=PullRequestOverallBean{stateCount=0, state='OPEN', details=PullRequestOverallDetails{openCount=0, mergedCount=0, declinedCount=0}},byInstanceType={}], build=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@f4a5295[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BuildOverallBean@746c0a4e[failedBuildCount=0,successfulBuildCount=0,unknownBuildCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], review=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@3381de8[overall=com.atlassian.jira.plugin.devstatus.summary.beans.ReviewsOverallBean@24f9c0ae[stateCount=0,state=<null>,dueDate=<null>,overDue=false,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], deployment-environment=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@797af05e[overall=com.atlassian.jira.plugin.devstatus.summary.beans.DeploymentOverallBean@6d50ab45[topEnvironments=[],showProjects=false,successfulCount=0,count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], repository=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@2e443c5a[overall=com.atlassian.jira.plugin.devstatus.summary.beans.CommitOverallBean@44d2758c[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}], branch=com.atlassian.jira.plugin.devstatus.rest.SummaryItemBean@6a048548[overall=com.atlassian.jira.plugin.devstatus.summary.beans.BranchOverallBean@26601ce[count=0,lastUpdated=<null>,lastUpdatedTimestamp=<null>],byInstanceType={}]},errors=[],configErrors=[]], devSummaryJson={\"cachedValue\":{\"errors\":[],\"configErrors\":[],\"summary\":{\"pullrequest\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":\"OPEN\",\"details\":{\"openCount\":0,\"mergedCount\":0,\"declinedCount\":0,\"total\":0},\"open\":true},\"byInstanceType\":{}},\"build\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"failedBuildCount\":0,\"successfulBuildCount\":0,\"unknownBuildCount\":0},\"byInstanceType\":{}},\"review\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"stateCount\":0,\"state\":null,\"dueDate\":null,\"overDue\":false,\"completed\":false},\"byInstanceType\":{}},\"deployment-environment\":{\"overall\":{\"count\":0,\"lastUpdated\":null,\"topEnvironments\":[],\"showProjects\":false,\"successfulCount\":0},\"byInstanceType\":{}},\"repository\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}},\"branch\":{\"overall\":{\"count\":0,\"lastUpdated\":null},\"byInstanceType\":{}}}},\"isStale\":false}}",
        "customfield_12314141": null,
        "customfield_12314140": null,
        "project": {
            "self": "https://issues.apache.org/jira/rest/api/2/project/12319525",
            "id": "12319525",
            "key": "ARROW",
            "name": "Apache Arrow",
            "projectTypeKey": "software",
            "avatarUrls": {
                "48x48": "https://issues.apache.org/jira/secure/projectavatar?pid=12319525&avatarId=10011",
                "24x24": "https://issues.apache.org/jira/secure/projectavatar?size=small&pid=12319525&avatarId=10011",
                "16x16": "https://issues.apache.org/jira/secure/projectavatar?size=xsmall&pid=12319525&avatarId=10011",
                "32x32": "https://issues.apache.org/jira/secure/projectavatar?size=medium&pid=12319525&avatarId=10011"
            },
            "projectCategory": {
                "self": "https://issues.apache.org/jira/rest/api/2/projectCategory/13960",
                "id": "13960",
                "description": "Apache Arrow",
                "name": "Arrow"
            }
        },
        "aggregatetimespent": 12600,
        "customfield_12312520": null,
        "customfield_12312521": "Fri Sep 07 23:24:43 UTC 2018",
        "customfield_12314422": null,
        "customfield_12314421": null,
        "customfield_12314146": null,
        "customfield_12314420": null,
        "customfield_12314145": null,
        "customfield_12314144": null,
        "customfield_12314143": null,
        "resolutiondate": "2018-09-07T23:24:43.000+0000",
        "workratio": -1,
        "customfield_12312923": null,
        "customfield_12312920": null,
        "customfield_12312921": null,
        "watches": {
            "self": "https://issues.apache.org/jira/rest/api/2/issue/ARROW-3171/watchers",
            "watchCount": 1,
            "isWatching": false
        },
        "created": "2018-09-04T23:16:42.000+0000",
        "updated": "2018-09-07T23:25:24.000+0000",
        "timeoriginalestimate": null,
        "description": null,
        "customfield_10010": null,
        "timetracking": {
            "remainingEstimate": "0h",
            "timeSpent": "3.5h",
            "remainingEstimateSeconds": 0,
            "timeSpentSeconds": 12600
        },
        "customfield_12314523": null,
        "customfield_12314127": null,
        "customfield_12314522": null,
        "customfield_12314126": null,
        "customfield_12314521": null,
        "customfield_12314125": null,
        "customfield_12314520": null,
        "customfield_12314124": null,
        "attachment": [],
        "customfield_12312340": null,
        "customfield_12314123": null,
        "customfield_12312341": null,
        "customfield_12312220": null,
        "customfield_12314122": null,
        "customfield_12314121": null,
        "customfield_12314120": null,
        "customfield_12314129": null,
        "customfield_12314524": null,
        "customfield_12314128": null,
        "summary": "[Java] checkstyle - fix line length and indentation",
        "customfield_12314130": null,
        "customfield_12310291": null,
        "customfield_12310290": null,
        "customfield_12314138": null,
        "customfield_12314137": null,
        "environment": null,
        "customfield_12314136": null,
        "customfield_12314135": null,
        "customfield_12311020": null,
        "customfield_12314134": null,
        "duedate": null,
        "customfield_12314132": null,
        "customfield_12314131": null,
        "comment": {
            "comments": [
                {
                    "self": "https://issues.apache.org/jira/rest/api/2/issue/13182995/comment/16607773",
                    "id": "16607773",
                    "author": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
                        "name": "bryanc",
                        "key": "bryanc",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
                        },
                        "displayName": "Bryan Cutler",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "body": "Issue resolved by pull request 2512\n[https://github.com/apache/arrow/pull/2512]",
                    "updateAuthor": {
                        "self": "https://issues.apache.org/jira/rest/api/2/user?username=bryanc",
                        "name": "bryanc",
                        "key": "bryanc",
                        "avatarUrls": {
                            "48x48": "https://issues.apache.org/jira/secure/useravatar?ownerId=bryanc&avatarId=23479",
                            "24x24": "https://issues.apache.org/jira/secure/useravatar?size=small&ownerId=bryanc&avatarId=23479",
                            "16x16": "https://issues.apache.org/jira/secure/useravatar?size=xsmall&ownerId=bryanc&avatarId=23479",
                            "32x32": "https://issues.apache.org/jira/secure/useravatar?size=medium&ownerId=bryanc&avatarId=23479"
                        },
                        "displayName": "Bryan Cutler",
                        "active": true,
                        "timeZone": "America/Los_Angeles"
                    },
                    "created": "2018-09-07T23:24:43.977+0000",
                    "updated": "2018-09-07T23:24:43.977+0000"
                }
            ],
            "maxResults": 1,
            "total": 1,
            "startAt": 0
        },
        "customfield_12311820": "0|i3xqfz:",
        "customfield_12314139": null
    }
}