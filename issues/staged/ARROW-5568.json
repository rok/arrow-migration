{
    "issue": {
        "title": "[Python] Allow parsing more general JSON formats",
        "body": "***Note**: This issue was originally created as [ARROW-5568](https://issues.apache.org/jira/browse/ARROW-5568). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI have JSON data where the columnar (line-delimited) part is in a `data` subkey:\r\n```java\n\r\n{\r\n  \"metadata\": {\"name\": \"block1\"},\r\n  \"data\" : [\r\n    {\"a\": 1, \"b\": 2.0, \"c\": \"foo\", \"d\": false},\r\n    {\"a\": 4, \"b\": -5.5, \"c\": null, \"d\": true}\r\n  ]\r\n}\r\n```\r\n\u00a0\r\n\r\n\u00a0\r\n\r\nIt would be good if the arrow JSON parser could allow specifying where the columnar data is stored.\r\n\r\nSince the `metadata` is also important to me it would be even better if the rest of the JSON could be returned as a Python dict with the only the specified keys parsed as arrow tables - e.g.\r\n\r\n\u00a0\r\n```java\n\r\n>>> block1 = json.read_json(fn, tables=['data'])\r\n>>> block1['data']\r\npyarrow.Table\r\na: int64\r\nb: double\r\nc: string\r\nd: bool\r\n>>> block1['metadata']\r\n{'name': 'block1'}\r\n>>> block1\r\n{\r\n  \"metadata\": {\"name\": \"block1\"},\r\n  \"data\" : pyarrow.Table\r\n}\n```\r\n\u00a0\r\n\r\n\u00a0",
        "created_at": "2019-06-12T05:39:07.000Z",
        "updated_at": "2019-06-12T06:27:13.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2019-06-12T06:27:13.212Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5568?focusedCommentId=16861790) by Joris Van den Bossche (jorisvandenbossche):*\n> I have JSON data where the columnar (line-delimited) part is in a `data` subkey:\r\n\r\nNote that the `data` subpart is not line delimited, but a comma-delimited JSON array. So that's a first thing that would be good to support.\r\n\r\nSome additional resources that might be useful: in pandas there are many formats supported, called \"orients\", see the overview table at http://pandas.pydata.org/pandas-docs/version/0.24/user_guide/io.html#reading-json (disclaimer: I don't know how common the different formats are, so it doesn't necessarily makes sense to copy them all from pandas).\r\n\r\nOne of the formats is the JSON Table Schema (https://frictionlessdata.io/specs/table-schema/), which is a json file with a `'metadata'` and `'data'` top-level keys, where the `'data'` then consists of comma-delimited records (so very similar in structure as what `[~dhirschfeld]` showed above)."
        }
    ]
}