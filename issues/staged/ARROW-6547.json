{
    "issue": {
        "title": "[C++] valgrind errors in diff-test",
        "body": "***Note**: This issue was originally created as [ARROW-6547](https://issues.apache.org/jira/browse/ARROW-6547). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nNot sure when these crept in but I encountered when looking into a segfault in a build today\r\n\r\nhttps://gist.github.com/wesm/b388dda4f0e2e38a8aa77dfc9bd91914",
        "created_at": "2019-09-12T03:57:37.000Z",
        "updated_at": "2020-01-30T20:09:35.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-01-30T20:09:35.000Z"
    },
    "comments": [
        {
            "created_at": "2019-09-12T03:57:51.908Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6547?focusedCommentId=16928182) by Wes McKinney (wesm):*\ncc `[~pitrou]`"
        },
        {
            "created_at": "2019-09-12T09:23:02.568Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6547?focusedCommentId=16928401) by Antoine Pitrou (apitrou):*\nIf this with jemalloc pre-5.0? jemalloc 5.0 disabled Valgrind support: \r\nhttps://github.com/jemalloc/jemalloc/issues/910\r\nhttps://github.com/jemalloc/jemalloc/issues/369\r\n\r\nI would suggest building with jemalloc disabled and trying again."
        },
        {
            "created_at": "2019-09-12T10:06:46.414Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6547?focusedCommentId=16928422) by Antoine Pitrou (apitrou):*\nThis may also depend on the Valgrind version. I've tested locally with Valgrind 3.15.0 and jemalloc enabled, and I don't get an error."
        },
        {
            "created_at": "2019-09-12T10:09:06.130Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6547?focusedCommentId=16928423) by Antoine Pitrou (apitrou):*\nI get jemalloc-related errors in other tests, though."
        },
        {
            "created_at": "2019-09-12T11:00:30.483Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6547?focusedCommentId=16928444) by Antoine Pitrou (apitrou):*\nWithout jemalloc I get Valgrind failures in three tests (note I disabled Plasma and Gandiva):\r\n```Java\n\r\n\t 37 - arrow-diff-test (Failed)\r\n\t 44 - arrow-s3fs-test (Failed)\r\n\t 64 - arrow-flight-test (Failed)\r\n```\r\n\r\n`arrow-diff-test` is because of the way we read and compare boolean arrays (\"Conditional jump or move depends on uninitialised value(s)\"). Not sure it's reasonable to do something about it.\r\n\r\n`arrow-flight-test` is both with memory leaks inside gRPC (perhaps not severe, some initialization data it seems) and processing uninitialized data inside OpenSSL. The latter may be a false positive (OpenSSL is known to not mix well with Valgrind), but perhaps also points to our Flight tests sending uninitialized data over the wire (though I doubt so, otherwise we'd have errors in IPC tests as well?).\r\n\r\n`arrow-s3fs-test` is some unimportant stuff in OpenSSL and boost::process (\"Conditional jump or move depends on uninitialised value(s)\").\r\n\r\nThis reminds me that getting clean Valgrind builds is tedious, especially with non-trivial dependencies. ASAN (enabled on one of the Travis jobs AFAIR) seems to serve us better.\r\n\r\n[~emkornfield@gmail.com]"
        },
        {
            "created_at": "2019-09-14T01:57:06.892Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6547?focusedCommentId=16929641) by Wes McKinney (wesm):*\nOkay. Perhaps it's not worth doing anything about it, then"
        },
        {
            "created_at": "2019-09-17T04:53:58.534Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6547?focusedCommentId=16931092) by Micah Kornfield (emkornfield@gmail.com):*\nIt sounds like the diff-test is potentially worth fixing, I'll see what I can do for this next release.\u00a0 I'm also interested to see how these would compare with what MSAN (<https://clang.llvm.org/docs/MemorySanitizer.html>) returns, unfortunately its not clear to me if \"that can be recompiled from source, including all dependent libraries.\" is actually a requirement or if it can be limited to Arrow libs."
        }
    ]
}