{
    "issue": {
        "title": "[Rust] Provide guidance on number of file descriptors needed to read Parquet file",
        "body": "***Note**: This issue was originally created as [ARROW-9584](https://issues.apache.org/jira/browse/ARROW-9584). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI have a series of Parquet files that are 181 columns wide, and I'm processing them in parallel (using [rayon](https://github.com/rayon-rs/rayon/)). I ran into the OS limit (default 1024 according to `ulimit -n`) of open file descriptors when doing this, but each file was consuming 208 descriptors.\r\n\r\nIs there a deterministic calculation for how many file descriptors will be used to process files so that one can determine appropriate multithreading in a situation like this?",
        "created_at": "2020-07-28T03:54:46.000Z",
        "updated_at": "2021-12-16T17:01:42.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Type: task"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2020-07-28T08:34:03.538Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9584?focusedCommentId=17166259) by Gabor Szadovszky (gszadovszky):*\nI guess this issue is about the rust implementation of parquet (parquet-rs). Based on the [README](https://github.com/sunchao/parquet-rs/blob/master/README.md) it is moved to Arrow so you should create a jira [there](https://issues.apache.org/jira/projects/ARROW/issues)."
        },
        {
            "created_at": "2020-07-28T13:32:39.748Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9584?focusedCommentId=17166427) by Wes McKinney (wesm):*\nNot sure a JIRA is needed for this (maybe an e-mail to dev@ or user@?) but it sounds like you should be reusing a file reader object so that the file descriptor is reused between threads"
        }
    ]
}