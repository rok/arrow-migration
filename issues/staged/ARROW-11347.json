{
    "issue": {
        "title": "[JS] Consider Objects instead of Maps",
        "body": "***Note**: This issue was originally created as [ARROW-11347](https://issues.apache.org/jira/browse/ARROW-11347). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nA quick experiment (https://observablehq.com/@domoritz/performance-of-maps-vs-objects) seems to show that object accesses are a lot faster than map accesses. Would it make sense to switch to objects in the row API to improve performance? ",
        "created_at": "2021-01-22T09:45:57.000Z",
        "updated_at": "2022-01-16T17:25:54.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: JavaScript",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-01-16T17:25:42.000Z"
    },
    "comments": [
        {
            "created_at": "2021-01-22T14:43:06.516Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11347?focusedCommentId=17270182) by Neville Dipale (nevi_me):*\nHi `[~domoritz]`\r\n\r\nThe performance difference looks solid.\r\n\r\nI've tried that notebook on Chrome vs Safari (Macbook Air M1).\r\nObject: ~700ms vs ~2'600ms\r\nMap: ~5'300ms vs ~4'800ms\r\n\r\nOn Chrome vs Firefox (Ryzen desktop)\r\nObject: ~700ms vs ~600ms\r\nMap: ~3'800ms vs ~ 11'600ms\r\n\r\nDo you think that there'd be a downside to using Object, in the ergonomics of the APIs?\r\n\r\nI haven't used the JS implementation enough to have an opinion, hence I'm asking.\r\n\r\nIf you can open a PR with the change, we can review it and get it merged.\r\n\r\nThanks"
        },
        {
            "created_at": "2021-01-22T15:16:01.736Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11347?focusedCommentId=17270206) by Dominik Moritz (domoritz):*\nI wonder what `[~bhulette]` and `[~paultaylor]` say about this since they originally decided to go with Map. "
        },
        {
            "created_at": "2021-01-22T16:21:46.595Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11347?focusedCommentId=17270257) by Brian Hulette (bhulette):*\nCan you clarify where is it that we use Maps that you think should change? Is it when accessing an element of a Map-typed array?\r\n\r\nI'd be open to changing it but we'd need to consider that this would be a breaking API change. I suppose this is technically OK since all releases are major but it may be inconvenient for users."
        },
        {
            "created_at": "2021-01-22T21:26:58.935Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11347?focusedCommentId=17270450) by Dominik Moritz (domoritz):*\nYes, when accessing an element of an array (e.g. after `toArray()`). \r\n\r\nBefore making the change, someone needs to look closer into the performance benefits and usability. Jeff created his own parser for Arquero, which can make some simplifying assumptions and is less general but also almost twice as fast (https://github.com/uwdata/arquero-arrow/tree/main/perf). It would be good to figure out why. I think Maps are generally nicer than Objects for users so maybe it's worth the performance difference. It would be great if you could share how you decided on Maps in the first place. "
        },
        {
            "created_at": "2021-01-22T22:53:54.056Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11347?focusedCommentId=17270480) by Brian Hulette (bhulette):*\nAh, you mean when accessing a Row, e.g. table.get(0)\r\n\r\nI _think_ the choice of Map was for code-reuse between Struct vectors and Map vectors ([~paul.e.taylor] wrote this, he could comment more certainly). Note I also added the ability to access the fields in a row view \"by attribute\" in Python parlance in https://github.com/apache/arrow/pull/2197. So if you have a table with a \"foo\" field you can access it in a Row view with either table.get(0)[\"foo\"] or table.get(0).foo. I'm pretty sure I actually added that in response to a perf measurement from Jeff back in 2018."
        },
        {
            "created_at": "2021-01-24T11:35:44.407Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11347?focusedCommentId=17270855) by Dominik Moritz (domoritz):*\nOh awesome. Maybe this issue is not an issue then. We can close it when we hear back from [~paultaylor@symularity.com]. "
        },
        {
            "created_at": "2021-02-05T05:33:01.668Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11347?focusedCommentId=17279348) by Paul Taylor (paul.e.taylor):*\n`[~domoritz]` see my comment here: https://issues.apache.org/jira/browse/ARROW-11351?focusedCommentId=17279344&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-17279344\r\n\r\ntl;dr; the Row API doesn't use JS's Map, the abstract Row base class just implements the Map interface. The actual lookup is delegated to its concrete subclass implementations StructRow and MapRow. StructRow still uses the flyweight pattern, and MapRow attempts a different optimization via Proxies if available."
        },
        {
            "created_at": "2022-01-16T17:25:00.028Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11347?focusedCommentId=17476841) by Dominik Moritz (domoritz):*\nDone in https://github.com/apache/arrow/pull/10371"
        }
    ]
}