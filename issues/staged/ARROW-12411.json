{
    "issue": {
        "title": "[Rust] Add Builder interface for adding Arrays to record batches",
        "body": "***Note**: This issue was originally created as [ARROW-12411](https://issues.apache.org/jira/browse/ARROW-12411). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n\r\nUse case:\r\n\r\nWhile writing tests (both in IOx and in DataFusion) where I need a single `RecordBatch`, I often find myself doing something like this:\r\n\r\n```\r\n        let schema = Arc::new(Schema::new(vec![\r\n            ArrowField::new(\"float_field\", ArrowDataType::Float64, true),\r\n            ArrowField::new(\"time\", ArrowDataType::Int64, true),\r\n        ]));\r\n\r\n        let float_array: ArrayRef = Arc::new(Float64Array::from(vec![10.1, 20.1, 30.1, 40.1]));\r\n        let timestamp_array: ArrayRef = Arc::new(Int64Array::from(vec![1000, 2000, 3000, 4000]));\r\n\r\n        let batch = RecordBatch::try_new(schema, vec![float_array, timestamp_array])\r\n            .expect(\"created new record batch\");\r\n```\r\n\r\nThis is annoying because the information that `float_field` is a float is encoded both in the Schema and the `Float64Array`\r\n\r\nI would much rather rather be able to construct RecordBatches a a builder style to avoid the the redundancy and reduce the amount of typing / redundancy:\r\n\r\n\r\n```\r\n\r\n        let float_array: ArrayRef = Arc::new(Float64Array::from(vec![10.1, 20.1, 30.1, 40.1]));\r\n        let timestamp_array: ArrayRef = Arc::new(Int64Array::from(vec![1000, 2000, 3000, 4000]));\r\n\r\n        let batch = RecordBatch::empty()\r\n          .append(\"float_field\", timestamp_array).unwrap()\r\n          .append(\"time\", float_array).unwrap;\r\n\r\n```\r\n\r\nThe proposal is to add a method to `RecordBatch` like\r\n\r\n```\r\nimpl RecordBatch {\r\n...\r\n  fn append(self, field_name: &str, field_values: ArrayRef) -> Result<Self>\r\n}\r\n```\r\n\r\nThat would append the a field name to the current schema, returning an error if field_name was already present.\r\n\r\nThe nullability of the field would be set based on the actual null count of the field_values\r\n",
        "created_at": "2021-04-15T18:08:03.000Z",
        "updated_at": "2021-04-26T12:51:05.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-04-26T12:51:04.000Z"
    },
    "comments": [
        {
            "created_at": "2021-04-26T12:51:02.785Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12411?focusedCommentId=17332243) by Andrew Lamb (alamb):*\nMigrated to github: https://github.com/apache/arrow-rs/issues/210"
        }
    ]
}