{
    "issue": {
        "title": "[C++] Add async version of the ORC Dataset scanner",
        "body": "***Note**: This issue was originally created as [ARROW-13795](https://issues.apache.org/jira/browse/ARROW-13795). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nARROW-13572 (https://github.com/apache/arrow/pull/10991) added basic support for ORC file format in the Datasets API, but for now only implemented the sync `OrcFileFormat::ScanFile`, while we should rather implemented `OrcFileFormat::ScanBatchesAsync` instead.",
        "created_at": "2021-08-30T16:07:39.000Z",
        "updated_at": "2021-08-31T20:04:04.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: task"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-08-30T16:19:27.881Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13795?focusedCommentId=17406815) by Antoine Pitrou (apitrou):*\nThe C++ ORC API doesn't offer support for async operations (or even for dissociating IO from actual decoding), so I don't know how you would implement that in a useful manner."
        },
        {
            "created_at": "2021-08-30T18:15:57.051Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13795?focusedCommentId=17406885) by Weston Pace (westonpace):*\nWe could take a background reader approach like we do with CSV.  Does the ORC C++ API use threads under the hood or is it thread safe?"
        },
        {
            "created_at": "2021-08-30T18:21:30.402Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13795?focusedCommentId=17406888) by Antoine Pitrou (apitrou):*\nI haven't looked, but I doubt the ORC C++ API uses threads under the hood. It doesn't seem very sophisticated."
        },
        {
            "created_at": "2021-08-31T13:14:14.339Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13795?focusedCommentId=17407330) by Antoine Pitrou (apitrou):*\nHowever, ORC uses a random-access file, so a background reader sounds more complicated (and ORC stripes are typically large: the website mentions a default stripe size of 64MB)."
        },
        {
            "created_at": "2021-08-31T20:04:04.265Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13795?focusedCommentId=17407630) by Weston Pace (westonpace):*\nIn that case a thread-task-per-batch-read approach is probably simpler, if you use the async generator stuff you can use the readahead generator to throttle the max # of concurrent reads outstanding.  It will keep the CPU threads from blocking and allow concurrent reads (admittedly, concurrent reads are only useful if you're on S3 and have a small # of files)."
        }
    ]
}