{
    "issue": {
        "title": "[R] Unexpectedly slow results reading csv",
        "body": "***Note**: This issue was originally created as [ARROW-11433](https://issues.apache.org/jira/browse/ARROW-11433). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThis came up working on benchmarking Arrow's CSV reading. As far as I can tell this only impacts R, and only when reading the csv into arrow (but not pulling it in to R). It appears that most arrow interactions after the csv is read will result in this behavior not happening.\r\n\r\nWhat I'm seeing is that on subsequent reads, the time to read gets longer and longer (frequently in a stair step pattern where every other iteration takes longer).\r\n\r\n```r\n\r\n> system.time({\r\n+   for (i in 1:10) {\r\n+     print(system.time(tab <- read_csv_arrow(\"source_data/nyctaxi_2010-01.csv\", as_data_frame = FALSE)))\r\n+     tab <- NULL\r\n+   }\r\n+ })\r\n   user  system elapsed \r\n 24.788  19.485   7.216 \r\n   user  system elapsed \r\n 24.952  21.786   9.225 \r\n   user  system elapsed \r\n 25.150  23.039  10.332 \r\n   user  system elapsed \r\n 25.382  31.012  17.995 \r\n   user  system elapsed \r\n 25.309  25.140  12.356 \r\n   user  system elapsed \r\n 25.302  26.975  13.938 \r\n   user  system elapsed \r\n 25.509  34.390  21.134 \r\n   user  system elapsed \r\n 25.674  28.195  15.048 \r\n   user  system elapsed \r\n 25.031  28.094  16.449 \r\n   user  system elapsed \r\n 25.825  37.165  23.379 \r\n# total time:\r\n   user  system elapsed \r\n256.178 299.671 175.119 \r\n```\r\n\r\nInterestingly, doing something as unrelated as `arrow:::default_memory_pool()` which is [only getting the default memory pool](https://github.com/apache/arrow/blob/f291cd7b96463a2efd40a976123c64fad5c01058/r/src/memorypool.cpp#L68-L70). Other interactions totally unrelated to the table also similarly alleviate this behavior (e.g. `empty_tab <- Table$create(data.frame())`) or proactively invalidating with `tab$invalidate()`\r\n\r\n```r\n\r\n> system.time({\r\n+   for (i in 1:10) {\r\n+     print(system.time(tab <- read_csv_arrow(\"source_data/nyctaxi_2010-01.csv\", as_data_frame = FALSE)))\r\n+     pool <- arrow:::default_memory_pool()\r\n+     tab <- NULL\r\n+   }\r\n+ })\r\n   user  system elapsed \r\n 25.257  19.475   6.785 \r\n   user  system elapsed \r\n 25.271  19.838   6.821 \r\n   user  system elapsed \r\n 25.288  20.103   6.861 \r\n   user  system elapsed \r\n 25.188  20.290   7.217 \r\n   user  system elapsed \r\n 25.283  20.043   6.832 \r\n   user  system elapsed \r\n 25.194  19.947   6.906 \r\n   user  system elapsed \r\n 25.278  19.993   6.834 \r\n   user  system elapsed \r\n 25.355  20.018   6.833 \r\n   user  system elapsed \r\n 24.986  19.869   6.865 \r\n   user  system elapsed \r\n 25.130  19.878   6.798 \r\n# total time:\r\n   user  system elapsed \r\n255.381 210.598  83.109 \u200b\r\n> \r\n```\r\n\r\n\r\nI've tested this against Arrow 3.0.0, 2.0.0, and 1.0.0 and all experience the same behavior.\r\n\r\nI checked against pyarrow, and do not see the same:\r\n\r\n```python\n\r\nfrom pyarrow import csv\r\nimport time\r\n\r\nfor i in range(1, 10):\r\n    start = time.time()\r\n    table = csv.read_csv(\"r/source_data/nyctaxi_2010-01.csv\")\r\n    print(time.time() - start)\r\n    del table\r\n```\r\n\r\nresults:\r\n\r\n```Java\n\r\n7.586184978485107\r\n7.542470932006836\r\n7.92852783203125\r\n7.647372007369995\r\n7.742412805557251\r\n8.101378917694092\r\n7.7359960079193115\r\n7.843957901000977\r\n7.6457719802856445\r\n``` ",
        "created_at": "2021-01-29T22:14:11.000Z",
        "updated_at": "2021-09-08T20:23:54.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-09-08T20:23:54.000Z"
    },
    "comments": [
        {
            "created_at": "2021-02-03T00:03:17.360Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11433?focusedCommentId=17277537) by Jonathan Keane (jonkeane):*\nBen and I spent some time on this today. Turns out it's not reproducible on Ubuntu as far as we tried. So we suspect something specific with macOS.\r\n\r\nAs another example of even the most basic cpp <-> R interaction alleviating the behavior:\r\n\r\n```r\n\r\n> system.time({\r\n+   for (i in 1:10) {\r\n+     print(system.time(tab <- read_csv_arrow(\"source_data/nyctaxi_2010-01.csv\", as_data_frame = FALSE)))\r\n+     dev_null <- arrow::CsvParseOptions$create()\r\n+     tab <- NULL\r\n+   }\r\n+ })\r\n   user  system elapsed \r\n 27.894  22.633  12.224 \r\n   user  system elapsed \r\n 25.016  19.855   8.576 \r\n   user  system elapsed \r\n 25.092  20.625   8.051 \r\n   user  system elapsed \r\n 25.263  21.161   8.353 \r\n   user  system elapsed \r\n 25.168  20.575   8.745 \r\n   user  system elapsed \r\n 25.087  20.207   7.672 \r\n   user  system elapsed \r\n 25.311  20.525   7.438 \r\n   user  system elapsed \r\n 25.013  20.537   7.962 \r\n   user  system elapsed \r\n 25.088  20.671   8.371 \r\n   user  system elapsed \r\n 25.409  20.375   7.659 \r\n   user  system elapsed \r\n258.004 224.511 106.238 \r\n```"
        },
        {
            "created_at": "2021-02-03T00:10:12.344Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11433?focusedCommentId=17277543) by Jonathan Keane (jonkeane):*\nWe thought it might be due to the mmaping of the file, but turning it off at https://github.com/apache/arrow/blob/master/r/R/csv.R#L187 with `mmap = FALSE`  still exhibits the same pattern."
        },
        {
            "created_at": "2021-02-03T00:11:11.084Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11433?focusedCommentId=17277544) by Neal Richardson (npr):*\n\"Only on mac\" and \"freeing memory\" makes me think of ARROW-6994 and the various issues linked to that (see also https://github.com/apache/arrow/blob/master/cpp/src/arrow/memory_pool.cc#L67-L85). I forget, have you tried using the system memory allocator?"
        },
        {
            "created_at": "2021-02-03T00:17:06.987Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11433?focusedCommentId=17277546) by Jonathan Keane (jonkeane):*\nYeah, I tried it with the system allocator and that alone doesn\u2019t resolve it "
        },
        {
            "created_at": "2021-02-03T15:45:50.698Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11433?focusedCommentId=17278089) by Jonathan Keane (jonkeane):*\nI looked at allocators again this morning (building mimalloc and testing against that and re-testing the system allocator). \r\n\r\nMimalloc does not have the issue (and on this particular data set is 2x faster \ud83d\ude31).\r\n\r\nThe system allocator is **a lot** more variable. The pattern isn't quite the same, but I'm getting iterations that go from 7seconds (on the first run) and then up to 10\u201314s on all subsequent runs, though it doesn't have the increasing / stairstep pattern that jemalloc does.\r\n\r\nWhich makes me now suspect jemalloc specifically. I'm going to look into the options from that ticket"
        },
        {
            "created_at": "2021-02-03T16:58:35.023Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11433?focusedCommentId=17278186) by Neal Richardson (npr):*\nIf mimalloc is faster, perhaps we should use it instead of jemalloc"
        },
        {
            "created_at": "2021-02-03T17:00:51.255Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11433?focusedCommentId=17278190) by Jonathan Keane (jonkeane):*\nAfter seeing the speed increase that is certainly something we should add to our benchmarks (or at least run it side by side and compare)"
        },
        {
            "created_at": "2021-02-04T00:03:45.803Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11433?focusedCommentId=17278429) by Jonathan Keane (jonkeane):*\nAfter digging a bit more, I do think that ARROW-6994 is related. I've tried [changing the decays ](https://github.com/apache/arrow/blob/master/cpp/src/arrow/memory_pool.cc#L82-L83)to be something non-zero (e.g. 1000 to match the lines above) and the problem goes away.\r\n\r\nI've just tried setting both decays to 1000 and re-running the script in ARROW-6994 / ARROW-7305 and it doesn't appear to change _too much_:\r\n\r\nwith: ,dirty_decay_ms:1000 and ,muzzy_decay_ms:1000\r\n```Java\n\r\n(pyarrow-source1000) jkeane@het python % python test.py\r\nStarting RSS: 52789248\r\nRead CSV RSS: 170905600\r\nWrote Parquet RSS: 580022272\r\nWaited 1 second RSS: 580022272\r\nRead CSV RSS: 640917504\r\nWrote Parquet RSS: 645062656\r\nWaited 1 second RSS: 645062656\r\nRead CSV RSS: 705339392\r\nWrote Parquet RSS: 707686400\r\nWaited 1 second RSS: 707686400\r\nRead CSV RSS: 717934592\r\nWrote Parquet RSS: 718041088\r\nWaited 1 second RSS: 718041088\r\nRead CSV RSS: 771768320\r\nWrote Parquet RSS: 772018176\r\nWaited 1 second RSS: 772018176\r\nRead CSV RSS: 774455296\r\nWrote Parquet RSS: 776101888\r\nWaited 1 second RSS: 776101888\r\nRead CSV RSS: 784887808\r\nWrote Parquet RSS: 784891904\r\nWaited 1 second RSS: 784891904\r\nRead CSV RSS: 789123072\r\nWrote Parquet RSS: 789123072\r\nWaited 1 second RSS: 789123072\r\nRead CSV RSS: 789585920\r\nWrote Parquet RSS: 793587712\r\nWaited 1 second RSS: 793587712\r\nRead CSV RSS: 793608192\r\nWrote Parquet RSS: 793931776\r\nWaited 1 second RSS: 793931776\r\nWaited 1 second RSS: 793931776\r\nWaited 1 second RSS: 793931776\r\nWaited 1 second RSS: 793931776\r\nWaited 1 second RSS: 793931776\r\nWaited 1 second RSS: 793931776\r\nWaited 1 second RSS: 793931776\r\nWaited 1 second RSS: 793931776\r\nWaited 1 second RSS: 793931776\r\nWaited 1 second RSS: 793931776\r\nWaited 1 second RSS: 793931776\r\n```\r\n\r\nwith: ,dirty_decay_ms:0 and ,muzzy_decay_ms:0\r\n```Java\n\r\n(pyarrow-source) jkeane@het python % python test.py    \r\nStarting RSS: 52600832\r\nRead CSV RSS: 168427520\r\nWrote Parquet RSS: 277258240\r\nWaited 1 second RSS: 277258240\r\nRead CSV RSS: 336883712\r\nWrote Parquet RSS: 341028864\r\nWaited 1 second RSS: 341028864\r\nRead CSV RSS: 403419136\r\nWrote Parquet RSS: 403562496\r\nWaited 1 second RSS: 403562496\r\nRead CSV RSS: 462204928\r\nWrote Parquet RSS: 462135296\r\nWaited 1 second RSS: 462135296\r\nRead CSV RSS: 521125888\r\nWrote Parquet RSS: 525246464\r\nWaited 1 second RSS: 525246464\r\nRead CSV RSS: 586534912\r\nWrote Parquet RSS: 586469376\r\nWaited 1 second RSS: 586469376\r\nRead CSV RSS: 589545472\r\nWrote Parquet RSS: 589492224\r\nWaited 1 second RSS: 589492224\r\nRead CSV RSS: 595734528\r\nWrote Parquet RSS: 595947520\r\nWaited 1 second RSS: 595947520\r\nRead CSV RSS: 605380608\r\nWrote Parquet RSS: 605298688\r\nWaited 1 second RSS: 605298688\r\nRead CSV RSS: 610312192\r\nWrote Parquet RSS: 610430976\r\nWaited 1 second RSS: 610430976\r\nWaited 1 second RSS: 610430976\r\nWaited 1 second RSS: 610430976\r\nWaited 1 second RSS: 610430976\r\nWaited 1 second RSS: 610430976\r\nWaited 1 second RSS: 610430976\r\nWaited 1 second RSS: 610430976\r\nWaited 1 second RSS: 610430976\r\nWaited 1 second RSS: 610430976\r\nWaited 1 second RSS: 610430976\r\nWaited 1 second RSS: 610430976\r\n```"
        },
        {
            "created_at": "2021-02-04T00:19:23.724Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11433?focusedCommentId=17278440) by Jonathan Keane (jonkeane):*\nAnd to prove that the problem from R is resolved:\r\n\r\n```r\n\r\n> system.time({\r\n+   for (i in 1:10) {\r\n+     print(system.time(tab <- read_csv_arrow(\"source_data/nyctaxi_2010-01.csv\", as_data_frame = FALSE)))\r\n+     tab <- NULL\r\n+   }\r\n+ })\r\n   user  system elapsed \r\n 23.336  13.718   5.810 \r\n   user  system elapsed \r\n 24.825  10.481   6.110 \r\n   user  system elapsed \r\n 24.874  11.088   4.798 \r\n   user  system elapsed \r\n 24.906  12.385   5.700 \r\n   user  system elapsed \r\n 24.821  12.834   5.671 \r\n   user  system elapsed \r\n 24.827  12.462   5.489 \r\n   user  system elapsed \r\n 24.835  12.567   5.687 \r\n   user  system elapsed \r\n 24.850  12.672   5.658 \r\n   user  system elapsed \r\n 24.996  12.802   5.502 \r\n   user  system elapsed \r\n 24.992  11.940   5.248 \r\n   user  system elapsed \r\n249.552 132.579  67.680 \r\n```"
        },
        {
            "created_at": "2021-09-08T15:12:39.827Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11433?focusedCommentId=17411999) by Neal Richardson (npr):*\nIs there anything left to do here?"
        },
        {
            "created_at": "2021-09-08T16:21:15.125Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11433?focusedCommentId=17412058) by Jonathan Keane (jonkeane):*\nWe never did get to the bottom of if we could configure jemalloc in such a way that it wouldn't do this, though we've changed the default for macOS to mimalloc so it shouldn't be impacting people (\\***and**\\* AFAIK most typically shows up in benchmarking scenarios with lots of quick iterations, not in real-world scenarios).\r\n\r\nI'm fine with closing it, though (as a note to possible future selves) it's not fully resolved."
        },
        {
            "created_at": "2021-09-08T18:53:47.897Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-11433?focusedCommentId=17412138) by Weston Pace (westonpace):*\nI agree with Jon's logic.  As much as I don't like the idea of throwing away an unsolved mystery the fact that a user would have to already be in a non-standard configuration means it is pretty low priority and I don't know that I'll be able to justify an investigation in the foreseeable future."
        }
    ]
}