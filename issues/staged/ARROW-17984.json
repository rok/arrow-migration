{
    "issue": {
        "title": "pq.read_table doesn't seem to be thread safe",
        "body": "***Note**: This issue was originally created as [ARROW-17984](https://issues.apache.org/jira/browse/ARROW-17984). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nBefore PR: <https://github.com/apache/arrow/pull/13799> gets merged in master, I am using multithreading to improve read bandwidth from S3. Even after that PR gets merged, I probably will still try to use multithreading to some extent.\r\n\r\nHowever pq.read_table from S3 doesn't seem to be thread safe. Seems like it uses the new dataset reader under the hood. I cannot provide a reproduction, not a stable one anyway. But this is roughly the script I have been using\u00a0\r\n\r\n~~~\r\n\r\ndef get_next_batch(self, mapper_id, pos=None):\r\n\r\ndef download(file):\r\n\u00a0 \u00a0 return pq.read_table(\"s3://\" + self.bucket + \"/\" + file, columns=self.columns, filters=self.filters)\r\n\u00a0\r\nexecutor = concurrent.futures.ThreadPoolExecutor(max_workers=self.workers)\r\n\r\nfutures= \\{executor.submit(download, file): file for file in my_files}\r\nfor future inconcurrent.futures.as_completed(futures):\r\n\u00a0 \u00a0 yield\u00a0 future.result()\r\n~~~\r\nThe errors all have to do with malloc segfaults which makes me suspect the connection object is being reused across different pq.read_table invocations in different threads\r\n```\r\n(InputReaderNode pid=25001, ip=172.31.60.29) malloc_consolidate(): invalid chunk size\r\n(InputReaderNode pid=25001, ip=172.31.60.29) \\*\\*\\* SIGABRT received at time=1665464922 on cpu 9 \\*\\*\\*\r\n(InputReaderNode pid=25001, ip=172.31.60.29) PC: @ \u00a0 \u00a0 0x7f9a480a803b \u00a0(unknown) \u00a0raise\r\n(InputReaderNode pid=25001, ip=172.31.60.29) \u00a0 \u00a0 @ \u00a0 \u00a0 0x7f9a480a80c0 \u00a0 \u00a0 \u00a0 4160 \u00a0(unknown)\r\n(InputReaderNode pid=25001, ip=172.31.60.29) \u00a0 \u00a0 @ \u00a0 \u00a0 0x7f9a480fa32c \u00a0(unknown) \u00a0(unknown)\r\n```\r\nNote, this multithreaded code is running inside a Ray actor process, but that shouldn't be a problem.",
        "created_at": "2022-10-11T05:31:57.000Z",
        "updated_at": "2022-11-04T17:09:10.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Parquet",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-10-11T06:55:19.803Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17984?focusedCommentId=17615523) by Antoine Pitrou (apitrou):*\nCan you enable core dumps and try to get a gdb backtrace of all threads?"
        },
        {
            "created_at": "2022-10-11T18:12:22.889Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17984?focusedCommentId=17616016) by Ziheng Wang (marsupialtail):*\nUnfortunately I cannot figure out how to get a core dump. However I can say with confidence that this is the line that triggers this:\r\n\r\n\"/home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/parquet/__init__.py\", line 2353 in __init__\r\n\r\n\u00a0 filesystem, path_or_paths = FileSystem.from_uri(path_or_paths)\r\n\r\nFor context this will be trying to make different S3FileSystem objects in different threads.\u00a0"
        },
        {
            "created_at": "2022-10-28T17:07:27.366Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17984?focusedCommentId=17625816) by Ziheng Wang (marsupialtail):*\nI have attached a crash file. You can unpack using apport-unpack, and then gdb the CoreDump with gdb `cat ExecutablePath` CoreDump. Once inside the gdb do <font color=\"#e01e5a\">thread apply all bt</font>"
        },
        {
            "created_at": "2022-10-28T20:07:57.370Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17984?focusedCommentId=17625884) by Weston Pace (westonpace):*\nCan you share the full output of `thread apply all bt`?  The core dump itself isn't too portable without the binaries that generated it.  E.g...\r\n\r\n```\n\r\nwarning: Can't open file /usr/bin/python3.8 during file-backed mapping note processing\r\n\r\nwarning: Can't open file /usr/lib/x86_64-linux-gnu/libresolv-2.31.so during file-backed mapping note processing\r\n\r\nwarning: Can't open file /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow_python_flight.so.900 during file-backed mapping note processing\r\n```\r\n\r\nSo I just get:\r\n\r\n```\n\r\n(gdb) thread apply all bt\r\n\r\nThread 42 (LWP 10252):\r\n#0  0x00007fd4adf28f37 in ?? ()\r\n#1  0x0000000000000024 in ?? ()\r\n#2  0x00007fd4a5ff31e0 in ?? ()\r\n#3  0x0000000000000000 in ?? ()\r\n\r\nThread 41 (LWP 10072):\r\n#0  0x00007fd4ae05676d in ?? ()\r\n#1  0x00007fd1f3864396 in ?? ()\r\n#2  0x0000000000000000 in ?? ()\r\n...\r\n```"
        },
        {
            "created_at": "2022-11-03T18:34:29.805Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17984?focusedCommentId=17628471) by Ziheng Wang (marsupialtail):*\n```\r\n\r\nThread 42 (Thread 0x7fd1d77fe700 (LWP 10252)):\r\n#0 \u00a0futex_abstimed_wait (private=0, abstime=0x0, clockid=0, expected=2, futex_word=<optimized out>) at ../sysdeps/nptl/futex-internal.h:284\r\n#1 \u00a0__pthread_rwlock_wrlock_full (abstime=0x0, clockid=0, rwlock=0x2fd02f0) at pthread_rwlock_common.c:830\r\n#2 \u00a0__GI___pthread_rwlock_wrlock (rwlock=0x2fd02f0) at pthread_rwlock_wrlock.c:27\r\n#3 \u00a00x00007fd4a586ee59 in CRYPTO_THREAD_write_lock () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#4 \u00a00x00007fd4a586436f in ossl_namemap_add_names () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#5 \u00a00x00007fd4a58512c0 in construct_evp_method () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#6 \u00a00x00007fd4a5863e15 in ossl_method_construct_this () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#7 \u00a00x00007fd4a5863c8e in algorithm_do_this () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#8 \u00a00x00007fd4a586e1db in ossl_provider_doall_activated () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#9 \u00a00x00007fd4a5863d4f in ossl_algorithm_do_all () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#10 0x00007fd4a5864015 in ossl_method_construct () from /home/ubuntu/.local/lib--~~Type <RET> for~~-Type <RET> for -~~Type~~----~~Ty~~ ~~Type <RET> for mo~~ ~~Type -~~-~~Type <RET> for more, q to quit, c to continue without paging~~-\r\npython3.8/site-packages/pyarrow/libarrow.so.900\r\n#11 0x00007fd4a5851876 in evp_generic_fetch () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#12 0x00007fd4a584fd1a in EVP_CIPHER_fetch () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#13 0x00007fd4a5c6ad22 in ssl_evp_cipher_fetch () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#14 0x00007fd4a5c605b3 in ssl_load_ciphers () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#15 0x00007fd4a5c6c1b1 in SSL_CTX_new_ex () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#16 0x00007fd4a5c4e727 in ossl_connect_step1 () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#17 0x00007fd4a5c51c7d in ossl_connect_common () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#18 0x00007fd4a5c1a348 in Curl_ssl_connect_nonblocking () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#19 0x00007fd4a5c32766 in Curl_http_connect () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#20 0x00007fd4a5bfc2eb in multi_runsingle () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#21 0x00007fd4a5bfd76b in curl_multi_perform () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#22 0x00007fd4a5bec833 in easy_transfer () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#23 0x00007fd4a5becde9 in curl_easy_perform () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#24 0x00007fd4a5737984 in Aws::Http::CurlHttpClient::MakeRequest(std::shared_ptr<Aws::Http::HttpRequest> const&, Aws::Utils::RateLimits::RateLimiterInterface\\*, Aws::Utils::RateLimits::RateLimiterInterface\\*) const () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#25 0x00007fd4a56fa581 in Aws::Client::AWSClient::AttemptOneRequest(std::shared_ptr<Aws::Http::HttpRequest> const&, Aws::AmazonWebServiceRequest const&, char const\\*, char const\\*, char const\\*) const () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#26 0x00007fd4a56fb3d0 in Aws::Client::AWSClient::AttemptExhaustively(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const\\*, char const\\*, char const\\*) const () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#27 0x00007fd4a57072f1 in Aws::Client::AWSXMLClient::MakeRequest(Aws::Http::URI const&, Aws::AmazonWebServiceRequest const&, Aws::Http::HttpMethod, char const\\*, char const\\*, char const\\*) const () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#28 0x00007fd4a5219dd9 in arrow::fs::ResolveS3BucketRegion(std::string const&) () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#29 0x00007fd4a521b6a3 in arrow::fs::S3Options::FromUri(arrow::internal::Uri const&, std::string\\*) () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#30 0x00007fd4a4528c4f in arrow::fs::(anonymous namespace)::FileSystemFromUriReal(arrow::internal::Uri const&, std::string const&, arrow::io::IOContext const&, std::string\\*) () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#31 0x00007fd4a45298c0 in arrow::fs::FileSystemFromUri(std::string const&, arrow::io::IOContext const&, std::string\\*) () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#32 0x00007fd4a4529aea in arrow::fs::FileSystemFromUriOrPath(std::string const&, arrow::io::IOContext const&, std::string\\*) () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#33 0x00007fd4a4529cfd in arrow::fs::FileSystemFromUriOrPath(std::string const&, std::string\\*) () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/libarrow.so.900\r\n#34 0x00007fd488170b7d in __pyx_pw_7pyarrow_3_fs_10FileSystem_3from_uri(_object\\*, _object\\*, _object\\*) () from /home/ubuntu/.local/lib/python3.8/site-packages/pyarrow/_fs.cpython-38-x86_64-linux-gnu.so\r\n#35 0x00000000005f6929 in PyCFunction_Call ()\r\n#36 0x00000000005f74f6 in _PyObject_MakeTpCall ()\r\n#37 0x0000000000571164 in _PyEval_EvalFrameDefault ()\r\n#38 0x0000000000569dba in _PyEval_EvalCodeWithName ()\r\n#39 0x00000000005f6eb3 in _PyFunction_Vectorcall ()\r\n#40 0x000000000059ca27 in ?? ()\r\n#41 0x00000000005f745f in _PyObject_MakeTpCall ()\r\n#42 0x000000000057164c in _PyEval_EvalFrameDefault ()\r\n#43 0x0000000000569dba in _PyEval_EvalCodeWithName ()\r\n#44 0x00000000005f6eb3 in _PyFunction_Vectorcall ()\r\n#45 0x000000000056cc1f in _PyEval_EvalFrameDefault ()\r\n#46 0x0000000000569dba in _PyEval_EvalCodeWithName ()\r\n#47 0x00000000005f6eb3 in _PyFunction_Vectorcall ()\r\n#48 0x00000000005f6082 in PyObject_Call ()\r\n#49 0x000000000056d2d5 in _PyEval_EvalFrameDefault ()\r\n#50 0x00000000005f6cd6 in _PyFunction_Vectorcall ()\r\n#51 0x000000000056bbfa in _PyEval_EvalFrameDefault ()\r\n\r\n```"
        },
        {
            "created_at": "2022-11-04T17:09:10.074Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17984?focusedCommentId=17629119) by Antoine Pitrou (apitrou):*\n`[~marsupialtail]` Can you post the backtrace for _all_ threads? (using \"thread apply all bt\" as suggested by `[~westonpace]`).\r\n\r\nSince that will probably be quite long I suggest posting it on a site such as https://gist.github.com/ and posting the link here."
        }
    ]
}