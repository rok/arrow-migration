{
    "issue": {
        "title": "[C++] Add iterator facility for Python sequences",
        "body": "***Note**: This issue was originally created as [ARROW-2499](https://issues.apache.org/jira/browse/ARROW-2499). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe idea is to factor out something like the following:\r\nhttps://github.com/apache/arrow/pull/1935/files#diff-6ea0fcd65b95b76eab9ddfbd7a173725R78\r\n\r\nHowever I'm not sure which idiom or pattern we should choose. `[~cpcloud]` any idea?",
        "created_at": "2018-04-23T18:08:59.000Z",
        "updated_at": "2018-05-01T18:56:00.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2018-05-01T18:56:00.000Z"
    },
    "comments": [
        {
            "created_at": "2018-04-23T19:23:23.482Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2499?focusedCommentId=16448739) by Phillip Cloud (cpcloud):*\npybind11 actually has a nice implementation of C++ iterators on the core python sequence types (https://github.com/pybind/pybind11/blob/master/include/pybind11/pytypes.h#L559-L682). Maybe we take some ideas from there?"
        },
        {
            "created_at": "2018-04-23T19:39:27.018Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2499?focusedCommentId=16448756) by Antoine Pitrou (apitrou):*\nThat looks nice, but I would like to know how to abstract away the fact that we need two separate loops for performance in the example above. pybind11 basically has us write the checks and separate loops by hands. Perhaps a `for_each` like facility? But what should the signature look like?\r\n\r\nAlso, should we take the pybind11 code as-is or write our own?"
        },
        {
            "created_at": "2018-04-23T19:46:59.587Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2499?focusedCommentId=16448767) by Phillip Cloud (cpcloud):*\nYou'd still have to do the checks and choose the right _specific_ iterator but in theory you'd be able to have a single `VisitSequence(const generic_iterator& iter)` and loop over the elements using range-based for loops, which gets rid of the loop duplication. I'm not sure how to get rid of the checks since we only have `PyObject*` at the call site."
        },
        {
            "created_at": "2018-04-23T19:56:29.646Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2499?focusedCommentId=16448780) by Antoine Pitrou (apitrou):*\n`generic_iterator` is a template class in pybind11, so I'm not sure how that works."
        },
        {
            "created_at": "2018-04-23T20:02:20.773Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2499?focusedCommentId=16448786) by Phillip Cloud (cpcloud):*\nI can take a crack at this to show you what I mean (my suggestion may also not work out, there are still some things about idiomatic C++ that I don't yet grok). `[~joshuastorck]` might also have suggestions here."
        },
        {
            "created_at": "2018-04-23T20:07:50.299Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2499?focusedCommentId=16448790) by Antoine Pitrou (apitrou):*\nThat would be nice. Otherwise I might end up writing a `for_each`-like primitive, something like:\r\n\r\n```cpp\n\r\n// Iterate on the Python sequence, calling the given callable on each element.\r\n// If the callable returns a non-OK status, iteration stops and the status is returned.\r\nStatus IterateSequence(PyObject*, const std::function<Status(PyObject*)>&);\r\n```"
        },
        {
            "created_at": "2018-04-23T20:10:22.448Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2499?focusedCommentId=16448795) by Phillip Cloud (cpcloud):*\nThat works well too."
        },
        {
            "created_at": "2018-04-23T20:17:33.171Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2499?focusedCommentId=16448799) by Phillip Cloud (cpcloud):*\n`[~pitrou]` Looks like there's `LoopPySequence` in `numpy_to_arrow.cc`, if that satisfies the need."
        },
        {
            "created_at": "2018-04-23T20:19:29.378Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2499?focusedCommentId=16448800) by Antoine Pitrou (apitrou):*\nThanks! We can start from that indeed."
        },
        {
            "created_at": "2018-05-01T18:56:00.459Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2499?focusedCommentId=16460012) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 1940\n<https://github.com/apache/arrow/pull/1940>"
        }
    ]
}