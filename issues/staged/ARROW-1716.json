{
    "issue": {
        "title": "[Format/JSON] Use string integer value for Decimals in JSON",
        "body": "***Note**: This issue was originally created as [ARROW-1716](https://issues.apache.org/jira/browse/ARROW-1716). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSuprisingly, Java and C++ integration tests pass after ARROW-1588. This hides a bug, because we're writing decimal values as hex encoded bytes.\r\n\r\nC++ and Java compare that the bytes are the same, but because C++ is interpreting everything as little endian after ARROW-1588 and Java is big endian the numbers these bytes represent will be different in their respective systems.\r\n\r\nI propose that instead of encoding DecimaArray/DecimalVector values as hex encoded bytes, we store the integer as a string when writing Arrow DecimalArray/DecimalVector data to JSON. This will allow us to compare that the bytes have the same meaning in both systems.\r\n\r\nThis requires a change to the way Arrow writes JSON.\r\n\r\n`[~icexelloss]` was extremely helpful in helping me get to the bottom of this.\r\n\r\ncc `[~icexelloss]` `[~wesmckinn]` `[~jnadeau]`\r\n\r\n",
        "created_at": "2017-10-23T22:36:26.000Z",
        "updated_at": "2017-11-07T21:22:29.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Java",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2017-11-07T21:22:28.000Z"
    },
    "comments": [
        {
            "created_at": "2017-10-23T22:38:14.368Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1716?focusedCommentId=16215980) by Wes McKinney (wesm):*\n+1"
        },
        {
            "created_at": "2017-10-23T23:16:30.542Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1716?focusedCommentId=16216023) by Li Jin (icexelloss):*\n+1. Java already has a string constructor for BigInteger\r\n\r\nhttps://docs.oracle.com/javase/6/docs/api/java/math/BigInteger.html#BigInteger%28java.lang.String%29\r\n\r\n`[~cpcloud]` is this what you have in mind?"
        },
        {
            "created_at": "2017-10-24T16:58:59.049Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1716?focusedCommentId=16217258) by Phillip Cloud (cpcloud):*\nYep, that's right."
        },
        {
            "created_at": "2017-10-24T22:41:18.519Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1716?focusedCommentId=16217830) by Bryan Cutler (bryanc):*\n+1.  For reading values from JSON we can just use the `scale` from the schema right?"
        },
        {
            "created_at": "2017-10-25T00:22:08.839Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1716?focusedCommentId=16217918) by Phillip Cloud (cpcloud):*\nYep. The JSON will contain the unscaled value."
        },
        {
            "created_at": "2017-11-07T21:22:28.259Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1716?focusedCommentId=16242906) by Wes McKinney (wesm):*\nIssue resolved by pull request 1267\n<https://github.com/apache/arrow/pull/1267>"
        }
    ]
}