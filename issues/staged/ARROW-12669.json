{
    "issue": {
        "title": "[C++] Kernel to return Array of elements at index of list in ListArray",
        "body": "***Note**: This issue was originally created as [ARROW-12669](https://issues.apache.org/jira/browse/ARROW-12669). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIt would be useful to have a compute function that takes a `ListArray<list<type>>` and an integer index `n` and returns an `Array<type>` containing the `n` th item from each list.\r\n\r\nThis would be useful in combination with existing functions that return list-type output, for example the string splitting functions.\r\n\r\nLet's please ensure that this also works on fixed size list.",
        "created_at": "2021-05-06T16:16:42.000Z",
        "updated_at": "2021-09-20T19:39:32.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-09-20T19:39:21.000Z"
    },
    "comments": [
        {
            "created_at": "2021-09-05T04:46:19.848Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12669?focusedCommentId=17410100) by Eduardo Ponce (edponce):*\nIIUC, the expected behavior in Numpy is:\r\n```python\n\r\n>>> listarray = np.array([[1,2],[3,4],[5,6]])\r\narray([[1, 2],\r\n       [3, 4],\r\n       [5, 6]])\r\n>>> array = listarray[:,0]  # Get index 0 from all arrays\r\narray([1, 3, 5])\r\n>>> array = listarray[:,1]  # Get index 1 from all arrays\r\narray([2, 4, 6])\r\n```\r\n\r\nIt could be similar to the **values_slice** but at the **ListArray** level."
        },
        {
            "created_at": "2021-09-13T19:13:57.284Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12669?focusedCommentId=17414521) by Percy Camilo Trive\u00f1o Aucahuasi (aucahuasi):*\nShould we crash if we have an out of bound index? cc `[~icook]` \u00a0 `[~edponce]`"
        },
        {
            "created_at": "2021-09-13T20:05:41.088Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12669?focusedCommentId=17414569) by Neal Richardson (npr):*\nWe should never crash, should we? "
        },
        {
            "created_at": "2021-09-13T20:06:14.276Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12669?focusedCommentId=17414570) by Eduardo Ponce (edponce):*\nBy convention, runtime errors trigger/return an error status. Status codes are listed in [status.h](https://github.com/apache/arrow/blob/master/cpp/src/arrow/status.h#L77-L97).\r\nFor this case, I suggest something along the lines of **return Status::Invalid(\"index out of bounds ...\")**.\r\n\r\nIf the question is about maybe returning an empty array when an invalid index is given, I will state that most programming languages will emit an index error for such cases. I would not recommend returning an empty array via a silent error."
        },
        {
            "created_at": "2021-09-14T00:13:39.957Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12669?focusedCommentId=17414647) by Percy Camilo Trive\u00f1o Aucahuasi (aucahuasi):*\nI like the idea of returning Status::Invalid.\u00a0Thanks!\r\n\r\nMore questions:\r\n1. What is the best name for this new function? Given that this function is under\u00a0[Structural transforms](https://arrow.apache.org/docs/cpp/compute.html#cpp-compute-vector-structural-transforms)\u00a0category, my suggestion is\u00a0**list_nth_indices**\n1. If some item in each list is null: Do we need to have an option (**skip_null_values**) to handle this? For instance: \\*\\*\n   ```java\n   \n   list_nth_indices with the array [[2,13],[4,null]] and the index 1\n   Returns:\n   - [13, null] if skip_null_values = False\n   - [13] if skip_null_values = True\n   ```\n   \n1. If any list is null, do we need an option to handle the output? For instance using\u00a0**skip_null_lists**\u00a0\n   \n   ```java\n   \n   list_nth_indices with the array [[2,13],null,[4,null]] and the index 1\n   Returns:\n   - [13, null, null] if skip_null_lists = False and skip_null_values = False\n   - [13, null] if skip_null_lists = False and skip_null_values = True\n   - [13, null] if skip_null_lists = True and skip_null_values = False\n   - [13] if skip_null_lists = True and skip_null_values = True\u00a0\n   ```"
        },
        {
            "created_at": "2021-09-14T19:31:21.119Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12669?focusedCommentId=17415119) by Eduardo Ponce (edponce):*\nFor the current requirement, the output array of `list_nth_indices` should be of the same length as the number of arrays.\r\n```Java\n\r\n>>> list_nth_indices([[2, 13], [4, null]], /*index=*/1)\r\n[13, null]\r\n>>> list_nth_indices([[2, 13], null, [4, null]], /*index=*/1)\r\n[13, null, null]\r\n```\r\nI think that if adding the `skip_nulls` option is not difficult to implement and its impact in performance is negligible then supporting it is not a bad idea since already other operations on **ListArray** skip nulls (e.g., **flatten**)"
        },
        {
            "created_at": "2021-09-14T19:42:21.610Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12669?focusedCommentId=17415125) by Neal Richardson (npr):*\nIMO we should always return an Array the same length as the ListArray. I don't see a use case where I would want the resulting array to be a different length. This should also simplify things because doesn't that make this kernel a scalar kernel?\r\n\r\nIf you want to drop nulls, there are ways to do that after the fact (see also ARROW-12596). "
        },
        {
            "created_at": "2021-09-14T20:14:01.663Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12669?focusedCommentId=17415137) by Ian Cook (icook):*\nRegarding nulls: I agree with Neal's assertion directly above.\r\n\r\nRegarding the name: I think **`list_nth_indices`** is confusing for several reasons. Can we name it **`list_element`**? I think we should avoid using \"nth\" in the name because it might cause users to believe this was related to `std::nth_element` or to the `partition_nth_indices` kernel."
        },
        {
            "created_at": "2021-09-14T22:24:04.070Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12669?focusedCommentId=17415197) by Percy Camilo Trive\u00f1o Aucahuasi (aucahuasi):*\nSounds good! I like better that name, thanks all!\r\n\r\nbtw the PR is here (still WIP)\u00a0https://github.com/apache/arrow/pull/11159"
        },
        {
            "created_at": "2021-09-15T14:04:52.080Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12669?focusedCommentId=17415532) by Joris Van den Bossche (jorisvandenbossche):*\nAgreed with `[~icook]` that `list_nth_indices` is a confusing name (especially the \"indeces\", since you are not querying indices). `list_element` sounds good, a potentially even more explicit (but longer) name could be `list_get_element` (in pandas this corresponds to `Series.str.get(..)`, although for string values, not lists). \r\n\r\nSince we might want to have other variations like getting a slice of each list (`list_slice`?) or a sublist of each list based on indices (`list_elements`?), it's good to have a now that can consistently be extended like this. "
        },
        {
            "created_at": "2021-09-16T15:49:49.410Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12669?focusedCommentId=17416195) by Percy Camilo Trive\u00f1o Aucahuasi (aucahuasi):*\nThanks! Another couple of questions:\r\n1. Do we need this function can support\u00a0scalar inputs?\n1. if so, can you provide some examples?\n   \n   cc `[~icook]` \u00a0"
        },
        {
            "created_at": "2021-09-16T15:56:38.872Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12669?focusedCommentId=17416203) by David Li (lidavidm):*\nA scalar kernel should support scalar inputs. I don't think it's a lot of work here, and it makes the testing uniform instead of having to special-case this function.\r\n\r\nThe behavior should follow from the array behavior. That is, given a (scalar) list and a (scalar) index, return the element at the index. Return null if the (scalar) list is null."
        },
        {
            "created_at": "2021-09-17T07:05:02.019Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12669?focusedCommentId=17416498) by Joris Van den Bossche (jorisvandenbossche):*\nYes, to confirm what David said, I expect for any scalar kernel to just work on a scalar input as well (this is basically the definition of a scalar kernel, in that the operation is done element-wise for each element independently, so naively you can see a scalar kernel as an operation on a scalar that you apply on each element of the array).\r\n\r\nAnd I think David gave a concrete example here: https://github.com/apache/arrow/pull/11159#discussion_r710237790"
        },
        {
            "created_at": "2021-09-20T17:21:45.078Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12669?focusedCommentId=17417746) by Percy Camilo Trive\u00f1o Aucahuasi (aucahuasi):*\nThanks all! Yes I've implemented the new scalar function to work with scalars and arrays as well.\r\n\r\nThe PR should be merged soon\u00a0(y)"
        },
        {
            "created_at": "2021-09-20T19:39:21.217Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12669?focusedCommentId=17417794) by David Li (lidavidm):*\nIssue resolved by pull request 11159\n<https://github.com/apache/arrow/pull/11159>"
        }
    ]
}