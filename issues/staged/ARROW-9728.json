{
    "issue": {
        "title": "[Rust] [Parquet] Compute nested definition and repetition for structs",
        "body": "***Note**: This issue was originally created as [ARROW-9728](https://issues.apache.org/jira/browse/ARROW-9728). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen computing definition levels for deeply nested arrays that include lists, the definition levels are correctly calculated, but they are not translated into correct indexes for the eventual primitive arrays.\r\n\r\nFor example, an int32 array could have no null values, but be a child of a list that has null values. If say the first 5 values of the int32 array are members of the first list item (i.e. list_array[0] = [1,2,3,4,5], and that list is itself a child of a struct whose index is null, the whole 5 values of the int32 array **should** be skipped. Further, the list's definition and repetition levels will be represented by 1 slot instead of the 5.\r\n\r\nThe current logic cannot cater for this, and potentially results in slicing the int32 array incorrectly (sometimes including some of those first 5 values).\r\n\r\nThis Jira is for the work necessary to compute the index into the eventual leaf arrays correctly.\r\n\r\nI started doing it as part of the initial writer PR, but it's complex and is blocking progress.",
        "created_at": "2020-08-13T16:43:43.000Z",
        "updated_at": "2020-11-30T22:49:34.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Type: task"
        ],
        "closed": true,
        "closed_at": "2020-11-30T22:49:29.000Z"
    },
    "comments": [
        {
            "created_at": "2020-11-30T22:49:30.059Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9728?focusedCommentId=17241119) by Andrew Lamb (alamb):*\nIssue resolved by pull request 8792\n<https://github.com/apache/arrow/pull/8792>"
        }
    ]
}