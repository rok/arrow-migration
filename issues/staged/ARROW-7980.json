{
    "issue": {
        "title": "[Python] Deserialization with pyarrow fails for certain Timestamp-based data frame",
        "body": "***Note**: This issue was originally created as [ARROW-7980](https://issues.apache.org/jira/browse/ARROW-7980). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen following the [procedure outlined here](https://stackoverflow.com/a/57986261/5085211) to use `pyarrow` to serialize/deserialize pandas data frames, the below example fails with the given traceback (apologies for the broken formatting; I spent 10 minutes wrestling Jira with limited luck):\r\n\r\n\u00a0\r\n```Java\n\r\nimport pandas as pd                                                                      \r\nimport pyarrow as pa                                                                     \r\ndf = pd.DataFrame([{'Minutes5UTC': '2020-02-25T21:15:00+00:00', 'Minutes5DK': '2020-02-25T22:15:00'}])                                                        \r\ndf['Minutes5DK'] = pd.to_datetime(df.Minutes5DK)                                         \r\ndf['Minutes5UTC'] = pd.to_datetime(df.Minutes5UTC)                                       \r\ncontext = pa.default_serialization_context()                                             \r\npa.deserialize(pa.serialize(df).to_buffer().to_pybytes())\r\n\r\n\u00a0\r\n--------------------------------------------------------------------------\r\nTypeError                                 Traceback (most recent call last)\r\n<ipython-input-9-6f75cc47c6d5> in <module>\r\n----> 1 pa.deserialize(pa.serialize(df).to_buffer().to_pybytes())\r\n\r\n~/miniconda3/envs/emission/lib/python3.8/site-packages/pyarrow/serialization.pxi in pyarrow.lib.deserialize()\r\n\r\n~/miniconda3/envs/emission/lib/python3.8/site-packages/pyarrow/serialization.pxi in pyarrow.lib.deserialize_from()\r\n\r\n~/miniconda3/envs/emission/lib/python3.8/site-packages/pyarrow/serialization.pxi in pyarrow.lib.SerializedPyObject.deserialize()\r\n\r\n~/miniconda3/envs/emission/lib/python3.8/site-packages/pyarrow/serialization.pxi in pyarrow.lib.SerializationContext._deserialize_callback()\r\n\r\n~/miniconda3/envs/emission/lib/python3.8/site-packages/pyarrow/serialization.py in _deserialize_pandas_dataframe(data)\r\n    167 \r\n    168     def _deserialize_pandas_dataframe(data):\r\n--> 169         return pdcompat.serialized_dict_to_dataframe(data)\r\n    170 \r\n    171     def _serialize_pandas_series(obj):\r\n\r\n~/miniconda3/envs/emission/lib/python3.8/site-packages/pyarrow/pandas_compat.py in serialized_dict_to_dataframe(data)\r\n    661 def serialized_dict_to_dataframe(data):\r\n    662     import pandas.core.internals as _int\r\n--> 663     reconstructed_blocks = [_reconstruct_block(block)\r\n    664                             for block in data['blocks']]\r\n    665 \r\n\r\n~/miniconda3/envs/emission/lib/python3.8/site-packages/pyarrow/pandas_compat.py in <listcomp>(.0)\r\n    661 def serialized_dict_to_dataframe(data):\r\n    662     import pandas.core.internals as _int\r\n--> 663     reconstructed_blocks = [_reconstruct_block(block)\r\n    664                             for block in data['blocks']]\r\n    665 \r\n\r\n~/miniconda3/envs/emission/lib/python3.8/site-packages/pyarrow/pandas_compat.py in _reconstruct_block(item, columns, extension_columns)\r\n    707                                 klass=_int.CategoricalBlock)\r\n    708     elif 'timezone' in item:\r\n--> 709         dtype = make_datetimetz(item['timezone'])\r\n    710         block = _int.make_block(block_arr, placement=placement,\r\n    711                                 klass=_int.DatetimeTZBlock,\r\n\r\n~/miniconda3/envs/emission/lib/python3.8/site-packages/pyarrow/pandas_compat.py in make_datetimetz(tz)\r\n    734 def make_datetimetz(tz):\r\n    735     tz = pa.lib.string_to_tzinfo(tz)\r\n--> 736     return _pandas_api.datetimetz_type('ns', tz=tz)\r\n    737 \r\n    738 \r\n\r\nTypeError: 'NoneType' object is not callable\r\n```\r\n\u00a0\r\nPerhaps interestingly, if I comment out the two `pd.to_datetime` lines, the thing works (perhaps unsurprisingly), but if I then include them again, the original reproducing example all of a sudden works. That is, this works:\r\n\r\n```Java\n\r\nimport pandas as pd                                                                      \r\nimport pyarrow as pa                                                                     \r\ndf = pd.DataFrame([{'Minutes5UTC': '2020-02-25T21:15:00+00:00', 'Minutes5DK': '2020-02-25T22:15:00'}])\r\ncontext = pa.default_serialization_context()\r\npa.deserialize(pa.serialize(df).to_buffer().to_pybytes())\r\n\r\ndf = pd.DataFrame([{'Minutes5UTC': '2020-02-25T21:15:00+00:00', 'Minutes5DK': '2020-02-25T22:15:00'}])\r\ndf['Minutes5DK'] = pd.to_datetime(df.Minutes5DK)\r\ndf['Minutes5UTC'] = pd.to_datetime(df.Minutes5UTC)\r\ncontext = pa.default_serialization_context()\r\npa.deserialize(pa.serialize(df).to_buffer().to_pybytes())\r\n```\r\n\r\nThe issue occurs with pyarrow 0.16.0, and in both pandas 0.25.3 and 1.0.1.",
        "created_at": "2020-03-02T08:02:14.000Z",
        "updated_at": "2020-03-10T10:17:18.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-03-06T02:36:35.000Z"
    },
    "comments": [
        {
            "created_at": "2020-03-02T18:59:57.083Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7980?focusedCommentId=17049557) by Wes McKinney (wesm):*\nI mostly fixed the JIRA formatting"
        },
        {
            "created_at": "2020-03-03T14:55:04.905Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7980?focusedCommentId=17050283) by Joris Van den Bossche (jorisvandenbossche):*\n`[~fuglede]` thanks for the report! \r\n\r\nI put up a PR that fixes this: https://github.com/apache/arrow/pull/6524. It's not a super recent bug, but it was one a bit tricky to get catched in the tests, because it only comes up if this is the first functionality that runs that interacts with pandas."
        },
        {
            "created_at": "2020-03-06T02:36:35.319Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7980?focusedCommentId=17052693) by Wes McKinney (wesm):*\nIssue resolved by pull request 6524\n<https://github.com/apache/arrow/pull/6524>"
        }
    ]
}