{
    "issue": {
        "title": "[C++] memcpy_ssse3_back Segmentation fault",
        "body": "***Note**: This issue was originally created as [ARROW-4190](https://issues.apache.org/jira/browse/ARROW-4190). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nEnvironment:\r\n```java\n\r\nlinux\u00a0amd64\r\n```\r\n\u00a0\r\n\r\nStack Info:\r\n```java\n\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/lib64/libthread_db.so.1\".\r\nCore was generated by `/usr/sbin/kudu-tserver --server_dump_info_path=/var/run/hadoop/kudu-tserver-kud'.\r\nProgram terminated with signal 11, Segmentation fault.\r\n#0 0x00007f8f6cc010d0 in __memcpy_ssse3_back () from /lib64/libc.so.6\r\nMissing separate debuginfos, use: debuginfo-install cyrus-sasl-lib-2.1.26-19.2.1.alios7.x86_64 cyrus-sasl-plain-2.1.26-19.2.1.alios7.x86_64 glibc-2.17-106.alios7.8.x86_64 keyutils-libs-1.5.8-3.1.alios7.x86_64 krb5-libs-1.13.2-10.1.alios7.x86_64 libcom_err-1.43.5-7.1.alios7.x86_64 libdb-5.3.21-19.1.alios7.x86_64 libgcc-4.8.5-4.1.alios7.x86_64 libselinux-2.2.2-6.1.alios7.x86_64 libstdc++-4.8.5-4.1.alios7.x86_64 nss-softokn-freebl-3.16.2.3-13.1.alios7.x86_64 openssl-libs-1.0.1e-52.alios7.5.x86_64 pcre-8.32-15.1.alios7.x86_64 xz-libs-5.1.2-12alpha.1.alios7.x86_64 zlib-1.2.7-16.2.alios7.x86_64\r\n(gdb) bt\r\n#0 0x00007f8f6cc010d0 in __memcpy_ssse3_back () from /lib64/libc.so.6\r\n#1 0x0000000001c7f5e7 in arrow::io::BufferReader::Read (this=0x7f8f38f145d0, nbytes=4, bytes_read=0x7f8f38f14120, buffer=<optimized out>)\r\nat /home/admin/work/kudu/thirdparty/src/apache-arrow-0.8.0/cpp/src/arrow/io/memory.cc:260\r\n#2 0x0000000001ca7da3 in arrow::ipc::ReadMessage (file=0x7f8f38f145d0, message=0x7f8f38f14400) at /home/admin/work/kudu/thirdparty/src/apache-arrow-0.8.0/cpp/src/arrow/ipc/message.cc:213\r\n#3 0x0000000001ca92e5 in arrow::ipc::InputStreamMessageReader::ReadNextMessage (this=<optimized out>, message=<optimized out>)\r\nat /home/admin/work/kudu/thirdparty/src/apache-arrow-0.8.0/cpp/src/arrow/ipc/message.cc:252\r\n#4 0x0000000001c832d7 in arrow::ipc::ReadMessageAndValidate (reader=<optimized out>, expected_type=expected_type@entry=arrow::ipc::Message::RECORD_BATCH, allow_null=allow_null@entry=true,\r\nmessage=message@entry=0x7f8f38f14400) at /home/admin/work/kudu/thirdparty/src/apache-arrow-0.8.0/cpp/src/arrow/ipc/reader.cc:370\r\n#5 0x0000000001c86c3a in ReadNext (batch=0x7f8f38f14590, this=0x6421760) at /home/admin/work/kudu/thirdparty/src/apache-arrow-0.8.0/cpp/src/arrow/ipc/reader.cc:442\r\n#6 arrow::ipc::RecordBatchStreamReader::ReadNext (this=<optimized out>, batch=0x7f8f38f14590) at /home/admin/work/kudu/thirdparty/src/apache-arrow-0.8.0/cpp/src/arrow/ipc/reader.cc:496\r\n```\r\nCode Sample(Just like ipc-read-write-test.cc):\r\n```java\n\r\n// TEST\r\nstd::shared_ptr<arrow::ipc::RecordBatchWriter> writer;\r\nstd::shared_ptr<arrow::PoolBuffer> serialized_buffer = std::make_shared<arrow::PoolBuffer>(arrow::default_memory_pool());\r\nstd::shared_ptr<arrow::io::BufferOutputStream> arrow_stream =\r\nstd::make_shared<arrow::io::BufferOutputStream>(\r\nserialized_buffer);\r\narrow::ipc::RecordBatchStreamWriter::Open(arrow_stream.get(), (*arrow_record_batch)[0]->schema(), &writer);\r\n\r\nint j = 0;\r\nfor (const auto& batch: *arrow_record_batch) { \u00a0\r\n LOG(INFO) << \"start to write batch:\" << j++; \u00a0\r\n writer->WriteRecordBatch(*batch); \r\n}\r\n\r\nwriter->Close();\r\narrow_stream->Close();\r\n\r\narrow::io::BufferReader buf_reader(serialized_buffer);\r\nstd::shared_ptr<arrow::RecordBatchReader> reader;\r\narrow::ipc::RecordBatchStreamReader::Open(&buf_reader, &reader);\r\nstd::shared_ptr<arrow::RecordBatch> chunk;\r\nint i = 0;\r\nwhile (true) {\r\n\u00a0 reader->ReadNext(&chunk);\r\n\u00a0 LOG(INFO) << \"start to handle batch:\" << i++ << \", row number:\" << chunk->num_rows();\r\n\u00a0 if (chunk == nullptr) { \u00a0 \u00a0 break; \u00a0 }\r\n}\r\n```",
        "created_at": "2019-01-08T08:18:48.000Z",
        "updated_at": "2019-02-08T05:06:50.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-02-08T05:06:50.000Z"
    },
    "comments": [
        {
            "created_at": "2019-01-08T12:51:07.521Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4190?focusedCommentId=16737096) by Uwe Korn (uwe):*\n`[~lishuming]` This is quite an old version of Arrow. Can you see if the problem still persists with newer versions?\r\n\r\nAlso does this fail on the first, last or one of the intermediate batches?"
        },
        {
            "created_at": "2019-01-08T15:39:28.140Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4190?focusedCommentId=16737243) by Wes McKinney (wesm):*\n`[~lishuming]` you have many unchecked Status values in your code example. I suspect that the segfault is occurring after an error has occurred and not been checked"
        }
    ]
}