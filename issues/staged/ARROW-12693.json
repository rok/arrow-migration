{
    "issue": {
        "title": "[R] add unique() methods for ArrowTabular, datasets",
        "body": "***Note**: This issue was originally created as [ARROW-12693](https://issues.apache.org/jira/browse/ARROW-12693). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI am trying to see if I can leverage `unique` on a Dataset object. Imagining a much big dataset, I am trying to get away from this expensive pattern:\r\n```java\n\r\nDataset %>%\r\n\u00a0 pull(col) %>%\r\n\u00a0 unique()\n```\r\nHowever when I try the option below it is not working quite how I'd expect. I'm actually not able to get any working (e.g. `arrow_mean`) so maybe I am misunderstanding how these are meant to work.\u00a0\r\n```java\n\r\nlibrary(arrow, warn.conflicts = FALSE)\r\nlibrary(dplyr, warn.conflicts = FALSE)\r\ndir.create(\"iris\")\r\niris %>%\r\n group_by(Species) %>%\r\n write_dataset(\"iris\")\r\nds <- open_dataset(\"iris\")\r\nds %>%\r\n mutate(unique = arrow_unique(Species)) %>%\r\n collect()\r\n#> Error: Invalid: ExecuteScalarExpression cannot Execute non-scalar expression unique(\"setosa\")\r\nds %>%\r\n mutate(unique = arrow_unique(Petal.Width)) %>%\r\n collect()\r\n#> Error: Invalid: ExecuteScalarExpression cannot Execute non-scalar expression {Sepal.Length=Sepal.Length, Sepal.Width=Sepal.Width, Petal.Length=Petal.Length, Petal.Width=Petal.Width, Species=\"setosa\", unique=unique(Petal.Width)}\r\n\r\ncall_function(\"unique\", ds, \"Species\")\r\n#> Error: Argument 1 is of class FileSystemDataset but it must be one of \"Array\", \"ChunkedArray\", \"RecordBatch\", \"Table\", or \"Scalar\"\r\ncall_function(\"unique\", ds, \"Petal.Width\")\r\n#> Error: Argument 1 is of class FileSystemDataset but it must be one of \"Array\", \"ChunkedArray\", \"RecordBatch\", \"Table\", or \"Scalar\"\r\n\r\ncall_function(\"mean\", ds, \"Petal.Width\")\r\n#> Error: Argument 1 is of class FileSystemDataset but it must be one of \"Array\", \"ChunkedArray\", \"RecordBatch\", \"Table\", or \"Scalar\"\r\n\r\nsessioninfo::session_info()\r\n#> - Session info ---------------------------------------------------------------\r\n#> setting value \r\n#> version R version 4.0.5 (2021-03-31)\r\n#> os Windows 10 x64 \r\n#> system x86_64, mingw32 \r\n#> ui RTerm \r\n#> language (EN) \r\n#> collate English_Canada.1252 \r\n#> ctype English_Canada.1252 \r\n#> tz America/Los_Angeles \r\n#> date 2021-05-07 \r\n#> \r\n#> - Packages -------------------------------------------------------------------\r\n#> package * version date lib source \r\n#> arrow * 4.0.0 2021-04-27 [1] CRAN (R 4.0.5)\r\n#> assertthat 0.2.1 2019-03-21 [1] CRAN (R 4.0.0)\r\n#> backports 1.2.1 2020-12-09 [1] CRAN (R 4.0.3)\r\n#> bit 4.0.4 2020-08-04 [1] CRAN (R 4.0.2)\r\n#> bit64 4.0.5 2020-08-30 [1] CRAN (R 4.0.2)\r\n#> cli 2.5.0 2021-04-26 [1] CRAN (R 4.0.5)\r\n#> crayon 1.4.1 2021-02-08 [1] CRAN (R 4.0.3)\r\n#> DBI 1.1.1 2021-01-15 [1] CRAN (R 4.0.3)\r\n#> digest 0.6.27 2020-10-24 [1] CRAN (R 4.0.3)\r\n#> dplyr * 1.0.5 2021-03-05 [1] CRAN (R 4.0.5)\r\n#> ellipsis 0.3.2 2021-04-29 [1] CRAN (R 4.0.5)\r\n#> evaluate 0.14 2019-05-28 [1] CRAN (R 4.0.0)\r\n#> fansi 0.4.2 2021-01-15 [1] CRAN (R 4.0.3)\r\n#> fs 1.5.0 2020-07-31 [1] CRAN (R 4.0.2)\r\n#> generics 0.1.0 2020-10-31 [1] CRAN (R 4.0.3)\r\n#> glue 1.4.2 2020-08-27 [1] CRAN (R 4.0.2)\r\n#> highr 0.9 2021-04-16 [1] CRAN (R 4.0.4)\r\n#> htmltools 0.5.1.1 2021-01-22 [1] CRAN (R 4.0.3)\r\n#> knitr 1.33 2021-04-24 [1] CRAN (R 4.0.5)\r\n#> lifecycle 1.0.0 2021-02-15 [1] CRAN (R 4.0.4)\r\n#> magrittr 2.0.1 2020-11-17 [1] CRAN (R 4.0.3)\r\n#> pillar 1.6.0 2021-04-13 [1] CRAN (R 4.0.5)\r\n#> pkgconfig 2.0.3 2019-09-22 [1] CRAN (R 4.0.0)\r\n#> purrr 0.3.4 2020-04-17 [1] CRAN (R 4.0.0)\r\n#> R.cache 0.15.0 2021-04-30 [1] CRAN (R 4.0.5)\r\n#> R.methodsS3 1.8.1 2020-08-26 [1] CRAN (R 4.0.2)\r\n#> R.oo 1.24.0 2020-08-26 [1] CRAN (R 4.0.2)\r\n#> R.utils 2.10.1 2020-08-26 [1] CRAN (R 4.0.2)\r\n#> R6 2.5.0 2020-10-28 [1] CRAN (R 4.0.3)\r\n#> reprex 2.0.0 2021-04-02 [1] CRAN (R 4.0.5)\r\n#> rlang 0.4.10 2020-12-30 [1] CRAN (R 4.0.3)\r\n#> rmarkdown 2.7 2021-02-19 [1] CRAN (R 4.0.4)\r\n#> sessioninfo 1.1.1 2018-11-05 [1] CRAN (R 4.0.0)\r\n#> stringi 1.5.3 2020-09-09 [1] CRAN (R 4.0.2)\r\n#> stringr 1.4.0 2019-02-10 [1] CRAN (R 4.0.2)\r\n#> styler 1.4.1 2021-03-30 [1] CRAN (R 4.0.4)\r\n#> tibble 3.1.1 2021-04-18 [1] CRAN (R 4.1.0)\r\n#> tidyselect 1.1.1 2021-04-30 [1] CRAN (R 4.0.5)\r\n#> utf8 1.2.1 2021-03-12 [1] CRAN (R 4.0.5)\r\n#> vctrs 0.3.8 2021-04-29 [1] CRAN (R 4.0.5)\r\n#> withr 2.4.2 2021-04-18 [1] CRAN (R 4.0.4)\r\n#> xfun 0.22 2021-03-11 [1] CRAN (R 4.0.4)\r\n#> yaml 2.2.1 2020-02-01 [1] CRAN (R 4.0.0)\r\n#> \r\n#> [1] C:/Users/salbers/R/win-library/4.0\r\n#> [2] C:/Program Files/R/R-4.0.5/library\r\n\r\n```\r\n<font color=\"#172b4d\">I am opening this a) because others may have run into the same issue and b) just in case this is actually a bug. Feel free to close immediately if this isn't the way these are supposed to work. </font>",
        "created_at": "2021-05-07T21:01:31.000Z",
        "updated_at": "2022-07-27T13:21:39.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-07-27T11:01:31.000Z"
    },
    "comments": [
        {
            "created_at": "2021-05-07T21:23:41.543Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12693?focusedCommentId=17341040) by Jonathan Keane (jonkeane):*\nThanks for sending this along! At this moment most aggregation functions like these aren't yet implemented through our dataset compute framework (there's still some work ongoing on the c++ side to enable these, and we anticipate some will be in the next release). \r\n\r\nWe probably should have been a bit more explicit about this in our error messages (e.g. catching the \"non-scalar expression\" error and mentioning that aggregates are not yet supported for datasets) or been a bit more clear in the documentation for `call_function` / `list_compute_functions` that not all compute functions can be used with datasets.\r\n\r\nLooking at your use case, it might be possible to see some benefits by not serializing into R before doing your unique call like below. Though this _will_ cause the dataset to be scanned and read into an arrow table. I wouldn't recommend this as a general work around (since it will be obsolete in 5.0, among other reasons!), but it might help in certain situations depending on what you're working on + where the bottlenecks are.\r\n\r\n```r\n\r\nspecies_table <- ds %>% \r\n  select(Species) %>% \r\n  collect(as_data_frame = FALSE)\r\n\r\n# the `[[1]]` is to take the only column as an array.\r\nunique(species_table[[1]])\r\n```"
        },
        {
            "created_at": "2021-08-11T12:28:10.461Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12693?focusedCommentId=17397315) by Jonathan Keane (jonkeane):*\nI also ran into something similar when trying to find the unique rows in a table:\r\n\r\n```Java\n\r\nlibrary(arrow)\r\nlibrary(dplyr)\r\n\r\ntab <- InMemoryDataset$create(mtcars)\r\n\r\ntab %>% \r\n  select(mpg, gear) %>% \r\n  unique() %>%\r\n  collect()\r\n#> Error in UseMethod(\"collect\"): no applicable method for 'collect' applied to an object of class \"list\"\r\n```\r\n\r\nEven if we don't (yet) have the compute kernel to do this, we should error or warn + pull into R for this"
        },
        {
            "created_at": "2022-07-18T17:34:22.015Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12693?focusedCommentId=17568134) by Neal Richardson (npr):*\nI think we can use the same function as we use for `distinct()` now"
        },
        {
            "created_at": "2022-07-18T18:13:59.639Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12693?focusedCommentId=17568149) by Sam Albers (boshek):*\nBecause this isn't a dplyr function, do you think this would automatically pull the vector into memory?"
        },
        {
            "created_at": "2022-07-18T18:38:53.520Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12693?focusedCommentId=17568162) by Sam Albers (boshek):*\nI also wonder if it even worth implementing this. None (afaik) of the dbplyr backends implement anything for `{}unique(){`}. `distinct()` provides the same functionality. `unique()` falls a bit outside of the dplyr paradigm and I think there would be some expectation to support something like `unique(some_arrow_table$variable)` type syntax. If that syntax wasn't supported then one could still call `unique()` on a whole table but that would duplicate what `distinct()` does."
        },
        {
            "created_at": "2022-07-18T19:03:23.941Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12693?focusedCommentId=17568169) by Neal Richardson (npr):*\n> Because this isn't a dplyr function, do you think this would automatically pull the vector into memory?\r\n\r\nGood call, probably so.\r\n\r\n> I also wonder if it even worth implementing this.\r\n\r\nWell, the original issue reporter seemed to expect that it would work ;)\r\n\r\n> I think there would be some expectation to support something like\u00a0`unique(some_arrow_table$variable)`\r\n\r\nIIRC there is a feature request to support $ on query objects\r\n\r\n> one could still call\u00a0`unique()`\u00a0on a whole table but that would duplicate what\u00a0`distinct()`\u00a0does.\r\n\r\nIf it's not worth implementing, we could add `unique.arrow_dplyr_query` et al. that just raises an error telling you to call distinct() instead. But at that point, we might as well just wire it up to do distinct %>% collect, right?"
        },
        {
            "created_at": "2022-07-18T22:09:04.187Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12693?focusedCommentId=17568225) by Sam Albers (boshek):*\n> Well, the original issue reporter seemed to expect that it would work ;)\r\n\r\nSo foolish he was. \r\n\r\n> feature request to support $ on query objects\r\n\r\nI wasn't able to find a specific ticket for that. I can create one though as I think it might something worth exploring."
        },
        {
            "created_at": "2022-07-27T11:01:31.771Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12693?focusedCommentId=17571842) by Dewey Dunnington (paleolimbot):*\nIssue resolved by pull request 13641\n<https://github.com/apache/arrow/pull/13641>"
        }
    ]
}