{
    "issue": {
        "title": "[C++] NDEBUG required for -fno-rtti",
        "body": "***Note**: This issue was originally created as [ARROW-16876](https://issues.apache.org/jira/browse/ARROW-16876). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSome of the code in checked_cast.h uses `dynamic_cast` unless NDEBUG is defined.\u00a0 Defining NDEBUG affects other C++ functionality, for example it causes `assert` statements to be compiled out of the program.\r\n\r\nIt would be nice if Arrow provided some mechanism for compiling without RTTI (viz. not using dynamic_cast) without requiring NDEBUG to be defined and affecting assertions in other code.\r\n\r\n\u00a0\r\n\r\nWorkaround 1: Compile without neither -fno-rtti nor NDEBUG in DEBUG mode, and with both -fno-rtti and NDEBUG in RELEASE mode.\r\n\r\nWorkaround 2: Include Arrow headers through a project header that defines NDEBUG, has the Arrow include statements, and then undefines NDEBUG.",
        "created_at": "2022-06-22T09:42:22.000Z",
        "updated_at": "2022-06-28T13:53:06.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-06-22T09:47:21.030Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16876?focusedCommentId=17557338) by Antoine Pitrou (apitrou):*\n1) For the record, is there a particular reason for compiling without RTTI?\r\n\r\n2) What does dynamic_cast do if RTTI is disabled?"
        },
        {
            "created_at": "2022-06-22T10:00:19.782Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16876?focusedCommentId=17557342) by Jefferson Carpenter (jcarpenter2):*\n1) I'm compiling without rtti to save on binary size.\u00a0 (Linux build is 15.2MB with RTTI / 15MB without RTTI on GCC 7.3.1, Mac build 11.1MB / 10.7MB on Apple clang version 13.0.0, so not a big difference).\r\n\r\n2) dynamic_cast gives a compile error."
        },
        {
            "created_at": "2022-06-28T13:37:01.368Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16876?focusedCommentId=17559782) by Antoine Pitrou (apitrou):*\nWell, we could hide all uses of `dynamic_cast` behind a macro that would turn it into `static_cast` if RTTI isn't enabled (which apparently can be detected using the `__cpp_rtti` macro).\r\n\r\nBut that must be validated to work, potentially using a dedicated CI job...\r\n\r\ncc `[~lidavidm]`, `[~bkietz]` for opinions."
        },
        {
            "created_at": "2022-06-28T13:53:06.140Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16876?focusedCommentId=17559794) by David Li (lidavidm):*\nIf the savings is that minor, is it worth maintaining the extra configuration?\r\n\r\nIt looks like Parquet heavily uses dynamic_cast + there's one comment noting some compilers refuse to static_cast in a particular case.."
        }
    ]
}