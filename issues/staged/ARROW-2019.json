{
    "issue": {
        "title": "Control the memory allocated for inner vector in LIST",
        "body": "***Note**: This issue was originally created as [ARROW-2019](https://issues.apache.org/jira/browse/ARROW-2019). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWe have observed cases in our external sort code where the amount of memory actually allocated for a record batch sometimes turns out to be more than necessary and also more than what was reserved by the operator for special purposes. Thus queries fail with OOM.\r\n\r\nUsually to control the memory allocated by vector.allocateNew() is to do a setInitialCapacity() and the latter modifies the vector state variables which are then used to allocate memory. However, due to the multiplier of 5 used in List Vector, we end up asking for more memory than necessary. For example, for a value count of 4095, we asked for 128KB of memory for an offset buffer of VarCharVector for a field which was list of varchars.\u00a0\r\n\r\nWe did ((4095 \\* 5) + 1) \\* 4 => 80KB . => 128KB (rounded off to power of 2 allocation).\u00a0\r\n\r\nWe had earlier made changes to setInitialCapacity() of ListVector when we were facing problems with deeply nested lists and decided to use the multiplier only for the leaf scalar vector.\u00a0\r\n\r\nIt looks like there is a need for a specialized setInitialCapacity() for ListVector where the caller dictates the repeatedness.\r\n\r\nAlso, there is another bug in setInitialCapacity() where the allocation of validity buffer doesn't obey the capacity specified in setInitialCapacity().\u00a0",
        "created_at": "2018-01-23T23:02:16.000Z",
        "updated_at": "2018-02-22T18:57:23.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Java",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2018-02-22T18:55:42.000Z"
    },
    "comments": []
}