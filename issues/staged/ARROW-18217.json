{
    "issue": {
        "title": "Multiple Filesystem subclasses are missing an override for Equals",
        "body": "***Note**: This issue was originally created as [ARROW-18217](https://issues.apache.org/jira/browse/ARROW-18217). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nCurrently the `Filesystem` class contains two overloads for the `Equals` method:\r\n\r\n`virtual bool Equals(const FileSystem& other) const = 0;`\r\n`virtual bool Equals(const std::shared_ptr<FileSystem>& other) const`\r\n\r\n{ return Equals(\\*other); }\r\n\r\nThe second is a trivial call to the first for ease of use. The first method is pure virtual and _must_ be overridden by subclasses. The problem is that overriding a single overload of a method also shadows all other overloads. As a result, it is no longer possible to call the `shared_ptr` version of the method. This appears to be the case for the `SubTreeFileSystem` and the `SlowFileSystem` in `filesystem.h` as well as the `S3FileSystem` in `s3fs.h`. There may be other classes with this problem as well, those are just the ones that I noticed. My guess is that what was intended here is to pull the method into the child class's namespace via a using declaration i.e. add `using FileSystem::Equals` to each child class.",
        "created_at": "2022-11-02T00:40:17.000Z",
        "updated_at": "2022-11-02T00:42:56.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": []
}