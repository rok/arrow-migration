{
    "issue": {
        "title": "[Rust] DataFusion \"create_physical_plan\" returns incorrect schema?",
        "body": "***Note**: This issue was originally created as [ARROW-8197](https://issues.apache.org/jira/browse/ARROW-8197). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI am using DataFusion in a situation where I know there will only be a single file.\u00a0 DataFusion currently collects all batches into a vector.\r\n\r\nAs I am writing the data back out I want to work with an iterator instead of a vector.\r\n\r\nI have something as follows:\r\n```java\n\r\nlet plan = ctx.create_logical_plan(&sql).unwrap();\r\nlet plan = ctx.optimize(&plan).unwrap();\r\ndbg!(plan.schema());  // Returns field names\r\nlet plan = ctx.create_physical_plan(&plan, batch_size).unwrap();\r\ndbg!(plan.schema()); // Returns c0, c1, etc\n```\r\nMaybe this is expected after turning the plan into a physical plan?\r\n\r\nI can change the schema of the returned batches, would this be the recommended way to address this or is there something in DataFusion I should leverage to do this?",
        "created_at": "2020-03-24T16:10:27.000Z",
        "updated_at": "2020-03-25T13:42:15.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Component: Rust - DataFusion",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-03-25T13:42:15.000Z"
    },
    "comments": [
        {
            "created_at": "2020-03-24T17:12:35.905Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8197?focusedCommentId=17065976) by Andy Grove (andygrove):*\n\u00a0I ran into this same issue last night and I consider it a bug. The problem code is here:\r\n```java\n\r\nimpl PhysicalExpr for Column {\r\n    /// Get the name to use in a schema to represent the result of this expression\r\n    fn name(&self) -> String {\r\n        format!(\"c{}\", self.index)\r\n    }\r\n \n```\r\nThe physical expression for Column is just an index into the input batch and the name should be the name of the input column. I will probably look at this tonight unless you happen to beat me to it.\r\n\r\n\u00a0\r\n\r\n\u00a0"
        },
        {
            "created_at": "2020-03-24T17:24:32.006Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8197?focusedCommentId=17065997) by Andy Grove (andygrove):*\nWe should probably pass the name into the Column::new() in this code, since the name is available at this time. Note that we probably don't yet have validation to ensure that all fields in a schema are unique? If not, we should add that as well.\r\n```java\n\r\n/// Create a physical expression from a logical expression\r\npub fn create_physical_expr(\r\n    &self,\r\n    e: &Expr,\r\n    input_schema: &Schema,\r\n) -> Result<Arc<dyn PhysicalExpr>> {\r\n    match e {\r\n        Expr::Column(i) => Ok(Arc::new(Column::new(*i))), \n```"
        },
        {
            "created_at": "2020-03-24T19:58:40.918Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8197?focusedCommentId=17066145) by Paddy Horan (paddyhoran):*\nOk, that's basically the conclusion I came to, that Column::new should be updated to receive the name.\u00a0 Then I thought that maybe it was a design decision (I've yet to read your new book, though it's on my list...)"
        },
        {
            "created_at": "2020-03-25T13:42:15.534Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8197?focusedCommentId=17066682) by Andy Grove (andygrove):*\nIssue resolved by pull request 6703\n<https://github.com/apache/arrow/pull/6703>"
        }
    ]
}