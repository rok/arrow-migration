{
    "issue": {
        "title": "[C++] Enable example arrays to be written with a simplified JSON representation",
        "body": "***Note**: This issue was originally created as [ARROW-3303](https://issues.apache.org/jira/browse/ARROW-3303). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIn addition to making it easier to generate random data as described in ARROW-2329, I think it would be useful to reduce some of the boilerplate associated with writing down explicit test cases. The benefits of this will be especially pronounced when writing nested arrays. \r\n\r\nExample code that could be improved this way:\r\n\r\nhttps://github.com/apache/arrow/blob/master/cpp/src/arrow/array-test.cc#L3271\r\n\r\nRather than having a ton of hand-written assertions, we could compare with the expected true dataset. Of course, this itself has to be tested endogenously, but I think we can write enough tests for the JSON parser bit to be able to have confidence in tests that are written with it",
        "created_at": "2018-09-23T19:37:22.000Z",
        "updated_at": "2018-12-10T11:38:59.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2018-12-09T19:28:41.000Z"
    },
    "comments": [
        {
            "created_at": "2018-11-28T14:03:44.389Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3303?focusedCommentId=16701921) by Antoine Pitrou (apitrou):*\nDo you have an idea what the JSON could look like?\r\n\r\nLet's try to sketch examples. Simple int32 array:\r\n```json\n\r\n{\r\n\"type\": \"int32\",\r\n\"values\": [4,5,-1,0]\r\n}\r\n```\r\n\r\nWith nulls:\r\n```json\n\r\n{\r\n\"type\": \"int32\",\r\n\"values\": [0,null,-111,234]\r\n}\r\n```\r\n\r\nA second-granularity timestamp array:\r\n```json\n\r\n{\r\n\"type\": \"timestamp[s]\",\r\n\"values\": [1543409509]\r\n}\r\n```\r\n\r\nA list(float64) array with nulls:\r\n```json\n\r\n{\r\n\"type\": \"list(float64)\",\r\n\"values\": [null, [1.5, 2.5, 3.0], [null, 34.5]]\r\n}\r\n```\r\n\r\nSo the API would look like:\r\n```c++\n\r\nStatus ArrayFromJSON(const std::string& json_string, std::shared_ptr<Array>* out);\r\n```\r\n\r\nAnother possibility would be to pass the type programmatically:\r\n```c++\n\r\nStatus ArrayFromJSON(const DataType*, const std::string& json_string, std::shared_ptr<Array>* out);\r\n```\r\n\r\nIn this case the JSON string would be much simpler, e.g.:\r\n```json\n\r\n[0,null,-111,234]\r\n```\r\n\r\nSo you could have a one-liner or almost:\r\n```c++\n\r\nASSERT_OK(ArrayFromJSON(int64(), \"[0,null,-111,234]\", &array1));\r\nASSERT_OK(ArrayFromJSON(list(int64()), \"[null, [1,2,3], [4, null, 6]]\", &array2));\r\n```\r\n\r\nActually both APIs could be useful, depending on the situation...\r\n"
        },
        {
            "created_at": "2018-11-29T15:35:02.587Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3303?focusedCommentId=16703367) by Wes McKinney (wesm):*\nProbably the last one would be the simplest that would be of value, then you don't have to implement a parser for data types (though at some point, it would be useful to have a string syntax for writing schemas and getting them parsed). In the arrow_testing library we could additionally add some sugar (which uses gtest APIs internally) so that we can write\r\n\r\n```Java\n\r\nauto arr = test::Int64::FromJSON(\"[0, null, 1, 2]\");\r\n```"
        },
        {
            "created_at": "2018-12-09T19:28:41.277Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3303?focusedCommentId=16714070) by Wes McKinney (wesm):*\nIssue resolved by pull request 3084\n<https://github.com/apache/arrow/pull/3084>"
        }
    ]
}