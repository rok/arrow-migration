{
    "issue": {
        "title": "[C++]\u00a0[Parquet] uint32 does not roundtrip?",
        "body": "***Note**: This issue was originally created as [ARROW-13214](https://issues.apache.org/jira/browse/ARROW-13214). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI found that the following does not roundtrip:\r\n\r\n```java\n\r\n[('generated_primitive', DataType(uint32)), ('generated_primitive', DataType(uint32))]\r\n[('generated_primitive_no_batches', DataType(uint32)), ('generated_primitive_no_batches', DataType(uint32))]\r\n[('generated_primitive_zerolength', DataType(uint32)), ('generated_primitive_zerolength', DataType(uint32))]\r\n```\r\n\r\nThe exact code I am using for this\r\n\r\n```java\n\r\nimport os\r\n\r\nimport pyarrow.ipc\r\nimport pyarrow.parquet as pq\r\n\r\n\r\ndef get_file_path(file: str):\r\n    return f\"../testing/arrow-testing/data/arrow-ipc-stream/integration/1.0.0-littleendian/{file}.arrow_file\"\r\n\r\n\r\ndef _expected(file: str):\r\n    return pyarrow.ipc.RecordBatchFileReader(get_file_path(file)).read_all()\r\n\r\n\r\ndef check_file(file):\r\n    expected = _expected(file)\r\n    path = f\"{file}.parquet\"\r\n\r\n    pq.write_table(expected, path, compression=None, write_statistics=False)\r\n\r\n    table = pq.read_table(path)\r\n    os.remove(path)\r\n\r\n    failing = []\r\n    for c1, c2 in zip(expected, table):\r\n        if c1 != c2:\r\n            failing.append((file, c1.type))\r\n    return failing\r\n\r\n\r\nfor file in [\r\n    \"generated_primitive\",\r\n    \"generated_primitive_no_batches\",\r\n    \"generated_primitive_zerolength\",\r\n    \"generated_null\",\r\n    \"generated_null_trivial\",\r\n    \"generated_primitive_large_offsets\",\r\n]:\r\n    failing = check_file(file)\r\n    if failing:\r\n        print(failing)\r\n```\r\n\r\nNote: I generated the same parquet using the experimental parquet2 and the roundtrip succeeds, suggesting that the potential error is in writing.\r\n\r\nUpon further investigation, it seems that the only difference is the type: c1's type is uint32, c2's type is int64.\r\n",
        "created_at": "2021-06-29T19:07:52.000Z",
        "updated_at": "2021-06-29T19:40:57.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Parquet",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-06-29T19:40:57.000Z"
    },
    "comments": [
        {
            "created_at": "2021-06-29T19:24:15.707Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13214?focusedCommentId=17371597) by Antoine Pitrou (apitrou):*\nCan you try passing `version='2.0'` to `pq.write_table` ?\r\n\r\nIf it works, then it's probably just ARROW-12203."
        },
        {
            "created_at": "2021-06-29T19:37:54.901Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13214?focusedCommentId=17371601) by Jorge Leit\u00e3o (jorgecarleitao):*\nit works. Good catch."
        }
    ]
}