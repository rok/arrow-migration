{
    "issue": {
        "title": "[C++] BinaryBuilder doesn't preserve passed in DataType",
        "body": "***Note**: This issue was originally created as [ARROW-13672](https://issues.apache.org/jira/browse/ARROW-13672). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThere is a [constructor](https://github.com/apache/arrow/blob/1430c93f68960e10a50d27f465eb174e76ac06b2/cpp/src/arrow/array/builder_binary.h#L56) that takes a datatype for binary builder but it is discarded.\u00a0 When constructing an Array the type is always the value returned from type() [binary](https://github.com/apache/arrow/blob/1430c93f68960e10a50d27f465eb174e76ac06b2/cpp/src/arrow/array/builder_binary.h#L390)\r\n\r\nIf a consumer of the API wants to have an extension array this prevents them from passing the extension type though.",
        "created_at": "2021-08-19T05:28:43.000Z",
        "updated_at": "2022-07-12T14:04:30.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-12-03T22:14:41.434Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13672?focusedCommentId=17453217) by Supun Kamburugamuva (supun):*\nShould the solution be that we remove passing the type to the constructor?"
        },
        {
            "created_at": "2021-12-04T00:36:10.018Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13672?focusedCommentId=17453257) by David Li (lidavidm):*\n`[~supun]` probably the builder should store the given type and use it in [FinishInternal](https://github.com/apache/arrow/blob/1430c93f68960e10a50d27f465eb174e76ac06b2/cpp/src/arrow/array/builder_binary.h#L317) (and presumably in [type()](https://github.com/apache/arrow/blob/1430c93f68960e10a50d27f465eb174e76ac06b2/cpp/src/arrow/array/builder_binary.h#L390))."
        },
        {
            "created_at": "2021-12-06T16:51:19.072Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13672?focusedCommentId=17454129) by Supun Kamburugamuva (supun):*\nThe BaseBinaryBuilder has a constructor that accepts the type parameter but is not used. I think what the issue says is we should store this type and return it in the type() method.\u00a0\r\n\r\nSomeone using the BaseBinaryBuilder can override these two methods and achieve the same. So I'm thinking is there a value in implementing this? The FinishInternal is implemented correctly as it uses the type() method to get the type in a derived class.\u00a0"
        },
        {
            "created_at": "2021-12-06T17:52:14.216Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13672?focusedCommentId=17454150) by David Li (lidavidm):*\nUsers probably wouldn't use BaseBinaryBuilder directly, it's referenced because it's the base implementation for BinaryBuilder/StringBuilder/etc. I don't _think_ we should require users to override methods just to do something that the API suggests is already implemented. Also note [NumericBuilder](https://github.com/apache/arrow/blob/85b276dd13512d6676a0bc2dc703a0f9b6934236/cpp/src/arrow/array/builder_primitive.h#L84-L85) does store and use the given type.\r\n\r\nAs noted in the JIRA description, there is a use case for this: creating extension arrays (which have a custom logical type on top of an underlying physical type). Sure, the user could manually change the type after constructing the array or manually assemble the array, but that is more work."
        },
        {
            "created_at": "2022-07-12T14:04:30.037Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13672?focusedCommentId=17565660) by @toddfarmer:*\nThis issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon."
        }
    ]
}