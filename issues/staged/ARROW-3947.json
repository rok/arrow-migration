{
    "issue": {
        "title": "[Python] query distinct values of a given partition from a ParquetDataset",
        "body": "***Note**: This issue was originally created as [ARROW-3947](https://issues.apache.org/jira/browse/ARROW-3947). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nRight now the values of a given partition from a `ParquetDataset` is buried inside `ParquetDataset.pieces`, a bit inconvenient for the user to dig out this information. A helper function/method to perform this task in `ParquetDataset` class would be very helpful for the users.\r\n\r\nA pure personal opinion on the name of this method: `ParquetDataset.select_distinct()` with partition_name as the positional arg, to resemble SQL `SELECT DISTINCT column FROM table`.\r\n\r\nI'm not sure how to contribute here on Jira, so I created this [GitHub Gist ](https://gist.github.com/xujiboy/c3fcc47f720ed9adf2260c5d0ba8aed2)as an possible solution for this problem.",
        "created_at": "2018-12-06T07:29:24.000Z",
        "updated_at": "2022-09-23T14:09:53.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2020-11-12T17:21:12.069Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3947?focusedCommentId=17230806) by Ben Kietzman (bkietz):*\n`[~XiUpsilon]` when partition columns are selected on read they are materialized as dictionary arrays which include all unique values of the partition keys, so would it be sufficient to read from the ParquetDataset with only the partition columns selected?"
        },
        {
            "created_at": "2022-09-23T14:09:26.279Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3947?focusedCommentId=17608770) by Joris Van den Bossche (jorisvandenbossche):*\nNote that with the latest version of the dataset API, there is a `partitioning` attribute (instead of `pieces`), which can also be used to retrieve this information:\r\n\r\n```python\n\r\nimport pyarrow as pa\r\nimport pyarrow.parquet as pq\r\n\r\ntable = pa.table({'a': range(9), 'part': ['a', 'b', 'c']*3})\r\npq.write_to_dataset(table, \"test_partitioned\", partition_cols=[\"part\"])\r\n\r\ndataset = pq.ParquetDataset(\"test_partitioned\", use_legacy_dataset=False)\r\n\r\n>>> dataset.partitioning\r\n<pyarrow._dataset.HivePartitioning at 0x7fe760a1f580>\r\n\r\n>>> dataset.partitioning.dictionaries\r\n[<pyarrow.lib.StringArray object at 0x7fe740b6fdc0>\r\n [\r\n   \"a\",\r\n   \"b\",\r\n   \"c\"\r\n ]]\r\n```\r\n\r\nPersonally, I think this is sufficient API around this, but we should certainly do a better job documenting this."
        }
    ]
}