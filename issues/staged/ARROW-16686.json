{
    "issue": {
        "title": "[C++] Use shared_ptr with FunctionOptions",
        "body": "***Note**: This issue was originally created as [ARROW-16686](https://issues.apache.org/jira/browse/ARROW-16686). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n\u00a0\r\n\r\nUpdate the usage of `FunctionOptions\\*` to `shared_ptr`\u00a0\r\n```java\n\r\n/// \\brief Configure a grouped aggregation\r\nstruct ARROW_EXPORT Aggregate {  \r\n/// the name of the aggregation function  \r\nstd::string function;\r\n/// options for the aggregation function  \r\nconst FunctionOptions* options;\r\n}; \n```\r\nNote: description edited after discussion.\r\n\r\n\u00a0",
        "created_at": "2022-05-30T10:45:58.000Z",
        "updated_at": "2022-06-21T19:48:47.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-06-21T19:48:47.000Z"
    },
    "comments": [
        {
            "created_at": "2022-05-30T12:11:47.508Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16686?focusedCommentId=17543916) by Antoine Pitrou (apitrou):*\nWhy is that? The caller can keep ownership of the pointer. \r\n"
        },
        {
            "created_at": "2022-05-31T21:04:35.652Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16686?focusedCommentId=17544605) by Weston Pace (westonpace):*\nThis probably came from me.  The caller can do this but I think it is unintuitive for function options.  Typically we receive options by value and keep a copy of them for the duration of the ExecPlan.\r\n\r\nThere are some options that are more \"infrastructure\" (e.g. executor, memory pool) where long term storage is inevitable.  Taking a raw pointer is the correct approach for these.\r\n\r\nSo that just leaves these middle ground types which are pointers only because we need polymorphism.  In this case I think it would be surprising for the user to have to create and maintain the object for the duration of the exec plan.  As an example we can look at https://github.com/apache/arrow/blob/50fbfa14aa612d638d54925ce9b5eaaaa7a9dd4b/r/src/compute-exec.cpp#L238 where we are currently doing the wrong thing.\r\n\r\nThe options object is created, and it is added to a \"keep_alives\" vector, but the keep_alives vector itself is not actually kept alive.  We only get away with it at the moment because no aggregate function needs options.  Rather than keep this burden on the R developer it seems more intuitive to take in a unique_ptr so we maintain the value semantics we use for other fields in options types.\r\n\r\nThe \"infrastructure\" would still be an exception."
        },
        {
            "created_at": "2022-06-01T07:37:28.731Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16686?focusedCommentId=17544748) by Antoine Pitrou (apitrou):*\nShould it be a shared_ptr for flexibility, then?"
        },
        {
            "created_at": "2022-06-01T21:20:31.853Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16686?focusedCommentId=17545162) by Weston Pace (westonpace):*\nYes, in retrospect, shared_ptr makes more sense for a public API."
        },
        {
            "created_at": "2022-06-21T19:48:47.966Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16686?focusedCommentId=17557081) by David Li (lidavidm):*\nIssue resolved by pull request 13344\n<https://github.com/apache/arrow/pull/13344>"
        }
    ]
}