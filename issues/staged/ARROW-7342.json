{
    "issue": {
        "title": "[Java] offset buffer for vector of variable-width type with zero value count is empty",
        "body": "***Note**: This issue was originally created as [ARROW-7342](https://issues.apache.org/jira/browse/ARROW-7342). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI am reporting what I think might be two related bugs in `org.apache.arrow.vector.BaseVariableWidthVector`\r\n1. The offset buffer is initialized as empty. I expect that it to have 4 bytes that represent the integer zero.\n1. The `getBufferSize` method returns 0 when value count is zero, instead of 4.\n   \n   Compare to the pyarrow implementation, which I believe correctly populates the offset buffer:\n   ```java\n   \n   >>> import pyarrow as pa\n   >>> array = pa.array([], type=pa.binary())\n   >>> array <pyarrow.lib.BinaryArray object at 0x7f4f68b858e8>\n   []\n   >>> print([b.hex().decode() for b in array.buffers()])\n   ['', '00000000', '']\n   \n   ```\n   \u00a0",
        "created_at": "2019-12-06T19:22:55.000Z",
        "updated_at": "2021-01-09T03:36:29.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Java",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2019-12-07T04:26:16.300Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7342?focusedCommentId=16990318) by Jacques Nadeau (jnadeau):*\nI'm not sure if there is a \"right\" (or at least well-specified) way. The Java perspective is empty vectors shouldn't have any data. There is no point in only having one offset since it doesn't mean anything. This also means communicating an empty vector on the wire is zero data as opposed to having to communicate 4 bytes of useless data."
        },
        {
            "created_at": "2020-06-18T14:36:47.172Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7342?focusedCommentId=17139465) by Steve M. Kim (chairmank):*\nThe Java implementation is inconsistent with both the memory layout specification (<https://arrow.apache.org/docs/format/Columnar.html>) and the cpp implementation.\r\n\r\nI reported this issue because I encountered errors when passing buffers between the Java implementation and the cpp/python implementation. To guard against these errors, I had to check this special case:\r\n```java\n\r\nif ((vector instanceof VariableWidthVector) && (vector.getValueCount() == 0)) {\r\n   // special case\r\n}\n```\r\nThis special-case check is not obvious and is easy to forget if tests do not cover zero-length vectors.\r\n\r\nI don't think that the added complexity and risk of errors is worth saving 4 bytes.\r\n\r\n\u00a0"
        },
        {
            "created_at": "2021-01-09T03:36:29.610Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7342?focusedCommentId=17261744) by Steve M. Kim (chairmank):*\nThis incompatibility is a potential source of bugs when sharing buffers between Java and C++ via JNI, as proposed for\r\n\r\n- https://issues.apache.org/jira/browse/ARROW-6720\n  \n- https://issues.apache.org/jira/browse/ARROW-7272\n  \n- https://issues.apache.org/jira/browse/ARROW-7808\n  \n  \u00a0\n  \n  \u00a0"
        }
    ]
}