{
    "issue": {
        "title": "[Python] Storing negative and positive zeros in dictionary array",
        "body": "***Note**: This issue was originally created as [ARROW-10211](https://issues.apache.org/jira/browse/ARROW-10211). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nHypothesis has discovered a corner case when converting a dictionary array with float values to a pandas series:\r\n\r\n```python\n\r\narr = pa.array([0., -0.], type=pa.dictionary(pa.int8(), pa.float32()))\r\narr.to_pandas()\r\n```\r\n\r\nraises: \r\n\r\n```python\n\r\ncategories = Float64Index([0.0, -0.0], dtype='float64'), fastpath = False\r\n\r\n    @staticmethod\r\n    def validate_categories(categories, fastpath: bool = False):\r\n        \"\"\"\r\n        Validates that we have good categories\r\n\r\n        Parameters\r\n        ----------\r\n        categories : array-like\r\n        fastpath : bool\r\n            Whether to skip nan and uniqueness checks\r\n\r\n        Returns\r\n        -------\r\n        categories : Index\r\n        \"\"\"\r\n        from pandas.core.indexes.base import Index\r\n\r\n        if not fastpath and not is_list_like(categories):\r\n            raise TypeError(\r\n                f\"Parameter 'categories' must be list-like, was {repr(categories)}\"\r\n            )\r\n        elif not isinstance(categories, ABCIndexClass):\r\n            categories = Index(categories, tupleize_cols=False)\r\n\r\n        if not fastpath:\r\n\r\n            if categories.hasnans:\r\n                raise ValueError(\"Categorical categories cannot be null\")\r\n\r\n            if not categories.is_unique:\r\n>               raise ValueError(\"Categorical categories must be unique\")\r\nE               ValueError: Categorical categories must be unique\r\n```\r\n\r\nThe arrow array looks like the following:\r\n\r\n```Java\n\r\n-- dictionary:\r\n  [\r\n    0,\r\n    -0\r\n  ]\r\n-- indices:\r\n  [\r\n    0,\r\n    1\r\n  ]\r\n```\r\n\r\nSo we hash the negative and positive zeroes to different values so pandas/numpy is unable to convert it to a categorical series since the values as not unique:\r\n\r\n```Java\n\r\nIn [2]: np.array(-0.) == np.array(0.)\r\nOut[2]: True\r\n\r\nIn [3]: -0.0 == 0.0\r\nOut[3]: True\r\n\r\nIn [4]: np.unique(np.array([0.0, -0.0]))\r\nOut[4]: array([0.])\r\n```\r\n\r\nAlthough `0.0` and `-0.0` are different values they are considered equal according to the standard.",
        "created_at": "2020-10-07T11:22:35.000Z",
        "updated_at": "2020-10-07T11:58:39.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2020-10-07T11:28:37.581Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10211?focusedCommentId=17209484) by Antoine Pitrou (apitrou):*\nWhat is `validate_categories`? Is it in PyArrow?"
        },
        {
            "created_at": "2020-10-07T11:34:21.886Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10211?focusedCommentId=17209486) by Joris Van den Bossche (jorisvandenbossche):*\nNo, it's code from pandas, but the code itself is not that important here: it's just the fact that pandas requires categories (dictionary values) to be unique, and that python/numpy/pandas regards -0 and 0 as equal when it comes to use in hash-table / \"unique\" operations. \r\nAnd because pyarrow does **not** see -0 and 0 as equal in the dictionary encoding step, that gives a roundtrip problem with pandas.\r\n\r\nPersonally, I would update our hashing / encoding to also see -0 and 0 as equal values. "
        },
        {
            "created_at": "2020-10-07T11:35:25.084Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10211?focusedCommentId=17209487) by Joris Van den Bossche (jorisvandenbossche):*\nAnother place where this comes up (which is not independent from the pandas roundtrip issue):\r\n\r\n```Java\n\r\nIn [24]: pa.array([0., -0.]).unique()\r\nOut[24]: \r\n<pyarrow.lib.DoubleArray object at 0x7f633bb075e8>\r\n[\r\n  0,\r\n  -0\r\n]\r\n```"
        },
        {
            "created_at": "2020-10-07T11:36:15.211Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10211?focusedCommentId=17209488) by Antoine Pitrou (apitrou):*\nIf we treat 0 and -0 as equal, then the categorization will lose information. I believe Arrow has the right semantics here."
        },
        {
            "created_at": "2020-10-07T11:36:42.780Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10211?focusedCommentId=17209489) by Antoine Pitrou (apitrou):*\nAlso, I have to ask: how often do people actually use categoricals for floating-point values?"
        },
        {
            "created_at": "2020-10-07T11:49:51.799Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10211?focusedCommentId=17209495) by Joris Van den Bossche (jorisvandenbossche):*\n> If we treat 0 and -0 as equal, then the categorization will lose information\r\n\r\nTo be clear, we already treat 0 and -0 equal in other situations:\r\n\r\n```Java\n\r\nIn [25]: a1 = pa.array([0., -0.])\r\n\r\nIn [26]: a2 = pa.array([-0., 0.])\r\n\r\nIn [27]: a1.equals(a2)\r\nOut[27]: True\r\n\r\nIn [28]: import pyarrow.compute as pc\r\n\r\nIn [29]: pc.equal(a1, a2)\r\nOut[29]: \r\n<pyarrow.lib.BooleanArray object at 0x7f633bad7288>\r\n[\r\n  true,\r\n  true\r\n]\r\n```\r\n\r\n(of course that are other operations, so that doesn't mean we need to use the same semantics for encoding/unique).\r\n\r\nI don't think many people use floating points values in dictionaries/categoricals. And personally, I don't care that much about the pandas conversion / python roundtrip in this case. It can perfectly be one of the exceptions on roundtrip (it's in the end pandas that is more strict as arrow in this case).  \r\nI think it is rather the underlying issue that this test case brought up that is interesting: should our hashing code regard 0 and \\~~0 as equal or not? (since that impacts actual pyarrow functionality: dictionary encoding, unique, .., independent from arrow<~~>python conversions). \r\n\r\nNow, I don't have a strong opinion on this last aspect, though. I was mainly pointing out that python/numpy/pandas do treat them as equal also in hash/unique contexts. But eg I checked with Julia, and they keep 0 and -0 as distinct values (while still evaluating them equal in `==`, i.e. the same behaviour as Arrow currently has).\r\n\r\n"
        },
        {
            "created_at": "2020-10-07T11:52:17.984Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10211?focusedCommentId=17209497) by Antoine Pitrou (apitrou):*\nWell, sure, they are equal, but they are not the same. Conversely, I would expect dictionary-encoding of NaNs to collapse all NaN as a single dictionary entry, even though they are not equal as per IEEE.\r\n\r\n"
        },
        {
            "created_at": "2020-10-07T11:58:39.419Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10211?focusedCommentId=17209499) by Joris Van den Bossche (jorisvandenbossche):*\n> Conversely, I would expect dictionary-encoding of NaNs to collapse all NaN as a single dictionary entry, even though they are not equal as per IEEE.\r\n\r\nThat's also what we do:\r\n\r\n```Java\n\r\nIn [30]: pa.array([0., -0., np.nan, np.nan]).unique()\r\nOut[30]: \r\n<pyarrow.lib.DoubleArray object at 0x7f633bad63a8>\r\n[\r\n  0,\r\n  -0,\r\n  nan\r\n]\r\n```\r\n\r\nand eg Julia and pandas (regarding the NaNs) do the same (numpy not, though, they keep the distinct NaNs ..)"
        }
    ]
}