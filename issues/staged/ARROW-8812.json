{
    "issue": {
        "title": "[Python] Column names of type CategoricalIndex fails to convert back to pandas",
        "body": "***Note**: This issue was originally created as [ARROW-8812](https://issues.apache.org/jira/browse/ARROW-8812). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen columns are of type `CategoricalIndex`, saving and reading the table back causes a `TypeError: data type \"categorical\" not understood`:\r\n```python\n\r\nimport pandas as pd\r\nfrom pyarrow import parquet, Table\r\n\r\nbase_df = pd.DataFrame([['foo', 'j', \"1\"],\r\n                        ['bar', 'j', \"1\"],\r\n                        ['foo', 'j', \"1\"],\r\n                        ['foobar', 'j', \"1\"]],\r\n                       columns=['my_cat', 'var', 'for_count'])\r\n\r\nbase_df['my_cat'] = base_df['my_cat'].astype('category')\r\n\r\ndf = (\r\n    base_df\r\n    .groupby([\"my_cat\", \"var\"], observed=True)\r\n    .agg({\"for_count\": \"count\"})\r\n    .rename(columns={\"for_count\": \"my_cat_counts\"})\r\n    .unstack(level=\"my_cat\", fill_value=0)\r\n)\r\n\r\nprint(df)\r\n```\r\nThe resulting data frame looks something like this:\r\n\n|\u00a0|my_cat_counts|\u00a0|\u00a0|\r|\n|-|-|-|-|-|\n|my_cat|foo|bar|foobar|\r|\n|var|\u00a0|\u00a0|\u00a0|\r|\n|j|2|1|1|\r<br>\r<br>Then, writing and reading causes the `KeyError`:\r<br>```python<br>\r<br>parquet.write_table(Table.from_pandas(df), \"test.pqt\")\r<br>parquet.read_table(\"test.pqt\").to_pandas()\r<br>> TypeError: data type \"categorical\" not understood\r<br>```\r<br>In the example, the column is also a MultiIndex, but that isn't the problem:\r<br>```python<br>\r<br>df.columns = df.columns.get_level_values(1)\r<br>parquet.write_table(Table.from_pandas(df), \"test.pqt\")\r<br>parquet.read_table(\"test.pqt\").to_pandas()\r<br>> TypeError: data type \"categorical\" not understood\r<br>```\r<br>This is the workaround [suggested on stackoverflow](https://stackoverflow.com/questions/55749399/how-to-fix-the-issue-of-categoricalindex-column-in-pandas):\r<br>```python<br>\r<br>df.columns = pd.Index(list(df.columns)) # suggested fix for the time being\r<br>parquet.write_table(Table.from_pandas(df), \"test.pqt\")\r<br>parquet.read_table(\"test.pqt\").to_pandas() # no error\r<br>```\r<br>Are there any plans to support the pattern described here in the future?|\n",
        "created_at": "2020-05-15T08:49:18.000Z",
        "updated_at": "2020-05-20T14:50:03.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2020-05-20T14:50:03.628Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8812?focusedCommentId=17112307) by Joris Van den Bossche (jorisvandenbossche):*\n`[~jonas-nelle]` thanks for the report!\r\n\r\nSo I don't think it will be possible to fully support roundtripping Categorical column names. This is because in Arrow, the column names are just strings, and not an actual type. We store the original pandas columns' type in the metadata, which we use to do an attempt to restore the original column names. This way basic types can be restored. But for a Categorical, you in principle also need to know the exact categories, which are not saved in the metadata. \r\n(and note, this differs for row indexes: those are stored as actual columns in the pyarrow Table, and thus have a proper type)\r\n\r\nThat said, pyarrow should certainly be able to fall back to the plain values, instead of raising an error. That's probably the better behaviour.\r\n\r\n\r\n"
        }
    ]
}