{
    "issue": {
        "title": "[C++] Add_kernel not commutative (timestamps & duration maths)",
        "body": "***Note**: This issue was originally created as [ARROW-15919](https://issues.apache.org/jira/browse/ARROW-15919). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nA + B != B + A when it comes to adding duration to timestamp, for example. \r\n\r\nShould `add(timestamp, duration) == add(duration, timestamp)`? Or, in other words, should the order matter?\r\n\r\nThis has surfaced in R when creating some of the lubridate bindings - see non-lubridate example below\r\n\r\n```r\n\r\na <- ymd(\"2009-08-03\", tz = \"America/Chicago\")\r\na_array <- Array$create(rep(a, 12))\r\n\r\nb_array <- Array$create((1:12)*86400L)$cast(time32(unit = \"s\")) - \r\n  Array$create(rep(0L, 12))$cast(time32(unit = \"s\"))\r\n\r\na_array\r\na_array\r\nArray\r\n<timestamp[us, tz=America/Chicago]>\r\n[\r\n  2009-08-03 05:00:00.000000,\r\n  2009-08-03 05:00:00.000000,\r\n  2009-08-03 05:00:00.000000,\r\n  2009-08-03 05:00:00.000000,\r\n  2009-08-03 05:00:00.000000,\r\n  2009-08-03 05:00:00.000000,\r\n  2009-08-03 05:00:00.000000,\r\n  2009-08-03 05:00:00.000000,\r\n  2009-08-03 05:00:00.000000,\r\n  2009-08-03 05:00:00.000000,\r\n  2009-08-03 05:00:00.000000,\r\n  2009-08-03 05:00:00.000000\r\n]\r\n\r\nb_array\r\nArray\r\n<duration[s]>\r\n[\r\n  86400,\r\n  172800,\r\n  259200,\r\n  345600,\r\n  432000,\r\n  518400,\r\n  604800,\r\n  691200,\r\n  777600,\r\n  864000,\r\n  950400,\r\n  1036800\r\n]\r\n\r\na_array + b_array\r\nArray\r\n<timestamp[us, tz=America/Chicago]>\r\n[\r\n  2009-08-04 05:00:00.000000,\r\n  2009-08-05 05:00:00.000000,\r\n  2009-08-06 05:00:00.000000,\r\n  2009-08-07 05:00:00.000000,\r\n  2009-08-08 05:00:00.000000,\r\n  2009-08-09 05:00:00.000000,\r\n  2009-08-10 05:00:00.000000,\r\n  2009-08-11 05:00:00.000000,\r\n  2009-08-12 05:00:00.000000,\r\n  2009-08-13 05:00:00.000000,\r\n  2009-08-14 05:00:00.000000,\r\n  2009-08-15 05:00:00.000000\r\n]\r\n\r\nb_array + a_array\r\n Error: NotImplemented: Function 'add_checked' has no kernel matching input types (array[duration[us]], array[timestamp[us, tz=America/Chicago]])\r\n/Users/dragos/Documents/arrow/cpp/src/arrow/compute/function.cc:231 DispatchBest(&inputs)\r\n```",
        "created_at": "2022-03-11T16:15:37.000Z",
        "updated_at": "2022-03-21T19:01:44.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: task"
        ],
        "closed": true,
        "closed_at": "2022-03-21T13:48:07.000Z"
    },
    "comments": [
        {
            "created_at": "2022-03-11T16:35:51.881Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15919?focusedCommentId=17505001) by Drago\u0219 Moldovan-Gr\u00fcnfeld (dragosmg):*\n`[~rokm]` I think this might be the case with some of the other temporal arithmetic kernels too."
        },
        {
            "created_at": "2022-03-11T16:41:49.601Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15919?focusedCommentId=17505002) by Rok Mihevc (rokm):*\nLooking at the code this probably holds for add/subtract/subtract_checked as well."
        },
        {
            "created_at": "2022-03-11T16:51:07.943Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15919?focusedCommentId=17505008) by Drago\u0219 Moldovan-Gr\u00fcnfeld (dragosmg):*\nSuper. Thanks for taking this on. "
        },
        {
            "created_at": "2022-03-11T17:12:52.113Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15919?focusedCommentId=17505025) by Drago\u0219 Moldovan-Gr\u00fcnfeld (dragosmg):*\nNot sure how this would look like for subtract since it is not commutative (and it might not make sense to subtract a timestamp out of a duration) "
        },
        {
            "created_at": "2022-03-11T17:56:29.726Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15919?focusedCommentId=17505042) by Rok Mihevc (rokm):*\nYeah I was just thinking subtract doesn't make sense. Thanks for pointing it out."
        },
        {
            "created_at": "2022-03-11T18:04:03.583Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15919?focusedCommentId=17505045) by Drago\u0219 Moldovan-Gr\u00fcnfeld (dragosmg):*\nAs a general remark: Would it make sense for some of the operations involving durations to work with scalars? For example 2 \\* duration -> duration. Extending the example in description:\r\n```r\n\r\n> b_array * 2L\r\n Error: NotImplemented: Function 'multiply_checked' has no kernel matching input types (array[duration[s]], scalar[int32])\r\n/Users/dragos/Documents/arrow/cpp/src/arrow/compute/function.cc:231 DispatchBest(&inputs) \r\n > 2L * b_array\r\n Error: NotImplemented: Function 'multiply_checked' has no kernel matching input types (scalar[int32], array[duration[s]])\r\n/Users/dragos/Documents/arrow/cpp/src/arrow/compute/function.cc:231 DispatchBest(&inputs) \r\n```"
        },
        {
            "created_at": "2022-03-11T18:17:56.040Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15919?focusedCommentId=17505050) by Rok Mihevc (rokm):*\nMultiply works cumulatively with int64. I'm not sure we want int32 bit since durations are always int64. Odd that this is not handled automatically by DispatchBest. I'll check."
        },
        {
            "created_at": "2022-03-21T13:48:07.016Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15919?focusedCommentId=17509894) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 12612\n<https://github.com/apache/arrow/pull/12612>"
        }
    ]
}