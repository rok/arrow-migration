{
    "issue": {
        "title": "[C++] IPC/Feather decompression broken for nested arrays",
        "body": "***Note**: This issue was originally created as [ARROW-8860](https://issues.apache.org/jira/browse/ARROW-8860). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen writing a table with a Struct typed column, this is read back with garbage values when using compression (which is the default):\r\n\r\n```python\n\r\n>>>  table = pa.table({'col': pa.StructArray.from_arrays([[0, 1, 2], [1, 2, 3]], names=[\"f1\", \"f2\"])})\r\n\r\n# roundtrip through feather\r\n>>> feather.write_feather(table, \"test_struct.feather\")\r\n>>> table2 = feather.read_table(\"test_struct.feather\")\r\n\r\n>>> table2.column(\"col\")\r\n<pyarrow.lib.ChunkedArray object at 0x7f0b0c4d7728>\r\n[\r\n  -- is_valid: all not null\r\n  -- child 0 type: int64\r\n    [\r\n      24,\r\n      1261641627085906436,\r\n      1369095386551025664\r\n    ]\r\n  -- child 1 type: int64\r\n    [\r\n      24,\r\n      1405756815161762308,\r\n      281479842103296\r\n    ]\r\n]\r\n```\r\n\r\nWhen not using compression, it is read back correctly:\r\n\r\n```python\n\r\n>>> feather.write_feather(table, \"test_struct.feather\", compression=\"uncompressed\")                                                                                                                           \r\n>>> table2 = feather.read_table(\"test_struct.feather\")                                                                                                                                                        \r\n\r\n>>> table2.column(\"col\")                                                                                                                                                                                      \r\n<pyarrow.lib.ChunkedArray object at 0x7f0b0e466778>\r\n[\r\n  -- is_valid: all not null\r\n  -- child 0 type: int64\r\n    [\r\n      0,\r\n      1,\r\n      2\r\n    ]\r\n  -- child 1 type: int64\r\n    [\r\n      1,\r\n      2,\r\n      3\r\n    ]\r\n]\r\n```\r\n",
        "created_at": "2020-05-19T15:38:15.000Z",
        "updated_at": "2020-06-12T21:13:50.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-06-11T10:14:22.000Z"
    },
    "comments": [
        {
            "created_at": "2020-05-20T08:21:00.564Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8860?focusedCommentId=17111912) by Joris Van den Bossche (jorisvandenbossche):*\nThe same happens for list types, so I suppose it is generally for nested types (see ARROW-8868 report).\r\n\r\nWhen using a larger table, you can also get an error when reading:\r\n\r\n```Java\n\r\n>>> table = pa.table({'col': pa.StructArray.from_arrays([[0, 1, 2]*10000, [1, 2, 3]*10000], names=[\"f1\", \"f2\"])})  \r\n>>> feather.write_feather(table, \"test_struct.feather\") \r\n>>> table2 = feather.read_table(\"test_struct.feather\")   \r\n...\r\nArrowInvalid: Column 0: In chunk 0: Invalid: Struct child array #0 invalid: Invalid: Buffer #1 too small in array of type int64 and length 30000: expected at least 240000 byte(s), got 1049\r\n```\r\n\r\nSo it seems it is not decompressing the child arrays?\r\n\r\n"
        },
        {
            "created_at": "2020-05-20T08:52:36.273Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8860?focusedCommentId=17111946) by Joris Van den Bossche (jorisvandenbossche):*\nIt seems we only decompress the `ArrayData->buffers`, which I think does not include child data? (`ArrayData->child_data`\r\n\r\nhttps://github.com/apache/arrow/blob/master/cpp/src/arrow/ipc/reader.cc#L352"
        },
        {
            "created_at": "2020-06-11T10:14:22.146Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8860?focusedCommentId=17133125) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 7233\n<https://github.com/apache/arrow/pull/7233>"
        }
    ]
}