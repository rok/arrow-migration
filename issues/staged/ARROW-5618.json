{
    "issue": {
        "title": "[C++] [Parquet] Using deprecated Int96 storage for timestamps triggers integer overflow in some cases",
        "body": "***Note**: This issue was originally created as [ARROW-5618](https://issues.apache.org/jira/browse/ARROW-5618). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen storing Arrow timestamps in Parquet files using the Int96 storage format, certain combinations of array lengths and validity bitmasks cause an integer overflow error on read.\u00a0 It's not immediately clear whether the Arrow/Parquet writer is storing zeroes when it should be storing positive values or the reader is attempting to calculate a nanoseconds value inappropriately from zeroed inputs (perhaps missing the null bit flag).\u00a0 Also not immediately clear why only certain length columns seem to be affected.\r\n\r\nProbably the quickest way to reproduce this undefined behavior is to alter the existing unit test UseDeprecatedInt96 (in file .../arrow/cpp/src/parquet/arrow/arrow-reader-writer-test.cc) by quadrupling its column lengths (repeating the same values), followed by 'make unittest' using clang-7 with sanitizers enabled.\u00a0 (Here's a patch applicable to current master that changes the test as described: [1]; I used the following cmake command to build my environment: [2].)\u00a0 You should get a log something like [3].\u00a0 If requested, I'll see if I can put together a stand-alone minimal test case that induces the behavior.\r\n\r\nThe quick-hack at [4] will prevent integer overflows, but this is only included to confirm the proximate cause of the bug: the Julian days field of the Int96 appears to be zero, when a strictly positive number is expected.\r\n\r\nI've assigned the issue to myself and I'll start looking into the root cause of this.\r\n\r\n[1] https://gist.github.com/tpboudreau/b6610c13cbfede4d6b171da681d1f94e\r\n[2] https://gist.github.com/tpboudreau/59178ca8cb50a935aab7477805aa32b9\r\n[3] https://gist.github.com/tpboudreau/0c2d0a18960c1aa04c838fa5c2ac7d2d\r\n[4] https://gist.github.com/tpboudreau/0993beb5c8c1488028e76fb2ca179b7f",
        "created_at": "2019-06-15T20:22:27.000Z",
        "updated_at": "2022-08-27T14:41:45.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-09-18T11:06:06.000Z"
    },
    "comments": [
        {
            "created_at": "2019-06-15T20:33:19.881Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5618?focusedCommentId=16864850) by TP Boudreau (tpboudreau):*\nI marked this issue as minor, because the defect does not appear to produce erroneous results.\u00a0 Tests that trigger UB succeed in all environments except those where the library is built with the UB sanitizer enabled."
        },
        {
            "created_at": "2019-08-28T19:31:11.098Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5618?focusedCommentId=16918032) by TP Boudreau (tpboudreau):*\nUgh, sorry, forgot all about this PR and the comment from earlier this month slipped through the cracks.\r\n\r\nI'll revisit this issue sometime this week.\r\n\r\n"
        },
        {
            "created_at": "2019-08-30T14:43:41.743Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5618?focusedCommentId=16919611) by TP Boudreau (tpboudreau):*\n(Sorry if this is a duplicate comment \u2013 first attempt doesn't seem to have posted.)\r\n\r\nThis is issue fell through the cracks on my end \u2013 I'll look into it this weekend."
        },
        {
            "created_at": "2022-08-27T14:41:45.303Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5618?focusedCommentId=17585826) by @toddfarmer:*\nTransitioning issue from Resolved to Closed to based on resolution field value."
        }
    ]
}