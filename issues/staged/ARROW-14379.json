{
    "issue": {
        "title": "[R] Create a custom extension of list that stores row-level metadata",
        "body": "***Note**: This issue was originally created as [ARROW-14379](https://issues.apache.org/jira/browse/ARROW-14379). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSince lists can be nested, we should be able store each element as something like `list(value = \"foo\", attributes = list(attr1 = TRUE, attr2 = \"baz\"))` and then we can reconstitute that in the R conversion to transfer the attributes element to attributes.\r\n\r\nThis will be more efficient (since we get compression on the column + metadata/attributes) and we also will be able to filter these + use them in datasets since each row has all of the information about itself that it needs to roundtrip.\r\n\r\nThis would get us SF columns for free",
        "created_at": "2021-10-19T13:29:37.000Z",
        "updated_at": "2022-10-26T20:29:41.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: task"
        ],
        "closed": true,
        "closed_at": "2022-10-26T20:29:41.000Z"
    },
    "comments": [
        {
            "created_at": "2022-04-27T21:17:23.000Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14379?focusedCommentId=17529086) by Dewey Dunnington (paleolimbot):*\nAre there examples other than sf columns where this is relevant? It would be possible to make a generic list extension type that just calls `serialize()` on each element but it would probably be slow and we probably want to encourage other solutions. The other example I can think of is a list of models, maybe, for which the `broom::glance()` or `broom::tidy()` representation would fit in to Arrow format much better."
        },
        {
            "created_at": "2022-04-27T21:22:35.664Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14379?focusedCommentId=17529089) by Weston Pace (westonpace):*\nNaive question but why not use a struct array with 3 columns, `value`, `attr1`, and `attr2`?"
        },
        {
            "created_at": "2022-04-27T22:32:10.126Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14379?focusedCommentId=17529106) by Jonathan Keane (jonkeane):*\nThe main motivation was sf columns here. I don't know of others off the top of my head that have element-level attributes other than sf and like you mention models. If the list is small enough, we can implement each of those (and have already made it pretty easy for others to implement their own versions!). I'm fine closing this as won't do for now unless|until we find a real usecase.\r\n\r\nIn response to `[~westonpace]`: that might probably also work \u2014 though I think we would need nested struct arrays: value, attrs with the attrs having different possible shapes and I'm not 100% sure if structs could handle elements with arbitrary sizes like that. I can+should RTFM or RTFS to find it, though Dewey's point makes it pretty moot anyway."
        }
    ]
}