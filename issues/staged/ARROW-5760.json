{
    "issue": {
        "title": "[C++] Optimize Take implementation",
        "body": "***Note**: This issue was originally created as [ARROW-5760](https://issues.apache.org/jira/browse/ARROW-5760). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThere is some question of whether these kernels allocate optimally- for example when Filtering or Taking strings it might be more efficient to pass over the filter/indices twice, first to determine how much character storage will be needed then again into allocated memory: https://github.com/apache/arrow/pull/4531#discussion_r297160457\r\n\r\nAdditionally, these kernels could probably make good use of scatter/gather SIMD instructions.\r\n\r\nFurthermore, Filter's bitmap is currently lazily expanded into the indices of elements to be appended to the output array. It would probably be more efficient to expand to indices in batches, then gather using an index batch.",
        "created_at": "2019-06-27T17:23:21.000Z",
        "updated_at": "2020-06-11T23:01:48.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-06-11T16:45:33.000Z"
    },
    "comments": [
        {
            "created_at": "2020-05-24T12:36:09.957Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5760?focusedCommentId=17115287) by Wes McKinney (wesm):*\nAnother problem I noticed with the current implementation of Take and Filter: different x86 is generated for applying these operations on arrays with the same underlying C type. For example, instructions for moving 8-byte-wide values are being generated for Int64Type, UInt64Type, Date64Type, Time64Type, and TimestampType, when only one  underlying \"data movement function\" is needed. As part of improving the performance of Take and Filter we should also ensure that we eliminate this unneeded binary bloat in the shared library"
        },
        {
            "created_at": "2020-05-25T15:20:07.929Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5760?focusedCommentId=17116112) by Wes McKinney (wesm):*\nI'd like to work on this next week if it's alright"
        },
        {
            "created_at": "2020-06-11T16:45:33.840Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5760?focusedCommentId=17133395) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 7382\n<https://github.com/apache/arrow/pull/7382>"
        }
    ]
}