{
    "issue": {
        "title": "[Rust][Arrow] Improve performance of filter kernel",
        "body": "***Note**: This issue was originally created as [ARROW-10141](https://issues.apache.org/jira/browse/ARROW-10141). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAs `[~jorgecarleitao]` noted here: \r\nhttps://github.com/apache/arrow/pull/8303#issuecomment-701328143\r\n\r\nThe improvement of the filter kernel (and likely others) could be improved by avoiding creating intermediate copies. The code currently:\r\n\r\n1. creates Vec<Option<T>> through an iteration\n1. copies Vec<Option<T>> to the two buffers (when from_opt_vec is called)\n   \n   it may be more efficient to create the buffers during the iteration, so that we avoid the copy (Vec -> buffers). In other words, the code in from_opt_vec could have been \"injected\" into the filter execution, where the MutableBuffer and offsets and values buffer are created before the loop, and new elements are directly written to it. \n   \n   (as a side note, this is why he proposed ARROW-10030 https://github.com/apache/arrow/pull/8211  : IMO there is some boiler-plate copy-pasting to\n   \n- initialize buffers\n- iterate\n- create ArrayData from buffers\n  \n  which will continue to grow as we add more kernels, and whose pattern seems to be a FromIter of fixed size",
        "created_at": "2020-09-30T11:38:03.000Z",
        "updated_at": "2021-12-16T17:01:42.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": []
}