{
    "issue": {
        "title": "[C++/Python] Provide assertion helpers in the style of pandas.testing.assert_frame_equal",
        "body": "***Note**: This issue was originally created as [ARROW-2647](https://issues.apache.org/jira/browse/ARROW-2647). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nPandas provides helper functions for writing tests based on its data structures that output an explanative error message on assertion failures. In constrast, Arrow at the moment only supports boolean equals comparisons. We should add helper functions that also give a very detailed response on where the comparison failed.",
        "created_at": "2018-05-30T11:44:37.000Z",
        "updated_at": "2020-03-24T16:53:29.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2020-03-24T16:51:35.865Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2647?focusedCommentId=17065957) by Joris Van den Bossche (jorisvandenbossche):*\nI also regularly run into this that a `assert result.equals(expected)` does not give much information about why the objects are different, so +1 on adding something like this."
        },
        {
            "created_at": "2020-03-24T16:53:29.712Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2647?focusedCommentId=17065959) by Joris Van den Bossche (jorisvandenbossche):*\nFor a failing test I am having right now, I just wrote:\r\n\r\n```Java\n\r\ndef assert_table_equal(left, right, check_metadata=False):\r\n    if left.equals(right, check_metadata=check_metadata):\r\n        return\r\n\r\n    if not left.schema.equals(right.schema):\r\n        raise AssertionError(\r\n            \"Schema not equal\\nLeft:\\n{0}\\nRight:\\n{1}\".format(\r\n                left.schema, right.schema\r\n            )\r\n        )\r\n\r\n    if check_metadata:\r\n        if not left.schema.equals(right.schema, check_metadata=True):\r\n            if not left.schema.metadata == right.schema.metadata:\r\n                raise AssertionError(\r\n                    \"Metadata not equal\\nLeft:\\n{0}\\nRight:\\n{1}\".format(\r\n                        left.schema.metadata, right.schema.metadata\r\n                    )\r\n                )\r\n# TODO also check field metadata\r\n        for col in left.schema.names:\r\n            assert left.schema.field(col).equals(\r\n                right.schema.field(col), check_metadata=True\r\n            )\r\n\r\n    for col in left.column_names:\r\n        a_left = pa.concat_arrays(left.column(col).chunks)\r\n        a_right = pa.concat_arrays(right.column(col).chunks)\r\n        if not a_left.equals(a_right):\r\n            raise AssertionError(\r\n                \"Column '{0}' not equal:\\n{1}\".format(col, a_left.diff(a_right))\r\n            )\r\n\r\n    raise AssertionError(\"Tables not equal for unknown reason\")\r\n```"
        }
    ]
}