{
    "issue": {
        "title": "[C++][CI] \"test-ubuntu-20.04-cpp-17\" nightly build crash in GCSFS test",
        "body": "***Note**: This issue was originally created as [ARROW-14301](https://issues.apache.org/jira/browse/ARROW-14301). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSee https://github.com/ursacomputing/crossbow/runs/3866932533",
        "created_at": "2021-10-12T17:07:03.000Z",
        "updated_at": "2021-10-13T18:50:10.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Continuous Integration",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-10-12T20:19:23.000Z"
    },
    "comments": [
        {
            "created_at": "2021-10-12T17:07:40.768Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14301?focusedCommentId=17427800) by Antoine Pitrou (apitrou):*\ncc `[~coryan]`"
        },
        {
            "created_at": "2021-10-12T17:28:13.798Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14301?focusedCommentId=17427824) by Antoine Pitrou (apitrou):*\nHere is the gdb backtrace. It looks like some possible bug in `absl::any` (the crash is in the default constructor for `google::cloud::v1::Options`).\r\n\r\n```Java\n\r\n#0  0x00007fc556b4a0dc in absl::lts_20210324::any::any (this=0x558c65a31360, other=...) at /build/cpp/absl_ep-install/include/absl/types/any.h:214\r\n#1  0x00007fc556b57743 in std::pair<std::type_index const, absl::lts_20210324::any>::pair (this=0x558c65a31358) at /usr/include/c++/9/bits/stl_pair.h:303\r\n#2  0x00007fc556b57791 in __gnu_cxx::new_allocator<std::__detail::_Hash_node<std::pair<std::type_index const, absl::lts_20210324::any>, false> >::construct<std::pair<std::type_index const, absl::lts_20210324::any>, std::pair<std::type_index const, absl::lts_20210324::any> const&> (this=0x7ffd223c6290, __p=0x558c65a31358)\r\n    at /usr/include/c++/9/ext/new_allocator.h:147\r\n#3  0x00007fc556b54ae0 in std::allocator_traits<std::allocator<std::__detail::_Hash_node<std::pair<std::type_index const, absl::lts_20210324::any>, false> > >::construct<std::pair<std::type_index const, absl::lts_20210324::any>, std::pair<std::type_index const, absl::lts_20210324::any> const&> (__a=..., __p=0x558c65a31358)\r\n    at /usr/include/c++/9/bits/alloc_traits.h:484\r\n#4  0x00007fc556b50db9 in std::__detail::_Hashtable_alloc<std::allocator<std::__detail::_Hash_node<std::pair<std::type_index const, absl::lts_20210324::any>, false> > >::_M_allocate_node<std::pair<std::type_index const, absl::lts_20210324::any> const&> (this=0x7ffd223c6290) at /usr/include/c++/9/bits/hashtable_policy.h:2086\r\n#5  0x00007fc556b4ce23 in std::_Hashtable<std::type_index, std::pair<std::type_index const, absl::lts_20210324::any>, std::allocator<std::pair<std::type_index const, absl::lts_20210324::any> >, std::__detail::_Select1st, std::equal_to<std::type_index>, std::hash<std::type_index>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Hashtable(std::_Hashtable<std::type_index, std::pair<std::type_index const, absl::lts_20210324::any>, std::allocator<std::pair<std::type_index const, absl::lts_20210324::any> >, std::__detail::_Select1st, std::equal_to<std::type_index>, std::hash<std::type_index>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&)::{lambda(std::__detail::_Hash_node<std::pair<std::type_index const, absl::lts_20210324::any>, false> const*)#1}::operator()(std::__detail::_Hash_node<std::pair<std::type_index const, absl::lts_20210324::any>, false> const*) const (this=0x7ffd223c6290, __n=0x558c65a33440)\r\n    at /usr/include/c++/9/bits/hashtable.h:1243\r\n#6  0x00007fc556b50f24 in std::_Hashtable<std::type_index, std::pair<std::type_index const, absl::lts_20210324::any>, std::allocator<std::pair<std::type_index const, absl::lts_20210324::any> >, std::__detail::_Select1st, std::equal_to<std::type_index>, std::hash<std::type_index>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign<std::_Hashtable<std::type_index, std::pair<std::type_index const, absl::lts_20210324::any>, std::allocator<std::pair<std::type_index const, absl::lts_20210324::any> >, std::__detail::_Select1st, std::equal_to<std::type_index>, std::hash<std::type_index>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign(std::_Hashtable<std::type_index, std::pair<std::type_index const, absl::lts_20210324::any>, std::allocator<std::pair<std::type_index const, absl::lts_20210324::any> >, std::__detail::_Select1st, std::equal_to<std::type_index>, std::hash<std::type_index>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&)::{lambda(std::__detail::_Hash_node<std::pair<std::type_index const, absl::lts_20210324::any>, false> const*)#1}>(std::_Hashtable<std::type_index, std::pair<std::type_index const, absl::lts_20210324::any>, std::allocator<std::pair<std::type_index const, absl::lts_20210324::any> >, std::__detail::_Select1st, std::equal_to<std::type_index>, std::hash<std::type_index>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&, std::_Hashtable<std::type_index, std::pair<std::type_index const, absl::lts_20210324::any>, std::allocator<std::pair<std::type_index const, absl::lts_20210324::any> >, std::__detail::_Select1st, std::equal_to<std::type_index>, std::hash<std::type_index>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_M_assign(std::_Hashtable<std::type_index, std::pair<std::type_index const, absl::lts_20210324::any>, std::allocator<std::pair<std::type_index const, absl::lts_20210324::any> >, std::__detail::_Select1st, std::equal_to<std::type_index>, std::hash<std::type_index>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> > const&)::{lambda(std::__detail::_Hash_node<std::pair<std::type_index const, absl::lts_20210324::any>, false> const*)#1} const&) (this=0x7ffd223c6290, \r\n    __ht=..., __node_gen=...) at /usr/include/c++/9/bits/hashtable.h:1136\r\n#7  0x00007fc556b4cf09 in std::_Hashtable<std::type_index, std::pair<std::type_index const, absl::lts_20210324::any>, std::allocator<std::pair<std::type_index const, absl::lts_20210324::any> >, std::__detail::_Select1st, std::equal_to<std::type_index>, std::hash<std::type_index>, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits<false, false, true> >::_Hashtable (this=0x7ffd223c6290, __ht=...)\r\n    at /usr/include/c++/9/bits/hashtable.h:1241\r\n#8  0x00007fc556b4b00f in std::unordered_map<std::type_index, absl::lts_20210324::any, std::hash<std::type_index>, std::equal_to<std::type_index>, std::allocator<std::pair<std::type_index const, absl::lts_20210324::any> > >::unordered_map (this=0x7ffd223c6290) at /usr/include/c++/9/bits/unordered_map.h:181\r\n#9  0x00007fc556b4b039 in google::cloud::v1::Options::Options (this=0x7ffd223c6290)\r\n    at /build/cpp/google_cloud_cpp_ep-prefix/src/google_cloud_cpp_ep/google/cloud/options.h:90\r\n#10 0x00007fc556b6018a in google::cloud::storage::v1::internal::DefaultOptions (credentials=\r\n    std::shared_ptr<google::cloud::storage::v1::oauth2::Credentials> (empty) = {...}, opts=...)\r\n    at /build/cpp/google_cloud_cpp_ep-prefix/src/google_cloud_cpp_ep/google/cloud/storage/client_options.cc:183\r\n#11 0x00007fc556b61039 in google::cloud::storage::v1::internal::DefaultOptionsWithCredentials (opts=...)\r\n    at /build/cpp/google_cloud_cpp_ep-prefix/src/google_cloud_cpp_ep/google/cloud/storage/client_options.cc:231\r\n#12 0x00007fc556b44490 in google::cloud::storage::v1::Client::Client (this=0x558c65a196c0, opts=...)\r\n    at /build/cpp/google_cloud_cpp_ep-prefix/src/google_cloud_cpp_ep/google/cloud/storage/client.cc:41\r\n#13 0x00007fc556683d9b in arrow::fs::GcsFileSystem::Impl::Impl (this=0x558c65a19680, o=...) at /arrow/cpp/src/arrow/filesystem/gcsfs.cc:46\r\n#14 0x00007fc5566865e7 in __gnu_cxx::new_allocator<arrow::fs::GcsFileSystem::Impl>::construct<arrow::fs::GcsFileSystem::Impl, arrow::fs::GcsOptions const&> (\r\n    this=0x7ffd223c64ef, __p=0x558c65a19680) at /usr/include/c++/9/ext/new_allocator.h:147\r\n#15 0x00007fc556686296 in std::allocator_traits<std::allocator<arrow::fs::GcsFileSystem::Impl> >::construct<arrow::fs::GcsFileSystem::Impl, arrow::fs::GcsOptions const&> (__a=..., __p=0x558c65a19680) at /usr/include/c++/9/bits/alloc_traits.h:484\r\n#16 0x00007fc556685f0c in std::_Sp_counted_ptr_inplace<arrow::fs::GcsFileSystem::Impl, std::allocator<arrow::fs::GcsFileSystem::Impl>, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<arrow::fs::GcsOptions const&> (this=0x558c65a19670, __a=...) at /usr/include/c++/9/bits/shared_ptr_base.h:548\r\n#17 0x00007fc5566857a4 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<arrow::fs::GcsFileSystem::Impl, std::allocator<arrow::fs::GcsFileSystem::Impl>, arrow::fs::GcsOptions const&> (this=0x558c65a19660, __p=@0x558c65a19658: 0x0, __a=...) at /usr/include/c++/9/bits/shared_ptr_base.h:679\r\n#18 0x00007fc556684ff0 in std::__shared_ptr<arrow::fs::GcsFileSystem::Impl, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<arrow::fs::GcsFileSystem::Impl>, arrow::fs::GcsOptions const&> (this=0x558c65a19658, __tag=...) at /usr/include/c++/9/bits/shared_ptr_base.h:1344\r\n#19 0x00007fc556684753 in std::shared_ptr<arrow::fs::GcsFileSystem::Impl>::shared_ptr<std::allocator<arrow::fs::GcsFileSystem::Impl>, arrow::fs::GcsOptions const&> (\r\n    this=0x558c65a19658, __tag=...) at /usr/include/c++/9/bits/shared_ptr.h:359\r\n#20 0x00007fc556684367 in std::allocate_shared<arrow::fs::GcsFileSystem::Impl, std::allocator<arrow::fs::GcsFileSystem::Impl>, arrow::fs::GcsOptions const&> (__a=...)\r\n    at /usr/include/c++/9/bits/shared_ptr.h:702\r\n#21 0x00007fc55668406d in std::make_shared<arrow::fs::GcsFileSystem::Impl, arrow::fs::GcsOptions const&> () at /usr/include/c++/9/bits/shared_ptr.h:718\r\n#22 0x00007fc556683770 in arrow::fs::GcsFileSystem::GcsFileSystem (this=0x558c65a19610, options=..., context=...) at /arrow/cpp/src/arrow/filesystem/gcsfs.cc:139\r\n#23 0x00007fc5566837e8 in arrow::fs::internal::MakeGcsFileSystemForTest (options=...) at /arrow/cpp/src/arrow/filesystem/gcsfs.cc:146\r\n#24 0x0000558c64223eaa in arrow::fs::(anonymous namespace)::GcsFileSystem_FileSystemCompare_Test::TestBody (this=0x558c659d76e0) at /arrow/cpp/src/arrow/filesystem/gcsfs_test.cc:49\r\n#25 0x00007fc553ee0634 in testing::internal::HandleSehExceptionsInMethodIfSupported<testing::Test, void> (object=0x558c659d76e0, method=&virtual testing::Test::TestBody(), location=0x7fc553ef757b \"the test body\") at /build/cpp/googletest_ep-prefix/src/googletest_ep/googletest/src/gtest.cc:2607\r\n#26 0x00007fc553ed832b in testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void> (object=0x558c659d76e0, method=&virtual testing::Test::TestBody(), location=0x7fc553ef757b \"the test body\") at /build/cpp/googletest_ep-prefix/src/googletest_ep/googletest/src/gtest.cc:2643\r\n#27 0x00007fc553eac5ec in testing::Test::Run (this=0x558c659d76e0) at /build/cpp/googletest_ep-prefix/src/googletest_ep/googletest/src/gtest.cc:2682\r\n#28 0x00007fc553ead02e in testing::TestInfo::Run (this=0x558c65a18d30) at /build/cpp/googletest_ep-prefix/src/googletest_ep/googletest/src/gtest.cc:2861\r\n#29 0x00007fc553ead948 in testing::TestSuite::Run (this=0x558c65a18c20) at /build/cpp/googletest_ep-prefix/src/googletest_ep/googletest/src/gtest.cc:3015\r\n#30 0x00007fc553ebd3f6 in testing::internal::UnitTestImpl::RunAllTests (this=0x558c65a18980) at /build/cpp/googletest_ep-prefix/src/googletest_ep/googletest/src/gtest.cc:5855\r\n#31 0x00007fc553ee1b62 in testing::internal::HandleSehExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool> (object=0x558c65a18980, method=(bool (testing::internal::UnitTestImpl::*)(testing::internal::UnitTestImpl * const)) 0x7fc553ebcfc2 <testing::internal::UnitTestImpl::RunAllTests()>, location=0x7fc553ef8068 \"auxiliary test code (environments or event listeners)\") at /build/cpp/googletest_ep-prefix/src/googletest_ep/googletest/src/gtest.cc:2607\r\n#32 0x00007fc553ed9569 in testing::internal::HandleExceptionsInMethodIfSupported<testing::internal::UnitTestImpl, bool> (object=0x558c65a18980, method=(bool (testing::internal::UnitTestImpl::*)(testing::internal::UnitTestImpl * const)) 0x7fc553ebcfc2 <testing::internal::UnitTestImpl::RunAllTests()>, location=0x7fc553ef8068 \"auxiliary test code (environments or event listeners)\") at /build/cpp/googletest_ep-prefix/src/googletest_ep/googletest/src/gtest.cc:2643\r\n#33 0x00007fc553ebbb0d in testing::UnitTest::Run (this=0x7fc553f25ba0 <testing::UnitTest::GetInstance()::instance>) at /build/cpp/googletest_ep-prefix/src/googletest_ep/googletest/src/gtest.cc:5438\r\n#34 0x00007fc553f2729a in RUN_ALL_TESTS () at /build/cpp/googletest_ep-prefix/src/googletest_ep/googletest/include/gtest/gtest.h:2490\r\n#35 0x00007fc553f2721c in main (argc=1, argv=0x7ffd223c6cf8) at /build/cpp/googletest_ep-prefix/src/googletest_ep/googletest/src/gtest_main.cc:52\r\n#36 0x00007fc553a410b3 in __libc_start_main () from /lib/x86_64-linux-gnu/libc.so.6\r\n#37 0x0000558c642237ce in _start ()\r\n```\r\n"
        },
        {
            "created_at": "2021-10-12T17:41:54.816Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14301?focusedCommentId=17427829) by Carlos O'Ryan (coryan):*\nLooks like Abseil is always compiled with `-DCMAKE_CXX_STANDARD=11`.  That is a problem, because Abseil's ABI changes when it is used from C++17, regardless of how it was compiled:\r\n\r\nhttps://github.com/abseil/abseil-cpp/issues/696\r\n\r\nI think I can fix this by compiling both `abseil` and `google-cloud-cpp` with consistent CMAKE_CXX_STANDARD settings.  Alternatively, we can \"pin\" the Abseil ABI to whatever it was compiled with, it just requires patching the installed `base/options.h` file."
        },
        {
            "created_at": "2021-10-12T17:43:50.016Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14301?focusedCommentId=17427830) by Antoine Pitrou (apitrou):*\nYes, propagating the CMake settings to the bundled library builds sounds like the right solution (if it is confirmed to fix the issue, of course :)).\r\n\r\nIt would also be nice to notify the absl project that it can lead to weird runtime crashes rather than linker errors."
        },
        {
            "created_at": "2021-10-12T18:57:58.003Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14301?focusedCommentId=17427867) by Carlos O'Ryan (coryan):*\nYour probably noticed, but in case you did not. I just sent a PR to fix this problem.\r\n"
        },
        {
            "created_at": "2021-10-12T20:19:23.071Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14301?focusedCommentId=17427904) by Kouhei Sutou (kou):*\nIssue resolved by pull request 11393\n<https://github.com/apache/arrow/pull/11393>"
        }
    ]
}