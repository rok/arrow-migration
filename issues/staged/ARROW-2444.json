{
    "issue": {
        "title": "[Python][C++] Better handle reading empty parquet files",
        "body": "***Note**: This issue was originally created as [ARROW-2444](https://issues.apache.org/jira/browse/ARROW-2444). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nFrom <https://github.com/dask/dask/pull/3387#issuecomment-380140003>\r\n\r\n\u00a0\r\n\r\nCurrently pyarrow reads empty parts as float64, even if the underlying columns have other dtypes. This can cause problems for pandas downstream, as certain operations are only valid on certain dtypes, even if the columns are empty.\r\n\r\n\u00a0\r\n\r\nCopying the comment Uwe over:\r\n\r\n\u00a0\r\n> > This is the expected behaviour as an empty string column in Pandas is simply an empty column of type object. Sadly object does not tell us much about the type of the column at all. We return numpy.float64 in this case as it's the most efficient type to store nulls in Pandas.\r\n\r\n> This seems unintuitive at best to me. An empty object column in pandas is treated differently in many operations than an empty float64 column (str accessor is available, excluded from numeric operations, etc..). Having an empty file read in as a different dtype than was written could lead to errors in processing code downstream. Would arrow be willing to change this behavior?\r\n\r\nWe should probably use another method than `field.type.to_pandas_dtype()` in this case. The column saved in Parquet should be saved with `NA` as type which sadly does not provide enough information. \r\n\r\nWe also store the original dtype in the Pandas metadata that is used for the actual DataFrame reconstruction later on. If we would also pick up the metadata when it was written, we should be able to correctly reconstruct the dtype.",
        "created_at": "2018-04-10T15:37:14.000Z",
        "updated_at": "2020-06-12T20:20:02.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-06-12T20:20:02.000Z"
    },
    "comments": [
        {
            "created_at": "2019-06-17T13:40:06.786Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2444?focusedCommentId=16865605) by Wes McKinney (wesm):*\nMoving this out of 0.14.0 and adding the \"dataset\" tag. The appropriate option is probably to automatically promote all-null columns to whatever is the consensus non-null type when reading a Parquet dataset"
        },
        {
            "created_at": "2020-04-14T09:05:34.059Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2444?focusedCommentId=17083010) by Joris Van den Bossche (jorisvandenbossche):*\nI didn't read the full discussion on the original dask PR, but from what I understand, I am not sure there is any issue left to solve.\r\n\r\nAt least nowadays, an empty table with string or null types both convert to object dtype in pandas (and not float64):\r\n\r\n```Java\n\r\nIn [1]: schema = pa.schema([(\"ints\", pa.int64()), (\"floats\", pa.float64()), (\"strings\", pa.string()), (\"nulls\", pa.null())])                                                                                       \r\n\r\nIn [2]: schema.empty_table().to_pandas().dtypes                                                                                                                                                                    \r\nOut[2]: \r\nints         int64\r\nfloats     float64\r\nstrings     object\r\nnulls       object\r\ndtype: object\r\n```\r\n\r\nAlso an empty dataframe roundtrips preserving the object dtype:\r\n\r\n```Java\n\r\nIn [3]: df = pd.DataFrame({\"ints\": pd.Series([], dtype=\"int64\"), \"strings\": pd.Series([], dtype=object)})                                                                                                          \r\n\r\nIn [5]: df.dtypes                                                                                                                                                                                                  \r\nOut[5]: \r\nints        int64\r\nstrings    object\r\ndtype: object\r\n\r\nIn [6]: df.to_parquet(\"test_empty_df.parquet\")                                                                                                                                                                     \r\n\r\nIn [7]: pd.read_parquet(\"test_empty_df.parquet\").dtypes                                                                                                                                                            \r\nOut[7]: \r\nints        int64\r\nstrings    object\r\ndtype: object\r\n```\r\n\r\nOn the pyarrow side, such a parquet file has a null dtype, and even when removing the pandas metadata, it still converts to object dtype:\r\n\r\n```Java\n\r\nIn [9]: pq.read_table(\"test_empty_df.parquet\")                                                                                                                                                                     \r\nOut[9]: \r\npyarrow.Table\r\nints: int64\r\nstrings: null\r\n\r\nIn [13]: pq.read_table(\"test_empty_df.parquet\").replace_schema_metadata().to_pandas().dtypes                                                                                                                       \r\nOut[13]: \r\nints        int64\r\nstrings    object\r\ndtype: object\r\n```\r\n\r\nAnybody who remembers the original issue who can confirm this is solved? Or is there still something remaining?"
        },
        {
            "created_at": "2020-04-14T09:20:57.831Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2444?focusedCommentId=17083021) by Joris Van den Bossche (jorisvandenbossche):*\nThere is still this behaviour of `to_pandas_dtype` returning float, while all actual conversions to numpy or pandas use object dtype:\r\n\r\n```Java\n\r\nIn [23]: pa.null().to_pandas_dtype()                                                                                                                                                                               \r\nOut[23]: numpy.float64\r\n\r\nIn [24]: pa.array([], pa.null()).to_pandas()                                                                                                                                                                       \r\nOut[24]: Series([], dtype: object)\r\n\r\nIn [25]: pa.array([], pa.null()).to_numpy(zero_copy_only=False)                                                                                                                                                    \r\nOut[25]: array([], dtype=object)\r\n```\r\n\r\nSo we should probably fix `NullType.to_pandas_dtype` to return object, which is used in practice."
        },
        {
            "created_at": "2020-04-14T09:22:36.381Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2444?focusedCommentId=17083022) by Joris Van den Bossche (jorisvandenbossche):*\nOpened ARROW-8442 specifically for the `to_pandas_dtype()`"
        },
        {
            "created_at": "2020-06-12T20:20:02.440Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2444?focusedCommentId=17134519) by Neal Richardson (npr):*\nSounds like this is resolved now; please open a new issue if there's more work to do."
        }
    ]
}