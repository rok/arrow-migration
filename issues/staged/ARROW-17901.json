{
    "issue": {
        "title": "[Python] pyarrow missing py.typed marker file",
        "body": "***Note**: This issue was originally created as [ARROW-17901](https://issues.apache.org/jira/browse/ARROW-17901). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI understand that, in general, `pyarrow` does not support type hints. However, I think it is still sensible to add a `py.typed` marker file to the library. Let me demonstrate why,\r\n```java\n\r\n$ pip install mypy pyarrow \n```\r\n```java\n\r\n# test.py\r\nimport pyarrow as pa\r\n\u00a0\r\ntable = pa.Table()\r\n\u00a0\r\nreveal_type(table) \n```\r\n```java\n\r\n$\u00a0mypy test.py\r\ntest.py:1: error: Skipping analyzing \"pyarrow\": module is installed, but missing library stubs or py.typed marker\r\ntest.py:1: note: See https://mypy.readthedocs.io/en/stable/running_mypy.html#missing-imports\r\ntest.py:5: note: Revealed type is \"Any\"\r\nFound 1 error in 1 file (checked 1 source file) \n```\r\nNote that `mypy` identifies `table` as being an `Any` type, when obviously it is a `{}Table{`}. If we include a `py.typed` file, `mypy` will be able to make these trivial inferences.\u00a0The motivating example is this,\r\n```java\n\r\n@overload\r\ndef from_arrow(a: pa.Table) -> DataFrame:\r\n\u00a0 \u00a0 ...\r\n\r\n@overload\r\ndef from_arrow(a: pa.Array | pa.ChunkedArray) -> Series:\r\n\u00a0 \u00a0 ...\r\n\r\ndef from_arrow(a: pa.Table | pa.Array | pa.ChunkedArray) -> DataFrame | Series:\r\n\u00a0 \u00a0 pass \n```\r\nThe problem is that since all of `{}pa.Table{`}, `{}pa.Array{`}, and `pa.ChunkedArray` are determined to be `{}Any{`}, the overloads effectively become\u00a0\r\n```java\n\r\n@overload\r\ndef from_arrow(a: Any) -> DataFrame:\r\n\u00a0 \u00a0 ...\r\n\r\n@overload\r\ndef from_arrow(a: Any) -> Series:\r\n\u00a0 \u00a0 ... \n```\r\nand `mypy` complains that overload 2 is covered entirely by overload 1.\r\n\r\n\u00a0\r\n\r\nI tried to test what adding a `py.typed` file would do, but I ran into compilation issues. I was hoping someone with a little more experience here could quickly test this out for me :)",
        "created_at": "2022-09-29T23:53:20.000Z",
        "updated_at": "2022-10-03T09:06:33.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-09-30T06:52:07.960Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17901?focusedCommentId=17611390) by Alenka Frim (alenka):*\nHi `[~matteosantama]` , thank you for opening up this issue!\r\n\r\nDo you have a branch open that I could run locally?"
        },
        {
            "created_at": "2022-09-30T15:10:27.733Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17901?focusedCommentId=17611641) by Matteo Santamaria (matteosantama):*\n`[~alenka]` the proposed changes are so minimal that it might be easiest just to describe them, although I am happy to open a branch if that would help.\r\n\r\nBasically, we just need to add an (empty) file called\u00a0`py.typed` in `arrow/python/pyarrow` and then make sure it gets included in the distribution. [PEP-561](https://peps.python.org/pep-0561/#packaging-type-information) suggests this might be as easy as adding it to the package data [here.](https://github.com/apache/arrow/blob/7b44e6140bb35f3fb45fb32d439f0fff360509d6/python/setup.py#L734)"
        },
        {
            "created_at": "2022-10-03T09:06:33.249Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17901?focusedCommentId=17612220) by Alenka Frim (alenka):*\nI think Will gave a great answer on GitHub issues: <https://github.com/apache/arrow/issues/14291>, `-DARROW_INSTALL_NAME_RPATH=OFF` is what came to my mind also."
        }
    ]
}