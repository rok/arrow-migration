{
    "issue": {
        "title": "[Python] Making libpyarrow available to third parties",
        "body": "***Note**: This issue was originally created as [ARROW-341](https://issues.apache.org/jira/browse/ARROW-341). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWe may want to link against this library in pandas 2.0 \u2013 `[~xhochy]` what do you think? One option is that we could move the Python glue into the C++ library and create a leaf lib `libarrow_python.so`.",
        "created_at": "2016-10-19T03:09:48.000Z",
        "updated_at": "2017-03-26T15:45:54.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2017-03-26T15:45:54.000Z"
    },
    "comments": [
        {
            "created_at": "2016-10-19T06:29:42.223Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-341?focusedCommentId=15587833) by Uwe Korn (uwe):*\nSounds ok to me.\n\nThen we may still have a `libpyarrrow.so` but that will solely have code that is shared between the `pyarrow` modules and not to be exposed externally?"
        },
        {
            "created_at": "2016-10-19T20:28:59.473Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-341?focusedCommentId=15589771) by Wes McKinney (wesm):*\nI'll think a little more about it. The main thing I would need in the short term would be the Python file IO interface"
        },
        {
            "created_at": "2016-12-06T06:05:18.763Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-341?focusedCommentId=15724479) by Uwe Korn (uwe):*\nAnother functionality that could be shared to other (non Cython) third-party libraries is the conversion code of C++ to Python objects (i.e. `arrow::Table` -> `pyarrow.Table`).\n\nAt first glance this looked like something easy but it will possibly require that we move the definition of the Python structs (`pyarrow.Table`) to the C++ code from Cython. This would make a it a bit more hard to maintain."
        },
        {
            "created_at": "2016-12-24T19:08:13.120Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-341?focusedCommentId=15775305) by Wes McKinney (wesm):*\nI thought a bit about this. The easiest thing to do would be to install all of the libpyarrow header files under the pyarrow build tree, similar to how NumPy has `numpy/core/include` and the helper function `numpy.get_include()`. We would need an equivalent \"import hook\" like \"import_array\" which ensures that the right shared libraries have been loaded at runtime. "
        },
        {
            "created_at": "2016-12-28T13:57:40.604Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-341?focusedCommentId=15782935) by Uwe Korn (uwe):*\nAt the moment we have the auto-generated `pyarrow/table_api.h` where Cython provides C++ code to use the `pyarrow.Table` module from C++ code without linking to the actual Cython module. We could use this also for having `import_pyarrow()`."
        },
        {
            "created_at": "2017-03-25T17:52:49.221Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-341?focusedCommentId=15941821) by Wes McKinney (wesm):*\nPR: https://github.com/apache/arrow/pull/440"
        },
        {
            "created_at": "2017-03-26T15:45:54.621Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-341?focusedCommentId=15942316) by Wes McKinney (wesm):*\nIssue resolved by pull request 440\n<https://github.com/apache/arrow/pull/440>"
        }
    ]
}