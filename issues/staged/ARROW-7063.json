{
    "issue": {
        "title": "[C++] Schema print method prints too much metadata",
        "body": "***Note**: This issue was originally created as [ARROW-7063](https://issues.apache.org/jira/browse/ARROW-7063). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI loaded some taxi data in a Dataset and printed the schema. This is what was printed:\r\n\r\n```Java\n\r\nvendor_id: string\r\npickup_at: timestamp[us]\r\ndropoff_at: timestamp[us]\r\npassenger_count: int8\r\ntrip_distance: float\r\npickup_longitude: float\r\npickup_latitude: float\r\nrate_code_id: null\r\nstore_and_fwd_flag: string\r\ndropoff_longitude: float\r\ndropoff_latitude: float\r\npayment_type: string\r\nfare_amount: float\r\nextra: float\r\nmta_tax: float\r\ntip_amount: float\r\ntolls_amount: float\r\ntotal_amount: float\r\n-- metadata --\r\npandas: {\"index_columns\": [{\"kind\": \"range\", \"name\": null, \"start\": 0, \"stop\": 14387371, \"step\": 1}], \"column_indexes\": [{\"name\": null, \"field_name\": null, \"pandas_type\": \"unicode\", \"numpy_type\": \"object\", \"metadata\": {\"encoding\": \"UTF-8\"}}], \"columns\": [{\"name\": \"vendor_id\", \"field_name\": \"vendor_id\", \"pandas_type\": \"unicode\", \"numpy_type\": \"object\", \"metadata\": null}, {\"name\": \"pickup_at\", \"field_name\": \"pickup_at\", \"pandas_type\": \"datetime\", \"numpy_type\": \"datetime64[ns]\", \"metadata\": null}, {\"name\": \"dropoff_at\", \"field_name\": \"dropoff_at\", \"pandas_type\": \"datetime\", \"numpy_type\": \"datetime64[ns]\", \"metadata\": null}, {\"name\": \"passenger_count\", \"field_name\": \"passenger_count\", \"pandas_type\": \"int8\", \"numpy_type\": \"int8\", \"metadata\": null}, {\"name\": \"trip_distance\", \"field_name\": \"trip_distance\", \"pandas_type\": \"float32\", \"numpy_type\": \"float32\", \"metadata\": null}, {\"name\": \"pickup_longitude\", \"field_name\": \"pickup_longitude\", \"pandas_type\": \"float32\", \"numpy_type\": \"float32\", \"metadata\": null}, {\"name\": \"pickup_latitude\", \"field_name\": \"pickup_latitude\", \"pandas_type\": \"float32\", \"numpy_type\": \"float32\", \"metadata\": null}, {\"name\": \"rate_code_id\", \"field_name\": \"rate_code_id\", \"pandas_type\": \"empty\", \"numpy_type\": \"object\", \"metadata\": null}, {\"name\": \"store_and_fwd_flag\", \"field_name\": \"store_and_fwd_flag\", \"pandas_type\": \"unicode\", \"numpy_type\": \"object\", \"metadata\": null}, {\"name\": \"dropoff_longitude\", \"field_name\": \"dropoff_longitude\", \"pandas_type\": \"float32\", \"numpy_type\": \"float32\", \"metadata\": null}, {\"name\": \"dropoff_latitude\", \"field_name\": \"dropoff_latitude\", \"pandas_type\": \"float32\", \"numpy_type\": \"float32\", \"metadata\": null}, {\"name\": \"payment_type\", \"field_name\": \"payment_type\", \"pandas_type\": \"unicode\", \"numpy_type\": \"object\", \"metadata\": null}, {\"name\": \"fare_amount\", \"field_name\": \"fare_amount\", \"pandas_type\": \"float32\", \"numpy_type\": \"float32\", \"metadata\": null}, {\"name\": \"extra\", \"field_name\": \"extra\", \"pandas_type\": \"float32\", \"numpy_type\": \"float32\", \"metadata\": null}, {\"name\": \"mta_tax\", \"field_name\": \"mta_tax\", \"pandas_type\": \"float32\", \"numpy_type\": \"float32\", \"metadata\": null}, {\"name\": \"tip_amount\", \"field_name\": \"tip_amount\", \"pandas_type\": \"float32\", \"numpy_type\": \"float32\", \"metadata\": null}, {\"name\": \"tolls_amount\", \"field_name\": \"tolls_amount\", \"pandas_type\": \"float32\", \"numpy_type\": \"float32\", \"metadata\": null}, {\"name\": \"total_amount\", \"field_name\": \"total_amount\", \"pandas_type\": \"float32\", \"numpy_type\": \"float32\", \"metadata\": null}], \"creator\": {\"library\": \"pyarrow\", \"version\": \"0.15.1\"}, \"pandas_version\": \"0.25.3\"}\r\nARROW:schema: /////3gOAAAQAAAAAAAKAA4ABgAFAAgACgAAAAABAwAQAAAAAAAKAAwAAAAEAAgACgAAAFQKAAAEAAAAAQAAAAwAAAAIAAwABAAIAAgAAAAsCgAABAAAAB8KAAB7ImluZGV4X2NvbHVtbnMiOiBbeyJraW5kIjogInJhbmdlIiwgIm5hbWUiOiBudWxsLCAic3RhcnQiOiAwLCAic3RvcCI6IDE0Mzg3MzcxLCAic3RlcCI6IDF9XSwgImNvbHVtbl9pbmRleGVzIjogW3sibmFtZSI6IG51bGwsICJmaWVsZF9uYW1lIjogbnVsbCwgInBhbmRhc190eXBlIjogInVuaWNvZGUiLCAibnVtcHlfdHlwZSI6ICJvYmplY3QiLCAibWV0YWRhdGEiOiB7ImVuY29kaW5nIjogIlVURi04In19XSwgImNvbHVtbnMiOiBbeyJuYW1lIjogInZlbmRvcl9pZCIsICJmaWVsZF9uYW1lIjogInZlbmRvcl9pZCIsICJwYW5kYXNfdHlwZSI6ICJ1bmljb2RlIiwgIm51bXB5X3R5cGUiOiAib2JqZWN0IiwgIm1ldGFkYXRhIjogbnVsbH0sIHsibmFtZSI6ICJwaWNrdXBfYXQiLCAiZmllbGRfbmFtZSI6ICJwaWNrdXBfYXQiLCAicGFuZGFzX3R5cGUiOiAiZGF0ZXRpbWUiLCAibnVtcHlfdHlwZSI6ICJkYXRldGltZTY0W25zXSIsICJtZXRhZGF0YSI6IG51bGx9LCB7Im5hbWUiOiAiZHJvcG9mZl9hdCIsICJmaWVsZF9uYW1lIjogImRyb3BvZmZfYXQiLCAicGFuZGFzX3R5cGUiOiAiZGF0ZXRpbWUiLCAibnVtcHlfdHlwZSI6ICJkYXRldGltZTY0W25zXSIsICJtZXRhZGF0YSI6IG51bGx9LCB7Im5hbWUiOiAicGFzc2VuZ2VyX2NvdW50IiwgImZpZWxkX25hbWUiOiAicGFzc2VuZ2VyX2NvdW50IiwgInBhbmRhc190eXBlIjogImludDgiLCAibnVtcHlfdHlwZSI6ICJpbnQ4IiwgIm1ldGFkYXRhIjogbnVsbH0sIHsibmFtZSI6ICJ0cmlwX2Rpc3RhbmNlIiwgImZpZWxkX25hbWUiOiAidHJpcF9kaXN0YW5jZSIsICJwYW5kYXNfdHlwZSI6ICJmbG9hdDMyIiwgIm51bXB5X3R5cGUiOiAiZmxvYXQzMiIsICJtZXRhZGF0YSI6IG51bGx9LCB7Im5hbWUiOiAicGlja3VwX2xvbmdpdHVkZSIsICJmaWVsZF9uYW1lIjogInBpY2t1cF9sb25naXR1ZGUiLCAicGFuZGFzX3R5cGUiOiAiZmxvYXQzMiIsICJudW1weV90eXBlIjogImZsb2F0MzIiLCAibWV0YWRhdGEiOiBudWxsfSwgeyJuYW1lIjogInBpY2t1cF9sYXRpdHVkZSIsICJmaWVsZF9uYW1lIjogInBpY2t1cF9sYXRpdHVkZSIsICJwYW5kYXNfdHlwZSI6ICJmbG9hdDMyIiwgIm51bXB5X3R5cGUiOiAiZmxvYXQzMiIsICJtZXRhZGF0YSI6IG51bGx9LCB7Im5hbWUiOiAicmF0ZV9jb2RlX2lkIiwgImZpZWxkX25hbWUiOiAicmF0ZV9jb2RlX2lkIiwgInBhbmRhc190eXBlIjogImVtcHR5IiwgIm51bXB5X3R5cGUiOiAib2JqZWN0IiwgIm1ldGFkYXRhIjogbnVsbH0sIHsibmFtZSI6ICJzdG9yZV9hbmRfZndkX2ZsYWciLCAiZmllbGRfbmFtZSI6ICJzdG9yZV9hbmRfZndkX2ZsYWciLCAicGFuZGFzX3R5cGUiOiAidW5pY29kZSIsICJudW1weV90eXBlIjogIm9iamVjdCIsICJtZXRhZGF0YSI6IG51bGx9LCB7Im5hbWUiOiAiZHJvcG9mZl9sb25naXR1ZGUiLCAiZmllbGRfbmFtZSI6ICJkcm9wb2ZmX2xvbmdpdHVkZSIsICJwYW5kYXNfdHlwZSI6ICJmbG9hdDMyIiwgIm51bXB5X3R5cGUiOiAiZmxvYXQzMiIsICJtZXRhZGF0YSI6IG51bGx9LCB7Im5hbWUiOiAiZHJvcG9mZl9sYXRpdHVkZSIsICJmaWVsZF9uYW1lIjogImRyb3BvZmZfbGF0aXR1ZGUiLCAicGFuZGFzX3R5cGUiOiAiZmxvYXQzMiIsICJudW1weV90eXBlIjogImZsb2F0MzIiLCAibWV0YWRhdGEiOiBudWxsfSwgeyJuYW1lIjogInBheW1lbnRfdHlwZSIsICJmaWVsZF9uYW1lIjogInBheW1lbnRfdHlwZSIsICJwYW5kYXNfdHlwZSI6ICJ1bmljb2RlIiwgIm51bXB5X3R5cGUiOiAib2JqZWN0IiwgIm1ldGFkYXRhIjogbnVsbH0sIHsibmFtZSI6ICJmYXJlX2Ftb3VudCIsICJmaWVsZF9uYW1lIjogImZhcmVfYW1vdW50IiwgInBhbmRhc190eXBlIjogImZsb2F0MzIiLCAibnVtcHlfdHlwZSI6ICJmbG9hdDMyIiwgIm1ldGFkYXRhIjogbnVsbH0sIHsibmFtZSI6ICJleHRyYSIsICJmaWVsZF9uYW1lIjogImV4dHJhIiwgInBhbmRhc190eXBlIjogImZsb2F0MzIiLCAibnVtcHlfdHlwZSI6ICJmbG9hdDMyIiwgIm1ldGFkYXRhIjogbnVsbH0sIHsibmFtZSI6ICJtdGFfdGF4IiwgImZpZWxkX25hbWUiOiAibXRhX3RheCIsICJwYW5kYXNfdHlwZSI6ICJmbG9hdDMyIiwgIm51bXB5X3R5cGUiOiAiZmxvYXQzMiIsICJtZXRhZGF0YSI6IG51bGx9LCB7Im5hbWUiOiAidGlwX2Ftb3VudCIsICJmaWVsZF9uYW1lIjogInRpcF9hbW91bnQiLCAicGFuZGFzX3R5cGUiOiAiZmxvYXQzMiIsICJudW1weV90eXBlIjogImZsb2F0MzIiLCAibWV0YWRhdGEiOiBudWxsfSwgeyJuYW1lIjogInRvbGxzX2Ftb3VudCIsICJmaWVsZF9uYW1lIjogInRvbGxzX2Ftb3VudCIsICJwYW5kYXNfdHlwZSI6ICJmbG9hdDMyIiwgIm51bXB5X3R5cGUiOiAiZmxvYXQzMiIsICJtZXRhZGF0YSI6IG51bGx9LCB7Im5hbWUiOiAidG90YWxfYW1vdW50IiwgImZpZWxkX25hbWUiOiAidG90YWxfYW1vdW50IiwgInBhbmRhc190eXBlIjogImZsb2F0MzIiLCAibnVtcHlfdHlwZSI6ICJmbG9hdDMyIiwgIm1ldGFkYXRhIjogbnVsbH1dLCAiY3JlYXRvciI6IHsibGlicmFyeSI6ICJweWFycm93IiwgInZlcnNpb24iOiAiMC4xNS4xIn0sICJwYW5kYXNfdmVyc2lvbiI6ICIwLjI1LjMifQAGAAAAcGFuZGFzAAASAAAAxAMAAHgDAABEAwAAAAMAAMgCAACMAgAAVAIAACACAADoAQAArAEAAHABAAA8AQAACAEAANgAAACoAAAAdAAAADwAAAAEAAAAlPz//wAAAQMYAAAADAAAAAQAAAAAAAAAyvz//wAAAQAMAAAAdG90YWxfYW1vdW50AAAAAMj8//8AAAEDGAAAAAwAAAAEAAAAAAAAAP78//8AAAEADAAAAHRvbGxzX2Ftb3VudAAAAAD8/P//AAABAxgAAAAMAAAABAAAAAAAAAAy/f//AAABAAoAAAB0aXBfYW1vdW50AAAs/f//AAABAxgAAAAMAAAABAAAAAAAAABi/f//AAABAAcAAABtdGFfdGF4AFj9//8AAAEDGAAAAAwAAAAEAAAAAAAAAI79//8AAAEABQAAAGV4dHJhAAAAhP3//wAAAQMYAAAADAAAAAQAAAAAAAAAuv3//wAAAQALAAAAZmFyZV9hbW91bnQAtP3//wAAAQUUAAAADAAAAAQAAAAAAAAApP3//wwAAABwYXltZW50X3R5cGUAAAAA5P3//wAAAQMYAAAADAAAAAQAAAAAAAAAGv7//wAAAQAQAAAAZHJvcG9mZl9sYXRpdHVkZQAAAAAc/v//AAABAxgAAAAMAAAABAAAAAAAAABS/v//AAABABEAAABkcm9wb2ZmX2xvbmdpdHVkZQAAAFT+//8AAAEFFAAAAAwAAAAEAAAAAAAAAET+//8SAAAAc3RvcmVfYW5kX2Z3ZF9mbGFnAACI/v//AAABARQAAAAMAAAABAAAAAAAAAB4/v//DAAAAHJhdGVfY29kZV9pZAAAAAC4/v//AAABAxgAAAAMAAAABAAAAAAAAADu/v//AAABAA8AAABwaWNrdXBfbGF0aXR1ZGUA7P7//wAAAQMYAAAADAAAAAQAAAAAAAAAIv///wAAAQAQAAAAcGlja3VwX2xvbmdpdHVkZQAAAAAk////AAABAxgAAAAMAAAABAAAAAAAAABa////AAABAA0AAAB0cmlwX2Rpc3RhbmNlAAAAWP///wAAAQIkAAAAFAAAAAQAAAAAAAAACAAMAAgABwAIAAAAAAAAAQgAAAAPAAAAcGFzc2VuZ2VyX2NvdW50AJj///8AAAEKGAAAAAwAAAAEAAAAAAAAAM7///8AAAMACgAAAGRyb3BvZmZfYXQAAMj///8AAAEKIAAAABQAAAAEAAAAAAAAAAAABgAIAAYABgAAAAAAAwAJAAAAcGlja3VwX2F0AAAAEAAUAAgABgAHAAwAAAAQABAAAAAAAAEFGAAAABAAAAAEAAAAAAAAAAQABAAEAAAACQAAAHZlbmRvcl9pZAAAAA==\r\n```\r\n\r\nI'd argue that extra metadata, if it's not part of the Arrow format and can be whatever an application wants to put in there, should not be printed as part of the schema's ToString method. It should be viewable some way, just not always. And IDK what to do with this `ARROW:schema: ` business but it's clearly not readable as is.",
        "created_at": "2019-11-04T23:17:47.000Z",
        "updated_at": "2020-02-21T14:10:02.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-02-21T13:05:46.000Z"
    },
    "comments": [
        {
            "created_at": "2019-11-05T11:19:42.584Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7063?focusedCommentId=16967438) by Joris Van den Bossche (jorisvandenbossche):*\nI also ran into this recently when looking at the reports involving a huge number of columns (although that was in Python, and I see that we don't use the exact same code as the C++ pretty printer: https://github.com/apache/arrow/blob/e0cc9c43276840579a29332aca7348bbc415c051/python/pyarrow/types.pxi#L1245-L1264). \r\n\r\nWe should probably at least truncate the metadata. Personally I would prefer truncating them (so they don't get annoying) instead of not showing them at all, as IMO it is useful to see that the table has metadata.  \r\nWe could for example truncate each entry to a max of 50 characters (adding `...`) while still showing all entries (all keys).\r\n\r\n> And IDK what to do with this `ARROW:schema: ` business but it's clearly not readable as is.\r\n\r\nIt's a the original arrow schema in serialized format. Example with python how it is created when writing a parquet file, and retrieving it again:\r\n\r\n```Java\n\r\nIn [33]: import pyarrow as pa                                                                                                                                                                                      \r\n\r\nIn [34]: table = pa.table(pd.DataFrame({'a': [1, 2, 3]}))                                                                                                                                                          \r\n\r\nIn [35]: table                                                                                                                                                                                                     \r\nOut[35]: \r\npyarrow.Table\r\na: int64\r\nmetadata\r\n--------\r\n{b'pandas': b'{\"index_columns\": [{\"kind\": \"range\", \"name\": null, \"start\": 0, \"'\r\n            b'stop\": 3, \"step\": 1}], \"column_indexes\": [{\"name\": null, \"field_'\r\n            b'name\": null, \"pandas_type\": \"unicode\", \"numpy_type\": \"object\", \"'\r\n            b'metadata\": {\"encoding\": \"UTF-8\"}}], \"columns\": [{\"name\": \"a\", \"f'\r\n            b'ield_name\": \"a\", \"pandas_type\": \"int64\", \"numpy_type\": \"int64\", '\r\n            b'\"metadata\": null}], \"creator\": {\"library\": \"pyarrow\", \"version\":'\r\n            b' \"0.15.1.dev212+g4afe9f0ea\"}, \"pandas_version\": \"0.26.0.dev0+691'\r\n            b'.g157495696.dirty\"}'}\r\n\r\nIn [36]: import pyarrow.parquet as pq                                                                                                                                                                              \r\n\r\nIn [37]: pq.write_table(table, 'test.parquet')                                                                                                                                                                     \r\n\r\nIn [39]: schema = pq.read_schema('test.parquet')                                                                                                                                                                   \r\n\r\nIn [40]: schema                                                                                                                                                                                                    \r\nOut[40]: \r\na: int64\r\nmetadata\r\n--------\r\n{b'ARROW:schema': b'/////4ACAAAQAAAAAAAKAA4ABgAFAAgACgAAAAABAwAQAAAAAAAKAAwA'\r\n                  b'AAAEAAgACgAAAAgCAAAEAAAAAQAAAAwAAAAIAAwABAAIAAgAAAAIAAAA'\r\n                  b'EAAAAAYAAABwYW5kYXMAANMBAAB7ImluZGV4X2NvbHVtbnMiOiBbeyJr'\r\n                  b'aW5kIjogInJhbmdlIiwgIm5hbWUiOiBudWxsLCAic3RhcnQiOiAwLCAi'\r\n                  b'c3RvcCI6IDMsICJzdGVwIjogMX1dLCAiY29sdW1uX2luZGV4ZXMiOiBb'\r\n                  b'eyJuYW1lIjogbnVsbCwgImZpZWxkX25hbWUiOiBudWxsLCAicGFuZGFz'\r\n                  b'X3R5cGUiOiAidW5pY29kZSIsICJudW1weV90eXBlIjogIm9iamVjdCIs'\r\n                  b'ICJtZXRhZGF0YSI6IHsiZW5jb2RpbmciOiAiVVRGLTgifX1dLCAiY29s'\r\n                  b'dW1ucyI6IFt7Im5hbWUiOiAiYSIsICJmaWVsZF9uYW1lIjogImEiLCAi'\r\n                  b'cGFuZGFzX3R5cGUiOiAiaW50NjQiLCAibnVtcHlfdHlwZSI6ICJpbnQ2'\r\n                  b'NCIsICJtZXRhZGF0YSI6IG51bGx9XSwgImNyZWF0b3IiOiB7ImxpYnJh'\r\n                  b'cnkiOiAicHlhcnJvdyIsICJ2ZXJzaW9uIjogIjAuMTUuMS5kZXYyMTIr'\r\n                  b'ZzRhZmU5ZjBlYSJ9LCAicGFuZGFzX3ZlcnNpb24iOiAiMC4yNi4wLmRl'\r\n                  b'djArNjkxLmcxNTc0OTU2OTYuZGlydHkifQABAAAAFAAAABAAFAAIAAYA'\r\n                  b'BwAMAAAAEAAQAAAAAAABAiQAAAAUAAAABAAAAAAAAAAIAAwACAAHAAgA'\r\n                  b'AAAAAAABQAAAAAEAAABhAAAA',\r\n b'pandas': b'{\"index_columns\": [{\"kind\": \"range\", \"name\": null, \"start\": 0, \"'\r\n            b'stop\": 3, \"step\": 1}], \"column_indexes\": [{\"name\": null, \"field_'\r\n            b'name\": null, \"pandas_type\": \"unicode\", \"numpy_type\": \"object\", \"'\r\n            b'metadata\": {\"encoding\": \"UTF-8\"}}], \"columns\": [{\"name\": \"a\", \"f'\r\n            b'ield_name\": \"a\", \"pandas_type\": \"int64\", \"numpy_type\": \"int64\", '\r\n            b'\"metadata\": null}], \"creator\": {\"library\": \"pyarrow\", \"version\":'\r\n            b' \"0.15.1.dev212+g4afe9f0ea\"}, \"pandas_version\": \"0.26.0.dev0+691'\r\n            b'.g157495696.dirty\"}'}\r\n\r\nIn [44]: original_schema_encoded = schema.metadata[b'ARROW:schema']                                                                                                                                                 \r\n\r\nIn [45]: import base64                                                                                                                                                                                             \r\n\r\nIn [46]: original_schema = pa.read_schema(pa.BufferReader(base64.b64decode(original_schema_encoded)))                                                                                                                      \r\n\r\nIn [47]: original_schema                                                                                                                                                                                           \r\nOut[47]: \r\na: int64\r\nmetadata\r\n--------\r\n{b'pandas': b'{\"index_columns\": [{\"kind\": \"range\", \"name\": null, \"start\": 0, \"'\r\n            b'stop\": 3, \"step\": 1}], \"column_indexes\": [{\"name\": null, \"field_'\r\n            b'name\": null, \"pandas_type\": \"unicode\", \"numpy_type\": \"object\", \"'\r\n            b'metadata\": {\"encoding\": \"UTF-8\"}}], \"columns\": [{\"name\": \"a\", \"f'\r\n            b'ield_name\": \"a\", \"pandas_type\": \"int64\", \"numpy_type\": \"int64\", '\r\n            b'\"metadata\": null}], \"creator\": {\"library\": \"pyarrow\", \"version\":'\r\n            b' \"0.15.1.dev212+g4afe9f0ea\"}, \"pandas_version\": \"0.26.0.dev0+691'\r\n            b'.g157495696.dirty\"}'}\r\n\r\n```"
        },
        {
            "created_at": "2020-01-14T23:50:06.156Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7063?focusedCommentId=17015493) by Neal Richardson (npr):*\nIMO the extra metadata should be accessible by some property/method on the schema, so you can get at it and view it and parse it or whatever you want, but it doesn't belong in the simple pretty print method.\r\n\r\nI'm fine with writing it my way in R (i.e. schema print only prints its fields, assuming I can iterate over the Fields in a Schema and print each), and if y'all like how that looks, we can consider making that the C++ behavior."
        },
        {
            "created_at": "2020-01-15T20:18:14.830Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7063?focusedCommentId=17016295) by Joris Van den Bossche (jorisvandenbossche):*\nA reason to have at least some truncated form of it (it can be short), is that two tables/schemas are not equal if their metadata is not equal. So having nothing about it in the simple pretty print can also be quite confusing.\r\n\r\n\u00a0\r\n\r\n> I'm fine with writing it my way in R (i.e. schema print only prints its fields, assuming I can iterate over the Fields in a Schema and print each), and if y'all like how that looks, we can consider making that the C++ behavior.\r\n\r\n\u00a0\r\n\r\nCan you post an example?"
        },
        {
            "created_at": "2020-01-15T20:33:11.610Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7063?focusedCommentId=17016303) by Neal Richardson (npr):*\nWhat I have in mind is in the output in the ticket description: everything above the line that says `-- metadata --`"
        },
        {
            "created_at": "2020-01-15T20:35:02.086Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7063?focusedCommentId=17016304) by Neal Richardson (npr):*\nFrom my perspective, it's not a problem that the metadata isn't printed as long as I can access it and print it if I choose. I.e. I can `print(schema)` and then `print(schema.metadata)` if I want. "
        },
        {
            "created_at": "2020-01-16T10:20:46.458Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7063?focusedCommentId=17016787) by Joris Van den Bossche (jorisvandenbossche):*\n> I can `print(schema)` and then `print(schema.metadata)` if I want.\u00a0\r\n\r\nYes, but if you don't see any metadata clue in  `print(schema)`, will one think about to do `print(schema.metadata)` ?\r\n\r\nNote, it certainly doesn't need to be long, eg just a few characters can already be informative to highlight the presence, eg (using the top example)\r\n\r\n```Java\n\r\nvendor_id: string\r\npickup_at: timestamp[us]\r\ndropoff_at: timestamp[us]\r\npassenger_count: int8\r\ntrip_distance: float\r\npickup_longitude: float\r\npickup_latitude: float\r\nrate_code_id: null\r\nstore_and_fwd_flag: string\r\ndropoff_longitude: float\r\ndropoff_latitude: float\r\npayment_type: string\r\nfare_amount: float\r\nextra: float\r\nmta_tax: float\r\ntip_amount: float\r\ntolls_amount: float\r\ntotal_amount: float\r\n-- metadata --\r\npandas: {\"index_columns\": [{\"kind\": \"range\", \"name\": null, \"start\":.... [truncated]\r\nARROW:schema: /////3gOAAAQAAAAAAAKAA4ABgAFAAgACgAAAAABAwA... [truncated]\r\n```"
        },
        {
            "created_at": "2020-01-16T10:22:34.778Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7063?focusedCommentId=17016789) by Joris Van den Bossche (jorisvandenbossche):*\nTo add: this pretty print is for example used in test error messages, when asserting equality of schema. For such a situation, where the metadata might be the reason they are not equal, it would be less informative than now to remove the metadata alltogether, as then you can have a message saying the schema's are not equal, while showing two seemingly equal schema's."
        },
        {
            "created_at": "2020-02-19T13:24:38.526Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7063?focusedCommentId=17040024) by Wes McKinney (wesm):*\nI will add an option to `Schema::ToString` and `Field::ToString` to suppress the output of metadata. "
        },
        {
            "created_at": "2020-02-21T13:05:46.581Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7063?focusedCommentId=17041842) by Francois Saint-Jacques (fsaintjacques):*\nIssue resolved by pull request 6472\n<https://github.com/apache/arrow/pull/6472>"
        }
    ]
}