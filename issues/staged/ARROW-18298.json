{
    "issue": {
        "title": "[Python] datetime shifted when using pyarrow.Table.from_pandas to load a pandas DateFrame containing datetime with timezone",
        "body": "***Note**: This issue was originally created as [ARROW-18298](https://issues.apache.org/jira/browse/ARROW-18298). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nProblem:\r\n\r\nWhen using pyarrow.Table.from_pandas to load a pandas DataFrame which contains a timestamp object with timezone information, the created Table object will shift the datetime, while still keeping the timezone information. Please see my scripts.\r\n\r\n\u00a0\r\n\r\nReproduce scripts:\r\n```java\n\r\nimport pandas as pd\r\nimport pyarrow\r\nts = pd.Timestamp(\"2022-10-21 22:46:17\", tz=\"America/Los_Angeles\")\r\ndf = pd.DataFrame({\"TS\": [ts]})\r\ntable = pyarrow.Table.from_pandas(df)\r\n\r\nprint(df)\r\n\"\"\"\r\n                         TS\r\n0 2022-10-21 22:46:17-07:00\r\n\"\"\"\r\n\r\nprint(table)\r\n\"\"\"\r\npyarrow.Table\r\nTS: timestamp[ns, tz=America/Los_Angeles]\r\n----\r\nTS: [[2022-10-22 05:46:17.000000000]]\"\"\" \n```\r\nExpected results:\r\n\r\nThe table should not shift the datetime when timezone information is provided.",
        "created_at": "2022-11-10T00:43:46.000Z",
        "updated_at": "2022-11-18T11:13:59.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-11-14T10:09:33.533Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18298?focusedCommentId=17633652) by Miles Granger (milesgranger):*\nI thought initially it was just how it was presented, as going back to pandas in this example from the table gives the \"correct\" representation of the value:\r\n```python\n\r\nimport pandas as pd\r\nimport pyarrow\r\nts = pd.Timestamp(\"2022-10-21 22:46:17\", tz=\"America/Los_Angeles\")\r\ndf = pd.DataFrame(\\{\"TS\": [ts]})\r\ntable = pyarrow.Table.from_pandas(df)\r\n\r\nprint(df)\r\n#\u00a0  \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0TS\r\n# 0 2022-10-21 22:46:17-07:00\r\n\r\nprint(table.to_pandas())\r\n#\u00a0  \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0TS\r\n# 0 2022-10-21 22:46:17-07:00\r\n```\r\nHowever, placing mixed timezones makes the behavior more apparent in that it is coercing to the first timezone.\r\n```python\n\r\nts = pd.Timestamp(\"2022-10-21 22:46:17\", tz=\"America/Los_Angeles\")\r\ndf = pd.DataFrame({\"TS\": [ts, pd.Timestamp(\"2022-10-21 22:46:17\", tz=\"UTC\")]})\r\ntable = pyarrow.Table.from_pandas(df)\r\n\r\nprint(df)\r\n#                           TS\r\n# 0  2022-10-21 22:46:17-07:00\r\n# 1  2022-10-21 22:46:17+00:00\r\n\r\nprint(table)\r\n# pyarrow.Table\r\n# TS: timestamp[us, tz=America/Los_Angeles]\r\n# ----\r\n# TS: [[2022-10-22 05:46:17.000000,2022-10-21 22:46:17.000000]]\r\n\r\nprint(table.to_pandas())\r\n#                          TS\r\n# 0 2022-10-21 22:46:17-07:00\r\n# 1 2022-10-21 15:46:17-07:00\r\n```\r\nI believe `TimestampArray` needs to store everything in the array similarly, and that's why it's doing this. I'm not sure what the right solution here is at the moment. In some way it seems like it's doing us a favor by aligning the values to the same timezone, as the first mixing of timezones gives an `object` dtype for that column, while after doing the roundtrip, it (the pandas Series) gets the arguably better `datetime64[ns, America/Los_Angeles]` dtype."
        },
        {
            "created_at": "2022-11-18T11:12:47.987Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18298?focusedCommentId=17635819) by Joris Van den Bossche (jorisvandenbossche):*\n> I thought initially it was just how it was presented, as going back to pandas in this example from the table gives the \"correct\" representation of the value:\r\n\r\nYes, this is in this case the cause of the confusion. The dates are not \"wrong\" after conversion to arrow, they are just confusingly printed in UTC without any indication of this. We have ARROW-14567 to track this issue.\r\n\r\n> However, placing mixed timezones makes the behavior more apparent in that it is coercing to the first timezone.\r\n\r\nThat's a separate issue (and something that doesn't happen that often, for example also pandas requires a single timezone for a column, if you have a datetime64 dtype). But indeed, Arrow's timestamp type requires a single timezone, and thus when encountering multiple ones, we currently coerce to the first one. I think it would be better to coerce to UTC instead (-> ARROW-5912). \r\nThere is some discussion about the use case of actually having multiple timezones in a single array at ARROW-16540\r\n\r\n"
        }
    ]
}