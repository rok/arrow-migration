{
    "issue": {
        "title": "[R] open_dataset() silently drops the missing values from a csv file",
        "body": "***Note**: This issue was originally created as [ARROW-16863](https://issues.apache.org/jira/browse/ARROW-16863). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe `open_dataset()` silently drops the empty/missing values from a csv file. This empty string was generated when writing a dataframe containing a NA value using the `{}write_csv_arrow(){`}.\r\n\r\n\u00a0\r\n```java\n\r\ndf_numbers <- tibble::tibble(number = c(1, 2, \"error\", 4, 5, NA, 7, 8))\r\narrow::write_csv_arrow(df_numbers, \"numbers.csv\")\r\nreadLines(\"numbers.csv\")\r\n#> [1] \"\\\"number\\\"\" \"\\\"1\\\"\" \u00a0 \u00a0 \u00a0\"\\\"2\\\"\" \u00a0 \u00a0 \u00a0\"\\\"error\\\"\" \u00a0\"\\\"4\\\"\" \u00a0 \u00a0\u00a0\r\n#> [6] \"\\\"5\\\"\" \u00a0 \u00a0 \u00a0\"\" \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"\\\"7\\\"\" \u00a0 \u00a0 \u00a0\"\\\"8\\\"\"\r\narrow::open_dataset(\"numbers.csv\", format = \"csv\") |> dplyr::collect()\r\n#> # A tibble: 7 x 1\r\n#> \u00a0 number\r\n#> \u00a0 <chr>\u00a0\r\n#> 1 1 \u00a0 \u00a0\u00a0\r\n#> 2 2 \u00a0 \u00a0\u00a0\r\n#> 3 error\u00a0\r\n#> 4 4 \u00a0 \u00a0\u00a0\r\n#> 5 5 \u00a0 \u00a0\u00a0\r\n#> 6 7 \u00a0 \u00a0\u00a0\r\n#> 7 8\r\n```\r\n\u00a0",
        "created_at": "2022-06-20T09:35:22.000Z",
        "updated_at": "2022-07-13T17:14:22.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-07-13T17:14:22.000Z"
    },
    "comments": [
        {
            "created_at": "2022-07-13T17:13:55.295Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16863?focusedCommentId=17566426) by Neal Richardson (npr):*\nI think this is only an issue because the \"csv\" just has a single column (no commas involved really). So your missing value shows up as just an extra newline character. This behavior is consistent with base::read.csv() and readr::read_csv():\r\n\r\n```Java\n\r\n> read.csv(\"numbers.csv\")\r\n  number\r\n1      1\r\n2      2\r\n3  error\r\n4      4\r\n5      5\r\n6      7\r\n7      8\r\n> readr::read_csv(\"numbers.csv\")\r\n                                                                                                         Rows: 7 Columns: 1\r\n\u2500\u2500 Column specification \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\nDelimiter: \",\"\r\nchr (1): number\r\n\r\n\u2139 Use `spec()` to retrieve the full column specification for this data.\r\n\u2139 Specify the column types or set `show_col_types = FALSE` to quiet this message.\r\n# A tibble: 7 \u00d7 1\r\n  number\r\n  <chr> \r\n1 1     \r\n2 2     \r\n3 error \r\n4 4     \r\n5 5     \r\n6 7     \r\n7 8  \r\n```\r\n\r\nAnd if you have more than one column, there is no issue:\r\n\r\n```Java\n\r\n> df_numbers$num2 <- df_numbers$number\r\n> tf <- tempfile()\r\n> write_csv_arrow(df_numbers, tf)\r\n> open_dataset(tf, format = \"csv\") %>% collect()\r\n# A tibble: 8 \u00d7 2\r\n  number  num2   \r\n  <chr>   <chr>  \r\n1 \"1\"     \"1\"    \r\n2 \"2\"     \"2\"    \r\n3 \"error\" \"error\"\r\n4 \"4\"     \"4\"    \r\n5 \"5\"     \"5\"    \r\n6 \"\"      \"\"     \r\n7 \"7\"     \"7\"    \r\n8 \"8\"     \"8\"    \r\n```\r\n"
        }
    ]
}