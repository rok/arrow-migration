{
    "issue": {
        "title": "[Java] Provide RLE vector",
        "body": "***Note**: This issue was originally created as [ARROW-6307](https://issues.apache.org/jira/browse/ARROW-6307). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nRLE (run length encoding) is a widely used encoding/decoding technique. Compared with other encoding/decoding techniques, it is easier to work with the encoded data.\u00a0\r\n \u00a0\r\n We want to provide an RLE vector implementation in Arrow. The design details include:\r\n \u00a0\r\n 1. RleVector implements ValueVector.\r\n2. the data structure of RleVector includes an inner vector, plus a buffer storing the end indices for runs.\u00a0\r\n3. we provide random access, with time complexity O(log(n)), so it should not be used frequently.\r\n 4. In the future, we will provide iterators to access the vector in sequence.\r\n 5. RleVector does not support update, but supports appending.\r\n 6. In the future, we will provide encoder/decoder to efficiently transform encoded/decoded vectors.\r\n \u00a0",
        "created_at": "2019-08-21T12:34:03.000Z",
        "updated_at": "2020-02-13T01:24:03.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Java",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-02-13T01:24:03.000Z"
    },
    "comments": []
}