{
    "issue": {
        "title": "[C++][Parquet] Read and write nested Parquet data with a mix of struct and list nesting levels",
        "body": "***Note**: This issue was originally created as [ARROW-1644](https://issues.apache.org/jira/browse/ARROW-1644). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWe have many nested parquet files generated from Apache Spark for ranking problems, and we would like to load them in python for other programs to consume. \n\nThe schema looks like \n```java\nroot\n |-- profile_id: long (nullable = true)\n |-- country_iso_code: string (nullable = true)\n |-- items: array (nullable = false)\n |    |-- element: struct (containsNull = false)\n |    |    |-- show_title_id: integer (nullable = true)\n |    |    |-- duration: double (nullable = true)\n```\n\nAnd when I tried to load it with nightly build pyarrow on Oct 4, 2017, I got the following error.\n```python\nPython 3.6.2 |Anaconda, Inc.| (default, Sep 30 2017, 18:42:57) \n[GCC 7.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import numpy as np\n>>> import pandas as pd\n>>> import pyarrow as pa\n>>> import pyarrow.parquet as pq\n>>> table2 = pq.read_table('part-00000')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/home/dbt/miniconda3/lib/python3.6/site-packages/pyarrow/parquet.py\", line 823, in read_table\n    use_pandas_metadata=use_pandas_metadata)\n  File \"/home/dbt/miniconda3/lib/python3.6/site-packages/pyarrow/parquet.py\", line 119, in read\n    nthreads=nthreads)\n  File \"_parquet.pyx\", line 466, in pyarrow._parquet.ParquetReader.read_all\n  File \"error.pxi\", line 85, in pyarrow.lib.check_status\npyarrow.lib.ArrowNotImplementedError: lists with structs are not supported.\n```\n\nI somehow get the impression that after https://issues.apache.org/jira/browse/PARQUET-911 is merged, we should be able to load the nested parquet in pyarrow. \n\nAny insight about this? \n\nThanks.",
        "created_at": "2017-10-05T00:43:40.000Z",
        "updated_at": "2021-09-25T13:14:17.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-10-22T03:13:39.000Z"
    },
    "comments": [
        {
            "created_at": "2017-10-05T00:55:58.019Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=16192314) by Wes McKinney (wesm):*\nAt the moment we do not have mixed-nesting reading and writing implemented. If the nesting levels are all repeated (lists) or all groups (structs) vs. a mix (structs and lists/repeated fields) then we can read and write them. I recently wrote an important patch to help with this (PARQUET-1100 https://github.com/apache/parquet-cpp/commit/4b09ac703bc75fee72f94bed8ecfe571096b04c1), but we could really use some help with the encoding and decoding of nested data. I will eventually get to it if no one else does but that could be anytime from 1 month from now to 6 months from now given how many other projects I have before me. "
        },
        {
            "created_at": "2017-10-05T00:57:38.553Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=16192319) by Wes McKinney (wesm):*\nI updated the issue metadata"
        },
        {
            "created_at": "2017-10-05T01:25:48.130Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=16192346) by DB Tsai (dbtsai):*\n`[~wesmckinn]` Thanks for the detail reply. Are you saying that in parquet-cpp side, it already supports it but we require some work on the python side? It will be really nice to see it's supported in pyarrow since most of the data in my team is in this mixed-nesting format. "
        },
        {
            "created_at": "2017-10-05T01:28:21.704Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=16192349) by Wes McKinney (wesm):*\nThe work is pretty much all on the parquet-cpp side, so strictly an Arrow <-> Parquet nested encoding conversion problem in C++. We'll want to have unit tests in pyarrow to verify that we can faithfully round trip the data of course. I think Python will be useful for generating schemas and synthetic data sets to find edge cases"
        },
        {
            "created_at": "2018-05-12T16:44:41.198Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=16473191) by Joshua Storck (joshuastorck):*\nThe reading half of this issue is addressed by this: https://github.com/apache/parquet-cpp/pull/462. Perhaps we should split this into two separate issues?"
        },
        {
            "created_at": "2018-08-29T02:36:08.422Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=16595863) by Charles Pritchard (Downchuck):*\nI came across this use case with some code that's using nested data with namedtuple, looking to use pyarrow as part of serialization/deserialization to Parquet. context.register of course works for namedtuple but there's no happy way to get to pa.Table.\r\n\r\n\u00a0\r\n\r\n\u00a0"
        },
        {
            "created_at": "2018-12-20T17:56:41.471Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=16726084) by Francisco Sanchez (FJ_Sanchez):*\nAny future plans for this feature?"
        },
        {
            "created_at": "2018-12-20T18:29:42.619Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=16726114) by Wes McKinney (wesm):*\nIt's in the issue tracker. The work will eventually get done but it's hard to say when"
        },
        {
            "created_at": "2019-02-11T18:59:59.156Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=16765278) by Wes McKinney (wesm):*\nIt's dubious whether this will be completed in 0.13 but I plan to start working on it with target completion in time for 0.14 (~end of May 2019)"
        },
        {
            "created_at": "2019-03-05T20:20:25.183Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=16784864) by David Lee (davlee1972@yahoo.com):*\nI've been able to write parquet columns which are lists, but I haven't been able to write a column which is a list of struct(s)\r\n\r\nThis works:\r\n```java\n\r\nschema = pa.schema([\r\n    pa.field('test_id', pa.string()),\r\n    pa.field('a', pa.list_(pa.string())),\r\n    pa.field('b', pa.list_(pa.int32()))\r\n])\r\n```\r\nThis structure isn't supported yet\r\n```java\n\r\nschema = pa.schema([\r\n    pa.field('test_id', pa.string()),\r\n    pa.field('testlist', pa.list_(pa.struct([('a', pa.string()), ('b', pa.int32())])))\r\n])\r\n\r\nnew_records = list()\r\nnew_records.append({'test_id': '123', 'testlist': [{'a': 'xyz', 'b': 22}]})\r\nnew_records.append({'test_id': '789', 'testlist': [{'a': 'aaa', 'b': 33}]})\r\n\r\narrow_columns = list()\r\n\r\nfor column in schema.names:\r\n    arrow_columns.append(pa.array([v[column] for v in new_records], type=schema.types[schema.get_field_index(column)]))\r\n\r\narrow_table = pa.Table.from_arrays(arrow_columns, schema.names)\r\n\r\narrow_table\r\narrow_table[0]\r\narrow_table[1]\r\narrow_table[1][0]\r\narrow_table[1][1]\r\n\r\n>>> pq.write_table(arrow_table, \"test.parquet\")\r\nTraceback (most recent call last):\r\npackages/pyarrow/parquet.py\", line 1160, in write_table\r\nwriter.write_table(table, row_group_size=row_group_size)\r\nself.writer.write_table(table, row_group_size=row_group_size)\r\nFile \"pyarrow/_parquet.pyx\", line 924, in pyarrow._parquet.ParquetWriter.write_table\r\nFile \"pyarrow/error.pxi\", line 81, in pyarrow.lib.check_status\r\npyarrow.lib.ArrowInvalid: Nested column branch had multiple children\r\n\r\n```\r\nSupporting structs is the missing piece to being able to save structured JSON as columnar parquet which would make json searchable."
        },
        {
            "created_at": "2019-07-03T02:36:42.157Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=16877438) by Wes McKinney (wesm):*\n[~emkornfield@gmail.com] please keep in mind there are multiple styles of nested data encoding (1-, 2-, and 3-level list encoding), this can be known from the schema so we'll probably need to support all 3 kinds"
        },
        {
            "created_at": "2019-07-03T03:05:55.171Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=16877444) by Micah Kornfield (emkornfield@gmail.com):*\n`[~wesmckinn]` are you referencing https://github.com/apache/parquet-format/blob/master/LogicalTypes.md#nested-types?"
        },
        {
            "created_at": "2019-07-03T15:56:21.985Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=16877937) by Wes McKinney (wesm):*\nYes, essentially. \r\n\r\n1-level encoding\r\n\r\n```Java\n\r\ngroup schema {\r\n  optional INT32 some_other_value\r\n  repeated T list_item;\r\n}\r\n```\r\n\r\n2-level encoding (I think? need to confirm my understanding)\r\n\r\n```Java\n\r\ngroup schema {\r\n  optional INT32 some_other_value\r\n  repeated group list_value {\r\n    optional/required T list_item;\r\n  }\r\n}\r\n```\r\n\r\n3-level encoding\r\n\r\n```Java\n\r\ngroup schema {\r\n  optional INT32 some_other_value\r\n  optional/required group list_value LIST {\r\n    repeated group box {\r\n      optional/required T list_item;\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nnote\r\n\r\n- The 1-level encoding can only encode `array<item NOT NULL> NOT NULL`. \n- The 2-level encoding can only encode `array<item> NOT NULL`\n- The 3-level encoding can encode either nullity of list items or the lists themselves `array<item [nullable?]> [nullable?]`\n  \n  The decode path is slightly different for the 1/2 level cases"
        },
        {
            "created_at": "2019-07-22T15:19:19.310Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=16890246) by Micah Kornfield (emkornfield@gmail.com):*\nSince there has been some interest on the old PR, I'll give a quick status update.\r\n\r\nI'm about 50% done getting the write path finished, I hope to have this done by end of this week or next.\u00a0 I'll then be starting on the read path.\u00a0 It is likely I will try to leverage some code from the old PR or\u00a0<https://github.com/apache/arrow/pull/4066>\u00a0but will have a better idea once I take a close look."
        },
        {
            "created_at": "2019-08-19T14:48:02.517Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=16910452) by Brendan Hogan (bhogan-mitre):*\nHello, I'm interested in the latest status here and when it may be available for use.\u00a0 I know there is work-in-progress by [~emkornfield@gmail.com]\u00a0and maybe others, although as it's been four weeks since an update I thought it was worth a check.\u00a0 Thanks in advance for any info (and the work on this)!"
        },
        {
            "created_at": "2019-08-19T19:12:38.750Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=16910669) by Wes McKinney (wesm):*\nI'm not aware of any updates; there are no patches available yet"
        },
        {
            "created_at": "2019-08-20T05:30:28.072Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=16911011) by Micah Kornfield (emkornfield@gmail.com):*\n`[~bhogan-mitre]` \u00a0there isn't much an update.\u00a0 I put this off a little because `[~wesmckinn]` was doing some major refactoring.\u00a0 If you want to contribute, we can probably divide the work for read and write ( `[~wesmckinn]` are you planning on anything else major with the arrow parquet code?)"
        },
        {
            "created_at": "2019-08-20T13:56:59.834Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=16911378) by Wes McKinney (wesm):*\nNope, the large projects I had planned are done. The only further work I'd be interested in would be expanding the encoders / low-level column reader/writer classes to handle more dictionary-encoded types. None of that should affect the nested data disassembly / reassembly logic. One of my goals with these recent refactors was actually to move the \"flat\" serialization/deserialization code \"out of the way\" (since the prior effort on this caused performance regressions on flat data)"
        },
        {
            "created_at": "2019-08-20T14:48:06.784Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=16911426) by Brian Phillips (bphillips646):*\nMy main use case for (py)arrow is converting very nested protobuf data to parquet for storage. Currently I'm\u00a0forced to store as json instead because there is no nested data support. Would love to see this implemented, but unfortunately can't be much help as I don't know C++."
        },
        {
            "created_at": "2019-08-20T21:02:34.145Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=16911731) by Wes McKinney (wesm):*\nNote that contributing to other parts of the project helps free up developers to work on larger projects like this. "
        },
        {
            "created_at": "2019-11-07T17:55:26.829Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=16969465) by William Young (williamyoung):*\nAre there plans to merge this code? I have a use-case."
        },
        {
            "created_at": "2019-11-08T01:29:39.042Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=16969712) by Micah Kornfield (emkornfield@gmail.com):*\nThe code isn't really super useable since it is based on the old repo and a lot of changes have been made (and it had a performance regression).\u00a0 I haven't had time to work on this, but still hope to get some bandwidth in the next month or so.\u00a0 But if there are motivated parties I'm happy to remove my name from the assignment."
        },
        {
            "created_at": "2019-11-21T14:24:07.412Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=16979315) by Rinke Hoekstra (RinkeHoekstra):*\nI was just trying this with the example found in the pyarrow docs at <http://arrow.apache.org/docs/python/json.html>\r\n\r\nThe documented example does not work. Is this related to this issue, or is it another matter?\r\n\r\nIt says to load the following JSON file:\r\n\r\n`{\"a\": [1, 2], \"b\": {\"c\": true, \"d\": \"1991-02-03\"`}}\r\n `{\"a\": [3, 4, 5], \"b\": {\"c\": false, \"d\": \"2019-04-01\"`}}\r\n\r\nI fixed this to make it valid (but that's another issue):\r\n\r\n`[{\"a\": [1, 2], \"b\": {\"c\": true, \"d\": \"1991-02-03\"`,}}\r\n `{\"a\": [3, 4, 5], \"b\": {\"c\": false, \"d\": \"2019-04-01\"`]}}\r\n\r\nThen reading the JSON from a file called `my_data.json`:\r\n\r\n`from pyarrow import json`\r\n table = json.read_json(\"my_data.json\")\r\n\r\nGives the following error:\r\n\r\n`{{---------------------------------------------------------------------------`}}\r\n` ArrowInvalid Traceback (most recent call last)`\r\n` <ipython-input-69-f974c21f0941> in <module>()`\r\n` 1 from pyarrow import json`}}\r\n ----> 2 table = json.read_json('test.json')\r\n\r\n`~/.local/share/virtualenvs/parquet-ifRxINoC/lib/python3.7/site-packages/pyarrow/_json.pyx in pyarrow._json.read_json()`\r\n\r\n`~/.local/share/virtualenvs/parquet-ifRxINoC/lib/python3.7/site-packages/pyarrow/error.pxi in pyarrow.lib.check_status()`\r\n\r\n`ArrowInvalid: JSON parse error: A column changed from object to array`"
        },
        {
            "created_at": "2019-11-21T14:33:26.143Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=16979326) by Joris Van den Bossche (jorisvandenbossche):*\n`[~RinkeHoekstra]` that looks unrelated (the json reader is mostly independent from the parquet IO).  Can you open a separate JIRA ticket?"
        },
        {
            "created_at": "2019-11-21T15:25:47.329Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=16979362) by David Lee (davlee1972@yahoo.com):*\nThe format is valid. [http://jsonlines.org](http://jsonlines.org/)\r\n Line delimited json is a better format for data since you can leverage threads to speed up read operations.\r\n\r\nYou also added a comma and bracket incorrectly which turned valid jsonl to invalid json. They should be outside the curly braces.\r\n\r\n`[{\"a\":\u00a0[1, 2], \"b\": {\"c\": true, \"d\": \"1991-02-03\"`}},\r\n`{\"a\":\u00a0[3, 4, 5], \"b\": {\"c\": false, \"d\": \"2019-04-01\"`}} ]"
        },
        {
            "created_at": "2019-11-21T15:33:58.234Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=16979367) by Rinke Hoekstra (RinkeHoekstra):*\n[~davlee1972@yahoo.com] good point about the multi-threaded loading, but (at the risk of being pedantic) it is valid JSON Lines, but not valid JSON: most if not all JSON parsers will raise an exception at the missing enclosing brackets and missing comma.\r\n\r\nIn any case, the issue is now raised at: https://issues.apache.org/jira/browse/ARROW-7226"
        },
        {
            "created_at": "2020-01-30T17:39:59.031Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=17026874) by Zack Gancarz (bighackerzack):*\nHi Wes, any progress on this one? Seems like it's a common use case as a lot of people have the use case to save nested protobuffs to .parquet.\r\n\r\nThank you kindly"
        },
        {
            "created_at": "2020-01-30T22:36:01.655Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=17027060) by Wes McKinney (wesm):*\nPlease see the recent e-mail discussion https://lists.apache.org/thread.html/r831c41a3f9b353cfc187dc2092515fe707d4ebf13cbb727524f1c600%40%3Cdev.arrow.apache.org%3E"
        },
        {
            "created_at": "2020-04-17T03:44:57.028Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=17085408) by Micah Kornfield (emkornfield@gmail.com):*\nFor anyone that is interested in reading mixed level data, if there is an ability to provide sample parquet files (probably no more then 5-10MB of data) to run microbenchmarks against it would help ensure we are writing code with the right trade-off."
        },
        {
            "created_at": "2020-04-17T23:56:45.797Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=17086167) by Dmitry Kalinkin (veprbl):*\nHere: https://transfer.sh/w4IQ0/test_nested.parquet\r\nThis is written with rust/parquet and tested to be readable with parquet-tools"
        },
        {
            "created_at": "2020-06-05T15:05:40.456Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=17126858) by Eric Czech (eric-czech):*\nThis may be another useful example: <https://storage.googleapis.com/open-targets-data-releases/20.04/input/evidence-files/progeny-2018-07-23.json.gz>\r\n\r\nIt's a 620K (uncompressed) set of json records with gene pathways that regulate various types of cancer.\u00a0 It has a good mix of structs within structs, arrays with structs, arrays of structs that are themselves in other structs, etc.\u00a0\u00a0"
        },
        {
            "created_at": "2020-06-05T16:11:47.778Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=17126918) by Wes McKinney (wesm):*\nThanks. We should follow up on the mailing list discussion and see what is the latest game plan for implementing the Parquet nested reader. Some of my colleagues should be able to help"
        },
        {
            "created_at": "2020-07-20T20:38:16.582Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=17161520) by Luke Higgins (virtualluke):*\nHas there been any more discussion on this in the mailing list? This as a feature would cause me to move a lot more to pyarrow and parquet that are sadly json today. Thanks!"
        },
        {
            "created_at": "2020-07-21T03:39:16.274Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=17161681) by Micah Kornfield (emkornfield@gmail.com):*\nwe've discussed it and there has been some work done but still more to do.\u00a0 Its been a slow process due to personal bandwidth constraints."
        },
        {
            "created_at": "2020-07-27T22:18:26.076Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=17165988) by Wes McKinney (wesm):*\nI know that it's going to be a priority for my colleagues and I between now and the next release (2.0.0) to help this get done, some people are having vacations right now but we should have more bandwidth to assist with writing test cases and benchmarks (and helping with the implementation) in August. "
        },
        {
            "created_at": "2020-08-07T21:20:23.033Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=17173474) by Hui Gao (fulluey):*\nAny update? We are really blocked by this. The write path works fine. But can't read any struct/map type from the file. Thanks."
        },
        {
            "created_at": "2020-08-09T03:41:19.158Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=17173739) by Micah Kornfield (emkornfield@gmail.com):*\n\u00a0 `[~fulluey]` \u00a0I'm glad the write path works fine, there are no more updates.\u00a0 Please follow pull requests for child issues here.\u00a0 I hope you are confirming the ability to read back your data in another system.\u00a0 A bug was recently discovered if you have nullable structs as direct ancestors of leaf columns (ARROW-9598).\u00a0\u00a0"
        },
        {
            "created_at": "2020-08-21T07:10:33.185Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=17181668) by shadowdsp (shadowdsp):*\n`[~fulluey]` Hello, I want to know how you solved this problem? Thanks.\r\n\r\nI found spark is using\u00a0[parquet-mr](https://github.com/apache/parquet-mr)\u00a0, I tested successfully on it. But it is based on Java, if I want to use it in c++, I should use JNI to call it, and this is not efficient enough."
        },
        {
            "created_at": "2020-08-27T19:55:53.712Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=17186080) by Martin Durant (mdurant):*\nJust to chime in here, nice and late, to say that this feature would be **immense** when implemented. Given the similarity of the parquet storage layout and the arrow model, it ought not to be too hard - but C++ is never easy. As a python-first programmer, is there any way I can help?\r\n\r\n\u00a0\r\n\r\n(note that I have great hopes for awkward-arrays\u00a0<https://github.com/scikit-hep/awkward-1.0>\u00a0to be a perfect pure-python way to iterate/filter/aggregate over deeply nested data loaded from parquet at C speeds)"
        },
        {
            "created_at": "2020-08-28T04:33:12.382Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=17186249) by Micah Kornfield (emkornfield@gmail.com):*\n`[~mdurant]` can\u00a0https://issues.apache.org/jira/browse/ARROW-8492\u00a0potentially could be done at the python layer.\u00a0 If you are interested maybe chime in there and we can discuss if there is a hard requirement for C++ (the nice thing about C++ tests is not having to deal with dual language development)"
        },
        {
            "created_at": "2020-08-28T15:53:42.971Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=17186637) by Hui Gao (fulluey):*\n`[~shadowdsp]`, We still don't have a solution to the problem. Right now, we write to disk and store the data in hive. It works. But we can't read from local file. I checked the C++ code base. It is really complex. Not seeming to be an easy update from outside developers.\u00a0\r\n\r\nParquet read/write from Spark works. But it is super slow when comparing with arrow. We also hit memory consumption issues\u00a0 and frequent OOM errors. I would NOT recommend unless using Java already.\u00a0"
        },
        {
            "created_at": "2020-10-17T15:28:19.946Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=17215914) by Wes McKinney (wesm):*\nCan this issue be resolved for 2.0.0, or perhaps it should be renamed to be \"Parquet nested parent JIRA\"?"
        },
        {
            "created_at": "2020-10-22T03:13:12.076Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=17218710) by Micah Kornfield (emkornfield@gmail.com):*\nyes, I pushed all remaining unresolved subtasks to issues."
        },
        {
            "created_at": "2021-09-25T05:43:14.872Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1644?focusedCommentId=17420058) by jiang,longshan (longshanpdd):*\n`[~fulluey]`, Is there any solution to read MapArray parquet file in c+? This issue is closed, but I still don't know the method, and it blocks our project in which we want to use c+ replace of Java application. Is there any advice? thanks a lot."
        }
    ]
}