{
    "issue": {
        "title": "[Python] Support __sizeof__ protocol for Python objects",
        "body": "***Note**: This issue was originally created as [ARROW-6926](https://issues.apache.org/jira/browse/ARROW-6926). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIt would be helpful if PyArrow objects implemented the `__sizeof__` protocol to give other libraries hints about how much data they have allocated.  This helps systems like Dask, which have to make judgements about whether or not something is cheap to move or taking up a large amount of space.",
        "created_at": "2019-10-17T21:34:58.000Z",
        "updated_at": "2019-12-02T13:45:18.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-12-02T13:45:01.000Z"
    },
    "comments": [
        {
            "created_at": "2019-10-22T22:01:44.258Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6926?focusedCommentId=16957374) by Wes McKinney (wesm):*\nMakes sense to me, should be easy-ish for us to calculate that"
        },
        {
            "created_at": "2019-11-15T17:31:53.585Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6926?focusedCommentId=16975268) by Matthew Rocklin (mrocklin):*\nSomeone ended up contributing these to Dask (we have a diispatch mechanism to work around these not being implemented upstream).  Obviously it would have been nicer for this code to be implemented in Arrow originally, but I thought I'd point to it here in case it's helpful to others.\r\n\r\nhttps://github.com/dask/dask/blob/539d1e27a8ccce01de5f3d49f1748057c27552f2/dask/sizeof.py#L115-L145"
        },
        {
            "created_at": "2019-11-19T11:01:13.179Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6926?focusedCommentId=16977384) by Antoine Pitrou (apitrou):*\ncc `[~jorisvandenbossche]`"
        },
        {
            "created_at": "2019-11-19T15:59:54.604Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6926?focusedCommentId=16977581) by Joris Van den Bossche (jorisvandenbossche):*\nI  started with implementing the `nbytes` attribute last week (ARROW-3444, which is merged now), with the idea of afterwards looking at `sizeof`.\r\n\r\nMain question is if we just want to return what `nbytes` does (the number of bytes in the buffers), which is what the dask approximation does, or if we also want to include the size of the cython + C++ object. \r\n\r\n`sys.getsizeof` works out of the box for the cython object (but it ignores the relevant buffers):\r\n\r\n```Java\n\r\nIn [38]: a = pa.array([1, 2])                                                                                                                                                                                      \r\n\r\nIn [39]: import sys                                                                                                                                                                                                \r\n\r\nIn [40]: sys.getsizeof(a)                                                                                                                                                                                          \r\nOut[40]: 96\r\n```\r\n\r\nbut when overriding `\\_\\_sizeof\\_\\_` in Array, I am not sure how to get to this number so I can add the nbytes of the buffers to it.\r\n\r\n\r\n"
        },
        {
            "created_at": "2019-11-20T14:37:22.914Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6926?focusedCommentId=16978472) by Antoine Pitrou (apitrou):*\nYou can call `object.\\_\\_sizeof\\_\\_` to get the baseline, for example:\r\n\r\n```Java\n\r\n>>> v = set(range(500))                                                                                                                                           \r\n>>> type(v).__sizeof__(v)                                                                                                                                         \r\n32968\r\n>>> object.__sizeof__(v)                                                                                                                                          \r\n200\r\n```\r\n"
        },
        {
            "created_at": "2019-11-20T15:59:27.375Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6926?focusedCommentId=16978546) by Joris Van den Bossche (jorisvandenbossche):*\nAh, thanks. But it seems cython is adding a bit more still:\r\n\r\n```Java\n\r\nIn [21]: a = pa.array([1]*10)                                                                                                                                                                                      \r\n\r\nIn [22]: sys.getsizeof(a)                                                                                                                                                                                          \r\nOut[22]: 96\r\n\r\nIn [23]: object.__sizeof__(a)                                                                                                                                                                                      \r\nOut[23]: 72\r\n```\r\n\r\n(not sure how much we care about those small numbers, in reality users will mainly care for big arrays where the nbytes dominates the result)"
        },
        {
            "created_at": "2019-11-20T16:11:49.080Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6926?focusedCommentId=16978556) by Antoine Pitrou (apitrou):*\n`sys.getsizeof` automatically adds other factors such as the GC overhead."
        },
        {
            "created_at": "2019-11-20T16:14:28.173Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6926?focusedCommentId=16978558) by Joris Van den Bossche (jorisvandenbossche):*\nOK, thanks!"
        },
        {
            "created_at": "2019-12-02T13:45:01.964Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6926?focusedCommentId=16986057) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 5879\n<https://github.com/apache/arrow/pull/5879>"
        }
    ]
}