{
    "issue": {
        "title": "[C++] Allow specifying column types to CSV reader",
        "body": "***Note**: This issue was originally created as [ARROW-3722](https://issues.apache.org/jira/browse/ARROW-3722). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI'm not sure how to expose this. The easiest, implementation-wise, would be to allow passing a `Schema` (for example inside the `ConvertOptions`).\r\n\r\nAnother possibility is to allow specifying the default types for type inference. For example type inference currently infers integers as `int64`, but the user might prefer `int32`.\r\n\r\nThoughts?",
        "created_at": "2018-11-08T11:33:33.000Z",
        "updated_at": "2018-11-14T19:50:29.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2018-11-14T19:50:18.000Z"
    },
    "comments": [
        {
            "created_at": "2018-11-08T21:13:47.653Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3722?focusedCommentId=16680391) by Wes McKinney (wesm):*\nYou should have a look at various CSV libraries what API they expose for this. One way would be to have `unordered_map<string, TypePtr>`, so in Python you would indicate say `{'col1': 'int32', 'col2': 'string'`} and then when the column converters are initialized, they would use a type-restricted one rather than doing inference.\r\n\r\nSome libraries allow you to indicate the column type by integer position in addition to the column name. \r\n\r\nPassing a whole schema is likely too labor intensive, especially for files with a lot of column names. Often, you have only a few problematic columns that you want to force a type while letting type inference run its course on the other columns\r\n\r\nWe'll eventually want to add the option to record statistics about unconvertible values (by computing the number of observations for each unconvertible value), and also to set them to null. I've found that people waste a lot of time debugging what's wrong with a bad CSV file when a column has some bad values. "
        },
        {
            "created_at": "2018-11-09T06:53:53.512Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3722?focusedCommentId=16680956) by Dimitri Vorona (alendit):*\nHi Antoinne,\r\n\r\nI agree with having to supply either every column (i.e. a whole Schema) or deal with default type inference seem to be overly drastic. Having something like an optional unordered map which can specify column names/indicies as keys and ColumnBuilder objects as values would be most flexible, IMO. Maybe we would have to change TypedColumnBuilder to have a configurable type order instead of predifined Int64 -> Double -> String one.\u00a0\r\n\r\nWe also need a way to provide column names (or even default to numbering) for files without a header. This topic is related, but maybe a new Jira would be better suited for it.\r\n\r\nEDIT: additional thoughts on passing ColumnBuilder instead of just a type. Ideally, the user would be able to implement own converters to support, let's say, uncommon date formats or even parse struct types at load time. So conceptually a ColumnBuilder defines a list of such converters which are tried one after another.\u00a0"
        },
        {
            "created_at": "2018-11-13T14:55:40.091Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3722?focusedCommentId=16685325) by Antoine Pitrou (apitrou):*\n> We also need a way to provide column names (or even default to numbering) for files without a header. This topic is related, but maybe a new Jira would be better suited for it.\r\n\r\nYes, I think a separate JIRA is better.\r\n\r\n> additional thoughts on passing ColumnBuilder instead of just a type. Ideally, the user would be able to implement own converters to support, let's say, uncommon date formats or even parse struct types at load time.\u00a0\r\n\r\nRight now most CSV APIs are internal. APIs like ColumnBuilder and Converter expose implementation details that we don't want to set in stone. If there's some demand we might think about an API to let people define their conversion functions without having to depend on internal APIs."
        },
        {
            "created_at": "2018-11-14T19:50:18.443Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3722?focusedCommentId=16687037) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 2950\n<https://github.com/apache/arrow/pull/2950>"
        }
    ]
}