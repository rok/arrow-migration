{
    "issue": {
        "title": "[R] arrow implementation of lubridate::dmy parses invalid date \"00001976\" as date",
        "body": "***Note**: This issue was originally created as [ARROW-18242](https://issues.apache.org/jira/browse/ARROW-18242). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSorry for so many issues, but I think this is another bug.\r\n\r\nWrong behavior of the arrow implementation of the\u00a0 `lubridate::dmy`.\r\n\r\nAn invalid date such as '00001976' is being parsed as a valid (and completely unrelated) date.\r\n\r\n#in R\r\n'00001976' %>% dmy\r\n[1] NA\r\nWarning message:\r\n\u00a0 All formats failed to parse. No formats found.\u00a0\r\n\r\n#In arrow\r\nq <- data.table(x=c('00001976','30111976','01011976'))\r\nq %>% write_dataset('q')\r\nq2 <- 'q' %>% open_dataset %>% mutate(x2=dmy) %>% collect\r\nq2\r\nx\r\n1: 1975-11-30\r\n2: 1976-11-30\r\n3: 1976-01-01\r\n#notice '00001976' is an invalid date. First row of x2 should be NA!!!\r\n\r\n\u00a0",
        "created_at": "2022-11-03T17:09:30.000Z",
        "updated_at": "2022-11-04T16:45:58.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-11-03T17:11:41.435Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18242?focusedCommentId=17628424) by Nicola Crane (thisisnic):*\n`[~lucasmation]` Don't apologise for opening issues, user reports are really helpful! :)  I think there's a line missing from your reprex above (and maybe on the other one you opened) - would you mind adding in a definition for variable `p2`?"
        },
        {
            "created_at": "2022-11-03T17:19:13.229Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18242?focusedCommentId=17628430) by Lucas Mation (lucasmation):*\nUpdated. Thank you. I love `arrow`, but these bugs are making ma a little wary of using it and introducing errors in my data. Is there any sense of what functions/features are safe to use?"
        },
        {
            "created_at": "2022-11-03T18:22:19.464Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18242?focusedCommentId=17628467) by Nicola Crane (thisisnic):*\nThat's understandable.  We test our work but there are many corner cases in the field.  Arrow's compute functionality is newer and not quite as solid as some of the more established database companies but we hope to get there. The reports you've been filing are instrumental for achieving this."
        },
        {
            "created_at": "2022-11-04T13:02:49.385Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18242?focusedCommentId=17628961) by Nicola Crane (thisisnic):*\nInteresting, I tried to replicate this with 9.0.0 but could not. Will try with 10.0.0 shortly."
        },
        {
            "created_at": "2022-11-04T13:06:41.791Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18242?focusedCommentId=17628963) by Nicola Crane (thisisnic):*\nI can't replicate this with 10.0.0 either.  FWIW I re-organised the code a bit here as the `mutate()` call there gave me an error.\r\n\r\n\r\n```r\n\r\nlibrary(dplyr)\r\nlibrary(data.table)\r\nlibrary(lubridate)\r\nlibrary(arrow)\r\n\r\n'00001976' %>% dmy()\r\n#> Warning: All formats failed to parse. No formats found.\r\n#> [1] NA\r\n\r\n#In arrow\r\nq <- data.table(x=c('00001976','30111976','01011976'))\r\nq %>% write_dataset('q')\r\n\r\nq2 <- open_dataset('q') %>% mutate(x2=dmy(x)) %>% collect()\r\nq2\r\n#>           x         x2\r\n#> 1: 00001976       <NA>\r\n#> 2: 30111976 1976-11-30\r\n#> 3: 01011976 1976-01-01\r\n```\r\n\r\n`[~lucasmation]` If you run the code in the way I've rewritten it above, do you get anything different?  Also, can you confirm which version of Arrow you are using? You can use `arrow::arrow_info()` to find it if you're not sure."
        },
        {
            "created_at": "2022-11-04T13:18:37.502Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18242?focusedCommentId=17628973) by Lucas Mation (lucasmation):*\nWeird. I can replicate the error both on arrow-10.0.0\u00a0 (in the server) and arrow-dev-nightly-build (in my PC). Both are windows machines\r\n\r\n\u00a0\r\n\r\n#For the server:\r\n\r\n```\u00a0\r\n\r\n#For the server:\r\n\r\narrow::arrow_info()\r\nArrow package version: 10.0.0\r\n\r\nCapabilities:\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\r\ndataset \u00a0 \u00a0TRUE\r\nsubstrait FALSE\r\nparquet \u00a0 \u00a0TRUE\r\njson \u00a0 \u00a0 \u00a0 TRUE\r\ns3 \u00a0 \u00a0 \u00a0 \u00a0 TRUE\r\ngcs \u00a0 \u00a0 \u00a0 \u00a0TRUE\r\nutf8proc \u00a0 TRUE\r\nre2 \u00a0 \u00a0 \u00a0 \u00a0TRUE\r\nsnappy \u00a0 \u00a0 TRUE\r\ngzip \u00a0 \u00a0 \u00a0 TRUE\r\nbrotli \u00a0 \u00a0 TRUE\r\nzstd \u00a0 \u00a0 \u00a0 TRUE\r\nlz4 \u00a0 \u00a0 \u00a0 \u00a0TRUE\r\nlz4_frame \u00a0TRUE\r\nlzo \u00a0 \u00a0 \u00a0 FALSE\r\nbz2 \u00a0 \u00a0 \u00a0 \u00a0TRUE\r\njemalloc \u00a0FALSE\r\nmimalloc \u00a0 TRUE\r\n\r\nArrow options():\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\r\narrow.use_threads FALSE\r\n\r\nMemory:\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\r\nAllocator mimalloc\r\nCurrent \u00a0 \u00a01.12 Kb\r\nMax \u00a0 \u00a0 \u00a0 25.77 Kb\r\n\r\nRuntime:\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\r\nSIMD Level \u00a0 \u00a0 \u00a0 \u00a0 \u00a0avx2\r\nDetected SIMD Level avx2\r\n\r\nBuild:\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\r\nC++ Library Version \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a010.0.0\r\nC++ Compiler \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0GNU\r\nC++ Compiler Version \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 10.3.0\r\nGit ID \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 aa7118b6e5f49b354fa8a93d9cf363c9ebe9a3f0\r\n\r\n```\u00a0\r\n\r\nOn my PC\r\n\r\n```\u00a0\r\n\r\n#For the PC:\r\n\r\narrow_info()\r\nArrow package version: 10.0.0.100000050\r\n\r\nCapabilities:\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\r\ndataset \u00a0 \u00a0TRUE\r\nsubstrait FALSE\r\nparquet \u00a0 \u00a0TRUE\r\njson \u00a0 \u00a0 \u00a0 TRUE\r\ns3 \u00a0 \u00a0 \u00a0 \u00a0 TRUE\r\ngcs \u00a0 \u00a0 \u00a0 \u00a0TRUE\r\nutf8proc \u00a0 TRUE\r\nre2 \u00a0 \u00a0 \u00a0 \u00a0TRUE\r\nsnappy \u00a0 \u00a0 TRUE\r\ngzip \u00a0 \u00a0 \u00a0 TRUE\r\nbrotli \u00a0 \u00a0 TRUE\r\nzstd \u00a0 \u00a0 \u00a0 TRUE\r\nlz4 \u00a0 \u00a0 \u00a0 \u00a0TRUE\r\nlz4_frame \u00a0TRUE\r\nlzo \u00a0 \u00a0 \u00a0 FALSE\r\nbz2 \u00a0 \u00a0 \u00a0 \u00a0TRUE\r\njemalloc \u00a0FALSE\r\nmimalloc \u00a0 TRUE\r\n\r\nArrow options():\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\r\narrow.use_threads FALSE\r\n\r\nMemory:\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\r\nAllocator \u00a0mimalloc\r\nCurrent \u00a0 128 bytes\r\nMax \u00a0 \u00a0 \u00a0 \u00a025.52 Kb\r\n\r\nRuntime:\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\r\nSIMD Level \u00a0 \u00a0 \u00a0 \u00a0 \u00a0avx2\r\nDetected SIMD Level avx2\r\n\r\nBuild:\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\r\nC++ Library Version \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 11.0.0-SNAPSHOT\r\nC++ Compiler \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0GNU\r\nC++ Compiler Version \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 10.3.0\r\nGit ID \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 5e53978b56aa13f9c033f2e849cc22f2aed6e2d3\r\n\r\n\u00a0\r\n\r\n```\u00a0\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\n#For the server:\r\n\r\n\u00a0\r\n\r\n\u00a0"
        },
        {
            "created_at": "2022-11-04T13:48:25.949Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18242?focusedCommentId=17628993) by Nicola Crane (thisisnic):*\nAha, this could be related to Windows as we've had some issues in the past there. I'll keep digging."
        },
        {
            "created_at": "2022-11-04T14:51:51.929Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18242?focusedCommentId=17629023) by Nicola Crane (thisisnic):*\nOK, my best guess as to what is going on here is that the original lubridate implementation uses a custom C parser to process these datetimes, and in the Arrow implementation some of this work is being done on whichever external library is being depended on for datetimes, which is why there's a difference between Windows and Linux.  We might be able to add some additional pre-processing steps to our bindings (or the regex the setup code for them produces) to prevent this.  "
        },
        {
            "created_at": "2022-11-04T14:53:56.339Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18242?focusedCommentId=17629025) by Nicola Crane (thisisnic):*\nI can't test this example as I don't have a Windows machine available to me now, but I'm guessing we get the same problem using this tiny reprex:\r\n\r\n\r\n```r\n\r\narrow_table(x = '00001976') %>% \r\n  mutate(y = ymd(x)) %>% \r\n  collect()\r\n```\r\n"
        },
        {
            "created_at": "2022-11-04T15:23:40.040Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18242?focusedCommentId=17629044) by Lucas Mation (lucasmation):*\nWeirdly, this returns correct output\r\n\r\n\u00a0\r\n\r\narrow_table(x = '00001976') %>%\u00a0\r\n+ \u00a0 \u00a0 mutate(y = ymd(x)) %>%\u00a0\r\n+ \u00a0 \u00a0 collect()\r\n1. A tibble: 1 x 2\n   \u00a0 x \u00a0 \u00a0 \u00a0 \u00a0y \u00a0 \u00a0\u00a0\n   \u00a0 <chr> \u00a0 \u00a0<date>\n   1 00001976 NA"
        },
        {
            "created_at": "2022-11-04T15:24:56.058Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18242?focusedCommentId=17629045) by Lucas Mation (lucasmation):*\nSo the error only occurs when the data is being read from the parquet file, then collected...."
        },
        {
            "created_at": "2022-11-04T15:27:24.236Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18242?focusedCommentId=17629048) by Nicola Crane (thisisnic):*\nSorry, my bad, I accidentally used `ymd()` there instead of `dmy()`.  Mind giving it a go with `dmy()`?"
        },
        {
            "created_at": "2022-11-04T16:45:58.907Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18242?focusedCommentId=17629101) by Lucas Mation (lucasmation):*\nok, same error as before\r\n\r\n\u00a0\r\n\r\narrow_table(x = '00001976') %>% mutate(y = dmy(x)) %>% collect()\r\n1. A tibble: 1 x 2\n   \u00a0 x \u00a0 \u00a0 \u00a0 \u00a0y \u00a0 \u00a0 \u00a0 \u00a0\u00a0\n   \u00a0 <chr> \u00a0 \u00a0<date> \u00a0 \u00a0\n   1 00001976 1975-11-30"
        }
    ]
}