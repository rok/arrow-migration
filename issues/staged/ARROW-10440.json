{
    "issue": {
        "title": "[C++][Dataset][Python] Add a callback to visit file writers just before Finish()",
        "body": "***Note**: This issue was originally created as [ARROW-10440](https://issues.apache.org/jira/browse/ARROW-10440). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThis will fill the role of (for example) `metadata_collector` or allow stats to be embedded in IPC file footer metadata.",
        "created_at": "2020-10-30T20:31:29.000Z",
        "updated_at": "2021-06-30T01:46:22.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-06-22T21:55:31.000Z"
    },
    "comments": [
        {
            "created_at": "2020-10-30T20:31:44.712Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10440?focusedCommentId=17223875) by Ben Kietzman (bkietz):*\n`[~jorisvandenbossche]`"
        },
        {
            "created_at": "2021-03-03T16:43:16.497Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10440?focusedCommentId=17294650) by Lance Dacey (ldacey):*\nWill this change allow us to get a list of the blob paths which were saved as file fragments?\r\n\r\nI am currently using fs.glob() to find a list of files which were just saved using a specific basename_template as a work around.\r\n\r\n\r\n```java\n\r\n    pattern = filesystem.sep.join([output_path, f\"**{base_template}-*\"])\r\n    files = filesystem.glob(\r\n        pattern,\r\n        details=False,\r\n        invalidate_cache=True,\r\n    )\r\n```\r\n\r\nHowever, with the legacy write_to_dataset(), I am able to use the metadata_collector and then create a list of the file paths like this, which is more convenient (I do not have to worry about generating unique/predictable basename templates).\r\n\r\n\r\n```java\n\r\n    files = []\r\n    for piece in collector:\r\n        files.append(filesystem.sep.join([output_path, piece.row_group(0).column(0).file_path]))\r\n```\r\n\r\n\r\nI require the lists of blobs to pass along to other Airflow tasks to either read as a dataset, or I generate a list of filters from the paths.\r\n"
        },
        {
            "created_at": "2021-03-11T17:30:00.402Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10440?focusedCommentId=17299754) by Lance Dacey (ldacey):*\nCan someone confirm if this issue would cover my use case or if I should add a separate feature request issue? My goal is to simply be able to retrieve the list of fragment paths which were saved using the ds.write_dataset() function.\r\n\r\nI believe it does since I am using the metadata_collector argument to gather this information with the legacy dataset, but let me know if this is different. thanks!"
        },
        {
            "created_at": "2021-03-11T17:58:50.657Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10440?focusedCommentId=17299773) by Weston Pace (westonpace):*\nYes, it should be able to satisfy your use case, now that you've mentioned the need here.\u00a0 Right now a `FileWriter` only has the `schema` which wouldn't have the path being written but it seems reasonable that it could have a path accessor as well.\u00a0\u00a0\u00a0 `[~bkietz]` can you confirm?"
        },
        {
            "created_at": "2021-04-13T14:10:25.068Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10440?focusedCommentId=17320199) by Joris Van den Bossche (jorisvandenbossche):*\n( `[~ldacey]` since I asked you on the other issue about creating new issues: this one actually already covers the `metadata_collector` question, I think?)\r\n\r\nI suppose a generic callback could indeed solve your use case. But on the other hand: getting the file names of the files that were just written also seems like a generally useful thing we could maybe expose in some other way without needing the generic callback?\r\n\r\n`[~bkietz]` did you envision this also to be exposed in Python? "
        },
        {
            "created_at": "2021-06-21T19:08:32.057Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10440?focusedCommentId=17366795) by Ben Kietzman (bkietz):*\nSorry for the late reply.\r\n\r\n`[~ldacey]` `[~westonpace]` Yes, I think it's totally reasonable to provide `const std::string& FileWriter::path()`. The caveat is that currently FIleWriter is agnostic about what kind of stream it's writing into; for example it may be writing into a Buffer rather than to disk which would clearly not be associated with any path. The `path` property could be added to `FileFormat::MakeWriter` and supplied alongside the output stream whenever appropriate.\r\n\r\n`[~jorisvandenbossche]` we could also expose this in Python, in which case the general callback could be used to provide simpler functionality when appropriate"
        },
        {
            "created_at": "2021-06-22T21:55:31.180Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10440?focusedCommentId=17367710) by David Li (lidavidm):*\nIssue resolved by pull request 10573\n<https://github.com/apache/arrow/pull/10573>"
        },
        {
            "created_at": "2021-06-30T01:46:22.673Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10440?focusedCommentId=17371763) by Weston Pace (westonpace):*\nHmm, this doesn't quite fill the role of metadata_collector.\u00a0 The metadata_collector had to be called \"after\" finish and not \"before\" finish.\u00a0 Otherwise the parquet schema is not accessible in the arrow:: parquet::FileWriter.\r\n\r\n\u00a0\r\n\r\nLooking at the description the reason for calling in \"before\" finish was to allow inserting extra data into the IPC stream?\u00a0 In that case I think we will need two callbacks.\u00a0 Thoughts?"
        }
    ]
}