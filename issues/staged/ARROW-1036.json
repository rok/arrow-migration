{
    "issue": {
        "title": "[C++] Define abstract API for filtering Arrow streams (e.g. predicate evaluation)",
        "body": "***Note**: This issue was originally created as [ARROW-1036](https://issues.apache.org/jira/browse/ARROW-1036). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIt would be useful to be able to apply analytic predicates to an Arrow stream in a composable way. As soon as we are able to compute some simple predicates on in-memory Arrow data, we could define our first version of this",
        "created_at": "2017-05-15T23:15:08.000Z",
        "updated_at": "2022-08-27T14:42:00.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-11-12T15:56:35.000Z"
    },
    "comments": [
        {
            "created_at": "2017-05-16T14:16:06.184Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1036?focusedCommentId=16012462) by Anthony Fox (anthonyf):*\nThis is quite similar to a project the GeoMesa team has been working on.\n\nThe GeoMesa project has started to put together a SQL-like API over Arrow files in javascript for in-browser querying and visualization.  We have defined a class called `ArrowDataSet` that wraps an Arrow file and exposes query and countBy/groupBy methods.  The queries are defined using a set of simple predicate expressions (`And`, `Or`, `Equals`, `LTEquals`,`During`, etc etc) with the idea of adding spatial predicates eventually (`Contains`, `Intersects`, `Overlaps`).  The query is received by the `ArrowDataSet` and a query execution plan is produced.  The query execution plan has the usual operators (`Scan`, `Filter`, `Project`, `HashGroupBy`) as well as optimized Filters for dictionary encoded values.  We are also planning on having a primary sort key that is hinted through the Arrow column meta-data and appropriate optimizations with additional operators like `PrimarySortKeyScan`.  This will help with seeks when there's a predicate on the primary sort key.  For instance, if the primary sort key is `date` and there's a query predicate using `During` on a start and end date, then the execution plan will use `PrimarySortKeyScan` to efficiently skip batches till it reaches records that pass the predicate.\n\nI'd be interested in how this can be standardized across the languages supported by Arrow."
        },
        {
            "created_at": "2017-05-16T21:12:45.561Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1036?focusedCommentId=16013121) by Wes McKinney (wesm):*\nThis sounds really cool. Would be great to collect as much of the client-side analytics in the Arrow JS implementation. When you are ready, it would be great to have you all write a blog post for the Arrow website showing off this use csae"
        },
        {
            "created_at": "2017-05-17T13:22:26.233Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1036?focusedCommentId=16014020) by Anthony Fox (anthonyf):*\n`[~wesmckinn]` We'd be happy to write a blog post.  We need to get it hooked up into a client-side mapping client like OpenLayers or Leaflet so there are compelling screencaps to go along with the post."
        },
        {
            "created_at": "2017-05-19T18:23:42.453Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1036?focusedCommentId=16017795) by Wes McKinney (wesm):*\nSure, whenever you're ready, feel free to go for it (you can make a PR into the arrow/site directory)"
        },
        {
            "created_at": "2018-11-22T20:21:01.682Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1036?focusedCommentId=16696245) by Wes McKinney (wesm):*\nNow that we can use Gandiva to generate simple predicates, it might be a good idea to implement a simple table-valued filter node "
        },
        {
            "created_at": "2019-08-21T16:28:39.393Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1036?focusedCommentId=16912465) by Wes McKinney (wesm):*\ncc `[~bkietz]` as you think about application of filters to record batches as a post-processing step"
        },
        {
            "created_at": "2019-08-26T14:28:06.833Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1036?focusedCommentId=16915844) by Ben Kietzman (bkietz):*\n`[~wesmckinn]` I have a PR up which addresses this\r\nhttps://github.com/apache/arrow/pull/5157/files#diff-157d3e1f58273646705b1760a1f09770R208"
        },
        {
            "created_at": "2019-11-11T00:07:58.707Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1036?focusedCommentId=16971259) by Neal Richardson (npr):*\nDid ARROW-6243 cover this, or is there something else to do?"
        },
        {
            "created_at": "2019-11-12T15:54:38.516Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1036?focusedCommentId=16972556) by Francois Saint-Jacques (fsaintjacques):*\nI would say yes."
        },
        {
            "created_at": "2022-08-27T14:42:00.878Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1036?focusedCommentId=17585989) by @toddfarmer:*\nTransitioning issue from Resolved to Closed to based on resolution field value."
        }
    ]
}