{
    "issue": {
        "title": "The metadata info will lost in parquet file schema after writing the parquet file by calling the FileSystemDataset::Write() method.",
        "body": "***Note**: This issue was originally created as [ARROW-18140](https://issues.apache.org/jira/browse/ARROW-18140). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThis issue can be reproduced by the following code.\r\n\r\nauto format = std::make_shared<ParquetFileFormat>();\r\nauto fs = std::make_shared<fs::internal::MockFileSystem>(fs::kNoTime);\r\nFileSystemDatasetWriteOptions write_options;\r\nwrite_options.file_write_options = format->DefaultWriteOptions();\r\nwrite_options.filesystem = fs;\r\nwrite_options.base_dir = \"root\";\r\nwrite_options.partitioning = std::make_shared<HivePartitioning>(schema({}));\r\nwrite_options.basename_template = \"\\{i}.parquet\";\r\nauto metadata =\r\n\u00a0 \u00a0 std::shared_ptr<KeyValueMetadata>(new KeyValueMetadata(\\{\"foo\"}, \\{\"bar\"}));\r\nauto dataset_schema = schema(\\{field(\"a\", int64())}, metadata);\r\nRecordBatchVector batches{\r\n\u00a0 \u00a0 ConstantArrayGenerator::Zeroes(kRowsPerBatch, dataset_schema)};\r\nASSERT_EQ(0, batches[0]~~>column(0)~~>null_count());\r\nauto dataset = std::make_shared<InMemoryDataset>(dataset_schema, batches);\r\nASSERT_OK_AND_ASSIGN(auto scanner_builder, dataset->NewScan());\r\nASSERT_OK(scanner_builder->Project(\r\n\u00a0 \u00a0 \\{compute::call(\"add\", {compute::field_ref(\"a\"), compute::literal(1)})},\r\n\u00a0 \u00a0 \\{\"a_plus_one\"}));\r\nASSERT_OK_AND_ASSIGN(auto scanner, scanner_builder->Finish());\r\n\r\n// Before write the schema has the metadata info.\r\nASSERT_EQ(1, dataset_schema->HasMetadata());\r\nASSERT_OK(FileSystemDataset::Write(write_options, scanner));\r\n\r\nASSERT_OK_AND_ASSIGN(auto dataset_factory, FileSystemDatasetFactory::Make(\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0fs, \\{\"root/0.parquet\"}, format, {}));\r\nASSERT_OK_AND_ASSIGN(auto written_dataset, dataset_factory->Finish(FinishOptions{}));\r\n\r\n// After write the schema does not has the metadata info.\r\nASSERT_EQ(0, written_dataset->schema()->HasMetadata());",
        "created_at": "2022-10-24T05:23:47.000Z",
        "updated_at": "2022-10-24T18:17:28.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-10-24T18:17:28.268Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18140?focusedCommentId=17623326) by Weston Pace (westonpace):*\nThis could definitely be improved.  The write node, in Acero, takes a single {{std::shared_ptr<const KeyValueMetadata> custom_metadata;\r\n}} which is attached to all written files.  At the moment the FileSystemDataset::Write method uses metadata from the dataset's projected schema as input to the write node for this field:\r\n\r\n```\n\r\n  // The projected_schema is currently used by pyarrow to preserve the custom metadata\r\n  // when reading from a single input file.\r\n  const auto& custom_metadata = scanner->options()->projected_schema->metadata();\r\n\r\n  RETURN_NOT_OK(\r\n      compute::Declaration::Sequence(\r\n          {\r\n              {\"scan\", ScanNodeOptions{dataset, scanner->options()}},\r\n              {\"filter\", compute::FilterNodeOptions{scanner->options()->filter}},\r\n              {\"project\",\r\n               compute::ProjectNodeOptions{std::move(exprs), std::move(names)}},\r\n              {\"write\", WriteNodeOptions{write_options, custom_metadata}},\r\n          })\r\n          .AddToPlan(plan.get()));\r\n```\r\n\r\nThis is not very user friendly and is currently only this way due to slow migration from the old capabilities and this just happens to be the way pyarrow invokes the datasets API.  I think it would be possible to use this today but you would have to create scan options without the ScannerBuilder because the ScannerBuilder doesn't allow you to set the projected schema directly.\r\n\r\nThat being said, it should be fairly simple to add a \"custom_metadata\" argument to `FileSystemDataset::Write`.  As long as this isn't null then we should use that instead of the projected schema (and probably even migrate pyarrow to using this call too)."
        }
    ]
}