{
    "issue": {
        "title": "[C++] Determine the feasibility and build a prototype to replace compute/kernels with gandiva kernels",
        "body": "***Note**: This issue was originally created as [ARROW-7083](https://issues.apache.org/jira/browse/ARROW-7083). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSee discussion on\u00a0<https://issues.apache.org/jira/browse/ARROW-7017>\r\n\r\n\u00a0\r\n\r\nRequirements:\r\n\r\n1.\u00a0 No hard runtime dependency on LLVM\r\n\r\n2.\u00a0 Ability to run without LLVM static/shared libraries.\r\n\r\n\u00a0\r\n\r\nOpen questions:\r\n\r\n1.\u00a0 What dependencies does this add to the build tool chain?",
        "created_at": "2019-11-07T07:20:58.000Z",
        "updated_at": "2021-08-04T14:32:01.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-08-04T14:32:01.000Z"
    },
    "comments": [
        {
            "created_at": "2019-11-08T00:46:29.419Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7083?focusedCommentId=16969683) by Yuan Zhou (yuanzhou):*\nHi [~emkornfield@gmail.com]\r\n\r\nFor the coming AQE what kernels will Arrows use, Is it using 100% C++ kernels? or a combination of C++ and Gandiva kernels?\r\n\r\nIn the design draft there seems to make a combination of these two kernels. \r\nhttps://docs.google.com/document/d/10RoUZmiMQRi_J1FcPeVAUAMJ6d_ZuiEbaM2Y33sNPu4/edit#heading=h.2k6k5a4y9b8y\r\n\r\nCheers, -yuan"
        },
        {
            "created_at": "2019-11-08T01:27:53.915Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7083?focusedCommentId=16969709) by Micah Kornfield (emkornfield@gmail.com):*\n`[~yuanzhou]` \u00a0that is what this Jira is about.\u00a0 Currently all the kernels are 100% C++ and don't use Gandiva.\u00a0 The question is how feasible is it to reuse Gandiva kernels in a non-JIT environment.\u00a0 It would be nice to not duplicate code but in some contexts JIT isn't an option."
        },
        {
            "created_at": "2019-11-08T02:26:16.958Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7083?focusedCommentId=16969762) by Wes McKinney (wesm):*\nNote that no query engine development has been done so that design document is simply a proposal until actual work happens. "
        },
        {
            "created_at": "2020-04-27T01:59:25.501Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7083?focusedCommentId=17092921) by Wes McKinney (wesm):*\nAs part of the kernel API revamp, I am looking into how to utilize the code in gandiva/precompiled both for pre-compiled kernels (for use in interpretered expr evaluation) as well as cross-compiling for use in Gandiva. Probably a couple weeks at minimum until I have any patches land about this"
        },
        {
            "created_at": "2020-05-25T19:59:08.039Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7083?focusedCommentId=17116224) by Wes McKinney (wesm):*\nI'm inclined to close this issue. After much study, I believe the best that we can do is to to take the single-value kernel implementations found in\r\n\r\nhttps://github.com/apache/arrow/tree/master/cpp/src/gandiva/precompiled\r\n\r\nand move them to inline-able header files. Then two things happen:\r\n\r\n- These inline functions are translated to LLVM IR for use in Gandiva\n- The inline functions form the basis for pre-compiled array kernels in arrow/compute"
        },
        {
            "created_at": "2020-05-25T20:00:56.793Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7083?focusedCommentId=17116225) by Wes McKinney (wesm):*\nNote that we should be able to add Gandiva-generated kernels (with some glue) to `arrow::compute::Function` instances. Perhaps we can create an `arrow::compute::GandivaFunction` that provides the wrapping magic"
        }
    ]
}