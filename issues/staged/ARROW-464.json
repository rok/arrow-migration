{
    "issue": {
        "title": "C++: More intelligent array growing",
        "body": "***Note**: This issue was originally created as [ARROW-464](https://issues.apache.org/jira/browse/ARROW-464). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThree things to consider:\n\n \\* Instead of always growing the memory to twice the size in the Builders, we should consider 1.5 as a growth factor as this still leads to less memory wastage. As the allocation costly is mostly linear in the number of newly requested pages, this shouldn't be a noticeable impact. Due to memory below the size of a single page (i.e. 4KiB) not being able to be expanded in place, we should keep the factor of there.\n \\* In the case of jemalloc, we can ask the allocator with the function `nallocx`\u00a0for the size it would actually allocate for the requested size and then allocate this as the new capacity for the Builder/Buffer/... and not trigger an reallocation as long as the output of `nallocx`\u00a0doesn't change.\n \\* If not using `jemalloc`, we should be careful about the cost of minor allocation size changes. It would be preferable in these cases to have also an implementation along the lines of `nallocx`\u00a0that does some rounding to avoid unnecessary reallocations.",
        "created_at": "2017-01-07T17:13:30.000Z",
        "updated_at": "2017-01-08T15:36:08.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2017-01-08T15:36:08.000Z"
    },
    "comments": [
        {
            "created_at": "2017-01-08T15:36:02.143Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-464?focusedCommentId=15809567) by Uwe Korn (uwe):*\nI implemented those suggested changes locally and did notice a performance drop of 20% as more reallocations still come in quite expensive, even with in-place resizing provided by `jemalloc`. Also the overhead of calling `nallocx`\u00a0is in our case larger then we actually save by fully using the allocated space (wastage is always <4KiB). Thus the above mentioned optimizations still sound good theroretically to me but don't seem to bring a practical benefit.\n\nClosing this as it is not a pressing issue. We can tackle this once someone has a usecase."
        }
    ]
}