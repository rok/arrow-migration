{
    "issue": {
        "title": "[C++] 0.13 FAILED to build with option -DARROW_NO_DEFAULT_MEMORY_POOL",
        "body": "***Note**: This issue was originally created as [ARROW-5300](https://issues.apache.org/jira/browse/ARROW-5300). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI tried to upgrade Apache Arrow to 0.13. But, when building Apache Arrow 0.13 with option\u00a0`-DARROW_NO_DEFAULT_MEMORY_POOL`, I got a lot of failures.\r\n\r\nIt seems 0.13 assuming default memory pool always available.\r\n\r\n\u00a0\r\n\r\nMy cmake command is:\r\n\n|`make .. -DCMAKE_BUILD_TYPE=Release -DARROW_BUILD_TESTS=off -DARROW_USE_GLOG=off -DARROW_WITH_LZ4=off -DARROW_WITH_ZSTD=off -DARROW_WITH_SNAPPY=off -DARROW_WITH_BROTLI=off -DARROW_WITH_ZLIB=off -DARROW_JEMALLOC=off -DARROW_CXXFLAGS=-DARROW_NO_DEFAULT_MEMORY_POOL`|\r<br>\r<br>I tried to fix the compilation by adding some missing constructors. However, it seems this issue is bigger than I expected. It seems all the builders and appenders have this issue as many classes even don't have a memory pool associated.|\n|-|-|\n",
        "created_at": "2019-05-10T15:15:25.000Z",
        "updated_at": "2020-06-03T15:57:57.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-08-31T07:13:43.000Z"
    },
    "comments": [
        {
            "created_at": "2019-07-03T15:49:11.005Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5300?focusedCommentId=16877929) by Antoine Pitrou (apitrou):*\nYes, I'm not sure this option is supported. It's not even a first-class CMake option. `[~wesmckinn]` what do you think?"
        },
        {
            "created_at": "2019-07-03T15:58:32.988Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5300?focusedCommentId=16877940) by Wes McKinney (wesm):*\nWe should try to support it. It would have to be tested in Docker though"
        },
        {
            "created_at": "2019-07-03T18:56:02.180Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5300?focusedCommentId=16878088) by Antoine Pitrou (apitrou):*\nWell, regardless of the `ARROW_NO_DEFAULT_MEMORY_POOL` option, we have APIs which unconditionally provide a default-memory-pool override, e.g.:\r\n\r\n```cpp\n\r\nARROW_EXPORT\r\nStatus AllocateBuffer(MemoryPool* pool, const int64_t size, std::shared_ptr<Buffer>* out);\r\nARROW_EXPORT\r\nStatus AllocateBuffer(const int64_t size, std::shared_ptr<Buffer>* out);\r\n```\r\n\r\nIf the aim is to force users to always pass a MemoryPool explicitly, we should also exclude those APIs when `ARROW_NO_DEFAULT_MEMORY_POOL` is enabled.\r\n"
        },
        {
            "created_at": "2019-07-08T18:57:40.483Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5300?focusedCommentId=16880631) by Wes McKinney (wesm):*\nI don't feel strongly about maintaining this build option, maybe we should just remove it. "
        },
        {
            "created_at": "2019-08-22T22:35:08.103Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5300?focusedCommentId=16913757) by Wes McKinney (wesm):*\nAdded to 0.15.0. I think we ought to just nix this macro"
        },
        {
            "created_at": "2019-08-31T07:13:43.690Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5300?focusedCommentId=16920046) by Kouhei Sutou (kou):*\nIssue resolved by pull request 5240\n<https://github.com/apache/arrow/pull/5240>"
        },
        {
            "created_at": "2020-06-03T15:11:39.297Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5300?focusedCommentId=17125040) by Simon Watts (sawatts):*\nBTW - you need to declare `ARROW_MEMORY_POOL_DEFAULT` to be empty; the OP will set it to value 1.\u00a0 So pass `-DARROW_MEMORY_POOL_DEFAULT=\"\"` instead.\r\n\r\nHowever this has a secondary effect in now creating default constructors, which were previously satisfied by constructors which take a `MemoryPool*` with the defaulted value.\r\n\r\nThis is _very_ difficult to work around in pre-processing if you only have `ARROW_MEMORY_POOL_DEFAULT` to use, as you would need to check whether this expanded to empty.  There may be some boost-magic to do this, but for our use case it was easier to define something which could be used with `#if` instead."
        },
        {
            "created_at": "2020-06-03T15:57:57.198Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5300?focusedCommentId=17125070) by Wes McKinney (wesm):*\nThis has been removed from the project https://github.com/apache/arrow/commit/b4bd0d869dfa398dcaa65a1f4f6f13015d7fe8c4"
        }
    ]
}