{
    "issue": {
        "title": "[C++] Create specialized queue for serial readahead",
        "body": "***Note**: This issue was originally created as [ARROW-11943](https://issues.apache.org/jira/browse/ARROW-11943). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nFollow-up from ARROW-11590.\r\n\r\nThe current serial readahead implementation is a little confusing.\r\n\r\nProblem 1:\r\n\r\nThe readahead operator is keeping track of the queue size instead of the queue.\u00a0 This is because the queue is intended more for either the \"fill up queue then spin until free\" case or the \"fill up queue and then drop on the floor\" case and not the \"fill up queue and then stop reading values\" case.\r\n\r\nIn particular, ProducerConsumerQueue::Write should return true if the write filled up the queue and ProducerConsumerQueue::Read should return true if the read made space in an otherwise empty queue.\u00a0 This would need to be atomic/thread-safe so every true returned from a ::Write should be paired exactly 1:1 with a true-returning ::Read\r\n\r\nProblem 2:\r\n\r\nSerial readahead's writes follow a write slot to queue, get value, put value in slot pattern.\u00a0 Currently this uses a shared_ptr.\u00a0 This could probably be changed to use util::optional if we created a BackPtr function in the queue.\r\n\r\nThese two changes would simplify the serial readahead logic and help keep the code organized.",
        "created_at": "2021-03-12T09:04:09.000Z",
        "updated_at": "2021-03-12T09:04:09.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": []
}