{
    "issue": {
        "title": "[C++] Add variadic row-wise min/max kernels (least/greatest)",
        "body": "***Note**: This issue was originally created as [ARROW-12751](https://issues.apache.org/jira/browse/ARROW-12751). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAdd a pair of variadic functions equivalent to SQL's `least`/`greatest` or R's `pmin`/`pmax`. Should take 0, 1, 2, ... same-length numeric arrays as input and return an array giving the minimum/maximum of the values found in each position of the input arrays. For example, in the case of these 2 input arrays:\r\n```java\n\r\nArray<double>        Array<double>\r\n[                    [\r\n  1,                   2,\r\n  4                    3\r\n]                    ]\r\n```\r\n`least` would return:\r\n```java\n\r\nArray<double>\r\n[ \r\n  1,\r\n  3\r\n] \r\n```\r\nand `greatest` would return\r\n```java\n\r\nArray<double>\r\n[ \r\n  2,\r\n  4\r\n] \r\n```\r\nThe returned array should have the same data type as the input arrays, or follow promotion rules if the numeric types of the input arrays differ.\r\n\r\nShould also accept scalar numeric inputs and recycle their values.",
        "created_at": "2021-05-12T13:50:49.000Z",
        "updated_at": "2021-06-04T13:24:16.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-06-04T01:41:36.000Z"
    },
    "comments": [
        {
            "created_at": "2021-05-17T11:47:20.733Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12751?focusedCommentId=17346102) by Joris Van den Bossche (jorisvandenbossche):*\nNumpy has this as `np.minimum` and `np.maximum`, although those are limited to a fixed number of 2 input arrays (so a binary min/max, not variadic)"
        },
        {
            "created_at": "2021-05-21T20:57:51.553Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12751?focusedCommentId=17349477) by David Li (lidavidm):*\nJust to clarify, do we want to propagate nulls or ignore them? (NumPy raises an error which is also an option)\r\n```\n\r\nminimum([1, 2, 3], [null, 1, 1]) = [null, 1, 1] # Propagate\r\nminimum([1, 2, 3], Scalar(null)) = [null, null, null]\r\nminimum([1, 2, 3], [null, 1, 1]) = [1, 1, 1]    # Ignore\r\nminimum([1, 2, 3], Scalar(null)) = [1, 2, 3]\n```\r\nAlso, what do we do with 0 arguments?\r\n```\n\r\nminimum(Scalar(null)) = null or error?\r\nminimum() = [], NullScalar, or error? \n```"
        },
        {
            "created_at": "2021-05-21T21:48:47.302Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12751?focusedCommentId=17349490) by Ian Cook (icook):*\nIn principle this should behave the same as the min/max aggregate kernels, I think.\r\n\r\nCan we use `ScalarAggregateOptions` or something like it to control whether to propagate vs. ignore?\r\n\r\nWith zero arguments it should return null."
        },
        {
            "created_at": "2021-06-04T01:41:36.827Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12751?focusedCommentId=17357004) by Ben Kietzman (bkietz):*\nIssue resolved by pull request 10390\n<https://github.com/apache/arrow/pull/10390>"
        }
    ]
}