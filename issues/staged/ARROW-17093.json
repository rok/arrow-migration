{
    "issue": {
        "title": "[C++][CI] Enable libSegFault for C++ tests",
        "body": "***Note**: This issue was originally created as [ARROW-17093](https://issues.apache.org/jira/browse/ARROW-17093). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAdding libSegFault.so could make it easier to diagnose CI failures. It will print a backtrace on segfault.\r\n```\n\r\n  env SEGFAULT_SIGNALS=all \\\r\n      LD_PRELOAD=/lib/x86_64-linux-gnu/libSegFault.so\r\n```\r\nThis will give a backtrace like this on segfault:\r\n```\n\r\nBacktrace:\r\n/lib/x86_64-linux-gnu/libc.so.6(gsignal+0xcb)[0x7f8f4a0b900b]\r\n/lib/x86_64-linux-gnu/libc.so.6(abort+0x12b)[0x7f8f4a098859]\r\n/lib/x86_64-linux-gnu/libc.so.6(+0x8d26e)[0x7f8f4a10326e]\r\n/lib/x86_64-linux-gnu/libc.so.6(+0x952fc)[0x7f8f4a10b2fc]\r\n/lib/x86_64-linux-gnu/libc.so.6(+0x96f6d)[0x7f8f4a10cf6d]\r\n/tmp/arrow-HEAD.y8UwB/cpp-build/release/flight-test-integration-client(_ZNSt8_Rb_treeISt10shared_ptrIN5arrow8DataTypeEES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x39)[0x5557a9a83b19]\r\n/tmp/arrow-HEAD.y8UwB/cpp-build/release/flight-test-integration-client(_ZNSt8_Rb_treeISt10shared_ptrIN5arrow8DataTypeEES3_St9_IdentityIS3_ESt4lessIS3_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x1f)[0x5557a9a83aff]\r\n/tmp/arrow-HEAD.y8UwB/cpp-build/release/flight-test-integration-client(_ZNSt3setISt10shared_ptrIN5arrow8DataTypeEESt4lessIS3_ESaIS3_EED1Ev+0x33)[0x5557a9a83b83]\r\n/lib/x86_64-linux-gnu/libc.so.6(__cxa_finalize+0xce)[0x7f8f4a0bcfde]\r\n/tmp/arrow-HEAD.y8UwB/cpp-build/release/libarrow.so.900(+0x440b67)[0x7f8f47d56b67]\r\n```\r\nCaveats:\r\n \\* The path is OS-specific\r\n \\* We could integrate it into the build tooling instead of doing it via env var\r\n \\* Are there easily accessible equivalents for MacOS and Windows we could use?",
        "created_at": "2022-07-15T16:28:53.000Z",
        "updated_at": "2022-08-09T12:26:42.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Continuous Integration",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-07-20T15:22:25.648Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17093?focusedCommentId=17569081) by Antoine Pitrou (apitrou):*\ncc `[~assignUser]`"
        },
        {
            "created_at": "2022-07-20T15:24:46.362Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17093?focusedCommentId=17569084) by Antoine Pitrou (apitrou):*\nThis could be useful to better diagnose tests which occasionally timeout on CI, for example by adding a trap-on-timeout facility:\r\n```c++\n\r\nclass TrapOnTimeoutGuard {\r\n public:\r\n  explicit TrapOnTimeoutGuard(double seconds) {\r\n    auto fut = finished_;\r\n    bg_thread_ = std::thread([fut, seconds]() {\r\n      if (!fut.Wait(seconds)) {\r\n        psnip_trap();\r\n      }\r\n    });\r\n  }\r\n\r\n  ~TrapOnTimeoutGuard() {\r\n    finished_.MarkFinished();\r\n    bg_thread_.join();\r\n  }\r\n\r\n private:\r\n  Future<> finished_ = Future<>::Make();\r\n  std::thread bg_thread_;\r\n};\r\n```\r\n\r\ncc `[~westonpace]`"
        },
        {
            "created_at": "2022-07-20T15:32:26.105Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17093?focusedCommentId=17569088) by Antoine Pitrou (apitrou):*\nInteresting we have a little-known ARROW_WITH_BACKTRACE option that seems to link with https://github.com/ianlancetaylor/libbacktrace . I'm not sure it works, though?"
        },
        {
            "created_at": "2022-07-20T15:34:18.483Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17093?focusedCommentId=17569090) by David Li (lidavidm):*\nI _think_ what that does is use libbacktrace to get backtraces for assertions, but AIUI that library doesn't (automatically) install a fault handler the way libSegFault does."
        },
        {
            "created_at": "2022-07-20T15:40:20.801Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17093?focusedCommentId=17569092) by Antoine Pitrou (apitrou):*\nEdit: ARROW_WITH_BACKTRACE links with the glibc-specific backtrace support: https://www.gnu.org/software/libc/manual/html_node/Backtraces.html"
        },
        {
            "created_at": "2022-07-20T15:43:45.005Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17093?focusedCommentId=17569094) by Antoine Pitrou (apitrou):*\nAh... Unfortunately, the glibc backtrace support only prints a backtrace for the current thread, which makes it useless for the interesting cases :-("
        },
        {
            "created_at": "2022-07-20T15:53:48.742Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17093?focusedCommentId=17569097) by Antoine Pitrou (apitrou):*\nFrom the looks of it, https://github.com/ianlancetaylor/libbacktrace doesn't handle multi-threaded backtraces either.\r\nAnd it seems libSegFault was removed from glibc: https://lists.gnu.org/archive/html/info-gnu/2022-02/msg00002.html"
        },
        {
            "created_at": "2022-07-20T16:01:11.355Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17093?focusedCommentId=17569100) by Antoine Pitrou (apitrou):*\nEven the more sophisticated (and portable) https://github.com/bombela/backward-cpp seems limited to a single-thread backtrace."
        },
        {
            "created_at": "2022-07-20T16:03:37.479Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17093?focusedCommentId=17569101) by Antoine Pitrou (apitrou):*\nThere is an ugly workaround suggested here: https://stackoverflow.com/questions/44900256/print-all-threads-stack-trace-of-a-process-in-c-c-on-linux-platform\r\n> i use pthread_kill in one thread to send SIGUSR2 to other threads, when that threads receive the signal, it delivery to user defined signal handler function. In that function, use backtrace() to print the thread stack\r\n"
        },
        {
            "created_at": "2022-07-20T16:05:04.605Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17093?focusedCommentId=17569102) by Antoine Pitrou (apitrou):*\nReally, I'm afraid the least unreasonable solution here is to script our CI to automatically find core dumps and script the debugger.\r\n"
        },
        {
            "created_at": "2022-07-20T16:07:08.168Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17093?focusedCommentId=17569103) by David Li (lidavidm):*\nThat frankly sounds fairly reasonable. With gdb if we get it set up right we can get Python backtraces too where applicable."
        },
        {
            "created_at": "2022-07-20T16:13:50.986Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17093?focusedCommentId=17569106) by Antoine Pitrou (apitrou):*\nThat said, https://github.com/bombela/backward-cpp could be better than nothing on Windows, or in the cases where a working debugger isn't available."
        },
        {
            "created_at": "2022-08-08T14:34:09.607Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17093?focusedCommentId=17576815) by Ben Kietzman (bkietz):*\n> an ugly workaround\r\n\r\nEven if it's ugly, this is more or less what GDB itself does to suspend all threads when pausing execution: a single thread in the tracee receives SIGTRAP or SIGINT, to which GDB then responds by sending SIGSTOP to all the other threads. I'm not sure it's possible to do better"
        },
        {
            "created_at": "2022-08-08T14:46:32.356Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17093?focusedCommentId=17576830) by Antoine Pitrou (apitrou):*\nThe problem is how to enumerate all running threads? I suspect GDB uses kernel APIs to do that, which we can probably not reasonably do. Moreover, we're running from a signal handler: only async-signal-safe functions should ideally be called...\r\n\r\nI'll add that pthread_kill() expects a POSIX thread id but `/proc/self/task/` lists process ids..."
        },
        {
            "created_at": "2022-08-08T16:44:50.587Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17093?focusedCommentId=17576895) by Ben Kietzman (bkietz):*\npthread_kill is async-signal-safe per https://man7.org/linux/man-pages/man7/signal-safety.7.html and as long as we're working with pthreads we can acquire each thread's `pthread_t` using pthread_self and maintain a vector of traced threads. Should be as simple as implementing `void AddThisThreadToAllThreadTraceVector(), void RemoveThisThreadToAllThreadTraceVector()`. Win32 supports explicit enumeration of threads in a process so I'm sure we could make it work there also. I'll try it out and make a gist/repo/..."
        },
        {
            "created_at": "2022-08-08T16:46:40.419Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17093?focusedCommentId=17576896) by Antoine Pitrou (apitrou):*\nWell, Windows doesn't have pthreads, so no need to worry about that anyway :-)"
        },
        {
            "created_at": "2022-08-08T21:20:44.228Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17093?focusedCommentId=17576986) by Ben Kietzman (bkietz):*\nhttps://gist.github.com/bkietz/9e72ff72d58c6f9d977845c39fd63a21"
        },
        {
            "created_at": "2022-08-09T12:24:55.015Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17093?focusedCommentId=17577386) by Ben Kietzman (bkietz):*\n... however, having written that I think the correct solution to the all-threads-trace problem is allowing the process to core dump then reading stacks out of that. This has two advantages over in-process tracing:\r\n- When a signal handler exists, the non-signaled threads continue execution until they receive signals of their own. However if a signal is known to be fatal, the OS can shut threads down more aggressively- this means we can get less out-of-date traces from the threads which **didn't** segfault than we can with interthread signals\n- We'd probably be reading the core dump with gdb or another debugger and we'd have access to the process' full memory, so we could print not just snippets of the source files but values of local variables as well"
        }
    ]
}