{
    "issue": {
        "title": "[Python] [Packaging] test_zoneinfo_tzinfo_to_string fails with zoneinfo._common.ZoneInfoNotFoundError on packaging wheels on Windows",
        "body": "***Note**: This issue was originally created as [ARROW-16233](https://issues.apache.org/jira/browse/ARROW-16233). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nCurrently our nightly-packaging jobs for windows wheels are failing, see:\r\n\r\n- wheel-windows-cp310-amd64:\n  \u00a0 URL: <https://github.com/ursacomputing/crossbow/tree/nightly-packaging-2022-04-18-0-github-wheel-windows-cp310-amd64>\n- wheel-windows-cp39-amd64:\n  \u00a0 URL: <https://github.com/ursacomputing/crossbow/tree/nightly-packaging-2022-04-18-0-github-wheel-windows-cp39-amd64>\n  \n  The error is from the test:\n  \n  pyarrow\\tests\\test_types.py::test_zoneinfo_tzinfo_to_string, see the error logs below:\n  {code:java}\n  ================================== FAILURES ===================================\n  _______________________ test_zoneinfo_tzinfo_to_string ________________________key = 'UTC'\u00a0 \u00a0 def load_tzdata(key):\n  \u00a0 \u00a0 \u00a0 \u00a0 import importlib.resources\n  \u00a0 \u00a0\u00a0\n  \u00a0 \u00a0 \u00a0 \u00a0 components = key.split(\"/\")\n  \u00a0 \u00a0 \u00a0 \u00a0 package_name = \".\".join([\"tzdata.zoneinfo\"] + components[:-1])\n  \u00a0 \u00a0 \u00a0 \u00a0 resource_name = components[-1]\n  \u00a0 \u00a0\u00a0\n  \u00a0 \u00a0 \u00a0 \u00a0 try:\n  > \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return importlib.resources.open_binary(package_name, resource_name)Python\\lib\\zoneinfo\\_common.py:12:\u00a0\n  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _package = 'tzdata.zoneinfo', resource = 'UTC'\u00a0 \u00a0 def open_binary(package: Package, resource: Resource) -> BinaryIO:\n  \u00a0 \u00a0 \u00a0 \u00a0 \"\"\"Return a file-like object opened for binary reading of the resource.\"\"\"\n  \u00a0 \u00a0 \u00a0 \u00a0 resource = _common.normalize_path(resource)\n  > \u00a0 \u00a0 \u00a0 package = _common.get_package(package)Python\\lib\\importlib\\resources.py:43:\u00a0\n  _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _package = 'tzdata.zoneinfo'\u00a0 \u00a0 def get_package(package):\n1. type: (Package) -> types.ModuleType\n   \u00a0 \u00a0 \u00a0 \u00a0 \"\"\"Take a package name or module object and return the module.\n   \u00a0 \u00a0\u00a0\n   \u00a0 \u00a0 \u00a0 \u00a0 Raise an exception if the resolved module is not a package.\n   \u00a0 \u00a0 \u00a0 \u00a0 \"\"\"\n   > \u00a0 \u00a0 \u00a0 resolved = resolve(package)Python\\lib\\importlib\\_common.py:66:\u00a0\n   _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _cand = 'tzdata.zoneinfo'\u00a0 \u00a0 def resolve(cand):\n1. type: (Package) -> types.ModuleType\n   > \u00a0 \u00a0 \u00a0 return cand if isinstance(cand, types.ModuleType) else importlib.import_module(cand)Python\\lib\\importlib\\_common.py:57:\u00a0\n   _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _name = 'tzdata.zoneinfo', package = None\u00a0 \u00a0 def import_module(name, package=None):\n   \u00a0 \u00a0 \u00a0 \u00a0 \"\"\"Import a module.\n   \u00a0 \u00a0\u00a0\n   \u00a0 \u00a0 \u00a0 \u00a0 The 'package' argument is required when performing a relative import. It\n   \u00a0 \u00a0 \u00a0 \u00a0 specifies the package to use as the anchor point from which to resolve the\n   \u00a0 \u00a0 \u00a0 \u00a0 relative import to an absolute import.\n   \u00a0 \u00a0\u00a0\n   \u00a0 \u00a0 \u00a0 \u00a0 \"\"\"\n   \u00a0 \u00a0 \u00a0 \u00a0 level = 0\n   \u00a0 \u00a0 \u00a0 \u00a0 if name.startswith('.'):\n   \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if not package:\n   \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 msg = (\"the 'package' argument is required to perform a relative \"\n   \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\"import for {!r}\")\n   \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 raise TypeError(msg.format(name))\n   \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 for character in name:\n   \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if character != '.':\n   \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 break\n   \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 level += 1\n   > \u00a0 \u00a0 \u00a0 return _bootstrap._gcd_import(name[level:], package, level)Python\\lib\\importlib\\__init__.py:126:\u00a0\n   _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _name = 'tzdata.zoneinfo', package = None, level = 0> \u00a0 ???<frozen importlib._bootstrap>:1050:\u00a0\n   _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _name = 'tzdata.zoneinfo', import_ = <function _gcd_import at 0x00000216E11A3490>> \u00a0 ???<frozen importlib._bootstrap>:1027:\u00a0\n   _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _name = 'tzdata.zoneinfo', import_ = <function _gcd_import at 0x00000216E11A3490>> \u00a0 ???<frozen importlib._bootstrap>:992:\u00a0\n   _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _f = <function _gcd_import at 0x00000216E11A3490>, args = ('tzdata',), kwds = {}> \u00a0 ???<frozen importlib._bootstrap>:241:\u00a0\n   _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _name = 'tzdata', package = None, level = 0> \u00a0 ???<frozen importlib._bootstrap>:1050:\u00a0\n   _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _name = 'tzdata', import_ = <function _gcd_import at 0x00000216E11A3490>> \u00a0 ???<frozen importlib._bootstrap>:1027:\u00a0\n   _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _name = 'tzdata', import_ = <function _gcd_import at 0x00000216E11A3490>> \u00a0 ???\n   E \u00a0 ModuleNotFoundError: No module named 'tzdata'<frozen importlib._bootstrap>:1004: ModuleNotFoundErrorDuring handling of the above exception, another exception occurred:\u00a0 \u00a0 def test_zoneinfo_tzinfo_to_string():\n   \u00a0 \u00a0 \u00a0 \u00a0 zoneinfo = pytest.importorskip('zoneinfo')\n   \u00a0 \u00a0\u00a0\n   > \u00a0 \u00a0 \u00a0 tz = zoneinfo.ZoneInfo('UTC')Python\\lib\\site-packages\\pyarrow\\tests\\test_types.py:329:\u00a0\n   _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _key = 'UTC'\u00a0 \u00a0 def load_tzdata(key):\n   \u00a0 \u00a0 \u00a0 \u00a0 import importlib.resources\n   \u00a0 \u00a0\u00a0\n   \u00a0 \u00a0 \u00a0 \u00a0 components = key.split(\"/\")\n   \u00a0 \u00a0 \u00a0 \u00a0 package_name = \".\".join([\"tzdata.zoneinfo\"] + components[:-1])\n   \u00a0 \u00a0 \u00a0 \u00a0 resource_name = components[-1]\n   \u00a0 \u00a0\u00a0\n   \u00a0 \u00a0 \u00a0 \u00a0 try:\n   \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return importlib.resources.open_binary(package_name, resource_name)\n   \u00a0 \u00a0 \u00a0 \u00a0 except (ImportError, FileNotFoundError, UnicodeEncodeError):\n1. There are three types of exception that can be raised that all amount\n1. to \"we cannot find this key\":\n   \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 #\n1. ImportError: If package_name doesn't exist (e.g. if tzdata is not\n1. \u00a0 installed, or if there's an error in the folder name like\n1. \u00a0 Amrica/New_York)\n1. FileNotFoundError: If resource_name doesn't exist in the package\n1. \u00a0 (e.g. Europe/Krasnoy)\n1. UnicodeEncodeError: If package_name or resource_name are not UTF-8,\n1. \u00a0 such as keys containing a surrogate character.\n   > \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 raise ZoneInfoNotFoundError(f\"No time zone found with key {key}\")\n   E \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 zoneinfo._common.ZoneInfoNotFoundError: 'No time zone found with key UTC'\n    {code}",
        "created_at": "2022-04-19T12:56:22.000Z",
        "updated_at": "2022-04-23T16:21:18.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Packaging",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-04-21T12:07:15.000Z"
    },
    "comments": [
        {
            "created_at": "2022-04-19T12:58:16.727Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16233?focusedCommentId=17524287) by Ra\u00fal Cumplido (raulcd):*\ncc - `[~kszucs]` \u00a0"
        },
        {
            "created_at": "2022-04-19T13:44:35.301Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16233?focusedCommentId=17524321) by Joris Van den Bossche (jorisvandenbossche):*\ncc `[~alenkaf]` \u00a0\r\n\r\nOn Windows, the `zoneinfo` Python module requires an additional dependency, `tzdata` (a python package, https://github.com/python/tzdata, not the linux/debian package with that name)\r\n\r\nSo I am not fully sure if we are actually \"just\" missing that additional dependency for the Windows builds, or whether the \"UTC\" zone is not available in that package (while it is on linux).\r\n\r\n"
        },
        {
            "created_at": "2022-04-19T13:45:13.469Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16233?focusedCommentId=17524323) by Antoine Pitrou (apitrou):*\nWe could skip the test on Windows if `tzdata` is not installed, but perhaps we can instead make PyArrow depend on `tzdata` on Windows? What do you think `[~jorisvandenbossche]`?"
        },
        {
            "created_at": "2022-04-19T13:45:57.748Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16233?focusedCommentId=17524324) by Antoine Pitrou (apitrou):*\nNote: the traceback shows that `tzdata` is not installed on CI:\r\nhttps://github.com/ursacomputing/crossbow/runs/6060281633?check_suite_focus=true#step:7:444"
        },
        {
            "created_at": "2022-04-19T13:48:14.897Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16233?focusedCommentId=17524327) by Joris Van den Bossche (jorisvandenbossche):*\nBased on https://github.com/python/tzdata/tree/master/src/tzdata/zoneinfo, I assume `tzdata` is supposed to have UTC included (so generally the package includes some \"named\" zones, instead of only the \"Continent/Location\" zones). So then I assume the optional dependency is just missing on the windows builds."
        },
        {
            "created_at": "2022-04-19T13:55:27.966Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16233?focusedCommentId=17524333) by Joris Van den Bossche (jorisvandenbossche):*\n> We could skip the test on Windows if tzdata is not installed, but perhaps we can instead make PyArrow depend on tzdata on Windows? \r\n\r\nThe minimal thing to do is indeed add a skip to the test for when `tzdata` is not installed (only for windows). And for our own windows builds, also add tzdata to the environment to have test coverage.\r\n\r\nFor making it an actual optional windows-only dependency, I am not fully sure, since this is only needed when you actually are using zoneinfo timezones (not everyone uses timezones, and if you do there are alternatives (eg we still default to pytz, although we should change that to zoneinfo at some point))"
        },
        {
            "created_at": "2022-04-19T14:16:16.050Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16233?focusedCommentId=17524344) by Alenka Frim (alenka):*\nI will fix the test and add tzdata to the CI env first."
        },
        {
            "created_at": "2022-04-21T12:07:15.512Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16233?focusedCommentId=17525661) by Joris Van den Bossche (jorisvandenbossche):*\nIssue resolved by pull request 12930\n<https://github.com/apache/arrow/pull/12930>"
        }
    ]
}