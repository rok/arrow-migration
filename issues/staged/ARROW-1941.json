{
    "issue": {
        "title": "Table <\u2013> DataFrame roundtrip failing",
        "body": "***Note**: This issue was originally created as [ARROW-1941](https://issues.apache.org/jira/browse/ARROW-1941). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAlthough it is possible to create an Arrow table with a column containing only empty lists (cast to a particular type, e.g. string), in a roundtrip through pandas the original type is lost, it seems, and subsequently attempts to convert to pandas then fail.\r\n\r\nTo reproduce in PyArrow 0.8.0:\r\n\r\n```Java\n\r\nimport pyarrow as pa\r\n\r\n# Create table with array of empty lists, forced to have type list(string)\r\narrays = {\r\n    'c1': pa.array([[\"test\"], [\"a\", \"b\"], None], type=pa.list_(pa.string())),\r\n    'c2': pa.array([[], [], []], type=pa.list_(pa.string())),\r\n}\r\nrb = pa.RecordBatch.from_arrays(list(arrays.values()), list(arrays.keys()))\r\ntbl = pa.Table.from_batches([rb])\r\nprint(\"Schema 1 (correct):\\n{}\".format(tbl.schema))\r\n\r\n# First roundtrip changes schema\r\ndf = tbl.to_pandas()\r\ntbl2 = pa.Table.from_pandas(df)\r\nprint(\"\\nSchema 2 (wrong):\\n{}\".format(tbl2.schema))\r\n\r\n# Second roundtrip explodes\r\ndf2 = tbl2.to_pandas()\r\n```\r\n\r\nThis results in the following output:\r\n\r\n```Java\n\r\nSchema 1 (correct):\r\nc1: list<item: string>\r\n  child 0, item: string\r\nc2: list<item: string>\r\n  child 0, item: string\r\n\r\nSchema 2 (wrong):\r\nc1: list<item: string>\r\n  child 0, item: string\r\nc2: list<item: null>\r\n  child 0, item: null\r\n__index_level_0__: int64\r\nmetadata\r\n--------\r\n{b'pandas': b'{\"index_columns\": [\"__index_level_0__\"], \"column_indexes\": [{\"na'\r\n            b'me\": null, \"field_name\": null, \"pandas_type\": \"unicode\", \"numpy_'\r\n            b'type\": \"object\", \"metadata\": {\"encoding\": \"UTF-8\"}}], \"columns\":'\r\n            b' [{\"name\": \"c1\", \"field_name\": \"c1\", \"pandas_type\": \"list[unicod'\r\n            b'e]\", \"numpy_type\": \"object\", \"metadata\": null}, {\"name\": \"c2\", \"'\r\n            b'field_name\": \"c2\", \"pandas_type\": \"list[float64]\", \"numpy_type\":'\r\n            b' \"object\", \"metadata\": null}, {\"name\": null, \"field_name\": \"__in'\r\n            b'dex_level_0__\", \"pandas_type\": \"int64\", \"numpy_type\": \"int64\", \"'\r\n            b'metadata\": null}], \"pandas_version\": \"0.21.1\"}'}\r\n\r\n...\r\n\r\n> ArrowNotImplementedError: Not implemented type for list in DataFrameBlock: null\r\n```\r\n\r\nI.e., the array of empty lists of strings gets converted into an array of lists of type null, and in the pandas schema to lists of type float64.\r\n\r\nIf one changes the empty lists to values of None in the creation of the record batches, the roundtrip doesn't explode, but it will silently convert the column to a simple column of type float (i.e. I lose the list type) in pandas. This doesn't help, since other batches from the same source might have non-empty lists and would end up with a different inferred schema, and so can't be concatenated into a single table.\r\n\r\n(If this attempt at a double roundtrip seems weird, in my use case I receive data from a server in RecordBatches, which I convert to pandas for manipulation. I then serialize this data to disk using Arrow, and later need to read it back into pandas again for further manipulation. So I need to be able to go through various rounds of table->df->table->df->table etc., where at any time a record batch may have columns that contain only empty lists).",
        "created_at": "2017-12-20T09:54:42.000Z",
        "updated_at": "2018-01-02T16:43:15.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2018-01-02T16:43:14.000Z"
    },
    "comments": [
        {
            "created_at": "2018-01-02T16:43:15.009Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1941?focusedCommentId=16308337) by Wes McKinney (wesm):*\nResolved by PR https://github.com/apache/arrow/commit/4a3e6e361685cc3350e679ef3461103ffc4df0a2"
        }
    ]
}