{
    "issue": {
        "title": "[C++] Segfaults in compute::CallFunction",
        "body": "***Note**: This issue was originally created as [ARROW-9380](https://issues.apache.org/jira/browse/ARROW-9380). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI triggered these from R, so that's what the reproducers are in.\r\n\r\n1. Calling \"filter\" with no args segfaults.\r\n\r\n```r\n\r\narrow:::compute__CallFunction(\"filter\", list(), list(keep_na = FALSE))\r\n```\r\n\r\nTop of the backtrace from lldb:\r\n\r\n```Java\n\r\n  * frame #0: 0x0000000109e1c2c7 libarrow.100.dylib`arrow::Datum::type() const + 7\r\n    frame #1: 0x000000010a14a232 libarrow.100.dylib`arrow::compute::internal::(anonymous namespace)::FilterMetaFunction::ExecuteImpl(std::__1::vector<arrow::Datum, std::__1::allocator<arrow::Datum> > const&, arrow::compute::FunctionOptions const*, arrow::compute::ExecContext*) const + 66\r\n    frame #2: 0x0000000109fc32c9 libarrow.100.dylib`arrow::compute::MetaFunction::Execute(std::__1::vector<arrow::Datum, std::__1::allocator<arrow::Datum> > const&, arrow::compute::FunctionOptions const*, arrow::compute::ExecContext*) const + 41\r\n    frame #3: 0x0000000109fb3d3c libarrow.100.dylib`arrow::compute::CallFunction(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<arrow::Datum, std::__1::allocator<arrow::Datum> > const&, arrow::compute::FunctionOptions const*, arrow::compute::ExecContext*) + 844\r\n    frame #4: 0x0000000109fb3c47 libarrow.100.dylib`arrow::compute::CallFunction(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<arrow::Datum, std::__1::allocator<arrow::Datum> > const&, arrow::compute::FunctionOptions const*, arrow::compute::ExecContext*) + 599\r\n```\r\n\r\nThis is not the case with at least some other functions. If I try to call \"sum\" with no args, I get `Invalid: Function accepts 1 arguments but passed 0` and no segfault.\r\n\r\n2. Something is strange with is_null. It creates what appears to be a valid boolean array, but if I pass it to filter, it segfaults. I'm adding bindings for this in ARROW-9187 but this should run on current master:\r\n\r\n```r\n\r\nlibrary(arrow)\r\na <- Array$create(1:4)\r\nb <- arrow:::shared_ptr(Array, arrow:::call_function(\"is_null\", a))\r\na$Filter(b)\r\n```\r\n\r\nBacktrace:\r\n\r\n```Java\n\r\n * frame #0: 0x000000010a120bb6 libarrow.100.dylib`arrow::compute::internal::GetFilterOutputSize(arrow::ArrayData const&, arrow::compute::FilterOptions::NullSelectionBehavior) + 38\r\n    frame #1: 0x000000010a125659 libarrow.100.dylib`arrow::compute::internal::(anonymous namespace)::PrimitiveFilter(arrow::compute::KernelContext*, arrow::compute::ExecBatch const&, arrow::Datum*) + 121\r\n    frame #2: 0x0000000109fbbea4 libarrow.100.dylib`arrow::compute::detail::VectorExecutor::ExecuteBatch(arrow::compute::ExecBatch const&, arrow::compute::detail::ExecListener*) + 996\r\n    frame #3: 0x0000000109fba3e6 libarrow.100.dylib`arrow::compute::detail::VectorExecutor::Execute(std::__1::vector<arrow::Datum, std::__1::allocator<arrow::Datum> > const&, arrow::compute::detail::ExecListener*) + 150\r\n    frame #4: 0x0000000109fc0948 libarrow.100.dylib`arrow::compute::Function::Execute(std::__1::vector<arrow::Datum, std::__1::allocator<arrow::Datum> > const&, arrow::compute::FunctionOptions const*, arrow::compute::ExecContext*) const + 1016\r\n    frame #5: 0x0000000109fb3d3c libarrow.100.dylib`arrow::compute::CallFunction(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<arrow::Datum, std::__1::allocator<arrow::Datum> > const&, arrow::compute::FunctionOptions const*, arrow::compute::ExecContext*) + 844\r\n    frame #6: 0x000000010a14a9b5 libarrow.100.dylib`arrow::compute::internal::(anonymous namespace)::FilterMetaFunction::ExecuteImpl(std::__1::vector<arrow::Datum, std::__1::allocator<arrow::Datum> > const&, arrow::compute::FunctionOptions const*, arrow::compute::ExecContext*) const + 1989\r\n    frame #7: 0x0000000109fc32c9 libarrow.100.dylib`arrow::compute::MetaFunction::Execute(std::__1::vector<arrow::Datum, std::__1::allocator<arrow::Datum> > const&, arrow::compute::FunctionOptions const*, arrow::compute::ExecContext*) const + 41\r\n    frame #8: 0x0000000109fb3d3c libarrow.100.dylib`arrow::compute::CallFunction(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<arrow::Datum, std::__1::allocator<arrow::Datum> > const&, arrow::compute::FunctionOptions const*, arrow::compute::ExecContext*) + 844\r\n    frame #9: 0x0000000109fb3c47 libarrow.100.dylib`arrow::compute::CallFunction(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, std::__1::vector<arrow::Datum, std::__1::allocator<arrow::Datum> > const&, arrow::compute::FunctionOptions const*, arrow::compute::ExecContext*) + 599\r\n```\r\n\r\nBUT: if I call `as.vector` on `b` before using it as a Filter, it works--even though I've discarded the as.vector result and am still using the Array to filter. \r\n\r\n```r\n\r\nlibrary(arrow)\r\na <- Array$create(1:4)\r\nb <- arrow:::shared_ptr(Array, arrow:::call_function(\"is_null\", a))\r\nas.vector(b)\r\na$Filter(b)\r\n```\r\n\r\nJust printing (calling `ToString`) on `b` doesn't prevent the segfault. And I have not observed this with other boolean kernels. E.g. this does not segfault:\r\n\r\n```r\n\r\nlibrary(arrow)\r\na <- Array$create(1:4)\r\nb <- arrow:::shared_ptr(Array, arrow:::call_function(\"greater\", a, Scalar$create(3L)))\r\na$Filter(b)\r\n```",
        "created_at": "2020-07-08T18:29:46.000Z",
        "updated_at": "2020-07-10T00:56:21.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-07-10T00:56:10.000Z"
    },
    "comments": [
        {
            "created_at": "2020-07-10T00:56:10.744Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9380?focusedCommentId=17155020) by Wes McKinney (wesm):*\nIssue resolved by pull request 7698\n<https://github.com/apache/arrow/pull/7698>"
        }
    ]
}