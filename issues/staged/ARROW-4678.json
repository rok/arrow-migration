{
    "issue": {
        "title": "[Rust] Minimize unstable feature usage",
        "body": "***Note**: This issue was originally created as [ARROW-4678](https://issues.apache.org/jira/browse/ARROW-4678). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe Rust implementation currently uses quite a few nightly features. This is unfortunately a hard blocker on using these crates for many users.\r\n\r\nHere's the list of currently use nightly features:\r\n \\* type_ascription: Unused, can be trivially removed.\r\n \\* rustc_private: Unused, can be trivially removed.\r\n \\* box_syntax: Indefinitely far from stabilization, trivially replaceable with Box::new.\r\n \\* box_patterns: Indefinitely far from stabilization, replaceable with some minor restructuring of a couple of matches.\r\n \\* serde's alloc feature: Unused, can be trivially removed.\r\n \\* try_from: Scheduled for stabilization in Rust 1.35.\r\n \\* specialization: Actively being worked on - maybe ~1 year timeframe?\r\n \\* packed_simd: Actively being worked on - maybe ~1 year timeframe?\r\n\r\nThe first set of features are easy enough to get rid of - I'll make a PR to do that (https://github.com/sfackler/arrow/tree/more-stable). I'm a bit less sure of what to do with specialization and packed_simd, though.",
        "created_at": "2019-02-26T00:57:29.000Z",
        "updated_at": "2020-07-27T17:11:04.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-02-28T08:33:51.000Z"
    },
    "comments": [
        {
            "created_at": "2019-02-26T01:06:15.548Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4678?focusedCommentId=16777451) by Chao Sun (csun):*\nI don't think we can remove specialization right now. It's been used in many places.\u00a0"
        },
        {
            "created_at": "2019-02-26T01:30:06.191Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4678?focusedCommentId=16777461) by Steven Fackler (sfackler):*\nRight, yeah.\r\n\r\n\u00a0\r\n\r\nIn the arrow crate itself, it's only used for the BufferBuilderTrait. One possibility there is to have a Cargo feature that has the specialized, blanket impl, and separate impls for each primitive type without the feature. You can't work with it generically over arbitrary primitive types then, but it's still better than nothing.\r\n\r\nThere's more usage in parquet, but I haven't dug too deeply into it."
        },
        {
            "created_at": "2019-02-26T02:39:34.922Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4678?focusedCommentId=16777510) by Paddy Horan (paddyhoran):*\nYeah specialization is the big one.\u00a0 We did have an elaborate macro approach that just started to break down once we adopted a bit packed Boolean array representation.\u00a0 Generic code became impossible.\r\n\r\nOnce we took that step and it was agreed that we were building against nightly we adopted packed_simd.\r\n\r\nWe should minimize the nightly features though and try to get back on stable when possible."
        },
        {
            "created_at": "2019-02-26T04:37:31.145Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4678?focusedCommentId=16777573) by Neville Dipale (nevi_me):*\nI'm the one who added box_syntax and box_patterns. If there's a way of matching datatypes in a ListArray(Box<DataType>) that can be done without the box pattern, we can remove the 2 unstable features.\r\n\r\nEDIT:\u00a0looks like try_from is getting stabilised in 1.34\r\n\u00a0\r\n```java\n\r\nerror: the feature `try_from` has been stable since 1.34.0 and no longer requires an attribute to enable\r\n  --> arrow/src/lib.rs:27:12\r\n   |\r\n27 | #![feature(try_from)]\r\n   |            ^^^^^^^^\r\n   |\r\n   = note: `-D stable-features` implied by `-D warnings`\r\n```\r\n\u00a0"
        },
        {
            "created_at": "2019-02-28T08:33:51.255Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4678?focusedCommentId=16780258) by Chao Sun (csun):*\nIssue resolved by pull request 3764\n<https://github.com/apache/arrow/pull/3764>"
        },
        {
            "created_at": "2019-02-28T18:10:15.947Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4678?focusedCommentId=16780803) by Chao Sun (csun):*\n`[~sfackler]` could you try to assign this to yourself? since the issue was resolved by you."
        },
        {
            "created_at": "2019-02-28T18:13:54.253Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4678?focusedCommentId=16780805) by Steven Fackler (sfackler):*\nIt looks like I'm not allowed to."
        },
        {
            "created_at": "2019-02-28T18:26:53.685Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4678?focusedCommentId=16780816) by Chao Sun (csun):*\nSeems I can't assign that to you as well - you name doesn't show up in the available assignees. \r\n\r\n`[~wesmckinn]`, `[~xhochy]`: do you know how to assign this JIRA to `[~sfackler]`? do we need to add him as a contributor first? Thanks."
        },
        {
            "created_at": "2019-03-01T17:41:23.013Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4678?focusedCommentId=16781909) by Uwe Korn (uwe):*\n`[~csun]` yes an admin needs to add him first. Taking care of that now."
        }
    ]
}