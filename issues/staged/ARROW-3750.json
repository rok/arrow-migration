{
    "issue": {
        "title": "[R] Pass various wrapped Arrow objects created in Python into R with zero copy via reticulate",
        "body": "***Note**: This issue was originally created as [ARROW-3750](https://issues.apache.org/jira/browse/ARROW-3750). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nA user may wish to use some functionality available only in pyarrow using reticulate; it would be useful to be able to construct an R wrapper object to the C++ object inside the corresponding Python type, e.g. `pyarrow.Table`. \r\n\r\nThis probably will require some new functions to return the memory address of the shared_ptr/unique_ptr inside the Cython types so that a function on the R side can copy the smart pointer and create the corresponding R wrapper type\r\n\r\ncc `[~pitrou]`",
        "created_at": "2018-11-10T05:37:42.000Z",
        "updated_at": "2020-03-02T22:03:36.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-03-02T22:03:36.000Z"
    },
    "comments": [
        {
            "created_at": "2018-11-10T10:54:45.263Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3750?focusedCommentId=16682338) by Romain Francois (romainfrancois):*\nSmall example to get started:\u00a0\r\n```Java\n\r\nlibrary(reticulate)\r\npa <- import(\"pyarrow\")\r\ni32 <- pa$int32()\r\n.Internal(inspect(i32))\r\n#> @7fecb9f6caa8 04 ENVSXP g0c0 [OBJ,NAM(3),ATT] <0x7fecb9f6caa8>\r\n#> FRAME:\r\n#> @7fecb9f6c958 02 LISTSXP g0c0 [] \r\n#> TAG: @7fecae9a1b08 01 SYMSXP g1c0 [MARK] \"convert\"\r\n#> @7fecb9f538b0 10 LGLSXP g0c1 [] (len=1, tl=0) 1\r\n#> TAG: @7fecba1a1f00 01 SYMSXP g0c0 [] \"pyobj\"\r\n#> @7fecb9f6ca00 22 EXTPTRSXP g0c0 [] \r\n#> ENCLOS:\r\n#> @7fecad01e2a8 04 ENVSXP g1c0 [MARK,NAM(3)] <R_EmptyEnv>\r\n#> ATTRIB:\r\n#> @7fecb9f711f0 02 LISTSXP g0c0 [] \r\n#> TAG: @7fecad01dfd0 01 SYMSXP g1c0 [MARK,NAM(3),LCK,gp=0x6000] \"class\" (has value)\r\n#> @7fecb9f05ec8 16 STRSXP g0c2 [NAM(3)] (len=2, tl=0)\r\n#> @7fecb9eeb458 09 CHARSXP g0c3 [gp=0x60,ATT] [ASCII] [cached] \"pyarrow.lib.DataType\"\r\n#> @7fecaeb87cb8 09 CHARSXP g1c3 [MARK,gp=0x60] [ASCII] [cached] \"python.builtin.object\"\r\nget(\"pyobj\", as.environment(i32))\r\n#> <pointer: 0x1157fae40>\r\n```\r\n\u00a0\r\n\r\nThen `pyobj` is an external pointer to some pyObject I suppose, we would need to figure out how to go from this to the underlying shared_ptr or unique_ptr\r\n\r\n\u00a0"
        },
        {
            "created_at": "2018-11-11T19:38:37.141Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3750?focusedCommentId=16682990) by Wes McKinney (wesm):*\nMethods would need to be added to the Cython extension types to give the memory address of the smart pointer object they contain"
        },
        {
            "created_at": "2019-10-08T23:12:54.233Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3750?focusedCommentId=16947238) by Wes McKinney (wesm):*\n`[~apitrou]` seems like this is a potential case for the C API"
        },
        {
            "created_at": "2019-10-08T23:19:58.510Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3750?focusedCommentId=16947241) by Neal Richardson (npr):*\nSee also\u00a0ARROW-5956 for possibly relevant discussion"
        },
        {
            "created_at": "2019-10-23T21:10:23.023Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3750?focusedCommentId=16958255) by Neal Richardson (npr):*\nhttps://github.com/pitrou/arrow/pull/5 is our proof-of-concept using the C API. Once the protocol is approved we can move ahead with it."
        }
    ]
}