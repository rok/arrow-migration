{
    "issue": {
        "title": "[C++] Unqualified format() calls are ambiguous in C++20",
        "body": "***Note**: This issue was originally created as [ARROW-15520](https://issues.apache.org/jira/browse/ARROW-15520). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI work on MSVC's C++ Standard Library implementation, and we regularly build open-source projects, including Apache Arrow, with development versions of the MSVC toolset in order to find and fix compiler/library bugs before they can cause problems for our programmer-users like you. This also allows us to provide advance notice of breaking changes in the C++ Standard that will affect you, which is the case here.\r\n\r\nWe recently implemented C+20's std::format(), followed by the C 20 Defect Report [P2418R2](https://wg21.link/P2418R2) \"Add Support For std::generator-like Types To std::format\" with [microsoft/STL#2323](https://github.com/microsoft/STL/pull/2323). This prevents Apache Arrow from compiling with the latest C+ Standard mode enabled, because MakeTimeFormatter() in diff.cc contains unqualified calls: <https://github.com/apache/arrow/blob/56e270fda7f5647a157acd1e428d9735d6399881/cpp/src/arrow/array/diff.cc#L636-L681>\r\n\r\n(The issue involves Argument-Dependent Lookup. The using-declaration `using arrow_vendored::date::format;` means that the following unqualified calls to `format()` will consider the overload in the `arrow_vendored::date` namespace, which is the desired overload. However, because the arguments are `std::chrono::duration` types, `std` is considered an \"associated namespace\", so it will also be searched for overloads. Our implementation of the chrono header includes the new format header (as permitted by the Standard - we do this because chrono types are formattable in C++20), so the `std::format` overload is visible. Finally, the signature change required by the P2418R2 paper makes `std::format` a highly greedy \"perfect forwarding\" signature, so it's ambiguous with the desired `arrow_vendored::date::format` overload.)\r\n\r\nThe full steps to reproduce are:\r\n1. Build the microsoft/STL repo, and update the INCLUDE/LIB/etc. environment variables so that it can be consumed. (Or wait for Visual Studio 2022 17.2 Preview 2 to ship, as it will contain these changes.)\n1. Configure Apache Arrow with the latest C++ Standard version: cmake -G Ninja -S . -B build -DCMAKE_CXX_STANDARD=23 (note that C+23 must be selected at this time even though std::format() is C+20 - it's a long story)\n1. diff.cc fails to compile with:\n   \n   \u00a0\n   ```\n   \n   ninja: Entering directory `build'\n   [13/191] Building CXX object src\\arrow\\CMakeFiles\\arrow_static.dir\\array\\diff.cc.obj\n   FAILED: src/arrow/CMakeFiles/arrow_static.dir/array/diff.cc.obj\n   C:\\PROGRA~1\\MIB055~1\\2022\\Preview\\VC\\Tools\\MSVC\\1431~1.311\\bin\\Hostx64\\x64\\cl.exe \u00a0/nologo /TP -DARROW_EXPORTING -DARROW_HAVE_RUNTIME_AVX2 -DARROW_HAVE_RUNTIME_AVX512 -DARROW_HAVE_RUNTIME_BMI2 -DARROW_HAVE_RUNTIME_SSE4_2 -DARROW_HAVE_SSE4_2 -DARROW_STATIC -DARROW_WITH_TIMING_TESTS -DURI_STATIC_BUILD -D_CRT_SECURE_NO_WARNINGS -D_ENABLE_EXTENDED_ALIGNED_STORAGE -IC:\\Temp\\arrow\\cpp\\build\\src -IC:\\Temp\\arrow\\cpp\\src -IC:\\Temp\\arrow\\cpp\\src\\generated -IC:\\Temp\\arrow\\cpp\\thirdparty\\flatbuffers\\include -IC:\\Temp\\arrow\\cpp\\build\\boost_ep-prefix\\src\\boost_ep -IC:\\Temp\\arrow\\cpp\\build\\xsimd_ep\\src\\xsimd_ep-install\\include -IC:\\Temp\\arrow\\cpp\\thirdparty\\hadoop\\include /DWIN32 /D_WINDOWS \u00a0/GR /EHsc /D_SILENCE_TR1_NAMESPACE_DEPRECATION_WARNING \u00a0 /EHsc /wd5105 /bigobj /utf-8 /W3 /wd4800 /wd4996 /wd4065 \u00a0 /MD /O2 /Ob2 /DNDEBUG -std:c++latest /showIncludes /Fosrc\\arrow\\CMakeFiles\\arrow_static.dir\\array\\diff.cc.obj /Fdsrc\\arrow\\CMakeFiles\\arrow_static.dir\\arrow_static.pdb /FS -c C:\\Temp\\arrow\\cpp\\src\\arrow\\array\\diff.cc\n   C:\\Temp\\arrow\\cpp\\src\\arrow\\array\\diff.cc(652): error C2666: 'arrow_vendored::date::format': 2 overloads have similar conversions\n   C:\\Temp\\arrow\\cpp\\src\\arrow/vendored/datetime/date.h(6264): note: could be 'std::basic_string<char,std::char_traits<char>,std::allocator<char>> arrow_vendored::date::format<_Elem,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::nano>>>(const CharT *,const Streamable &)'\n   \u00a0 \u00a0 \u00a0 \u00a0 with\n   \u00a0 \u00a0 \u00a0 \u00a0 [\n   \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 _Elem=char,\n   \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 CharT=char,\n   \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 Streamable=std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::nano>>\n   \u00a0 \u00a0 \u00a0 \u00a0 ]\n   C:\\GitHub\\STL\\out\\build\\x64\\out\\inc\\format(3100): note: or \u00a0 \u00a0 \u00a0 'std::wstring std::format<std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::nano>>>(const std::_Basic_format_string<wchar_t,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::nano>>>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::nano>> &&)' [found using argument-dependent lookup]\n   C:\\GitHub\\STL\\out\\build\\x64\\out\\inc\\format(3095): note: or \u00a0 \u00a0 \u00a0 'std::string std::format<std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::nano>>>(const std::_Basic_format_string<char,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::nano>>>,std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::nano>> &&)' [found using argument-dependent lookup]\n   C:\\Temp\\arrow\\cpp\\src\\arrow\\array\\diff.cc(680): note: while trying to match the argument list '(const _Elem *, std::chrono::time_point<std::chrono::system_clock,std::chrono::duration<__int64,std::nano>>)'\n   \u00a0 \u00a0 \u00a0 \u00a0 with\n   \u00a0 \u00a0 \u00a0 \u00a0 [\n   \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 _Elem=char\n   \u00a0 \u00a0 \u00a0 \u00a0 ]\n   C:\\Temp\\arrow\\cpp\\src\\arrow\\array\\diff.cc(680): note: note: qualification adjustment (const/volatile) may be causing the ambiguity\n   C:\\Temp\\arrow\\cpp\\src\\arrow\\array\\diff.cc(451): note: see reference to function template instantiation 'arrow::Formatter arrow::MakeFormatterImpl::MakeTimeFormatter<arrow::TimestampType,true>(const std::string &)' being compiled\n   [...]\n   ```\n   The fix is very simple: remove the using-declaration and explicitly qualify each call. I will submit a pull request on GitHub for this.\n   \u00a0\n   (Even if Apache Arrow isn't planning on using C++20 any time soon, making this change will make it easier for MSVC to continue validating Apache Arrow with the latest toolset and Standard changes, and it will remove a potential future headache if and when Apache Arrow does migrate to later Standard versions.)",
        "created_at": "2022-02-02T00:05:45.000Z",
        "updated_at": "2022-02-10T16:09:19.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-02-02T15:04:34.000Z"
    },
    "comments": [
        {
            "created_at": "2022-02-02T15:04:34.108Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15520?focusedCommentId=17485870) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 12317\n<https://github.com/apache/arrow/pull/12317>"
        }
    ]
}