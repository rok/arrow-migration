{
    "issue": {
        "title": "[C++][Compute] Formalize Op functor concept",
        "body": "***Note**: This issue was originally created as [ARROW-9161](https://issues.apache.org/jira/browse/ARROW-9161). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe compute namespace makes extensive use of functors for generating kernel implementations. These are named `Op`, `Generator`, and functors. It would improve readability of the compute namespace if we formalized the concept and named instances consistently and made clear what functions they're expected to provide. ",
        "created_at": "2020-06-17T14:28:54.000Z",
        "updated_at": "2022-04-08T13:13:26.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2020-06-17T23:59:30.137Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9161?focusedCommentId=17138909) by Wes McKinney (wesm):*\nThere are several recurring concepts:\r\n\r\n- \\***What are usually called \"Op\" in templates**\\*. These are functors that have a \"Call\" function that processes a single element of data\n  \n- \\***Functors that I would call \"applicators\"**\\*. These take an \"Op\" along with the dependent types (e.g. the input and output types) and produce a class that has an \"Exec\" function that can be used for an `ArrayKernel::exec` member. Examples include `codegen::ScalarUnary` \n  \n  For example, ScalarBinary looks like this:\n  \n  ```Java\n  \n  template <typename OutType, typename Arg0Type, typename Arg1Type, typename Op>\n  struct ScalarBinary {\n  ```\n  \n  The way to interpret this is: this is an applicator that takes 3 dependent types and an Op functor providing the operation to be applied to the elements of the input data\n  \n  Perhaps we could call this \"BinaryApplicator\" or something. \n  \n  Finally, we have what I'm calling \"generator-dispatchers\". These cause the applicator templates to be instantiated and for the caller to select one of the instantiated templates dynamically without using macros.\n  \n  I'm currently renaming the generator-dispatchers for clarity in https://github.com/apache/arrow/pull/7461"
        }
    ]
}