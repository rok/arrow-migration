{
    "issue": {
        "title": "[C++][Compute] Extract preallocation logic from KernelExecutor",
        "body": "***Note**: This issue was originally created as [ARROW-13121](https://issues.apache.org/jira/browse/ARROW-13121). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nCurrently KernelExecutor handles preallocation of null bitmaps and other buffers based on simple flags on each Kernel. This is not very flexible and we end up leaving a lot of performance on the table in cases where we can preallocate but the behavior can't be captured in the available flags. For example, in the case of `binary_string_join_element_wise`, it would be possible to preallocate all buffers (even the character buffer) and write output into slices.\r\n\r\nHaving this as a public function would enable us to unit test it directly (currently Executors are only tested indirectly through calling of compute::Functions) and reuse it, for example to correctly preallocate a small temporary for pipelined execution\r\n\r\nOne way this could be added is as a new method on each Kernel:\r\n\r\n```Java\n\r\n// Output preallocated Datums sufficient for execution of the kernel on each ExecBatch.\r\n// The output Datums may not be identically chunked to the input batches, for example\r\n// kernels which support contiguous output preallocation will preallocate a single Datum\r\n// (and can then output into slices of that Datum).\r\nResult<std::vector<Datum>> Kernel::prepare_output(\r\n  const Kernel*,\r\n  KernelContext*,\r\n  const std::vector<ExecBatch>& inputs)\r\n```\r\n",
        "created_at": "2021-06-18T17:19:38.000Z",
        "updated_at": "2022-06-06T20:19:14.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-06-18T17:19:53.892Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13121?focusedCommentId=17365627) by Ben Kietzman (bkietz):*\n`[~wesm]`"
        },
        {
            "created_at": "2021-06-18T17:32:29.765Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13121?focusedCommentId=17365633) by Antoine Pitrou (apitrou):*\nI'd also mention that when I worked on ARROW-13042, I spent a lot of time trying to figure out which code paths exactly got executed in `exec.cc` and I never fully figured it out (one particularly case was implicit casting and broadcasting with a NullScalar LHS and a ChunkedArray RHS on a scalar kernel). I ended up trying to find clues in other places instead."
        },
        {
            "created_at": "2021-06-21T14:12:48.282Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13121?focusedCommentId=17366621) by Ben Kietzman (bkietz):*\nAnother point which we might like to optimize: https://github.com/apache/arrow/pull/10550#discussion_r654521795"
        }
    ]
}