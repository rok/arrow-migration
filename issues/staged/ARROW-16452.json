{
    "issue": {
        "title": "[R] After dataset scan, some RAM is left consumed until a garbage collection pass",
        "body": "***Note**: This issue was originally created as [ARROW-16452](https://issues.apache.org/jira/browse/ARROW-16452). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThis might be \"not a bug\" but I wonder if we can do something better here.  When I create and execute a dplyr query there is a bunch of RAM that is left allocated until the next GC pass.\r\n\r\nSince R's garbage collection is only based on RAM that R has allocated this extra memory (which can be quite substantial) might never be freed.\r\n\r\nPerhaps we should just manually trigger a gc pass after running an execution plan?  Or it may be good to get a better understanding of what exactly this memory is being used for.\r\n\r\nIn the example below I load ~2GB of data but after the collect there is ~3GB used.  I wait 10 seconds to ensure it's not jemalloc.  Then I run `gc()` manually and ~1GB is freed.\r\n\r\n```\n\r\n> dataset = arrow::open_dataset('/home/pace/dev/data/dataset/parquet/5')\r\n> default_memory_pool()$bytes_allocated\r\n[1] 64\r\n> x <- dataset %>% collect(as_data_frame=FALSE)\r\n> arrow::default_memory_pool()$bytes_allocated\r\n[1] 2921135104\r\n> Sys.sleep(10)\r\n> arrow::default_memory_pool()$bytes_allocated\r\n[1] 2921135104\r\n> gc()\r\n          used (Mb) gc trigger (Mb) max used (Mb)\r\nNcells  917099 49.0    1498168 80.1  1498168 80.1\r\nVcells 1649894 12.6    8388608 64.0  2617403 20.0\r\n> arrow::default_memory_pool()$bytes_allocated\r\n[1] 2028716480\r\n```",
        "created_at": "2022-05-04T02:58:05.000Z",
        "updated_at": "2022-07-08T12:47:42.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-05-09T18:20:57.009Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16452?focusedCommentId=17533950) by Neal Richardson (npr):*\nWe already are using a custom memory pool to connect it to gc(): https://github.com/apache/arrow/blob/master/r/src/memorypool.cpp\r\n\r\nIs there a change we could make there? I don't think we always want to call gc() before returning after running an exec plan because that will make the return slower. IDK if putting it in a background thread would work?"
        },
        {
            "created_at": "2022-05-09T20:00:49.936Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16452?focusedCommentId=17534000) by Weston Pace (westonpace):*\nI'm pretty sure R's gc has to be called on R's thread so I don't think we can do a background thread.  However, we can avoid calling `gc()` if we figure out what objects are being held onto and proactively delete them ourselves.  I think that would probably be the best approach."
        }
    ]
}