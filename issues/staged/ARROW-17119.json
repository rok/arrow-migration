{
    "issue": {
        "title": "[C++] Invalid free at shutdown in Asof node static data",
        "body": "***Note**: This issue was originally created as [ARROW-17119](https://issues.apache.org/jira/browse/ARROW-17119). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen I run [gluten\\|[oap-project/gluten (github.com)|https://github.com/oap-project/gluten]] project google test, it will show a error message after all the simple tests passed.\r\n```java\n\r\n\r\ngluten/cpp/build/src# ./exec_backend_test\r\nRunning main() from /build/googletest-j5yxiC/googletest-1.10.0/googletest/src/gtest_main.cc\r\n[==========] Running 2 tests from 1 test suite.\r\n[----------] Global test environment set-up.\r\n[----------] 2 tests from TestExecBackend\r\n[ RUN \u00a0 \u00a0 \u00a0] TestExecBackend.CreateBackend\r\nSet backend factory.\r\n[ \u00a0 \u00a0 \u00a0 OK ] TestExecBackend.CreateBackend (0 ms)\r\n[ RUN \u00a0 \u00a0 \u00a0] TestExecBackend.GetResultIterator\r\n[ \u00a0 \u00a0 \u00a0 OK ] TestExecBackend.GetResultIterator (0 ms)\r\n[----------] 2 tests from TestExecBackend (0 ms total)[----------] Global test environment tear-down\r\n[==========] 2 tests from 1 test suite ran. (0 ms total)\r\n[ \u00a0PASSED \u00a0] 2 tests.\r\ncorrupted size vs. prev_size in fastbins\r\nAborted (core dumped)\r\n \n```\r\nI use valgrind to detect, here is the details\r\n```java\n\r\n// code placeholder\r\n==32256== Invalid read of size 8\r\n==32256== \u00a0 \u00a0at 0x5E493B7: std::set<std::shared_ptr<arrow::DataType>, std::less<std::shared_ptr<arrow::DataType> >, std::allocator<std::shared_ptr<arrow::DataType> > >::~set() (in /mnt/jcc/code/gluten/cpp/build/releases/libarrow.so.900.0.0)\r\n==32256== \u00a0 \u00a0by 0x77E0FDD: __cxa_finalize (cxa_finalize.c:83)\r\n==32256== \u00a0 \u00a0by 0x5955816: ??? (in /mnt/jcc/code/gluten/cpp/build/releases/libarrow.so.900.0.0)\r\n==32256== \u00a0 \u00a0by 0x4011F6A: _dl_fini (dl-fini.c:138)\r\n==32256== \u00a0 \u00a0by 0x77E08A6: __run_exit_handlers (exit.c:108)\r\n==32256== \u00a0 \u00a0by 0x77E0A5F: exit (exit.c:139)\r\n==32256== \u00a0 \u00a0by 0x77BE089: (below main) (libc-start.c:342)\r\n==32256== \u00a0Address 0xd984680 is 16 bytes inside a block of size 48 free'd\r\n==32256== \u00a0 \u00a0at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32256== \u00a0 \u00a0by 0x5E493CD: std::set<std::shared_ptr<arrow::DataType>, std::less<std::shared_ptr<arrow::DataType> >, std::allocator<std::shared_ptr<arrow::DataType> > >::~set() (in /mnt/jcc/code/gluten/cpp/build/releases/libarrow.so.900.0.0)\r\n==32256== \u00a0 \u00a0by 0x77E0FDD: __cxa_finalize (cxa_finalize.c:83)\r\n==32256== \u00a0 \u00a0by 0x7FF65B6: ??? (in /mnt/jcc/code/gluten/cpp/build/releases/libarrow_dataset_jni.so.900.0.0)\r\n==32256== \u00a0 \u00a0by 0x4011F6A: _dl_fini (dl-fini.c:138)\r\n==32256== \u00a0 \u00a0by 0x77E08A6: __run_exit_handlers (exit.c:108)\r\n==32256== \u00a0 \u00a0by 0x77E0A5F: exit (exit.c:139)\r\n==32256== \u00a0 \u00a0by 0x77BE089: (below main) (libc-start.c:342)\r\n==32256== \u00a0Block was alloc'd at\r\n==32256== \u00a0 \u00a0at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32256== \u00a0 \u00a0by 0x5E4E5E9: std::set<std::shared_ptr<arrow::DataType>, std::less<std::shared_ptr<arrow::DataType> >, std::allocator<std::shared_ptr<arrow::DataType> > >::set(std::initializer_list<std::shared_ptr<arrow::DataType> >, std::less<std::shared_ptr<arrow::DataType> > const&, std::allocator<std::shared_ptr<arrow::DataType> > const&) (in /mnt/jcc/code/gluten/cpp/build/releases/libarrow.so.900.0.0)\r\n==32256== \u00a0 \u00a0by 0x7FF4CC4: _GLOBAL__sub_I_asof_join_node.cc (in /mnt/jcc/code/gluten/cpp/build/releases/libarrow_dataset_jni.so.900.0.0)\r\n==32256== \u00a0 \u00a0by 0x4011B99: call_init.part.0 (dl-init.c:72)\r\n==32256== \u00a0 \u00a0by 0x4011CA0: call_init (dl-init.c:30)\r\n==32256== \u00a0 \u00a0by 0x4011CA0: _dl_init (dl-init.c:119)\r\n==32256== \u00a0 \u00a0by 0x4001139: ??? (in /usr/lib/x86_64-linux-gnu/ld-2.31.so)\r\n==32256==\r\n==32256== Invalid free() / delete / delete[] / realloc()\r\n==32256== \u00a0 \u00a0at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32256== \u00a0 \u00a0by 0x5E493CD: std::set<std::shared_ptr<arrow::DataType>, std::less<std::shared_ptr<arrow::DataType> >, std::allocator<std::shared_ptr<arrow::DataType> > >::~set() (in /mnt/jcc/code/gluten/cpp/build/releases/libarrow.so.900.0.0)\r\n==32256== \u00a0 \u00a0by 0x77E0FDD: __cxa_finalize (cxa_finalize.c:83)\r\n==32256== \u00a0 \u00a0by 0x5955816: ??? (in /mnt/jcc/code/gluten/cpp/build/releases/libarrow.so.900.0.0)\r\n==32256== \u00a0 \u00a0by 0x4011F6A: _dl_fini (dl-fini.c:138)\r\n==32256== \u00a0 \u00a0by 0x77E08A6: __run_exit_handlers (exit.c:108)\r\n==32256== \u00a0 \u00a0by 0x77E0A5F: exit (exit.c:139)\r\n==32256== \u00a0 \u00a0by 0x77BE089: (below main) (libc-start.c:342)\r\n==32256== \u00a0Address 0xd984670 is 0 bytes inside a block of size 48 free'd\r\n==32256== \u00a0 \u00a0at 0x483CFBF: operator delete(void*) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32256== \u00a0 \u00a0by 0x5E493CD: std::set<std::shared_ptr<arrow::DataType>, std::less<std::shared_ptr<arrow::DataType> >, std::allocator<std::shared_ptr<arrow::DataType> > >::~set() (in /mnt/jcc/code/gluten/cpp/build/releases/libarrow.so.900.0.0)\r\n==32256== \u00a0 \u00a0by 0x77E0FDD: __cxa_finalize (cxa_finalize.c:83)\r\n==32256== \u00a0 \u00a0by 0x7FF65B6: ??? (in /mnt/jcc/code/gluten/cpp/build/releases/libarrow_dataset_jni.so.900.0.0)\r\n==32256== \u00a0 \u00a0by 0x4011F6A: _dl_fini (dl-fini.c:138)\r\n==32256== \u00a0 \u00a0by 0x77E08A6: __run_exit_handlers (exit.c:108)\r\n==32256== \u00a0 \u00a0by 0x77E0A5F: exit (exit.c:139)\r\n==32256== \u00a0 \u00a0by 0x77BE089: (below main) (libc-start.c:342)\r\n==32256== \u00a0Block was alloc'd at\r\n==32256== \u00a0 \u00a0at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==32256== \u00a0 \u00a0by 0x5E4E5E9: std::set<std::shared_ptr<arrow::DataType>, std::less<std::shared_ptr<arrow::DataType> >, std::allocator<std::shared_ptr<arrow::DataType> > >::set(std::initializer_list<std::shared_ptr<arrow::DataType> >, std::less<std::shared_ptr<arrow::DataType> > const&, std::allocator<std::shared_ptr<arrow::DataType> > const&) (in /mnt/jcc/code/gluten/cpp/build/releases/libarrow.so.900.0.0)\r\n==32256== \u00a0 \u00a0by 0x7FF4CC4: _GLOBAL__sub_I_asof_join_node.cc (in /mnt/jcc/code/gluten/cpp/build/releases/libarrow_dataset_jni.so.900.0.0)\r\n==32256== \u00a0 \u00a0by 0x4011B99: call_init.part.0 (dl-init.c:72)\r\n==32256== \u00a0 \u00a0by 0x4011CA0: call_init (dl-init.c:30)\r\n==32256== \u00a0 \u00a0by 0x4011CA0: _dl_init (dl-init.c:119)\r\n==32256== \u00a0 \u00a0by 0x4001139: ??? (in /usr/lib/x86_64-linux-gnu/ld-2.31.so) \n```\r\nI found it is static std::set in file <font color=\"#FF0000\">asof_join_node.cc</font>\r\n\r\n<font color=\"#172b4d\">Can you help me to check if it has invalid memory free in your convienent?</font>\r\n\r\n<font color=\"#172b4d\">Thank you very much!\r\n</font>\r\n```java\n\r\nprivate:\u00a0 \r\nstatic const std::set<std::shared_ptr<DataType>> kSupportedOnTypes_;\r\nstatic const std::set<std::shared_ptr<DataType>> kSupportedByTypes_;\r\nstatic const std::set<std::shared_ptr<DataType>> kSupportedDataTypes_;\n```",
        "created_at": "2022-07-19T02:25:53.000Z",
        "updated_at": "2022-08-27T14:41:52.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-07-19T13:52:27.000Z"
    },
    "comments": [
        {
            "created_at": "2022-07-19T02:50:29.564Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17119?focusedCommentId=17568289) by Jin Chengcheng (Jin Chengcheng):*\nI extract the relevant code\r\n```java\n\r\n\u00a0\r\n\r\n#define TYPE_FACTORY(NAME, KLASS) \u00a0 \u00a0 \u00a0\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\\\r\n\r\n\u00a0 const std::shared_ptr<DataType>& NAME()\r\n{ \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\\\r\n\r\n\u00a0 \u00a0 static std::shared_ptr<DataType> result = std::make_shared<KLASS>(); \\\r\n\r\n\u00a0 \u00a0 return result; \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \\\r\n\r\n\u00a0 }\r\n\r\nTYPE_FACTORY(null, NullType)\r\n\r\nTYPE_FACTORY(boolean, BooleanType)\r\n\r\nTYPE_FACTORY(int8, Int8Type)\r\n\r\nTYPE_FACTORY(uint8, UInt8Type)\r\n\r\nTYPE_FACTORY(int16, Int16Type)\r\n\r\nTYPE_FACTORY(uint16, UInt16Type)\r\n\r\nTYPE_FACTORY(int32, Int32Type)\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n\r\nARROW_EXPORT const std::shared_ptr<DataType>& int16();\r\n\r\n\u00a0\r\n\r\nconst std::set<std::shared_ptr<DataType>> AsofJoinNode::kSupportedOnTypes_ = {int64()};\r\n\r\n\u00a0\r\n\r\n\u00a0private:\r\n\r\n\u00a0 static const std::set<std::shared_ptr<DataType>> kSupportedOnTypes_;\r\n\r\nvoid InitStaticData() {\u00a0\r\n // Signed int types\r\ng_signed_int_types = {int8(), int16(), int32(), int64()}; \u00a0 \n```"
        },
        {
            "created_at": "2022-07-19T08:24:27.530Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17119?focusedCommentId=17568415) by Antoine Pitrou (apitrou):*\n`[~westonpace]`"
        },
        {
            "created_at": "2022-07-19T11:41:29.926Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17119?focusedCommentId=17568491) by David Li (lidavidm):*\nI observed this in another PR. It was caused by ODR violation. How is Arrow being linked to this test?"
        },
        {
            "created_at": "2022-07-19T12:20:13.484Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17119?focusedCommentId=17568513) by Jin Chengcheng (Jin Chengcheng):*\nIt is used in [gluten/exec_backend_test.cc at main \u00b7 oap-project/gluten (github.com)](https://github.com/oap-project/gluten/blob/main/cpp/src/jni/exec_backend_test.cc)\r\n\r\nThe library includes libarrow_dataset_jni.so.900\u00a0 libarrow.so.900\u00a0 \u00a0libgandiva.so.900\u00a0\r\n\r\nLink here\r\n\r\n<https://github.com/oap-project/gluten/blob/ef373ef805a12bbfcfd0e857e517daa657741583/cpp/src/CMakeLists.txt#L289-L291>\r\n\r\n<https://github.com/oap-project/gluten/blob/ef373ef805a12bbfcfd0e857e517daa657741583/cpp/CMakeLists.txt#L71-L109>\r\n\r\nAfter I remove libarrow.so, it works well."
        },
        {
            "created_at": "2022-07-19T13:02:29.582Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17119?focusedCommentId=17568547) by David Li (lidavidm):*\nWell then possibly one of those is linking libarrow.a (you can check for Arrow symbols with `nm`) and indeed the dataset JNI library always links the Arrow static library: https://github.com/apache/arrow/blob/4e9053bbdb32ac56472f9b8da7c3eab3a8c802c1/java/dataset/src/main/cpp/CMakeLists.txt#L36"
        },
        {
            "created_at": "2022-07-19T13:04:18.546Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17119?focusedCommentId=17568549) by David Li (lidavidm):*\nI don't think there's anything wrong in the asof join code, it just appears to be more prone to this. The correct fix would be to link things properly (if you have C++ code that somehow needs to depend on the JNI library, then it needs to be possible to configure the JNI library to link Arrow dynamically, though we'll still want a fully statically linked build for distribution)"
        },
        {
            "created_at": "2022-07-19T13:47:28.084Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17119?focusedCommentId=17568575) by Jin Chengcheng (Jin Chengcheng):*\nYeah,\u00a0 I agree, this is a good fix as configuring the JNI library to link Arrow dynamically.\r\n\r\nBecause I don't need the JNI library now, I will just remove this lib.\r\n\r\nI will configure the JNI library to link Arrow dynamically if needed next time."
        },
        {
            "created_at": "2022-07-19T13:48:01.257Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17119?focusedCommentId=17568576) by Jin Chengcheng (Jin Chengcheng):*\nThank you very much!"
        },
        {
            "created_at": "2022-07-19T13:52:27.672Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17119?focusedCommentId=17568578) by Jin Chengcheng (Jin Chengcheng):*\nJust remove this lib libarrow_dataset_jni.so from my lib.\r\n\r\nBest choice is to configure libarrow_dataset_jni.so link to Arrow dynamically.\r\n\r\n\u00a0"
        },
        {
            "created_at": "2022-08-27T14:41:52.147Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17119?focusedCommentId=17585895) by @toddfarmer:*\nTransitioning issue from Resolved to Closed to based on resolution field value."
        }
    ]
}