{
    "issue": {
        "title": "[Plasma] test_plasma.py crashes",
        "body": "***Note**: This issue was originally created as [ARROW-2489](https://issues.apache.org/jira/browse/ARROW-2489). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThis is new here:\r\n\r\n```Java\n$ py.test   --tb=native pyarrow/tests/test_plasma.py \r\n===================================================================== test session starts ======================================================================\r\nplatform linux -- Python 3.6.5, pytest-3.3.2, py-1.5.2, pluggy-0.6.0\r\nrootdir: /home/antoine/arrow/python, inifile: setup.cfg\r\nplugins: xdist-1.22.0, timeout-1.2.1, repeat-0.4.1, forked-0.2, faulthandler-1.3.1\r\ncollected 23 items                                                                                                                                             \r\n\r\npyarrow/tests/test_plasma.py *** Error in `/home/antoine/miniconda3/envs/pyarrow/bin/python': double free or corruption (!prev): 0x0000000001699520 ***\r\n[...]\r\n\r\nCurrent thread 0x00007fe7e8570700 (most recent call first):\r\n  File \"/home/antoine/arrow/python/pyarrow/tests/test_plasma.py\", line 211 in test_connection_failure_raises_exception\r\n[...]\r\n```\r\n\r\nHere is the C backtrace under gdb:\r\n\r\n```Java\n\r\n#0  0x00007ffff69d0428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54\r\n#1  0x00007ffff69d202a in __GI_abort () at abort.c:89\r\n#2  0x00007ffff6a127ea in __libc_message (do_abort=do_abort@entry=2, fmt=fmt@entry=0x7ffff6b2bed8 \"*** Error in `%s': %s: 0x%s ***\\n\")\r\n    at ../sysdeps/posix/libc_fatal.c:175\r\n#3  0x00007ffff6a1b37a in malloc_printerr (ar_ptr=<optimized out>, ptr=<optimized out>, str=0x7ffff6b2c008 \"double free or corruption (!prev)\", action=3)\r\n    at malloc.c:5006\r\n#4  _int_free (av=<optimized out>, p=<optimized out>, have_lock=0) at malloc.c:3867\r\n#5  0x00007ffff6a1f53c in __GI___libc_free (mem=<optimized out>) at malloc.c:2968\r\n#6  0x00007fffbdfcc504 in std::_Sp_counted_ptr<plasma::PlasmaClient*, (__gnu_cxx::_Lock_policy)2>::_M_dispose (this=0x9defb0)\r\n    at /usr/include/c++/4.9/bits/shared_ptr_base.h:373\r\n#7  0x00007fffbdfc903c in std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release (this=0x9defb0) at /usr/include/c++/4.9/bits/shared_ptr_base.h:149\r\n#8  0x00007fffbdfc82b9 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count (this=0x7fffc1214510, __in_chrg=<optimized out>)\r\n    at /usr/include/c++/4.9/bits/shared_ptr_base.h:666\r\n#9  0x00007fffbdfc8276 in std::__shared_ptr<plasma::PlasmaClient, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr (this=0x7fffc1214508, __in_chrg=<optimized out>)\r\n    at /usr/include/c++/4.9/bits/shared_ptr_base.h:914\r\n#10 0x00007fffbdfc8fc4 in std::shared_ptr<plasma::PlasmaClient>::~shared_ptr (this=0x7fffc1214508, __in_chrg=<optimized out>)\r\n    at /usr/include/c++/4.9/bits/shared_ptr.h:93\r\n#11 0x00007fffbdfc8fde in __Pyx_call_destructor<std::shared_ptr<plasma::PlasmaClient> > (x=...)\r\n    at /home/antoine/arrow/python/build/temp.linux-x86_64-3.6/plasma.cxx:281\r\n#12 0x00007fffbdfbc317 in __pyx_tp_dealloc_7pyarrow_6plasma_PlasmaClient (o=0x7fffc12144f0)\r\n    at /home/antoine/arrow/python/build/temp.linux-x86_64-3.6/plasma.cxx:10383\r\n#13 0x00007fffbdfb8986 in __pyx_pf_7pyarrow_6plasma_2connect (__pyx_self=0x0, __pyx_v_store_socket_name=0x7fffbc922c48, \r\n    __pyx_v_manager_socket_name=0x7ffff7fa0ab0, __pyx_v_release_delay=0, __pyx_v_num_retries=1)\r\n    at /home/antoine/arrow/python/build/temp.linux-x86_64-3.6/plasma.cxx:9147\r\n#14 0x00007fffbdfb7dec in __pyx_pw_7pyarrow_6plasma_3connect (__pyx_self=0x0, __pyx_args=0x7fffbc4d9688, __pyx_kwds=0x0)\r\n    at /home/antoine/arrow/python/build/temp.linux-x86_64-3.6/plasma.cxx:8978\r\n```",
        "created_at": "2018-04-21T17:11:52.000Z",
        "updated_at": "2018-04-24T08:15:52.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++ - Plasma",
            "Component: GPU",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2018-04-24T06:56:06.000Z"
    },
    "comments": [
        {
            "created_at": "2018-04-21T17:31:09.073Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2489?focusedCommentId=16446902) by Antoine Pitrou (apitrou):*\nBisecting tells me the following commit introduced the issue:\r\n\r\n```Java\n\r\ncommit 7eeca3ac823d5dda05f018661b453354cb782406\r\nAuthor: Philipp Moritz <pcmoritz@gmail.com>\r\nDate:   Thu Apr 19 12:25:27 2018 -0700\r\n\r\n    ARROW-2458: [Plasma] Use one thread pool per PlasmaClient\r\n    \r\n    This removes the global `thread pool_` variable from the PlasmaClient.\r\n    \r\n    cc @robertnishihara @pitrou\r\n    \r\n    Author: Philipp Moritz <pcmoritz@gmail.com>\r\n    \r\n    Closes #1893 from pcmoritz/fix-plasma-client and squashes the following commits:\r\n    \r\n    742b542 <Philipp Moritz> fix linting\r\n    b1130bd <Philipp Moritz> remove global variable from PlasmaClient\r\n```\r\n\r\n`[~pcmoritz]`"
        },
        {
            "created_at": "2018-04-21T17:58:10.698Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2489?focusedCommentId=16446916) by Antoine Pitrou (apitrou):*\nThis seems somehow related to GPU support. If I disable the following line in the plasma client constructor:\r\n```cpp\n\r\nCudaDeviceManager::GetInstance(&manager_);\r\n```\r\nthen the crash goes away."
        },
        {
            "created_at": "2018-04-21T19:12:49.701Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2489?focusedCommentId=16446943) by Antoine Pitrou (apitrou):*\nOk, it's an ABI issue.\r\n\r\nWhen you compile Plasma with GPU support enabled, there's an additional pointer field at the end of `PlasmaClient`. However, pyarrow's `setup.py` doesn't enable `PLASMA_GPU` (AFAICT, it has no easy way of deciding whether to enable it). So the Cython extension allocates a `PlasmaClient` with 8 missing bytes at the end, and calls the `PlasmaClient` constructor which writes past the allocated memory. Depending on the exact structure size, this may garble some safety tags used by the libc's allocator, hence the error and the crash.\r\n\r\nOne solution is to migrate `PlasmaClient` to use a pimpl, which could also help fixing ARROW-2448."
        },
        {
            "created_at": "2018-04-21T20:39:09.121Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2489?focusedCommentId=16446980) by Robert Nishihara (robertnishihara):*\nOh wow, nice job tracking that down. I'm all for the PIMPL solution to Arrow-2448, but why would PIMPL solve this issue?"
        },
        {
            "created_at": "2018-04-21T20:44:12.086Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2489?focusedCommentId=16446982) by Uwe Korn (uwe):*\nThe size of the exposed class would always be fixed, only the class that contains the actual implementation would have a differing size. As this _internal_ class would only be used and visible inside of `libplasma`, all users of it would use the correct size."
        },
        {
            "created_at": "2018-04-21T20:58:30.448Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2489?focusedCommentId=16446988) by Robert Nishihara (robertnishihara):*\nOk, that makes sense."
        },
        {
            "created_at": "2018-04-24T06:56:06.098Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2489?focusedCommentId=16449405) by Philipp Moritz (pcmoritz):*\nIssue resolved by pull request 1933\n<https://github.com/apache/arrow/pull/1933>"
        }
    ]
}