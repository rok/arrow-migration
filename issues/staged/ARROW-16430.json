{
    "issue": {
        "title": "[Python] Read/Write record batch custom metadata API in pyarrow",
        "body": "***Note**: This issue was originally created as [ARROW-16430](https://issues.apache.org/jira/browse/ARROW-16430). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIn https://issues.apache.org/jira/browse/ARROW-16131,\u00a0Arrow C++ APIs were added so that users can read/write record batch custom metadata for IPC file.\u00a0But pyarrow still lacks corresponding APIs for doing this.",
        "created_at": "2022-05-01T06:26:17.000Z",
        "updated_at": "2022-11-02T09:05:22.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-09-30T16:13:14.327Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16430?focusedCommentId=17611673) by Steve M. Kim (chairmank):*\nARROW-2022 introduced a related problem with `Schema` messages. I am not sure whether the related problem ought to be tracked in this issue or in a separate issue, or discussed further on the mailing list.\r\n\r\nThe current [documentation](https://arrow.apache.org/docs/format/Columnar.html#custom-application-metadata) for the IPC format says\r\n> We provide a\u00a0`custom_metadata`\u00a0field at three levels to provide a mechanism for developers to pass application-specific metadata in Arrow protocol messages. This includes\u00a0`{}Field{`},\u00a0`{}Schema{`}, and\u00a0`{}Message{`}.\r\nConsistent with the documentation, the FlatBuffer definitions have\u00a0two different `custom_metadata` fields that appear in an encapsulated message of type Schema:\r\n- The `custom_metadata` field within the `Schema` table\n- The `custom_metadata` field within the parent `Message` table\n  \n  \u00a0\n  \n  Currently, the pyarrow implementation recognizes only the custom_metadata field in the Schema table and is unaware of the custom_metadata field in the parent Message table. The proposed change <https://github.com/apache/arrow/pull/13041> will use the custom_metadata field in the parent Message table for RecordBatch messages, but it won't address this ambiguity with Schema messages.\n  \n  I think that it is useful for `pyarrow.Schema` object and `pyarrow.RecordBatch` object to carry custom metadata, independent of their IPC message serialization. I also think that perhaps `pyarrow.Table` ought to carry its own custom metadata that is separate from the metadata of its `{}Schema{`}, because a `Table` is like a\u00a0`{}RecordBatch{`}. In the current implementation, attempting to instantiate a `Table` with both a metadata-enriched `Schema` and a separate metadata dict raises `{}ValueError: Cannot pass both schema and metadata{`}. This behavior is inconsistent with the documentation, which distinguishes the metadata of a Schema from the metadata of a Message."
        },
        {
            "created_at": "2022-09-30T16:24:58.261Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16430?focusedCommentId=17611680) by Steve M. Kim (chairmank):*\nAfter further thought and re-reading the flatbuffer definitions and c++ implementation, I rescind my statement about custom metadata on a RecordBatch. The `RecordBatch` table doesn't have a `custom_metadata` field.\r\n\r\nHowever, I still think that there is a confusion between the metadata of a `pyarrow.Schema` versus the metadata of a `pyarrow.Message` that contains a `{}Schema{`}. It ought to be possible to specify custom metadata when serializing a `Schema` as a IPC message, in exactly the same way that it ought to be possible to specify custom metadata when serializing a `RecordBatch` or `DictionaryBatch` as a IPC message.\u00a0"
        }
    ]
}