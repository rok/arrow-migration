{
    "issue": {
        "title": "[Gandiva] Cannot build: LLVM not detected correctly",
        "body": "***Note**: This issue was originally created as [ARROW-3874](https://issues.apache.org/jira/browse/ARROW-3874). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI cannot build Arrow with `-DARROW_GANDIVA=ON`. `cmake` fails while detecting LLVM on the system.\r\n```Java\n\r\n$ cd build/data-an/arrow/arrow/cpp/\r\n$ export ARROW_HOME=/opt/data-an\r\n$ mkdir release\r\n$ cd release/\r\n$ cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$ARROW_HOME -DARROW_GANDIVA=ON ../\r\n[...]\r\n-- Found LLVM 6.0.1\r\n-- Using LLVMConfig.cmake in: /usr/lib64/cmake/llvm\r\nCMake Error at /usr/lib64/cmake/llvm/LLVM-Config.cmake:175 (message):\r\n  Target X86 is not in the set of libraries.\r\nCall Stack (most recent call first):\r\n  cmake_modules/FindLLVM.cmake:31 (llvm_map_components_to_libnames)\r\n  src/gandiva/CMakeLists.txt:25 (find_package)\r\n\r\n\r\n-- Configuring incomplete, errors occurred!\r\n```\r\nThe cmake log files are attached.\r\n\r\nWhen I invoke cmake with options other than **Gandiva**, it finishes successfully.\r\n\r\nHere are the llvm libraries that are installed on my system:\r\n```Java\n\r\n$ rpm -qa llvm\\* | sort\r\nllvm3.9-libs-3.9.1-13.fc28.x86_64\r\nllvm4.0-libs-4.0.1-5.fc28.x86_64\r\nllvm-6.0.1-8.fc28.x86_64\r\nllvm-devel-6.0.1-8.fc28.x86_64\r\nllvm-libs-6.0.1-8.fc28.i686\r\nllvm-libs-6.0.1-8.fc28.x86_64\r\n$ ls /usr/lib64/libLLVM* /usr/include/llvm\r\n/usr/lib64/libLLVM-6.0.1.so  /usr/lib64/libLLVM-6.0.so  /usr/lib64/libLLVM.so\r\n\r\n/usr/include/llvm:\r\nADT              FuzzMutate          Object                 Support\r\nAnalysis         InitializePasses.h  ObjectYAML             TableGen\r\nAsmParser        IR                  Option                 Target\r\nBinaryFormat     IRReader            PassAnalysisSupport.h  Testing\r\nBitcode          LineEditor          Passes                 ToolDrivers\r\nCodeGen          LinkAllIR.h         Pass.h                 Transforms\r\nConfig           LinkAllPasses.h     PassInfo.h             WindowsManifest\r\nDebugInfo        Linker              PassRegistry.h         WindowsResource\r\nDemangle         LTO                 PassSupport.h          XRay\r\nExecutionEngine  MC                  ProfileData\r\n```",
        "created_at": "2018-11-25T19:45:44.000Z",
        "updated_at": "2018-12-04T07:48:51.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++ - Gandiva",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2018-12-04T01:27:02.000Z"
    },
    "comments": [
        {
            "created_at": "2018-11-25T20:26:19.541Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3874?focusedCommentId=16698277) by Wes McKinney (wesm):*\nHow did you install LLVM? You're missing the LLVM static libraries, so you're going to have some problems in any case. Here's what my LLVM lib directory looks like using libraries from the Ubuntu 14.04 apt repostiory on apt.llvm.org\r\n\r\nhttps://gist.github.com/wesm/4cc5c786c4fc37310b9af3b24a819fa2"
        },
        {
            "created_at": "2018-11-25T20:39:39.865Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3874?focusedCommentId=16698282) by Wes McKinney (wesm):*\nAlso as noted in https://issues.apache.org/jira/browse/ARROW-3846, our FindLLVM.cmake needs to be revamped so it can also work on Windows"
        },
        {
            "created_at": "2018-11-26T03:12:33.320Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3874?focusedCommentId=16698439) by Suvayu Ali (suvayu):*\nI had installed `llvm-devel` using dnf.\u00a0 cmake worked fine after installing `llvm-static`. Thanks!\r\n\r\nBut during the build I also noticed, many already installed libraries are being downloaded:\r\n```java\n\r\n[  2%] Performing download step (download, verify and extract) for 'protobuf_ep'\r\n[  2%] Performing download step (download, verify and extract) for 'thrift_ep'\r\n```\r\n\r\nI have these installed:\r\n```java\n\r\n$ rpm -qa thrift\\* protobuf\\* \r\nprotobuf-3.5.0-4.fc28.x86_64\r\nprotobuf-compiler-3.5.0-4.fc28.x86_64\r\nprotobuf-java-3.5.0-4.fc28.noarch\r\nprotobuf-c-1.3.0-4.fc28.x86_64\r\nprotobuf-devel-3.5.0-4.fc28.x86_64\r\nprotobuf-lite-3.5.0-4.fc28.x86_64\r\nthrift-devel-0.10.0-9.fc28.x86_64\r\nthrift-0.10.0-9.fc28.x86_64\r\n```\r\n\r\nAm I missing some libraries there as well?"
        },
        {
            "created_at": "2018-11-26T14:18:03.526Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3874?focusedCommentId=16699011) by Wes McKinney (wesm):*\nIt seems that protobuf/thrift aren't detected on your system. We haven't prioritized supporting system libraries for our build toolchain because the versions available vary significantly. We use Thrift 0.11, for example, and Thrift 0.10 may not work. See also https://github.com/apache/arrow/blob/master/cpp/thirdparty/README.md"
        },
        {
            "created_at": "2018-11-26T18:31:43.895Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3874?focusedCommentId=16699406) by Suvayu Ali (suvayu):*\nThanks for the link.\r\n\r\nIn the meantime, I tried to build with **Gandiva** on Fedora 29, and it failed to detect LLVM (my original attempt was on F28, which was resolved by installing the static libraries).\r\n\r\nOn F29 the default version is 7, while other versions like 6.0 are installed in subdirectories (e.g. `/usr/lib64/llvm6.0`). Setting `-DLLVM_DIR=/path` doesn't help, I had to add `LLVM_DIR` to `find_package` in `FindLLVM.cmake`.\r\n\r\nWhile the edit resolved the LLVM issue, cmake failed again unable to find `JAVA_AWT_JNI` (don't remember exactly, not on F29 now). I couldn't figure out if it was something missing, or if cmake was unable to detect again.  I'm unsure how to report this, do I update this bug report and change the platform from F28 to F29, or do I close this and open a fresh one?"
        },
        {
            "created_at": "2018-11-28T13:49:44.500Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3874?focusedCommentId=16701908) by Wes McKinney (wesm):*\nYou can just update this issue's metadata. Since most of the people working on Gandiva are on Debian-based distros (e.g. Ubuntu) I'm not surprised there are some issues"
        },
        {
            "created_at": "2018-11-29T06:40:17.218Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3874?focusedCommentId=16702776) by Suvayu Ali (suvayu):*\nOkay, to summarise: my initial build issue on F28 was resolved by installing the llvm-static libraries.\r\n\r\nOn F29, cmake cannot find the correct version of LLVM.\r\n```Java\n\r\n$ export ARROW_HOME=~/opt         \r\n$ cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$ARROW_HOME \\\r\n    -DARROW_PARQUET=on -DARROW_ORC=ON -DARROW_PLASMA=on -DARROW_GANDIVA=ON ../\r\n[...]\r\nCMake Error at cmake_modules/FindLLVM.cmake:24 (find_package):\r\n  Could not find a configuration file for package \"LLVM\" that is compatible\r\n  with requested version \"6.0\".\r\n\r\n  The following configuration files were considered but not accepted:\r\n\r\n    /usr/lib64/cmake/llvm/LLVMConfig.cmake, version: 7.0.0\r\n    /lib64/cmake/llvm/LLVMConfig.cmake, version: 7.0.0\r\n\r\nCall Stack (most recent call first):\r\n  src/gandiva/CMakeLists.txt:25 (find_package)\r\n```\r\n\r\n\r\nFedora provides alternate llvm versions installed in subdirectories, so I tried specifying `LLVM_DIR` when invoking cmake.\r\n```Java\n\r\n$ ls /usr/lib64/llvm6.0/\r\nbin  include  lib\r\n$ cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$ARROW_HOME \\\r\n    -DARROW_PARQUET=on -DARROW_ORC=ON -DARROW_PLASMA=on -DARROW_GANDIVA=ON \\\r\n    -DLLVM_DIR=/usr/lib64/llvm6.0 ../\r\n[...]\r\nCMake Error at cmake_modules/FindLLVM.cmake:24 (find_package):\r\n  Could not find a configuration file for package \"LLVM\" that is compatible\r\n  with requested version \"6.0\".\r\n\r\n  The following configuration files were considered but not accepted:\r\n\r\n    /usr/lib64/cmake/llvm/LLVMConfig.cmake, version: 7.0.0\r\n    /lib64/cmake/llvm/LLVMConfig.cmake, version: 7.0.0\r\n\r\nCall Stack (most recent call first):\r\n  src/gandiva/CMakeLists.txt:25 (find_package)\r\n```\r\n\r\n\r\nSo I patched `find_library` (see [arrow-cmake-findllvm.patch](arrow-cmake-findllvm.patch)), that fixes the LLVM issue, but then I encounter the following Java issue\r\n```Java\n\r\n$ cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$ARROW_HOME \\\r\n    -DARROW_PARQUET=on -DARROW_ORC=ON -DARROW_PLASMA=on -DARROW_GANDIVA=ON \\\r\n    -DLLVM_DIR=/usr/lib64/llvm6.0 ../\r\n[...]\r\n-- Found LLVM 6.0.1\r\n-- Using LLVMConfig.cmake in: /usr/lib64/llvm6.0/lib/cmake/llvm\r\n-- Found clang /usr/lib64/ccache/clang\r\n-- Found llvm-link /usr/lib64/llvm6.0/bin/llvm-link\r\nCMake Error at /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:137 (message):\r\n  Could NOT find JNI (missing: JAVA_AWT_LIBRARY JAVA_INCLUDE_PATH\r\n  JAVA_INCLUDE_PATH2 JAVA_AWT_INCLUDE_PATH)\r\nCall Stack (most recent call first):\r\n  /usr/share/cmake/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE)\r\n  /usr/share/cmake/Modules/FindJNI.cmake:356 (FIND_PACKAGE_HANDLE_STANDARD_ARGS)\r\n  src/gandiva/jni/CMakeLists.txt:21 (find_package)\r\n```\r\n\r\n\r\nMy Java setup\r\n```Java\n\r\n$ echo $JAVA_HOME\r\n/etc/alternatives/jre_openjdk\r\n$  $JAVA_HOME/bin/java -version\r\nopenjdk version \"1.8.0_191\"\r\nOpenJDK Runtime Environment (build 1.8.0_191-b12)\r\nOpenJDK 64-Bit Server VM (build 25.191-b12, mixed mode)\r\n$ rpm -qa \\*jni\\* | sort \r\nhawtjni-1.16-3.fc29.noarch\r\nhawtjni-runtime-1.16-3.fc29.noarch\r\n$ rpm -qa \\*java\\* | sort \r\njava-11-openjdk-headless-11.0.1.13-4.fc29.x86_64\r\njava-1.8.0-openjdk-headless-1.8.0.191.b12-8.fc29.x86_64\r\njava-openjdk-headless-10.0.2.13-7.fc29.x86_64\r\njavapackages-filesystem-5.3.0-1.fc29.noarch\r\njavapackages-tools-5.3.0-1.fc29.noarch\r\ntzdata-java-2018g-1.fc29.noarch\r\n```\r\n\r\nUnfortunately, I cannot easily compare F28 and F29 as I never have access to them simultaneously."
        },
        {
            "created_at": "2018-12-03T11:13:35.589Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3874?focusedCommentId=16707008) by Pindikura Ravindra (pravindra):*\nThe llvm related change looks good. Would you like to raise a PR ?\r\n\r\nFor the java issue, can you please check if you have a jni.h file in the jdk install directory ?"
        },
        {
            "created_at": "2018-12-03T12:01:41.478Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3874?focusedCommentId=16707086) by Suvayu Ali (suvayu):*\nDone: <https://github.com/apache/arrow/pull/3072>\r\n\r\nYour question about `jni.h` gave me enough hints to find the correct missing package :), and now the build progresses until it fails with:\r\n\r\n```Java\n\r\nScanning dependencies of target csv-chunker-test\r\nCMakeFiles/json-integration-test.dir/json-integration-test.cc.o:json-integration-test.cc:function boost::system::error_category::std_category::equivalent(std::error_code const&, int) const:\r\nerror: undefined reference to 'boost::system::detail::generic_category_ncx()'\r\n```\r\n\r\nThis is strange because I have `boost-system-1.66.0-14.fc29.x86_64` installed on my system.  But I guess that's a test, and the libraries were built successfully."
        },
        {
            "created_at": "2018-12-04T01:27:02.891Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3874?focusedCommentId=16708053) by Wes McKinney (wesm):*\nIssue resolved by pull request 3072\n<https://github.com/apache/arrow/pull/3072>"
        },
        {
            "created_at": "2018-12-04T07:47:38.522Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3874?focusedCommentId=16708321) by Suvayu Ali (suvayu):*\nSince I'm using\u00a0`java-1.8.0-openjdk`, I had to install\u00a0`java-1.8.0-openjdk-devel` to get `jni.h`.  For other java versions on F29, it should be `java-<version>-openjdk-devel`. "
        }
    ]
}