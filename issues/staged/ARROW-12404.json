{
    "issue": {
        "title": "[C++] Implement \"random\" nullary function that generates uniform random between 0 and 1",
        "body": "***Note**: This issue was originally created as [ARROW-12404](https://issues.apache.org/jira/browse/ARROW-12404). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThis is similar to PostgreSQL's random() \r\n\r\nhttps://www.postgresql.org/docs/8.2/functions-math.html",
        "created_at": "2021-04-15T13:59:51.000Z",
        "updated_at": "2021-12-31T23:02:21.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-12-30T11:47:04.000Z"
    },
    "comments": [
        {
            "created_at": "2021-04-15T14:23:28.252Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12404?focusedCommentId=17322217) by Antoine Pitrou (apitrou):*\n`[~edponce]`"
        },
        {
            "created_at": "2021-04-15T15:39:34.980Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12404?focusedCommentId=17322278) by Eduardo Ponce (edponce):*\nI will work on this, but want to be clear with the requirement. Arrow has non-nullary uniform random number generators\u00a0that generate\u00a0_N_ numbers which are defined in the testing module (.e.g, [random_real()](https://github.com/apache/arrow/blob/master/cpp/src/arrow/testing/random.h#L441-L448)). The nullary\u00a0**random()** will be included in the\u00a0_random_ namespace and make use of the\u00a0[**GenerateOptions**](https://github.com/apache/arrow/blob/master/cpp/src/arrow/testing/random.cc#L57-L63)?"
        },
        {
            "created_at": "2021-04-15T15:45:10.588Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12404?focusedCommentId=17322283) by Antoine Pitrou (apitrou):*\nNo, this shouldn't use any functionality defined in `testing`, as it is not built by default. Also, we won't necessarily want to use the same random number generator or initialization parameters.\r\n\r\n(see also ARROW-10797 for a slightly related topic)"
        },
        {
            "created_at": "2021-04-25T10:06:04.271Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12404?focusedCommentId=17331480) by yibocai#1 (yibocai#1):*\nIf we are to implement from scratch a method other than std::uniform_real_distribution , it's better to take into account issue ARROW-12533."
        },
        {
            "created_at": "2021-05-11T08:04:29.915Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12404?focusedCommentId=17342394) by Eduardo Ponce (edponce):*\nHi `[~yibocai]`,\r\n\r\nI am working on this issue and noticed that you submitted <https://github.com/apache/arrow/pull/10283> for ARROW-12533. Can I duplicate the RNGs for the compute layer?"
        },
        {
            "created_at": "2021-05-11T08:11:43.847Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12404?focusedCommentId=17342401) by yibocai#1 (yibocai#1):*\nSure, `[~edponce]`"
        },
        {
            "created_at": "2021-05-11T08:27:47.580Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12404?focusedCommentId=17342408) by Eduardo Ponce (edponce):*\nThanks! I know that code duplication is a \"code smell\" but compute and testing layers are independent of each other. As I understand Arrow does not (yet) has a well-defined common submodule to supply utility functions across layers, and this might be further limited if APIs of same functions vary across layers."
        },
        {
            "created_at": "2021-05-11T08:29:33.348Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12404?focusedCommentId=17342410) by Antoine Pitrou (apitrou):*\nUtility code goes into `arrow/util/` ;)"
        },
        {
            "created_at": "2021-05-11T08:31:18.883Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12404?focusedCommentId=17342411) by Antoine Pitrou (apitrou):*\nThat said, I'll reiterate that a RNG for testing needn't have the same properties as a RNG exposed as a public API. We need to be a bit more careful about the public API RNG:\r\n \\* needs to have good-quality statistical output\r\n \\* needs to have consistent, predictable performance"
        },
        {
            "created_at": "2021-05-11T08:40:27.558Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12404?focusedCommentId=17342418) by Eduardo Ponce (edponce):*\nThanks for feedback `[~apitrou]`. I will definitely be careful with the public RNG. Will circle back on this when I get a stable implementation."
        },
        {
            "created_at": "2021-12-30T11:47:04.346Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12404?focusedCommentId=17466831) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 11864\n<https://github.com/apache/arrow/pull/11864>"
        }
    ]
}