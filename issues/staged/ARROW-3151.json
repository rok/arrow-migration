{
    "issue": {
        "title": "[C++] Create Protocol Buffers interface for iterating over the semantic \"rows\" of a record batch, and accessing the rows using the protobuf API",
        "body": "***Note**: This issue was originally created as [ARROW-3151](https://issues.apache.org/jira/browse/ARROW-3151). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe desired workflow:\r\n\r\n- User writes a .proto file describing the structure of a \"row\" as a Message\n- Given the generated pb.h bindings, an Arrow users can iterate over an `arrow::RecordBatch`, each iteration populating an instance of the Row message\n- The values of the row can then be accessed via the standard Protobuf APIs\n  \n  A corresponding interface could be developed to write a RecordBatch using protobufs as input, but that could be its own project",
        "created_at": "2018-08-30T20:21:51.000Z",
        "updated_at": "2021-08-04T10:37:50.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-08-04T10:37:50.000Z"
    },
    "comments": [
        {
            "created_at": "2018-08-30T20:59:54.739Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3151?focusedCommentId=16597920) by Paul Rogers (paul-rogers):*\nLet's see if we can coordinate on this. I'm starting work on a proposal for a \"RowSet\" interface to be ported over from Drill that provides a simple row-based API to read from, and write to, vectors. On the write site, the mechanism also enforces memory limits, which is the key reason Drill created the \"RowSet\" abstraction.\r\n\r\nGiven that this project will need a way to assemble a row from a bundle of vectors, the \"columnar-to-row\" mechanism of RowSet might be a way to populate the row buffer.\r\n\r\nOn the other hand, the RowSet code from Drill is in Java, this is C+. Still, might make sense to port the mechanism to C+ so it can be used in multiple contexts.\r\n\r\nAny background docs I could read to get a better understanding of the project context to determine if what was just said above makes sense in this context? Thanks."
        },
        {
            "created_at": "2018-08-30T21:37:56.660Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3151?focusedCommentId=16597948) by Wes McKinney (wesm):*\nThanks Paul \u2013 indeed this is a C++ initiative but I agree it would be useful to align on some target use cases, requirements, etc. What I intended here is pretty orthogonal to memory management, or any details of where the Arrow columnar memory comes from; a user might have some code which utilizes a Protobuf-based row interface and we want to feed that Arrow data as quickly as possible"
        },
        {
            "created_at": "2021-08-04T10:37:50.792Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3151?focusedCommentId=17393012) by Antoine Pitrou (apitrou):*\nThis is a sizable piece of work and no activity has occurred for the last years. Closing."
        }
    ]
}