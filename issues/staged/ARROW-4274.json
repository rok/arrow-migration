{
    "issue": {
        "title": "[Gandiva] static jni library broken after decimal changes",
        "body": "***Note**: This issue was originally created as [ARROW-4274](https://issues.apache.org/jira/browse/ARROW-4274). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWith the decimal changes, there can be cpp calls from the IR code. The symbols for these\u00a0 need to be visible in the gandiva cpp library. but, the jni library makes visible only a limited set of symbols from gandiva (the ones specified in src/gandiva/jni/symbols.map).\r\n\r\nThis breaks\u00a0 if the jni library links with the static-libstdc++ (dremio builds the gandiva binary with stdc++ statically linked) due to two reasons\r\n1. The cpp symbols like std::ios_base::init are not exported via symbols.map. This causes LLVM to complain that there is are unresolved symbols.\n1. Also, there is a problem with exceptions (string_view.hpp can throw exceptions) - This also causes LLVM to complain that unwindResume is unresolved.",
        "created_at": "2019-01-16T14:10:56.000Z",
        "updated_at": "2019-01-24T09:23:24.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++ - Gandiva",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-01-24T09:23:20.000Z"
    },
    "comments": [
        {
            "created_at": "2019-01-24T09:23:20.153Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4274?focusedCommentId=16750908) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 3414\n<https://github.com/apache/arrow/pull/3414>"
        }
    ]
}