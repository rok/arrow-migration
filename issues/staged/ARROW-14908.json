{
    "issue": {
        "title": "[R] join on dataset crashes on Windows",
        "body": "***Note**: This issue was originally created as [ARROW-14908](https://issues.apache.org/jira/browse/ARROW-14908). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n```java\n\r\nlibrary(tidyverse)\r\nlibrary(arrow)\r\n\r\ncar_info <- rownames_to_column(mtcars, \"car_info\")\u00a0\r\n\r\ncars_arrow_table <- arrow_table(car_info)\r\n\r\nother_mtcars_data <- select(car_info, 1) %>%\u00a0\r\n\u00a0 mutate(main_color = sample( c(\"red\", \"blue\", \"white\", \"black\"), size = n(), replace = TRUE)) %>%\u00a0\r\n\u00a0 arrow::arrow_table()\r\n\r\ntemp <- tempdir()\r\npar_temp <- paste0(temp, \"\\\\parquet\")\r\n\r\ncar_info %>% arrow::write_dataset(par_temp)\r\ncars_arrow <- arrow::open_dataset(par_temp) \r\n\r\n# using arrow tables works ------------------------------------------------------\r\ncars_arrow_table %>% left_join(other_mtcars_data) %>% count(main_color) %>% collect()\r\n\r\n# using open dataset crashes R ------------------------------------------------------------------\r\nother_mtcars_data %>%\u00a0\r\n\u00a0 left_join(cars_arrow) %>%\u00a0\r\n\u00a0 count(main_color) %>%\u00a0\r\n\u00a0 collect()\r\n\r\n#other variation also crash\r\ncars_arrow %>%\u00a0\r\n\u00a0 left_join(other_mtcars_data) %>%\u00a0\r\n\u00a0 count(main_color) %>%\u00a0\r\n\u00a0 collect()\r\n\r\ncars_arrow %>%\u00a0\r\n\u00a0 left_join(other_mtcars_data) %>%\u00a0\r\n\u00a0 group_by(main_color) %>%\u00a0\r\n\u00a0 summarise(n = n()) %>%\u00a0\r\n\u00a0 collect()\r\n\r\n#compute also crashes\r\ncars_arrow %>%\u00a0\r\n\u00a0 left_join(other_mtcars_data) %>%\u00a0\r\n\u00a0 count(main_color) %>%\u00a0\r\n\u00a0 compute()\r\n\r\n# workaround with duckdb ------------------------------------------------------\r\n##this works\r\ncars_duck <- to_duckdb(cars_arrow, auto_disconnect = TRUE)\r\nother_cars_duck <- to_duckdb(other_mtcars_data, auto_disconnect = TRUE)\r\n\u00a0 \u00a0\u00a0\r\ncars_duck %>%\u00a0\r\n\u00a0 left_join(other_cars_duck) %>%\r\n\u00a0 count(main_color) %>%\r\n\u00a0 collect()\r\n\r\n##this doesn't (don't know if expected to work actually)\r\ncars_arrow %>%\u00a0\r\n\u00a0 left_join(other_mtcars_data) %>%\u00a0\r\n\u00a0 to_duckdb() \n```",
        "created_at": "2021-11-29T17:03:45.000Z",
        "updated_at": "2022-03-28T17:09:40.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-02-14T22:46:18.000Z"
    },
    "comments": [
        {
            "created_at": "2021-11-29T17:08:16.262Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14908?focusedCommentId=17450603) by Neal Richardson (npr):*\nCan you install the latest patch release (6.0.1)? These all work for me on that version."
        },
        {
            "created_at": "2021-11-29T17:19:54.923Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14908?focusedCommentId=17450614) by Fabio Machado (isomore):*\nI installed the CRAN 6.0.1 version but I'm still getting crashes."
        },
        {
            "created_at": "2021-11-29T17:43:18.208Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14908?focusedCommentId=17450622) by Neal Richardson (npr):*\nOk, can you provide sessionInfo() and any other system details?"
        },
        {
            "created_at": "2021-11-29T17:53:52.128Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14908?focusedCommentId=17450632) by Fabio Machado (isomore):*\nHere's the sessionInfo()\r\n```java\n\r\nR version 4.0.4 (2021-02-15)\r\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\r\nRunning under: Windows 10 x64 (build 18363)\r\nMatrix products: default\r\nlocale:\r\n[1] LC_COLLATE=English_United States.1252 \u00a0LC_CTYPE=English_United States.1252 \u00a0\u00a0\r\n[3] LC_MONETARY=English_United States.1252 LC_NUMERIC=C \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\r\n[5] LC_TIME=English_United States.1252 \u00a0 \u00a0\r\nattached base packages:\r\n[1] stats \u00a0 \u00a0 graphics \u00a0grDevices utils \u00a0 \u00a0 datasets \u00a0methods \u00a0 base \u00a0 \u00a0\u00a0\r\nother attached packages:\r\n\u00a0[1] arrow_6.0.1 \u00a0 \u00a0 forcats_0.5.1 \u00a0 stringr_1.4.0 \u00a0 dplyr_1.0.7 \u00a0 \u00a0\r\n\u00a0[5] purrr_0.3.4 \u00a0 \u00a0 readr_1.4.0 \u00a0 \u00a0 tidyr_1.1.3 \u00a0 \u00a0 tibble_3.1.3 \u00a0\u00a0\r\n\u00a0[9] ggplot2_3.3.3 \u00a0 tidyverse_1.3.0\r\nloaded via a namespace (and not attached):\r\n\u00a0[1] Rcpp_1.0.7 \u00a0 \u00a0 \u00a0 \u00a0lubridate_1.7.9.2 assertthat_0.2.1 \u00a0digest_0.6.27 \u00a0 \u00a0\r\n\u00a0[5] utf8_1.1.4 \u00a0 \u00a0 \u00a0 \u00a0R6_2.5.0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0cellranger_1.1.0 \u00a0odbc_1.3.0 \u00a0 \u00a0 \u00a0\u00a0\r\n\u00a0[9] backports_1.2.1 \u00a0 reprex_1.0.0 \u00a0 \u00a0 \u00a0httr_1.4.2 \u00a0 \u00a0 \u00a0 \u00a0pillar_1.6.2 \u00a0 \u00a0\u00a0\r\n[13] tictoc_1.0 \u00a0 \u00a0 \u00a0 \u00a0rlang_0.4.11 \u00a0 \u00a0 \u00a0curl_4.3 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0readxl_1.3.1 \u00a0 \u00a0\u00a0\r\n[17] rstudioapi_0.13 \u00a0 data.table_1.14.0 blob_1.2.1 \u00a0 \u00a0 \u00a0 \u00a0DT_0.17 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\r\n[21] foreign_0.8-81 \u00a0 \u00a0htmlwidgets_1.5.3 bit_4.0.4 \u00a0 \u00a0 \u00a0 \u00a0 munsell_0.5.0 \u00a0 \u00a0\r\n[25] tinytex_0.29 \u00a0 \u00a0 \u00a0broom_0.7.5 \u00a0 \u00a0 \u00a0 compiler_4.0.4 \u00a0 \u00a0modelr_0.1.8 \u00a0 \u00a0\u00a0\r\n[29] xfun_0.21 \u00a0 \u00a0 \u00a0 \u00a0 pkgconfig_2.0.3 \u00a0 htmltools_0.5.1.1 tidyselect_1.1.1\u00a0\r\n[33] rio_0.5.26 \u00a0 \u00a0 \u00a0 \u00a0fansi_0.4.2 \u00a0 \u00a0 \u00a0 crayon_1.4.1 \u00a0 \u00a0 \u00a0dbplyr_2.1.1 \u00a0 \u00a0\u00a0\r\n[37] withr_2.4.1 \u00a0 \u00a0 \u00a0 grid_4.0.4 \u00a0 \u00a0 \u00a0 \u00a0jsonlite_1.7.2 \u00a0 \u00a0gtable_0.3.0 \u00a0 \u00a0\u00a0\r\n[41] lifecycle_1.0.0 \u00a0 DBI_1.1.1 \u00a0 \u00a0 \u00a0 \u00a0 magrittr_2.0.1 \u00a0 \u00a0scales_1.1.1 \u00a0 \u00a0\u00a0\r\n[45] zip_2.1.1 \u00a0 \u00a0 \u00a0 \u00a0 cli_2.3.1 \u00a0 \u00a0 \u00a0 \u00a0 stringi_1.5.3 \u00a0 \u00a0 fs_1.5.0 \u00a0 \u00a0 \u00a0 \u00a0\u00a0\r\n[49] xml2_1.3.2 \u00a0 \u00a0 \u00a0 \u00a0ellipsis_0.3.2 \u00a0 \u00a0generics_0.1.0 \u00a0 \u00a0vctrs_0.3.8 \u00a0 \u00a0 \u00a0\r\n[53] openxlsx_4.2.3 \u00a0 \u00a0tools_4.0.4 \u00a0 \u00a0 \u00a0 bit64_4.0.5 \u00a0 \u00a0 \u00a0 glue_1.4.2 \u00a0 \u00a0 \u00a0\u00a0\r\n[57] hms_1.0.0 \u00a0 \u00a0 \u00a0 \u00a0 colorspace_2.0-0 \u00a0sessioninfo_1.1.1 rvest_1.0.0 \u00a0 \u00a0 \u00a0\r\n[61] haven_2.3.1 \u00a0 \u00a0 \u00a0\r\n\r\n\r\n```\r\n\u00a0"
        },
        {
            "created_at": "2022-01-13T22:27:54.797Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14908?focusedCommentId=17475807) by Jeanette Clark (jclark):*\nI am seeing similar issues (but without the summarize). The crash only occurs after the join, filtering, and even collecting the entire (large) table works fine. Example I was working off of and session info are below.\u00a0\r\n\r\n\u00a0\r\n```r\n\r\nlibrary(arrow)\r\nlibrary(tidyverse)\r\nlibrary(janitor)\r\n\r\ndir_out <- tempdir()\r\niris_clean <- clean_names(iris)\r\n\r\nwrite_dataset(iris_clean, file.path(dir_out, \"iris\"))\r\n\r\nspecies_codes <- tribble(~species, ~code,\r\n\"setosa\", \"SET\",\r\n\"versicolor\", \"VER\",\r\n\"virginica\", \"VIR\")\r\n\r\niris <- open_dataset(file.path(dir_out, \"iris\"))\r\n\r\nleft_join(iris, species_codes) %>% collect()\r\n```\r\n\u00a0\r\n```java\n\r\nR version 4.1.2 (2021-11-01)\r\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\r\nRunning under: Windows 10 x64 (build 19044)\r\n\r\nMatrix products: default\r\n\r\nlocale:\r\n[1] LC_COLLATE=English_United States.1252 LC_CTYPE=English_United States.1252 LC_MONETARY=English_United States.1252 LC_NUMERIC=C \r\n[5] LC_TIME=English_United States.1252\r\n\r\nattached base packages:\r\n[1] stats graphics grDevices utils datasets methods base\r\n\r\nother attached packages:\r\n[1] janitor_2.1.0 forcats_0.5.1 stringr_1.4.0 dplyr_1.0.7 purrr_0.3.4 readr_2.1.1 tidyr_1.1.4 tibble_3.1.6 ggplot2_3.3.5 tidyverse_1.3.1 arrow_6.0.1\r\n\r\nloaded via a namespace (and not attached):\r\n[1] tidyselect_1.1.1 xfun_0.29 haven_2.4.3 snakecase_0.11.0 colorspace_2.0-2 vctrs_0.3.8 generics_0.1.1 htmltools_0.5.2 yaml_2.2.1 utf8_1.2.2 \r\n[11] rlang_0.4.12 pillar_1.6.4 glue_1.6.0 withr_2.4.3 DBI_1.1.2 bit64_4.0.5 dbplyr_2.1.1 modelr_0.1.8 readxl_1.3.1 lifecycle_1.0.1 \r\n[21] munsell_0.5.0 gtable_0.3.0 cellranger_1.1.0 rvest_1.0.2 evaluate_0.14 knitr_1.37 tzdb_0.2.0 fastmap_1.1.0 fansi_1.0.0 broom_0.7.11 \r\n[31] Rcpp_1.0.7 scales_1.1.1 backports_1.4.1 jsonlite_1.7.2 fs_1.5.2 bit_4.0.4 hms_1.1.1 digest_0.6.29 stringi_1.7.6 grid_4.1.2 \r\n[41] cli_3.1.0 tools_4.1.2 magrittr_2.0.1 crayon_1.4.2 pkgconfig_2.0.3 ellipsis_0.3.2 xml2_1.3.3 reprex_2.0.1 lubridate_1.8.0 rstudioapi_0.13 \r\n[51] assertthat_0.2.1 rmarkdown_2.11 httr_1.4.2 R6_2.5.1 compiler_4.1.2\r\n```\r\n\u00a0\r\n\r\n\u00a0"
        },
        {
            "created_at": "2022-01-14T15:08:09.254Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14908?focusedCommentId=17476195) by Neal Richardson (npr):*\nOther angles `[~jclark]` and I explored:\r\n\r\n- The crash happens only when at least one of the datasets being joined is a file-backed dataset. It doesn't matter which side of the join. But join on in-memory Tables does not crash.\n- Partitioning is irrelevant. Her reprex doesn't have partitioning but we also tried with a partition and even joining on the partition column, all failed. "
        },
        {
            "created_at": "2022-01-14T21:54:48.105Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14908?focusedCommentId=17476446) by Will Jones (willjones127):*\n`[~jclark]` thanks for that example repro. I get a crash just like you said in Arrow 6.0.0 (but don't on my Mac). I also tried in the dev version of Arrow, and instead get the following error:\r\n\r\n```Java\n\r\n> left_join(iris, species_codes) %>% collect()\r\nError: Invalid: ReplaceFieldsWithKnownValues called on an unbound Expression\r\nC:/Users/voltron/arrow/cpp/src/arrow/compute/exec/expression.cc:957  ReplaceFieldsWithKnownValues(known_values, std::move(expr))\r\nC:/Users/voltron/arrow/cpp/src/arrow/dataset/dataset.cc:158  SimplifyWithGuarantee(std::move(predicate), partition_expression_)\r\nC:/Users/voltron/arrow/cpp/src/arrow/dataset/scanner.cc:792  dataset->GetFragments(scan_options->filter)\r\n```\r\n\r\nLooking at the traceback from the Arrow 6 crash it's not immediately obvious that it's the same error as above, but I will continue to look deeper."
        },
        {
            "created_at": "2022-02-09T23:11:02.508Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14908?focusedCommentId=17489860) by Will Jones (willjones127):*\nI've made some progress, but not yet found a fix. This issue isn't strictly linked to the Windows platform; instead it has do to with the setting `options(arrow.use_threads = FALSE)`, which it doesn't seem the join implementation anticipated. That setting is FALSE on Windows by default, but TRUE on other platforms. I can reproduce this issue on Mac OS by setting it to FALSE.\r\n\r\nNote that I can get the example to work on Windows by setting `options(arrow.use_threads = TRUE)`, so that may be a viable workaround in some cases. However, other issues have been reported on Windows with the use_threads option, which is why it has been turned off for now on Windows."
        },
        {
            "created_at": "2022-02-14T21:22:40.977Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14908?focusedCommentId=17492221) by Sam Albers (boshek):*\nSome additional break crumbs. The examples (run on windows 10, with arrow 7.0.0) are wrapped in reprex::reprex because it catches the R crash nicely. \r\n## \r\nworks by specifying join column\r\n```java\n\r\nreprex::reprex(\r\n\u00a0 {\r\n\u00a0 \u00a0 library(arrow)\r\n\u00a0 \u00a0 library(dplyr)\r\n\u00a0 \u00a0\u00a0\r\n\u00a0 \u00a0 tf1 <- tempfile()\r\n\u00a0 \u00a0 dir.create(tf1)\r\n\u00a0 \u00a0\u00a0\r\n\u00a0 \u00a0 quakes %>%\u00a0\r\n\u00a0 \u00a0 \u00a0 select(stations, lat,long) %>%\u00a0\r\n\u00a0 \u00a0 \u00a0 write_dataset(tf1)\r\n\u00a0 \u00a0\u00a0\r\n\u00a0 \u00a0 tf2 <- tempfile()\r\n\u00a0 \u00a0 dir.create(tf2)\r\n\u00a0 \u00a0\u00a0\r\n\u00a0 \u00a0 quakes |>\u00a0\r\n\u00a0 \u00a0 \u00a0 select(stations, mag, depth) %>%\u00a0\r\n\u00a0 \u00a0 \u00a0 write_dataset(tf2)\r\n\u00a0 \u00a0\u00a0\r\n\u00a0 \u00a0 open_dataset(tf1) |>\u00a0\r\n\u00a0 \u00a0 \u00a0 left_join(open_dataset(tf2), by = \"stations\") |>\u00a0\r\n\u00a0 \u00a0 \u00a0 collect()\r\n\u00a0 }, session_info = TRUE,\u00a0\r\n\u00a0 std_out_err = TRUE\r\n)\n```\r\n## doesn't work when one of the joins dfs is in memory\r\n\r\n\u00a0\r\n```java\n\r\nreprex::reprex(\r\n\u00a0 {\r\n\u00a0 \u00a0 library(arrow)\r\n\u00a0 \u00a0 library(dplyr)\r\n\u00a0 \u00a0\u00a0\r\n\u00a0 \u00a0 tf1 <- tempfile()\r\n\u00a0 \u00a0 dir.create(tf1)\r\n\u00a0 \u00a0\u00a0\r\n\u00a0 \u00a0 quakes %>%\u00a0\r\n\u00a0 \u00a0 \u00a0 select(stations, lat,long) %>%\u00a0\r\n\u00a0 \u00a0 \u00a0 write_dataset(tf1)\r\n\u00a0 \u00a0\u00a0\r\n\u00a0 \u00a0 tf2 <- tempfile()\r\n\u00a0 \u00a0 dir.create(tf2)\r\n\u00a0 \u00a0\u00a0\r\n\u00a0 \u00a0 quakes |>\u00a0\r\n\u00a0 \u00a0 \u00a0 select(stations, mag, depth) %>%\u00a0\r\n\u00a0 \u00a0 \u00a0 write_dataset(tf2)\r\n\u00a0 \u00a0\u00a0\r\n\u00a0 \u00a0 b <- open_dataset(tf2) %>% collect()\r\n\u00a0 \u00a0\u00a0\r\n\u00a0 \u00a0 open_dataset(tf1) |>\u00a0\r\n\u00a0 \u00a0 \u00a0 left_join(b, by = \"stations\") |>\u00a0\r\n\u00a0 \u00a0 \u00a0 collect()\r\n\u00a0 }, session_info = TRUE,\u00a0\r\n\u00a0 std_out_err = TRUE\r\n)\n```\r\n## \r\ndoesn't work when join column in not specified\r\n```java\n\r\nreprex::reprex(\r\n\u00a0 {\r\n\u00a0 \u00a0 library(arrow)\r\n\u00a0 \u00a0 library(dplyr)\r\n\u00a0 \u00a0\u00a0\r\n\u00a0 \u00a0 tf1 <- tempfile()\r\n\u00a0 \u00a0 dir.create(tf1)\r\n\u00a0 \u00a0\u00a0\r\n\u00a0 \u00a0 quakes %>%\u00a0\r\n\u00a0 \u00a0 \u00a0 select(stations, lat,long) %>%\u00a0\r\n\u00a0 \u00a0 \u00a0 write_dataset(tf1)\r\n\u00a0 \u00a0\u00a0\r\n\u00a0 \u00a0 tf2 <- tempfile()\r\n\u00a0 \u00a0 dir.create(tf2)\r\n\u00a0 \u00a0\u00a0\r\n\u00a0 \u00a0 quakes |>\u00a0\r\n\u00a0 \u00a0 \u00a0 select(stations, mag, depth) %>%\u00a0\r\n\u00a0 \u00a0 \u00a0 write_dataset(tf2)\r\n\u00a0 \u00a0\u00a0\r\n\u00a0 \u00a0 open_dataset(tf1) |>\u00a0\r\n\u00a0 \u00a0 \u00a0 left_join(open_dataset(tf2)) |>\u00a0\r\n\u00a0 \u00a0 \u00a0 collect()\r\n\u00a0 }, session_info = TRUE,\u00a0\r\n\u00a0 std_out_err = TRUE\r\n)\n```\r\n## doesn't work join column is specified by that column is the partition\r\n```java\n\r\nreprex::reprex(\r\n\u00a0 {\r\n\u00a0 \u00a0 library(arrow)\r\n\u00a0 \u00a0 library(dplyr)\r\n\u00a0 \u00a0\u00a0\r\n\u00a0 \u00a0 tf1 <- tempfile()\r\n\u00a0 \u00a0 dir.create(tf1)\r\n\u00a0 \u00a0\u00a0\r\n\u00a0 \u00a0 quakes %>%\u00a0\r\n\u00a0 \u00a0 \u00a0 select(stations, lat,long) %>%\u00a0\r\n\u00a0 \u00a0 \u00a0 group_by(stations) %>%\u00a0\r\n\u00a0 \u00a0 \u00a0 write_dataset(tf1)\r\n\u00a0 \u00a0\u00a0\r\n\u00a0 \u00a0 tf2 <- tempfile()\r\n\u00a0 \u00a0 dir.create(tf2)\r\n\u00a0 \u00a0\u00a0\r\n\u00a0 \u00a0 quakes |>\u00a0\r\n\u00a0 \u00a0 \u00a0 select(stations, mag, depth) %>%\u00a0\r\n\u00a0 \u00a0 \u00a0 group_by(stations) %>%\u00a0\r\n\u00a0 \u00a0 \u00a0 write_dataset(tf2)\r\n\u00a0 \u00a0\u00a0\r\n\u00a0 \u00a0 open_dataset(tf1) |>\u00a0\r\n\u00a0 \u00a0 \u00a0 left_join(open_dataset(tf2), by = \"stations\") |>\u00a0\r\n\u00a0 \u00a0 \u00a0 collect()\r\n\u00a0 }, session_info = TRUE,\u00a0\r\n\u00a0 std_out_err = TRUE\r\n)\n```\r\n\u00a0"
        },
        {
            "created_at": "2022-02-14T21:45:17.989Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14908?focusedCommentId=17492235) by Will Jones (willjones127):*\nThanks `[~boshek]` .\r\n\r\nTo provide an update: We have identified the issue now and [my fix is currently being reviewed](https://github.com/apache/arrow/pull/12339). It will likely be included in a 7.0.1 release.\r\n\r\nYou may be able to workaround the issue by setting\u00a0`options(arrow.use_threads = TRUE)`, which will avoid this bug. (However, there are some cases where turning on threads on Windows cause other issues right now, hence why it's off by default on Windows.)"
        },
        {
            "created_at": "2022-02-14T21:52:59.607Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14908?focusedCommentId=17492238) by Sam Albers (boshek):*\n`[~willjones127]` that's great! Does that catch instances where the join columns are partitions? I don't see any tests for that and the reprexes above suggest that might be relevant."
        },
        {
            "created_at": "2022-02-14T22:46:18.785Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14908?focusedCommentId=17492255) by Weston Pace (westonpace):*\nIssue resolved by pull request 12339\n<https://github.com/apache/arrow/pull/12339>"
        },
        {
            "created_at": "2022-02-14T22:46:55.736Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14908?focusedCommentId=17492256) by Weston Pace (westonpace):*\nI went ahead and marked this closed with Will's change but feel free to reopen if either of you decide this doesn't cover all cases."
        },
        {
            "created_at": "2022-02-14T23:04:11.898Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14908?focusedCommentId=17492258) by Will Jones (willjones127):*\nAh it actually does not. I don't think the problem is the partition columns per se; I think the fix i provided works for joining a dataset to an in-memory table, but not a dataset to a dataset. So need to add an additional test for that. Thanks for pointing that out! (y)\r\n\r\n`[~westonpace]` With a dataset to dataset join we are getting a thread index of 2 now. I guess we have an IO thread per scanner, right? Probably need to modify our approach."
        },
        {
            "created_at": "2022-02-14T23:10:27.505Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14908?focusedCommentId=17492259) by Weston Pace (westonpace):*\nYes, we would have an I/O thread per scanner in that case."
        },
        {
            "created_at": "2022-02-14T23:11:19.629Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14908?focusedCommentId=17492260) by Weston Pace (westonpace):*\nWell, we have 8 I/O threads (by default) and each scanner would use a different one of those 8."
        },
        {
            "created_at": "2022-02-15T18:41:59.467Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14908?focusedCommentId=17492799) by Sam Albers (boshek):*\n`[~willjones127]` just to close the loop, your fix appears to have sorted out all the cases i outlined. Nice work! For the test, I was thinking something like this:\r\n\r\n\u00a0\r\n```java\n\r\ntest_that(\"arrow dplyr query can join on a partitioned Dataset\", {\r\n\u00a0 dir_out <- tempdir()\r\n\u00a0 iris_grouped <- group_by(iris, Species)\r\n\u00a0 write_dataset(iris_grouped, file.path(dir_out, \"iris\"))\r\n\u00a0 species_codes <- data.frame(\r\n\u00a0 \u00a0 Species = c(\"setosa\", \"versicolor\", \"virginica\"),\r\n\u00a0 \u00a0 code = c(\"SET\", \"VER\", \"VIR\")\r\n\u00a0 )\r\n\r\n\u00a0 iris <- open_dataset(file.path(dir_out, \"iris\"))\r\n\u00a0 res <- left_join(iris, species_codes) %>% collect() # We should not segfault here.\r\n\u00a0 expect_equal(nrow(res), 150)\r\n})\r\n```\r\n\u00a0"
        }
    ]
}