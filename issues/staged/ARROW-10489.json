{
    "issue": {
        "title": "[C++] Unable to configure or make with intel compiler",
        "body": "***Note**: This issue was originally created as [ARROW-10489](https://issues.apache.org/jira/browse/ARROW-10489). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI am attempting to compile the Arrow C++ libraries for use in an HPC environment, and as such I need to use the Intel compilers to be compatible with all of my other software packages. However, when I try to compile (having set CC=icc, CXX=icpc, and CFORT=ifort), cmake throws the following error:\r\n```java\n\r\nCMake Error at cmake_modules/SetupCxxFlags.cmake:269 (message): \u00a0 \r\n       Unknown compiler: 18.0.2.20180210 18.0.2.20180210 \r\nCall Stack (most recent call first): \u00a0 \r\n       CMakeLists.txt:437 (include)\r\n```\r\nThe interesting thing to me is that it thinks that 18.0.2.20180210 is the name of the compiler, when earlier it output:\r\n\r\n\u00a0\r\n```java\n\r\n-- Building using CMake version: 3.16.1 \r\n-- The C compiler identification is Intel 18.0.2.20180210\r\n-- The CXX compiler identification is Intel 18.0.2.20180210\r\n```\r\n\u00a0\r\n\r\nSo I don't know why it's taking the\u00a018.0.2.20180210 portion, instead of the intel portion. Either way, it leaves me unable to build the libraries.\r\n\r\nI can provide the whole cmake log/error file if necessary.",
        "created_at": "2020-11-03T21:59:15.000Z",
        "updated_at": "2021-04-18T15:57:48.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-11-05T20:34:02.000Z"
    },
    "comments": [
        {
            "created_at": "2020-11-03T22:07:41.925Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10489?focusedCommentId=17225714) by Antoine Pitrou (apitrou):*\nYou probably want to report this to the CMake bug tracker:\r\nhttps://gitlab.kitware.com/cmake/cmake/"
        },
        {
            "created_at": "2020-11-03T23:18:19.207Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10489?focusedCommentId=17225726) by Wes McKinney (wesm):*\nThis is an Arrow bug. We have missing cases for the Intel compiler toolchain\r\n\r\nhttps://github.com/apache/arrow/blob/master/cpp/cmake_modules/SetupCxxFlags.cmake#L272"
        },
        {
            "created_at": "2020-11-03T23:18:59.686Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10489?focusedCommentId=17225727) by Antoine Pitrou (apitrou):*\nAh, my bad. Why don't we simply allow unknown compilers?"
        },
        {
            "created_at": "2020-11-04T17:30:49.415Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10489?focusedCommentId=17226295) by Jensen Richardson (jensen.richardson):*\nThe reason why I'm getting the compiler identification wrong is because the Unknown Compiler Message is set as:\r\n```java\n\r\n\"Unknown compiler: ${CMAKE_CXX_COMPILER_VERSION} ${CMAKE_CXX_COMPILER_VERSION}\"\r\n```\r\nAnd I think it should be:\r\n```java\n\r\n\"Unknown compiler: ${CMAKE_CXX_COMPILER_ID} ${CMAKE_CXX_COMPILER_VERSION}\"\r\n```\r\nBut the problem remains that it doesn't handle the Intel compiler (you can probably use -Wall like GNU, and the Intel compiler just ignores extra flags if it doesn't know what to do with then, so even if you get the exact ones a little wrong you should be fine)."
        },
        {
            "created_at": "2020-11-04T17:31:55.780Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10489?focusedCommentId=17226296) by Wes McKinney (wesm):*\nWould you like to submit a patch to fix?"
        },
        {
            "created_at": "2020-11-04T17:40:56.987Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10489?focusedCommentId=17226299) by Jensen Richardson (jensen.richardson):*\nPossibly. I was able to fix the compiler not being recognized, but I need to make sure it will build first.\r\n\r\nNote I also had an option in the bundle command in BuildUtils.cmake, in addition to the SetupCxxFlags.cmake."
        },
        {
            "created_at": "2020-11-05T17:18:27.030Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10489?focusedCommentId=17226863) by Jensen Richardson (jensen.richardson):*\nI was able to get it to build using the intel compiler with my changes in BuildUtils.cmake and SetupCxxFlags.cmake, along with some other changes (see ARROW-10503). I can submit a pull request if that would be helpful."
        },
        {
            "created_at": "2020-11-05T17:24:23.724Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10489?focusedCommentId=17226869) by Wes McKinney (wesm):*\nYes, that would be helpful. Is it possible to create a Dockerfile that has the icc toolchain available for testing? Otherwise it could be hard for us to maintain "
        },
        {
            "created_at": "2020-11-05T17:38:57.665Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10489?focusedCommentId=17226883) by Jensen Richardson (jensen.richardson):*\nUnfortunately, the intel compiler suite is completely closed source, and generally you have to pay for it. Because I'm attached to an educational institution, I get it for free, but I can't distribute it. However, people developing open source software can get a copy, but that might be more trouble than it's worth. If you want to look into it, [here's](https://software.intel.com/content/www/us/en/develop/tools/parallel-studio-xe/choose-download/open-source-contributor.html) the page that talks about it.\r\n\r\nThere shouldn't be much to maintain from now on, and I imagine that it's a fairly rare use case."
        },
        {
            "created_at": "2020-11-05T20:34:02.742Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10489?focusedCommentId=17226977) by Kouhei Sutou (kou):*\nIssue resolved by pull request 8601\n<https://github.com/apache/arrow/pull/8601>"
        },
        {
            "created_at": "2020-12-20T18:32:01.542Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10489?focusedCommentId=17252487) by Daniel Jewell (danieldjewell):*\n[~jensen.richardson]\u00a0and `[~wesm]`\r\n\r\nActually, I think Intel released the compiler for open source projects - even though the compiler's **source** is still closed, you can get the binaries for free it seems?\r\n\r\n[https://software.intel.com/content/www/us/en/develop/articles/installing-intel-oneapi-toolkits-via-apt.html](https://software.intel.com/content/www/us/en/develop/articles/installing-intel-oneapi-toolkits-via-apt.html')\r\n\r\nThey even have toolchain comtainer images on Docker Hub: <https://hub.docker.com/r/intel/oneapi>\r\n\r\n(and for Python: [https://hub.docker.com/r/intelpython \u2013 https://hub.docker.com/r/intelpython/intelpython3_full )](https://hub.docker.com/r/intelpython))\r\n\r\n\u00a0\r\n\r\nAFAIK, you need to pay if it's for commercial use or you're using the more advanced tools/SDKs?\u00a0 \u00a0\r\n\r\n\u00a0"
        },
        {
            "created_at": "2020-12-23T21:27:53.026Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10489?focusedCommentId=17254253) by Jensen Richardson (jensen.richardson):*\n`[~danieldjewell]` \u00a0thanks for the info!\r\n\r\n\u00a0\r\n\r\nI've done some poking around of this, and it seems like one of the docker images\u00a0has the tool that I use, but the one that I found it in was the\u00a0intel/oneapi-hpckit docker image. Using this, you should be able to build it using the docker container as normal. Note that the intel compiler commands that\u00a0_I_ use (not necessarily everyone uses the same ones) are CC=icc and CXX=icpc.\r\n\r\n\u00a0\r\n\r\nI tried building a minimal release build with \"CXX=icpc CC=icc cmake ..\" and then making and it worked.\r\n\r\n\u00a0\r\n\r\nThanks for the help!"
        },
        {
            "created_at": "2021-01-19T13:30:52.107Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10489?focusedCommentId=17267883) by Johannes M\u00fcller (JohannesMueller):*\nI just tried to build the current master with the Intel compiler on \"CentOS release 6.10 (Final)\" and I still get the \"Unknown compiler\" error message.\r\n\r\nI used the following command to build arrow:\r\n```java\n\r\nCXX=icpc CC=icc cmake \\\r\n    -DCMAKE_BUILD_TYPE=Debug \\\r\n    -DARROW_BUILD_TESTS=OFF \\\r\n    -DARROW_CSV=ON \\\r\n    -DARROW_PARQUET=ON \\\r\n    -DARROW_WITH_SNAPPY=ON ..\r\n```\r\nAnd got the following output:\r\n```java\n\r\n~/johannes/arrow/cpp/build-debug ~/johannes\r\n-- Building using CMake version: 3.6.1\r\n-- The C compiler identification is Intel 18.0.5.20180823\r\n-- The CXX compiler identification is Intel 18.0.5.20180823\r\n-- Check for working C compiler: /apps/intel_2018_u4/bin/icc\r\n-- Check for working C compiler: /apps/intel_2018_u4/bin/icc -- works\r\n-- Detecting C compiler ABI info\r\n-- Detecting C compiler ABI info - done\r\n-- Detecting C compile features\r\n-- Detecting C compile features - done\r\n-- Check for working CXX compiler: /apps/intel_2018_u4/bin/icpc\r\n-- Check for working CXX compiler: /apps/intel_2018_u4/bin/icpc -- works\r\n-- Detecting CXX compiler ABI info\r\n-- Detecting CXX compiler ABI info - done\r\n-- Detecting CXX compile features\r\n-- Detecting CXX compile features - done\r\n-- Arrow version: 3.0.0 (full: '3.0.0')\r\n-- Arrow SO version: 300 (full: 300.0.0)\r\n-- clang-tidy not found\r\n-- clang-format not found\r\n-- Could NOT find ClangTools (missing:  CLANG_FORMAT_BIN CLANG_TIDY_BIN) \r\n-- infer not found\r\n-- Found PythonInterp: /usr/bin/python (found version \"2.6.6\") \r\n-- Found cpplint executable at /home/builder/johannes/arrow/cpp/build-support/cpplint.py\r\n-- System processor: x86_64\r\n-- Performing Test CXX_SUPPORTS_SSE4_2\r\n-- Performing Test CXX_SUPPORTS_SSE4_2 - Success\r\n-- Performing Test CXX_SUPPORTS_AVX2\r\n-- Performing Test CXX_SUPPORTS_AVX2 - Success\r\n-- Performing Test CXX_SUPPORTS_AVX512\r\n-- Performing Test CXX_SUPPORTS_AVX512 - Success\r\n-- Arrow build warning level: CHECKIN\r\nCMake Error at cmake_modules/SetupCxxFlags.cmake:271 (message):\r\n  Unknown compiler: Intel 18.0.5.20180823\r\nCall Stack (most recent call first):\r\n  CMakeLists.txt:440 (include)\r\n\r\n```"
        },
        {
            "created_at": "2021-01-19T13:33:47.818Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10489?focusedCommentId=17267884) by Antoine Pitrou (apitrou):*\n`[~JohannesMueller]` can you try suggesting a change, perhaps as a PR?"
        },
        {
            "created_at": "2021-01-19T13:46:32.135Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10489?focusedCommentId=17267891) by Johannes M\u00fcller (JohannesMueller):*\nWhen I look at <https://github.com/apache/arrow/blob/19e955999e76f8e0ac48667cff6b44b6a9c85fcb/cpp/cmake_modules/SetupCxxFlags.cmake#L249>\r\n\r\nThen the compiler ID \"Intel\" is clearly missing in that section. Has the fix of this issue already been merged to master in github?"
        },
        {
            "created_at": "2021-01-19T13:49:36.922Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10489?focusedCommentId=17267893) by Antoine Pitrou (apitrou):*\nUh, it looks like the PR was half-baked, it only fixed part of the issue. So SetupCxxFlags.cmake needs fixing as well. Do you want to give this a try?"
        },
        {
            "created_at": "2021-01-19T14:11:19.095Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10489?focusedCommentId=17267906) by Johannes M\u00fcller (JohannesMueller):*\nThis particular issue can be \"solved\" by adding something similar to:\r\n```java\n\r\n  elseif(CMAKE_CXX_COMPILER_ID STREQUAL \"Intel\")\r\n            set(CXX_COMMON_FLAGS \"${CXX_COMMON_FLAGS} -Wall\")\r\n            set(CXX_COMMON_FLAGS \"${CXX_COMMON_FLAGS} -Wno-conversion\")\r\n            set(CXX_COMMON_FLAGS \"${CXX_COMMON_FLAGS} -Wno-deprecated-declarations\")\r\n            set(CXX_COMMON_FLAGS \"${CXX_COMMON_FLAGS} -Wno-sign-conversion\")\r\n            set(CXX_COMMON_FLAGS \"${CXX_COMMON_FLAGS} -Wno-unused-variable\")\r\n```\r\nUnfortunately, I'm not familiar with Intel names of those flags. I just copied them from the GNU portion, but I would expect that the flags are called differently in the Intel compiler. The \"-Wall\" seems to be the same, at least on Linux. On Windows it would be \"/Wall\". I'm not sure if \"-Wall\" is supported on Windows."
        },
        {
            "created_at": "2021-01-19T14:21:27.738Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10489?focusedCommentId=17267916) by Antoine Pitrou (apitrou):*\nI suppose you have better access to the Intel compiler docs than we do (and you can also test the changes) :-)"
        },
        {
            "created_at": "2021-01-19T14:22:48.789Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10489?focusedCommentId=17267917) by Antoine Pitrou (apitrou):*\nNote it's not a problem if we don't enable the specific warnings on the Intel compiler. Making it compile fine is the priority."
        },
        {
            "created_at": "2021-01-19T14:41:41.739Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10489?focusedCommentId=17267936) by Johannes M\u00fcller (JohannesMueller):*\n\u00a0\r\n\r\nI just created a PR: <https://github.com/apache/arrow/pull/9266> and added the following section:\r\n\r\n\u00a0\r\n```java\n\r\n  elseif(CMAKE_CXX_COMPILER_ID STREQUAL \"Intel\")\r\n        if(WIN32)\r\n          set(CXX_COMMON_FLAGS \"${CXX_COMMON_FLAGS} /Wall\")\r\n          set(CXX_COMMON_FLAGS \"${CXX_COMMON_FLAGS} /Wno-deprecated\")\r\n          set(CXX_COMMON_FLAGS \"${CXX_COMMON_FLAGS} /Wno-unused-variable\")\r\n        else()\r\n          set(CXX_COMMON_FLAGS \"${CXX_COMMON_FLAGS} -Wall\")\r\n          set(CXX_COMMON_FLAGS \"${CXX_COMMON_FLAGS} -Wno-deprecated\")\r\n          set(CXX_COMMON_FLAGS \"${CXX_COMMON_FLAGS} -Wno-unused-variable\")\r\n        endif()\r\n```\r\nThe names of the three flags are OK, according to the [Intel documentation](https://software.intel.com/content/www/us/en/develop/documentation/cpp-compiler-developer-guide-and-reference/top/compiler-reference/error-handling-1/warnings-errors-and-remarks.html):\r\n\r\n\u00a0"
        },
        {
            "created_at": "2021-01-19T14:47:44.366Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10489?focusedCommentId=17267940) by Johannes M\u00fcller (JohannesMueller):*\nFYI: The build is now failing at a different location.\r\n```java\n\r\n-- thrift_ep configure command succeeded.  See also /home/builder/johannes/arrow/cpp/build-debug/thrift_ep-prefix/src/thrift_ep-stamp/thrift_ep-configure-*.log\r\n[  9%] Performing build step for 'thrift_ep'\r\nCMake Error at /home/builder/johannes/arrow/cpp/build-debug/thrift_ep-prefix/src/thrift_ep-stamp/thrift_ep-build-DEBUG.cmake:16 (message):\r\n  Command failed: 2   'make'  See also    /home/builder/johannes/arrow/cpp/build-debug/thrift_ep-prefix/src/thrift_ep-stamp/thrift_ep-build-*.log\r\nmake[2]: *** [thrift_ep-prefix/src/thrift_ep-stamp/thrift_ep-build] Error 1\r\nmake[1]: *** [CMakeFiles/thrift_ep.dir/all] Error 2\r\nmake: *** [all] Error 2\r\n\r\n```\r\nThe out.log:\r\n```java\n\r\n...\r\n[ 82%] Building CXX object lib/cpp/CMakeFiles/thrift_static.dir/src/thrift/transport/TSSLServerSocket.cpp.o\r\n[ 84%] Building CXX object lib/cpp/CMakeFiles/thrift_static.dir/src/thrift/concurrency/PosixThreadFactory.cpp.o\r\n[ 86%] Building CXX object lib/cpp/CMakeFiles/thrift_static.dir/src/thrift/concurrency/Mutex.cpp.o\r\n\r\n```\r\nThe err.log:\r\n```java\n\r\nIn file included from /home/builder/johannes/arrow/cpp/build-debug/boost_ep-prefix/src/boost_ep/boost/optional.hpp(15),\r\n                 from /home/builder/johannes/arrow/cpp/build-debug/boost_ep-prefix/src/boost_ep/boost/format/internals.hpp(21),\r\n                 from /home/builder/johannes/arrow/cpp/build-debug/boost_ep-prefix/src/boost_ep/boost/format.hpp(38),\r\n                 from /home/builder/johannes/arrow/cpp/build-debug/thrift_ep-prefix/src/thrift_ep/lib/cpp/src/thrift/concurrency/Mutex.cpp(36):\r\n/home/builder/johannes/arrow/cpp/build-debug/boost_ep-prefix/src/boost_ep/boost/optional/optional.hpp(970): error: invalid type for defaulted constructor\r\n      optional ( optional && rhs ) = default;\r\n      ^In file included from /home/builder/johannes/arrow/cpp/build-debug/boost_ep-prefix/src/boost_ep/boost/optional.hpp(15),\r\n                 from /home/builder/johannes/arrow/cpp/build-debug/boost_ep-prefix/src/boost_ep/boost/format/internals.hpp(21),\r\n                 from /home/builder/johannes/arrow/cpp/build-debug/boost_ep-prefix/src/boost_ep/boost/format.hpp(38),\r\n                 from /home/builder/johannes/arrow/cpp/build-debug/thrift_ep-prefix/src/thrift_ep/lib/cpp/src/thrift/concurrency/Mutex.cpp(36):\r\n/home/builder/johannes/arrow/cpp/build-debug/boost_ep-prefix/src/boost_ep/boost/optional/optional.hpp(1047): error: invalid type for defaulted assignment operator\r\n      optional& operator= ( optional && ) = default;\r\n                ^compilation aborted for /home/builder/johannes/arrow/cpp/build-debug/thrift_ep-prefix/src/thrift_ep/lib/cpp/src/thrift/concurrency/Mutex.cpp (code 2)\r\n```"
        },
        {
            "created_at": "2021-01-19T14:49:22.518Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10489?focusedCommentId=17267943) by Antoine Pitrou (apitrou):*\nThen you either need to use a pre-built version of Thrift, or disable ARROW_PARQUET."
        }
    ]
}