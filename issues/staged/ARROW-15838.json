{
    "issue": {
        "title": "[C++] Key column behavior in joins",
        "body": "***Note**: This issue was originally created as [ARROW-15838](https://issues.apache.org/jira/browse/ARROW-15838). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nBy default in dplyr (and possibly in pandas too?) coalesces the key column for full joins to be the (non-null) values from both key columns:\r\n\r\n```Java\n\r\n> left <- tibble::tibble(\r\n  key = c(1, 2),\r\n  A = c(0, 1),                  \r\n)                      \r\nleft_tab <- Table$create(left)\r\n> right <- tibble::tibble(\r\n  key = c(2, 3),\r\n  B = c(0, 1),\r\n)                      \r\nright_tab <- Table$create(right)\r\n\r\n> left %>% full_join(right) \r\nJoining, by = \"key\"\r\n# A tibble: 3 \u00d7 3\r\n    key     A     B\r\n  <dbl> <dbl> <dbl>\r\n1     1     0    NA\r\n2     2     1     0\r\n3     3    NA     1\r\n\r\n> left_tab %>% full_join(right_tab) %>% collect()\r\n# A tibble: 3 \u00d7 3\r\n    key     A     B\r\n  <dbl> <dbl> <dbl>\r\n1     2     1     0\r\n2     1     0    NA\r\n3    NA    NA     1\r\n```\r\n\r\n\r\nAnd right join, we would expect the key from the right table to be in the result, but we get the key from the left instead:\r\n\r\n```Java\n\r\n> left <- tibble::tibble(\r\n  key = c(1, 2),\r\n  A = c(0, 1),                  \r\n)                      \r\nleft_tab <- Table$create(left)\r\n> right <- tibble::tibble(\r\n  key = c(2, 3),\r\n  B = c(0, 1),\r\n)                      \r\nright_tab <- Table$create(right)\r\n> left %>% right_join(right)\r\nJoining, by = \"key\"\r\n# A tibble: 2 \u00d7 3\r\n    key     A     B\r\n  <dbl> <dbl> <dbl>\r\n1     2     1     0\r\n2     3    NA     1\r\n> left_tab %>% right_join(right_tab) %>% collect()\r\n# A tibble: 2 \u00d7 3\r\n    key     A     B\r\n  <dbl> <dbl> <dbl>\r\n1     2     1     0\r\n2    NA    NA     1\r\n```\r\n\r\nAdditionally, we should be able to keep both key columns with an option (cf https://github.com/apache/arrow/blob/9719eae66dcf38c966ae769215d27020a6dd5550/r/R/dplyr-join.R#L32) ",
        "created_at": "2022-03-03T17:49:34.000Z",
        "updated_at": "2022-10-17T03:32:42.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-10-14T20:12:09.000Z"
    },
    "comments": [
        {
            "created_at": "2022-03-22T14:57:07.458Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15838?focusedCommentId=17510544) by Joris Van den Bossche (jorisvandenbossche):*\nAs a reference, in `dplyr` this is controlled by a `keep` argument (https://dplyr.tidyverse.org/reference/mutate-joins.html)"
        },
        {
            "created_at": "2022-07-14T16:17:21.692Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15838?focusedCommentId=17566909) by Ian Cook (icook):*\nIIUC, I think it should be possible to resolve this with a change only to the R bindings, by using the `coalesce` function. I don't think we need changes in Acero to resolve this, so it does not really depend on\u00a0ARROW-15957."
        },
        {
            "created_at": "2022-07-18T11:21:32.727Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15838?focusedCommentId=17567939) by Joris Van den Bossche (jorisvandenbossche):*\nThis is indeed what pyarrow does (https://github.com/apache/arrow/blob/4db32223a575b92f1e6baef0faa5fce39abc35fb/python/pyarrow/_exec_plan.pyx#L304-L343). However, it leads to quite some complex code (to infer which fields to project, names can change etc so we need to get the field indices in the output that are the original key columns), and if both R and Python need it, that might be a good reason to integrate this more in the join functionality of Acero itself."
        },
        {
            "created_at": "2022-07-18T18:14:23.295Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15838?focusedCommentId=17568150) by Weston Pace (westonpace):*\nIt appears that pyarrow is actually doing the coalesce (which is the correct thing) while R isn't (hence ARROW-16897).  I agree that it would be nice to integrate this into the join itself.  `[~zagto]` had a PR to do this but it was built on top of the newer swiss join which, at the time, was not merged, so it was put on hold.  It's probably too late to try and pull that in for 9.0.0 but I think this is something we can tackle as part of 10.0.0"
        },
        {
            "created_at": "2022-10-14T20:12:09.127Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-15838?focusedCommentId=17617959) by Neal Richardson (npr):*\nIssue resolved by pull request 14286\n<https://github.com/apache/arrow/pull/14286>"
        }
    ]
}