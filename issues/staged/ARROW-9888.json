{
    "issue": {
        "title": "[Rust] [DataFusion] ExecutionContext can not be shared between threads",
        "body": "***Note**: This issue was originally created as [ARROW-9888](https://issues.apache.org/jira/browse/ARROW-9888). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAs suggested by Jorge on  https://github.com/apache/arrow/pull/8079\r\n\r\nThe high level idea is to allow ExecutionContext on multi-threaded environments such as Python.\r\n\r\nThe two use-cases:\r\n\r\n1. when a project is planning a complex number of plans that depend on a common set of sources and UDFs, it would be nice to be able to multi-thread the planning. This is particularly important when planning requires reading remote metadata to formulate themselves (e.g. when the source is in s3 with many partitions). Metadata reading is often slow and network bounded, which makes threads suitable for these workloads. If multi-threading is not possible, either each plan needs to read the metadata independently (one context per plan) or planning must be sequential (with lots of network waiting).\r\n\r\n2. when creating bindings to programming languages that support multi-threading, it would be nice for the ExecutionContext to be thread safe, so that we can more easily integrate with those languages.\r\n\r\nThe code might look like:\r\n```Java\n\r\nalamb@MacBook-Pro rust % git diff\r\ndiff --git a/rust/datafusion/src/execution/context.rs b/rust/datafusion/src/execution/context.rs\r\nindex 5f8aa342e..7374b0a78 100644\r\n--- a/rust/datafusion/src/execution/context.rs\r\n+++ b/rust/datafusion/src/execution/context.rs\r\n@@ -460,7 +460,7 @@ mod tests {\r\n     use arrow::array::{ArrayRef, Int32Array};\r\n     use arrow::compute::add;\r\n     use std::fs::File;\r\n-    use std::io::prelude::*;\r\n+    use std::{sync::Mutex, io::prelude::*};\r\n     use tempdir::TempDir;\r\n     use test::*;\r\n \r\n@@ -928,6 +928,28 @@ mod tests {\r\n         Ok(())\r\n     }\r\n \r\n+    #[test]\r\n+    fn send_context_to_threads() -> Result<()> {\r\n+        // ensure that ExecutionContext's can be read by multiple threads concurrently\r\n+        let tmp_dir = TempDir::new(\"send_context_to_threads\")?;\r\n+        let partition_count = 4;\r\n+        let mut ctx = Arc::new(Mutex::new(create_ctx(&tmp_dir, partition_count)?));\r\n+\r\n+        let threads: Vec<JoinHandle<Result<_>>> = (0..2)\r\n+            .map(|_| { ctx.clone() })\r\n+            .map(|ctx_clone| thread::spawn(move || {\r\n+                let ctx = ctx_clone.lock().expect(\"Locked context\");\r\n+                // Ensure we can create logical plan code on a separate thread.\r\n+                ctx.create_logical_plan(\"SELECT c1, c2 FROM test WHERE c1 > 0 AND c1 < 3\")\r\n+            }))\r\n+            .collect();\r\n+\r\n+        for thread in threads {\r\n+            thread.join().expect(\"Failed to join thread\")?;\r\n+        }\r\n+        Ok(())\r\n+    }\r\n+\r\n     #[test]\r\n     fn scalar_udf() -> Result<()> {\r\n         let schema = Schema::new(vec![\r\n```\r\n\r\n\r\nAt the moment, Rust refuses to compile this example (and also refuses to share ExecutionContexts between threads) due to the following (namely that there are several `dyn` objects that are also not marked as Send + Sync:\r\n\r\n```Java\n\r\n   Compiling datafusion v2.0.0-SNAPSHOT (/Users/alamb/Software/arrow/rust/datafusion)\r\nerror[E0277]: `(dyn execution::physical_plan::PhysicalPlanner + 'static)` cannot be sent between threads safely\r\n   --> datafusion/src/execution/context.rs:940:30\r\n    |\r\n940 |             .map(|ctx_clone| thread::spawn(move || {\r\n    |                              ^^^^^^^^^^^^^ `(dyn execution::physical_plan::PhysicalPlanner + 'static)` cannot be sent between threads safely\r\n    | \r\n   ::: /Users/alamb/.rustup/toolchains/nightly-2020-04-22-x86_64-apple-darwin/lib/rustlib/src/rust/src/libstd/thread/mod.rs:616:8\r\n    |\r\n616 |     F: Send + 'static,\r\n    |        ---- required by this bound in `std::thread::spawn`\r\n    |\r\n    = help: the trait `std::marker::Send` is not implemented for `(dyn execution::physical_plan::PhysicalPlanner + 'static)`\r\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Arc<(dyn execution::physical_plan::PhysicalPlanner + 'static)>`\r\n    = note: required because it appears within the type `std::option::Option<std::sync::Arc<(dyn execution::physical_plan::PhysicalPlanner + 'static)>>`\r\n    = note: required because it appears within the type `execution::context::ExecutionConfig`\r\n    = note: required because it appears within the type `execution::context::ExecutionContextState`\r\n    = note: required because it appears within the type `execution::context::ExecutionContext`\r\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Mutex<execution::context::ExecutionContext>`\r\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Arc<std::sync::Mutex<execution::context::ExecutionContext>>`\r\n    = note: required because it appears within the type `[closure@datafusion/src/execution/context.rs:940:44: 944:14 ctx_clone:std::sync::Arc<std::sync::Mutex<execution::context::ExecutionContext>>]`\r\n\r\nerror[E0277]: `(dyn execution::physical_plan::PhysicalPlanner + 'static)` cannot be shared between threads safely\r\n   --> datafusion/src/execution/context.rs:940:30\r\n    |\r\n940 |             .map(|ctx_clone| thread::spawn(move || {\r\n    |                              ^^^^^^^^^^^^^ `(dyn execution::physical_plan::PhysicalPlanner + 'static)` cannot be shared between threads safely\r\n    | \r\n   ::: /Users/alamb/.rustup/toolchains/nightly-2020-04-22-x86_64-apple-darwin/lib/rustlib/src/rust/src/libstd/thread/mod.rs:616:8\r\n    |\r\n616 |     F: Send + 'static,\r\n    |        ---- required by this bound in `std::thread::spawn`\r\n    |\r\n    = help: the trait `std::marker::Sync` is not implemented for `(dyn execution::physical_plan::PhysicalPlanner + 'static)`\r\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Arc<(dyn execution::physical_plan::PhysicalPlanner + 'static)>`\r\n    = note: required because it appears within the type `std::option::Option<std::sync::Arc<(dyn execution::physical_plan::PhysicalPlanner + 'static)>>`\r\n    = note: required because it appears within the type `execution::context::ExecutionConfig`\r\n    = note: required because it appears within the type `execution::context::ExecutionContextState`\r\n    = note: required because it appears within the type `execution::context::ExecutionContext`\r\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Mutex<execution::context::ExecutionContext>`\r\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Arc<std::sync::Mutex<execution::context::ExecutionContext>>`\r\n    = note: required because it appears within the type `[closure@datafusion/src/execution/context.rs:940:44: 944:14 ctx_clone:std::sync::Arc<std::sync::Mutex<execution::context::ExecutionContext>>]`\r\n\r\nerror[E0277]: `(dyn datasource::datasource::TableProvider + 'static)` cannot be sent between threads safely\r\n   --> datafusion/src/execution/context.rs:940:30\r\n    |\r\n940 |             .map(|ctx_clone| thread::spawn(move || {\r\n    |                              ^^^^^^^^^^^^^ `(dyn datasource::datasource::TableProvider + 'static)` cannot be sent between threads safely\r\n    | \r\n   ::: /Users/alamb/.rustup/toolchains/nightly-2020-04-22-x86_64-apple-darwin/lib/rustlib/src/rust/src/libstd/thread/mod.rs:616:8\r\n    |\r\n616 |     F: Send + 'static,\r\n    |        ---- required by this bound in `std::thread::spawn`\r\n    |\r\n    = help: the trait `std::marker::Send` is not implemented for `(dyn datasource::datasource::TableProvider + 'static)`\r\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Arc<(dyn datasource::datasource::TableProvider + 'static)>`\r\n    = note: required because it appears within the type `(std::string::String, std::sync::Arc<(dyn datasource::datasource::TableProvider + 'static)>)`\r\n    = note: required because of the requirements on the impl of `std::marker::Send` for `hashbrown::raw::RawTable<(std::string::String, std::sync::Arc<(dyn datasource::datasource::TableProvider + 'static)>)>`\r\n    = note: required because it appears within the type `hashbrown::map::HashMap<std::string::String, std::sync::Arc<(dyn datasource::datasource::TableProvider + 'static)>, std::collections::hash_map::RandomState>`\r\n    = note: required because it appears within the type `std::collections::HashMap<std::string::String, std::sync::Arc<(dyn datasource::datasource::TableProvider + 'static)>>`\r\n    = note: required because it appears within the type `execution::context::ExecutionContextState`\r\n    = note: required because it appears within the type `execution::context::ExecutionContext`\r\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Mutex<execution::context::ExecutionContext>`\r\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Arc<std::sync::Mutex<execution::context::ExecutionContext>>`\r\n    = note: required because it appears within the type `[closure@datafusion/src/execution/context.rs:940:44: 944:14 ctx_clone:std::sync::Arc<std::sync::Mutex<execution::context::ExecutionContext>>]`\r\n\r\nerror[E0277]: `(dyn datasource::datasource::TableProvider + 'static)` cannot be shared between threads safely\r\n   --> datafusion/src/execution/context.rs:940:30\r\n    |\r\n940 |             .map(|ctx_clone| thread::spawn(move || {\r\n    |                              ^^^^^^^^^^^^^ `(dyn datasource::datasource::TableProvider + 'static)` cannot be shared between threads safely\r\n    | \r\n   ::: /Users/alamb/.rustup/toolchains/nightly-2020-04-22-x86_64-apple-darwin/lib/rustlib/src/rust/src/libstd/thread/mod.rs:616:8\r\n    |\r\n616 |     F: Send + 'static,\r\n    |        ---- required by this bound in `std::thread::spawn`\r\n    |\r\n    = help: the trait `std::marker::Sync` is not implemented for `(dyn datasource::datasource::TableProvider + 'static)`\r\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Arc<(dyn datasource::datasource::TableProvider + 'static)>`\r\n    = note: required because it appears within the type `(std::string::String, std::sync::Arc<(dyn datasource::datasource::TableProvider + 'static)>)`\r\n    = note: required because of the requirements on the impl of `std::marker::Send` for `hashbrown::raw::RawTable<(std::string::String, std::sync::Arc<(dyn datasource::datasource::TableProvider + 'static)>)>`\r\n    = note: required because it appears within the type `hashbrown::map::HashMap<std::string::String, std::sync::Arc<(dyn datasource::datasource::TableProvider + 'static)>, std::collections::hash_map::RandomState>`\r\n    = note: required because it appears within the type `std::collections::HashMap<std::string::String, std::sync::Arc<(dyn datasource::datasource::TableProvider + 'static)>>`\r\n    = note: required because it appears within the type `execution::context::ExecutionContextState`\r\n    = note: required because it appears within the type `execution::context::ExecutionContext`\r\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Mutex<execution::context::ExecutionContext>`\r\n    = note: required because of the requirements on the impl of `std::marker::Send` for `std::sync::Arc<std::sync::Mutex<execution::context::ExecutionContext>>`\r\n    = note: required because it appears within the type `[closure@datafusion/src/execution/context.rs:940:44: 944:14 ctx_clone:std::sync::Arc<std::sync::Mutex<execution::context::ExecutionContext>>]`\r\n\r\n   Compiling arrow-benchmarks v2.0.0-SNAPSHOT (/Users/alamb/Software/arrow/rust/benchmarks)\r\nerror: aborting due to 4 previous errors\r\n\r\nFor more information about this error, try `rustc --explain E0277`.\r\nerror: could not compile `datafusion`.\r\n\r\nTo learn more, run the command again with --verbose.\r\nwarning: build failed, waiting for other jobs to finish...\r\nerror: build failed\r\n```\r\n",
        "created_at": "2020-08-31T10:39:41.000Z",
        "updated_at": "2020-09-29T22:43:33.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust - DataFusion",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-09-02T23:42:52.000Z"
    },
    "comments": [
        {
            "created_at": "2020-08-31T10:43:01.220Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9888?focusedCommentId=17187633) by Andrew Lamb (alamb):*\nThis was previously attempted on ARROW-9425 but it seems like the behavior regressed in some subsequent PR\r\n\r\nIt will be good to have a test to prevent such reversions"
        },
        {
            "created_at": "2020-09-02T23:42:52.235Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9888?focusedCommentId=17189762) by Andy Grove (andygrove):*\nIssue resolved by pull request 8082\n<https://github.com/apache/arrow/pull/8082>"
        }
    ]
}