{
    "issue": {
        "title": "[Java] Reading of Dictionary encoded struct vector fails ",
        "body": "***Note**: This issue was originally created as [ARROW-10174](https://issues.apache.org/jira/browse/ARROW-10174). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWrite an index vector and a dictionary with a dictionary vector of the type `Struct` using an `ArrowStreamWriter`. Reading this again fails with an exception.\r\n\r\nCode to reproduce:\r\n\r\n```java\n\r\nfinal RootAllocator allocator = new RootAllocator();\r\n\r\n// Create the dictionary\r\nfinal StructVector dict = StructVector.empty(\"Dict\", allocator);\r\nfinal NullableStructWriter dictWriter = dict.getWriter();\r\nfinal IntWriter dictA = dictWriter.integer(\"a\");\r\nfinal IntWriter dictB = dictWriter.integer(\"b\");\r\nfor (int i = 0; i < 3; i++) {\r\n\tdictWriter.start();\r\n\tdictA.writeInt(i);\r\n\tdictB.writeInt(i);\r\n\tdictWriter.end();\r\n}\r\ndict.setValueCount(3);\r\nfinal Dictionary dictionary = new Dictionary(dict, new DictionaryEncoding(1, false, null));\r\n\r\n// Create the vector\r\nfinal Random random = new Random();\r\nfinal StructVector vector = StructVector.empty(\"Dict\", allocator);\r\nfinal NullableStructWriter vectorWriter = vector.getWriter();\r\nfinal IntWriter vectorA = vectorWriter.integer(\"a\");\r\nfinal IntWriter vectorB = vectorWriter.integer(\"b\");\r\nfor (int i = 0; i < 10; i++) {\r\n\tint v = random.nextInt(3);\r\n\tvectorWriter.start();\r\n\tvectorA.writeInt(v);\r\n\tvectorB.writeInt(v);\r\n\tvectorWriter.end();\r\n}\r\nvector.setValueCount(10);\r\n\r\n// Encode the vector using the dictionary\r\nfinal IntVector indexVector = (IntVector) DictionaryEncoder.encode(vector, dictionary);\r\n\r\n// Write the vector to out\r\nfinal ByteArrayOutputStream out = new ByteArrayOutputStream();\r\nfinal VectorSchemaRoot root = new VectorSchemaRoot(Collections.singletonList(indexVector.getField()),\r\n\t\tCollections.singletonList(indexVector));\r\nfinal ArrowStreamWriter writer = new ArrowStreamWriter(root, new MapDictionaryProvider(dictionary),\r\n\t\tChannels.newChannel(out));\r\nwriter.start();\r\nwriter.writeBatch();\r\nwriter.end();\r\n\r\n// Read the vector from out\r\ntry (final ArrowStreamReader reader = new ArrowStreamReader(new ByteArrayInputStream(out.toByteArray()),\r\n\t\tallocator)) {\r\n\treader.loadNextBatch();\r\n\tfinal VectorSchemaRoot readRoot = reader.getVectorSchemaRoot();\r\n\tfinal FieldVector readIndexVector = readRoot.getVector(0);\r\n\r\n\t// Get the dictionary and decode\r\n\tfinal Map<Long, Dictionary> readDictionaryMap = reader.getDictionaryVectors();\r\n\tfinal Dictionary readDictionary = readDictionaryMap.get(readIndexVector.getField().getDictionary().getId());\r\n\tfinal ValueVector readVector = DictionaryEncoder.decode(readIndexVector, readDictionary);\r\n}\r\n```\r\n\r\nException:\r\n```Java\n\r\njava.lang.IllegalArgumentException: not all nodes and buffers were consumed. nodes: [ArrowFieldNode [length=3, nullCount=0], ArrowFieldNode [length=3, nullCount=0]] buffers: [ArrowBuf[21], address:140118352739688, length:1, ArrowBuf[22], address:140118352739696, length:12, ArrowBuf[23], address:140118352739712, length:1, ArrowBuf[24], address:140118352739720, length:12]\r\n\tat org.apache.arrow.vector.VectorLoader.load(VectorLoader.java:63)\r\n\tat org.apache.arrow.vector.ipc.ArrowReader.load(ArrowReader.java:241)\r\n\tat org.apache.arrow.vector.ipc.ArrowReader.loadDictionary(ArrowReader.java:232)\r\n\tat org.apache.arrow.vector.ipc.ArrowStreamReader.loadNextBatch(ArrowStreamReader.java:129)\r\n\tat com.knime.AppTest.testDictionaryStruct(AppTest.java:83)\r\n```\r\n\r\nIf I see it corretly the error happens in `DictionaryUtilities#toMessageFormat`. If a dictionary encoded vector is encountered still the children of the memory format field are used (none because this is Int). However, the children of the field of the dictionary vector should be mapped to the message format and set as children.\r\n\r\nI can create a fix and open a pull request.",
        "created_at": "2020-10-05T13:16:22.000Z",
        "updated_at": "2021-01-16T21:38:31.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Java",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-10-16T02:24:34.000Z"
    },
    "comments": [
        {
            "created_at": "2020-10-16T02:24:34.822Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10174?focusedCommentId=17215121) by Liya Fan (fan_li_ya):*\nIssue resolved by pull request 8363\n<https://github.com/apache/arrow/pull/8363>"
        }
    ]
}