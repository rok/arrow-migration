{
    "issue": {
        "title": "[Python] read_csv() case of user specified column_names AND include_columns",
        "body": "***Note**: This issue was originally created as [ARROW-9522](https://issues.apache.org/jira/browse/ARROW-9522). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe following piece of code is logically correct according to documentation of read_csv()\r\n```python\n\r\nfrom pyarrow.csv import read_csv, ParseOptions, ConvertOptions, ReadOptions\r\n\r\nfile_location = 'spc_catalog.tsv'\r\n\r\nsep = '\\t'\r\nnulls = ['\\\\N']\r\nskip_rows = 1\r\n\r\nselect = 'sid, pid, price, quantity, inspection, check'.split(', ')\r\nas_names = 'sid, pid, price, quantity, inspection, check'.split(', ')\r\nas_types = 'uint32, uint32, float32, uint32, timestamp[ms], bool'.split(', ')\r\nas_types_dict = dict(zip(as_names, as_types))\r\n\r\nread_options = ReadOptions(skip_rows=skip_rows, autogenerate_column_names=False, use_threads=True, column_names=as_names)\r\nparse_options = ParseOptions(delimiter=sep)\r\nconvert_options = ConvertOptions(include_columns=select, column_types=as_types_dict, null_values=nulls, strings_can_be_null=True)\r\nread_csv(file_location, read_options, parse_options, convert_options).to_pandas()\r\n\u00a0\n```\r\nNevertheless it produces an error\r\n```python\n\r\nFile \"<ipython-input-2-fa6f85add265>\", line 17, in <module>\r\n read_csv(file_location, read_options, parse_options, convert_options).to_pandas()\r\n File \"pyarrow/_csv.pyx\", line 617, in pyarrow._csv.read_csv\r\n File \"pyarrow/error.pxi\", line 123, in pyarrow.lib.pyarrow_internal_check_status\r\n File \"pyarrow/error.pxi\", line 85, in pyarrow.lib.check_status\r\npyarrow.lib.ArrowInvalid: CSV parse error: Expected 6 columns, got 7\u00a0\r\n```\r\nThe error is caused by the parameter <font color=\"#ff0000\">as_names</font> passed to the argument <font color=\"#ff0000\">column_names</font> in <font color=\"#ff0000\">ReadOptions()</font> method. If we set this\u00a0 to:\r\n```python\n\r\nas_names = 'sid, pid, price, quantity, inspection, check, OMIT'.split(', ')\r\n\r\n\"\"\"\r\n     sid  pid       price  quantity inspection  check\r\n0   1081  991   36.099998     300.0 2014-12-20   True\r\n1   1081  992   42.299999     400.0 2014-12-20   True\r\n2   1081  993   15.300000     200.0 2014-03-03  False\r\n3   1081  994   20.500000     100.0 2014-03-03  False\r\n4   1081  995   20.500000       NaN        NaT  False\r\n5   1081  996  124.230003       NaN        NaT  False\r\n6   1081  997  124.230003       NaN        NaT  False\r\n7   1081  998   11.700000     400.0 2014-09-10   True\r\n8   1081  999   75.199997       NaN        NaT  False\r\n9   1082  991   16.500000     200.0 2014-09-10   True\r\n10  1082  997    0.550000     100.0 2014-09-10   True\r\n11  1082  998    7.950000     200.0 2014-03-03  False\r\n12  1083  998   12.500000       NaN        NaT  False\r\n13  1083  999    1.000000       NaN        NaT  False\r\n14  1084  994   57.299999     100.0 2014-12-20   True\r\n15  1084  995   22.200001       NaN        NaT  False\r\n16  1084  998   48.599998     200.0 2014-12-20   True\r\n\"\"\"\n```\r\nthe code runs without errors but it is not logical to expect the user to pass OMIT or any other string for columns that are not included (<font color=\"#ff0000\">include_columns</font>) in those to read from the flat file. Notice that a similar parameter <font color=\"#ff0000\">column_types </font>is passed in the right way, i.e. type for only those columns included.\r\n\r\nIssue related\u00a0\r\n https://issues.apache.org/jira/browse/ARROW-7628",
        "created_at": "2020-07-18T16:28:29.000Z",
        "updated_at": "2020-07-18T17:15:36.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": []
}