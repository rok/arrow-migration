{
    "issue": {
        "title": "[Python] possible to create StructArray with type that conflicts with child array's types",
        "body": "***Note**: This issue was originally created as [ARROW-6158](https://issues.apache.org/jira/browse/ARROW-6158). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nUsing the Python interface as example. This creates a `StructArray` where the field types don't match the child array types:\r\n\r\n```Java\n\r\na = pa.array([1, 2, 3], type=pa.int64())\r\nb = pa.array(['a', 'b', 'c'], type=pa.string())\r\ninconsistent_fields = [pa.field('a', pa.int32()), pa.field('b', pa.float64())]\r\n\r\na = pa.StructArray.from_arrays([a, b], fields=inconsistent_fields) \r\n```\r\n\r\nThe above works fine. I didn't find anything that errors (eg conversion to pandas, slicing), also validation passes, but the type actually has the inconsistent child types:\r\n\r\n```Java\n\r\nIn [2]: a\r\nOut[2]: \r\n<pyarrow.lib.StructArray object at 0x7f450af52eb8>\r\n-- is_valid: all not null\r\n-- child 0 type: int64\r\n  [\r\n    1,\r\n    2,\r\n    3\r\n  ]\r\n-- child 1 type: string\r\n  [\r\n    \"a\",\r\n    \"b\",\r\n    \"c\"\r\n  ]\r\n\r\nIn [3]: a.type\r\nOut[3]: StructType(struct<a: int32, b: double>)\r\n\r\nIn [4]: a.to_pandas()\r\nOut[4]: \r\narray([{'a': 1, 'b': 'a'}, {'a': 2, 'b': 'b'}, {'a': 3, 'b': 'c'}],\r\n      dtype=object)\r\n\r\nIn [5]: a.validate() \r\n```\r\n\r\nShouldn't this be disallowed somehow? (it could be checked in the Python `from_arrays` method, but maybe also in `StructArray::Make` which already checks for the number of fields vs arrays and a consistent array length). \r\n\r\nSimilarly to discussion in ARROW-6132, I would also expect that this the `ValidateArray` catches this.",
        "created_at": "2019-08-07T10:58:20.000Z",
        "updated_at": "2019-09-25T08:06:39.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-09-25T03:05:36.000Z"
    },
    "comments": [
        {
            "created_at": "2019-08-07T11:00:10.967Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6158?focusedCommentId=16901978) by Joris Van den Bossche (jorisvandenbossche):*\nFound an example where it starts to give errors: after taking a subset with `Take`.\r\n\r\n```Java\n\r\nIn [6]: subset = a.take(pa.array([0, 2]))  \r\n\r\nIn [7]: subset \r\nOut[7]: \r\n<pyarrow.lib.StructArray object at 0x7f450a6f8468>\r\n-- is_valid: all not null\r\n-- child 0 type: int32\r\n  [\r\n    1,\r\n    2\r\n  ]\r\n-- child 1 type: double\r\n  [\r\n    2.122e-314,\r\n    0\r\n  ]\r\n\r\nIn [8]: subset.validate() \r\n\r\nIn [9]: subset.to_pandas()\r\nOut[9]: array([{'a': 1, 'b': 2.121995791e-314}, {'a': 2, 'b': 0.0}], dtype=object)\r\n```\r\n"
        },
        {
            "created_at": "2019-08-07T11:23:26.292Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6158?focusedCommentId=16901993) by Antoine Pitrou (apitrou):*\nValidation should really catch this."
        },
        {
            "created_at": "2019-09-25T03:05:36.109Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6158?focusedCommentId=16937357) by Wes McKinney (wesm):*\nIssue resolved by pull request 5488\n<https://github.com/apache/arrow/pull/5488>"
        }
    ]
}