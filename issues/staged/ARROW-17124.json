{
    "issue": {
        "title": "[C++] Data race between future signalling and destruction",
        "body": "***Note**: This issue was originally created as [ARROW-17124](https://issues.apache.org/jira/browse/ARROW-17124). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThis sporadic Thread Sanitizer error just occurred to me:\r\n```Java\n\r\nWARNING: ThreadSanitizer: data race (pid=636020)\r\n  Write of size 8 at 0x7b2c000017d0 by main thread:\r\n    #0 pthread_cond_destroy ../../../../libsanitizer/tsan/tsan_interceptors_posix.cpp:1208 (libtsan.so.0+0x31c14)\r\n    #1 arrow::ConcreteFutureImpl::~ConcreteFutureImpl() /home/antoine/arrow/dev/cpp/src/arrow/util/future.cc:211 (libarrow.so.900+0xa70b62)\r\n    #2 arrow::ConcreteFutureImpl::~ConcreteFutureImpl() /home/antoine/arrow/dev/cpp/src/arrow/util/future.cc:211 (libarrow.so.900+0xa70ba0)\r\n    #3 std::default_delete<arrow::FutureImpl>::operator()(arrow::FutureImpl*) const /home/antoine/miniconda3/envs/pyarrow/x86_64-conda-linux-gnu/include/c++/10.3.0/bits/unique_ptr.h:85 (arrow-dataset-file-test+0x584a1)\r\n    #4 std::_Sp_counted_deleter<arrow::FutureImpl*, std::default_delete<arrow::FutureImpl>, std::allocator<void>, (__gnu_cxx::_Lock_policy)2>::_M_dispose() /home/antoine/miniconda3/envs/pyarrow/x86_64-conda-linux-gnu/include/c++/10.3.0/bits/shared_ptr_base.h:474 (arrow-dataset-file-test+0xa9638)\r\n    #5 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() <null> (libarrow.so.900+0x2e1158)\r\n    #6 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() <null> (libarrow.so.900+0x2dc6ed)\r\n    #7 std::__shared_ptr<arrow::FutureImpl, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() <null> (libarrow.so.900+0x978fee)\r\n    #8 std::shared_ptr<arrow::FutureImpl>::~shared_ptr() <null> (libarrow.so.900+0x97901c)\r\n    #9 arrow::Future<arrow::internal::Empty>::~Future() <null> (libarrow.so.900+0x97904a)\r\n    #10 ~ExecPlanImpl /home/antoine/arrow/dev/cpp/src/arrow/compute/exec/exec_plan.cc:52 (libarrow.so.900+0xe8160b)\r\n    #11 ~ExecPlanImpl /home/antoine/arrow/dev/cpp/src/arrow/compute/exec/exec_plan.cc:58 (libarrow.so.900+0xe8166e)\r\n    #12 _M_dispose /home/antoine/miniconda3/envs/pyarrow/x86_64-conda-linux-gnu/include/c++/10.3.0/bits/shared_ptr_base.h:380 (libarrow.so.900+0xea6c2a)\r\n    #13 std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() <null> (libarrow_dataset.so.900+0x7bd10)\r\n    #14 std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() /home/antoine/miniconda3/envs/pyarrow/x86_64-conda-linux-gnu/include/c++/10.3.0/bits/shared_ptr_base.h:733 (libarrow_dataset.so.900+0x77ad9)\r\n    #15 std::__shared_ptr<arrow::compute::ExecPlan, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() /home/antoine/miniconda3/envs/pyarrow/x86_64-conda-linux-gnu/include/c++/10.3.0/bits/shared_ptr_base.h:1183 (libarrow_dataset.so.900+0xd3dfc)\r\n    #16 std::shared_ptr<arrow::compute::ExecPlan>::~shared_ptr() /home/antoine/miniconda3/envs/pyarrow/x86_64-conda-linux-gnu/include/c++/10.3.0/bits/shared_ptr.h:121 (libarrow_dataset.so.900+0xd3e2a)\r\n    #17 arrow::dataset::FileSystemDataset::Write(arrow::dataset::FileSystemDatasetWriteOptions const&, std::shared_ptr<arrow::dataset::Scanner>) /home/antoine/arrow/dev/cpp/src/arrow/dataset/file_base.cc:398 (libarrow_dataset.so.900+0xd49ca)\r\n    #18 arrow::dataset::TestFileSystemDataset_WriteProjected_Test::TestBody() /home/antoine/arrow/dev/cpp/src/arrow/dataset/file_test.cc:330 (arrow-dataset-file-test+0x2e382)\r\n    #19 void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) <null> (libgtest.so.1.11.0+0x5bd3d)\r\n\r\n  Previous read of size 8 at 0x7b2c000017d0 by thread T3:\r\n    #0 pthread_cond_broadcast ../../../../libsanitizer/tsan/tsan_interceptors_posix.cpp:1201 (libtsan.so.0+0x31b51)\r\n    #1 arrow::ConcreteFutureImpl::DoMarkFinishedOrFailed(arrow::FutureState) /home/antoine/arrow/dev/cpp/src/arrow/util/future.cc:343 (libarrow.so.900+0xa6bee0)\r\n    #2 arrow::ConcreteFutureImpl::DoMarkFinished() /home/antoine/arrow/dev/cpp/src/arrow/util/future.cc:232 (libarrow.so.900+0xa6b0f4)\r\n    #3 arrow::FutureImpl::MarkFinished() /home/antoine/arrow/dev/cpp/src/arrow/util/future.cc:409 (libarrow.so.900+0xa6c83f)\r\n    #4 arrow::Future<arrow::internal::Empty>::DoMarkFinished(arrow::Result<arrow::internal::Empty>) /home/antoine/arrow/dev/cpp/src/arrow/util/future.h:725 (libarrow.so.900+0x9cbf81)\r\n    #5 void arrow::Future<arrow::internal::Empty>::MarkFinished<arrow::internal::Empty, void>(arrow::Status) /home/antoine/arrow/dev/cpp/src/arrow/util/future.h:476 (libarrow.so.900+0x9c921c)\r\n    #6 operator() /home/antoine/arrow/dev/cpp/src/arrow/compute/exec/exec_plan.cc:192 (libarrow.so.900+0xe82ee6)\r\n    #7 operator() /home/antoine/arrow/dev/cpp/src/arrow/util/future.h:522 (libarrow.so.900+0xea70a3)\r\n```\r\n\r\nI think the fix is simply to signal the condition variable with the mutex locked (which might be a bit worse performance-wise).",
        "created_at": "2022-07-19T10:49:37.000Z",
        "updated_at": "2022-07-19T11:41:43.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-07-19T10:49:51.547Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17124?focusedCommentId=17568466) by Antoine Pitrou (apitrou):*\ncc `[~westonpace]`"
        },
        {
            "created_at": "2022-07-19T10:52:52.908Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17124?focusedCommentId=17568468) by Antoine Pitrou (apitrou):*\nActually also occurred on CI here:\r\nhttps://github.com/ursacomputing/crossbow/runs/7405683806?check_suite_focus=true#step:5:5665"
        },
        {
            "created_at": "2022-07-19T11:05:58.919Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17124?focusedCommentId=17568480) by Antoine Pitrou (apitrou):*\nIt seems this always occurs in the context of `ExecPlanImpl` destruction because of the `EndTaskGroup` mess."
        },
        {
            "created_at": "2022-07-19T11:41:43.545Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17124?focusedCommentId=17568493) by Antoine Pitrou (apitrou):*\nI tried this simple patch but this triggered spurious warning messages:\r\n```Java\n\r\n   ~ExecPlanImpl() override {\r\n-    if (started_ && !finished_.is_finished()) {\r\n-      ARROW_LOG(WARNING) << \"Plan was destroyed before finishing\";\r\n-      StopProducing();\r\n-      finished().Wait();\r\n+    if (started_) {\r\n+      if (!stopped_) {\r\n+        ARROW_LOG(WARNING) << \"Plan was destroyed before finishing\";\r\n+        StopProducing();\r\n+      }\r\n+      finished_.Wait();\r\n     }\r\n   }\r\n```\r\n"
        }
    ]
}