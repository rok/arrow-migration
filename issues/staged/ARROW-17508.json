{
    "issue": {
        "title": "[Java] Dataset Failed to update reservation while freeing bytes: JNIEnv was not attached to current thread",
        "body": "***Note**: This issue was originally created as [ARROW-17508](https://issues.apache.org/jira/browse/ARROW-17508). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nUsing Dataset **NativeMemoryPool.getDefault()** work very well with any size of data input as you see in:\r\n\r\n\u00a0\r\n```java\n\r\nimport org.apache.arrow.dataset.file.FileFormat;\r\nimport org.apache.arrow.dataset.file.FileSystemDatasetFactory;\r\nimport org.apache.arrow.dataset.jni.DirectReservationListener;\r\nimport org.apache.arrow.dataset.jni.NativeMemoryPool;\r\nimport org.apache.arrow.dataset.scanner.ScanOptions;\r\nimport org.apache.arrow.dataset.scanner.ScanTask;\r\nimport org.apache.arrow.dataset.scanner.Scanner;\r\nimport org.apache.arrow.dataset.source.Dataset;\r\nimport org.apache.arrow.memory.BufferAllocator;\r\nimport org.apache.arrow.memory.RootAllocator;\r\nimport org.apache.arrow.vector.VectorSchemaRoot;\r\nimport org.apache.arrow.vector.ipc.ArrowReader;\r\n\r\nimport java.io.File;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class ReadingMultipleParquetFiles {\r\n    public static void main(String[] args) {\r\n        //https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_2022-01.parquet\r\n        File file = new File(\"src/main/resources/parquetfiles/yellow_tripdata_2022-01.parquet\");\r\n        List<VectorSchemaRoot> schemaRoots = new ArrayList<>();\r\n        try(BufferAllocator allocator = new RootAllocator();\r\n            NativeMemoryPool aDefault = NativeMemoryPool.getDefault();\r\n            FileSystemDatasetFactory fileSystemDatasetFactory = new FileSystemDatasetFactory(\r\n                    allocator, aDefault,\r\n                    FileFormat.PARQUET, file.toURI().toString());\r\n            Dataset dataset = fileSystemDatasetFactory.finish();\r\n            Scanner scanner = dataset.newScan(new ScanOptions(1000))\r\n            ){\r\n            System.out.println(DirectReservationListener.instance().getCurrentDirectMemReservation());\r\n            for (ScanTask scanTask : scanner.scan()) {\r\n                try(ArrowReader execute = scanTask.execute()){\r\n                    while(execute.loadNextBatch()){\r\n                        schemaRoots.add(execute.getVectorSchemaRoot());\r\n                    }\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        System.out.println(schemaRoots.size());\r\n    }\r\n} \n```\r\n\u00a0\r\n\r\n\u00a0\r\n\r\nIn case we decided to use\u00a0NativeMemoryPool.createListenable we are seeing this error message: <font color=\"#FF0000\">/Users/runner/work/crossbow/crossbow/arrow/java/dataset/src/main/cpp/jni_util.cc:78: Failed to update reservation while freeing bytes: JNIEnv was not attached to current thread</font>:\r\n```java\n\r\nimport org.apache.arrow.dataset.file.FileFormat;\r\nimport org.apache.arrow.dataset.file.FileSystemDatasetFactory;\r\nimport org.apache.arrow.dataset.jni.DirectReservationListener;\r\nimport org.apache.arrow.dataset.jni.NativeMemoryPool;\r\nimport org.apache.arrow.dataset.scanner.ScanOptions;\r\nimport org.apache.arrow.dataset.scanner.ScanTask;\r\nimport org.apache.arrow.dataset.scanner.Scanner;\r\nimport org.apache.arrow.dataset.source.Dataset;\r\nimport org.apache.arrow.memory.BufferAllocator;\r\nimport org.apache.arrow.memory.RootAllocator;\r\nimport org.apache.arrow.vector.VectorSchemaRoot;\r\nimport org.apache.arrow.vector.ipc.ArrowReader;\r\n\r\nimport java.io.File;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\npublic class ReadingMultipleParquetFiles {\r\n    public static void main(String[] args) {\r\n        //https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_2022-01.parquet\r\n        File file = new File(\"src/main/resources/parquetfiles/yellow_tripdata_2022-01.parquet\");\r\n        List<VectorSchemaRoot> schemaRoots = new ArrayList<>();\r\n        try(BufferAllocator allocator = new RootAllocator();\r\n            NativeMemoryPool listenable = NativeMemoryPool.createListenable(\r\n                    DirectReservationListener.instance());\r\n            FileSystemDatasetFactory fileSystemDatasetFactory = new FileSystemDatasetFactory(\r\n                    allocator, listenable,\r\n                    FileFormat.PARQUET, file.toURI().toString());\r\n            Dataset dataset = fileSystemDatasetFactory.finish();\r\n            Scanner scanner = dataset.newScan(new ScanOptions(1000))\r\n            ){\r\n            System.out.println(DirectReservationListener.instance().getCurrentDirectMemReservation());\r\n            for (ScanTask scanTask : scanner.scan()) {\r\n                try(ArrowReader execute = scanTask.execute()){\r\n                    while(execute.loadNextBatch()){\r\n                        schemaRoots.add(execute.getVectorSchemaRoot());\r\n                    }\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        System.out.println(schemaRoots.size());\r\n    }\r\n}\r\n \n```\r\nLog stack trace:\r\n```java\n\r\n/Users/runner/work/crossbow/crossbow/arrow/java/dataset/src/main/cpp/jni_util.cc:78: Failed to update reservation while freeing bytes: JNIEnv was not attached to current thread\r\n0 \u00a0 jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013f46fc0c _ZN5arrow4util7CerrLogD2Ev + 204\r\n1 \u00a0 jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013f46fb2e _ZN5arrow4util7CerrLogD0Ev + 14\r\n2 \u00a0 jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013f464de2 _ZN5arrow4util8ArrowLogD1Ev + 34\r\n3 \u00a0 jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013e54d96d _ZN5arrow7dataset3jni31ReservationListenableMemoryPool4Impl4FreeEPhx + 237\r\n4 \u00a0 jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013f78c035 _ZN5arrow10PoolBufferD2Ev + 69\r\n5 \u00a0 jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013f78bd0e _ZN5arrow10PoolBufferD0Ev + 14\r\n6 \u00a0 jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013f70e1ce _ZN5arrow9ArrayDataD2Ev + 222\r\n7 \u00a0 jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013f5b8fde _ZN5arrow17SimpleRecordBatchD2Ev + 206\r\n8 \u00a0 jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013e5785b8 _ZNO5arrow6FutureINSt3__110shared_ptrINS_11RecordBatchEEEE14ThenOnCompleteIZNS_23DefaultIfEmptyGeneratorIS4_EclEvEUt_NS5_17PassthruOnFailureIS9_EEEclERKNS_6ResultIS4_EE + 168\r\n9 \u00a0 jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013f46b486 _ZN5arrow18ConcreteFutureImpl21RunOrScheduleCallbackERKNSt3__110shared_ptrINS_10FutureImplEEEONS3_14CallbackRecordEb + 230\r\n10 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013f46b2bd _ZN5arrow18ConcreteFutureImpl22DoMarkFinishedOrFailedENS_11FutureStateE + 189\r\n11 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013e82dc82 _ZN5arrow6FutureINSt3__110shared_ptrINS_11RecordBatchEEEE14DoMarkFinishedENS_6ResultIS4_EE + 290\r\n12 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013e82d8e8 _ZN5arrow6FutureINSt3__110shared_ptrINS_11RecordBatchEEEE12MarkFinishedENS_6ResultIS4_EE + 88\r\n13 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013e82e8b0 _ZN5arrow8internal6FnOnceIFvRKNS_10FutureImplEEE6FnImplINS_6FutureINSt3__110shared_ptrINS_11RecordBatchEEEE21WrapResultyOnComplete8CallbackINS_6detail16MarkNextFinishedISD_SD_Lb0ELb0EEEEEE6invokeES4_ + 160\r\n14 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013f46b486 _ZN5arrow18ConcreteFutureImpl21RunOrScheduleCallbackERKNSt3__110shared_ptrINS_10FutureImplEEEONS3_14CallbackRecordEb + 230\r\n15 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013f46b2bd _ZN5arrow18ConcreteFutureImpl22DoMarkFinishedOrFailedENS_11FutureStateE + 189\r\n16 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013e82dc82 _ZN5arrow6FutureINSt3__110shared_ptrINS_11RecordBatchEEEE14DoMarkFinishedENS_6ResultIS4_EE + 290\r\n17 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013e82d8e8 _ZN5arrow6FutureINSt3__110shared_ptrINS_11RecordBatchEEEE12MarkFinishedENS_6ResultIS4_EE + 88\r\n18 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013e5c93fe _ZNK5arrow6detail14ContinueFutureclINS_24SerialReadaheadGeneratorINSt3__110shared_ptrINS_11RecordBatchEEEE11ErrCallbackEJRKNS_6StatusEENS_6ResultIS7_EENS_6FutureIS7_EEEENS4_9enable_ifIXaaaantsr3std7is_voidIT1_EE5valuentsr9is_futureISI_EE5valueoontsrT2_8is_emptysr3std7is_sameISI_SA_EE5valueEvE4typeESJ_OT_DpOT0_ + 110\r\n19 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013e5c9335 _ZNO5arrow6FutureINSt3__110shared_ptrINS_11RecordBatchEEEE14ThenOnCompleteINS_24SerialReadaheadGeneratorIS4_E8CallbackENS8_11ErrCallbackEEclERKNS_6ResultIS4_EE + 293\r\n20 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013f46b486 _ZN5arrow18ConcreteFutureImpl21RunOrScheduleCallbackERKNSt3__110shared_ptrINS_10FutureImplEEEONS3_14CallbackRecordEb + 230\r\n21 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013f46b2bd _ZN5arrow18ConcreteFutureImpl22DoMarkFinishedOrFailedENS_11FutureStateE + 189\r\n22 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013e82dc82 _ZN5arrow6FutureINSt3__110shared_ptrINS_11RecordBatchEEEE14DoMarkFinishedENS_6ResultIS4_EE + 290\r\n23 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013e82d8e8 _ZN5arrow6FutureINSt3__110shared_ptrINS_11RecordBatchEEEE12MarkFinishedENS_6ResultIS4_EE + 88\r\n24 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013e5c7e46 _ZNK5arrow6detail14ContinueFutureclINS_6FutureINSt3__110shared_ptrINS_11RecordBatchEEEE17PassthruOnFailureIZNS_7dataset16SlicingGeneratorclEvEUlRKS7_E_EEJRKNS_6StatusEENS_6ResultIS7_EES8_EENS4_9enable_ifIXaaaantsr3std7is_voidIT1_EE5valuentsr9is_futureISM_EE5valueoontsrT2_8is_emptysr3std7is_sameISM_SG_EE5valueEvE4typeESN_OT_DpOT0_ + 102\r\n25 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013e5c7d9e _ZNO5arrow6FutureINSt3__110shared_ptrINS_11RecordBatchEEEE14ThenOnCompleteIZNS_7dataset16SlicingGeneratorclEvEUlRKS4_E_NS5_17PassthruOnFailureISB_EEEclERKNS_6ResultIS4_EE + 222\r\n26 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013f46b486 _ZN5arrow18ConcreteFutureImpl21RunOrScheduleCallbackERKNSt3__110shared_ptrINS_10FutureImplEEEONS3_14CallbackRecordEb + 230\r\n27 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013f46b2bd _ZN5arrow18ConcreteFutureImpl22DoMarkFinishedOrFailedENS_11FutureStateE + 189\r\n28 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013e82dc82 _ZN5arrow6FutureINSt3__110shared_ptrINS_11RecordBatchEEEE14DoMarkFinishedENS_6ResultIS4_EE + 290\r\n29 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013e82d8e8 _ZN5arrow6FutureINSt3__110shared_ptrINS_11RecordBatchEEEE12MarkFinishedENS_6ResultIS4_EE + 88\r\n30 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013e62ad98 _ZN5arrow8internal6FnOnceIFvRKNS_10FutureImplEEE6FnImplINS_6FutureINS0_5EmptyEE21WrapStatusyOnComplete8CallbackIZNS_15MergedGeneratorINSt3__110shared_ptrINS_11RecordBatchEEEE5State14MarkFinalErrorERKNS_6StatusENS8_ISH_EEEUlSM_E_EEE6invokeES4_ + 56\r\n31 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013f46b486 _ZN5arrow18ConcreteFutureImpl21RunOrScheduleCallbackERKNSt3__110shared_ptrINS_10FutureImplEEEONS3_14CallbackRecordEb + 230\r\n32 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013f46b2bd _ZN5arrow18ConcreteFutureImpl22DoMarkFinishedOrFailedENS_11FutureStateE + 189\r\n33 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013f4bb658 _ZN5arrow6FutureINS_8internal5EmptyEE14DoMarkFinishedENS_6ResultIS2_EE + 152\r\n34 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013f4afbc1 _ZN5arrow6FutureINS_8internal5EmptyEE12MarkFinishedIS2_vEEvNS_6StatusE + 81\r\n35 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013e626fda _ZN5arrow15MergedGeneratorINSt3__110shared_ptrINS_11RecordBatchEEEE5State20MarkFinishedAndPurgeEv + 58\r\n36 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013e62b505 _ZN5arrow15MergedGeneratorINSt3__110shared_ptrINS_11RecordBatchEEEE13OuterCallbackclERKNS_6ResultINS1_8functionIFNS_6FutureIS4_EEvEEEEE + 1173\r\n37 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013f46b486 _ZN5arrow18ConcreteFutureImpl21RunOrScheduleCallbackERKNSt3__110shared_ptrINS_10FutureImplEEEONS3_14CallbackRecordEb + 230\r\n38 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013f46b2bd _ZN5arrow18ConcreteFutureImpl22DoMarkFinishedOrFailedENS_11FutureStateE + 189\r\n39 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013e6220fa _ZN5arrow6FutureINSt3__18functionIFNS0_INS1_10shared_ptrINS_11RecordBatchEEEEEvEEEE14DoMarkFinishedENS_6ResultIS8_EE + 282\r\n40 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013e621ef3 _ZN5arrow6FutureINSt3__18functionIFNS0_INS1_10shared_ptrINS_11RecordBatchEEEEEvEEEE12MarkFinishedENS_6ResultIS8_EE + 51\r\n41 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013e78715b _ZN5arrow8internal6FnOnceIFvRKNS_10FutureImplEEE6FnImplINS_6FutureINSt3__18functionIFNS8_INS9_10shared_ptrINS_11RecordBatchEEEEEvEEEE21WrapResultyOnComplete8CallbackINS_6detail16MarkNextFinishedISH_SH_Lb0ELb0EEEEEE6invokeES4_ + 59\r\n42 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013f46b486 _ZN5arrow18ConcreteFutureImpl21RunOrScheduleCallbackERKNSt3__110shared_ptrINS_10FutureImplEEEONS3_14CallbackRecordEb + 230\r\n43 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013f454dcb _ZN5arrow18ConcreteFutureImpl11AddCallbackENS_8internal6FnOnceIFvRKNS_10FutureImplEEEENS_15CallbackOptionsE + 139\r\n44 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013f454cfd _ZN5arrow10FutureImpl11AddCallbackENS_8internal6FnOnceIFvRKS0_EEENS_15CallbackOptionsE + 29\r\n45 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013e786f78 _ZN5arrow8internal6FnOnceIFvvEE6FnImplINSt3__16__bindINS_6detail14ContinueFutureEJRNS_6FutureINS5_8functionIFNS9_INS5_10shared_ptrINS_11RecordBatchEEEEEvEEEEERFSH_PNS0_8ExecutorENSB_IN7parquet5arrow12_GLOBAL__N_114FileReaderImplEEEiRKNS5_6vectorIiNS5_9allocatorIiEEEEERSK_RSP_RKiSV_EEEE6invokeEv + 184\r\n46 \u00a0jnilib-1263766398115565476.tmp \u00a0 \u00a0 \u00a00x000000013f453445 _ZNSt3__1L14__thread_proxyINS_5tupleIJNS_10unique_ptrINS_15__thread_structENS_14default_deleteIS3_EEEEZN5arrow8internal10ThreadPool21LaunchWorkersUnlockedEiE3$_3EEEEEPvSC_ + 693\r\n47 \u00a0libsystem_pthread.dylib \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x00007fff2072f8fc _pthread_start + 224\r\n48 \u00a0libsystem_pthread.dylib \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x00007fff2072b443 thread_start + 15Process finished with exit code 134 (interrupted by signal 6: SIGABRT) \n```\r\n\u00a0",
        "created_at": "2022-08-24T00:08:21.000Z",
        "updated_at": "2022-09-07T15:56:41.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Java",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-08-24T00:09:13.217Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17508?focusedCommentId=17583910) by David Dali Susanibar Arce (dsusanibara):*\nThis is also mention at https://stackoverflow.com/questions/73447994/reading-multiple-parquet-files-in-java-takes-unresonable-amount-of-memory"
        },
        {
            "created_at": "2022-09-07T15:56:41.554Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17508?focusedCommentId=17601375) by David Li (lidavidm):*\nThe SO question is just a general \"Dataset scanning takes a lot of memory\" and is not particularly specific to Java. We just don't expose the configuration knobs. `[~westonpace]` has been improving this and I think this will continue to improve.\r\n\r\nFor here: why do we need the NativeMemoryPool? IMO, now that we have C Data, we could just get rid of it. We just need to solve ARROW-16673."
        }
    ]
}