{
    "issue": {
        "title": "[Python] Segfault when reading CSV inside Flight server",
        "body": "***Note**: This issue was originally created as [ARROW-12622](https://issues.apache.org/jira/browse/ARROW-12622). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nUsing pyarrow.csv.read_csv inside a Flight server results in a segfault. This did not happen in pyarrow 3.0.0.\r\n\r\nThe [CI build of a library we're building failed](https://github.com/timeseer-ai/kukur/runs/2467203316) and made us aware of the issue.\r\n\r\nAttached, a CSV and Python server/client can be found that demonstrates the problem.\r\n \\* Run the server with `python crash.py server`.\r\n \\* Run the client with `python crash.py client`. The server segfaults with 'Segmentation fault (core dumped)'.\r\n\r\nThe crash does not happen when just reading the CSV (`python crash.py`).\r\n\r\nThis is the stacktrace generated by `coredumpctl debug` of a debug build of commit 2746266addddf71d20a4fe49381497b894c4d15c:\r\n```java\n\r\n#0 \u00a00x00007f9275cffedc in __gnu_cxx::__atomic_add (__val=1, __mem=0x10) at /usr/include/c++/10.2.0/ext/atomicity.h:55\r\n\r\n#1 \u00a0__gnu_cxx::__atomic_add_dispatch (__val=1, __mem=0x10) at /usr/include/c++/10.2.0/ext/atomicity.h:96\r\n\r\n#2 \u00a0std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_add_ref_copy (this=0x8)\r\n\r\n \u00a0\u00a0\u00a0at /usr/include/c++/10.2.0/bits/shared_ptr_base.h:142\r\n\r\n#3 \u00a00x00007f9275cfe0a5 in std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count (this=0x7f92735a2778, \u00a0\r\n \u00a0\u00a0\u00a0__r=...) at /usr/include/c++/10.2.0/bits/shared_ptr_base.h:740\r\n\r\n#4 \u00a00x00007f9275cfd01f in std::__shared_ptr<arrow::StopSourceImpl, (__gnu_cxx::_Lock_policy)2>::__shared_ptr (\r\n\r\n \u00a0\u00a0\u00a0this=0x7f92735a2770) at /usr/include/c++/10.2.0/bits/shared_ptr_base.h:1181\r\n\r\n#5 \u00a00x00007f9275cfd045 in std::shared_ptr<arrow::StopSourceImpl>::shared_ptr (this=0x7f92735a2770)\r\n\r\n \u00a0\u00a0\u00a0at /usr/include/c++/10.2.0/bits/shared_ptr.h:149\r\n\r\n#6 \u00a00x00007f9275cfd06b in arrow::StopToken::StopToken (this=0x7f92735a2770)\r\n\r\n \u00a0\u00a0\u00a0at /home/jeroen/dev/python/apache-arrow/dist/include/arrow/util/cancel.h:57\r\n\r\n#7 \u00a00x00007f9275ce96f7 in __pyx_pf_7pyarrow_4_csv_read_csv (__pyx_self=0x0, __pyx_v_input_file=0x7f929e9f28b0, \u00a0\r\n \u00a0\u00a0\u00a0__pyx_v_read_options=0x7f929f49ee80 <_Py_NoneStruct>, __pyx_v_parse_options=0x7f929f49ee80 <_Py_NoneStruct>, \u00a0\r\n \u00a0\u00a0\u00a0__pyx_v_convert_options=0x7f929f49ee80 <_Py_NoneStruct>, __pyx_v_memory_pool=0x7f929f49ee80 <_Py_NoneStruct>)\r\n\r\n \u00a0\u00a0\u00a0at /home/jeroen/dev/python/apache-arrow/arrow/python/build/temp.linux-x86_64-3.8/_csv.cpp:14208\r\n\r\n#8 \u00a00x00007f9275ce8b92 in __pyx_pw_7pyarrow_4_csv_1read_csv (__pyx_self=0x0, __pyx_args=0x7f929ea64be0, __pyx_kwds=0x0)\r\n\r\n \u00a0\u00a0\u00a0at /home/jeroen/dev/python/apache-arrow/arrow/python/build/temp.linux-x86_64-3.8/_csv.cpp:14036\r\n\r\n#9 \u00a00x00007f929f22cf98 in ?? () from /usr/lib/libpython3.8.so.1.0\r\n\r\n#10 0x00007f929f22d5f8 in _PyObject_MakeTpCall () from /usr/lib/libpython3.8.so.1.0\r\n\r\n```\r\nBased on my limited understanding of the code, it looks like the error is here:\r\n<https://github.com/apache/arrow/blob/master/python/pyarrow/_csv.pyx#L799>\r\n```java\n\r\n    with SignalStopHandler() as stop_handler:\r\n                io_context = CIOContext(\r\n                    maybe_unbox_memory_pool(memory_pool),\r\n                    (<StopToken> stop_handler.stop_token).stop_token)\r\n```\r\nWhere `stop_token` is null, because the `SignalStopHandler` had an empty list of signals on creation ([https://github.com/apache/arrow/blob/master/python/pyarrow/error.pxi#L191).](https://github.com/apache/arrow/blob/master/python/pyarrow/error.pxi#L191)\r\n```java\n\r\n        if (signal_handlers_enabled and\r\n                threading.current_thread() is threading.main_thread()):\r\n            self._signals = [\r\n                sig for sig in (signal.SIGINT, signal.SIGTERM)\r\n                if signal.getsignal(sig) not in (signal.SIG_DFL,\r\n                                                 signal.SIG_IGN, None)]\r\n        if not self._signals.empty():\r\n            self._stop_token = StopToken()\r\n            self._stop_token.init(GetResultValue(\r\n                SetSignalStopSource()).token())\r\n            self._enabled = True\r\n```",
        "created_at": "2021-05-01T13:00:34.000Z",
        "updated_at": "2021-05-03T15:37:49.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-05-03T14:53:52.000Z"
    },
    "comments": [
        {
            "created_at": "2021-05-03T11:56:29.337Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12622?focusedCommentId=17338331) by David Li (lidavidm):*\nThanks for reporting this & digging into it. Both the Flight server and the CSV reader try to install signal handlers to properly react to Ctrl-C while in C++ code, so it looks like they conflict; I'll take a look."
        },
        {
            "created_at": "2021-05-03T14:53:52.249Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12622?focusedCommentId=17338408) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 10227\n<https://github.com/apache/arrow/pull/10227>"
        },
        {
            "created_at": "2021-05-03T15:12:41.537Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12622?focusedCommentId=17338413) by Jeroen Hoekx (jhoekx):*\nI can confirm that 5259d2b fixes the issue. Our integration tests complete successfully with that version.\r\n\r\n\u00a0\r\n\r\nThanks for the quick fix and looking forward to see it appear in a release (although we have excluded the pyarrow 4.0.0 from our requirements list for now, so it is mitigated)."
        }
    ]
}