{
    "issue": {
        "title": "[Python] Hdfs client isn't fork-safe",
        "body": "***Note**: This issue was originally created as [ARROW-2081](https://issues.apache.org/jira/browse/ARROW-2081). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nGiven the following script:\r\n\r\n\u00a0\r\n```java\n\r\nimport multiprocessing as mp\r\nimport pyarrow as pa\r\n\r\n\r\ndef ls(h):\r\n\u00a0\u00a0\u00a0 print(\"calling ls\")\r\n\u00a0\u00a0\u00a0 return h.ls(\"/tmp\")\r\n\r\n\r\nif __name__ == '__main__':\r\n\u00a0\u00a0\u00a0 h = pa.hdfs.connect()\r\n\u00a0\u00a0\u00a0 print(\"Using 'spawn'\")\r\n\u00a0\u00a0\u00a0 pool = mp.get_context('spawn').Pool(2)\r\n\u00a0\u00a0\u00a0 results = pool.map(ls, [h, h])\r\n\u00a0\u00a0\u00a0 sol = h.ls(\"/tmp\")\r\n\u00a0\u00a0\u00a0 for r in results:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 assert r == sol\r\n\u00a0\u00a0\u00a0 print(\"'spawn' succeeded\\n\")\r\n\r\n\u00a0\u00a0\u00a0 print(\"Using 'fork'\")\r\n\u00a0\u00a0\u00a0 pool = mp.get_context('fork').Pool(2)\r\n\u00a0\u00a0\u00a0 results = pool.map(ls, [h, h])\r\n\u00a0\u00a0\u00a0 sol = h.ls(\"/tmp\")\r\n\u00a0\u00a0\u00a0 for r in results:\r\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 assert r == sol\r\n\u00a0\u00a0\u00a0 print(\"'fork' succeeded\")\r\n```\r\n\u00a0\r\n\r\nResults in the following output:\r\n\r\n\u00a0\r\n```java\n\r\n$ python test.py\r\nUsing 'spawn'\r\ncalling ls\r\ncalling ls\r\n'spawn' succeeded\r\n\r\nUsing 'fork\n```\r\n\u00a0\r\n\r\nThe process then hangs, and I have to `kill -9` the forked worker processes.\r\n\r\n\u00a0\r\n\r\nI'm unable to get the libhdfs3 driver to work, so I'm unsure if this is a problem with libhdfs or just arrow's use of it (a quick google search didn't turn up anything useful).",
        "created_at": "2018-02-01T23:12:42.000Z",
        "updated_at": "2021-08-05T16:17:28.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-08-04T09:00:58.000Z"
    },
    "comments": [
        {
            "created_at": "2018-02-02T04:38:36.623Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2081?focusedCommentId=16349774) by Wes McKinney (wesm):*\nI think this has to do with the general policy around forking with an embedded JVM. It may not be supported, but I didn't turn up any immediate references"
        },
        {
            "created_at": "2018-02-14T18:19:01.054Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2081?focusedCommentId=16364539) by Wes McKinney (wesm):*\nIs there a way we can detect the fork in the child process(es) and at least avoid a hang or segfault? "
        },
        {
            "created_at": "2018-03-01T17:36:15.966Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2081?focusedCommentId=16382361) by Antoine Pitrou (apitrou):*\nFor the record, if you want decent multiprocessing performance together with fork safety, I would suggest using the \"forkserver\"  method, not \"spawn\".\r\n\r\n(Note the C libhdfs3 library isn't fork-safe, so no need to try it out IMHO :-))"
        },
        {
            "created_at": "2021-08-04T09:00:58.454Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2081?focusedCommentId=17392887) by Antoine Pitrou (apitrou):*\nClosing as won't fix for several reasons:\r\n1) we don't have any HDFS expertise among the developer team (AFAIK)\r\n2) it is likely that the fork-safety issue resides in the underlying C library (libhdfs)\r\n3) no interested party has been willing to investigate and propose a fix"
        }
    ]
}