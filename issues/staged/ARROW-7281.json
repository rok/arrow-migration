{
    "issue": {
        "title": "[C++] AdaptiveIntBuilder::length() does not consider pending_pos_.",
        "body": "***Note**: This issue was originally created as [ARROW-7281](https://issues.apache.org/jira/browse/ARROW-7281). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n```c++\n\r\narrow::AdaptiveIntBuilder builder(arrow::default_memory_pool());\r\nbuilder.Append(1);\r\nstd::cout << builder.length() << std::endl;\r\n```\r\n\r\nExpected output: `1`\r\nActual output: `0`\r\n\r\nI imagine this regression came with https://github.com/apache/arrow/pull/3040\r\n\r\nMy use case: I'm building a JSON parser that appends \"records\" (JSON Objects mapping key=>value) to Arrow columns (each key gets an ArrayBuilder). Not all JSON Objects contain all keys; so `builder.Append()` isn't always called. So on a subsequent row, I want to add nulls for every append that was skipped: `builder.AppendNulls(row - builder.length()); builder.Append(value)`. This fails because `builder.length()` is wrong.\r\n\r\nAnnoying but simple workaround: I maintain a separate `length` value alongside `builder`.",
        "created_at": "2019-11-29T22:43:19.000Z",
        "updated_at": "2020-01-14T19:20:52.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-01-14T19:20:51.000Z"
    },
    "comments": [
        {
            "created_at": "2019-12-01T02:46:17.886Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7281?focusedCommentId=16985470) by Wes McKinney (wesm):*\nHow is your JSON parser different than what is already in the project?"
        },
        {
            "created_at": "2019-12-01T03:10:42.037Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7281?focusedCommentId=16985473) by Adam Hooper (adamhooper):*\nLots of ways. Documented here: https://github.com/CJWorkbench/arrow-tools/blob/master/README.md\n\nWorkbench helps non-coders code. Our JSON aims: predictable outcomes; simple (read: easy-to-understand) behavior; row/column/value size limits; only number/string types; and defined behavior given **any** valid UTF-8 input.\n\n... I'm not sure it's broadly useful. (The CSV parser, on the other hand, is a treat. It gives defined behavior for any valid UTF-8 file.)\n\n(Defined behavior is important to us. Most of our users have no recourse when they see a parse error.)"
        },
        {
            "created_at": "2020-01-14T19:20:52.035Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7281?focusedCommentId=17015338) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 6174\n<https://github.com/apache/arrow/pull/6174>"
        }
    ]
}