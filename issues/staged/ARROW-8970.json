{
    "issue": {
        "title": "[C++] Reduce shared library / binary code size (umbrella issue)",
        "body": "***Note**: This issue was originally created as [ARROW-8970](https://issues.apache.org/jira/browse/ARROW-8970). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWe're reaching a point where we may need to be careful about decisions that increase code size:\r\n\r\n- Instantiating too many templates for code that isn't performance sensitive, or where some templates may do the same thing (e.g. Int32Type kernels may do the same thing as a Date32Type kernel)\n- Inlining functions that don't need to be inline\n  \n  Code size tends to correlate also with compilation times, but not always.\n  \n  I'll use this umbrella issue to organize issues related to reducing compiled code size\n  \n  At this moment (2020-05-27), here are the 25 largest object files in a -O2 build\n  \n  ```Java\n  \n  524896\tsrc/arrow/CMakeFiles/arrow_objlib.dir/array/builder_dict.cc.o\n  531920\tsrc/arrow/CMakeFiles/arrow_objlib.dir/filesystem/s3fs.cc.o\n  552000\tsrc/arrow/CMakeFiles/arrow_objlib.dir/json/converter.cc.o\n  575920\tsrc/arrow/CMakeFiles/arrow_objlib.dir/csv/converter.cc.o\n  595112\tsrc/arrow/CMakeFiles/arrow_objlib.dir/compute/kernels/scalar_cast_string.cc.o\n  645728\tsrc/arrow/CMakeFiles/arrow_objlib.dir/type.cc.o\n  683040\tsrc/arrow/CMakeFiles/arrow_objlib.dir/compute/kernels/scalar_set_lookup.cc.o\n  702232\tsrc/arrow/CMakeFiles/arrow_objlib.dir/ipc/reader.cc.o\n  729912\tsrc/arrow/CMakeFiles/arrow_objlib.dir/tensor/coo_converter.cc.o\n  752776\tsrc/arrow/CMakeFiles/arrow_objlib.dir/tensor/csc_converter.cc.o\n  752776\tsrc/arrow/CMakeFiles/arrow_objlib.dir/tensor/csr_converter.cc.o\n  877680\tsrc/arrow/CMakeFiles/arrow_objlib.dir/array/dict_internal.cc.o\n  885624\tsrc/arrow/CMakeFiles/arrow_objlib.dir/builder.cc.o\n  919072\tsrc/arrow/CMakeFiles/arrow_objlib.dir/scalar.cc.o\n  941776\tsrc/arrow/CMakeFiles/arrow_objlib.dir/ipc/json_internal.cc.o\n  1055248\tsrc/arrow/CMakeFiles/arrow_objlib.dir/ipc/json_simple.cc.o\n  1233304\tsrc/arrow/CMakeFiles/arrow_objlib.dir/compute/kernels/scalar_compare.cc.o\n  1265160\tsrc/arrow/CMakeFiles/arrow_objlib.dir/sparse_tensor.cc.o\n  1343480\tsrc/arrow/CMakeFiles/arrow_objlib.dir/tensor/csf_converter.cc.o\n  1346928\tsrc/arrow/CMakeFiles/arrow_objlib.dir/array.cc.o\n  1502568\tsrc/arrow/CMakeFiles/arrow_objlib.dir/compute/kernels/vector_hash.cc.o\n  1609760\tsrc/arrow/CMakeFiles/arrow_objlib.dir/compute/kernels/scalar_cast_numeric.cc.o\n  1794416\tsrc/arrow/CMakeFiles/arrow_objlib.dir/array/diff.cc.o\n  2759552\tsrc/arrow/CMakeFiles/arrow_objlib.dir/compute/kernels/vector_filter.cc.o\n  7609432\tsrc/arrow/CMakeFiles/arrow_objlib.dir/compute/kernels/vector_take.cc.o\n  ```",
        "created_at": "2020-05-27T21:15:00.000Z",
        "updated_at": "2020-07-11T20:33:06.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-07-11T20:33:06.000Z"
    },
    "comments": [
        {
            "created_at": "2020-06-16T14:15:23.611Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8970?focusedCommentId=17136686) by Wes McKinney (wesm):*\nAfter ARROW-7784, ARROW-5760, and ARROW-9075 patches libarrow.so is now down to 18.44 MB from 23.09 MB in -O3 build on clang-8\r\n\r\nNow here are the largest object files in the build\r\n\r\n```Java\n\r\n$ find src -type f -printf '%s %p\\n' | sort -nr | head -20\r\n1421728 src/arrow/CMakeFiles/arrow_objlib.dir/compute/kernels/scalar_cast_numeric.cc.o\r\n1284672 src/arrow/CMakeFiles/arrow_objlib.dir/compute/kernels/scalar_compare.cc.o\r\n1203344 src/arrow/CMakeFiles/arrow_objlib.dir/sparse_tensor.cc.o\r\n1145640 src/arrow/CMakeFiles/arrow_objlib.dir/compute/kernels/vector_hash.cc.o\r\n905088 src/arrow/CMakeFiles/arrow_objlib.dir/scalar.cc.o\r\n828072 src/arrow/CMakeFiles/arrow_objlib.dir/ipc/json_simple.cc.o\r\n811544 src/arrow/CMakeFiles/arrow_objlib.dir/tensor/csf_converter.cc.o\r\n727448 src/arrow/CMakeFiles/arrow_objlib.dir/ipc/json_internal.cc.o\r\n676576 src/arrow/CMakeFiles/arrow_objlib.dir/array/array_dict.cc.o\r\n668904 src/arrow/CMakeFiles/arrow_objlib.dir/type.cc.o\r\n632680 src/arrow/CMakeFiles/arrow_objlib.dir/array/array_base.cc.o\r\n619968 src/arrow/CMakeFiles/arrow_objlib.dir/builder.cc.o\r\n617392 src/arrow/CMakeFiles/arrow_objlib.dir/compute/kernels/vector_selection.cc.o\r\n583160 src/arrow/CMakeFiles/arrow_objlib.dir/tensor/csr_converter.cc.o\r\n583160 src/arrow/CMakeFiles/arrow_objlib.dir/tensor/csc_converter.cc.o\r\n554792 src/arrow/CMakeFiles/arrow_objlib.dir/ipc/reader.cc.o\r\n554144 src/arrow/CMakeFiles/arrow_objlib.dir/tensor/coo_converter.cc.o\r\n540912 src/arrow/CMakeFiles/arrow_objlib.dir/array/util.cc.o\r\n500088 src/arrow/CMakeFiles/arrow_objlib.dir/array/diff.cc.o\r\n473096 src/arrow/CMakeFiles/arrow_objlib.dir/filesystem/s3fs.cc.o\r\n```"
        },
        {
            "created_at": "2020-06-16T14:18:45.014Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8970?focusedCommentId=17136689) by Wes McKinney (wesm):*\n`[~rokm]` `[~mrkn]` the tensor modules have quite a lot of object code, do you think there's anything that can be done to streamline some of these functions to produce smaller code?"
        },
        {
            "created_at": "2020-06-16T14:21:23.648Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8970?focusedCommentId=17136691) by Wes McKinney (wesm):*\n`[~apitrou]` what do you think about moving the ipc/json_\\* object code to libarrow_testing? "
        },
        {
            "created_at": "2020-06-16T14:31:43.944Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8970?focusedCommentId=17136704) by Uwe Korn (uwe):*\n`[~wesm]` \u00a0Code size can often be reduced by compiling with link time optimization as this uncovers duplicated code paths and merges them, might be an easy win if working."
        },
        {
            "created_at": "2020-06-16T14:47:47.166Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8970?focusedCommentId=17136714) by Wes McKinney (wesm):*\nI looked at some of the large files and LTO won't help them in many cases since many of the inline functions that are generating the code bloat are only used in those files. "
        },
        {
            "created_at": "2020-06-16T17:53:46.905Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8970?focusedCommentId=17137795) by Antoine Pitrou (apitrou):*\nNo strong feelings about `ipc/json*`, but I'm frankly not sure if that's worth the hassle.\r\nIt would be nice if one could build integration tests without all the other tests, though."
        },
        {
            "created_at": "2020-06-16T19:04:38.229Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8970?focusedCommentId=17137858) by Wes McKinney (wesm):*\n`[~apitrou]` I think that's best handled through cmake targets, e.g. `ninja integration`"
        },
        {
            "created_at": "2020-06-17T03:27:58.207Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8970?focusedCommentId=17138062) by Kenta Murata (mrkn):*\n`[~wesm]` There are some options to reduce code sizes related to tensor modules.\r\n\r\n(1) Reducing inline functions.\r\n(2) Reducing sparse tensor's index value types.  I guess we needn't support 8-bit and 16-bit types for sparse tensor index.  At least scipy's sparse matrix doesn't use 8bit and 16bit types for sparse matrix indices.  We should investigate other libraries providing sparse tensors.\r\n(3) Dropping functions for converting among dense and sparse tensors.  These functions aren't necessary to exchanging existing tensor data between systems.\r\n\r\nI will start (1) and (2) right now.  If we don't need to provide conversion functions, I will also start (3)."
        },
        {
            "created_at": "2020-06-19T00:47:56.063Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8970?focusedCommentId=17140078) by Wes McKinney (wesm):*\nFor those who might be interested, here are currently the 100 largest symbols in libarrow.so:\r\n\r\nhttps://gist.github.com/wesm/98307fa12e05760921d8f15e30291920\r\n\r\nI was a bit shocked to learn that see that our use of Brotli causes a bunch of data to be statically linked into the .so. But in general it seems that streamlining the Tensor code would bring a significant reduction in binary size"
        },
        {
            "created_at": "2020-07-05T20:14:12.729Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8970?focusedCommentId=17151652) by Wes McKinney (wesm):*\nWe've made progress \u2013 with my set of enabled components libarrow.so is down to 13.3 MB from 22.0 MB in 0.17.0\r\n\r\n```Java\n\r\n$ ll release/\r\ntotal 36256\r\nlrwxrwxrwx 1 wesm wesm       14 Jul  5 15:16 libarrow.so -> libarrow.so.17*\r\nlrwxrwxrwx 1 wesm wesm       19 Jul  5 10:43 libarrow.so.100 -> libarrow.so.100.0.0*\r\n-rwx------ 1 wesm wesm 13986464 Jul  5 10:43 libarrow.so.100.0.0*\r\nlrwxrwxrwx 1 wesm wesm       18 Jul  5 15:16 libarrow.so.17 -> libarrow.so.17.0.0*\r\n-rwx------ 1 wesm wesm 23134296 Jul  5 15:16 libarrow.so.17.0.0*\r\n```\r\n\r\nHere are the largest object files now\r\n\r\n```Java\n\r\n$ find src/arrow/CMakeFiles/arrow_objlib.dir/ -printf '%s %p\\n'| sort -nr | head -30\r\n806128 src/arrow/CMakeFiles/arrow_objlib.dir/ipc/json_simple.cc.o\r\n771784 src/arrow/CMakeFiles/arrow_objlib.dir/scalar.cc.o\r\n675768 src/arrow/CMakeFiles/arrow_objlib.dir/array/array_dict.cc.o\r\n671360 src/arrow/CMakeFiles/arrow_objlib.dir/type.cc.o\r\n625720 src/arrow/CMakeFiles/arrow_objlib.dir/compute/kernels/vector_selection.cc.o\r\n624920 src/arrow/CMakeFiles/arrow_objlib.dir/builder.cc.o\r\n589664 src/arrow/CMakeFiles/arrow_objlib.dir/compute/kernels/vector_hash.cc.o\r\n562312 src/arrow/CMakeFiles/arrow_objlib.dir/compute/kernels/scalar_compare.cc.o\r\n559296 src/arrow/CMakeFiles/arrow_objlib.dir/ipc/reader.cc.o\r\n547392 src/arrow/CMakeFiles/arrow_objlib.dir/compute/kernels/scalar_cast_numeric.cc.o\r\n500344 src/arrow/CMakeFiles/arrow_objlib.dir/array/diff.cc.o\r\n484360 src/arrow/CMakeFiles/arrow_objlib.dir/array/array_base.cc.o\r\n437080 src/arrow/CMakeFiles/arrow_objlib.dir/json/converter.cc.o\r\n401816 src/arrow/CMakeFiles/arrow_objlib.dir/csv/converter.cc.o\r\n380152 src/arrow/CMakeFiles/arrow_objlib.dir/compute/kernels/vector_sort.cc.o\r\n375536 src/arrow/CMakeFiles/arrow_objlib.dir/compute/kernels/aggregate_basic.cc.o\r\n363912 src/arrow/CMakeFiles/arrow_objlib.dir/array/builder_dict.cc.o\r\n355656 src/arrow/CMakeFiles/arrow_objlib.dir/array/util.cc.o\r\n343752 src/arrow/CMakeFiles/arrow_objlib.dir/pretty_print.cc.o\r\n337936 src/arrow/CMakeFiles/arrow_objlib.dir/compute/kernels/scalar_cast_internal.cc.o\r\n309976 src/arrow/CMakeFiles/arrow_objlib.dir/json/parser.cc.o\r\n284272 src/arrow/CMakeFiles/arrow_objlib.dir/ipc/writer.cc.o\r\n283128 src/arrow/CMakeFiles/arrow_objlib.dir/array/array_nested.cc.o\r\n261264 src/arrow/CMakeFiles/arrow_objlib.dir/c/bridge.cc.o\r\n260632 src/arrow/CMakeFiles/arrow_objlib.dir/compute/kernels/scalar_set_lookup.cc.o\r\n260312 src/arrow/CMakeFiles/arrow_objlib.dir/csv/reader.cc.o\r\n259032 src/arrow/CMakeFiles/arrow_objlib.dir/compute/kernels/scalar_cast_string.cc.o\r\n226528 src/arrow/CMakeFiles/arrow_objlib.dir/io/file.cc.o\r\n226008 src/arrow/CMakeFiles/arrow_objlib.dir/ipc/metadata_internal.cc.o\r\n210928 src/arrow/CMakeFiles/arrow_objlib.dir/compute/kernels/scalar_string.cc.o\r\n```\r\n\r\nThere are a number of issues with the largest symbols that bear closer examination\r\n\r\nhttps://gist.github.com/wesm/6a0dc08cbb26d5a3c125bdd416bb5d04\r\n\r\nfor example `Scalar::CastTo` is taking up 75K alone. All the `arrow_vendored::date` formatting stuff is weird (20K to format a date?), too. "
        },
        {
            "created_at": "2020-07-08T17:59:46.321Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8970?focusedCommentId=17153818) by Antoine Pitrou (apitrou):*\nHow did you find out that `Scalar::CastTo` is taking 75K alone? Running the `nm --print-size --size-sort` line I couldn't see it?\r\n\r\nGenerally, I think we're currently fine in terms of code size generated, given the breadth of features."
        },
        {
            "created_at": "2020-07-11T20:33:06.594Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8970?focusedCommentId=17156128) by Wes McKinney (wesm):*\nSince we've made a lot of progress since 0.17.0 I'm declaring this done for now. We can pursue further binary trimming work in new issues"
        }
    ]
}