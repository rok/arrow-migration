{
    "issue": {
        "title": "[R] [CI] DuckDB valgrind failure",
        "body": "***Note**: This issue was originally created as [ARROW-14219](https://issues.apache.org/jira/browse/ARROW-14219). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWe're getting an error now that we are testing DuckDB:\r\n\r\nhttps://dev.azure.com/ursacomputing/crossbow/_build/results?buildId=12649&view=logs&j=0da5d1d9-276d-5173-c4c4-9d4d4ed14fdb&t=d9b15392-e4ce-5e4c-0c8c-b69645229181\r\n\r\n```Java\n\r\n\r\n==3189==    by 0x31023018: duckdb_moodycamel::ProducerToken::ProducerToken<std::unique_ptr<duckdb::Task, std::default_delete<duckdb::Task> >, duckdb_moodycamel::ConcurrentQueueDefaultTraits>(duckdb_moodycamel::ConcurrentQueue<std::unique_ptr<duckdb::Task, std::default_delete<duckdb::Task> >, duckdb_moodycamel::ConcurrentQueueDefaultTraits>&) (concurrentqueue.h:3612)\r\n==3189==    by 0x3101A3A4: duckdb::QueueProducerToken::QueueProducerToken(duckdb::ConcurrentQueue&) (task_scheduler.cpp:39)\r\n==3189==    by 0x31023552: std::unique_ptr<duckdb::QueueProducerToken, std::default_delete<duckdb::QueueProducerToken> > duckdb::make_unique<duckdb::QueueProducerToken, duckdb::ConcurrentQueue&>(duckdb::ConcurrentQueue&) (helper.hpp:22)\r\n==3189==    by 0x30FFA807: duckdb::TaskScheduler::CreateProducer() (task_scheduler.cpp:110)\r\n==3189==    by 0x30FF6FC8: duckdb::Executor::Initialize(duckdb::PhysicalOperator*) (executor.cpp:34)\r\n==3189== \r\n==3189== 984 (448 direct, 536 indirect) bytes in 4 blocks are definitely lost in loss record 1,191 of 4,641\r\n==3189==    at 0x483BE63: operator new(unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)\r\n==3189==    by 0x30F288C6: std::unique_ptr<duckdb::PreparedStatement, std::default_delete<duckdb::PreparedStatement> > duckdb::make_unique<duckdb::PreparedStatement, char const*>(char const*&&) (helper.hpp:22)\r\n==3189==    by 0x30E7FDF9: duckdb::ClientContext::Prepare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (client_context.cpp:376)\r\n==3189==    by 0x30E85BC8: duckdb::Connection::Prepare(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) (connection.cpp:78)\r\n==3189==    by 0x302BF4E4: duckdb::RApi::Prepare(SEXPREC*, SEXPREC*) (statement.cpp:61)\r\n==3189==    by 0x4942217: R_doDotCall (dotcode.c:604)\r\n==3189==    by 0x494D3C9: do_dotcall (dotcode.c:1284)\r\n==3189==    by 0x498CA4E: Rf_eval (eval.c:843)\r\n==3189==    by 0x4992DB8: do_set (eval.c:2982)\r\n==3189==    by 0x498C7F5: Rf_eval (eval.c:815)\r\n==3189==    by 0x499183B: do_begin (eval.c:2530)\r\n==3189==    by 0x498C7F5: Rf_eval (eval.c:815)\r\n==3189== \r\n==3189== LEAK SUMMARY:\r\n==3189==    definitely lost: 448 bytes in 4 blocks\r\n==3189==    indirectly lost: 536 bytes in 4 blocks\r\n==3189==      possibly lost: 1,055 bytes in 3 blocks\r\n==3189==    still reachable: 334,880,826 bytes in 71,040 blocks\r\n==3189==                       of which reachable via heuristic:\r\n==3189==                         newarray           : 4,264 bytes in 1 blocks\r\n==3189==         suppressed: 0 bytes in 0 blocks\r\n==3189== Reachable blocks (those to which a pointer was found) are not shown.\r\n==3189== To see them, rerun with: --leak-check=full --show-leak-kinds=all\r\n```\r\n\r\nWe should report these to the DuckDB folks + ensure that we are not running these tests on cran.",
        "created_at": "2021-10-05T12:32:11.000Z",
        "updated_at": "2021-10-05T19:22:04.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Continuous Integration",
            "Component: R",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-10-05T19:21:56.000Z"
    },
    "comments": [
        {
            "created_at": "2021-10-05T19:21:56.278Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14219?focusedCommentId=17424658) by Jonathan Keane (jonkeane):*\nIssue resolved by pull request 11321\n<https://github.com/apache/arrow/pull/11321>"
        }
    ]
}