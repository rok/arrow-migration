{
    "issue": {
        "title": "[C++] Adding Fetch Node FromProto",
        "body": "***Note**: This issue was originally created as [ARROW-17503](https://issues.apache.org/jira/browse/ARROW-17503). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSerializing FetchNode with Substrait.\u00a0",
        "created_at": "2022-08-23T04:37:17.000Z",
        "updated_at": "2022-08-23T22:50:35.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: task"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-08-23T22:50:35.903Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17503?focusedCommentId=17583892) by Weston Pace (westonpace):*\nThis seems like it will be tricky.  The fetch node is a sink node.  The consumer currently expects sink nodes to come from the caller.  I'm not sure of a great way to work around this.\r\n\r\nBrainstorming on a currently meeting-fried brain I might think something like...\r\n\r\n \\* The FromProto for relation returns a current ordering and fetch info\r\n   \\* Note, if FromProto is called and there is already an ordering / fetch info then it should be an error as Acero can't handle this\r\n \\* The ordering / fetch info is passed on to the declaration factory in addition to the other two inputs\r\n \\* The declaration factories (at least the consuming sink one) is extended so that, if an ordering / fetch info is present, then it uses the appropriate sink node.\r\n\r\nMaybe ordering / fetch info could be part of declaration info?  CC `[~bkietz]`"
        }
    ]
}