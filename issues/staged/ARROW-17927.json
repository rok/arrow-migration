{
    "issue": {
        "title": "[C++] Sporadic crashes in arrow-dataset-scanner-test",
        "body": "***Note**: This issue was originally created as [ARROW-17927](https://issues.apache.org/jira/browse/ARROW-17927). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSeen e.g. on this PR:\r\nhttps://github.com/apache/arrow/actions/runs/3181284056/jobs/5185859816#step:11:255\r\n\r\n```Java\n\r\n\r\n[----------] 8 tests from BasicNewScannerTests/TestScannerBase\r\n[ RUN      ] BasicNewScannerTests/TestScannerBase.ScanOrdered/0fast1f128b\r\n[       OK ] BasicNewScannerTests/TestScannerBase.ScanOrdered/0fast1f128b (33 ms)\r\n[ RUN      ] BasicNewScannerTests/TestScannerBase.ScanOrdered/1fast16f128b\r\n[       OK ] BasicNewScannerTests/TestScannerBase.ScanOrdered/1fast16f128b (582 ms)\r\n[ RUN      ] BasicNewScannerTests/TestScannerBase.ScanOrdered/2slow1f128b\r\n[       OK ] BasicNewScannerTests/TestScannerBase.ScanOrdered/2slow1f128b (65 ms)\r\n[ RUN      ] BasicNewScannerTests/TestScannerBase.ScanOrdered/3slow16f128b\r\nterminate called after throwing an instance of 'std::system_error'\r\n  what():  Resource temporarily unavailable\r\nterminate called recursively\r\nterminate called recursively\r\nterminate called recursively\r\nterminate called recursively\r\nterminate called recursively\r\nterminate called recursively\r\nterminate called recursively\r\nterminate called recursively\r\nterminate called recursively\r\nterminate called recursively\r\nterminate called recursively\r\nterminate called recursively\r\nterminate called recursively\r\nterminate called recursively\r\nterminate called recursively\r\n```",
        "created_at": "2022-10-04T10:28:23.000Z",
        "updated_at": "2022-10-07T18:22:49.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Continuous Integration",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-10-07T15:58:44.000Z"
    },
    "comments": [
        {
            "created_at": "2022-10-04T13:00:14.943Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17927?focusedCommentId=17612611) by Antoine Pitrou (apitrou):*\nThis also fails on 32-bit Linux builds, which should hopefully make it easy to reproduce:\r\nhttps://github.com/ursacomputing/crossbow/actions/runs/3178547651/jobs/5180154274#step:5:2694\r\n"
        },
        {
            "created_at": "2022-10-06T04:48:59.850Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17927?focusedCommentId=17613299) by Percy Camilo Trive\u00f1o Aucahuasi (aucahuasi):*\nI built the latest arrow version on ubuntu 18 for 32 bits architectures (I tried with i386 and armv7l), but could not reproduce the issue.\r\n\r\nI used docker buildx on a Macbook Pro M1.\r\n\r\nThese were the cmake args:\r\n```java\n\r\ncmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=/someprefix -DCMAKE_INSTALL_LIBDIR=lib -DARROW_CUDA=OFF -DARROW_NO_DEPRECATED_API=OFF -DARROW_BUILD_STATIC=OFF -DARROW_INSTALL_NAME_RPATH=ON -DARROW_USE_LD_GOLD=ON -DARROW_USE_CCACHE=ON -DARROW_USE_ASAN=OFF -DARROW_USE_TSAN=OFF -DARROW_USE_UBSAN=OFF -DARROW_BUILD_EXAMPLES=ON -DARROW_BUILD_TESTS=ON -DARROW_TEST_MEMCHECK=OFF -DARROW_ENABLE_TIMING_TESTS=ON -DARROW_BUILD_INTEGRATION=ON -DARROW_BUILD_BENCHMARKS=OFF -DARROW_BUILD_BENCHMARKS_REFERENCE=OFF -DARROW_BUILD_OPENMP_BENCHMARKS=OFF -DARROW_BUILD_DETAILED_BENCHMARKS=OFF -DARROW_TEST_LINKAGE=shared -DARROW_FUZZING=OFF -DARROW_LARGE_MEMORY_TESTS=OFF -DARROW_PARQUET=ON -DPARQUET_REQUIRE_ENCRYPTION=ON -DPARQUET_BUILD_EXAMPLES=ON -DPARQUET_BUILD_EXECUTABLES=OFF -DARROW_ORC=OFF -DARROW_PYTHON=ON -DARROW_COMPUTE=ON -DARROW_CSV=ON -DARROW_DATASET=ON -DARROW_EXTRA_ERROR_CONTEXT=ON -DARROW_FILESYSTEM=ON -DARROW_JEMALLOC=OFF -DARROW_JEMALLOC_USE_SHARED=ON -DARROW_JSON=ON -DARROW_S3=OFF -DARROW_HDFS=OFF -DARROW_GCS=OFF -DARROW_FLIGHT=OFF -DARROW_GANDIVA=OFF -DARROW_PLASMA=OFF -DARROW_SUBSTRAIT=OFF -DARROW_BUILD_UTILITIES=OFF -DARROW_EXTRA_ERROR_CONTEXT=ON -DARROW_USE_CCACHE=ON -DCMAKE_UNITY_BUILD=OFF -DARROW_USE_PRECOMPILED_HEADERS=OFF -DBUILD_WARNING_LEVEL=PRODUCTION -DARROW_WITH_OPENTELEMETRY=OFF -DARROW_WITH_BZ2=ON -DARROW_WITH_ZLIB=ON -DARROW_WITH_ZSTD=ON -DARROW_WITH_LZ4=ON -DARROW_WITH_THRIFT=OFF -DARROW_WITH_SNAPPY=ON -DARROW_WITH_BROTLI=ON -DGTest_SOURCE=BUNDLED ..\n```\r\nBoth cases printed at the end:\r\n\r\n[----------] Global test environment tear-down\r\n[==========] 123 tests from 9 test suites ran. (196893 ms total)\r\n[ \u00a0PASSED \u00a0] 123 tests.\r\n\r\nTomorrow I'll try to explore this issue on a windows machine."
        },
        {
            "created_at": "2022-10-06T08:33:28.347Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17927?focusedCommentId=17613367) by Antoine Pitrou (apitrou):*\nI was able to easily reproduce it using Docker.\r\n\r\nFirst run bash inside the container:\r\n```Java\n\r\nARCH=i386 DEBIAN=11 archery docker run -e ARROW_S3=OFF -e ARROW_GANDIVA=OFF debian-cpp bash\r\n```\r\n\r\nThen under bash:\r\n```Java\n\r\n# set +e\r\n# /arrow/ci/scripts/cpp_build.sh /arrow /build\r\n# taskset -c 0,2 /build/cpp/debug/arrow-dataset-scanner-test\r\n```\r\n"
        },
        {
            "created_at": "2022-10-06T08:37:39.444Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17927?focusedCommentId=17613369) by Antoine Pitrou (apitrou):*\nI'll note that more than 400 threads are started in that test. That doesn't sound right at all.\r\nhttps://gist.github.com/pitrou/6c43e11724179f39d531bfaeb836524d"
        },
        {
            "created_at": "2022-10-06T08:42:21.640Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17927?focusedCommentId=17613370) by Antoine Pitrou (apitrou):*\nThe problem seems to be that `SleepAsync` and `SleepABitAsync` detach the underlying thread, meaning timer threads can accumulate depending on scheduling specifics."
        },
        {
            "created_at": "2022-10-06T11:03:57.498Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17927?focusedCommentId=17613446) by Ra\u00fal Cumplido (raulcd):*\nThis has also failed on a couple of nightlies:\r\n \\* [test-debian-10-cpp-i386](https://github.com/ursacomputing/crossbow/actions/runs/3193683538/jobs/5212495287)\r\n \\* [test-debian-11-cpp-i386](https://github.com/ursacomputing/crossbow/actions/runs/3193719477/jobs/5212564749)"
        },
        {
            "created_at": "2022-10-06T15:48:29.335Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17927?focusedCommentId=17613635) by Weston Pace (westonpace):*\n> I'll note that more than 400 threads are started in that test. That doesn't sound right at all.\n> https://gist.github.com/pitrou/6c43e11724179f39d531bfaeb836524d\r\n\r\nThat is more or less intentional.  The goal of the test is to have every batch delivered by its own thread for maximum chaos.  The test itself has 16 fragments, each with 128 batches so I think 2048 threads will be created during the lifetime of the test."
        },
        {
            "created_at": "2022-10-06T15:51:02.748Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17927?focusedCommentId=17613657) by Antoine Pitrou (apitrou):*\nRight, but I meant 400 threads running simultaneously (even when pinning on 2 CPU cores)."
        },
        {
            "created_at": "2022-10-07T15:58:44.558Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17927?focusedCommentId=17614133) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 14339\n<https://github.com/apache/arrow/pull/14339>"
        },
        {
            "created_at": "2022-10-07T17:14:32.033Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17927?focusedCommentId=17614168) by Percy Camilo Trive\u00f1o Aucahuasi (aucahuasi):*\nJust in case there are similar issues in the future, I'll copy here some additional information about this issue.\r\n\r\nYesterday I managed to reproduce this issue using Windows (msys2-mingw32) and I got this stacktrace:\r\n```java\n\r\n1 \u00a0 ?? \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0xfeeefeee\u00a0\r\n2 \u00a0 std::__uniq_ptr_impl<void, void ( *)(void *)>::reset \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 unique_ptr.h \u00a0203 0x15b7e36 \u00a0\r\n3 \u00a0 std::__uniq_ptr_impl<void, void ( *)(void *)>::operator= \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 unique_ptr.h \u00a0183 0x15b7f1f \u00a0\r\n4 \u00a0 std::__uniq_ptr_data<void, void ( *)(void *), true, true>::operator= \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 unique_ptr.h \u00a0235 0x15acebd \u00a0\r\n5 \u00a0 std::unique_ptr<void, void ( *)(void *)>::operator= \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0unique_ptr.h \u00a0406 0x14d884d \u00a0\r\n6 \u00a0 arrow::Future<arrow::internal::Empty>::SetResult \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 future.h \u00a0 \u00a0 \u00a0650 0x113578a \u00a0\r\n7 \u00a0 arrow::Future<arrow::internal::Empty>::DoMarkFinished \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0future.h \u00a0 \u00a0 \u00a0655 0x1134713 \u00a0\r\n8 \u00a0 arrow::Future<arrow::internal::Empty>::MarkFinished<arrow::internal::Empty, void> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0future.h \u00a0 \u00a0 \u00a0409 0x1134699 \u00a0\r\n9 \u00a0 operator() \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 gtest_util.cc 783 0x332fb6 \u00a0\u00a0\r\n10 \u00a0std::__invoke_impl<void, arrow::SleepABitAsync()::<lambda()>>(std::__invoke_other, struct {...} &&) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0invoke.h \u00a0 \u00a0 \u00a061 \u00a00x338f42 \u00a0\u00a0\r\n11 \u00a0std::__invoke<arrow::SleepABitAsync()::<lambda()>>(struct {...} &&) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0invoke.h \u00a0 \u00a0 \u00a096 \u00a00x338eca \u00a0\u00a0\r\n12 \u00a0std::thread::_Invoker<std::tuple<arrow::SleepABitAsync()::<lambda()>>>::_M_invoke<0>(std::_Index_tuple<0>) \u00a0 \u00a0 std_thread.h \u00a0252 0x338e5a \u00a0\u00a0\r\n13 \u00a0std::thread::_Invoker<std::tuple<arrow::SleepABitAsync()::<lambda()>>>::operator()(void) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 std_thread.h \u00a0259 0x338e14 \u00a0\u00a0\r\n14 \u00a0std::thread::_State_impl<std::thread::_Invoker<std::tuple<arrow::SleepABitAsync()::<lambda()>>>>::_M_run(void) std_thread.h \u00a0210 0x338de0 \u00a0\u00a0\r\n15 \u00a0?? \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x6b6bfee0\u00a0\r\n16 \u00a0?? \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x6b8d4e7d\u00a0\r\n17 \u00a0msvcrt!_beginthreadex \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a00x75716cff\u00a0\r\n18 \u00a0msvcrt!_endthreadex \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a00x75716dc1\u00a0\r\n19 \u00a0KERNEL32!BaseThreadInitThunk \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 0x753dfa29\u00a0\r\n20 \u00a0ntdll!RtlGetAppContainerNamedObjectPath \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a00x77307b5e\u00a0\r\n... <More> \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\n```\r\nIt seems there was a segmentation fault with the status that we were trying to use for marking the future as finished; sometimes I got this message as well:\r\n```java\n\r\nRunning main() from C:/M/mingw-w64-gtest/src/googletest-release-1.12.1/googletest/src/gtest_main.cc\r\nNote: Google Test filter = BasicNewScannerTests/TestScannerBase.ScanOrdered/3slow16f128b*\r\n[==========] Running 1 test from 1 test suite.\r\n[----------] Global test environment set-up.\r\n[----------] 1 test from BasicNewScannerTests/TestScannerBase\r\n[ RUN \u00a0 \u00a0 \u00a0] BasicNewScannerTests/TestScannerBase.ScanOrdered/3slow16f128b\r\nC:/arrow/cpp/src/arrow/util/future.ccC:/arrow/cpp/src/arrow/util/future.cc:125: \u00a0Check failed: !IsFutureFinished(state_) :125: \u00a0Check failed: !IsFutureFinished(state_) Future already marked finished\r\nFPress <RETURN> to close this window...\n```\r\nOr this other one too:\r\n```java\n\r\nRunning main() from C:/M/mingw-w64-gtest/src/googletest-release-1.12.1/googletest/src/gtest_main.cc\r\nNote: Google Test filter = BasicNewScannerTests/TestScannerBase.ScanOrdered/3slow16f128b*\r\n[==========] Running 1 test from 1 test suite.\r\n[----------] Global test environment set-up.\r\n[----------] 1 test from BasicNewScannerTests/TestScannerBase\r\n[ RUN \u00a0 \u00a0 \u00a0] BasicNewScannerTests/TestScannerBase.ScanOrdered/3slow16f128b\r\nC:/arrow/cpp/src/arrow/dataset/scanner_test.cc:538: Failure\r\nValue of: _fut138.Wait(::arrow::kDefaultAssertFinishesWaitSeconds)\r\n\u00a0 Actual: false\r\nExpected: true\r\nC:/arrow/cpp/src/arrow/dataset/scanner_test.cc:538: Failure\r\nFailed\r\nFuture did not finish in a timely fashion\n```"
        },
        {
            "created_at": "2022-10-07T17:16:33.168Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17927?focusedCommentId=17614169) by Antoine Pitrou (apitrou):*\n`[~aucahuasi]` This seems to be different issues, can you check if you can still reproduce with git master?"
        },
        {
            "created_at": "2022-10-07T17:27:47.529Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17927?focusedCommentId=17614171) by Percy Camilo Trive\u00f1o Aucahuasi (aucahuasi):*\nDefinitely, I'll try with the recent changes and will send the outputs here, btw I'm using these cmake args in this windows machine:\r\n```java\n\r\ncmake -G \"MSYS Makefiles\" -DARROW_BUILD_TESTS=ON -DARROW_BUILD_SHARED=OFF -DARROW_BUILD_STATIC=ON -DARROW_DATASET=ON -DARROW_COMPUTE=ON -DCMAKE_BUILD_TYPE=\"Debug\" -DBUILD_WARNING_LEVEL=\"PRODUCTION\" -DCMAKE_CXX_STANDARD=17 ..\n```"
        },
        {
            "created_at": "2022-10-07T17:55:54.315Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17927?focusedCommentId=17614190) by Percy Camilo Trive\u00f1o Aucahuasi (aucahuasi):*\nUsing the recent changes (including the PR that solved this issue) I cannot reproduce the issue anymore; this is the output I'm getting:\r\n```java\n\r\nRunning main() from C:/M/mingw-w64-gtest/src/googletest-release-1.12.1/googletest/src/gtest_main.cc\r\nNote: Google Test filter = BasicNewScannerTests/TestScannerBase.ScanOrdered/3slow16f128b*\r\n[==========] Running 1 test from 1 test suite.\r\n[----------] Global test environment set-up.\r\n[----------] 1 test from BasicNewScannerTests/TestScannerBase\r\n[ RUN \u00a0 \u00a0 \u00a0] BasicNewScannerTests/TestScannerBase.ScanOrdered/3slow16f128b\r\n[ \u00a0 \u00a0 \u00a0 OK ] BasicNewScannerTests/TestScannerBase.ScanOrdered/3slow16f128b (3085 ms)\r\n[----------] 1 test from BasicNewScannerTests/TestScannerBase (3096 ms total)\r\n[----------] Global test environment tear-down\r\n[==========] 1 test from 1 test suite ran. (3112 ms total)\r\n[ \u00a0PASSED \u00a0] 1 test.\r\nPress <RETURN> to close this window...\r\n```\r\nAlso, when I run all the tests (without --gtest_filter=\"BasicNewScannerTests/TestScannerBase.ScanOrdered/3slow16f128b\\*\" ) I cannot reproduce the issue either.\r\n\r\nSo it seems that the stacktrace and outputs I sent in the previous comment were related to the original issue in this ticket."
        },
        {
            "created_at": "2022-10-07T18:04:31.360Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17927?focusedCommentId=17614195) by Antoine Pitrou (apitrou):*\nI see, thanks."
        }
    ]
}