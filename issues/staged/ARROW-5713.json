{
    "issue": {
        "title": "[Python] fancy indexing on pa.array",
        "body": "***Note**: This issue was originally created as [ARROW-5713](https://issues.apache.org/jira/browse/ARROW-5713). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIn numpy one can do :\r\n```java\n\r\nIn [2]: import numpy as np\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \r\nIn [3]: a = np.array(['a', 'bb', 'ccc', 'dddd'], dtype=\"O\") \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \r\nIn [4]: indices = np.array([0, -1, 2, 2, 0, 3]) \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \r\nIn [5]: a[indices]\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \r\nOut[5]: array(['a', 'dddd', 'ccc', 'ccc', 'a', 'dddd'], dtype=object)\r\n```\r\nIt would be nice to have a similar feature in pyarrow.\r\n\r\nCurrently, pa.arrow __getitem__ supports only a slice or a single element as an argument.\r\n\r\nOf course,\u00a0using\u00a0that\u00a0we've some\u00a0workarounds, like below\r\n```java\n\r\nIn [6]: import pyarrow as pa\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \r\nIn [7]: a = pa.array(['a', 'bb', 'ccc', 'dddd'])\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \r\nIn [8]: pa.array(a.to_pandas()[indices])\u00a0 # if len(indices) is high \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \r\nOut[8]:\r\n\r\n<pyarrow.lib.StringArray object at 0x91bd845e8>\r\n\r\n[\r\n\r\n\u00a0 \"a\",\r\n\r\n\u00a0 \"dddd\",\r\n\r\n\u00a0 \"ccc\",\r\n\r\n\u00a0 \"ccc\",\r\n\r\n\u00a0 \"a\",\r\n\r\n\u00a0 \"dddd\"\r\n\r\n]\r\n\r\nIn [9]: pa.array([a[i].as_py() for i in indices])\u00a0 # if len(indices) is low\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \r\nOut[9]:\r\n\r\n<pyarrow.lib.StringArray object at 0x91bc14868>\r\n\r\n[\r\n\r\n\u00a0 \"a\",\r\n\r\n\u00a0 \"dddd\",\r\n\r\n\u00a0 \"ccc\",\r\n\r\n\u00a0 \"ccc\",\r\n\r\n\u00a0 \"a\",\r\n\r\n\u00a0 \"dddd\"\r\n\r\n]\r\n```\r\nboth are not memory&cpu efficient.\r\n\r\n\u00a0",
        "created_at": "2019-06-24T18:46:28.000Z",
        "updated_at": "2019-08-20T10:39:33.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-08-20T10:39:33.000Z"
    },
    "comments": [
        {
            "created_at": "2019-06-24T23:15:50.212Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5713?focusedCommentId=16871872) by Wes McKinney (wesm):*\nWe intend to support this with the `Array.take` function. I don't think I want to overload `__getitem__` "
        },
        {
            "created_at": "2019-08-16T17:49:47.293Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5713?focusedCommentId=16909283) by Artem KOZHEVNIKOV (ArtemK):*\nit looks like `Array.take` function is already available in version 0.14.2 ! `Table.take` would be nice as well."
        },
        {
            "created_at": "2019-08-19T15:35:34.248Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5713?focusedCommentId=16910482) by Wes McKinney (wesm):*\nIt's a little bit easier said than done because Table can have chunked arrays. "
        },
        {
            "created_at": "2019-08-20T10:38:41.131Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5713?focusedCommentId=16911204) by Joris Van den Bossche (jorisvandenbossche):*\nGoing to close this issue, as the original post was about Array.take, which is now implemented. And for a take on ChunkedArray / Table, we have ARROW-5454"
        }
    ]
}