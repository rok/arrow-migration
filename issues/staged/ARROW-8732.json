{
    "issue": {
        "title": "[C++] Let Futures support cancellation",
        "body": "***Note**: This issue was originally created as [ARROW-8732](https://issues.apache.org/jira/browse/ARROW-8732). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThere should be a way for consumers of Futures to notify that they are not interested in the task at hand anymore. For some kinds of tasks this may allow cancelling the task in-flight (e.g. an IO task, or a task consisting of multiple steps).",
        "created_at": "2020-05-07T14:56:01.000Z",
        "updated_at": "2021-03-22T16:24:25.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-03-09T16:07:48.000Z"
    },
    "comments": [
        {
            "created_at": "2020-05-07T14:56:15.083Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8732?focusedCommentId=17101745) by Antoine Pitrou (apitrou):*\ncc `[~fsaintjacques]` for opinions."
        },
        {
            "created_at": "2020-05-07T15:07:59.246Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8732?focusedCommentId=17101759) by Antoine Pitrou (apitrou):*\nPotentially interesting read:\r\nhttps://link.springer.com/chapter/10.1007/978-1-4842-4398-5_15\r\nThis paper looks interesting as well, but it's not in free access:\r\nhttps://www.researchgate.net/publication/290103663_Composable_parallelism_foundations_in_the_IntelR_threading_building_blocks_task_scheduler"
        },
        {
            "created_at": "2020-05-12T20:30:59.032Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8732?focusedCommentId=17105718) by Antoine Pitrou (apitrou):*\nC++20 stop_token:\r\nhttp://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0660r9.pdf"
        },
        {
            "created_at": "2020-05-12T20:35:55.032Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8732?focusedCommentId=17105721) by Wes McKinney (wesm):*\nProbably the in-process thread will have to be abandoned. At least then subsequent tasks in the queue are unblocked from executing (even if it leads to oversubscription temporarily)"
        },
        {
            "created_at": "2020-05-14T15:22:18.805Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8732?focusedCommentId=17107398) by Antoine Pitrou (apitrou):*\nMicrosoft PPL cancellation_token:\r\nhttps://docs.microsoft.com/en-us/cpp/parallel/concrt/cancellation-in-the-ppl?view=vs-2019\r\n"
        },
        {
            "created_at": "2020-11-05T20:39:26.557Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8732?focusedCommentId=17226979) by Ben Kietzman (bkietz):*\nI'm not sure I see how a `StopToken` is distinct from a `Future<void>` which the main thread can optionally MarkFinished and which workers can poll for completion (completion of the future indicates workers have been cancelled)."
        },
        {
            "created_at": "2020-11-05T20:45:20.561Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8732?focusedCommentId=17226980) by Antoine Pitrou (apitrou):*\nWell, it's a distinct concept at the very least. And futures are more complex internally because you can wait on several of them at once.\r\n(also our futures currently don't have callbacks)"
        },
        {
            "created_at": "2021-01-20T17:35:53.263Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8732?focusedCommentId=17268725) by Weston Pace (westonpace):*\nIn C# they have cancellation tokens separate from futures (tasks in C#).\u00a0 The logic is that cancellation tokens could be used in a wide variety of situations.\u00a0 Perhaps coroutines, perhaps synchronous blocking code, perhaps async/await where the Tasks are somewhat hidden.\u00a0 By creating a separate cancellation token they can maintain a consistent capability regardless of what threading utilities are in use.\r\n\r\nFrom an Arrow perspective, even if we are only using futures, we might not want to expose the futures API to the customer.\u00a0 I think we probably will want to (it's would be beneficial to customers also writing asynchronous code) but cancellation tokens would allow us to choose not to.\r\n\r\nAlso, a lesser concern, but the user can create one cancellation token and use it across several arrow calls.\u00a0 So if some end-user action triggers a number of Arrow operations, some in parallel and some in series, the application doesn't have to keep track of all those futures.\r\n\r\n\u00a0"
        },
        {
            "created_at": "2021-03-09T16:07:48.946Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8732?focusedCommentId=17298147) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 9528\n<https://github.com/apache/arrow/pull/9528>"
        }
    ]
}