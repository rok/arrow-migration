{
    "issue": {
        "title": "[Rust][DataFusion] Add join",
        "body": "***Note**: This issue was originally created as [ARROW-9423](https://issues.apache.org/jira/browse/ARROW-9423). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nA major operation in analytics is the join. This issue concerns adding the join operation.\r\n\r\nGiven the complexity of this task, I propose starting with a sub-set of all joins, an hash join whose \"ON\" can only be a set of column names (i.e. no expressions).\r\n\r\nSuggestion for DOD:\r\n\r\n- physical plan to execute the join\n- logical plan with the join\n- SQL planner with the join\n- tests on each of the above\n  \n  One idea to perform this join in parallel is to, for each RecordBatch in the left, perform the join with a record on the right. Another way is to first perform a hash by key and sort on both sides, and then perform a \"SortMergeJoin\" on each of the partitions. There may be better ways to achieve this, though.",
        "created_at": "2020-07-12T18:17:59.000Z",
        "updated_at": "2020-12-21T22:25:01.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust - DataFusion",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-12-21T22:25:01.000Z"
    },
    "comments": [
        {
            "created_at": "2020-07-13T14:10:53.124Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9423?focusedCommentId=17156728) by Andy Grove (andygrove):*\nHi Jorge. I am also wanting to start on join support. I was thinking that the easiest path would be to support hash inner joins first, where one side (the build side) is loaded into memory (with a hashmap from join key to row number) and then the other side (probe side) is streamed and performs lookups against the hash map to find the row to join to. What do you think?\r\n\r\n\u00a0\r\n\r\nhttps://en.wikipedia.org/wiki/Hash_join"
        },
        {
            "created_at": "2020-07-13T14:59:31.113Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9423?focusedCommentId=17156770) by Jorge Leit\u00e3o (jorgecarleitao):*\nHi Andy. I fully agree with that.\r\n\r\n\r\n"
        },
        {
            "created_at": "2020-07-25T07:05:08.652Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9423?focusedCommentId=17164792) by Jorge Leit\u00e3o (jorgecarleitao):*\n`[~andygrove]`, let me know if ideas on ARROW-9423 was what you were thinking about. I know it is not parallelized - I did it on purpose since I was waiting for the sync to land before implementing parallelism on these plans.\r\n"
        },
        {
            "created_at": "2020-08-20T15:31:21.964Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9423?focusedCommentId=17181278) by Andy Grove (andygrove):*\nI can take this one. I would like to implement a hash inner join first, where one side of the join is loaded into the memory and the other side is streamed, performing one hash lookup per row on the streaming side.\r\n\r\nI want to address the refactor of the physical plan and introduce the physical optimizer first though, since that will be a bit disruptive."
        },
        {
            "created_at": "2020-09-26T16:55:44.679Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9423?focusedCommentId=17202629) by Andy Grove (andygrove):*\nI am still planning on implementing this, but would like to get the scheduler / threading model resolved first."
        }
    ]
}