{
    "issue": {
        "title": "[Python] Improve consistency of explicit C++ types in PyArrow files",
        "body": "***Note**: This issue was originally created as [ARROW-13327](https://issues.apache.org/jira/browse/ARROW-13327). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nCython files (.pyx) in PyArrow make inconsistent use of explicit C++ typing. Some methods/functions use explicit types for their parameters and others do not.\r\n\r\nAlso, definition files (.pxd) are not consistent in the use of the reference operator (&) and may not be up-to-date w.r.t. to C++ API.",
        "created_at": "2021-07-13T16:46:54.000Z",
        "updated_at": "2021-09-22T13:43:37.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2021-09-22T13:43:10.000Z"
    },
    "comments": [
        {
            "created_at": "2021-07-13T19:48:58.357Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13327?focusedCommentId=17380135) by Eduardo Ponce (edponce):*\nActually, the description files (.pxd) contain the explicit types of the function options' parameters (e.g., [SliceOptions in libarrow.pxd](https://github.com/apache/arrow/blob/master/python/pyarrow/includes/libarrow.pxd#L1849-L1854)), so I do not think it is necessary to add explicit types to the implementation files (.pyx) as currently done for some cases (e.g., [SliceOptions in _compute.pyx](https://github.com/apache/arrow/blob/master/python/pyarrow/_compute.pyx#L795-L803))."
        },
        {
            "created_at": "2021-07-14T10:44:19.180Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13327?focusedCommentId=17380495) by Eduardo Ponce (edponce):*\nIt seems that Cython considers pass-by-reference as default for **object** types. For example, **shared_ptr[T]** as **shared_ptr[T]&**. The ampersand seems to not be required. Nevertheless, it does supports and parses the ampersand so it is best to be consistent with C++ parameter types."
        },
        {
            "created_at": "2021-09-22T13:43:10.749Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13327?focusedCommentId=17418604) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 11147\n<https://github.com/apache/arrow/pull/11147>"
        }
    ]
}