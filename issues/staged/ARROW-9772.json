{
    "issue": {
        "title": "[Python] Optionally allow for to_pandas to return writeable pandas objects",
        "body": "***Note**: This issue was originally created as [ARROW-9772](https://issues.apache.org/jira/browse/ARROW-9772). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIn cuDF, I'd like to leverage pyarrow to facilitate the conversion from cuDF series and dataframe objects into the equivalent pandas objects. Concretely I'd like something like this to work:\r\n\r\n```python\n\r\npandas_object = cudf_object.to_arrow().to_pandas()\r\n```\r\n\r\nThis allows us to stay consistent with the way the rest of the pyarrow ecosystem handles nulls, dtype conversions and the like without having to reinvent the wheel. However I noticed that in some zero copy scenarios, pyarrow doesn't seem to fully release the underlying buffers when converting `to_pandas()`. The resulting objects are immutable and if one tries to mutate the data they will encounter\u00a0`ValueError: assignment destination is read-only`.\r\n\r\nThis creates a slightly strange situation where a user might encounter issues that subtly stem from the fact that arrow was used to construct the offending pandas object. It would be nice to be able to toggle this behavior using a kwarg or something similar. I suspect this could come up in other situations where libraries want to convert back and forth between equivalent python objects through arrow and expect the final object they get to behave as if it were constructed via other means.\u00a0",
        "created_at": "2020-08-17T16:47:30.000Z",
        "updated_at": "2020-08-18T08:56:01.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": []
}