{
    "issue": {
        "title": "[C++] Refactor memory allocation from InvertKernel",
        "body": "***Note**: This issue was originally created as [ARROW-4121](https://issues.apache.org/jira/browse/ARROW-4121). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nsubtask for overall fix to remove memory allocation.\u00a0 Do this first to make sure I understand the problem and acceptable solution (seems like a simple API change).",
        "created_at": "2018-12-27T02:13:17.000Z",
        "updated_at": "2019-06-27T06:48:51.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: task"
        ],
        "closed": true,
        "closed_at": "2019-02-03T05:50:59.000Z"
    },
    "comments": [
        {
            "created_at": "2018-12-27T05:12:16.021Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4121?focusedCommentId=16729330) by Wes McKinney (wesm):*\nTo be clear, we need to have a usable code path for both the case of \r\n\r\n- allocate memory and invoke kernel\n- invoke kernel on pre-allocated memory\n  \n  Right now we only have the first option. \n  \n  There's some code that partly handles this issue in kernels/cast.cc, but it could also benefit from some refactoring (to make the \"allocate output space\" problem more generic / reusable for other kernel implementations)"
        },
        {
            "created_at": "2018-12-27T17:18:47.961Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4121?focusedCommentId=16729743) by Micah Kornfield (emkornfield@gmail.com):*\n`[~wesmckinn]` Yes,\u00a0sorry misleading title. I changed it.\u00a0 I'm still ramping up on the code base, so\u00a0I'm not sure on the desired outcome here.\r\n\r\nLooking quickly at the the code in cast.cc\u00a0(https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/kernels/cast.cc#L1103[)](https://github.com/apache/arrow/blob/master/cpp/src/arrow/compute/kernels/cast.cc#L710))\u00a0 seems to be assuming that if the array buffers are already allocated those are fine to use.\u00a0 \u00a0\r\n\r\nIt seems there are a\u00a0two things that could be done:\r\n1. Replicate this pattern to the\u00a0boolean kernels\u00a0and document this contract.\n1. Change/Add\u00a0API entry points to make the choice on allocation more explicit and more generic.\n   \n   My intention was to move forward with option 1, and hopefully factor out some of the code from\u00a0AllocateIfNotPreallocated to a utility method.\u00a0\u00a0If option 2 is desired, I would rather do a little bit more work with Kernels before I trying to propose an appropriate API.\n   \n   \u00a0"
        },
        {
            "created_at": "2018-12-27T19:56:29.788Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4121?focusedCommentId=16729831) by Wes McKinney (wesm):*\nMy preference would be to not allocate memory at all in the implementation of `Call` for fixed-width / primitive outputs. This is discussed as it relates to `Cast` in ARROW-1896. \r\n\r\nIf the output is binary or nested then things have to be handled a bit differently"
        },
        {
            "created_at": "2019-02-03T05:50:50.270Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4121?focusedCommentId=16759300) by Micah Kornfield (emkornfield@gmail.com):*\nI attached the wrong Jira number to the PR for this (https://github.com/apache/arrow/pull/3287)"
        }
    ]
}