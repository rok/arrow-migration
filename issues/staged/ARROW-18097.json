{
    "issue": {
        "title": "[C++] Add a \"list_contains\" kernel",
        "body": "***Note**: This issue was originally created as [ARROW-18097](https://issues.apache.org/jira/browse/ARROW-18097). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAssume you have a list array:\r\n\r\n```Java\n\r\narr = pa.array([[\"a\", \"b\"], [\"a\", \"c\"], [\"b\", \"c\", \"d\"]])\r\n```\r\n\r\nAnd you want to know for each list if it contains a certain value (of the same type as the list's values). A \"list_contains\" function (or other name) would be useful for that:\r\n\r\n```Java\n\r\npc.list_contains(arr, \"a\")\r\n# -> True, True False\r\n```\r\n\r\nThe current workaround that I found was flattening, checking equality, and then reducing again with groupby, but this is quite tedious:\r\n\r\n```Java\n\r\n>>> temp = pa.table({'index': pc.list_parent_indices(arr), 'contains_value': pc.equal(pc.list_flatten(arr), \"a\")})\r\n>>> temp.group_by('index').aggregate([('contains_value', 'any')])['contains_value_any'].chunk(0)\r\n<pyarrow.lib.BooleanArray object at 0x7ffaf3f8de20>\r\n[\r\n  true,\r\n  true,\r\n  false\r\n]\r\n```\r\n\r\nBut this also only works if there are no empty or missing list values.",
        "created_at": "2022-10-19T08:18:33.000Z",
        "updated_at": "2022-11-03T15:18:32.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-10-19T16:11:41.591Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18097?focusedCommentId=17620437) by Antoine Pitrou (apitrou):*\nThen there probably should be a \"list_index\" function as well, similar to \"is_in\" vs. \"index_in\" ?\r\n```Java\n\r\npc.list_index(arr, \"b\")\r\n# -> 1, None, 0\r\n```\r\n"
        },
        {
            "created_at": "2022-11-02T21:54:14.183Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18097?focusedCommentId=17627997) by Jacek Pliszka (jacek.pliszka):*\nMaybe no need for new name but is_in can be reused:\r\n```python\n\r\npc.is_in(\"a\", arr)\r\n```"
        },
        {
            "created_at": "2022-11-03T15:18:32.847Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-18097?focusedCommentId=17628378) by Joris Van den Bossche (jorisvandenbossche):*\n[~jacek.pliszka] That would give a different signature; \"is_in\" is currently a scalar kernel that returns a result of the same shape as the first input argument. So that generally wouldn't work here (for lists, it would the second argument that we want to check element-by-element in your example). \r\nWhile it might be technically possible in C++ to have kernels with different input types, I am not sure it is a good idea to reuse the same name for this.\r\n\r\n"
        }
    ]
}