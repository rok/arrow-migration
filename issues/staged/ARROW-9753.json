{
    "issue": {
        "title": "[Rust] [DataFusion] Remove the use of Mutex in ExecutionPlan trait",
        "body": "***Note**: This issue was originally created as [ARROW-9753](https://issues.apache.org/jira/browse/ARROW-9753). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe ExecutionPlan trait should not return Arc<Mutex<RecordBatchIterator>> but just Arc<RecordBatchIterator> since most operators do not need to be mutable. Those that do can use interior mutability.",
        "created_at": "2020-08-15T13:33:14.000Z",
        "updated_at": "2020-10-03T16:51:37.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Rust",
            "Component: Rust - DataFusion",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-10-03T16:51:35.000Z"
    },
    "comments": [
        {
            "created_at": "2020-08-31T11:27:34.971Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9753?focusedCommentId=17187657) by Andrew Lamb (alamb):*\nThe Partition trait has been renamed / combined to be called ExecutionPlan, so I updated this ticket's description to reflect this"
        },
        {
            "created_at": "2020-09-25T19:41:52.919Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9753?focusedCommentId=17202396) by Jorge Leit\u00e3o (jorgecarleitao):*\nIsn't it possible to replace\u00a0`Arc<Mutex<dyn RecordBatchReader>>` by `Box<dyn RecordBatchReader>`?\u00a0 Maybe this is not a good idea for other reasons (e.g. we can't share\u00a0 on batches), but reading the current code, the creation of RecordBatchIterator is always done inside the thread, and what needs to be Arc + Send+Sync is the ExecutionPlan itself, that crosses thread spawn boundaries (see e.g. MergeExec::execute).\r\n\r\nI did a quick POC locally, and I was able to compile and have the tests run with the change above.\r\n\r\nTo run threads on an iterator, I think that we need scoped threads (a-la crossbeam) or some mechanism to create the threads inside the iteration (which IMO needs a scheduler).\r\n\r\nThis SO answer is quite good in this respect: <https://stackoverflow.com/a/45327907/931303>"
        },
        {
            "created_at": "2020-09-25T20:27:00.611Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9753?focusedCommentId=17202414) by Andrew Lamb (alamb):*\nI think `[~jorgecarleitao]`'s idea makes sense - there is a single  thread that gets the iterator (the one that calls `execute` on the partition) \u2013 if that consumer is going to process the input in parallel, I would expect the parallelism to me managed by that consumer"
        },
        {
            "created_at": "2020-09-30T04:39:46.624Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9753?focusedCommentId=17204452) by Andy Grove (andygrove):*\n`[~jorgecarleitao]` Please feel free to take this one if you are interested. If not, I may pick it up for the next release."
        },
        {
            "created_at": "2020-10-03T16:51:35.513Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9753?focusedCommentId=17206790) by Andy Grove (andygrove):*\nIssue resolved by pull request 8307\n<https://github.com/apache/arrow/pull/8307>"
        }
    ]
}