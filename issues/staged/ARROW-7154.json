{
    "issue": {
        "title": "[C++] Build error when building tests but not with snappy",
        "body": "***Note**: This issue was originally created as [ARROW-7154](https://issues.apache.org/jira/browse/ARROW-7154). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSince the docker-compose PR landed, I am having build errors like:\r\n```java\n\r\n[361/376] Linking CXX executable debug/arrow-python-test\r\nFAILED: debug/arrow-python-test\r\n: && /home/joris/miniconda3/envs/arrow-dev/bin/ccache /home/joris/miniconda3/envs/arrow-dev/bin/x86_64-conda_cos6-linux-gnu-c++  -Wno-noexcept-type -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -fdiagnostics-color=always -ggdb -O0  -Wall -Wno-conversion -Wno-sign-conversion -Wno-unused-variable -Werror -msse4.2  -g  -Wl,-O2 -Wl,--sort-common -Wl,--as-needed -Wl,-z,relro -Wl,-z,now -Wl,--disable-new-dtags -Wl,--gc-sections   -rdynamic src/arrow/python/CMakeFiles/arrow-python-test.dir/python_test.cc.o  -o debug/arrow-python-test  -Wl,-rpath,/home/joris/scipy/repos/arrow/cpp/build/debug:/home/joris/miniconda3/envs/arrow-dev/lib debug/libarrow_python_test_main.a debug/libarrow_python.so.100.0.0 debug/libarrow_testing.so.100.0.0 debug/libarrow.so.100.0.0 /home/joris/miniconda3/envs/arrow-dev/lib/libpython3.7m.so -lpthread -lpthread -ldl  -lutil -lrt -ldl /home/joris/miniconda3/envs/arrow-dev/lib/libdouble-conversion.a /home/joris/miniconda3/envs/arrow-dev/lib/libglog.so jemalloc_ep-prefix/src/jemalloc_ep/dist//lib/libjemalloc_pic.a -lrt /home/joris/miniconda3/envs/arrow-dev/lib/libgtest.so -pthread && :\r\n/home/joris/miniconda3/envs/arrow-dev/bin/../lib/gcc/x86_64-conda_cos6-linux-gnu/7.3.0/../../../../x86_64-conda_cos6-linux-gnu/bin/ld: warning: libboost_filesystem.so.1.68.0, needed by debug/libarrow.so.100.0.0, not found (try using -rpath or -rpath-link)\r\n/home/joris/miniconda3/envs/arrow-dev/bin/../lib/gcc/x86_64-conda_cos6-linux-gnu/7.3.0/../../../../x86_64-conda_cos6-linux-gnu/bin/ld: warning: libboost_system.so.1.68.0, needed by debug/libarrow.so.100.0.0, not found (try using -rpath or -rpath-link)\r\n/home/joris/miniconda3/envs/arrow-dev/bin/../lib/gcc/x86_64-conda_cos6-linux-gnu/7.3.0/../../../../x86_64-conda_cos6-linux-gnu/bin/ld: debug/libarrow.so.100.0.0: undefined reference to `boost::system::detail::generic_category_ncx()'\r\n/home/joris/miniconda3/envs/arrow-dev/bin/../lib/gcc/x86_64-conda_cos6-linux-gnu/7.3.0/../../../../x86_64-conda_cos6-linux-gnu/bin/ld: debug/libarrow.so.100.0.0: undefined reference to `boost::filesystem::path::operator/=(boost::filesystem::path const&)'\r\ncollect2: error: ld returned 1 exit status\r\n```\r\nwhich contains warnings like \"warning: libboost_filesystem.so.1.68.0, needed by debug/libarrow.so.100.0.0, not found\" (although this is certainly present).\r\n\r\nThe error is triggered by having `-DARROW_BUILD_TESTS=ON`. If that is set to OFF, it works fine.\r\n\r\nIt also seems to be related to this specific change in the docker compose PR:\r\n```java\n\r\ndiff --git a/cpp/CMakeLists.txt b/cpp/CMakeLists.txt\r\nindex c80ac3310..3b3c9eb8f 100644\r\n--- a/cpp/CMakeLists.txt\r\n+++ b/cpp/CMakeLists.txt\r\n@@ -266,6 +266,15 @@ endif(UNIX)\r\n# Set up various options\r\n #\r\n\r\n-if(ARROW_BUILD_TESTS OR ARROW_BUILD_BENCHMARKS)\r\n-  # Currently the compression tests require at least these libraries; bz2 and\r\n-  # zstd are optional. See ARROW-3984\r\n-  set(ARROW_WITH_BROTLI ON)\r\n-  set(ARROW_WITH_LZ4 ON)\r\n-  set(ARROW_WITH_SNAPPY ON)\r\n-  set(ARROW_WITH_ZLIB ON)\r\n-endif()\r\n-\r\n if(ARROW_BUILD_TESTS OR ARROW_BUILD_INTEGRATION)\r\n   set(ARROW_JSON ON)\r\n endif()\r\n```\r\n\r\nIf I add that back, the build works.\r\n\r\nWith only `set(ARROW_WITH_BROTLI ON)`, it still fails\r\n With only `set(ARROW_WITH_LZ4 ON)`, it also fails but with an error about liblz4 instead of libboost (but also liblz4 is actually present)\r\n With only `set(ARROW_WITH_SNAPPY ON)`, it works\r\n With only `set(ARROW_WITH_ZLIB ON)`, it also fails but with an error about libz.so.1 not found\r\n\r\nWith both `set(ARROW_WITH_SNAPPY ON)` and `set(ARROW_WITH_ZLIB ON)`, it also works.  So it seems that the absence of snappy causes others to fail.\r\n\r\nIn the recommended build settings in the development docs (<https://github.com/apache/arrow/blob/master/docs/source/developers/python.rst#build-and-test),> the compression libraries are enabled. But I was still building without them (stemming from the time they were enabled by default). So I was using:\r\n\r\n```Java\n\r\ncmake -DCMAKE_INSTALL_PREFIX=$ARROW_HOME -GNinja \\\r\n -DCMAKE_INSTALL_LIBDIR=lib \\\r\n -DARROW_PARQUET=ON \\\r\n -DARROW_PYTHON=ON \\\r\n -DARROW_BUILD_TESTS=ON \\\r\n ..\r\n```",
        "created_at": "2019-11-13T10:40:20.000Z",
        "updated_at": "2019-11-14T12:01:27.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-11-14T12:01:27.000Z"
    },
    "comments": [
        {
            "created_at": "2019-11-13T15:53:41.292Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7154?focusedCommentId=16973461) by Joris Van den Bossche (jorisvandenbossche):*\nCreating a new conda env from scratch (which now has boost 1.70 instead of 1.68 in my old env, not sure if that is relevant), and then the problem also went away. So it might be OK to close this issue."
        },
        {
            "created_at": "2019-11-14T12:01:18.777Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7154?focusedCommentId=16974173) by Antoine Pitrou (apitrou):*\nOk, closing."
        }
    ]
}