{
    "issue": {
        "title": "[Python] dask and kartothek integration tests are failing",
        "body": "***Note**: This issue was originally created as [ARROW-8342](https://issues.apache.org/jira/browse/ARROW-8342). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe integration tests for both dask and kartothek, and for both master and latest released version of them, started failing the last days.\r\n\r\nDask latest: https://circleci.com/gh/ursa-labs/crossbow/10629?utm_campaign=vcs-integration-link&utm_medium=referral&utm_source=github-build-link \r\nKartothek latest: https://circleci.com/gh/ursa-labs/crossbow/10604?utm_campaign=vcs-integration-link&utm_medium=referral&utm_source=github-build-link\r\n\r\nI think both are related to the KeyValueMetadata changes (ARROW-8079).\r\n\r\nThe kartothek one is clearly related, as it gives: TypeError: 'pyarrow.lib.KeyValueMetadata' object does not support item assignment\r\n\r\nAnd I think the dask one is related to the \"pandas\" key now being present twice, and therefore it is using the \"wrong\" one.\r\n",
        "created_at": "2020-04-06T06:42:24.000Z",
        "updated_at": "2020-04-08T01:29:33.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2020-04-08T01:29:32.000Z"
    },
    "comments": [
        {
            "created_at": "2020-04-06T07:14:27.191Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8342?focusedCommentId=17076082) by Joris Van den Bossche (jorisvandenbossche):*\nSo some things that are failing right now with the new KeyValueMetadata:\r\n\r\n- You can no longer set values (`metadata[b\"key\"] = ...`)\n- The `update()` method of dict no longer exists\n- `write_to_dataset` now writes parquet files with two \"pandas\" entries in the metadata (and one of them is wrong ..)\n- The double entry is probably related to the fact that you can now create KeyValueMetadata with duplicate fields, while before this was not possible (or at least, before dict.update was used, which would overwrite existing keys with the passed ones).\n  \n  All of the above can be solved (and probably solved rather easily). But since this are quite some aspects I now only quickly listed, there might be other corner cases that have changed. So I am wondering, given how close we are to the release, we should maybe rather revert the change for now, so we have a bit more time to let this settle after 0.17.\n  \n  cc `[~kszucs]` `[~apitrou]` `[~wesm]`"
        },
        {
            "created_at": "2020-04-06T12:29:25.169Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8342?focusedCommentId=17076294) by Antoine Pitrou (apitrou):*\nI agree with reverting now and fixing after 0.17.0."
        },
        {
            "created_at": "2020-04-06T20:52:56.067Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8342?focusedCommentId=17076655) by Wes McKinney (wesm):*\nAre there any problems beyond the return value of the `.metadata` property? It seems like the simplest thing is to convert `KeyValueMetadata` to dict when returning from this property. We can revert, too, but IMHO it will create more work in aggregate. Ultimately we need to be able to faithfully access the data in a KeyValueMetadata"
        },
        {
            "created_at": "2020-04-06T22:07:12.787Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8342?focusedCommentId=17076713) by Wes McKinney (wesm):*\nI'll take a crack at a PR"
        },
        {
            "created_at": "2020-04-06T22:59:36.017Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8342?focusedCommentId=17076730) by Krisztian Szucs (kszucs):*\n`[~wesm]` \u00a0you might want to disallow duplicate keys in the KeyValueMetadata constructor by initializing a dict from args and kwargs"
        },
        {
            "created_at": "2020-04-08T01:29:32.514Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-8342?focusedCommentId=17077733) by Wes McKinney (wesm):*\nIssue resolved by pull request 6855\n<https://github.com/apache/arrow/pull/6855>"
        }
    ]
}