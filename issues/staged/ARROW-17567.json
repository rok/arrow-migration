{
    "issue": {
        "title": "[C++][Compute]Compiler error with gcc7 and c++17",
        "body": "***Note**: This issue was originally created as [ARROW-17567](https://issues.apache.org/jira/browse/ARROW-17567). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen compiling the c++ compute component with gcc6/7 with std=c++14/17, compiler internal errors are triggered at compute/kernels/aggregate_internal.h:176:24 and various places at compute/kernels/scalar_set_lookup.cc\r\n```java\n\r\ncpp/src/arrow/compute/kernels/aggregate_internal.h:176:24:\u00a0internal compiler error:\u00a0in maybe_undo_parenthesized_ref, at cp/semantics.c:1740\r\nDCHECK_LT(cur_level, levels);\r\n~~~~~~~~~~~~~~~~~^~~~~~~~~~~~\r\n0x683399 maybe_undo_parenthesized_ref(tree_node*)\r\n../../gcc-7.5.0/gcc/cp/semantics.c:1739\r\n0x6c8638 cp_fold\r\n../../gcc-7.5.0/gcc/cp/cp-gimplify.c:2180\r\n0x6c949c cp_fold_maybe_rvalue\r\n../../gcc-7.5.0/gcc/cp/cp-gimplify.c:2042\r\n0x6c8346 cp_fold\r\n../../gcc-7.5.0/gcc/cp/cp-gimplify.c:2149\r\n0x6c949c cp_fold_maybe_rvalue\r\n../../gcc-7.5.0/gcc/cp/cp-gimplify.c:2042\r\n0x6c8234 cp_fold_rvalue\r\n../../gcc-7.5.0/gcc/cp/cp-gimplify.c:2063\r\n0x6c8234 cp_fold\r\n../../gcc-7.5.0/gcc/cp/cp-gimplify.c:2304\r\n0x66a037 cp_convert_and_check(tree_node*, tree_node*, int)\r\n../../gcc-7.5.0/gcc/cp/cvt.c:640\r\n0x59bb8a convert_like_real\r\n../../gcc-7.5.0/gcc/cp/call.c:7053\r\n0x59de12 build_over_call\r\n../../gcc-7.5.0/gcc/cp/call.c:7869\r\n0x5a3c2f build_new_function_call(tree_node*, vec<tree_node*, va_gc, vl_embed>**, bool, int)\r\n../../gcc-7.5.0/gcc/cp/call.c:4272\r\n0x685601 finish_call_expr(tree_node*, vec<tree_node*, va_gc, vl_embed>**, bool, bool, int)\r\n../../gcc-7.5.0/gcc/cp/semantics.c:2501\r\n0x5e1b83 tsubst_copy_and_build(tree_node*, tree_node*, int, tree_node*, bool, bool)\r\n../../gcc-7.5.0/gcc/cp/pt.c:17508\r\n0x5e121b tsubst_copy_and_build(tree_node*, tree_node*, int, tree_node*, bool, bool)\r\n../../gcc-7.5.0/gcc/cp/pt.c:17544\r\n0x5d6c47 tsubst_copy_and_build(tree_node*, tree_node*, int, tree_node*, bool, bool)\r\n../../gcc-7.5.0/gcc/cp/pt.c:16732\r\n0x5d6c47 tsubst_expr(tree_node*, tree_node*, int, tree_node*, bool)\r\n../../gcc-7.5.0/gcc/cp/pt.c:16613\r\n0x5d6a85 tsubst_expr(tree_node*, tree_node*, int, tree_node*, bool)\r\n../../gcc-7.5.0/gcc/cp/pt.c:15874\r\n0x5d6ad5 tsubst_expr(tree_node*, tree_node*, int, tree_node*, bool)\r\n../../gcc-7.5.0/gcc/cp/pt.c:15860\r\n0x5d61de tsubst_expr(tree_node*, tree_node*, int, tree_node*, bool)\r\n../../gcc-7.5.0/gcc/cp/pt.c:16036\r\n0x5d6ad5 tsubst_expr(tree_node*, tree_node*, int, tree_node*, bool)\r\n../../gcc-7.5.0/gcc/cp/pt.c:15860\r\nPlease submit a full bug report,\r\nwith preprocessed source if appropriate.\r\nPlease include the complete backtrace with any bug report.\r\nSee <https://gcc.gnu.org/bugs/> for instructions. \n```\r\n```java\n\r\ncpp/src/arrow/compute/kernels/scalar_set_lookup.cc:70:50:\u00a0internal compiler error:\u00a0in maybe_undo_parenthesized_ref, at cp/semantics.c:1740\r\nauto on_found = [&](int32_t memo_index) { DCHECK_LT(memo_index, memo_size); };\r\n0x683399 maybe_undo_parenthesized_ref(tree_node*)\r\n../../gcc-7.5.0/gcc/cp/semantics.c:1739\r\n0x6c8638 cp_fold\r\n../../gcc-7.5.0/gcc/cp/cp-gimplify.c:2180\r\n0x6c949c cp_fold_maybe_rvalue\r\n../../gcc-7.5.0/gcc/cp/cp-gimplify.c:2042\r\n0x6c8346 cp_fold\r\n../../gcc-7.5.0/gcc/cp/cp-gimplify.c:2149\r\n0x66a037 cp_convert_and_check(tree_node*, tree_node*, int)\r\n../../gcc-7.5.0/gcc/cp/cvt.c:640\r\n0x65f5d4 cp_build_binary_op(unsigned int, tree_code, tree_node*, tree_node*, int)\r\n../../gcc-7.5.0/gcc/cp/typeck.c:5208\r\n0x5a689c build_new_op_1\r\n../../gcc-7.5.0/gcc/cp/call.c:5978\r\n0x5a737e build_new_op(unsigned int, tree_code, int, tree_node*, tree_node*, tree_node*, tree_node**, int)\r\n../../gcc-7.5.0/gcc/cp/call.c:6022\r\n0x657a12 build_x_binary_op(unsigned int, tree_code, tree_node*, tree_code, tree_node*, tree_code, tree_node**, int)\r\n../../gcc-7.5.0/gcc/cp/typeck.c:3941\r\n0x5e04ff tsubst_copy_and_build(tree_node*, tree_node*, int, tree_node*, bool, bool)\r\n../../gcc-7.5.0/gcc/cp/pt.c:17001\r\n0x5e1120 tsubst_copy_and_build(tree_node*, tree_node*, int, tree_node*, bool, bool)\r\n../../gcc-7.5.0/gcc/cp/pt.c:16940\r\n0x5e1120 tsubst_copy_and_build(tree_node*, tree_node*, int, tree_node*, bool, bool)\r\n../../gcc-7.5.0/gcc/cp/pt.c:16940\r\n0x5e1676 tsubst_copy_and_build(tree_node*, tree_node*, int, tree_node*, bool, bool)\r\n../../gcc-7.5.0/gcc/cp/pt.c:17312\r\n0x5e121b tsubst_copy_and_build(tree_node*, tree_node*, int, tree_node*, bool, bool)\r\n../../gcc-7.5.0/gcc/cp/pt.c:17544\r\n0x5d6c47 tsubst_copy_and_build(tree_node*, tree_node*, int, tree_node*, bool, bool)\r\n../../gcc-7.5.0/gcc/cp/pt.c:16732\r\n0x5d6c47 tsubst_expr(tree_node*, tree_node*, int, tree_node*, bool)\r\n../../gcc-7.5.0/gcc/cp/pt.c:16613\r\n0x5d6a85 tsubst_expr(tree_node*, tree_node*, int, tree_node*, bool)\r\n../../gcc-7.5.0/gcc/cp/pt.c:15874\r\n0x5d696b tsubst_expr(tree_node*, tree_node*, int, tree_node*, bool)\r\n../../gcc-7.5.0/gcc/cp/pt.c:16090\r\n0x5d696b tsubst_expr(tree_node*, tree_node*, int, tree_node*, bool)\r\n../../gcc-7.5.0/gcc/cp/pt.c:16090\r\n0x5d4aae tsubst_expr(tree_node*, tree_node*, int, tree_node*, bool)\r\n../../gcc-7.5.0/gcc/cp/pt.c:15845\r\nPlease submit a full bug report,\r\nwith preprocessed source if appropriate.\r\nPlease include the complete backtrace with any bug report.\r\nSee <https://gcc.gnu.org/bugs/> for instructions. \n```\r\n\u00a0\r\n\r\nThis is a known bug of gcc6/7. It is triggered when a const integer is capture by reference in a lambda function, and is parenthesized in that lambda code. See also:\u00a0 <https://gcc.gnu.org/bugzilla/show_bug.cgi?id=83204> and <https://github.com/kokkos/kokkos-kernels/issues/349>\r\n\r\n\u00a0\r\n\r\nAn easy fix is to capture levels and memo_size by value. {~~}Since they are ints, capturing by value is also a performace improvement{~~}. If there is no objection, I will submit a PR to fix this.",
        "created_at": "2022-08-30T11:13:01.000Z",
        "updated_at": "2022-08-30T21:53:51.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-08-30T15:23:48.000Z"
    },
    "comments": [
        {
            "created_at": "2022-08-30T15:23:48.052Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17567?focusedCommentId=17597936) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 14004\n<https://github.com/apache/arrow/pull/14004>"
        }
    ]
}