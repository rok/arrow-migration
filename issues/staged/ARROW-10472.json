{
    "issue": {
        "title": "[C++][Python] casting a scalar timestamp to date32 results in Aborted (core dump)",
        "body": "***Note**: This issue was originally created as [ARROW-10472](https://issues.apache.org/jira/browse/ARROW-10472). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nConsider the following example: I have an array of timestamp[s]\r\n```java\n\r\n>>> import pyarrow.compute as pc\r\n>>> import pyarrow as pa\r\n>>> arr = pc.strptime(['2020-11-01', '2020-11-02', '2020-11-03'], format='%Y-%m-%d', unit='s')\r\n>>> arr\r\n<pyarrow.lib.TimestampArray object at 0x7f1fc2ef4228>\r\n[\r\n 2020-11-01 00:00:00,\r\n 2020-11-02 00:00:00,\r\n 2020-11-03 00:00:00\r\n]\n```\r\nI am able to cast the array to date32:\r\n```java\n\r\n>>> pc.cast(arr, pa.date32())\r\n<pyarrow.lib.Date32Array object at 0x7f1fc2fd3588>\r\n[\r\n 2020-11-01,\r\n 2020-11-02,\r\n 2020-11-03\r\n]\n```\r\nbut when I try to do the same with a scalar I get core dumped failure\r\n```java\n\r\n>>> arr[0]\r\n<pyarrow.TimestampScalar: datetime.datetime(2020, 11, 1, 0, 0)>\r\n>>> pc.cast(arr[0], pa.date32())\r\nterminate called after throwing an instance of 'mpark::bad_variant_access'\r\n what(): bad_variant_access\r\nAborted (core dumped)\u00a0\r\n\r\n```\r\n\u00a0Below is a stack trace from gdb\r\n```java\n\r\n$ gdb /usr/bin/python3\r\nGNU gdb (Ubuntu 8.1-0ubuntu3.2) 8.1.0.20180409-git\r\nCopyright (C) 2018 Free Software Foundation, Inc.\r\nLicense GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>\r\nThis is free software: you are free to change and redistribute it.\r\nThere is NO WARRANTY, to the extent permitted by law.\u00a0 Type \"show copying\"\r\nand \"show warranty\" for details.\r\nThis GDB was configured as \"x86_64-linux-gnu\".\r\nType \"show configuration\" for configuration details.\r\nFor bug reporting instructions, please see:\r\n<http://www.gnu.org/software/gdb/bugs/>.\r\nFind the GDB manual and other documentation resources online at:\r\n<http://www.gnu.org/software/gdb/documentation/>.\r\nFor help, type \"help\".\r\nType \"apropos word\" to search for commands related to \"word\"...\r\nReading symbols from /usr/bin/python3...(no debugging symbols found)...done.\r\n(gdb) run sample.py\u00a0\r\nStarting program: /usr/bin/python3 sample.py\r\n[Thread debugging using libthread_db enabled]\r\nUsing host libthread_db library \"/lib/x86_64-linux-gnu/libthread_db.so.1\".\r\n[New Thread 0x7ffff39ff700 (LWP 4314)]\r\n[New Thread 0x7fffebfff700 (LWP 4315)]\r\n[New Thread 0x7fffeb7fe700 (LWP 4316)]\r\n[New Thread 0x7fffe8ffd700 (LWP 4317)]\r\n[New Thread 0x7fffe47fc700 (LWP 4318)]\r\n[New Thread 0x7fffe1ffb700 (LWP 4319)]\r\n[New Thread 0x7fffdf7fa700 (LWP 4320)]\r\n[New Thread 0x7fffdcff9700 (LWP 4321)]\r\n[New Thread 0x7fffda7f8700 (LWP 4322)]\r\n[New Thread 0x7fffd7ff7700 (LWP 4323)]\r\n[New Thread 0x7fffd57f6700 (LWP 4324)]\r\n[New Thread 0x7fffd2ff5700 (LWP 4325)]\r\n[Thread 0x7fffd2ff5700 (LWP 4325) exited]\r\n[Thread 0x7fffd57f6700 (LWP 4324) exited]\r\n[Thread 0x7fffd7ff7700 (LWP 4323) exited]\r\n[Thread 0x7fffda7f8700 (LWP 4322) exited]\r\n[Thread 0x7fffdcff9700 (LWP 4321) exited]\r\n[Thread 0x7fffdf7fa700 (LWP 4320) exited]\r\n[Thread 0x7fffe1ffb700 (LWP 4319) exited]\r\n[Thread 0x7fffe47fc700 (LWP 4318) exited]\r\n[Thread 0x7fffe8ffd700 (LWP 4317) exited]\r\n[Thread 0x7fffeb7fe700 (LWP 4316) exited]\r\n[Thread 0x7fffebfff700 (LWP 4315) exited]\r\nterminate called after throwing an instance of 'mpark::bad_variant_access'\r\n\u00a0 what():\u00a0 bad_variant_access\r\n\r\nThread 1 \"python3\" received signal SIGABRT, Aborted.\r\n__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:51\r\n51 ../sysdeps/unix/sysv/linux/raise.c: No such file or directory.\r\n(gdb) backtrace\u00a0\r\n#0\u00a0 __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:51\r\n#1\u00a0 0x00007ffff7a248b1 in __GI_abort () at abort.c:79\r\n#2\u00a0 0x00007ffff477d957 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#3\u00a0 0x00007ffff4783ae6 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#4\u00a0 0x00007ffff4783b21 in std::terminate() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#5\u00a0 0x00007ffff4783d54 in __cxa_throw () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6\r\n#6\u00a0 0x00007ffff5104012 in mpark::throw_bad_variant_access() ()\r\n\u00a0 \u00a0from /usr/local/lib/python3.6/dist-packages/pyarrow/libarrow.so.200\r\n#7\u00a0 0x00007ffff51e1f51 in arrow::compute::internal::CastFunctor<arrow::Date32Type, arrow::TimestampType, void>::Exec(arrow::compute::KernelContext*, arrow::compute::ExecBatch const&, arrow::Datum*) ()\r\n\u00a0 \u00a0from /usr/local/lib/python3.6/dist-packages/pyarrow/libarrow.so.200\r\n#8\u00a0 0x00007ffff52ab5ab in arrow::compute::detail::ScalarExecutor::ExecuteBatch(arrow::compute::ExecBatch const&, arrow::compute::detail::ExecListener*) () from /usr/local/lib/python3.6/dist-packages/pyarrow/libarrow.so.200\r\n#9\u00a0 0x00007ffff52abba1 in arrow::compute::detail::ScalarExecutor::Execute(std::vector<arrow::Datum, std::allocator<arrow::Datum> > const&, arrow::compute::detail::ExecListener*) ()\r\n\u00a0 \u00a0from /usr/local/lib/python3.6/dist-packages/pyarrow/libarrow.so.200\r\n#10 0x00007ffff529cfe6 in arrow::compute::Function::Execute(std::vector<arrow::Datum, std::allocator<arrow::Datum> > const&, arrow::compute::FunctionOptions const*, arrow::compute::ExecContext*) const [clone .localalias.47] ()\r\n\u00a0 \u00a0from /usr/local/lib/python3.6/dist-packages/pyarrow/libarrow.so.200\r\n#11 0x00007ffff52a5878 in arrow::compute::internal::CastMetaFunction::ExecuteImpl(std::vector<arrow::Datum, std::allocator<arrow::Datum> > const&, arrow::compute::FunctionOptions const*, arrow::compute::ExecContext*) const ()\r\n\u00a0 \u00a0from /usr/local/lib/python3.6/dist-packages/pyarrow/libarrow.so.200\r\n#12 0x00007ffff5299f8f in arrow::compute::MetaFunction::Execute(std::vector<arrow::Datum, std::allocator<arrow::Datum> > const&, arrow::compute::FunctionOptions const*, arrow::compute::ExecContext*) const [clone .localalias.48] ()\r\n\u00a0 \u00a0from /usr/local/lib/python3.6/dist-packages/pyarrow/libarrow.so.200\r\n#13 0x00007fffebb685a0 in __pyx_pf_7pyarrow_8_compute_8Function_6call(__pyx_obj_7pyarrow_8_compute_Function*, _object*, __pyx_obj_7pyarrow_8_compute_FunctionOptions*, __pyx_obj_7pyarrow_3lib_MemoryPool*) [clone .isra.455] ()\r\n\u00a0 \u00a0from /usr/local/lib/python3.6/dist-packages/pyarrow/_compute.cpython-36m-x86_64-linux-gnu.so\r\n#14 0x00007fffebb69309 in __pyx_pw_7pyarrow_8_compute_8Function_7call(_object*, _object*, _object*) ()\r\n\u00a0 \u00a0from /usr/local/lib/python3.6/dist-packages/pyarrow/_compute.cpython-36m-x86_64-linux-gnu.so\r\n#15 0x0000000000566f73 in PyCFunction_Call ()\r\n#16 0x00007fffebb5a855 in __Pyx_PyObject_Call(_object*, _object*, _object*) ()\r\n\u00a0 \u00a0from /usr/local/lib/python3.6/dist-packages/pyarrow/_compute.cpython-36m-x86_64-linux-gnu.so\r\n#17 0x00007fffebb6565a in __pyx_pw_7pyarrow_8_compute_7call_function(_object*, _object*, _object*) ()\r\n\u00a0 \u00a0from /usr/local/lib/python3.6/dist-packages/pyarrow/_compute.cpython-36m-x86_64-linux-gnu.so\r\n#18 0x000000000050a4a5 in ?? ()\r\n#19 0x000000000050beb4 in _PyEval_EvalFrameDefault ()\r\n#20 0x0000000000507be4 in ?? ()\r\n#21 0x0000000000509900 in ?? ()\r\n---Type <return> to continue, or q <return> to quit---\r\n#22 0x000000000050a2fd in ?? ()\r\n#23 0x000000000050beb4 in _PyEval_EvalFrameDefault ()\r\n#24 0x0000000000507be4 in ?? ()\r\n#25 0x000000000050ad03 in PyEval_EvalCode ()\r\n#26 0x0000000000634e72 in ?? ()\r\n#27 0x0000000000634f27 in PyRun_FileExFlags ()\r\n#28 0x00000000006386df in PyRun_SimpleFileExFlags ()\r\n#29 0x0000000000639281 in Py_Main ()\r\n#30 0x00000000004b0dc0 in main ()\r\n(gdb)\u00a0\r\n```\r\n\u00a0",
        "created_at": "2020-11-02T20:41:14.000Z",
        "updated_at": "2021-01-13T15:29:47.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2021-01-13T15:29:32.000Z"
    },
    "comments": [
        {
            "created_at": "2020-11-03T13:24:12.242Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10472?focusedCommentId=17225358) by Joris Van den Bossche (jorisvandenbossche):*\nThanks for the report! I can confirm the bug. \r\nWith my debug build locally, it points to this:\r\n\r\n```Java\n\r\nIn [23]: pc.cast(arr[0], pa.date32())\r\n../src/arrow/compute/kernels/scalar_cast_temporal.cc:150:  Check failed: (batch[0].kind()) == (Datum::ARRAY) \r\n```\r\n\r\nWe have an issue about implementing those temporal casts for scalars in general: ARROW-9196. But of course, as long as it is not implemented, it should also not segfault .."
        },
        {
            "created_at": "2021-01-11T20:05:35.283Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10472?focusedCommentId=17262915) by Joris Van den Bossche (jorisvandenbossche):*\nThis seems to have been fixed in the meantime. Would be good to add a test for this to close this issue. "
        },
        {
            "created_at": "2021-01-12T14:49:25.084Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10472?focusedCommentId=17263385) by Krisztian Szucs (kszucs):*\nI'm postponing it to 4.0 in the meantime."
        },
        {
            "created_at": "2021-01-13T15:29:32.920Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10472?focusedCommentId=17264213) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 9177\n<https://github.com/apache/arrow/pull/9177>"
        }
    ]
}