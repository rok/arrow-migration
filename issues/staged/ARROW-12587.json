{
    "issue": {
        "title": "[R][C++][Packaging] Illegal opcode error on aggregate Array/ChunkedArray of integer",
        "body": "***Note**: This issue was originally created as [ARROW-12587](https://issues.apache.org/jira/browse/ARROW-12587). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI see this error with the 4.0.0 version of the R package with the C++ library from Homebrew:\r\n```java\n\r\nsum(Array$create(c(1L, 2L))) \r\n\r\n##\u00a0*** caught illegal operation ***\r\n## address 0x109f1b45c, cause 'illegal opcode'\n```\r\nThis is on an Intel Mac running Big Sur 11.3 with AVX2 support but no AVX512 support.\r\n\r\nThis happens regardless of whether I build the Homebrew formula locally or install the pre-built bottle.",
        "created_at": "2021-04-28T15:53:41.000Z",
        "updated_at": "2022-07-29T18:37:14.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Packaging",
            "Component: R",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-04-29T14:32:58.676Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12587?focusedCommentId=17335534) by David Li (lidavidm):*\nAccording to a disassembler, it's crashing on an AVX512 instruction, so maybe Arrow is picking the wrong SIMD level, or was built with the wrong flags:\r\n```\n\r\nRaw Hex (zero bytes in bold):\r\n\r\n62F1FF087BC0BF3800   \r\n\r\nString Literal:\r\n\r\n\"\\x62\\xF1\\xFF\\x08\\x7B\\xC0\\xBF\\x38\\x00\"\r\n\r\nArray Literal:\r\n\r\n{ 0x62, 0xF1, 0xFF, 0x08, 0x7B, 0xC0, 0xBF, 0x38, 0x00 }\r\nDisassembly:\r\n\r\n0:  62 f1 ff 08 7b c0       vcvtusi2sd xmm0,xmm0,rax\r\n6:  bf                      .byte 0xbf\r\n7:  38 00                   cmp    BYTE PTR [rax],al\r\n```\r\nThe backtrace ends at `arrow::compute::aggregate::MeanImpl<arrow::Int32Type, (arrow::compute::SimdLevel::type)4>::Finalize` and `SimdLevel = 4` corresponds to AVX512."
        },
        {
            "created_at": "2021-04-30T16:10:53.562Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12587?focusedCommentId=17337485) by Ian Cook (icook):*\nSetting\u00a0`-DARROW_RUNTIME_SIMD_LEVEL=AVX2` in the Homebrew formula (`apache-arrow.rb`) stops this error\r\n\r\nAs a band-aid fix, I can add this to the formula:\r\n```java\n\r\nargs << \"-DARROW_RUNTIME_SIMD_LEVEL=AVX2\" if MacOS.version == :big_sur \n```\r\nor to ensure it will work with older Macs that don't support AVX2 but can still run Big Sur (e.g. older Mac Pros) maybe we should set it to `SSE4_2`."
        },
        {
            "created_at": "2021-04-30T16:13:44.436Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12587?focusedCommentId=17337487) by Neal Richardson (npr):*\nIs arrow picking the wrong runtime SIMD level? This should be available from R in `arrow_info()`.\r\n\r\nOr do we have runtime-dispatched AVX512 code that is flagged as AVX2?\r\n\r\nOr something else? "
        },
        {
            "created_at": "2021-04-30T16:44:19.308Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12587?focusedCommentId=17337501) by Ian Cook (icook):*\nWhen I build libarrow with\r\n```java\n\r\n HOMEBREW_NO_AUTO_UPDATE=1 brew install --build-from-source ./apache-arrow.rb\n```\r\nusing `apache-arrow.rb`\u00a0downloaded from [https://github.com/Homebrew/homebrew-core/blob/master/Formula/apache-arrow.rb](https://github.com/Homebrew/homebrew-core/blob/master/Formula/apache-arrow.rb,),\u00a0`arrow_info()` reports:\r\n```java\n\r\nRuntime:\r\n\u00a0\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0\r\nSIMD Level\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 avx2\r\nDetected SIMD Level avx2\n```\r\nThe same happens if I modify\u00a0`apache-arrow.rb`\u00a0to and add `-DARROW_RUNTIME_SIMD_LEVEL=MAX` or `-DARROW_RUNTIME_SIMD_LEVEL=AVX2`.\r\n\r\nSo it seems like there is an AVX512 instruction being executed when it shouldn't."
        },
        {
            "created_at": "2021-04-30T18:44:42.808Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12587?focusedCommentId=17337573) by Ian Cook (icook):*\nPossibly related issues:\r\n\r\nARROW-9643\r\n\r\nARROW-9668\r\n\r\nARROW-9877\r\n\r\nARROW-10321"
        },
        {
            "created_at": "2021-04-30T19:43:48.049Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12587?focusedCommentId=17337594) by Ian Cook (icook):*\n[~frank.du]\u00a0we are seeing false positives for AVX512 support on Intel Macs running Big Sur. Do you know what might be causing this? Thank you."
        },
        {
            "created_at": "2021-04-30T20:54:22.226Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12587?focusedCommentId=17337618) by Jonathan Keane (jonkeane):*\n> or to ensure it will work with older Macs that don't support AVX2 but can still run Big Sur (e.g. older Mac Pros) maybe we should set it to SSE4_2.\r\n\r\nOn my macpro (late 2013) I have AVX1.0 (though it's not in `machdep.cpu.leaf7_features` it is in `machdep.cpu.features`. I'm not sure if there are any big sur compatible machines that don't have avx 1\r\n\r\n```Java\n\r\njkeane@het arrow % sysctl -a | grep machdep.cpu.features      \r\nmachdep.cpu.features: FPU VME DE PSE TSC MSR PAE MCE CX8 APIC SEP MTRR PGE MCA CMOV PAT PSE36 CLFSH DS ACPI MMX FXSR SSE SSE2 SS HTT TM PBE SSE3 PCLMULQDQ DTES64 MON DSCPL VMX SMX EST TM2 SSSE3 CX16 TPR PDCM SSE4.1 SSE4.2 x2APIC POPCNT AES PCID XSAVE OSXSAVE TSCTMR AVX1.0 RDRAND F16C\r\n```\r\n\r\nAnd `arrow_info()` seems to catch that:\r\n\r\n```Java\n\r\n...\r\nRuntime:\r\n                       \r\nSIMD Level          avx\r\nDetected SIMD Level avx\r\n```"
        },
        {
            "created_at": "2021-05-03T18:46:02.473Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12587?focusedCommentId=17338556) by Jeroen (jeroenooms):*\nI am also seeing a crash in the R, when we build the R package on big sur using the big-sur autobrew bottles. OTOH binaries for MacOS 10.11-10.15 seem fine. Running the unit tests dies like this (attached the Console stack trace from macos: [big-sur-crash.txt](big-sur-crash.txt)).\r\n\r\nThis seems a lot like https://issues.apache.org/jira/browse/ARROW-11217 which also involved `arrow::compute::aggregate::SumImpl()`\r\n\r\n```java\n\r\n\u2714 |   3       | arrow-info\r\n\u2714 |  10       | General checks [0.3 s]\r\n\u2714 |  12       | backwards-compatibility\r\n\u2714 |  12       | BufferReader\r\n\u2714 |  24       | Buffer\r\n\u2714 | 281       | ChunkedArray [0.4 s]\r\n\u2714 |  12       | Compressed.*Stream\r\n\u280f |   0       | compute: aggregation\r\n *** caught illegal operation ***\r\naddress 0x1089cc6dc, cause 'illegal opcode'\r\n\r\nTraceback:\r\n 1: compute__CallFunction(function_name, args, options)\r\n 2: call_function(FUN, a, options = list(na.rm = na.rm))\r\n 3: scalar_aggregate(\"sum\", ..., na.rm = na.rm)\r\n 4: sum.ArrowDatum(<environment>, na.rm = FALSE)\r\n 5: eval_bare(expr, quo_get_env(quo))\r\n 6: quasi_label(enquo(object), arg = \"object\")\r\n 7: expect_s3_class(object, class)\r\n 8: expect_r6_class(sum(a), \"Scalar\")\r\n 9: eval(code, test_env)\r\n```\r\n"
        },
        {
            "created_at": "2021-05-03T18:52:03.799Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12587?focusedCommentId=17338562) by Neal Richardson (npr):*\n`[~jeroenooms]` thanks. This is on an Intel mac, to be clear? (IIRC we thought the other issue was about Rosetta emulation.)"
        },
        {
            "created_at": "2021-05-03T19:09:35.370Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12587?focusedCommentId=17338570) by Jeroen (jeroenooms):*\n`[~npr]` \u00a0Yes indeed,\u00a0ARROW-11217\u00a0would crash under the intel emulator but now we get the crash on native intel hardware.\r\n\r\nThe crash does not happen on M1. It also does not happen if we use binaries compiled on macos 10.13 (which is the CRAN default). It only happens when using arrow built under big sur."
        },
        {
            "created_at": "2021-05-04T04:36:47.643Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12587?focusedCommentId=17338744) by Ian Cook (icook):*\nDiscussion about this also at https://github.com/Homebrew/homebrew-core/issues/76537"
        },
        {
            "created_at": "2021-05-16T16:44:26.761Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12587?focusedCommentId=17345743) by Webb Phillips (webbp):*\nSame problem occurs after updating the MacPorts apache-arrow Portfile to apache-arrow-4.0.0."
        },
        {
            "created_at": "2021-05-16T17:16:21.961Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12587?focusedCommentId=17345747) by Neal Richardson (npr):*\nFor what it's worth, we don't maintain or test the MacPorts formula (I honestly didn't know macports was still a thing). I see https://github.com/macports/macports-ports/blob/master/devel/apache-arrow/Portfile exists but it still says 3.0.0."
        },
        {
            "created_at": "2021-07-05T17:57:49.044Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12587?focusedCommentId=17374956) by Carlo Cabrera (ccabrera):*\nI've merged a fix that disables the filtering of `-march` flags in the Arrow build in Homebrew/core. This should hopefully fix this issue with the Homebrew formula.\r\n\r\nI hope you have your runtime detection working correctly for everything that Arrow builds \u2013 otherwise we might have to just disable AVX512 on the formula entirely.\r\n\r\nI'm particularly concerned about vendored dependencies being tuned for the build-time CPU. (If they're not, they're probably being built for Penryn, which I'll note is a step down from what the Homebrew formula used to build them for.)"
        },
        {
            "created_at": "2022-07-12T14:04:21.280Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-12587?focusedCommentId=17565550) by @toddfarmer:*\nThis issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon."
        }
    ]
}