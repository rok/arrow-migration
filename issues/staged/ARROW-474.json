{
    "issue": {
        "title": "Create an Arrow streaming file fomat",
        "body": "***Note**: This issue was originally created as [ARROW-474](https://issues.apache.org/jira/browse/ARROW-474). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIt would be helpful to have a file/container layout that allows for streaming consumer and producers of arrow data.\n\nAs a motivating example, a reader could have this API:\nIterator<Record> read(java.io.InputStream source). \nSimilar a writer can have:\nvoid write(RecordBatch, java.io.OutputStream dest)\n\nThe streams can be from a variety of sources: it be files, over the network, shared memory, pipe, etc. The layout would make it possible to implement\nboth APIs without requiring intermediate buffering. \n\nSpeaking with Julien, this involves creating a simple container format similar to ARROW-264 but suitable for streaming consumer and producers. The layout in ARROW-264 has the schema at the end so can't be used in a streaming way. This format would likely be a rearranging of the current File layout pieces, something similar to:\n\nMAGIC, schema, totalBatches, (RecordBatchHeader, RecordBatchBody)\\*, MAGIC (or some end marker)\n\ntotalBatches is optional for streaming producers that don't know.",
        "created_at": "2017-01-11T01:02:05.000Z",
        "updated_at": "2019-06-03T13:14:36.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Format",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2017-01-19T19:46:46.000Z"
    },
    "comments": [
        {
            "created_at": "2017-01-11T16:17:39.446Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-474?focusedCommentId=15818747) by Wes McKinney (wesm):*\n+1, sounds good to me. This won't permit random access of batches, so not a replacement for the current file format, but very useful for streaming use cases as you describe. We have all the tools to implement this both in Java and CPP without a great of effort \u2013 if we formalize the streaming format in the spec documents, then we can create initial implementations. We obviously will want to write integration tests for it. "
        },
        {
            "created_at": "2017-01-11T22:46:26.826Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-474?focusedCommentId=15819429) by Nong Li (nongli):*\nGreat, let me take a crack at this. I can't update the jira assignee."
        },
        {
            "created_at": "2017-01-11T23:24:10.148Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-474?focusedCommentId=15819511) by Julien Le Dem (julienledem):*\n`[~nongli]` I added you to the list of contributors (which controls who can be assigned a JIRA) and assigned this jira to you."
        },
        {
            "created_at": "2017-01-11T23:24:50.666Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-474?focusedCommentId=15819515) by Julien Le Dem (julienledem):*\n`[~nongli]` Your description sounds good to me too."
        },
        {
            "created_at": "2017-01-15T00:41:42.879Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-474?focusedCommentId=15823001) by Nong Li (nongli):*\nhttps://github.com/apache/arrow/pull/288"
        },
        {
            "created_at": "2017-01-19T19:46:46.872Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-474?focusedCommentId=15830484) by Wes McKinney (wesm):*\nIssue resolved by pull request 288\n<https://github.com/apache/arrow/pull/288>"
        }
    ]
}