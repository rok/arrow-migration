{
    "issue": {
        "title": "[C++] Create/port a StatusOr implementation to be able to return a status or a type",
        "body": "***Note**: This issue was originally created as [ARROW-4800](https://issues.apache.org/jira/browse/ARROW-4800). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nExample from grpc: https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/stubs/statusor.h",
        "created_at": "2019-03-08T03:57:19.000Z",
        "updated_at": "2019-06-22T20:23:03.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-06-22T20:22:52.000Z"
    },
    "comments": [
        {
            "created_at": "2019-03-18T13:14:49.424Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4800?focusedCommentId=16795000) by Antoine Pitrou (apitrou):*\nWhat is the cost of unboxing the value with such a scheme? Say I have a `StatusOr<std::vector<something>>`, can we avoid copying the vector when getting its value?"
        },
        {
            "created_at": "2019-03-19T15:28:06.428Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4800?focusedCommentId=16796197) by Micah Kornfield (emkornfield@gmail.com):*\nThe linked reference seems relatively simple, and returns a reference when unboxing.  I believe this could probably be made more complex to support move-semantics as well.   I've mostly seen usage of this type with either primitives or unique/shared pointers so the cost hasn't been an issue."
        },
        {
            "created_at": "2019-03-19T15:31:06.874Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4800?focusedCommentId=16796204) by Micah Kornfield (emkornfield@gmail.com):*\nhttps://github.com/google/asylo/blob/master/asylo/util/statusor.h is a slightly more complicated implementation that does some with with R-value references."
        },
        {
            "created_at": "2019-03-19T15:37:29.425Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4800?focusedCommentId=16796209) by Micah Kornfield (emkornfield@gmail.com):*\nWe should also port ASSIGN_OR_RETURN (https://github.com/tensorflow/tensorflow/blob/master/tensorflow/compiler/xla/status_macros.h#L203) when implementing this."
        },
        {
            "created_at": "2019-04-04T12:08:18.156Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4800?focusedCommentId=16809779) by Francois Saint-Jacques (fsaintjacques):*\nLLVM types:\r\n\r\n- [Expected](https://github.com/llvm/llvm-project/blob/master/llvm/include/llvm/Support/Error.h#L433)\n- [ErrorOr](https://github.com/llvm/llvm-project/blob/master/llvm/include/llvm/Support/ErrorOr.h#L26)\n- [Optional](https://github.com/llvm/llvm-project/blob/master/llvm/include/llvm/ADT/Optional.h)"
        },
        {
            "created_at": "2019-05-22T08:58:02.485Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4800?focusedCommentId=16845686) by Antoine Pitrou (apitrou):*\nI would rather call this `Result<>`.\r\n\r\nIdeally we would rewrite all Status-returning APIs to return a `Result<>` instead. Of course it's probably out of question (both because it breaks compatibility, and because of the huge hassle in refactoring all Arrow code)."
        },
        {
            "created_at": "2019-05-23T06:34:52.167Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4800?focusedCommentId=16846467) by Micah Kornfield (emkornfield@gmail.com):*\nAs long as we are bikeshedding, I think I ErrorOr or StatusOr are more understandable without looking at the class.\r\n\r\nAgreed on trying to replace APIs, but I think this can be somewhat incremental as we developer higher level functionality we can go down the stack.  The nice thing is these APIs can live side by side since the method signature should always be different."
        },
        {
            "created_at": "2019-06-22T20:22:52.123Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-4800?focusedCommentId=16870355) by Wes McKinney (wesm):*\nIssue resolved by pull request 4501\n<https://github.com/apache/arrow/pull/4501>"
        }
    ]
}