{
    "issue": {
        "title": "[R] Make custom extension classes for (some) cols with row-level metadata",
        "body": "***Note**: This issue was originally created as [ARROW-14378](https://issues.apache.org/jira/browse/ARROW-14378). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe major usecase for this is SF columns which have attributes/metadata for each element of a column. We originally stored these in our standard column-level metadata, but that was very fragile and took forever, so we disabled it ARROW-13189\r\n\r\nThis will likely take some steps to accomplish. I've sketched out some in the subtasks here (though if we have a different approach, we could do that directly)",
        "created_at": "2021-10-19T13:22:47.000Z",
        "updated_at": "2022-10-24T18:30:25.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2022-07-13T15:54:27.000Z"
    },
    "comments": [
        {
            "created_at": "2021-11-03T12:57:35.041Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14378?focusedCommentId=17438041) by Dewey Dunnington (paleolimbot):*\nIt's worth checking out how jsonlite does this because it's a similar idea (arbitrary R objects to type agnostic storage format with restricted storage modes). It's done through a (non-exported) generic `jsonlite::asJSON()` and sf/sfc is supported (via GeoJSON): <https://github.com/jeroen/jsonlite/blob/master/R/asJSON.sf.R>\r\n\r\nIt might be worth exploring exported S3 generics (maybe `as_ArrowArray()`/`restore_ArrowArray()`?) that theoretically other packages could implement to serialize and unserialize objects to- and from Arrow storage. If that were the case just like jsonlite, we'd probably implement methods for the most common types.\r\n\r\nJust spitballing here!"
        },
        {
            "created_at": "2021-11-03T13:01:25.653Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14378?focusedCommentId=17438042) by Dewey Dunnington (paleolimbot):*\nI did something like this when I was protoypting arrowvctrs which might be useful to look at here:\r\n\r\n<https://github.com/paleolimbot/arrowvctrs/blob/master/R/cast-from-vctr.R#L16-L18>\r\n\r\n<https://github.com/paleolimbot/arrowvctrs/blob/master/R/vctr.R#L23-L25>"
        },
        {
            "created_at": "2021-11-25T09:33:02.255Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14378?focusedCommentId=17449064) by Alessandro Molina (amol-):*\nShould this be something we document also at \"format level\"? How to deal with SF using Arrow seems something the other bindings might want to do too and it would be better to have a standard across the bindings."
        },
        {
            "created_at": "2021-11-25T15:22:56.993Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14378?focusedCommentId=17449240) by Dewey Dunnington (paleolimbot):*\nAs `[~jorisvandenbossche]` mentioned in a 1:1 today, Python does this too via an object's `__arrow_array__()` method:\r\n\r\nhttps://github.com/apache/arrow/blob/bc223c688add2f4f06be0c3569192178f1ca1091/python/pyarrow/array.pxi#L105-L114"
        },
        {
            "created_at": "2021-11-25T15:33:17.138Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14378?focusedCommentId=17449241) by Dewey Dunnington (paleolimbot):*\nAn example of how this is implemented for extension classes in pandas:\r\n\r\nhttps://github.com/pandas-dev/pandas/blob/master/pandas/core/arrays/_arrow_utils.py#L88-L136"
        },
        {
            "created_at": "2021-11-25T16:35:11.920Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14378?focusedCommentId=17449256) by Joris Van den Bossche (jorisvandenbossche):*\nFor the Interval example, there are some different parts living in different places:\r\n\r\n- The Arrow Extension Type definition for pandas' interval type (what Dewey linked above): https://github.com/pandas-dev/pandas/blob/fc6b441ba527ca32b460ae4f4f5a6802335497f9/pandas/core/arrays/_arrow_utils.py#L88-L136\n- The `\\_\\_from_arrow\\_\\_` implementation (doing the conversion to arrow): https://github.com/pandas-dev/pandas/blob/fc6b441ba527ca32b460ae4f4f5a6802335497f9/pandas/core/arrays/interval.py#L1405-L1455\n- The `\\_\\_from_arrow\\_\\_` implementation (conversion arrow -> pandas): https://github.com/pandas-dev/pandas/blob/fc6b441ba527ca32b460ae4f4f5a6802335497f9/pandas/core/dtypes/dtypes.py#L1227-L1255\n  \n  (in theory, if designed differently in the past, those could also all live on the extension type, + a way to get the equivalent extension type for a certain R object)"
        },
        {
            "created_at": "2022-07-12T14:04:28.023Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14378?focusedCommentId=17565631) by @toddfarmer:*\nThis issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon."
        },
        {
            "created_at": "2022-07-13T15:54:27.381Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14378?focusedCommentId=17566387) by Jonathan Keane (jonkeane):*\nWe ended up supporting geo columns using the geoarrow package + extension types"
        },
        {
            "created_at": "2022-10-24T18:30:25.578Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-14378?focusedCommentId=17623339) by Neal Richardson (npr):*\n`[~jonkeane]` `[~paleolimbot]` can this issue and subtasks be closed?"
        }
    ]
}