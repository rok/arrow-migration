{
    "issue": {
        "title": "[Python] BUG: Table.to_pandas metadata checking fails if columns are not present",
        "body": "***Note**: This issue was originally created as [ARROW-1883](https://issues.apache.org/jira/browse/ARROW-1883). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nFound this bug in the example in the pandas documentation (http://pandas-docs.github.io/pandas-docs-travis/io.html#parquet), which does:\r\n\r\n\r\n```Java\n\r\ndf = pd.DataFrame({'a': list('abc'),\r\n                   'b': list(range(1, 4)),\r\n                   'c': np.arange(3, 6).astype('u1'),\r\n                   'd': np.arange(4.0, 7.0, dtype='float64'),\r\n                   'e': [True, False, True],\r\n                   'f': pd.date_range('20130101', periods=3),\r\n                   'g': pd.date_range('20130101', periods=3, tz='US/Eastern')})\r\n\r\ndf.to_parquet('example_pa.parquet', engine='pyarrow')\r\n\r\npd.read_parquet('example_pa.parquet', engine='pyarrow', columns=['a', 'b'])\r\n```\r\n\r\n\r\nand this raises in the last line reading a subset of columns:\r\n\r\n```Java\n\r\n...\r\n/home/joris/miniconda3/envs/dev/lib/python3.5/site-packages/pyarrow/pandas_compat.py in _add_any_metadata(table, pandas_metadata)\r\n    357     for i, col_meta in enumerate(pandas_metadata['columns']):\r\n    358         if col_meta['pandas_type'] == 'datetimetz':\r\n--> 359             col = table[i]\r\n    360             converted = col.to_pandas()\r\n    361             tz = col_meta['metadata']['timezone']\r\n\r\ntable.pxi in pyarrow.lib.Table.__getitem__()\r\n\r\ntable.pxi in pyarrow.lib.Table.column()\r\n\r\nIndexError: Table column index 6 is out of range\r\n```\r\n\r\n\r\nThis is due to checking the `pandas_metadata` for all columns (and in this case trying to deal with a datetime tz column), while in practice not all columns are present in this case ('mismatch' between pandas metadata and actual schema). \r\n\r\nA smaller example without parquet:\r\n\r\n```Java\n\r\nIn [38]: df = pd.DataFrame({'a': [1, 2, 3], 'b': pd.date_range(\"2017-01-01\", periods=3, tz='Europe/Brussels')})\r\n\r\nIn [39]: table = pyarrow.Table.from_pandas(df)\r\n\r\nIn [40]: table\r\nOut[40]: \r\npyarrow.Table\r\na: int64\r\nb: timestamp[ns, tz=Europe/Brussels]\r\n__index_level_0__: int64\r\nmetadata\r\n--------\r\n{b'pandas': b'{\"columns\": [{\"pandas_type\": \"int64\", \"metadata\": null, \"numpy_t'\r\n            b'ype\": \"int64\", \"name\": \"a\"}, {\"pandas_type\": \"datetimetz\", \"meta'\r\n            b'data\": {\"timezone\": \"Europe/Brussels\"}, \"numpy_type\": \"datetime6'\r\n            b'4[ns, Europe/Brussels]\", \"name\": \"b\"}, {\"pandas_type\": \"int64\", '\r\n            b'\"metadata\": null, \"numpy_type\": \"int64\", \"name\": \"__index_level_'\r\n            b'0__\"}], \"index_columns\": [\"__index_level_0__\"], \"pandas_version\"'\r\n            b': \"0.22.0.dev0+277.gd61f411\"}'}\r\n\r\nIn [41]: table.to_pandas()\r\nOut[41]: \r\n   a                         b\r\n0  1 2017-01-01 00:00:00+01:00\r\n1  2 2017-01-02 00:00:00+01:00\r\n2  3 2017-01-03 00:00:00+01:00\r\n\r\nIn [44]: table_without_tz = table.remove_column(1)\r\n\r\nIn [45]: table_without_tz\r\nOut[45]: \r\npyarrow.Table\r\na: int64\r\n__index_level_0__: int64\r\nmetadata\r\n--------\r\n{b'pandas': b'{\"columns\": [{\"pandas_type\": \"int64\", \"metadata\": null, \"numpy_t'\r\n            b'ype\": \"int64\", \"name\": \"a\"}, {\"pandas_type\": \"datetimetz\", \"meta'\r\n            b'data\": {\"timezone\": \"Europe/Brussels\"}, \"numpy_type\": \"datetime6'\r\n            b'4[ns, Europe/Brussels]\", \"name\": \"b\"}, {\"pandas_type\": \"int64\", '\r\n            b'\"metadata\": null, \"numpy_type\": \"int64\", \"name\": \"__index_level_'\r\n            b'0__\"}], \"index_columns\": [\"__index_level_0__\"], \"pandas_version\"'\r\n            b': \"0.22.0.dev0+277.gd61f411\"}'}\r\n\r\nIn [46]: table_without_tz.to_pandas()          # <------ wrong output !\r\nOut[46]: \r\n                                     a\r\n1970-01-01 01:00:00+01:00            1\r\n1970-01-01 01:00:00.000000001+01:00  2\r\n1970-01-01 01:00:00.000000002+01:00  3\r\n\r\nIn [47]: table_without_tz2 = table_without_tz.remove_column(1)\r\n\r\nIn [48]: table_without_tz2\r\nOut[48]: \r\npyarrow.Table\r\na: int64\r\nmetadata\r\n--------\r\n{b'pandas': b'{\"columns\": [{\"pandas_type\": \"int64\", \"metadata\": null, \"numpy_t'\r\n            b'ype\": \"int64\", \"name\": \"a\"}, {\"pandas_type\": \"datetimetz\", \"meta'\r\n            b'data\": {\"timezone\": \"Europe/Brussels\"}, \"numpy_type\": \"datetime6'\r\n            b'4[ns, Europe/Brussels]\", \"name\": \"b\"}, {\"pandas_type\": \"int64\", '\r\n            b'\"metadata\": null, \"numpy_type\": \"int64\", \"name\": \"__index_level_'\r\n            b'0__\"}], \"index_columns\": [\"__index_level_0__\"], \"pandas_version\"'\r\n            b': \"0.22.0.dev0+277.gd61f411\"}'}\r\n\r\nIn [49]: table_without_tz2.to_pandas()     # <------ error !\r\n---------------------------------------------------------------------------\r\nIndexError                                Traceback (most recent call last)\r\n<ipython-input-49-c82f33476c6b> in <module>()\r\n----> 1 table_without_tz2.to_pandas()\r\n\r\ntable.pxi in pyarrow.lib.Table.to_pandas()\r\n\r\n/home/joris/miniconda3/envs/dev/lib/python3.5/site-packages/pyarrow/pandas_compat.py in table_to_blockmanager(options, table, memory_pool, nthreads)\r\n    289         pandas_metadata = json.loads(metadata[b'pandas'].decode('utf8'))\r\n    290         index_columns = pandas_metadata['index_columns']\r\n--> 291         table = _add_any_metadata(table, pandas_metadata)\r\n    292 \r\n    293     block_table = table\r\n\r\n/home/joris/miniconda3/envs/dev/lib/python3.5/site-packages/pyarrow/pandas_compat.py in _add_any_metadata(table, pandas_metadata)\r\n    357     for i, col_meta in enumerate(pandas_metadata['columns']):\r\n    358         if col_meta['pandas_type'] == 'datetimetz':\r\n--> 359             col = table[i]\r\n    360             converted = col.to_pandas()\r\n    361             tz = col_meta['metadata']['timezone']\r\n\r\ntable.pxi in pyarrow.lib.Table.__getitem__()\r\n\r\ntable.pxi in pyarrow.lib.Table.column()\r\n\r\nIndexError: Table column index 1 is out of range\r\n```\r\n\r\nThe reason is that `_add_any_metadata` does not check if the column it is processing (currently only datetime tz columns need such processing) is actually present in the schema.\r\n\r\nWorking on a fix, will submit a PR.\r\n",
        "created_at": "2017-12-04T13:07:22.000Z",
        "updated_at": "2017-12-10T23:41:53.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2017-12-10T23:40:16.000Z"
    },
    "comments": [
        {
            "created_at": "2017-12-10T23:40:16.426Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-1883?focusedCommentId=16285413) by Wes McKinney (wesm):*\nIssue resolved by pull request 1386\n<https://github.com/apache/arrow/pull/1386>"
        }
    ]
}