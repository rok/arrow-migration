{
    "issue": {
        "title": "[Python]  Multiindex levels order is not preserved after a from_pandas/to_pandas",
        "body": "***Note**: This issue was originally created as [ARROW-16580](https://issues.apache.org/jira/browse/ARROW-16580). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nHello,\r\n\r\nNot sure if it's the good place to report this issue but here is what I saw when I tried to convert a multi indexed dataframe (columns) to Table and convert it back to pandas:\r\n\r\n\u00a0\r\n```python\n\r\nimport pandas as pd\r\nimport pyarrow\r\n\r\n# pandas version '1.4.1'\r\n# pyarrow version '8.0.0'\r\n\r\ndf = pd.DataFrame([[100,300, 400], [200,500, 600]], columns=['Toyota', 'Ford', 'Alfa'])\r\nconcatenated = pd.concat([df, df*2], axis=1, keys=['foo', 'bar'])\r\nconcatenated.columns.names = ['l1', 'l2']\r\n\r\ntable = pyarrow.Table.from_pandas(concatenated)\r\nfrom_table_df = table.to_pandas()\r\n\r\nfrom_table_df.columns.levels # == FrozenList([['bar', 'foo'], ['Alfa', 'Ford', 'Toyota']])\r\nconcatenated.columns.levels # == FrozenList([['foo', 'bar'], ['Toyota', 'Ford', 'Alfa']])\r\n\r\n\r\n```\r\nthe order of columns levels is not preserved.\u00a0\r\n\r\n\u00a0",
        "created_at": "2022-05-14T21:53:12.000Z",
        "updated_at": "2022-05-17T09:45:46.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-05-17T09:44:43.198Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16580?focusedCommentId=17538069) by Joris Van den Bossche (jorisvandenbossche):*\n[~Fabien Aulaire] it's certainly the good place to report issue, thanks for the report\r\n\r\nYou are correct that currently the order of the values in each MultiIndex level is not preserved. \r\nTo help with a faithful rountrip of pandas dataframes, pyarrow stores \"pandas\" metadata in its schema (see below), but this does not include the level values itself (it only includes the names of the levels, and then the individual column names, from which the MultiIndex level values are reconstructed). And when reconstructing those values, we use `pd.MultiIndex.from_tuples` (https://github.com/apache/arrow/blob/52a051b1f01669647d8f4d16d7de30c10265dc51/python/pyarrow/pandas_compat.py#L911), which will sort the values lexicographically, I think.\r\n\r\nIn theory, we could add more information about the MultiIndex levels in the pandas metadata, but I am not sure we should do that in this case (the levels can in principle be a large array, and we still need to serialize/deserialize it to some string format).\r\n\r\n\r\n\u2014\r\n\r\nFor your code example above, the pandas metadata look like:\r\n\r\n```Java\n\r\nIn [9]: table.schema.pandas_metadata\r\nOut[9]: \r\n{'index_columns': [{'kind': 'range',\r\n   'name': None,\r\n   'start': 0,\r\n   'stop': 2,\r\n   'step': 1}],\r\n 'column_indexes': [{'name': 'l1',\r\n   'field_name': 'l1',\r\n   'pandas_type': 'unicode',\r\n   'numpy_type': 'object',\r\n   'metadata': {'encoding': 'UTF-8'}},\r\n  {'name': 'l2',\r\n   'field_name': 'l2',\r\n   'pandas_type': 'unicode',\r\n   'numpy_type': 'object',\r\n   'metadata': {'encoding': 'UTF-8'}}],\r\n 'columns': [{'name': \"('foo', 'Toyota')\",\r\n   'field_name': \"('foo', 'Toyota')\",\r\n   'pandas_type': 'int64',\r\n   'numpy_type': 'int64',\r\n   'metadata': None},\r\n  {'name': \"('foo', 'Ford')\",\r\n   'field_name': \"('foo', 'Ford')\",\r\n   'pandas_type': 'int64',\r\n   'numpy_type': 'int64',\r\n   'metadata': None},\r\n  {'name': \"('foo', 'Alfa')\",\r\n   'field_name': \"('foo', 'Alfa')\",\r\n   'pandas_type': 'int64',\r\n   'numpy_type': 'int64',\r\n   'metadata': None},\r\n  {'name': \"('bar', 'Toyota')\",\r\n   'field_name': \"('bar', 'Toyota')\",\r\n   'pandas_type': 'int64',\r\n   'numpy_type': 'int64',\r\n   'metadata': None},\r\n  {'name': \"('bar', 'Ford')\",\r\n   'field_name': \"('bar', 'Ford')\",\r\n   'pandas_type': 'int64',\r\n   'numpy_type': 'int64',\r\n   'metadata': None},\r\n  {'name': \"('bar', 'Alfa')\",\r\n   'field_name': \"('bar', 'Alfa')\",\r\n   'pandas_type': 'int64',\r\n   'numpy_type': 'int64',\r\n   'metadata': None}],\r\n 'creator': {'library': 'pyarrow', 'version': '8.0.0.dev589+g57f1a166b'},\r\n 'pandas_version': '1.4.1'}\r\n```\r\n\r\n"
        }
    ]
}