{
    "issue": {
        "title": "[Plasma] test_plasma_list test failure on Ubuntu 14.04",
        "body": "***Note**: This issue was originally created as [ARROW-3241](https://issues.apache.org/jira/browse/ARROW-3241). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThis test fails consistently for me on Ubuntu 14.04 / Python 3.6.5\r\n\r\n```Java\n\r\npyarrow/tests/test_plasma.py::test_plasma_list FAILED                                                                                                                                   [ 83%]\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> captured stderr >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\nAllowing the Plasma store to use up to 0.1GB of memory.\r\nStarting object store with directory /dev/shm and huge page support disabled\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> traceback >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n\r\n    @pytest.mark.plasma\r\n    def test_plasma_list():\r\n        import pyarrow.plasma as plasma\r\n    \r\n        with plasma.start_plasma_store(\r\n                plasma_store_memory=DEFAULT_PLASMA_STORE_MEMORY) \\\r\n                as (plasma_store_name, p):\r\n            plasma_client = plasma.connect(plasma_store_name, \"\", 0)\r\n    \r\n# Test sizes\r\n            u, _, _ = create_object(plasma_client, 11, metadata_size=7, seal=False)\r\n            l1 = plasma_client.list()\r\n            assert l1[u][\"data_size\"] == 11\r\n            assert l1[u][\"metadata_size\"] == 7\r\n    \r\n# Test ref_count\r\n            v = plasma_client.put(np.zeros(3))\r\n            l2 = plasma_client.list()\r\n# Ref count has already been released\r\n            assert l2[v][\"ref_count\"] == 0\r\n            a = plasma_client.get(v)\r\n            l3 = plasma_client.list()\r\n>           assert l3[v][\"ref_count\"] == 1\r\nE           assert 0 == 1\r\n\r\npyarrow/tests/test_plasma.py:825: AssertionError\r\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> entering PDB >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n> /home/wesm/code/arrow/python/pyarrow/tests/test_plasma.py(825)test_plasma_list()\r\n-> assert l3[v][\"ref_count\"] == 1\r\n\r\n```",
        "created_at": "2018-09-16T01:33:16.000Z",
        "updated_at": "2018-09-17T16:10:05.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2018-09-17T16:10:05.000Z"
    },
    "comments": [
        {
            "created_at": "2018-09-16T13:58:33.818Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3241?focusedCommentId=16616737) by Wes McKinney (wesm):*\nThis works for me with the codebase as of when this test was added https://github.com/apache/arrow/commit/628b74b0de0a3d7ea6d7f424f605922fb8637b46 in ARROW-3116. I'm going to bisect to see if I can find the commit where it broke"
        },
        {
            "created_at": "2018-09-16T14:42:35.822Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3241?focusedCommentId=16616754) by Wes McKinney (wesm):*\nHaving a hard time pinpointing the offending change. When I cleared out ccache and recompiled I actually am getting a core dump in\r\n\r\n```Java\n\r\npython -c \"from pyarrow import plasma; print(plasma.ObjectID.from_random())\"\r\n```\r\n\r\ngdb doesn't report anything useful, but valgrind shows (still inconclusive):\r\n\r\n```Java\n\r\n==7126== Invalid read of size 4\r\n==7126==    at 0x1EB5AC76: __exchange_and_add (atomicity.h:49)\r\n==7126==    by 0x1EB5AC76: __exchange_and_add_dispatch (atomicity.h:82)\r\n==7126==    by 0x1EB5AC76: std::string::_Rep::_M_dispose(std::allocator<char> const&) (basic_string.h:3151)\r\n==7126==    by 0x1EB5ACA4: std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (basic_string.h:3498)\r\n==7126==    by 0x5EE61A8: __run_exit_handlers (exit.c:82)\r\n==7126==    by 0x5EE61F4: exit (exit.c:104)\r\n==7126==    by 0x5ECBF4B: (below main) (libc-start.c:321)\r\n==7126==  Address 0x185e2e10 is 16 bytes inside a block of size 67 free'd\r\n==7126==    at 0x4C2CD9D: operator delete(void*) (vg_replace_malloc.c:576)\r\n==7126==    by 0x1EB5ACA4: std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (basic_string.h:3498)\r\n==7126==    by 0x5EE61A8: __run_exit_handlers (exit.c:82)\r\n==7126==    by 0x5EE61F4: exit (exit.c:104)\r\n==7126==    by 0x5ECBF4B: (below main) (libc-start.c:321)\r\n==7126==  Block was alloc'd at\r\n==7126==    at 0x4C2B4A5: operator new(unsigned long) (vg_replace_malloc.c:334)\r\n==7126==    by 0x1EB5ABBE: allocate (new_allocator.h:111)\r\n==7126==    by 0x1EB5ABBE: std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&) (basic_string.tcc:1057)\r\n==7126==    by 0x1EB5B43A: std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long) (basic_string.tcc:1078)\r\n==7126==    by 0x1EB5B8CE: std::string::assign(std::string const&) (basic_string.tcc:699)\r\n==7126==    by 0x243E0AB7: arrow::CpuInfo::Init() (cpu-info.cc:232)\r\n==7126==    by 0x243F82DD: arrow::compute::FunctionContext::FunctionContext(arrow::MemoryPool*) (context.cc:30)\r\n==7126==    by 0x23D7A58C: __pyx_pf_7pyarrow_3lib_16_FunctionContext___cinit__(__pyx_obj_7pyarrow_3lib__FunctionContext*) (lib.cpp:37562)\r\n==7126==    by 0x23D7A520: __pyx_pw_7pyarrow_3lib_16_FunctionContext_1__cinit__(_object*, _object*, _object*) (lib.cpp:37543)\r\n==7126==    by 0x23D7A012: __pyx_tp_new_7pyarrow_3lib__FunctionContext(_typeobject*, _object*, _object*) (lib.cpp:118295)\r\n==7126==    by 0x4F1DE32: type_call (typeobject.c:895)\r\n==7126==    by 0x23C5AA87: __Pyx_PyObject_Call(_object*, _object*, _object*) (lib.cpp:133942)\r\n==7126==    by 0x23C99DFD: __Pyx_PyObject_CallNoArg(_object*) (lib.cpp:134640)\r\n==7126== \r\n==7126== Invalid free() / delete / delete[] / realloc()\r\n==7126==    at 0x4C2CD9D: operator delete(void*) (vg_replace_malloc.c:576)\r\n==7126==    by 0x1EB5ACA4: std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (basic_string.h:3498)\r\n==7126==    by 0x5EE61A8: __run_exit_handlers (exit.c:82)\r\n==7126==    by 0x5EE61F4: exit (exit.c:104)\r\n==7126==    by 0x5ECBF4B: (below main) (libc-start.c:321)\r\n==7126==  Address 0x185e2e00 is 0 bytes inside a block of size 67 free'd\r\n==7126==    at 0x4C2CD9D: operator delete(void*) (vg_replace_malloc.c:576)\r\n==7126==    by 0x1EB5ACA4: std::basic_string<char, std::char_traits<char>, std::allocator<char> >::~basic_string() (basic_string.h:3498)\r\n==7126==    by 0x5EE61A8: __run_exit_handlers (exit.c:82)\r\n==7126==    by 0x5EE61F4: exit (exit.c:104)\r\n==7126==    by 0x5ECBF4B: (below main) (libc-start.c:321)\r\n==7126==  Block was alloc'd at\r\n==7126==    at 0x4C2B4A5: operator new(unsigned long) (vg_replace_malloc.c:334)\r\n==7126==    by 0x1EB5ABBE: allocate (new_allocator.h:111)\r\n==7126==    by 0x1EB5ABBE: std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&) (basic_string.tcc:1057)\r\n==7126==    by 0x1EB5B43A: std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long) (basic_string.tcc:1078)\r\n==7126==    by 0x1EB5B8CE: std::string::assign(std::string const&) (basic_string.tcc:699)\r\n==7126==    by 0x243E0AB7: arrow::CpuInfo::Init() (cpu-info.cc:232)\r\n==7126==    by 0x243F82DD: arrow::compute::FunctionContext::FunctionContext(arrow::MemoryPool*) (context.cc:30)\r\n==7126==    by 0x23D7A58C: __pyx_pf_7pyarrow_3lib_16_FunctionContext___cinit__(__pyx_obj_7pyarrow_3lib__FunctionContext*) (lib.cpp:37562)\r\n==7126==    by 0x23D7A520: __pyx_pw_7pyarrow_3lib_16_FunctionContext_1__cinit__(_object*, _object*, _object*) (lib.cpp:37543)\r\n==7126==    by 0x23D7A012: __pyx_tp_new_7pyarrow_3lib__FunctionContext(_typeobject*, _object*, _object*) (lib.cpp:118295)\r\n==7126==    by 0x4F1DE32: type_call (typeobject.c:895)\r\n==7126==    by 0x23C5AA87: __Pyx_PyObject_Call(_object*, _object*, _object*) (lib.cpp:133942)\r\n==7126==    by 0x23C99DFD: __Pyx_PyObject_CallNoArg(_object*) (lib.cpp:134640)\r\n```"
        },
        {
            "created_at": "2018-09-16T14:46:19.438Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3241?focusedCommentId=16616758) by Wes McKinney (wesm):*\nThe core dump is a double free\r\n\r\n```Java\n\r\n$ python -c \"from pyarrow import plasma; print(plasma.ObjectID.from_random())\"\r\nObjectID(a5a98635880d79881b122741dcab735203f01ce6)\r\n*** Error in `python': double free or corruption (fasttop): 0x00000000025f1b90 ***\r\nAborted (core dumped)\r\n```\r\n\r\nI suspect what is going on is that there are two copies of the `model_name_` static field:\r\n\r\nhttps://github.com/apache/arrow/blob/master/cpp/src/arrow/util/cpu-info.h#L90\r\n\r\nThis issue is probably non-deterministic. I will see if making some changes to the CpuInfo (to remove the static member) helps matters"
        },
        {
            "created_at": "2018-09-17T16:10:05.131Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3241?focusedCommentId=16617745) by Wes McKinney (wesm):*\nResolved by https://github.com/apache/arrow/commit/c698be339b96aeb74763d70de1cf4c8789148824"
        }
    ]
}