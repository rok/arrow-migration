{
    "issue": {
        "title": "[Rust] [BREAKING] Lists should take Field instead of DataType",
        "body": "***Note**: This issue was originally created as [ARROW-10261](https://issues.apache.org/jira/browse/ARROW-10261). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThere is currently no way of tracking nested field metadata on lists. For example, if a list's children are nullable, there's no way of telling just by looking at the Field.\r\n\r\nThis causes problems with integration testing, and also affects Parquet roundtrips.\r\n\r\nI propose the breaking change of [Large\\|FixedSize]List taking a Field instead of Box<DataType>, as this will overcome this issue, and ensure that the Rust implementation passes integration tests.\r\n\r\nCC `[~andygrove]` `[~jorgecarleitao]` `[~alamb]` \u00a0 `[~jhorstmann]` ( `[~carols10cents]` \u00a0as this addresses some of the roundtrip failures).\r\n\r\nI'm leaning towards this landing in 3.0.0, as I'd love for us to have completed or made significant traction on the Arrow Parquet writer (and reader), and integration testing, by then.",
        "created_at": "2020-10-10T01:31:06.000Z",
        "updated_at": "2020-11-07T12:19:08.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Integration",
            "Component: Rust",
            "Type: task"
        ],
        "closed": true,
        "closed_at": "2020-11-07T12:18:57.000Z"
    },
    "comments": [
        {
            "created_at": "2020-10-10T03:49:41.728Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10261?focusedCommentId=17211537) by Jorge Leit\u00e3o (jorgecarleitao):*\nMakes sense to me. :)"
        },
        {
            "created_at": "2020-10-10T10:16:03.939Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10261?focusedCommentId=17211650) by J\u00f6rn Horstmann (jhorstmann):*\nFor my understanding, this is about metadata? So even if there are no null values in one batch or partition you want to mark the elements as potentially nullable?"
        },
        {
            "created_at": "2020-10-10T10:27:56.718Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10261?focusedCommentId=17211654) by Neville Dipale (nevi_me):*\n`[~jhorstmann]` \u00a0nullability should be determined by the overall field for consistency; as you could have 1000 batches of 1000 records, but only have say 5 nulls scattered around.\r\n\r\nThe main issue is that if I have a non-nullable list, which in turn has a nullable struct with various child fields with differing nullability; I won't know if the struct is nullable, because I lose that information when only taking the field.\r\n\r\nAlso, in the hypothetical case where the struct has some metadata of its own, it gets lost because we would only keep the DataType, and not other attributes such as dictionary or metadata (HashMap<String, String>).\r\n\r\nInterestingly, looking at the CPP implementation, it looks like they still use List<DataType>, but I can't see how they preserve the extra details that the Rust implementation is failing because of. `[~apitrou]` \u00a0any ideas?"
        },
        {
            "created_at": "2020-10-10T11:21:31.311Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10261?focusedCommentId=17211667) by Andrew Lamb (alamb):*\n[~nevi_me] \u2013 this proposal makes sense to me and I think it brings the Rust implementation closer to the C++ implementation, which is a good thing. \r\n\r\nFrom my (cursory) reading of the C+, it appears [source link](https://github.com/apache/arrow/blob/master/cpp/src/arrow/type.h#L539-L546) that Lists in C+ use `Field` rather than `DataType` do describe each list item's type as well"
        },
        {
            "created_at": "2020-10-19T12:43:45.185Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10261?focusedCommentId=17216687) by Antoine Pitrou (apitrou):*\nIndeed, C++ uses `List<Field>`."
        },
        {
            "created_at": "2020-11-07T12:18:57.656Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-10261?focusedCommentId=17227792) by Neville Dipale (nevi_me):*\nIssue resolved by pull request 8608\n<https://github.com/apache/arrow/pull/8608>"
        }
    ]
}