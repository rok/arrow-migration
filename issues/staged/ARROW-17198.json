{
    "issue": {
        "title": "[C++] Potential memory leak at shutdown if an exec plan with a scanner fails or is aborted immediately before shutdown",
        "body": "***Note**: This issue was originally created as [ARROW-17198](https://issues.apache.org/jira/browse/ARROW-17198). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI'm primarily creating this so we can remember to make a test for this.  This problem should be solved as part of ARROW-16072.  When the scanner fails it simply discards references to the various scanner AsyncGenerators.  However, some I/O tasks may still have references to these generators and so some parts of the scanner survive after the plan itself is marked complete.  If there is an immediate shutdown then these parts will not be properly disposed of even though the plan is marked complete and it will show up as a memory leak.\r\n\r\nExample:\r\n\r\nhttps://pipelines.actions.githubusercontent.com/serviceHosts/8bb0d999-3387-4c48-9fa6-c66c718a46e2/_apis/pipelines/1/runs/359690/signedlogcontent/4?urlExpires=2022-07-25T14%3A43%3A01.2797488Z&urlSigningMethod=HMACV1&urlSignature=GS3lS09Q9sTRweN%2B8UEu2GwUGc%2FbO9eyH27FRKumbrg%3D",
        "created_at": "2022-07-25T15:39:34.000Z",
        "updated_at": "2022-07-25T15:40:20.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: bug"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-07-25T15:40:20.476Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-17198?focusedCommentId=17570962) by Weston Pace (westonpace):*\nI'm able to reproduce this by compiling with ASAN, using stress to make the CPU busy, and running the following command:\r\n\r\n```\n\r\nwhile taskset -c 0,1 ./debug/arrow-dataset-scanner-test --gtest_filter=TestScannerThreading/TestScanner.FromReader/3Threaded2d16b1024r; do sleep 0.1; done\r\n```"
        }
    ]
}