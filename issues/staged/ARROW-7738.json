{
    "issue": {
        "title": "[JS] Implement list contains predicate",
        "body": "***Note**: This issue was originally created as [ARROW-7738](https://issues.apache.org/jira/browse/ARROW-7738). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nAs far as I can see there is no way to check if a list contains a specific element.\r\n\r\nMy code is as follows:\r\n\r\n\u00a0\r\n```java\n\r\nvar listChild = new arrow.Field('list[Utf8]', new arrow.Utf8())\r\n\r\nvar all = arrow.Table.new([\r\n arrow.DateVector.from(dates),\r\n arrow.Int32Vector.from(flumeseqs),\r\n arrow.Utf8Vector.from(keys),\r\n arrow.Vector.from({ values: authors, type: new arrow.Dictionary(new arrow.Utf8(), new arrow.Int32()) }),\r\n arrow.Int32Vector.from(sequences),\r\n arrow.Vector.from({ values: types, type: new arrow.Dictionary(new arrow.Utf8(), new arrow.Int32()) }),\r\n arrow.Vector.from({ values: links, type: new arrow.List(listChild) }),\r\n ], [\"date\", \"flumeseq\", \"key\", \"author\", \"sequence\", \"type\", \"links\"])\r\n```\r\nAnd I want to get all the items that has a specific element in the links section.\r\n\r\nSo something like:\r\n\r\n\u00a0\r\n```java\n\r\nvar q2 = Array.from(\r\nall.filter(\r\n arrow.predicate.col('links').contains('%GcvjVk+NLsjOB5Vd+vceGXEOeYmHoRA6lgXVJzPuMxw=.sha256')))\r\n```\r\n\u00a0\r\n\r\n\u00a0",
        "created_at": "2020-02-01T14:30:41.000Z",
        "updated_at": "2020-04-18T22:26:10.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: JavaScript",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2020-04-18T21:03:42.244Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7738?focusedCommentId=17086650) by Anders Rune Jensen (arj):*\nFor future travelers this can be done using something like:\r\n\r\n\u00a0\r\n```java\n\r\n    const link = '%TbiUknx1XfDdxccudfDds54hfzVNCjh2N99KXtLuyVc=.sha256'\r\n    const uLink = new TextEncoder(\"utf-8\").encode(link);\r\n    \r\n    var q2 = Array.from(\r\n      all.filter(\r\n        arrow.predicate.custom(\r\n          (idx) => {\r\n            var l = get_links(idx)\r\n            if (l.length > 0) {\r\n              for (var o = 0; o < l.valueOffsets.length - 1; ++o) {\r\n                var start = l.valueOffsets[o], end = l.valueOffsets[o+1]\r\n                if (end - start != uLink.length) continue                \r\n\r\n                var found = true\r\n                for (var i = start; i < end; ++i) {\r\n                  if (l.values[i] != uLink[i-start]) {\r\n                    found = false\r\n                    break\r\n                  }\r\n                }\r\n                if (found) return true\r\n              }\r\n              return false\r\n            } else\r\n              return false\r\n          },\r\n          (batch) => {\r\n            get_links = arrow.predicate.col('links').bind(batch)\r\n          })\r\n      )\r\n    )\r\n```"
        }
    ]
}