{
    "issue": {
        "title": "[C++] Implementation of ExecuteScalarExpressionOverhead benchmarks without arrow for comparision",
        "body": "***Note**: This issue was originally created as [ARROW-16599](https://issues.apache.org/jira/browse/ARROW-16599). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThe ExecuteScalarExpressionOverhead group of benchmarks for now gives us values we can compare to different batch sizes, or to different expressions. But we don't really see how well arrow does compared to what is possible in general.\r\n\r\nThe simple_expression and (negate x) complex_expression (x>0 and x<20) benchmarks, which perform an actual operation on data, can be implemented in pure C++ for comparison.\r\n\r\nI implemented complex_expression benchmark using technically unnecessary intermediate buffers for the > and < operator results, to match what happens in the arrow expression.\r\n\r\nWhat may seem unfair is that I currently re-use the input/output/intermediate buffers over all iterations. I also tried using new and delete each time, but could not measure a difference in performance. Reusing allowes to use std::vector for sightly cleaner code. Re-creating a vector each time would results in a lot of overhead initializing the vector values and is therefore not useful.\r\n\r\nExample output: [example-output-baseline.txt](example-output-baseline.txt)",
        "created_at": "2022-05-17T19:18:47.000Z",
        "updated_at": "2022-07-06T01:01:29.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: task"
        ],
        "closed": true,
        "closed_at": "2022-07-06T01:01:29.000Z"
    },
    "comments": [
        {
            "created_at": "2022-07-06T01:01:29.788Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16599?focusedCommentId=17562912) by Weston Pace (westonpace):*\nIssue resolved by pull request 13179\n<https://github.com/apache/arrow/pull/13179>"
        }
    ]
}