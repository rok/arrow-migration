{
    "issue": {
        "title": "[C++] Optimize performance for aggregate min/max compute kernels",
        "body": "***Note**: This issue was originally created as [ARROW-9605](https://issues.apache.org/jira/browse/ARROW-9605). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n1. Use\u00a0BitBlockCounter to speedup the performance for typical 0.01% null-able data.\n1. Enable AVX compiler auto vectorize for no-nulls on int types. Float/Double use fmin/fmax to handle NaN which can't be\u00a0vectorize by\u00a0compiler.",
        "created_at": "2020-07-31T03:06:27.000Z",
        "updated_at": "2020-09-02T13:35:50.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-09-02T13:35:43.000Z"
    },
    "comments": [
        {
            "created_at": "2020-09-02T13:35:44.023Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-9605?focusedCommentId=17189240) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 7871\n<https://github.com/apache/arrow/pull/7871>"
        }
    ]
}