{
    "issue": {
        "title": "[Java] Provide composite comparator",
        "body": "***Note**: This issue was originally created as [ARROW-6911](https://issues.apache.org/jira/browse/ARROW-6911). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nA composite comparator is a sub-class of VectorValueComparator that contains an array of inner comparators, with each comparator corresponding to one column for comparison. It can be used to support sort/comparison operations for VectorSchemaRoot/StructVector.\r\n\r\nThe composite comparator works like this: it first uses the first internal comparator (for the primary sort key) to compare vector values. If it gets a non-zero value, we just return it; otherwise, we use the second comparator to break the tie, and so on, until a non-zero value is produced by some internal comparator, or all internal comparators have been used. \r\n",
        "created_at": "2019-10-17T04:15:11.000Z",
        "updated_at": "2019-11-08T03:36:15.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Java",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2019-11-08T03:36:15.000Z"
    },
    "comments": [
        {
            "created_at": "2019-11-08T03:36:15.447Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6911?focusedCommentId=16969801) by Micah Kornfield (emkornfield@gmail.com):*\nIssue resolved by pull request 5678\n<https://github.com/apache/arrow/pull/5678>"
        }
    ]
}