{
    "issue": {
        "title": "[R] Add slice() method",
        "body": "***Note**: This issue was originally created as [ARROW-13767](https://issues.apache.org/jira/browse/ARROW-13767). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nRescoped to be just `slice()`. The other functions were implemented in ARROW-13766.\r\n\r\nOriginal description:\r\n\r\n-----\r\n\r\nImplement\u00a0[`slice()`, `slice_head()`, and `slice_tail()`](https://dplyr.tidyverse.org/reference/slice.html) methods for\u00a0`ArrowTabular`, `Dataset`,\u00a0and `arrow_dplyr_query`\u00a0objects . I believe this should be relatively straightforward, using\u00a0`Take()` to return only the specified rows. We already have a `head()`\u00a0method which I believe we can reuse for `slice_head()`.",
        "created_at": "2021-08-26T15:40:15.000Z",
        "updated_at": "2022-10-14T01:20:02.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: R",
            "Type: task"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-08-30T06:30:43.663Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13767?focusedCommentId=17406580) by Joris Van den Bossche (jorisvandenbossche):*\nJust a note that there is also a C++ `Table::Slice` method that can already be directly used for this (not a compute kernel, though, but method on the Table). The `pyarrow.Table.slice` method uses that (https://github.com/apache/arrow/blob/26a34c3a2300620787806c5a8cee08ff30610e3e/python/pyarrow/table.pxi#L1307-L1334)."
        },
        {
            "created_at": "2021-08-30T15:18:35.774Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13767?focusedCommentId=17406779) by Neal Richardson (npr):*\nRight, we use Slice internally"
        },
        {
            "created_at": "2021-09-20T13:57:09.166Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13767?focusedCommentId=17417668) by Neal Richardson (npr):*\nI'm not sure about these (and about head/tail in general now) since dataset scans are no longer in deterministic order. How do dbplyr backends support these for databases that behave similarly?"
        },
        {
            "created_at": "2021-09-20T20:50:06.332Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13767?focusedCommentId=17417808) by Joris Van den Bossche (jorisvandenbossche):*\n> since dataset scans are no longer in deterministic order\r\n\r\nWhat do you mean exactly? (did something change recently? I thought the scans _can_ have deterministic order if needed) For example the Scanner has a `Head` method to returns the first n rows (I would suppose this is deterministic?)\r\n"
        },
        {
            "created_at": "2021-09-20T21:26:08.630Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13767?focusedCommentId=17417818) by Weston Pace (westonpace):*\nThis is an interesting question.  The datasets API does have an ordered scan.  This is used by the head method.\r\n\r\nHowever, R has moved away from the datasets API and is using the exec plan directly now.  The datasets API's ordering is not part of the exec plan."
        },
        {
            "created_at": "2021-09-20T22:07:16.302Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13767?focusedCommentId=17417826) by Jonathan Keane (jonkeane):*\nThe [dplyr docs say they \"do not work with relational databases\"](https://dplyr.tidyverse.org/reference/slice.html#details)\r\n\r\nThough, IME, many real-world uses of `slice()`, `slice_head()`, `slice_tail()` happen after an arrange:\r\n\r\n```r\n\r\nlibrary(dplyr)\r\n\r\nmtcars %>% \r\n  group_by(cyl) %>% \r\n  arrange(mpg) %>% \r\n  slice_head(n = 2)\r\n```\r\n\r\nThese are better written using `slice_min()`, though there has been some evolution around that + `top_n()` and the like. I've seen code like the above (with `arrange` + `slice_head`) a lot.\r\n"
        },
        {
            "created_at": "2021-09-20T23:48:23.563Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13767?focusedCommentId=17417848) by Weston Pace (westonpace):*\nThis has come up a few times and I think the resolution is always \"we'll probably have to figure that out at some point\" so I went ahead and sent something to the ML so we can have the conversation."
        },
        {
            "created_at": "2022-02-28T10:43:37.337Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13767?focusedCommentId=17498834) by Vitalie Spinu (vspinu):*\nThis one turned to be a blocker for us during a conversion of a project from a SQL DB to\u00a0 arrow dataset.\r\n\r\nHow does one go with slicing within a group before this issue is fixed?\u00a0\r\n```java\n\r\ntbl %>%\u00a0\r\n\u00a0 group_by(simulator, model) %>%\r\n\u00a0 slice(n = 1) %>%\r\n\u00a0 collect()\n```"
        }
    ]
}