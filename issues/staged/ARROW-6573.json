{
    "issue": {
        "title": "[Python] Segfault when writing to parquet",
        "body": "***Note**: This issue was originally created as [ARROW-6573](https://issues.apache.org/jira/browse/ARROW-6573). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nWhen attempting to write out a pyarrow table to parquet I am observing a segfault when there is a mismatch between the schema and the datatypes.\u00a0\r\n\r\nHere is a reproducible example:\r\n\r\n\u00a0\r\n```java\n\r\nimport pyarrow as pa\r\nimport pyarrow.parquet as pq\r\n\r\ndata = dict()\r\ndata[\"key\"] = [0, 1, 2, 3] # segfault\r\n#data[\"key\"] = [\"0\", \"1\", \"2\", \"3\"] # no segfault\r\n\r\nschema = pa.schema({\"key\" : pa.string()})\r\n\r\ntable = pa.Table.from_pydict(data, schema = schema)\r\nprint(\"now writing out test file\")\r\npq.write_table(table, \"test.parquet\")\u00a0\r\n```\r\nThis results in a segfault when writing the table. Running\u00a0\r\n\r\n\u00a0\r\n```java\n\r\ngdb -ex r --args python test.py \r\n```\r\nYields\r\n\r\n\u00a0\r\n\r\n\u00a0\r\n```\n\r\nProgram received signal SIGSEGV, Segmentation fault. 0x00007fffe8173917 in virtual thunk to parquet::DictEncoderImpl<parquet::DataType<(parquet::Type::type)6> >::Put(parquet::ByteArray const*, int) () from /net/fantasia/home/jweinstk/anaconda3/lib/python3.7/site-packages/pyarrow/libparquet.so.14\r\n```\r\n\u00a0\r\n\r\n\u00a0\r\n\r\nThanks for all of your arrow work,\r\n\r\nJosh",
        "created_at": "2019-09-16T19:01:36.000Z",
        "updated_at": "2019-09-19T02:29:10.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-09-19T02:28:56.000Z"
    },
    "comments": [
        {
            "created_at": "2019-09-18T17:20:47.147Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6573?focusedCommentId=16932691) by Wes McKinney (wesm):*\nThis raises an exception in master\r\n\r\n```Java\n\r\nimport pyarrow as pa\r\nimport pyarrow.parquet as pq\r\n\r\ndata = dict()\r\ndata[\"key\"] = [0, 1, 2, 3] # segfault\r\n#data[\"key\"] = [\"0\", \"1\", \"2\", \"3\"] # no segfault\r\n\r\nschema = pa.schema({\"key\" : pa.string()})\r\n\r\ntable = pa.Table.from_pydict(data, schema = schema)\r\nprint(\"now writing out test file\")\r\npq.write_table(table, \"test.parquet\")\r\n\r\n## -- End pasted text --\r\n---------------------------------------------------------------------------\r\nArrowTypeError                            Traceback (most recent call last)\r\n<ipython-input-1-1ff07de63b32> in <module>\r\n      8 schema = pa.schema({\"key\" : pa.string()})\r\n      9 \r\n---> 10 table = pa.Table.from_pydict(data, schema = schema)\r\n     11 print(\"now writing out test file\")\r\n     12 pq.write_table(table, \"test.parquet\")\r\n\r\n~/code/arrow/python/pyarrow/types.pxi in __iter__()\r\n\r\n~/code/arrow/python/pyarrow/array.pxi in pyarrow.lib.array()\r\n\r\n~/code/arrow/python/pyarrow/array.pxi in pyarrow.lib._sequence_to_array()\r\n\r\n~/code/arrow/python/pyarrow/error.pxi in pyarrow.lib.check_status()\r\n\r\nArrowTypeError: Expected a string or bytes object, got a 'int' object\r\nIn ../src/arrow/python/common.h, line 241, code: FromBinary(obj, \"a string or bytes object\")\r\nIn ../src/arrow/python/python_to_arrow.cc, line 549, code: string_view_.FromString(obj, &is_utf8)\r\nIn ../src/arrow/python/python_to_arrow.cc, line 570, code: Append(obj, &is_full)\r\nIn ../src/arrow/python/iterators.h, line 70, code: func(value, static_cast<int64_t>(i), &keep_going)\r\nIn ../src/arrow/python/python_to_arrow.cc, line 1097, code: converter->AppendMultiple(seq, size)\r\n```\r\n\r\nMight want to add a unit test, though"
        },
        {
            "created_at": "2019-09-19T02:28:56.991Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6573?focusedCommentId=16932999) by Wes McKinney (wesm):*\nIssue resolved by pull request 5426\n<https://github.com/apache/arrow/pull/5426>"
        }
    ]
}