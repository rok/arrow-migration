{
    "issue": {
        "title": "[C++] CSV reader: Ability to not infer column types.",
        "body": "***Note**: This issue was originally created as [ARROW-5811](https://issues.apache.org/jira/browse/ARROW-5811). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI'm trying to read CSV as is. All columns as strings. I don't know the schema of these CSVs and they will vary as they are provided by user.\r\n\r\nRight now i'm using pandas.read_csv(dtype=str) which works great, but since final destination of these CSVs are parquet files it seems like much more efficient to use pyarrow.csv.read_csv in future, as soon as this becomes available :)\r\n\r\nI tried things like `pyarrow.csv.read_csv(convert_types=ConvertOptions(columns_types=defaultdict(lambda: 'string')))` but it doesn't work.\r\n\r\nMaybe I just didnt' find something that already exists? :)",
        "created_at": "2019-06-30T21:42:18.000Z",
        "updated_at": "2020-01-07T23:44:44.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2019-07-01T08:58:40.773Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5811?focusedCommentId=16876025) by Antoine Pitrou (apitrou):*\nNo, `convert_types` must be the full mapping of column names to data types. C++ doesn't know about `defaultdict`...\r\n\r\nWe could add more inference options, though, for example to select the datatypes for which inference is enabled."
        },
        {
            "created_at": "2019-07-17T15:22:07.493Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5811?focusedCommentId=16887162) by Antoine Pitrou (apitrou):*\n`[~wesmckinn]` `[~npr]` do you have an idea about a desirable API here?"
        },
        {
            "created_at": "2019-07-17T15:26:03.431Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5811?focusedCommentId=16887166) by Wes McKinney (wesm):*\nI think we need to create an abstract C++ type (or similar) that is a `ConversionRule`. We have other types of conversion rules where we have not defined an API yet, for example \"timestamp with striptime-like format of $FORMAT\". Whatever API we have, it needs to be extensible to accommodate new kinds of logic"
        },
        {
            "created_at": "2019-07-17T15:31:36.218Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5811?focusedCommentId=16887170) by Neal Richardson (npr):*\nI think I'm not understanding the problem. What's missing from the `column_types`\u00a0we already support?\u00a0<https://github.com/apache/arrow/blob/master/cpp/src/arrow/csv/options.h#L69>"
        },
        {
            "created_at": "2019-07-17T15:33:38.673Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5811?focusedCommentId=16887172) by Antoine Pitrou (apitrou):*\nThe request is for no inference to occur, without knowing the column names or the number of columns in advance (so you cannot pass an explicit `column_types`)."
        },
        {
            "created_at": "2019-07-17T15:41:46.370Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5811?focusedCommentId=16887183) by Neal Richardson (npr):*\nIn principle, a user could parse the header row of the CSV separately to identify the column names, then use that to\u00a0define `column_types` mapping each name to string type. So are we just talking about how to facilitate that, whether/how to internalize that logic and expose it as a simple argument? Or is there something else?\r\n\r\nIf `column_types` didn't have to be a map, maybe that would help. Perhaps it could also accept an array of length equal to the number of columns, or a single value, in which case it would recycle that type for every column.\u00a0\r\n\r\n\u00a0"
        },
        {
            "created_at": "2019-07-17T15:48:15.527Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5811?focusedCommentId=16887187) by Antoine Pitrou (apitrou):*\nWe're talking about C++ here. Dynamic typing isn't terribly idiomatic (though it's possible using std::variant) :-)"
        },
        {
            "created_at": "2019-07-17T15:56:28.491Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5811?focusedCommentId=16887195) by Wes McKinney (wesm):*\nYeah, so we could define a conversion rule to return string or binary, and then add an option to set a default conversion rule (where currently we have an implicit default of \"use type inference\")"
        }
    ]
}