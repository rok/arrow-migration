{
    "issue": {
        "title": "[C++] Investigate use of google/crc32c vs xxhash in Plasma",
        "body": "***Note**: This issue was originally created as [ARROW-2200](https://issues.apache.org/jira/browse/ARROW-2200). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nI'm looking into Plasma's use of XXH64 hash library, and whether we can replace it with google/crc32c.\r\n\u00a0\r\nHere's my build\u00a0[change](https://github.com/concretevitamin/arrow/commit/e4abaddf55255bf2e773b1094287bfd99a6dfb69).\u00a0\r\n\u00a0\r\nWith this change, for some reason, the plasma_static library did NOT get linked into libcrc32c.a (which is successfully built), whereas plasma_shared and plasma_store did link with it:\r\n\u00a0\r\n-----------------------\r\n\u00a0\u00bb tail ./src/plasma/CMakeFiles/plasma_\\{static,shared,store}.dir/link.txt\r\n==> ./src/plasma/CMakeFiles/plasma_static.dir/link.txt <==\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ar qc ../../release/libplasma.a\u00a0 CMakeFiles/plasma_objlib.dir/client.cc.o CMakeFiles/plasma_objlib.dir/common.cc.o CMakeFiles/plasma_objlib.dir/eviction_policy.cc.o CMakeFiles/plasma_objlib.dir/events.cc.o CMakeFiles/plasma_objlib.dir/fling.cc.o CMakeFiles/plasma_objlib.dir/io.cc.o CMakeFiles/plasma_objlib.dir/malloc.cc.o CMakeFiles/plasma_objlib.dir/plasma.cc.o CMakeFiles/plasma_objlib.dir/protocol.cc.o CMakeFiles/plasma_objlib.dir/thirdparty/ae/ae.c.o CMakeFiles/plasma_objlib.dir/thirdparty/xxhash.cc.o\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ranlib ../../release/libplasma.a\r\n\u00a0\r\n==> ./src/plasma/CMakeFiles/plasma_shared.dir/link.txt <==\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -g -O3 -O3 -DNDEBUG\u00a0 -Wall -std=c+11 -msse3 -stdlib=libc+\u00a0 -Qunused-arguments\u00a0 -D_XOPEN_SOURCE=500 -D_POSIX_C_SOURCE=200809L -fPIC -O3 -DNDEBUG -dynamiclib -Wl,-headerpad_max_install_names -undefined dynamic_lookup\u00a0 -o ../../release/libplasma.0.0.0.dylib -install_name @rpath/libplasma.0.dylib\u00a0\r\n...\r\n../../crc32c_ep/src/crc32c_ep-install/lib/libcrc32c.a ../../release/libarrow.a /usr/lib/libpthread.dylib /usr/local/lib/libboost_system-mt.a /usr/local/lib/libboost_filesystem-mt.a\r\n\u00a0\r\n==> ./src/plasma/CMakeFiles/plasma_store.dir/link.txt <==\r\n/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c+\u00a0 -g -O3 -O3 -DNDEBUG\u00a0 -Wall -std=c 11 -msse3 -stdlib=libc+\u00a0 -Qunused-arguments\u00a0 -D_XOPEN_SOURCE=500 -D_POSIX_C_SOURCE=200809L -fPIC -O3 -DNDEBUG -Wl,-search_paths_first -Wl,-headerpad_max_install_names\u00a0 CMakeFiles/plasma_store.dir/store.cc.o\u00a0 -o ../../release/plasma_store ../../release/libplasma.a ../../crc32c_ep/src/crc32c_ep-install/lib/libcrc32c.a ../../release/libarrow.a /usr/lib/libpthread.dylib /usr/local/lib/libboost_system-mt.a /usr/local/lib/libboost_filesystem-mt.a\r\n\r\n-----------------------\r\n\u00a0\r\nDo you see what's going on?\u00a0 What am I doing wrong to not have \"plasma_static\" depend on \"crc32c_ep\"?\r\n\u00a0\r\nAny advice will be greatly appreciated,\r\nZongheng",
        "created_at": "2018-02-22T22:30:49.000Z",
        "updated_at": "2019-09-18T20:48:14.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++ - Plasma",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-09-17T16:28:01.000Z"
    },
    "comments": [
        {
            "created_at": "2018-02-25T18:21:59.538Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2200?focusedCommentId=16376185) by Wes McKinney (wesm):*\nCould you open a pull request and we can discuss there? If the library is stated as a dependency of `plasma_static` then it should not be necessary to explicitly pass when linking into executables\r\n\r\nLet's please vendor this library in the same manner as other ExternalProjects instead of using git submodules"
        },
        {
            "created_at": "2018-11-22T20:06:30.291Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2200?focusedCommentId=16696239) by Wes McKinney (wesm):*\nCould you submit a pull request?"
        },
        {
            "created_at": "2019-09-17T16:26:38.790Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2200?focusedCommentId=16931624) by Antoine Pitrou (apitrou):*\nSee ARROW-6495 : xxh3 is faster than all common alternatives."
        }
    ]
}