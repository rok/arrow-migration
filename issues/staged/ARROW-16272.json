{
    "issue": {
        "title": "[C++][Python] Poor read performance of S3FileSystem.open_input_file when used with `pd.read_csv`",
        "body": "***Note**: This issue was originally created as [ARROW-16272](https://issues.apache.org/jira/browse/ARROW-16272). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\n`pyarrow.fs.S3FileSystem.open_input_file` and `pyarrow.fs.S3FileSystem.open_input_stream` performs very poorly when used with Pandas' `read_csv`.\r\n\r\n```python\n\r\nimport pandas as pd\r\nimport time\r\nfrom pyarrow.fs import S3FileSystem\r\n\r\ndef load_parking_tickets():\r\n\u00a0 \u00a0 print(\"Running...\")\r\n\u00a0 \u00a0 t0 = time.time()\r\n\u00a0 \u00a0 fs = S3FileSystem(\r\n\u00a0 \u00a0 \u00a0 \u00a0 anonymous=True,\r\n\u00a0 \u00a0 \u00a0 \u00a0 region=\"us-east-2\",\r\n\u00a0 \u00a0 \u00a0 \u00a0 endpoint_override=None,\r\n\u00a0 \u00a0 \u00a0 \u00a0 proxy_options=None,\r\n\u00a0 \u00a0 )\r\n\r\n\u00a0 \u00a0 print(\"Time to create fs: \", time.time() - t0)\r\n\u00a0 \u00a0 t0 = time.time()\r\n# fhandler = fs.open_input_stream(\r\n# \u00a0 \u00a0 \"bodo-example-data/nyc-parking-tickets/Parking_Violations_Issued_-_Fiscal_Year_2016.csv\",\r\n# )\r\n\u00a0 \u00a0 fhandler = fs.open_input_file(\r\n\u00a0 \u00a0 \u00a0 \u00a0 \"bodo-example-data/nyc-parking-tickets/Parking_Violations_Issued_-_Fiscal_Year_2016.csv\",\r\n\u00a0 \u00a0 )\r\n\u00a0 \u00a0 print(\"Time to create fhandler: \", time.time() - t0)\r\n\u00a0 \u00a0 t0 = time.time()\r\n\u00a0 \u00a0 year_2016_df = pd.read_csv(\r\n\u00a0 \u00a0 \u00a0 \u00a0 fhandler,\r\n\u00a0 \u00a0 \u00a0 \u00a0 nrows=100,\r\n\u00a0 \u00a0 )\r\n\u00a0 \u00a0 print(\"read time:\", time.time() - t0)\r\n\u00a0 \u00a0 return year_2016_df\r\n\r\nt0 = time.time()\r\nload_parking_tickets()\r\nprint(\"total time:\", time.time() - t0)\r\n```\r\n\r\nOutput:\r\n```Java\n\r\nRunning...\r\nTime to create fs: \u00a00.0003612041473388672\r\nTime to create fhandler: \u00a00.22461509704589844\r\nread time: 105.76488208770752\r\ntotal time: 105.99135684967041\r\n```\r\nThis is with `pandas==1.4.2`.\r\n\r\nGetting similar performance with `fs.open_input_stream` as well (commented out in the code).\r\n```Java\n\r\nRunning...\r\nTime to create fs: \u00a00.0002570152282714844\r\nTime to create fhandler: \u00a00.18540692329406738\r\nread time: 186.8419930934906\r\ntotal time: 187.03169012069702\r\n```\r\n\r\nWhen running it with just pandas (which uses `s3fs` under the hood), it's much faster:\r\n```python\n\r\nimport pandas as pd\r\nimport time\r\n\r\ndef load_parking_tickets():\r\n\u00a0 \u00a0 print(\"Running...\")\r\n\u00a0 \u00a0 t0 = time.time()\r\n\u00a0 \u00a0 year_2016_df = pd.read_csv(\r\n\u00a0 \u00a0 \u00a0 \u00a0 \"s3://bodo-example-data/nyc-parking-tickets/Parking_Violations_Issued_-_Fiscal_Year_2016.csv\",\r\n\u00a0 \u00a0 \u00a0 \u00a0 nrows=100,\r\n\u00a0 \u00a0 )\r\n\u00a0 \u00a0 print(\"read time:\", time.time() - t0)\r\n\u00a0 \u00a0 return year_2016_df\r\n\r\nt0 = time.time()\r\nload_parking_tickets()\r\nprint(\"total time:\", time.time() - t0)\r\n```\r\n\r\nOutput:\r\n```Java\n\r\nRunning...\r\nread time: 1.1012001037597656\r\ntotal time: 1.101264238357544\r\n```\r\n\r\nSurprisingly, when we use `fsspec`'s `ArrowFSWrapper`, it's matches s3fs performance:\r\n```python\n\r\nimport pandas as pd\r\nimport time\r\nfrom pyarrow.fs import S3FileSystem\r\nfrom fsspec.implementations.arrow import ArrowFSWrapper\r\n\r\ndef load_parking_tickets():\r\n\u00a0 \u00a0 print(\"Running...\")\r\n\u00a0 \u00a0 t0 = time.time()\r\n\u00a0 \u00a0 fs = ArrowFSWrapper(\r\n\u00a0 \u00a0 \u00a0 \u00a0 S3FileSystem(\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 anonymous=True,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 region=\"us-east-2\",\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 endpoint_override=None,\r\n\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 proxy_options=None,\r\n\u00a0 \u00a0 \u00a0 \u00a0 )\r\n\u00a0 \u00a0 )\r\n\r\n\u00a0 \u00a0 print(\"Time to create fs: \", time.time() - t0)\r\n\u00a0 \u00a0 t0 = time.time()\r\n\u00a0 \u00a0 fhandler = fs._open(\r\n\u00a0 \u00a0 \u00a0 \u00a0 \"bodo-example-data/nyc-parking-tickets/Parking_Violations_Issued_-_Fiscal_Year_2016.csv\",\r\n\u00a0 \u00a0 )\r\n\u00a0 \u00a0 print(\"Time to create fhandler: \", time.time() - t0)\r\n\u00a0 \u00a0 t0 = time.time()\r\n\u00a0 \u00a0 year_2016_df = pd.read_csv(\r\n\u00a0 \u00a0 \u00a0 \u00a0 fhandler,\r\n\u00a0 \u00a0 \u00a0 \u00a0 nrows=100,\r\n\u00a0 \u00a0 )\r\n\u00a0 \u00a0 print(\"read time:\", time.time() - t0)\r\n\u00a0 \u00a0 return year_2016_df\r\n\r\nt0 = time.time()\r\nload_parking_tickets()\r\nprint(\"total time:\", time.time() - t0)\r\n```\r\n\r\nOutput:\r\n```Java\n\r\nRunning...\r\nTime to create fs: \u00a00.0002467632293701172\r\nTime to create fhandler: \u00a00.1858382225036621\r\nread time: 0.13701486587524414\r\ntotal time: 0.3232450485229492\r\n```\r\n\r\nPackages:\r\n```Java\n\r\npyarrow=7.0.0\r\npandas : 1.4.2\r\nnumpy : 1.20.3\r\n```\r\n\r\n\r\nI tested it with 4.0.1, 5.0.0 as well and saw similar results.",
        "created_at": "2022-04-21T18:34:16.000Z",
        "updated_at": "2022-06-01T02:01:38.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2022-05-31T13:30:35.000Z"
    },
    "comments": [
        {
            "created_at": "2022-04-21T19:11:54.447Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16272?focusedCommentId=17526000) by David Li (lidavidm):*\nOff the top of my head this is possibly because s3fs adds some readahead by default, which helps CSV a lot, and PyArrow's filesystem does not do this. PyArrow's CSV reader doesn't really need this since it's multithreaded (which effectively gives readahead) but Pandas's CSV reader may not do this."
        },
        {
            "created_at": "2022-04-21T19:35:06.766Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16272?focusedCommentId=17526022) by Antoine Pitrou (apitrou):*\nHmm, thanks for the report. For now, this can be worked around by wrapping the file in a `{}io.BufferedReader{`}.\r\n\r\nBut we should take a look at the underlying issue and find a way to fix it. It seems that, despite `{}nrows=100{`}, the S3 filesystem is reading 2 GB from the file..."
        },
        {
            "created_at": "2022-04-21T20:42:22.523Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16272?focusedCommentId=17526072) by Sahil Gupta (sahil1105):*\nThanks `[~apitrou]` \u00a0!"
        },
        {
            "created_at": "2022-04-21T20:42:50.000Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16272?focusedCommentId=17526074) by Sahil Gupta (sahil1105):*\n> It seems that, despite `{}nrows=100{`}, the S3 filesystem is reading 2 GB from the file...\r\n\r\nYes, that's what we observed as well."
        },
        {
            "created_at": "2022-05-30T13:55:42.409Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16272?focusedCommentId=17543951) by Antoine Pitrou (apitrou):*\nThe use case is fixed with https://github.com/apache/arrow/pull/13264 :\r\n\r\n```Java\n\r\nRunning...\r\nTime to create fs:  2.0029425621032715\r\nTime to create fhandler:  0.4456977844238281\r\nread time: 0.5826966762542725\r\n    Summons Number Plate ID Registration State Plate Type  Issue Date  Violation Code  ... Community Board Community Council  Census Tract  BIN  BBL  NTA\r\n0       1363745270  GGY6450                 99        PAS  07/09/2015              46  ...             NaN                NaN          NaN  NaN  NaN  NaN\r\n1       1363745293   KXD355                 SC        PAS  07/09/2015              21  ...             NaN                NaN          NaN  NaN  NaN  NaN\r\n2       1363745438  JCK7576                 PA        PAS  07/09/2015              21  ...             NaN                NaN          NaN  NaN  NaN  NaN\r\n3       1363745475  GYK7658                 NY        OMS  07/09/2015              21  ...             NaN                NaN          NaN  NaN  NaN  NaN\r\n4       1363745487  GMT8141                 NY        PAS  07/09/2015              21  ...             NaN                NaN          NaN  NaN  NaN  NaN\r\n..             ...      ...                ...        ...         ...             ...  ...             ...                ...          ...  ...  ...  ...\r\n95      1363748464  GFV8489                 NY        PAS  07/09/2015              21  ...             NaN                NaN          NaN  NaN  NaN  NaN\r\n96      1363748476   X15EGU                 NJ        PAS  07/09/2015              20  ...             NaN                NaN          NaN  NaN  NaN  NaN\r\n97      1363748490  GDM1774                 NY        PAS  07/09/2015              38  ...             NaN                NaN          NaN  NaN  NaN  NaN\r\n98      1363748531   G45DSY                 NJ        PAS  07/09/2015              37  ...             NaN                NaN          NaN  NaN  NaN  NaN\r\n99      1363748579   RR76Y0                 PA        PAS  07/09/2015              20  ...             NaN                NaN          NaN  NaN  NaN  NaN\r\n\r\n[100 rows x 51 columns]\r\ntotal time: 3.0595762729644775\r\n```"
        },
        {
            "created_at": "2022-05-31T13:30:35.891Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16272?focusedCommentId=17544385) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 13264\n<https://github.com/apache/arrow/pull/13264>"
        }
    ]
}