{
    "issue": {
        "title": "[C++][Dataset] Implement InMemoryDatasetFactory",
        "body": "***Note**: This issue was originally created as [ARROW-7945](https://issues.apache.org/jira/browse/ARROW-7945). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThis will allow in memory datasets (such as tables) to participate in discovery through `UnionDatasetFactory`. This class will be trivial since Inspect will do nothing but return the table's schema, but is necessary to ensure that the resulting `UnionDataset`'s unified schema accommodates the table's schema (for example including fields present only in the table's schema or emitting an error when unification is not possible)",
        "created_at": "2020-02-26T14:20:06.000Z",
        "updated_at": "2020-08-07T16:35:51.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": true,
        "closed_at": "2020-08-07T16:00:19.000Z"
    },
    "comments": [
        {
            "created_at": "2020-02-26T14:36:46.699Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7945?focusedCommentId=17045585) by Krisztian Szucs (kszucs):*\nWe also should have convenience factories for InMemoryDataset, see discussion https://github.com/apache/arrow/pull/6470/files/881ee8538a2cd0c3173feb9c370b5da69388b5f4#r384503399\r\n\r\n```cpp\n\r\nInMemoryDataset::Make(Table);\r\nInMemoryDataset::Make(std::vector<RecordBatch>);  // all record batches should have the same schema\r\n```"
        },
        {
            "created_at": "2020-06-18T19:59:55.681Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7945?focusedCommentId=17139962) by Niklas B (bivald):*\nWould this also make us able (in the end) to create a dataset from a RecordBatch or Table? Specifically:\u00a0\r\n```\n\r\n# TODO(kszucs): support InMemoryDataset for a table input\r\n```\r\nFrom\u00a0<https://github.com/apache/arrow/blob/master/python/pyarrow/dataset.py#L660>\r\n\r\nThat would be awesome :)\u00a0that would (if my understand is correct) open up for using filtering on Table/RecordBatch similar to what you can do with the new dataset API for parquet files, but for in memory datasets.\u00a0"
        },
        {
            "created_at": "2020-06-19T07:36:54.111Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7945?focusedCommentId=17140306) by Joris Van den Bossche (jorisvandenbossche):*\n`[~bivald]` that would indeed enable that, but not that you can already filter Tables/RecordBatches right now (only a different syntax, with the `filter()` method expecting a boolean mask)"
        },
        {
            "created_at": "2020-06-19T09:30:28.450Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7945?focusedCommentId=17140365) by Niklas B (bivald):*\n`[~jorisvandenbossche]` \u00a0That's a good point! I have tried using numpy to create a boolean mask and while that operations is zero copy and lightning fast, the actual filter takes a fair bit of time (2 seconds) to filter out about 50% of 700k rows (~200 columns). I'm guessing its iterating each column, where each column takes about 0.01s. Possibly I can improve this if I write a function in cython/c++, but it's slightly out of my abilities. I'll probably wait for the Dataset API :)\u00a0"
        },
        {
            "created_at": "2020-08-07T16:00:19.201Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7945?focusedCommentId=17173241) by Ben Kietzman (bkietz):*\nSince datasets' schemas can be unified after construction, it no longer makes sense to do this unification in discovery."
        },
        {
            "created_at": "2020-08-07T16:35:51.802Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-7945?focusedCommentId=17173274) by Niklas B (bivald):*\n`[~bkietz]` \u00a0is there any code samples on how to do that? Looking to use the new dataset api."
        }
    ]
}