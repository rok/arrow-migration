{
    "issue": {
        "title": "[C++] (eventually) abandon scalar columns of an ExecBatch in favor of RLE encoded arrays",
        "body": "***Note**: This issue was originally created as [ARROW-16289](https://issues.apache.org/jira/browse/ARROW-16289). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nThis JIRA is a proposal / discussion.  I am not asserting this is the way to go but I would like to consider it.\r\n\r\nFrom the execution engine's perspective an exec batch's columns are always either arrays or scalars.  The only time we make use of scalars today is for the four augmented columns (e.g. __filename).  Once we have support for RLE arrays a scalar could easily be encoded as an RLE array and there would be no need to use scalars here.\r\n\r\nThe advantage would be reducing the complexity in exec nodes and avoiding issues like ARROW-16288.  It is already rather difficult to explain the idea of a \"scalar\" and \"vector\" function and then have to turn around and explain that the word \"scalar\" has an entirely different meaning when talking about field shape.\r\n\r\nI think it's worth considering taking this even further and removing the concept from the compute layer entirely.  Kernel functions that want to have special logic for scalars could do so using the RLE array.  This would be a significant change to many kernels which currently declare the ANY shape and determine which logic to apply within the kernel itself (e.g. there is one array OR scalar kernel and not one kernel for each).\r\n\r\nAdmittedly there is probably a few instructions and a few bytes more to handle an RLE scalar than the scalar we have today.  However, this is just different flavors of O(1) and not likely to have significant impact.",
        "created_at": "2022-04-22T18:52:50.000Z",
        "updated_at": "2022-06-06T16:01:41.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2022-04-22T18:54:08.691Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16289?focusedCommentId=17526627) by Weston Pace (westonpace):*\nCC `[~lidavidm]` `[~edponce]` `[~apitrou]` `[~michalno]` `[~yibocai]`"
        },
        {
            "created_at": "2022-04-22T19:14:06.241Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16289?focusedCommentId=17526637) by David Li (lidavidm):*\nThe concept of scalars would still exist (e.g. in expressions, options) so there's still potential for confusion though this would reduce it. Aggregations would presumably still return scalars, too.\r\n\r\nIt does seem being able to accept scalars is more confusing than it's worth, though."
        },
        {
            "created_at": "2022-04-22T19:53:09.295Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16289?focusedCommentId=17526656) by Eduardo Ponce (edponce):*\nThe term Scalar is used in different (but related) contexts. For example, the notion of a Scalar value, Scalar kernels, Scalar expressions, etc.\r\n\r\nI recall from an ad-hoc conversation last year where it was discussed that we should consider treating Scalars as a 1-element Array to making the compute layer logic more straightforward. The front-end API would still have the concept of a Scalar but it would be disguised as an Array for execution purposes.\r\n\r\nI think such a proposal has its merits, but we should ensure where the concept of Scalar will remain and make these distinctions clear."
        },
        {
            "created_at": "2022-04-23T09:45:22.222Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-16289?focusedCommentId=17526811) by Antoine Pitrou (apitrou):*\nRLE arrays is a pie in the sky feature for now so I'm not sure this is really worth discussing.\r\n\r\nNotice that ExecBatch is supposed to support a selection vector that has never been implemented in any kernel that I know of."
        }
    ]
}