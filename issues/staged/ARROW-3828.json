{
    "issue": {
        "title": "[Python] client.list() produces segfault on macOS",
        "body": "***Note**: This issue was originally created as [ARROW-3828](https://issues.apache.org/jira/browse/ARROW-3828). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nIssue: running some of the examples <https://github.com/apache/arrow/blob/master/python/doc/source/plasma.rst> here cause a segfault, when they call client.list():\r\n\r\nIn one process:\r\n```java\n\r\nplasma_store -m 1000000000 -s /tmp/plasma\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n```\r\nin another, this will fail on the call to `list`:\r\n```java\n\r\nimport pyarrow.plasma as plasma\r\nclient = plasma.connect(\"/tmp/plasma\", \"\", 0)\r\nfoo = client.put(1)\r\nclient.list()\n```\r\ne.g.\r\n```java\n\r\nPython 3.6.7 (default, Nov 15 2018, 16:25:31)\r\n[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import pyarrow.plasma as plasma\r\n>>> client = plasma.connect(\"/tmp/plasma\", \"\", 0)\r\n>>> foo = client.put(1)\r\n>>> client.list()\r\nzsh: segmentation fault\u00a0 python3\r\n```\r\nI installed pyarrow via pip - version 0.11.1\r\n\r\nOut of curiosity, I tried it also in a fresh virtualenv with python2.7, to the same effect.\r\n\r\n\u00a0\r\n\r\nOn linux, I seem to be able to do the same thing fine:\r\n```java\n\r\n\u276f docker run -it --rm --entrypoint bash python:slim\r\nroot@5de7f7560ac6:/# pip install pyarrow\r\nCollecting pyarrow\r\n\u00a0 Downloading https://files.pythonhosted.org/packages/c3/7c/4d796eafb4c77fb13d91afce06641df2c2a7f3670544e8f511b7b492f315/pyarrow-0.11.1-cp37-cp37m-manylinux1_x86_64.whl (11.6MB)\r\n\u00a0\u00a0\u00a0 100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 11.6MB 1.5MB/s\r\nCollecting numpy>=1.14 (from pyarrow)\r\n\u00a0 Downloading https://files.pythonhosted.org/packages/38/39/f73e104d44f19a6203e786d5204532e214443ea2954917b27f3229e7639b/numpy-1.15.4-cp37-cp37m-manylinux1_x86_64.whl (13.8MB)\r\n\u00a0\u00a0\u00a0 100% |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 13.9MB 1.7MB/s\r\nCollecting six>=1.0.0 (from pyarrow)\r\n\u00a0 Downloading https://files.pythonhosted.org/packages/67/4b/141a581104b1f6397bfa78ac9d43d8ad29a7ca43ea90a2d863fe3056e86a/six-1.11.0-py2.py3-none-any.whl\r\nInstalling collected packages: numpy, six, pyarrow\r\nSuccessfully installed numpy-1.15.4 pyarrow-0.11.1 six-1.11.0\r\nroot@5de7f7560ac6:/# plasma_store -m 1000000 -s /tmp/plasma &\r\n[1] 17\r\nroot@5de7f7560ac6:/# /arrow/cpp/src/plasma/store.cc:971: Allowing the Plasma store to use up to 0.001GB of memory.\r\n/arrow/cpp/src/plasma/store.cc:1001: Starting object store with directory /dev/shm and huge page support disabled\r\n\r\nroot@5de7f7560ac6:/# python\r\nPython 3.7.1 (default, Oct 24 2018, 22:38:59)\r\n[GCC 6.3.0 20170516] on linux\r\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\r\n>>> import pyarrow.plasma as plasma\r\n>>> client = plasma.connect(\"/tmp/plasma\", \"\", 0)\r\n>>> foo = client.put(1)\r\n>>> client.list()\r\n{ObjectID(fda78ff273c4e4b92c788b719748881fb847ee59): {'data_size': 448, 'metadata_size': 0, 'ref_count': 0, 'create_time': 1542447115, 'construct_duration': 0, 'state': 'sealed'}}\n```",
        "created_at": "2018-11-17T09:25:44.000Z",
        "updated_at": "2018-11-17T20:53:03.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2018-11-17T20:53:03.000Z"
    },
    "comments": [
        {
            "created_at": "2018-11-17T20:52:41.926Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-3828?focusedCommentId=16690694) by Xander Johnson (metasyn):*\nAfter some more testing, I realized that its likely due to a corrupted wheel we have in an internal pypi index."
        }
    ]
}