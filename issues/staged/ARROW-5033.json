{
    "issue": {
        "title": "[C++] JSON table writer",
        "body": "***Note**: This issue was originally created as [ARROW-5033](https://issues.apache.org/jira/browse/ARROW-5033). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nUsers who need to emit json in line delimited format currently cannot do so using arrow. It should be straightforward to implement this efficiently, and it will be very helpful for testing and benchmarking",
        "created_at": "2019-03-27T16:06:17.000Z",
        "updated_at": "2022-10-07T16:34:55.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2019-03-28T22:11:21.010Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5033?focusedCommentId=16804349) by Wes McKinney (wesm):*\nAs something to keep in mind, we will need to implement a \"Sink\" node type to be the flip side of \"Scan\" in a query engine context. To the user may wish to output the results of a query directly to CSV, JSON, Parquet or some other dataset format. So we need to develop a common API that this can hook into for this purpose"
        },
        {
            "created_at": "2022-02-09T11:08:39.041Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5033?focusedCommentId=17489470) by Nicola Crane (thisisnic):*\nUser request on StackOverflow for this feature to be implemented: https://stackoverflow.com/questions/71047976/fast-ldjson-writing-with-arrow"
        },
        {
            "created_at": "2022-03-16T20:05:11.176Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5033?focusedCommentId=17507849) by Weston Pace (westonpace):*\nI came across an helpful Github issue today that explains that there are actually several standards for line delimited JSON and goes over a bit the differences.  This might be a helpful reference when this gets implemented: https://github.com/ndjson/ndjson.github.io/issues/1"
        },
        {
            "created_at": "2022-07-12T14:04:54.279Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5033?focusedCommentId=17565832) by @toddfarmer:*\nThis issue was last updated over 90 days ago, which may be an indication it is no longer being actively worked. To better reflect the current state, the issue is being unassigned. Please feel free to re-take assignment of the issue if it is being actively worked, or if you plan to start that work soon."
        },
        {
            "created_at": "2022-10-07T02:55:46.598Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5033?focusedCommentId=17613847) by Steve M. Kim (chairmank):*\nAs part of this feature request, do we contemplate generating a [JSON Schema](https://json-schema.org/) from a Arrow table schema? Given an Arrow schema and record batches, it would be useful to get a JSON schema and a sequence of JSON objects that conform to that schema. This would also facilitate testing the correctness of the Arrow JSON writer."
        },
        {
            "created_at": "2022-10-07T16:34:55.823Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-5033?focusedCommentId=17614150) by David Li (lidavidm):*\nThat's a new can of worms :) There's been some discussion about a way to represent Arrow schemas in JSON. See https://github.com/apache/arrow/issues/13803 and https://github.com/apache/arrow/pull/7110 and ARROW-8952."
        }
    ]
}