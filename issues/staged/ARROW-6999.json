{
    "issue": {
        "title": "[Python] KeyError: '__index_level_0__' passing Table.from_pandas its own schema",
        "body": "***Note**: This issue was originally created as [ARROW-6999](https://issues.apache.org/jira/browse/ARROW-6999). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nSteps to reproduce:\r\n1. Generate any DataFrame's pyarrow Schema using\u00a0Table.from_pandas\n1. Pass the generated schema as input into Table.from_pandas\n1. Causes KeyError: '__index_level_0__'\n   \n   We did not have this issue with pyarrow==0.11.0 which we used to write many partitions across years.\u00a0 Our goal now is to use pyarrow==0.15.0 and produce schema going forward that are **backwards compatible** (i.e. also have\u00a0'__index_level_0__'), so we should not need to re-generate all prior years' partitions when we migrate to 0.15.0.\n   \n   We cannot set _preserve_index=False_, since that effectively deletes\u00a0'__index_level_0__', causing inconsistent schema across earlier partitions that had been written using pyarrow==0.11.0.\n   \n   \u00a0\n   ```java\n   \n   import pandas as pd\n   import pyarrow as pa\n   df = pd.DataFrame() \n   schema = pa.Table.from_pandas(df).schema\n   pa_table = pa.Table.from_pandas(df, schema=schema)\n   \n   ```\n   ```\n   \n   Traceback (most recent call last):\n     File \"/GAAR/FIAG/sandbox/software/miniconda3/envs/rc_sfi_2019.1/lib/python3.6/site-packages/pandas/core/indexes/base.py\", line 3078, in get_loc\n       return self._engine.get_loc(key)\n     File \"pandas/_libs/index.pyx\", line 140, in pandas._libs.index.IndexEngine.get_loc\n     File \"pandas/_libs/index.pyx\", line 162, in pandas._libs.index.IndexEngine.get_loc\n     File \"pandas/_libs/hashtable_class_helper.pxi\", line 1492, in pandas._libs.hashtable.PyObjectHashTable.get_item\n     File \"pandas/_libs/hashtable_class_helper.pxi\", line 1500, in pandas._libs.hashtable.PyObjectHashTable.get_item\n   KeyError: '__index_level_0__'\n   During handling of the above exception, another exception occurred:\n   Traceback (most recent call last):\n     File \"/GAAR/FIAG/sandbox/software/miniconda3/envs/rc_sfi_2019.1/lib/python3.6/site-packages/pyarrow/pandas_compat.py\", line 408, in _get_columns_to_convert_given_schema\n       col = df[name]\n     File \"/GAAR/FIAG/sandbox/software/miniconda3/envs/rc_sfi_2019.1/lib/python3.6/site-packages/pandas/core/frame.py\", line 2688, in __getitem__\n       return self._getitem_column(key)\n     File \"/GAAR/FIAG/sandbox/software/miniconda3/envs/rc_sfi_2019.1/lib/python3.6/site-packages/pandas/core/frame.py\", line 2695, in _getitem_column\n       return self._get_item_cache(key)\n     File \"/GAAR/FIAG/sandbox/software/miniconda3/envs/rc_sfi_2019.1/lib/python3.6/site-packages/pandas/core/generic.py\", line 2489, in _get_item_cache\n       values = self._data.get(item)\n     File \"/GAAR/FIAG/sandbox/software/miniconda3/envs/rc_sfi_2019.1/lib/python3.6/site-packages/pandas/core/internals.py\", line 4115, in get\n       loc = self.items.get_loc(item)\n     File \"/GAAR/FIAG/sandbox/software/miniconda3/envs/rc_sfi_2019.1/lib/python3.6/site-packages/pandas/core/indexes/base.py\", line 3080, in get_loc\n       return self._engine.get_loc(self._maybe_cast_indexer(key))\n     File \"pandas/_libs/index.pyx\", line 140, in pandas._libs.index.IndexEngine.get_loc\n     File \"pandas/_libs/index.pyx\", line 162, in pandas._libs.index.IndexEngine.get_loc\n     File \"pandas/_libs/hashtable_class_helper.pxi\", line 1492, in pandas._libs.hashtable.PyObjectHashTable.get_item\n     File \"pandas/_libs/hashtable_class_helper.pxi\", line 1500, in pandas._libs.hashtable.PyObjectHashTable.get_item\n   KeyError: '__index_level_0__'\n   \n   During handling of the above exception, another exception occurred:\n   \n   Traceback (most recent call last):\n     File \"/GAAR/FIAG/sandbox/software/miniconda3/envs/rc_sfi_2019.1/lib/python3.6/site-packages/IPython/core/interactiveshell.py\", line 3326, in run_code\n       exec(code_obj, self.user_global_ns, self.user_ns)\n     File \"<ipython-input-36-6711a2fcec96>\", line 5, in <module>\n       pa_table = pa.Table.from_pandas(df, schema=pa.Table.from_pandas(df).schema)\n     File \"pyarrow/table.pxi\", line 1057, in pyarrow.lib.Table.from_pandas\n     File \"/GAAR/FIAG/sandbox/software/miniconda3/envs/rc_sfi_2019.1/lib/python3.6/site-packages/pyarrow/pandas_compat.py\", line 517, in dataframe_to_arrays\n       columns)\n     File \"/GAAR/FIAG/sandbox/software/miniconda3/envs/rc_sfi_2019.1/lib/python3.6/site-packages/pyarrow/pandas_compat.py\", line 337, in _get_columns_to_convert\n       return _get_columns_to_convert_given_schema(df, schema, preserve_index)\n     File \"/GAAR/FIAG/sandbox/software/miniconda3/envs/rc_sfi_2019.1/lib/python3.6/site-packages/pyarrow/pandas_compat.py\", line 426, in _get_columns_to_convert_given_schema\n       \"in the columns or index\".format(name))\n   KeyError: \"name '__index_level_0__' present in the specified schema is not found in the columns or index\"\n   ```",
        "created_at": "2019-10-26T16:34:38.000Z",
        "updated_at": "2019-11-05T14:40:34.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Python",
            "Type: bug"
        ],
        "closed": true,
        "closed_at": "2019-11-05T14:40:22.000Z"
    },
    "comments": [
        {
            "created_at": "2019-10-26T19:09:27.150Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6999?focusedCommentId=16960418) by Wes McKinney (wesm):*\nI'll let `[~jorisvandenbossche]` take a look"
        },
        {
            "created_at": "2019-10-28T11:00:55.872Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6999?focusedCommentId=16960931) by Joris Van den Bossche (jorisvandenbossche):*\n`[~goodiegoodman]` thanks for the report!\r\n\r\nYour \"steps to reproduce\" actually do work if you do not use an empty dataframe:\r\n\r\n```Java\n\r\nIn [15]: import pandas as pd \r\n    ...: import pyarrow as pa \r\n    ...: df = pd.DataFrame({'a': [1, 2, 3]})  \r\n    ...: schema = pa.Table.from_pandas(df).schema \r\n    ...: pa_table = pa.Table.from_pandas(df, schema=schema)                                                                                                                                                        \r\n\r\nIn [16]: schema                                                                                                                                                                                                    \r\nOut[16]: \r\na: int64\r\nmetadata\r\n--------\r\n{b'pandas': b'{\"index_columns\": [{\"kind\": \"range\", \"name\": null, \"start\": 0, \"'\r\n            b'stop\": 3, \"step\": 1}], \"column_indexes\": [{\"name\": null, \"field_'\r\n            b'name\": null, \"pandas_type\": \"unicode\", \"numpy_type\": \"object\", \"'\r\n            b'metadata\": {\"encoding\": \"UTF-8\"}}], \"columns\": [{\"name\": \"a\", \"f'\r\n            b'ield_name\": \"a\", \"pandas_type\": \"int64\", \"numpy_type\": \"int64\", '\r\n            b'\"metadata\": null}], \"creator\": {\"library\": \"pyarrow\", \"version\":'\r\n            b' \"0.15.1.dev177+g5df424bd6\"}, \"pandas_version\": \"0.26.0.dev0+669'\r\n            b'.g3c29114b1\"}'}\r\n```\r\n\r\nThe empty dataframe is tricky edge-case regarding the index, because in such a case the index is not a RangeIndex but a empty object-dtype Index (see ARROW-5104 for a similar report about that aspect).  \r\n\r\nThat said, if passing an explicit schema, and if there is a column not found that has a \"\\_\\_index_level_i\\_\\_\" pattern, we should try to handle this (certainly in case of passing `preserve_index=True`).\r\n\r\n\r\n"
        },
        {
            "created_at": "2019-10-28T15:15:30.367Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6999?focusedCommentId=16961145) by Joris Van den Bossche (jorisvandenbossche):*\nSo this case is clearly a bug in the new implementation, I would say:\r\n\r\n```Java\n\r\nIn [23]: import pandas as pd \r\n    ...: import pyarrow as pa \r\n    ...: df = pd.DataFrame({'a': [1, 2, 3]})  \r\n    ...: schema = pa.Table.from_pandas(df, preserve_index=True).schema \r\n    ...: pa_table = pa.Table.from_pandas(df, schema=schema, preserve_index=True)                                                                                                                                   \r\n...\r\nKeyError: \"name '__index_level_0__' present in the specified schema is not found in the columns or index\"\r\n```\r\n\r\nSo if you specify `preserve_index=True`, and there is an index in the schema that did not have a name in the DataFrame (so ending up as the generated `\\_\\_index_level_i\\_\\_`), the above should work when passing an explicit schema matching that.\r\n\r\nWill look into fixing this (it's a pity that 0.15.1 is already released, it would have been nice to include this)."
        },
        {
            "created_at": "2019-10-28T18:12:21.427Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6999?focusedCommentId=16961317) by Tom Goodman (goodiegoodman):*\n`[~jorisvandenbossche]` \u00a0please try this with the attached [test3.hdf](test3.hdf) (not empty)\r\n```java\n\r\ndf2 = pd.read_hdf('test3.hdf','foo')\r\npa.Table.from_pandas(df2, schema=pa.Table.from_pandas(df2).schema)\n```\r\nI still get\u00a0KeyError: '__index_level_0__' (without specifying preserve_index)._\u00a0\r\n\r\nThis may be because the index on test3.hdf is Int64Index and I see [pyarrow docs](https://arrow.apache.org/docs/python/generated/pyarrow.Table.html#pyarrow.Table.from_pandas) say default behavior is to \"store the index as a column\", except for rage indexes.\u00a0 This unfortunately makes the bug more prevalent."
        },
        {
            "created_at": "2019-10-29T10:44:56.749Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6999?focusedCommentId=16961882) by Joris Van den Bossche (jorisvandenbossche):*\nThanks for the reproducer! It's indeed due to the non-range index. Doing this in terms of the simpler example, I think the following is equivalent to your example:\r\n\r\n```Java\n\r\ndf2 = pd.DataFrame({'a': [1, 2, 3]}, index=[0, 1, 2])\r\npa.Table.from_pandas(df2, schema=pa.Table.from_pandas(df2).schema)\r\n```\r\n\r\nwhich gives indeed that error. In the end, it boils down to the same bug as my example above using a RangeIndex but with specifying `preserve_index=True` (as that forces the index to become a column, just as if you have a non-rangeindex)."
        },
        {
            "created_at": "2019-10-29T12:24:04.533Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6999?focusedCommentId=16961948) by Joris Van den Bossche (jorisvandenbossche):*\n`[~goodiegoodman]` so I did a PR to fix this: https://github.com/apache/arrow/pull/5750 (I try to add a lot of test cases when refactoring this for 0.15, it's a pity I overlooked this (quite obvious in hindsight) one).\r\n\r\nBut the question for you still is: is there a way to deal with this that is compatible across different releases?  \r\nI am not fully understanding your explanation from above:\r\n\r\n> We did not have this issue with pyarrow==0.11.0 which we used to write many partitions across years.  Our goal now is to use pyarrow==0.15.0 and produce schema going forward that are backwards compatible (i.e. also have '_index_level_0_'), so we should not need to re-generate all prior years' partitions when we migrate to 0.15.0.\r\n\r\nWhat do you mean exactly with \"write\"? (to what file format? or how is the schema stored?) \r\nOne option I can think off (but not sure it fits your usecase) is to make sure that your index has a name.  Adapting the above example:\r\n\r\n```Java\n\r\ndf3 = pd.DataFrame({'a': [1, 2, 3]}, index=pd.Int64Index([0, 1, 2], name='index'))\r\npa.Table.from_pandas(df3, schema=pa.Table.from_pandas(df3).schema)\r\n```\r\n\r\nThis works on 0.11.0 and on 0.15.0. However, this then fails on 0.13/0.14 (which is one of the reasons we tried to clean up and normalize this handling of the passed schema in 0.15).\r\n\r\n"
        },
        {
            "created_at": "2019-10-29T17:20:43.561Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6999?focusedCommentId=16962254) by Tom Goodman (goodiegoodman):*\n`[~jorisvandenbossche]` thank you for the quick turn-around!\r\n\r\nWe store the partitions in parquet files, with directories defining partitions and _common_metadata file holding schema.\u00a0 This allows us to use the [ParquetDataset partition level filters](https://arrow.apache.org/docs/python/generated/pyarrow.parquet.ParquetDataset.html#pyarrow-parquet-parquetdataset)\u00a0like [[('yyyymm', '=', 201909)]] ...\r\n```\n\r\ntree\r\n.\r\n|-- _common_metadata\r\n|-- yyyymm=201909\r\n|   `-- e097411586b0460e860c331b63fecb2b.parquet\r\n`-- yyyymm=201910\r\n    `-- b8de9aa413194cc4af6f4802b5c4923f.parquet\r\n.\r\n.\r\n\r\n```"
        },
        {
            "created_at": "2019-10-29T19:43:04.526Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6999?focusedCommentId=16962353) by Tom Goodman (goodiegoodman):*\nThanks to your suggestions, we now have a work-around that allows us to remain backwards-compatible!\r\nIf we get a KeyError due to missing  '__index_level_0__', we'll set df.index.name = '__index_level_0__' and re-call same from_pandas function.\r\n```java\n\r\n    try:\r\n        table = pa.Table.from_pandas(df, schema=schema)\r\n    except KeyError as e:\r\n        if '__index_level_0__' in str(e):  # Happens in pyarrow 0.15.0, not 0.11.0\r\n            df.index.name = '__index_level_0__'\r\n            table = pa.Table.from_pandas(df, schema=schema)\r\n        else:\r\n            raise e\r\n```\r\n_Thanks so much `[~jorisvandenbossche]`!_"
        },
        {
            "created_at": "2019-10-29T21:19:01.728Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6999?focusedCommentId=16962472) by Joris Van den Bossche (jorisvandenbossche):*\nThat sounds as a decent enough workaround for now. Happy you found a way to deal with it!"
        },
        {
            "created_at": "2019-11-05T14:40:22.203Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-6999?focusedCommentId=16967575) by Antoine Pitrou (apitrou):*\nIssue resolved by pull request 5750\n<https://github.com/apache/arrow/pull/5750>"
        }
    ]
}