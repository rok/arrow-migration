{
    "issue": {
        "title": "[Format][C++] Add num_rows to file footer",
        "body": "***Note**: This issue was originally created as [ARROW-2296](https://issues.apache.org/jira/browse/ARROW-2296). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nMaybe I'm overlooking something, but I don't see something on the API surface to get the number of rows in a arrow file without reading all the record batches. This is useful when we want to read into contiguous buffers, because it allows us to allocate the right sizes up front.\r\n\r\nI'd like to propose that we add `num_rows` as a field in the file footer so it's easy to query without reading the whole file.\r\n\r\nMeanwhile, before we get that added to the official format fbs, it would be nice to have\u00a0a method that iterates over the record batch headers and sums up the lengths without reading the actual record batch body.",
        "created_at": "2018-03-10T00:48:52.000Z",
        "updated_at": "2020-06-11T21:21:10.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: C++",
            "Component: Format",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2018-03-10T18:31:37.323Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2296?focusedCommentId=16394287) by Wes McKinney (wesm):*\nThis is already contained in the RecordBatch metadata, and does not require reading the whole file\r\n\r\nhttps://github.com/apache/arrow/blob/master/format/Message.fbs#L50\r\n\r\nDoes this not satisfy the use case?"
        },
        {
            "created_at": "2018-03-10T18:39:57.226Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2296?focusedCommentId=16394295) by Wes McKinney (wesm):*\nWe could pretty easily add a \"total length\" field to the file footer, though, which would be more convenient https://github.com/apache/arrow/blob/master/format/File.fbs#L33"
        },
        {
            "created_at": "2018-03-12T17:36:29.417Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2296?focusedCommentId=16395564) by Lawrence Chan (llchan):*\nYeah, I was thinking somewhere in the Footer struct, so we don't need to walk all the batches to sum them up.\r\n\r\nAlso they are indeed in the existing RecordBatch metadata, but the current implementation is inside a .cc file and I'd have to either copy+paste or modify my build to expose more of the existing code. Maybe we could expose something like this on the RecordBatchFileReader?\r\n```cpp\n\r\nStatus ReadRecordBatchMessage(int i, const flatbuf::RecordBatch** metadata) const;\r\n```\r\nThen it'd be possible to read the length fields without copying a bunch of code. Not sure if this is a good idea though, since it seems that we dont usually expose the flatbuffers through the public API. Maybe just a \r\n```cpp\n\r\nint64_t num_rows() const;\r\n```\r\nis all I really want, and that can read the new Footer field once it's in there, and walk the batches in the current format?"
        },
        {
            "created_at": "2019-08-21T16:47:33.766Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2296?focusedCommentId=16912507) by Wes McKinney (wesm):*\nAt minimum having a method in C++ to provide this information (without computing it yourself) seems useful. We don't need to change the file format"
        },
        {
            "created_at": "2019-08-24T16:19:48.509Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-2296?focusedCommentId=16914990) by Wes McKinney (wesm):*\nI took a brief look at this. It's more complicated than I expected because all the record batch metadata needs to be loaded. Currently the code for loading a block loads the body unconditionally, so we would need to have a function that loads _only_ the metadata. This is more work than I'm willing to volunteer \u2013 feel free to contribute a PR =) "
        }
    ]
}