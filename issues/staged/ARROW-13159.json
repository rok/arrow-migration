{
    "issue": {
        "title": "[Doc][Python] The use of IPython directive or doctest code blocks in the python user guide",
        "body": "***Note**: This issue was originally created as [ARROW-13159](https://issues.apache.org/jira/browse/ARROW-13159). Please see the [migration documentation](https://gist.github.com/toddfarmer/12aa88361532d21902818a6044fda4c3) for further details.*\n\n### Original Issue Description:\nFrom https://github.com/apache/arrow/pull/10266#discussion_r630837422\r\n\r\nWe are currently using the IPython directive in many places in the Python docs, so that something written as \r\n\r\n```Java\n\r\n.. ipython:: python\r\n\r\n  x = 1\r\n  x + 2\r\n```\r\n\r\nis converted during the doc build to (by running the code):\r\n\r\n```Java\n\r\n.. code-block:: ipython\r\n\r\n  In [1]: x = 1 \r\n\r\n  In [2]: x + 1\r\n  Out[2]: 2\r\n```\r\n\r\nRunning all the code during the doc build can be costly, and the more docs we add, the slower building the docs becomes.\r\n\r\nWe could convert all those to `code-block`, but personally I think ideally we still check the code examples for correctness, where applicable. For this, we could also use the doctest format instead of the IPython directive, and verify the docs using pytest doctests support. \r\n\r\nThis can be run separate as tests, and doesn't need to be part of doc building (at least when you only change wording / rst syntax, and want to verify the resulting html, you don't need to run the doctests).\r\n\r\nBut maintaining examples as doctests also certainly adds some extra cost (eg when outputs change slightly)\r\n\r\nAnother option could also be to add an option to the IPython directive to skip the execution of the code examples (I think this should be rather easy to add to the IPython directive, but then it's still a matter of passing this through from the build command invocation).\r\n\r\ncc `[~apitrou]` `[~amol-]`",
        "created_at": "2021-06-24T09:35:16.000Z",
        "updated_at": "2022-10-04T08:05:05.000Z",
        "labels": [
            "Migrated from Jira",
            "Component: Documentation",
            "Component: Python",
            "Type: enhancement"
        ],
        "closed": false
    },
    "comments": [
        {
            "created_at": "2021-07-14T03:26:18.768Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13159?focusedCommentId=17380274) by Weston Pace (westonpace):*\nHave we measured the time these add?\u00a0 It seems it would depend on the script.\u00a0 I tried with `code-block` vs `ipython` in `dataset.rst` and didn't see any noticeable difference."
        },
        {
            "created_at": "2021-07-22T13:51:44.354Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13159?focusedCommentId=17385512) by Alessandro Molina (amol-):*\nThere has been a similar discussion on the Apache Arrow Cookbook initiative too . \r\nIn general, I tend to prefer the doctest directive to the ipython one for a few reasons:\r\n\r\n1. It tends to decouple \"building the docs\" and \"testing the docs\". Those are two clearly separated concerns and commands. When building the doctest directives are in no way different from a standard code-block. They don't introduce any slow down, nor need the code to actually work. This allows a faster development cycle where the author of the documentation can write the docs and immediately see the formatting/output and separatedly focus on the actual codeblocks verification\n1. While ipython does support output verification using the @doctest directive decorator, it seem a bit of an afterthought. The doctest directive seems to have been designed from the begin with the goal of output verification and thus has better handling for \"wildcard output\", blanklines, etc...\n1. doctest directive is more explicit about output and variables scope/life cycle, fixtures etc...\n1. The doctest snippets, being plain code blocks once compiled (without interleaved output) can be easily copy/pasted as they are.\n   \n   Also there is a bit the fact that the ipython directive can get noisy when the output doesn't matter (or require extra work to suppress it) but that might be subjective in some cases it's actually helpful to see what happens step by step. "
        },
        {
            "created_at": "2021-07-22T14:08:53.216Z",
            "body": "***Note**: [Comment](https://issues.apache.org/jira/browse/ARROW-13159?focusedCommentId=17385523) by Alessandro Molina (amol-):*\nFYI, this seems to be the set of files where `ipython` directive is used\r\n\r\n```Java\n\r\nsource/python/data.rst\r\nsource/python/dataset.rst\r\nsource/python/ipc.rst\r\nsource/python/memory.rst\r\nsource/python/pandas.rst\r\nsource/python/parquet.rst\r\n```"
        }
    ]
}